// Equality
// ========

Equal: (A: Type) -> A -> A -> Type
  (A) (a) (b)
  self<P: (b: A) -> Equal(A)(a)(b) -> Type> ->
  (equal: P(a)(equal<A><a>)) ->
  P(b)(self)

equal: <A: Type> -> <a: A> -> Equal(A)(a)(a)
  <A> <a>
  <P> (equal)
  equal

// Bool
// ====

Bool: Type
  self<P: Bool -> Type> ->
  P(true) ->
  P(false) ->
  P(self)

true: Bool
  <> (t) (f) t

false: Bool
  <> (t) (f) f

_bool : (b: Bool) -> <P: Bool -> Type> -> P(true) -> P(false) -> P(b)
  (b) <P> (t) (f) b<P>(t)(f)

not: Bool -> Bool
  (a)
  a<() Bool>
  | false;
  | true;

or: Bool -> Bool -> Bool
  (a) (b)
  a<() Bool>
  | b<() Bool>
    | true;
    | true;;
  | b<() Bool>
    | true;
    | false;;

and: Bool -> Bool -> Bool
  (a) (b)
  a<() Bool>
  | b<() Bool>
    | true;
    | false;;
  | b<() Bool>
    | false;
    | false;;

// Cmp

Cmp : Type
  self<P: Cmp -> Type> ->
  P(ltn) ->
  P(eql) ->
  P(gtn) ->
  P(self)

ltn: Cmp
  <> (ltn) (eql) (gtn) ltn

eql: Cmp
  <> (ltn) (eql) (gtn) eql

gtn: Cmp
  <> (ltn) (eql) (gtn) gtn

// Bit
// ===

Bit : Type
  self<P: Bit -> Type> ->
  P(t0) ->
  P(t1) ->
  P(self)

t0: Bit
  <> (t0) (t1) t0

t1: Bit
  <> (t0) (t1) t1

// Nat
// ===

Nat: Type
  self<P: (x: Nat) -> Type> ->
  (zero: P(zero)) ->
  (succ: (pred: Nat) -> P(succ(pred))) ->
  P(self)

zero: Nat
  <> (z) (s) z

succ: Nat -> Nat
  (n)
  <> (z) (s) s(n)

pred: Nat -> Nat
  (n)
  n<() Nat>
  | zero;
  | (n.pred) n.pred;

fold_nat : (n: Nat) -> <P: Nat -> Type> -> P(zero) -> ((n:Nat) -> P(n) -> P(succ(n))) -> P(n)
  (n) <P> (z) (s)
  n<P>(z)((pred) s(pred)(fold_nat(pred)<P>(z)(s)))

double: Nat -> Nat
  (n)
  n<() Nat>
  | zero;
  | (n.pred) succ(succ(double(n.pred)));

add: Nat -> Nat -> Nat
  (n) (m)
  n<() Nat>
  | m;
  | (n.pred) succ(add(n.pred)(m));

sub: Nat -> Nat -> Nat
  (n) (m)
  m<() Nat>
  | n;
  | (m.pred) sub(pred(n))(m.pred);

mul: Nat -> Nat -> Nat
  (n) (m)
  n<() Nat>
  | n0;
  | (n.pred) add(m)(mul(n.pred)(m));

nat_cmp: Nat -> Nat -> Cmp
  (a) (b)
  a<() Cmp>
  | b<() Cmp>
    | eql;
    | (b.pred) ltn;;
  | (a.pred)
    b<() Cmp>
    | gtn;
    | (b.pred) nat_cmp(a.pred)(b.pred);;

nat_ltn: Nat -> Nat -> Bool
  (a) (b) nat_cmp(a)(b)<() Bool>(true)(false)(false)

nat_lte: Nat -> Nat -> Bool
  (a) (b) nat_cmp(a)(b)<() Bool>(true)(true)(false)

nat_eql: Nat -> Nat -> Bool
  (a) (b) nat_cmp(a)(b)<() Bool>(false)(true)(false)

nat_gte: Nat -> Nat -> Bool
  (a) (b) nat_cmp(a)(b)<() Bool>(false)(true)(true)

nat_gtn: Nat -> Nat -> Bool
  (a) (b) nat_cmp(a)(b)<() Bool>(false)(false)(true)

n0: Nat
  zero

n1: Nat
  succ(n0)

n2: Nat
  succ(n1)

n3: Nat
  succ(n2)

n4: Nat
  succ(n3)

n5: Nat
  succ(n4)

n6: Nat
  succ(n5)

n7: Nat
  succ(n6)

n8: Nat
  succ(n7)

n9: Nat
  succ(n8)

n9: Nat
  succ(n8)

n10: Nat
  succ(n9)

n11: Nat
  succ(n10)

n12: Nat
  succ(n11)

n13: Nat
  succ(n12)

n14: Nat
  succ(n13)

n15: Nat
  succ(n14)

n16: Nat
  succ(n15)

n17: Nat
  succ(n16)

n18: Nat
  succ(n17)

n19: Nat
  succ(n18)

n20: Nat
  succ(n19)

n21: Nat
  succ(n20)

n22: Nat
  succ(n21)

n23: Nat
  succ(n22)

n24: Nat
  succ(n23)

n25: Nat
  succ(n24)

n26: Nat
  succ(n25)

n27: Nat
  succ(n26)

n28: Nat
  succ(n27)

n29: Nat
  succ(n28)

n30: Nat
  succ(n29)

n31: Nat
  succ(n30)

n32: Nat
  succ(n31)

// Pair
// ====

Pair: Type -> Type -> Type
  (A) (B)
  self<P: Pair(A)(B) -> Type> ->
  (pair: (a: A) -> (b: B) -> P(pair<A><B>(a)(b))) ->
  P(self)

pair: <A: Type> -> <B: Type> -> A -> B -> Pair(A)(B)
  <> <> (a) (b)
  <> (pair)
  pair(a)(b)

fst: <A: Type> -> <B: Type> -> Pair(A)(B) -> A
  <A> <B> (pair)
  pair<() A>((a) (b) a)

snd: <A: Type> -> <B: Type> -> Pair(A)(B) -> B
  <A> <B> (pair)
  pair<() B>((a) (b) b)

// Maybe
// =====

Maybe: Type -> Type
  (A)
  self<P: Maybe(A) -> Type> ->
  (none: P(none<A>)) ->
  (some: (value: A) -> P(some<A>(value))) ->
  P(self)

none: <A: Type> -> Maybe(A)
  <>
  <> (none) () none

some: <A: Type> -> A -> Maybe(A)
  <> (value)
  <> () (some) some(value)

// List
// ====

List: (A: Type) -> Type
  (A)
  self<P: (x: List(A)) -> Type> ->
  (nil: P(nil<A>)) ->
  (cons: (head: A) -> (tail: List(A)) -> P(cons<A>(head)(tail))) ->
  P(self)

nil: <A: Type> -> List(A)
  <A>
  <> (nil) () nil

cons: <A: Type> -> (:A) -> (:List(A)) -> List(A)
  <A> (head) (tail)
  <> () (cons) cons(head)(tail)

find_aux: <A: Type> -> List(A) -> (A -> Nat -> Bool) -> Nat -> Maybe(Pair(A)(Nat))
  <A> (list) (cond) (indx)
  list<() Maybe(Pair(A)(Nat))>
  | none<Pair(A)(Nat)>;
  | (head) (tail)
    cond(head)(indx)<() Maybe(Pair(A)(Nat))>
    | some<Pair(A)(Nat)>(pair<A><Nat>(head)(indx));
    | find_aux<A>(tail)(cond)(succ(indx));;

find: <A: Type> -> List(A) -> (A -> Nat -> Bool) -> Maybe(Pair(A)(Nat))
  <A> (list) (cond)
  find_aux<A>(list)(cond)(zero)

take: <A: Type> -> Nat -> List(A) -> List(A)
  <A> (n) (list)
  list<() List(A)>
  | nil<A>;
  | (head) (tail)
    n<() List(A)>
    | nil<A>;
    | (pred) cons<A>(head)(take<A>(pred)(tail));;

drop: <A: Type> -> Nat -> List(A) -> List(A)
  <A> (n) (list)
  n<() List(A)>
  | list;
  | (pred)
    list<() List(A)>
    | nil<A>;
    | (head) (tail) drop<A>(pred)(tail);;

is_empty: <A: Type> -> List(A) -> Bool
  <A> (list)
  list<() Bool>
  | true;
  | (head) (tail) false;

zip_with: <A: Type> -> <B: Type> -> <C: Type> -> (A -> B -> C) -> List(A) -> List(B) -> List(C)
  <A> <B> <C> (fn) (as) (bs)
  as<() List(C)>
  | nil<C>;
  | (a.head) (a.tail)
    bs<() List(C)>
    | nil<C>;
    | (b.head) (b.tail)
      let head = fn(a.head)(b.head)
      let tail = zip_with<A><B><C>(fn)(a.tail)(b.tail)
      cons<C>(head)(tail);;

map: <A: Type> -> <B: Type> -> (A -> B) -> List(A) -> List(B)
  <A> <B> (fn) (list)
  list<() List(B)>
  | nil<B>;
  | (list.head) (list.tail)
    cons<B>(fn(list.head))(map<A><B>(fn)(list.tail));

fold: <A: Type> -> <B: Type> -> B -> (A -> B -> B) -> List(A) -> B
  <A> <B> (nil) (cons) (list)
  list<() B>
  | nil;
  | (list.head) (list.tail)
    cons(list.head)(fold<A><B>(nil)(cons)(list.tail));

all_satisfy: <A: Type> -> (A -> Bool) -> List(A) -> Bool
  <A> (cond) (list)
  list<() Bool>
  | true;
  | (head) (tail)
    cond(head)<() Bool>
    | all_satisfy<A>(cond)(tail);
    | false;;

any_satisfy: <A: Type> -> (A -> Bool) -> List(A) -> Bool
  <A> (cond) (list)
  list<() Bool>
  | false;
  | (head) (tail)
    cond(head)<() Bool>
    | true;
    | any_satisfy<A>(cond)(tail);;

all_true: List(Bool) -> Bool
  (list) all_satisfy<Bool>((x) x)(list)

any_true: List(Bool) -> Bool
  (list) any_satisfy<Bool>((x) x)(list)

list_len: <A: Type> -> List(A) -> Nat
  <A> (list)
  list<() Nat>
  | zero;
  | (head) (tail)
    succ(list_len<A>(tail));

concat: <A: Type> -> List(A) -> List(A) -> List(A)
  <A> (as) (bs)
  as<() List(A)>
  | bs;
  | (head) (tail)
    cons<A>(head)(concat<A>(tail)(bs));

flatten : <A: Type> -> List(List(A)) -> List(A)
  <A> (as)
  as<() List(A)>
  | nil<A>;
  | (head) (tail)
    concat<A>(head)(flatten<A>(tail));

single : <A : Type> -> (x : A) -> List(A)
  <A> (x) cons<A>(x)(nil<A>)

Concat: (A : Type) -> Type
  (A) List(A) -> List(A)

list_to_concat: <A: Type> -> (xs: List(A)) -> Concat(A)
  <A> (xs)
  xs<() Concat(A)>
  | (ys) ys;
  | (head) (tail) (ys) cons<A>(head)(list_to_concat<A>(tail)(ys));

concat_to_list: <A: Type> -> (xs: Concat(A)) -> List(A)
  <A> (xs) xs(nil<A>)

// Bits
// ====

Bits: Type
  self<P: Bits -> Type> ->
  (be: P(be)) ->
  (b0: (pred: Bits) -> P(b0(pred))) ->
  (b1: (pred: Bits) -> P(b1(pred))) ->
  P(self)

be: Bits
  <P> (be) (b0) (b1) be

b0: (bs: Bits) -> Bits
  (bs) <P> (be) (b0) (b1) b0(bs)

b1: (bs: Bits) -> Bits
  (bs) <P> (be) (b0) (b1) b1(bs)

bits_concat: Bits -> Bits -> Bits
  (a) (b)
  a<() Bits>
  | b;
  | (a.pred) b0(bits_concat(a.pred)(b));
  | (a.pred) b1(bits_concat(a.pred)(b));

// Word
// ====

Word: Nat -> Type
  (size)
  self<P: (size: Nat) -> Word(size) -> Type> ->
  (we: P(zero)(we)) ->
  (w0: <size: Nat> -> (pred: Word(size)) -> P(succ(size))(w0<size>(pred))) ->
  (w1: <size: Nat> -> (pred: Word(size)) -> P(succ(size))(w1<size>(pred))) ->
  P(size)(self)

we: Word(zero)
  <P> (we) (w0) (w1)
  we

w0: <size: Nat> -> Word(size) -> Word(succ(size))
  <size> (wo) <P> (we) (w0) (w1)
  w0<size>(wo)

w1: <size: Nat> -> Word(size) -> Word(succ(size))
  <size> (wo) <P> (we) (w0) (w1)
  w1<size>(wo)

word_inc: <size: Nat> -> Word(size) -> Word(size)
  <size> (word)
  word<(size) () Word(size)>
  | we;
  | <size> (pred) w1<size>(pred);
  | <size> (pred) w0<size>(word_inc<size>(pred));

word_add_aux: <size: Nat> -> Word(size) -> Word(size) -> Bool -> Word(size)
  <size> (a) (b) (c)
  ( a<(a.size) () Word(a.size) -> Word(a.size)>
  | (b) we;
  | <a.size> (a.pred) (b)
    ( b<(b.size) () Word(pred(b.size)) -> Word(b.size)>
    | (a.pred)
      we;
    | <b.size> (b.pred) (a.pred)
      c<() Word(succ(b.size))>
      | w1<b.size>(word_add_aux<b.size>(a.pred)(b.pred)(false));  // a=0 b=0 c=0
      | w0<b.size>(word_add_aux<b.size>(a.pred)(b.pred)(false));; // a=0 b=0 c=1
    | <b.size> (b.pred) (a.pred)
      c<() Word(succ(b.size))>
      | w0<b.size>(word_add_aux<b.size>(a.pred)(b.pred)(true));   // a=0 b=1 c=0
      | w1<b.size>(word_add_aux<b.size>(a.pred)(b.pred)(false));  // a=0 b=1 c=1
    ;)(a.pred);
  | <a.size> (a.pred) (b)
    ( b<(b.size) () Word(pred(b.size)) -> Word(b.size)>
    | (a.pred) we;
    | <b.size> (b.pred) (a.pred)
      c<() Word(succ(b.size))>
      | w0<b.size>(word_add_aux<b.size>(a.pred)(b.pred)(true));   // a=1 b=0 c=0
      | w1<b.size>(word_add_aux<b.size>(a.pred)(b.pred)(false));; // a=1 b=0 c=1
    | <b.size> (b.pred) (a.pred)
      c<() Word(succ(b.size))>
      | w1<b.size>(word_add_aux<b.size>(a.pred)(b.pred)(true));   // a=1 b=1 c=0
      | w0<b.size>(word_add_aux<b.size>(a.pred)(b.pred)(true));   // a=1 b=1 c=1
    ;)(a.pred)
  ;)(b)

word_add: <size: Nat> -> Word(size) -> Word(size) -> Word(size)
  <size> (a) (b) word_add_aux<size>(a)(b)(false)

word_cmp_aux: <size: Nat> -> Word(size) -> Word(size) -> Cmp -> Cmp
  <size> (a) (b) (c)
  ( a<(a.size) () Word(a.size) -> Cmp>
  | (b) c;
  | <a.size> (a.pred) (b)
    ( b<(b.size) () Word(pred(b.size)) -> Cmp>
    | (a.pred) c;
    | <b.size> (b.pred) (a.pred) word_cmp_aux<b.size>(a.pred)(b.pred)(c);
    | <b.size> (b.pred) (a.pred) word_cmp_aux<b.size>(a.pred)(b.pred)(ltn)
    ; )(a.pred);
  | <a.size> (a.pred) (b)
    ( b<(b.size) () Word(pred(b.size)) -> Cmp>
    | (a.pred) c;
    | <b.size> (b.pred) (a.pred) word_cmp_aux<b.size>(a.pred)(b.pred)(gtn);
    | <b.size> (b.pred) (a.pred) word_cmp_aux<b.size>(a.pred)(b.pred)(c)
    ; )(a.pred)
  ; )(b)

word_cmp: <size: Nat> -> Word(size) -> Word(size) -> Cmp
  <size> (a) (b)
  word_cmp_aux<size>(a)(b)(eql)

// a > b
word_ltn: <size:Nat> -> Word(size) -> Word(size) -> Bool
  <size> (a) (b)
  word_cmp<size>(a)(b)<() Bool>(true)(false)(false)

// a <= b
word_lte: <size:Nat> -> Word(size) -> Word(size) -> Bool
  <size> (a) (b)
  word_cmp<size>(a)(b)<() Bool>(true)(true)(false)

// a == b
word_eql: <size:Nat> -> Word(size) -> Word(size) -> Bool
  <size> (a) (b)
  word_cmp<size>(a)(b)<() Bool>(false)(true)(false)

// a >= b
word_gte: <size:Nat> -> Word(size) -> Word(size) -> Bool
  <size> (a) (b)
  word_cmp<size>(a)(b)<() Bool>(false)(true)(true)

// a > b
word_gtn: <size:Nat> -> Word(size) -> Word(size) -> Bool
  <size> (a) (b)
  word_cmp<size>(a)(b)<() Bool>(false)(false)(true)

word_to_bits: <size: Nat> -> Word(size) -> Bits
  <size> (a)
  a<() () Bits>
  | be;
  | <size> (pred) b0(word_to_bits<size>(pred));
  | <size> (pred) b1(word_to_bits<size>(pred));

// Uint32
// ======

U32: Type
  Word(n32)

u32_0: U32
  w0<n31>(w0<n30>(w0<n29>(w0<n28>(w0<n27>(w0<n26>(w0<n25>(w0<n24>(
  w0<n23>(w0<n22>(w0<n21>(w0<n20>(w0<n19>(w0<n18>(w0<n17>(w0<n16>(
  w0<n15>(w0<n14>(w0<n13>(w0<n12>(w0<n11>(w0<n10>(w0<n9 >(w0<n8 >(
  w0<n7 >(w0<n6 >(w0<n5 >(w0<n4 >(w0<n3 >(w0<n2 >(w0<n1 >(w0<n0 >(
  we))))))))))))))))))))))))))))))))

u32_inc: U32 -> U32
  word_inc<n32>

u32_add: U32 -> U32 -> U32
  word_add<n32>

// a < b
u32_ltn: U32 -> U32 -> Bool
  word_ltn<n32>

// a <= b
u32_lte: U32 -> U32 -> Bool
  word_lte<n32>

// a == b
u32_eql: U32 -> U32 -> Bool
  word_eql<n32>

// a >= b
u32_gte: U32 -> U32 -> Bool
  word_gte<n32>

// a > b
u32_gtn: U32 -> U32 -> Bool
  word_gtn<n32>

// Char
// ====

Char: Type
  Word(n32)

ascii: Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Char
  (a) (b) (c) (d) (e) (f) (g) (h)
  let wA = a<() <size: Nat> -> Word(size) -> Word(succ(size))>(w0)(w1)
  let wB = b<() <size: Nat> -> Word(size) -> Word(succ(size))>(w0)(w1)
  let wC = c<() <size: Nat> -> Word(size) -> Word(succ(size))>(w0)(w1)
  let wD = d<() <size: Nat> -> Word(size) -> Word(succ(size))>(w0)(w1)
  let wE = e<() <size: Nat> -> Word(size) -> Word(succ(size))>(w0)(w1)
  let wF = f<() <size: Nat> -> Word(size) -> Word(succ(size))>(w0)(w1)
  let wG = g<() <size: Nat> -> Word(size) -> Word(succ(size))>(w0)(w1)
  let wH = h<() <size: Nat> -> Word(size) -> Word(succ(size))>(w0)(w1)
  wH<n31>(wG<n30>(wF<n29>(wE<n28>(wD<n27>(wC<n26>(wB<n25>(wA<n24>(
  w0<n23>(w0<n22>(w0<n21>(w0<n20>(w0<n19>(w0<n18>(w0<n17>(w0<n16>(
  w0<n15>(w0<n14>(w0<n13>(w0<n12>(w0<n11>(w0<n10>(w0<n9 >(w0<n8 >(
  w0<n7 >(w0<n6 >(w0<n5 >(w0<n4 >(w0<n3 >(w0<n2 >(w0<n1 >(w0<n0 >(
  we))))))))))))))))))))))))))))))))


// String
// ======

String: Type
  List(Char)

string_eql: String -> String -> Bool
  (a) (b)
  let eql_len = nat_eql(list_len<Char>(a))(list_len<Char>(b))
  let eql_val = all_satisfy<Bool>((x) x)(zip_with<Char><Char><Bool>(u32_eql)(a)(b))
  and(eql_len)(eql_val)

string_to_bits: String -> Bits
  fold<Char><Bits>(be)((chr) (res) bits_concat(word_to_bits<n32>(chr))(res))

nat_to_string: Nat -> String
  (n)
  n<() String>
  | cons<Char>(_z)(nil<Char>);
  | (pred) cons<Char>(_s)(nat_to_string(pred));

// Map
// ===

Map: (A: Type) -> Type
  (A)
  self<P: Map(A) -> Type> ->
  (empty:
    P(empty<A>)) ->
  (multi:
    (val: Maybe(A)) ->
    (lft: Map(A)) ->
    (rgt: Map(A)) ->
    P(multi<A>(val)(lft)(rgt))) ->
  P(self)

empty: <A: Type> -> Map(A)
  <>
  <> (empty) ()
  empty

multi: <A: Type> -> Maybe(A) -> Map(A) -> Map(A) -> Map(A)
  <> (val) (lft) (rgt)
  <> () (multi)
  multi(val)(lft)(rgt)

insert: <A: Type> -> Bits -> A -> Map(A) -> Map(A)
  <A> (bits) (val) (map)
  bits<() Map(A)>
  | map<() Map(A)>
    | multi<A>(some<A>(val))(empty<A>)(empty<A>);
    | (map.val) (map.lft) (map.rgt)
      multi<A>(some<A>(val))(map.lft)(map.rgt);;
  | (bits.pred)
    map<() Map(A)>
    | multi<A>(none<A>)(insert<A>(bits.pred)(val)(empty<A>))(empty<A>);
    | (map.val) (map.lft) (map.rgt)
      multi<A>(map.val)(insert<A>(bits.pred)(val)(map.lft))(map.rgt);;
  | (bits.pred)
    map<() Map(A)>
    | multi<A>(none<A>)(empty<A>)(insert<A>(bits.pred)(val)(empty<A>));
    | (map.val) (map.lft) (map.rgt)
      multi<A>(map.val)(map.lft)(insert<A>(bits.pred)(val)(map.rgt));;

lookup: <A: Type> -> Bits -> Map(A) -> Maybe(A)
  <A> (bits) (map)
  bits<() Maybe(A)>
  | map<() Maybe(A)>
    | none<A>;
    | (map.val) (map.lft) (map.rgt)
      map.val;;
  | (bits.pred)
    map<() Maybe(A)>
    | none<A>;
    | (map.val) (map.lft) (map.rgt)
      lookup<A>(bits.pred)(map.lft);;
  | (bits.pred)
    map<() Maybe(A)>
    | none<A>;
    | (map.val) (map.lft) (map.rgt)
      lookup<A>(bits.pred)(map.rgt);;

map_maybe: <A: Type> -> <B: Type> -> (A -> B) -> Maybe(A) -> Maybe(B)
  <A> <B> (fn) (maybe)
  maybe<() Maybe(B)>
  | none<B>;
  | (value) some<B>(fn(value));

// Term
// ====

Term: Type
  self<P: Term -> Type> ->
  (var:
    (hash: U32) ->
    (indx: Nat) ->
    P(var(indx))) ->
  (ref:
    (hash: U32) ->
    (name: String) ->
    P(ref(name))) ->
  (typ:
    (hash: U32) ->
    P(typ)) ->
  (all:
    (hash: U32) ->
    (eras: Bool) ->
    (self: String) ->
    (name: String) ->
    (bind: Term) ->
    (body: Term) ->
    P(all(eras)(self)(name)(bind)(body))) ->
  (lam:
    (hash: U32) ->
    (eras: Bool) ->
    (name: String) ->
    (body: Term) ->
    P(lam(eras)(name)(body))) ->
  (app:
    (hash: U32) ->
    (eras: Bool) ->
    (func: Term) ->
    (argm: Term) ->
    P(app(eras)(func)(argm))) ->
  (lit:
    (hash: U32) ->
    (name: String) ->
    (expr: Term) ->
    (body: Term) ->
    P(lit(name)(expr)(body))) ->
  (ann:
    (hash: U32) ->
    (done: Bool) ->
    (expr: Term) ->
    (type: Term) ->
    P(ann(done)(expr)(type))) ->
  P(self)

var: Nat -> Term
  (indx)
  <> (var) () () () () () () ()
  var(u32_0)(indx)

ref: String -> Term
  (name)
  <> () (ref) () () () () () ()
  ref(u32_0)(name)

typ: Term
  <> () () (typ) () () () () ()
  typ(u32_0)

all: Bool -> String -> String -> Term -> Term -> Term
  (eras) (self) (name) (bind) (body)
  <> () () () (all) () () () ()
  all(u32_0)(eras)(self)(name)(bind)(body)

lam: Bool -> String -> Term -> Term
  (eras) (name) (body)
  <> () () () () (lam) () () ()
  lam(u32_0)(eras)(name)(body)

app: Bool -> Term -> Term -> Term
  (eras) (func) (argm)
  <> () () () () () (app) () ()
  app(u32_0)(eras)(func)(argm)

lit: String -> Term -> Term -> Term
  (name) (expr) (body)
  <> () () () () () () (lit) ()
  lit(u32_0)(name)(expr)(body)

ann: Bool -> Term -> Term -> Term
  (done) (expr) (type)
  <> () () () () () () () (ann)
  ann(u32_0)(done)(expr)(type)

// Definitions
// ===========

Def: Type
  Pair(Term)(Term)

File: Type
  Map(Def)

get_def: File -> String -> Maybe(Def)
  (file) (name)
  lookup<Def>(string_to_bits(name))(file)

get_type: File -> String -> Maybe(Term)
  (file) (name)
  map_maybe<Def><Term>(fst<Term><Term>)(get_def(file)(name))

get_term: File -> String -> Maybe(Term)
  (file) (name)
  map_maybe<Def><Term>(snd<Term><Term>)(get_def(file)(name))

// Parsing
// =======

Parsed: (A: Type) -> Type
  (A) Maybe(Pair(String)(A))

parsed: <A: Type> -> String -> A -> Parsed(A)
  <A> (code) (val)
  some<Pair(String)(A)>(pair<String><A>(code)(val))

noparse: <A: Type> -> Parsed(A)
  <A> none<Pair(String)(A)>

parsing
  : <A: Type> ->
    <B: Type> ->
    (x: Parsed(A)) ->
    (f: String -> A -> Parsed(B)) ->
    Parsed(B)
  <A> <B> (x) (f)
  x<() Parsed(B)>
  | noparse<B>;
  | (value) value<() Parsed(B)>(f);

is_space: Char -> Bool
  (c)
    let is_spc = word_eql<n32>(c)(_space)
    let is_tab = word_eql<n32>(c)(_HT)
    let is_lin = word_eql<n32>(c)(_LF)
    or(is_spc)(or(is_tab)(is_lin))

is_name: Char -> Bool
  (c)
    let is_num = and(word_gte<n32>(c)(_0))(word_lte<n32>(c)(_9))
    let is_low = and(word_gte<n32>(c)(_a))(word_lte<n32>(c)(_z))
    let is_upp = and(word_gte<n32>(c)(_A))(word_lte<n32>(c)(_Z))
    let is_und = word_eql<n32>(c)(_lowbar)
    or(is_num)(or(is_low)(or(is_upp)(is_und)))

first_valid: <A: Type> -> List(Maybe(A)) -> Maybe(A)
  <A> (list)
  list<() Maybe(A)>
  | none<A>;
  | (head) (tail)
    head<() Maybe(A)>
    | first_valid<A>(tail);
    | (value) some<A>(value);;

drop_while: (Char -> Bool) -> String -> String
  (cond) (code)
  code<() String>
  | nil<Char>;
  | (head) (tail)
    cond(head)<() String>
    | drop_while(cond)(tail);
    | cons<Char>(head)(tail);;

drop_spaces: String -> String
  drop_while(is_space)

// TODO: /* multi-line comment */
drop_comment: String -> String
  (code)
  let code = drop_spaces(code)
  // Removes "// ... \n"
  let code = 
    let fst2 = take<Char>(n2)(code)
    let sla2 = cons<Char>(_sol)(cons<Char>(_sol)(nil<Char>))
    string_eql(fst2)(sla2)<() String>
    | let code = drop<Char>(n2)(code)
      let code = drop_while((x) not(u32_eql(_LF)(x)))(code)
      code;
    | code;
  code

// TODO: remove comments
next: String -> String
  (code) drop_spaces(code)

parse_str: String -> String -> Parsed(String)
  (code) (str)
  str<() Parsed(String)>
  | parsed<String>(code)(str);
  | (str_head) (str_tail)
    code<() Parsed(String)>
    | noparse<String>;
    | (code_head) (code_tail)
      u32_eql(code_head)(str_head)<() Parsed(String)>
      | parse_str(code_tail)(str_tail);
      | noparse<String>;;;

parse_opt: String -> Pair(String)(String) -> Parsed(Bool)
  (code) (opts)
  opts<() Parsed(Bool)>
  | (ch0) (ch1)
    parse_str(code)(ch1)<() Parsed(Bool)>
    | parse_str(code)(ch0)<() Parsed(Bool)>
      | noparse<Bool>;
      | (got) got<() Parsed(Bool)>((code) (skip) parsed<Bool>(code)(true));;
    | (got) got<() Parsed(Bool)>((code) (skip) parsed<Bool>(code)(false));;

parse_nam_aux: String -> Pair(String)(String)
  (code)
  let ret = pair<String><String>
  code<() Pair(String)(String)>
  | ret(code)(nil<Char>);
  | (head) (tail)
    is_name(head)<() Pair(String)(String)>
    | parse_nam_aux(tail)<() Pair(String)(String)>
      | (code) (rest) ret(code)(cons<Char>(head)(rest));;
    | ret(code)(nil<Char>);;

parse_nam: String -> Bool -> Maybe(Pair(String)(String))
  (code) (allow_empty)
  parse_nam_aux(code)<() Parsed(String)>
  | (code) (name)
    or(allow_empty)(not(is_empty<Char>(name)))<() Parsed(String)>
    | parsed<String>(code)(name);
    | noparse<String>;;

// Stringification
// ===============

nest : Bool -> String -> String
  (b) (s)
  let cat = concat<Char>
  b<() String>
  | cat(LT)(cat(s)(GT));
  | cat(LPAR)(cat(s)(RPAR));

sp : String -> String
  (s) flatten<Char>(cons<String>(SPAC)(cons<String>(s)(single<String>(SPAC))))

ERR : String
  cons<Char>(_hash)(cons<Char>(_E)(cons<Char>(_R)(single<Char>(_R))))

stringify_term_go : List(String) -> Term -> String
  (vars) (term)
  let go = stringify_term_go
  let cons    = cons<String>
  let flatten = flatten<Char>
  let space   = single<Char>(_space)
  let single  = single<String>
  term<() String>
  |{-var-} () (indx) 
    let res = find<String>(vars)(() (i) nat_eql(indx)(i))
    res<() String>(ERR)((x) fst<String><Nat>(x));
  |{-ref-} () (nam) nam;
  |{-typ-} () TYPS;
  |{-all-} () (e) (s) (n) (h) (b)
    let body = go(cons(n)(cons(s)(vars)))(b)
    let head = nest(e)(flatten(cons(n)(cons(sp(COLO))(single(go(cons(s)(vars))(h))))))
    flatten(cons(s)(cons(head)(cons(sp(ARR0))(single(body)))));
  |{-lam-} () (e) (n) (b)
    let head = nest(e)(n)
    let body = go(cons(n)(vars))(b)
    flatten(cons(head)(cons(space)(single(body))));
  |{-app-} () (e) (f) (a)
    let fref = go(vars)(f)
    let fpar = nest(false)(fref)
    let func =
      f<() String>
      |{-var-} () () fref;
      |{-ref-} () () fref;
      |{-typ-} () fpar;
      |{-all-} () () () () () () fref;
      |{-lam-} () () () () fpar;
      |{-app-} () () () () fpar;
      |{-lit-} () () () () fpar;
      |{-ann-} () () () () fpar;
    let argm = nest(e)(go(vars)(a))
    flatten(cons(func)(single(argm)));
  |{-lit-} () (n) (x) (b)
    flatten(cons(LETS)(cons(n)(cons(sp(EQLS))(single(go(cons(n)(vars))(b))))));
  |{-ann-} () () (x) (t)
    flatten(cons(go(vars)(x))(cons(sp(COLS))(single(go(vars)(t)))));

stringify_term : Term -> String
  (t) stringify_term_go(nil<String>)(t)

// Parsing
// =======

parse_par: String -> List(String) -> Parsed(Term)
  (code) (vars)
  parsing<String><Term>(parse_str(next(code))(LPAR)) | (code) (skip)
  parsing<Term  ><Term>(parse_term(next(code))(vars)) | (code) (term)
  parsing<String><Term>(parse_str(next(code))(RPAR)) | (code) (skip)
  parsed<Term>(code)(term);;;

parse_com: String -> List(String) -> Parsed(Term)
  (code) (vars)
  parsing<String><Term>(parse_str(next(code))(DASH))  | (code) (skip)
  parsing<String><Term>(parse_nam(     code )(false)) | (code) (name)
  parsing<String><Term>(parse_str(next(code))(DASH))  | (code) (skip)
  parsing<Term  ><Term>(parse_term(next(code))(vars))  | (code) (term)
  parsed<Term>(code)(term);;;;

parse_all: String -> List(String) -> Parsed(Term)
  (code) (vars)
  parsing<String><Term>(parse_nam(next(code))(true)) | (code) (self)
  parsing<Bool  ><Term>(parse_opt(     code )(OPEN)) | (code) (eras)
  parsing<String><Term>(parse_nam(next(code))(true)) | (code) (name)
  parsing<String><Term>(parse_str(next(code))(COLO)) | (code) (skip)
  let vars = cons<String>(self)(vars)
  parsing<Term  ><Term>(parse_term(next(code))(vars)) | (code) (bind)
  parsing<Bool  ><Term>(parse_opt(next(code))(CLOS)) | (code) (skip)
  parsing<String><Term>(parse_str(next(code))(ARR0)) | (code) (skip)
  let vars = cons<String>(name)(vars)
  parsing<Term  ><Term>(parse_term(next(code))(vars)) | (code) (body)
  parsed<Term>(code)(all(eras)(self)(name)(bind)(body));;;;;;;;

parse_lam: String -> List(String) -> Parsed(Term)
  (code) (vars)
  parsing<Bool  ><Term>(parse_opt(next(code))(OPEN)) | (code) (eras)
  parsing<String><Term>(parse_nam(next(code))(true)) | (code) (name)
  parsing<Bool  ><Term>(parse_opt(next(code))(CLOS)) | (code) (skip)
  let vars = cons<String>(name)(vars)
  parsing<Term  ><Term>(parse_term(next(code))(vars)) | (code) (body)
  parsed<Term>(code)(lam(eras)(name)(body));;;;

parse_let: String -> List(String) -> Parsed(Term)
  (code) (vars)
  parsing<String><Term>(parse_str(next(code))(LETS))  | (code) (skip)
  parsing<String><Term>(parse_nam(next(code))(false)) | (code) (name)
  parsing<String><Term>(parse_str(next(code))(EQLS))  | (code) (skip)
  parsing<Term  ><Term>(parse_term(next(code))(vars))  | (code) (expr)
  let vars = cons<String>(name)(vars)
  parsing<Term  ><Term>(parse_term(next(code))(vars))  | (code) (body)
  parsed<Term>(code)(lit(name)(expr)(body));;;;;

parse_typ: String -> List(String) -> Parsed(Term)
  (code) (vars)
  parsing<String><Term>(parse_str(next(code))(TYPS)) | (code) (skip)
  parsed<Term>(code)(typ);

parse_var: String -> List(String) -> Parsed(Term)
  (code) (vars)
  parsing<String><Term>(parse_nam(next(code))(false)) | (code) (name)
  find<String>(vars)((x) (i) string_eql(x)(name))<() Parsed(Term)>
  | parsed<Term>(code)(ref(name));
  | (value) parsed<Term>(code)(var(snd<String><Nat>(value)));;

parse_app: String -> Term -> List(String) -> Parsed(Term)
  (code) (func) (vars)
  parsing<Bool><Term>(parse_opt(      code )(OPEN)) | (code) (eras)
  parsing<Term><Term>(parse_term(next(code))(vars)) | (code) (argm)
  parsing<Bool><Term>(parse_opt( next(code))(CLOS)) | (code) (skip)
  parsed<Term>(code)(app(eras)(func)(argm));;;

parse_pip: String -> Term -> List(String) -> Parsed(Term)
  (code) (func) (vars)
  parsing<String><Term>(parse_str(next(code))(PIPE)) | (code) (skip)
  parsing<Term  ><Term>(parse_term(next(code))(vars)) | (code) (argm)
  parsing<String><Term>(parse_str(next(code))(SEMI)) | (code) (skip)
  parsed<Term>(code)(app(false)(func)(argm));;;

parse_arr: String -> Term -> List(String) -> Parsed(Term)
  (code) (bind) (vars)
  parsing<String><Term>(parse_str(next(code))(ARR0)) | (code) (skip)
  let vars = cons<String>(nil<Char>)(cons<String>(nil<Char>)(vars))
  parsing<Term  ><Term>(parse_term(next(code))(vars)) | (code) (body)
  let term = all(false)(nil<Char>)(nil<Char>)(shift(bind)(n1)(n0))(body)
  parsed<Term>(code)(term);;

parse_ann: String -> Term -> List(String) -> Parsed(Term)
  (code) (expr) (vars)
  parsing<String><Term>(parse_str(next(code))(COLS)) | (code) (skip)
  parsing<Term  ><Term>(parse_term(next(code))(vars)) | (code) (type)
  parsed<Term>(code)(ann(false)(expr)(type));;

parse_pst: String -> Term -> List(String) -> Parsed(Term)
  (code) (term) (vars)
  let post_parse = first_valid<Pair(String)(Term)>(
    cons<Parsed(Term)>(parse_app(code)(term)(vars))(
    cons<Parsed(Term)>(parse_pip(code)(term)(vars))(
    cons<Parsed(Term)>(parse_arr(code)(term)(vars))(
    cons<Parsed(Term)>(parse_ann(code)(term)(vars))(
    nil<Parsed(Term)>)))))
  post_parse<() Parsed(Term)>
  | parsed<Term>(code)(term);
  | (value)
    value<() Parsed(Term)>
    | (code) (term) parse_pst(code)(term)(vars);;

parse_term: String -> List(String) -> Parsed(Term)
  (code) (vars)
  let base_parse = first_valid<Pair(String)(Term)>(
    cons<Parsed(Term)>(parse_all(code)(vars))(
    cons<Parsed(Term)>(parse_lam(code)(vars))(
    cons<Parsed(Term)>(parse_let(code)(vars))(
    cons<Parsed(Term)>(parse_par(code)(vars))(
    cons<Parsed(Term)>(parse_com(code)(vars))(
    cons<Parsed(Term)>(parse_typ(code)(vars))(
    cons<Parsed(Term)>(parse_var(code)(vars))(
    nil<Parsed(Term)>))))))))
  parsing<Term><Term>(base_parse)((code) (term)
    parse_pst(code)(term)(vars))

parse_file_aux: String -> File -> Parsed(File)
  (code) (file)
  let vars = nil<String>
  let next = 
    parsing<String><File>(parse_nam( next(code))(false)) | (code) (name)
    parsing<String><File>(parse_str( next(code))(COLO))  | (code) (skip)
    parsing<Term  ><File>(parse_term(next(code))(vars))  | (code) (type)
    parsing<Term  ><File>(parse_term(next(code))(vars))  | (code) (term)
    let defn = pair<Term><Term>(type)(term)
    let file = insert<Def>(string_to_bits(name))(defn)(file)
    //let file = insert<Def>(string_to_bits(name))(pair<Term><Term>(typ)(typ))(file)
    parsed<File>(code)(file);;;;
  next<() Parsed(File)>
  | parsed<File>(code)(file);
  | (p) p<() Parsed(File)> | (code) (file) parse_file_aux(code)(file);;

parse_file: String -> Parsed(File)
  (code) parse_file_aux(code)(empty<Def>)

// Substitution
// ============

shift: Term -> Nat -> Nat -> Term
  (term) (inc) (dep)
  term<() Term>
  | (hash) (indx)
    nat_ltn(indx)(dep)<() Term>
    | var(indx);
    | var(add(inc)(indx));;
  | (hash) (name)
    ref(name);
  | (hash)
    typ;
  | (hash) (eras) (self) (name) (bind) (body)
    let eras = eras
    let self = self
    let name = name
    let bind = shift(bind)(inc)(succ(dep))
    let body = shift(body)(inc)(succ(succ(dep)))
    all(eras)(self)(name)(bind)(body);
  | (hash) (eras) (name) (body)
    let eras = eras
    let name = name
    let body = shift(body)(inc)(succ(dep))
    lam(eras)(name)(body);
  | (hash) (eras) (func) (argm)
    let eras = eras
    let func = shift(func)(inc)(dep)
    let argm = shift(argm)(inc)(dep)
    app(eras)(func)(argm);
  | (hash) (name) (expr) (body)
    let name = name
    let expr = shift(expr)(inc)(dep)
    let body = shift(expr)(inc)(succ(dep))
    lit(name)(expr)(body);
  | (hash) (done) (expr) (type)
    let done = done
    let expr = shift(expr)(inc)(dep)
    let type = shift(expr)(inc)(dep)
    ann(done)(expr)(type);

subst: Term -> Term -> Nat -> Term
  (term) (val) (dep)
  term<() Term>
  | (hash) (indx)
    nat_cmp(indx)(dep)<() Term>
    | var(indx);
    | val;
    | var(pred(indx));;
  | (hash) (name)
    ref(name);
  | (hash)
    typ;
  | (hash) (eras) (self) (name) (bind) (body)
    let eras = eras
    let self = self
    let name = name
    let bind = subst(bind)(shift(val)(n1)(n0))(succ(dep))
    let body = subst(body)(shift(val)(n2)(n0))(succ(succ(dep)))
    all(eras)(self)(name)(bind)(body);
  | (hash) (eras) (name) (body)
    let eras = eras
    let name = name
    let body = subst(body)(shift(val)(n1)(n0))(succ(dep))
    lam(eras)(name)(body);
  | (hash) (eras) (func) (argm)
    let eras = eras
    let func = subst(func)(val)(dep)
    let argm = subst(argm)(val)(dep)
    app(eras)(func)(argm);
  | (hash) (name) (expr) (body)
    let name = name
    let expr = subst(expr)(val)(dep)
    let body = subst(expr)(shift(val)(n1)(n0))(succ(dep))
    lit(name)(expr)(body);
  | (hash) (done) (expr) (type)
    let done = done
    let expr = subst(expr)(val)(dep)
    let type = subst(expr)(val)(dep)
    ann(done)(expr)(type);

// Evaluation
// ==========

HTerm: Type
  self<P: HTerm -> Type> ->
  (hvar:
    (indx: Nat) ->
    (posi: Bool) ->
    P(hvar(indx)(posi))) ->
  (href:
    (name: String) ->
    P(href(name))) ->
  (htyp:
    P(htyp)) ->
  (hall:
    (eras: Bool) ->
    (bind: HTerm -> HTerm) ->
    (body: HTerm -> HTerm -> HTerm) ->
    P(hall(eras)(bind)(body))) ->
  (hlam:
    (body: HTerm -> HTerm) ->
    P(hlam(body))) ->
  (happ:
    (func: HTerm) ->
    (argm: HTerm) ->
    P(happ(func)(argm))) ->
  P(self)

hvar: Nat -> Bool -> HTerm
  (indx) (posi)
  <> (hvar) () () () () ()
  hvar(indx)(posi)

href: String -> HTerm
  (name)
  <> () (href) () () () ()
  href(name)

htyp: HTerm
  <> () () (htyp) () () ()
  htyp

hall: Bool -> (HTerm -> HTerm) -> (HTerm -> HTerm -> HTerm) -> HTerm
  (eras) (bind) (body)
  <> () () () (hall) () ()
  hall(eras)(bind)(body)

hlam: (HTerm -> HTerm) -> HTerm
  (body)
  <> () () () () (hlam) ()
  hlam(body)

happ: HTerm -> HTerm -> HTerm
  (func) (argm)
  <> () () () () () (happ)
  happ(func)(argm)

to_high_order: Term -> List(HTerm) -> Nat -> HTerm
  (term) (vars) (depth)
  term<() HTerm>
  | (hash) (indx)
    find<HTerm>(vars)((x) (i) nat_eql(i)(indx))<() HTerm>
    | hvar(sub(succ(indx))(depth))(false);
    | (value) fst<HTerm><Nat>(value);;
  | (hash) (name)
    href(name);
  | (hash)
    htyp;
  | (hash) (eras) (self) (name) (bind) (body)
    hall
    | eras;
    | (s) to_high_order(bind)(cons<HTerm>(s)(vars))(succ(depth));
    | (s) (x) to_high_order(body)(cons<HTerm>(x)(cons<HTerm>(s)(vars)))(succ(succ(depth)));;
  | (hash) (eras) (name) (body)
    eras<() HTerm>
    | to_high_order(subst(body)(ref(nil<Char>))(n0))(vars)(depth);
    | hlam((x) to_high_order(body)(cons<HTerm>(x)(vars))(succ(depth)));;
  | (hash) (eras) (func) (argm)
    eras<() HTerm>
    | to_high_order(func)(vars)(depth);
    | let func = to_high_order(func)(vars)(depth)
      let argm = to_high_order(argm)(vars)(depth)
      happ(func)(argm);;
  | (hash) (name) (expr) (body)
    let expr = to_high_order(expr)(vars)(depth)
    let body = ((x) to_high_order(body)(cons<HTerm>(x)(vars))(succ(depth))) :: HTerm -> HTerm
    body(expr);
  | (hash) (done) (expr) (type)
    to_high_order(expr)(vars)(depth);

to_low_order: HTerm -> Nat -> Term
  (hterm) (depth)
  hterm<() Term>
  | (indx) (posi)
    posi<() Term>
    | var(sub(sub(depth)(indx))(n1));
    | var(sub(add(depth)(indx))(n1));;
  | (name)
    ref(name);
  | typ;
  | (eras) (bind) (body)
    let eras = eras
    let self = nat_to_string(depth) // TODO
    let name = nat_to_string(succ(depth)) // TODO
    let bind = to_low_order(bind(hvar(depth)(true)))(succ(depth))
    let body = to_low_order(body(hvar(depth)(true))(hvar(succ(depth))(true)))(succ(succ(depth)))
    all(eras)(self)(name)(bind)(body);
  | (body)
    let eras = false
    let name = nat_to_string(depth) // TODO
    let body = to_low_order(body(hvar(depth)(true)))(succ(depth))
    lam(eras)(name)(body);
  | (func) (argm)
    let eras = false
    let func = to_low_order(func)(depth)
    let argm = to_low_order(argm)(depth)
    app(eras)(func)(argm);

reduce_high_order: HTerm -> File -> HTerm
  (term) (file)
  term<() HTerm>
  | (term.indx) (term.posi)
    hvar(term.indx)(term.posi);
  | (term.name)
    get_term(file)(term.name)<() HTerm>
    | href(term.name);
    | (ref_term)
      let ref_term = to_high_order(ref_term)(nil<HTerm>)(zero)
      reduce_high_order(ref_term)(file);;
  | htyp;
  | (term.eras) (term.bind) (term.body)
    hall(term.eras)(term.bind)(term.body);
  | (term.body)
    hlam(term.body);
  | (term.func) (term.argm)
    let func = reduce_high_order(term.func)(file)
    func<() HTerm>
    | (func.indx) (func.posi)
      happ(hvar(func.indx)(func.posi))(reduce_high_order(term.argm)(file));
    | (func.name)
      happ(href(func.name))(reduce_high_order(term.argm)(file));
    | htyp;
    | (func.eras) (func.bind) (func.body)
      happ(hall(func.eras)(func.bind)(func.body))(reduce_high_order(term.argm)(file));
    | (func.body)
      reduce_high_order(func.body(term.argm))(file);
    | (func.func) (func.argm)
      happ(happ(func.func)(func.argm))(reduce_high_order(term.argm)(file));;

normalize_high_order: HTerm -> File -> HTerm
  (term) (file)
  let norm = reduce_high_order(term)(file)
  norm<() HTerm>
  | (norm.indx) (norm.posi)
    hvar(norm.indx)(norm.posi);
  | (norm.name)
    href(norm.name);
  | htyp;
  | (norm.eras) (norm.bind) (norm.body)
    hall
    | norm.eras;
    | (s) normalize_high_order(norm.bind(s))(file);
    | (s) (x) normalize_high_order(norm.body(s)(x))(file);;
  | (norm.body)
    hlam((x) normalize_high_order(norm.body(x))(file));
  | (norm.func) (norm.argm)
    let func = normalize_high_order(norm.func)(file)
    let argm = normalize_high_order(norm.argm)(file)
    happ(func)(argm);

reduce: Term -> File -> Term
  (term) (file)
  let hterm = to_high_order(term)(nil<HTerm>)(zero)
  let hterm = reduce_high_order(hterm)(file)
  to_low_order(hterm)(zero)

normalize: Term -> File -> Term
  (term) (file)
  let hterm = to_high_order(term)(nil<HTerm>)(zero)
  let hterm = normalize_high_order(hterm)(file)
  to_low_order(hterm)(zero)
  
// Constants
// =========

// \NUL
_NUL: Char
  ascii(t0)(t0)(t0)(t0)(t0)(t0)(t0)(t0)

// \SOH
_SOH: Char
  ascii(t0)(t0)(t0)(t0)(t0)(t0)(t0)(t1)

// \STX
_STX: Char
  ascii(t0)(t0)(t0)(t0)(t0)(t0)(t1)(t0)

// \ETX
_ETX: Char
  ascii(t0)(t0)(t0)(t0)(t0)(t0)(t1)(t1)

// \EOT
_EOT: Char
  ascii(t0)(t0)(t0)(t0)(t0)(t1)(t0)(t0)

// \ENQ
_ENQ: Char
  ascii(t0)(t0)(t0)(t0)(t0)(t1)(t0)(t1)

// \ACK
_ACK: Char
  ascii(t0)(t0)(t0)(t0)(t0)(t1)(t1)(t0)

// \BEL
_BEL: Char
  ascii(t0)(t0)(t0)(t0)(t0)(t1)(t1)(t1)

// \BS
_BS: Char
  ascii(t0)(t0)(t0)(t0)(t1)(t0)(t0)(t0)

// \HT
_HT: Char
  ascii(t0)(t0)(t0)(t0)(t1)(t0)(t0)(t1)

// \LF
_LF: Char
  ascii(t0)(t0)(t0)(t0)(t1)(t0)(t1)(t0)

// \VT
_VT: Char
  ascii(t0)(t0)(t0)(t0)(t1)(t0)(t1)(t1)

// \FF
_FF: Char
  ascii(t0)(t0)(t0)(t0)(t1)(t1)(t0)(t0)

// \CR
_CR: Char
  ascii(t0)(t0)(t0)(t0)(t1)(t1)(t0)(t1)

// \SO
_SO: Char
  ascii(t0)(t0)(t0)(t0)(t1)(t1)(t1)(t0)

// \S 
_SI: Char
  ascii(t0)(t0)(t0)(t0)(t1)(t1)(t1)(t1)

// \DLE
_DLE: Char
  ascii(t0)(t0)(t0)(t1)(t0)(t0)(t0)(t0)

// \DC1
_DC1: Char
  ascii(t0)(t0)(t0)(t1)(t0)(t0)(t0)(t1)

// \DC2
_DC2: Char
  ascii(t0)(t0)(t0)(t1)(t0)(t0)(t1)(t0)

// \DC3
_DC3: Char
  ascii(t0)(t0)(t0)(t1)(t0)(t0)(t1)(t1)

// \DC4
_DC4: Char
  ascii(t0)(t0)(t0)(t1)(t0)(t1)(t0)(t0)

// \NAK
_NAK: Char
  ascii(t0)(t0)(t0)(t1)(t0)(t1)(t0)(t1)

// \SYN
_SYN: Char
  ascii(t0)(t0)(t0)(t1)(t0)(t1)(t1)(t0)

// \ETB
_ETB: Char
  ascii(t0)(t0)(t0)(t1)(t0)(t1)(t1)(t1)

// \CAN
_CAN: Char
  ascii(t0)(t0)(t0)(t1)(t1)(t0)(t0)(t0)

// \EM
_EM: Char
  ascii(t0)(t0)(t0)(t1)(t1)(t0)(t0)(t1)

// \SUB
_SUB: Char
  ascii(t0)(t0)(t0)(t1)(t1)(t0)(t1)(t0)

// \ESC
_ESC: Char
  ascii(t0)(t0)(t0)(t1)(t1)(t0)(t1)(t1)

// \FS
_FS: Char
  ascii(t0)(t0)(t0)(t1)(t1)(t1)(t0)(t0)

// \GS
_GS: Char
  ascii(t0)(t0)(t0)(t1)(t1)(t1)(t0)(t1)

// \RS
_RS: Char
  ascii(t0)(t0)(t0)(t1)(t1)(t1)(t1)(t0)

// \US
_US: Char
  ascii(t0)(t0)(t0)(t1)(t1)(t1)(t1)(t1)

// ' '
_space: Char
  ascii(t0)(t0)(t1)(t0)(t0)(t0)(t0)(t0)

// '!'
_excl: Char
  ascii(t0)(t0)(t1)(t0)(t0)(t0)(t0)(t1)

// '"'
_quot: Char
  ascii(t0)(t0)(t1)(t0)(t0)(t0)(t1)(t0)

// '#'
_hash: Char
  ascii(t0)(t0)(t1)(t0)(t0)(t0)(t1)(t1)

// '$'
_dollar: Char
  ascii(t0)(t0)(t1)(t0)(t0)(t1)(t0)(t0)

// '%'
_percnt: Char
  ascii(t0)(t0)(t1)(t0)(t0)(t1)(t0)(t1)

// '&'
_amp: Char
  ascii(t0)(t0)(t1)(t0)(t0)(t1)(t1)(t0)

// '\''
_apos: Char
  ascii(t0)(t0)(t1)(t0)(t0)(t1)(t1)(t1)

// '('
_lpar: Char
  ascii(t0)(t0)(t1)(t0)(t1)(t0)(t0)(t0)

// ')'
_rpar: Char
  ascii(t0)(t0)(t1)(t0)(t1)(t0)(t0)(t1)

// '*'
_ast: Char
  ascii(t0)(t0)(t1)(t0)(t1)(t0)(t1)(t0)

// '+'
_plus: Char
  ascii(t0)(t0)(t1)(t0)(t1)(t0)(t1)(t1)

// ','
_comma: Char
  ascii(t0)(t0)(t1)(t0)(t1)(t1)(t0)(t0)

// '-'
_dash: Char
  ascii(t0)(t0)(t1)(t0)(t1)(t1)(t0)(t1)

// '.'
_period: Char
  ascii(t0)(t0)(t1)(t0)(t1)(t1)(t1)(t0)

// '/'
_sol: Char
  ascii(t0)(t0)(t1)(t0)(t1)(t1)(t1)(t1)

// '0'
_0: Char
  ascii(t0)(t0)(t1)(t1)(t0)(t0)(t0)(t0)

// '1'
_1: Char
  ascii(t0)(t0)(t1)(t1)(t0)(t0)(t0)(t1)

// '2'
_2: Char
  ascii(t0)(t0)(t1)(t1)(t0)(t0)(t1)(t0)

// '3'
_3: Char
  ascii(t0)(t0)(t1)(t1)(t0)(t0)(t1)(t1)

// '4'
_4: Char
  ascii(t0)(t0)(t1)(t1)(t0)(t1)(t0)(t0)

// '5'
_5: Char
  ascii(t0)(t0)(t1)(t1)(t0)(t1)(t0)(t1)

// '6'
_6: Char
  ascii(t0)(t0)(t1)(t1)(t0)(t1)(t1)(t0)

// '7'
_7: Char
  ascii(t0)(t0)(t1)(t1)(t0)(t1)(t1)(t1)

// '8'
_8: Char
  ascii(t0)(t0)(t1)(t1)(t1)(t0)(t0)(t0)

// '9'
_9: Char
  ascii(t0)(t0)(t1)(t1)(t1)(t0)(t0)(t1)

// ':'
_colon: Char
  ascii(t0)(t0)(t1)(t1)(t1)(t0)(t1)(t0)

// ';'
_semi: Char
  ascii(t0)(t0)(t1)(t1)(t1)(t0)(t1)(t1)

// '<'
_lt: Char
  ascii(t0)(t0)(t1)(t1)(t1)(t1)(t0)(t0)

// '='
_equals: Char
  ascii(t0)(t0)(t1)(t1)(t1)(t1)(t0)(t1)

// '>'
_gt: Char
  ascii(t0)(t0)(t1)(t1)(t1)(t1)(t1)(t0)

// '?'
_quest: Char
  ascii(t0)(t0)(t1)(t1)(t1)(t1)(t1)(t1)

// '@'
_commat: Char
  ascii(t0)(t1)(t0)(t0)(t0)(t0)(t0)(t0)

// 'A'
_A: Char
  ascii(t0)(t1)(t0)(t0)(t0)(t0)(t0)(t1)

// 'B'
_B: Char
  ascii(t0)(t1)(t0)(t0)(t0)(t0)(t1)(t0)

// 'C'
_C: Char
  ascii(t0)(t1)(t0)(t0)(t0)(t0)(t1)(t1)

// 'D'
_D: Char
  ascii(t0)(t1)(t0)(t0)(t0)(t1)(t0)(t0)

// 'E'
_E: Char
  ascii(t0)(t1)(t0)(t0)(t0)(t1)(t0)(t1)

// 'F'
_F: Char
  ascii(t0)(t1)(t0)(t0)(t0)(t1)(t1)(t0)

// 'G'
_G: Char
  ascii(t0)(t1)(t0)(t0)(t0)(t1)(t1)(t1)

// 'H'
_H: Char
  ascii(t0)(t1)(t0)(t0)(t1)(t0)(t0)(t0)

// 'I'
_I: Char
  ascii(t0)(t1)(t0)(t0)(t1)(t0)(t0)(t1)

// 'J'
_J: Char
  ascii(t0)(t1)(t0)(t0)(t1)(t0)(t1)(t0)

// 'K'
_K: Char
  ascii(t0)(t1)(t0)(t0)(t1)(t0)(t1)(t1)

// 'L'
_L: Char
  ascii(t0)(t1)(t0)(t0)(t1)(t1)(t0)(t0)

// 'M'
_M: Char
  ascii(t0)(t1)(t0)(t0)(t1)(t1)(t0)(t1)

// 'N'
_N: Char
  ascii(t0)(t1)(t0)(t0)(t1)(t1)(t1)(t0)

// 'O'
_O: Char
  ascii(t0)(t1)(t0)(t0)(t1)(t1)(t1)(t1)

// 'P'
_P: Char
  ascii(t0)(t1)(t0)(t1)(t0)(t0)(t0)(t0)

// 'Q'
_Q: Char
  ascii(t0)(t1)(t0)(t1)(t0)(t0)(t0)(t1)

// 'R'
_R: Char
  ascii(t0)(t1)(t0)(t1)(t0)(t0)(t1)(t0)

// 'S'
_S: Char
  ascii(t0)(t1)(t0)(t1)(t0)(t0)(t1)(t1)

// 'T'
_T: Char
  ascii(t0)(t1)(t0)(t1)(t0)(t1)(t0)(t0)

// 'U'
_U: Char
  ascii(t0)(t1)(t0)(t1)(t0)(t1)(t0)(t1)

// 'V'
_V: Char
  ascii(t0)(t1)(t0)(t1)(t0)(t1)(t1)(t0)

// 'W'
_W: Char
  ascii(t0)(t1)(t0)(t1)(t0)(t1)(t1)(t1)

// 'X'
_X: Char
  ascii(t0)(t1)(t0)(t1)(t1)(t0)(t0)(t0)

// 'Y'
_Y: Char
  ascii(t0)(t1)(t0)(t1)(t1)(t0)(t0)(t1)

// 'Z'
_Z: Char
  ascii(t0)(t1)(t0)(t1)(t1)(t0)(t1)(t0)

// '['
_lbrack: Char
  ascii(t0)(t1)(t0)(t1)(t1)(t0)(t1)(t1)

// '\\'
_bsol: Char
  ascii(t0)(t1)(t0)(t1)(t1)(t1)(t0)(t0)

// ']'
_rbrack: Char
  ascii(t0)(t1)(t0)(t1)(t1)(t1)(t0)(t1)

// '^'
_caret: Char
  ascii(t0)(t1)(t0)(t1)(t1)(t1)(t1)(t0)

// '_'
_lowbar: Char 
  ascii(t0)(t1)(t0)(t1)(t1)(t1)(t1)(t1)

// '`'
_grave: Char
  ascii(t0)(t1)(t1)(t0)(t0)(t0)(t0)(t0)

// 'a'
_a: Char
  ascii(t0)(t1)(t1)(t0)(t0)(t0)(t0)(t1)

// 'b'
_b: Char
  ascii(t0)(t1)(t1)(t0)(t0)(t0)(t1)(t0)

// 'c'
_c: Char
  ascii(t0)(t1)(t1)(t0)(t0)(t0)(t1)(t1)

// 'd'
_d: Char
  ascii(t0)(t1)(t1)(t0)(t0)(t1)(t0)(t0)

// 'e'
_e: Char
  ascii(t0)(t1)(t1)(t0)(t0)(t1)(t0)(t1)

// 'f'
_f: Char
  ascii(t0)(t1)(t1)(t0)(t0)(t1)(t1)(t0)

// 'g'
_g: Char
  ascii(t0)(t1)(t1)(t0)(t0)(t1)(t1)(t1)

// 'h'
_h: Char
  ascii(t0)(t1)(t1)(t0)(t1)(t0)(t0)(t0)

// 'i'
_i: Char
  ascii(t0)(t1)(t1)(t0)(t1)(t0)(t0)(t1)

// 'j'
_j: Char
  ascii(t0)(t1)(t1)(t0)(t1)(t0)(t1)(t0)

// 'k'
_k: Char
  ascii(t0)(t1)(t1)(t0)(t1)(t0)(t1)(t1)

// 'l'
_l: Char
  ascii(t0)(t1)(t1)(t0)(t1)(t1)(t0)(t0)

// 'm'
_m: Char
  ascii(t0)(t1)(t1)(t0)(t1)(t1)(t0)(t1)

// 'n'
_n: Char
  ascii(t0)(t1)(t1)(t0)(t1)(t1)(t1)(t0)

// 'o'
_o: Char
  ascii(t0)(t1)(t1)(t0)(t1)(t1)(t1)(t1)

// 'p'
_p: Char
  ascii(t0)(t1)(t1)(t1)(t0)(t0)(t0)(t0)

// 'q'
_q: Char
  ascii(t0)(t1)(t1)(t1)(t0)(t0)(t0)(t1)

// 'r'
_r: Char
  ascii(t0)(t1)(t1)(t1)(t0)(t0)(t1)(t0)

// 's'
_s: Char
  ascii(t0)(t1)(t1)(t1)(t0)(t0)(t1)(t1)

// 't'
_t: Char
  ascii(t0)(t1)(t1)(t1)(t0)(t1)(t0)(t0)

// 'u'
_u: Char
  ascii(t0)(t1)(t1)(t1)(t0)(t1)(t0)(t1)

// 'v'
_v: Char
  ascii(t0)(t1)(t1)(t1)(t0)(t1)(t1)(t0)

// 'w'
_w: Char
  ascii(t0)(t1)(t1)(t1)(t0)(t1)(t1)(t1)

// 'x'
_x: Char
  ascii(t0)(t1)(t1)(t1)(t1)(t0)(t0)(t0)

// 'y'
_y: Char
  ascii(t0)(t1)(t1)(t1)(t1)(t0)(t0)(t1)

// 'z'
_z: Char
  ascii(t0)(t1)(t1)(t1)(t1)(t0)(t1)(t0)

// '{'
_lbrace: Char
  ascii(t0)(t1)(t1)(t1)(t1)(t0)(t1)(t1)

// '|'
_vert: Char
  ascii(t0)(t1)(t1)(t1)(t1)(t1)(t0)(t0)

// '}'
_rbrace: Char
  ascii(t0)(t1)(t1)(t1)(t1)(t1)(t0)(t1)

// '~'
_tilde: Char
  ascii(t0)(t1)(t1)(t1)(t1)(t1)(t1)(t0)

// \DEL
_DEL: Char
  ascii(t0)(t1)(t1)(t1)(t1)(t1)(t1)(t1)

// Appendix B: String Constants

// "("
LPAR: String
  single<Char>(_lpar)

// ")"
RPAR: String
  single<Char>(_rpar)

// "{"
LSIG: String
  single<Char>(_lbrace)

// "}"
RSIG: String
  single<Char>(_rbrace)

// "<"
LT: String
  single<Char>(_lt)

// ">"
GT: String
  single<Char>(_gt)

// ":"
COLO: String
  single<Char>(_colon)

// ":"
SEMI: String
  single<Char>(_semi)

// "-"
DASH: String
  single<Char>(_dash)

// "|"
PIPE: String
 single<Char>(_vert)

// "::"
COLS: String
  cons<Char>(_colon)(single<Char>(_colon))

// "->"
ARR0: String
  cons<Char>(_dash)(single<Char>(_gt))

// "="
EQLS: String
  single<Char>(_equals)

// Type
TYPS: String
  cons<Char>(_T)(cons<Char>(_y)(cons<Char>(_p)(single<Char>(_e))))

// "let "
LETS: String
  cons<Char>(_l)(cons<Char>(_e)(cons<Char>(_t)(single<Char>(_space))))

// "main"
MAIN: String
  cons<Char>(_m) |
  cons<Char>(_a) |
  cons<Char>(_i) |
  cons<Char>(_n) |
  nil<Char>;;;;

// " "
SPAC: String
  single<Char>(_space)

// ["(","{"]
OPEN: Pair(String)(String)
  pair<String><String>(LT)(LPAR)

// [")","}']
CLOS: Pair(String)(String)
  pair<String><String>(GT)(RPAR)

// Main
// ====

example_0: Word(n4)
  let w0011 = w1<n3>(w1<n2>(w0<n1>(w0<n0>(we))))
  let w0101 = w1<n3>(w0<n2>(w1<n1>(w0<n0>(we))))
  word_add<n4>(w0011)(w0101) // 3 + 5 == 8

example_1: String -> String
  (code)
  parse_term(code)(nil<String>)<() String>
  | nil<Char>;
  | (parsed) parsed<() String>((code) (term) stringify_term(term));

example_2: Equal(Nat)(mul(n8)(n4))(n32)
  equal<Nat><n32>

// Parses a Formality-Core source, evaluates and prints 'main'
main: String -> String
  (code)
  parse_file(code)<() String>
  | ERR;
  | (parsed)
    let file = snd<String><File>(parsed)
    get_term(file)(MAIN)<() String>
    | ERR;
    | (term) stringify_term(normalize(term)(file));;
    //| (term) stringify_term(term);;
    //| (term) stringify_term(to_low_order(to_high_order(term)(nil<HTerm>)(zero))(zero));;

foo : <A : Type> -> (A -> A) -> A -> A
  <> (f) (x) f(x)
