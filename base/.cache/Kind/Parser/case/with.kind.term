((Parser.first_of (List Kind.Ann)) (((List.cons (Parser (List Kind.Ann))) ((((((Monad.bind Parser) Parser.monad) Unit) (List Kind.Ann)) (Kind.Parser.text "with ")) # ((Parser.many Kind.Ann) ((((((Monad.bind Parser) Parser.monad) Kind.Name) Kind.Ann) Kind.Parser.name1) #name ((((((Monad.bind Parser) Parser.monad) (Maybe Kind.Term)) Kind.Ann) ((Parser.maybe Kind.Term) ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text ":")) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) Kind.Parser.term) #type ((((((Monad.bind Parser) Parser.monad) (Maybe Unit)) Kind.Term) ((Parser.maybe Unit) (Kind.Parser.text ";"))) # ((((Monad.pure Parser) Parser.monad) Kind.Term) type)))))) #type ((((Monad.pure Parser) Parser.monad) Kind.Ann) (((Kind.Ann.new name) (Kind.Term.ref name)) type))))))) (((List.cons (Parser (List Kind.Ann))) ((((Monad.pure Parser) Parser.monad) (List Kind.Ann)) (List.nil Kind.Ann))) (List.nil (Parser (List Kind.Ann))))))