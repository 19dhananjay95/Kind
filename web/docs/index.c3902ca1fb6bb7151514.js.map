{"version":3,"sources":["webpack://formality-web/./src/apps/Mons.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,aAAa;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,aAAa;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbaAAa;AACbiBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA,0DAA0D,cAAc;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,IAAI,GAAG,IAAI;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjqEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qGAAqG;AACrG;AACA;AACA;AACA;AACA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjiCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACryBAAyB;AACziCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACriBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACriBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACriEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjiBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjyDAAyD;AACzD;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qGAAqG;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qGAAqG;AACrG;AACA;AACA;AACA;AACA;AACA,yGAAyG;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yGAAyG;AACzG;AACA;AACA;AACA;AACA;AACA,qGAAqG;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yHAAyH;AACzH;AACA;AACA;AACA;AACA,qHAAqH;AACrH;AACA;AACA;AACA;AACA;AACA,iHAAiH;AACjH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qGAAqG;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzfile":"index.c3902ca1fb6bb7151514.js","sourcesContent":["module.exports = (function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    var list_for = list => nil => cons => {\n        while (list._ !== 'List.nil') {\n            nil = cons(list.head)(nil);\n            list = list.tail;\n        }\n        return nil;\n    };\n    var list_length = list => {\n        var len = 0;\n        while (list._ === 'List.cons') {\n            len += 1;\n            list = list.tail;\n        };\n        return BigInt(len);\n    };\n    const inst_unit = x => x(1);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c2;\n                return $2;\n            } else {\n                var $3 = c2;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c2;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c2($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');\n    const elim_bits = (x => {\n        var $14 = (() => c0 => c1 => c2 => {\n            var self = x;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'e':\n                    var $9 = c0;\n                    return $9;\n                case 'o':\n                    var $10 = self.slice(0, -1);\n                    var $11 = c1($10);\n                    return $11;\n                case 'i':\n                    var $12 = self.slice(0, -1);\n                    var $13 = c2($12);\n                    return $13;\n            };\n        })();\n        return $14;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $15 = u16_to_word(self);\n                    var $16 = c0($15);\n                    return $16;\n            };\n        })();\n        return $17;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $20 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $18 = u32_to_word(self);\n                    var $19 = c0($18);\n                    return $19;\n            };\n        })();\n        return $20;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $23 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $21 = u64_to_word(self);\n                    var $22 = c0($21);\n                    return $22;\n            };\n        })();\n        return $23;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $28 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $24 = c2;\n                return $24;\n            } else {\n                var $25 = self.charCodeAt(0);\n                var $26 = self.slice(1);\n                var $27 = c2($25)($26);\n                return $27;\n            };\n        })();\n        return $28;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $32 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $29 = buffer32_to_depth(self);\n                    var $30 = buffer32_to_u32array(self);\n                    var $31 = c0($29)($30);\n                    return $31;\n            };\n        })();\n        return $32;\n    });\n\n    function Buffer32$new$(_depth$1, _array$2) {\n        var $33 = u32array_to_buffer32(_array$2);\n        return $33;\n    };\n    const Buffer32$new = x0 => x1 => Buffer32$new$(x0, x1);\n\n    function Array$(_A$1, _depth$2) {\n        var $34 = null;\n        return $34;\n    };\n    const Array = x0 => x1 => Array$(x0, x1);\n\n    function Array$tip$(_value$2) {\n        var $35 = ({\n            _: 'Array.tip',\n            'value': _value$2\n        });\n        return $35;\n    };\n    const Array$tip = x0 => Array$tip$(x0);\n\n    function Array$tie$(_lft$3, _rgt$4) {\n        var $36 = ({\n            _: 'Array.tie',\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $36;\n    };\n    const Array$tie = x0 => x1 => Array$tie$(x0, x1);\n\n    function Array$alloc$(_depth$2, _x$3) {\n        var self = _depth$2;\n        if (self === 0n) {\n            var $38 = Array$tip$(_x$3);\n            var $37 = $38;\n        } else {\n            var $39 = (self - 1n);\n            var _half$5 = Array$alloc$($39, _x$3);\n            var $40 = Array$tie$(_half$5, _half$5);\n            var $37 = $40;\n        };\n        return $37;\n    };\n    const Array$alloc = x0 => x1 => Array$alloc$(x0, x1);\n\n    function U32$new$(_value$1) {\n        var $41 = word_to_u32(_value$1);\n        return $41;\n    };\n    const U32$new = x0 => U32$new$(x0);\n\n    function Word$(_size$1) {\n        var $42 = null;\n        return $42;\n    };\n    const Word = x0 => Word$(x0);\n    const Word$e = ({\n        _: 'Word.e'\n    });\n\n    function Word$o$(_pred$2) {\n        var $43 = ({\n            _: 'Word.o',\n            'pred': _pred$2\n        });\n        return $43;\n    };\n    const Word$o = x0 => Word$o$(x0);\n\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $45 = Word$e;\n            var $44 = $45;\n        } else {\n            var $46 = (self - 1n);\n            var $47 = Word$o$(Word$zero$($46));\n            var $44 = $47;\n        };\n        return $44;\n    };\n    const Word$zero = x0 => Word$zero$(x0);\n    const U32$zero = U32$new$(Word$zero$(32n));\n    const Buffer32$alloc = a0 => (new Uint32Array(2 ** Number(a0)));\n    const Bool$false = false;\n    const Bool$true = true;\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $49 = Bool$false;\n                var $48 = $49;\n                break;\n            case 'Cmp.eql':\n                var $50 = Bool$true;\n                var $48 = $50;\n                break;\n            case 'Cmp.gtn':\n                var $51 = Bool$false;\n                var $48 = $51;\n                break;\n        };\n        return $48;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.e':\n                var $53 = (_b$5 => {\n                    var $54 = _c$4;\n                    return $54;\n                });\n                var $52 = $53;\n                break;\n            case 'Word.o':\n                var $55 = self.pred;\n                var $56 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.e':\n                            var $58 = (_a$pred$8 => {\n                                var $59 = _c$4;\n                                return $59;\n                            });\n                            var $57 = $58;\n                            break;\n                        case 'Word.o':\n                            var $60 = self.pred;\n                            var $61 = (_a$pred$10 => {\n                                var $62 = Word$cmp$go$(_a$pred$10, $60, _c$4);\n                                return $62;\n                            });\n                            var $57 = $61;\n                            break;\n                        case 'Word.i':\n                            var $63 = self.pred;\n                            var $64 = (_a$pred$10 => {\n                                var $65 = Word$cmp$go$(_a$pred$10, $63, Cmp$ltn);\n                                return $65;\n                            });\n                            var $57 = $64;\n                            break;\n                    };\n                    var $57 = $57($55);\n                    return $57;\n                });\n                var $52 = $56;\n                break;\n            case 'Word.i':\n                var $66 = self.pred;\n                var $67 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.e':\n                            var $69 = (_a$pred$8 => {\n                                var $70 = _c$4;\n                                return $70;\n                            });\n                            var $68 = $69;\n                            break;\n                        case 'Word.o':\n                            var $71 = self.pred;\n                            var $72 = (_a$pred$10 => {\n                                var $73 = Word$cmp$go$(_a$pred$10, $71, Cmp$gtn);\n                                return $73;\n                            });\n                            var $68 = $72;\n                            break;\n                        case 'Word.i':\n                            var $74 = self.pred;\n                            var $75 = (_a$pred$10 => {\n                                var $76 = Word$cmp$go$(_a$pred$10, $74, _c$4);\n                                return $76;\n                            });\n                            var $68 = $75;\n                            break;\n                    };\n                    var $68 = $68($66);\n                    return $68;\n                });\n                var $52 = $67;\n                break;\n        };\n        var $52 = $52(_b$3);\n        return $52;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $77 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $77;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $78 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $78;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n\n    function Nat$succ$(_pred$1) {\n        var $79 = 1n + _pred$1;\n        return $79;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const U32$eql = a0 => a1 => (a0 === a1);\n\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _f$3, _x$4]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [_n$2, _f$3, _x$4];\n        while (true) {\n            let [_n$2, _f$3, _x$4] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $80 = _x$4;\n                    return $80;\n                } else {\n                    var $81 = (self - 1n);\n                    var $82 = Nat$apply$($81, _f$3, _f$3(_x$4));\n                    return $82;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n\n    function Word$i$(_pred$2) {\n        var $83 = ({\n            _: 'Word.i',\n            'pred': _pred$2\n        });\n        return $83;\n    };\n    const Word$i = x0 => Word$i$(x0);\n\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.e':\n                var $85 = Word$e;\n                var $84 = $85;\n                break;\n            case 'Word.o':\n                var $86 = self.pred;\n                var $87 = Word$i$($86);\n                var $84 = $87;\n                break;\n            case 'Word.i':\n                var $88 = self.pred;\n                var $89 = Word$o$(Word$inc$($88));\n                var $84 = $89;\n                break;\n        };\n        return $84;\n    };\n    const Word$inc = x0 => Word$inc$(x0);\n\n    function U32$inc$(_a$1) {\n        var self = _a$1;\n        switch ('u32') {\n            case 'u32':\n                var $91 = u32_to_word(self);\n                var $92 = U32$new$(Word$inc$($91));\n                var $90 = $92;\n                break;\n        };\n        return $90;\n    };\n    const U32$inc = x0 => U32$inc$(x0);\n    const Nat$to_u32 = a0 => (Number(a0));\n    const U32$shr = a0 => a1 => (a0 >>> a1);\n\n    function U32$needed_depth$go$(_n$1) {\n        var self = (_n$1 === 0);\n        if (self) {\n            var $94 = 0n;\n            var $93 = $94;\n        } else {\n            var $95 = Nat$succ$(U32$needed_depth$go$((_n$1 >>> 1)));\n            var $93 = $95;\n        };\n        return $93;\n    };\n    const U32$needed_depth$go = x0 => U32$needed_depth$go$(x0);\n\n    function Word$subber$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.e':\n                var $97 = (_b$5 => {\n                    var $98 = Word$e;\n                    return $98;\n                });\n                var $96 = $97;\n                break;\n            case 'Word.o':\n                var $99 = self.pred;\n                var $100 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.e':\n                            var $102 = (_a$pred$8 => {\n                                var $103 = Word$e;\n                                return $103;\n                            });\n                            var $101 = $102;\n                            break;\n                        case 'Word.o':\n                            var $104 = self.pred;\n                            var $105 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $107 = Word$i$(Word$subber$(_a$pred$10, $104, Bool$true));\n                                    var $106 = $107;\n                                } else {\n                                    var $108 = Word$o$(Word$subber$(_a$pred$10, $104, Bool$false));\n                                    var $106 = $108;\n                                };\n                                return $106;\n                            });\n                            var $101 = $105;\n                            break;\n                        case 'Word.i':\n                            var $109 = self.pred;\n                            var $110 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $112 = Word$o$(Word$subber$(_a$pred$10, $109, Bool$true));\n                                    var $111 = $112;\n                                } else {\n                                    var $113 = Word$i$(Word$subber$(_a$pred$10, $109, Bool$true));\n                                    var $111 = $113;\n                                };\n                                return $111;\n                            });\n                            var $101 = $110;\n                            break;\n                    };\n                    var $101 = $101($99);\n                    return $101;\n                });\n                var $96 = $100;\n                break;\n            case 'Word.i':\n                var $114 = self.pred;\n                var $115 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.e':\n                            var $117 = (_a$pred$8 => {\n                                var $118 = Word$e;\n                                return $118;\n                            });\n                            var $116 = $117;\n                            break;\n                        case 'Word.o':\n                            var $119 = self.pred;\n                            var $120 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $122 = Word$o$(Word$subber$(_a$pred$10, $119, Bool$false));\n                                    var $121 = $122;\n                                } else {\n                                    var $123 = Word$i$(Word$subber$(_a$pred$10, $119, Bool$false));\n                                    var $121 = $123;\n                                };\n                                return $121;\n                            });\n                            var $116 = $120;\n                            break;\n                        case 'Word.i':\n                            var $124 = self.pred;\n                            var $125 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $127 = Word$i$(Word$subber$(_a$pred$10, $124, Bool$true));\n                                    var $126 = $127;\n                                } else {\n                                    var $128 = Word$o$(Word$subber$(_a$pred$10, $124, Bool$false));\n                                    var $126 = $128;\n                                };\n                                return $126;\n                            });\n                            var $116 = $125;\n                            break;\n                    };\n                    var $116 = $116($114);\n                    return $116;\n                });\n                var $96 = $115;\n                break;\n        };\n        var $96 = $96(_b$3);\n        return $96;\n    };\n    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);\n\n    function Word$sub$(_a$2, _b$3) {\n        var $129 = Word$subber$(_a$2, _b$3, Bool$false);\n        return $129;\n    };\n    const Word$sub = x0 => x1 => Word$sub$(x0, x1);\n    const U32$sub = a0 => a1 => (Math.max(a0 - a1, 0));\n\n    function U32$needed_depth$(_size$1) {\n        var $130 = U32$needed_depth$go$((Math.max(_size$1 - 1, 0)));\n        return $130;\n    };\n    const U32$needed_depth = x0 => U32$needed_depth$(x0);\n\n    function Word$mul$(_a$2, _b$3) {\n        var Word$mul$ = (_a$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3]\n        });\n        var Word$mul = _a$2 => _b$3 => Word$mul$(_a$2, _b$3);\n        var arg = [_a$2, _b$3];\n        while (true) {\n            let [_a$2, _b$3] = arg;\n            var R = Word$mul$(_a$2, _b$3);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mul = x0 => x1 => Word$mul$(x0, x1);\n    const U32$mul = a0 => a1 => ((a0 * a1) >>> 0);\n\n    function Image3D$new$(_length$1, _capacity$2, _buffer$3) {\n        var $131 = ({\n            _: 'Image3D.new',\n            'length': _length$1,\n            'capacity': _capacity$2,\n            'buffer': _buffer$3\n        });\n        return $131;\n    };\n    const Image3D$new = x0 => x1 => x2 => Image3D$new$(x0, x1, x2);\n\n    function Image3D$alloc_capacity$(_capacity$1) {\n        var _buffer$2 = (new Uint32Array(2 ** Number(U32$needed_depth$(((2 * _capacity$1) >>> 0)))));\n        var $132 = Image3D$new$(0, _capacity$1, _buffer$2);\n        return $132;\n    };\n    const Image3D$alloc_capacity = x0 => Image3D$alloc_capacity$(x0);\n    const Map$new = ({\n        _: 'Map.new'\n    });\n\n    function Word$adder$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.e':\n                var $134 = (_b$5 => {\n                    var $135 = Word$e;\n                    return $135;\n                });\n                var $133 = $134;\n                break;\n            case 'Word.o':\n                var $136 = self.pred;\n                var $137 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.e':\n                            var $139 = (_a$pred$8 => {\n                                var $140 = Word$e;\n                                return $140;\n                            });\n                            var $138 = $139;\n                            break;\n                        case 'Word.o':\n                            var $141 = self.pred;\n                            var $142 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $144 = Word$i$(Word$adder$(_a$pred$10, $141, Bool$false));\n                                    var $143 = $144;\n                                } else {\n                                    var $145 = Word$o$(Word$adder$(_a$pred$10, $141, Bool$false));\n                                    var $143 = $145;\n                                };\n                                return $143;\n                            });\n                            var $138 = $142;\n                            break;\n                        case 'Word.i':\n                            var $146 = self.pred;\n                            var $147 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $149 = Word$o$(Word$adder$(_a$pred$10, $146, Bool$true));\n                                    var $148 = $149;\n                                } else {\n                                    var $150 = Word$i$(Word$adder$(_a$pred$10, $146, Bool$false));\n                                    var $148 = $150;\n                                };\n                                return $148;\n                            });\n                            var $138 = $147;\n                            break;\n                    };\n                    var $138 = $138($136);\n                    return $138;\n                });\n                var $133 = $137;\n                break;\n            case 'Word.i':\n                var $151 = self.pred;\n                var $152 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.e':\n                            var $154 = (_a$pred$8 => {\n                                var $155 = Word$e;\n                                return $155;\n                            });\n                            var $153 = $154;\n                            break;\n                        case 'Word.o':\n                            var $156 = self.pred;\n                            var $157 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $159 = Word$o$(Word$adder$(_a$pred$10, $156, Bool$true));\n                                    var $158 = $159;\n                                } else {\n                                    var $160 = Word$i$(Word$adder$(_a$pred$10, $156, Bool$false));\n                                    var $158 = $160;\n                                };\n                                return $158;\n                            });\n                            var $153 = $157;\n                            break;\n                        case 'Word.i':\n                            var $161 = self.pred;\n                            var $162 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $164 = Word$i$(Word$adder$(_a$pred$10, $161, Bool$true));\n                                    var $163 = $164;\n                                } else {\n                                    var $165 = Word$o$(Word$adder$(_a$pred$10, $161, Bool$true));\n                                    var $163 = $165;\n                                };\n                                return $163;\n                            });\n                            var $153 = $162;\n                            break;\n                    };\n                    var $153 = $153($151);\n                    return $153;\n                });\n                var $133 = $152;\n                break;\n        };\n        var $133 = $133(_b$3);\n        return $133;\n    };\n    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);\n\n    function Word$add$(_a$2, _b$3) {\n        var $166 = Word$adder$(_a$2, _b$3, Bool$false);\n        return $166;\n    };\n    const Word$add = x0 => x1 => Word$add$(x0, x1);\n    const U32$add = a0 => a1 => ((a0 + a1) >>> 0);\n\n    function List$ifor_u32$(_xs$2, _b$4, _f$5) {\n        var List$ifor_u32$ = (_xs$2, _b$4, _f$5) => ({\n            ctr: 'TCO',\n            arg: [_xs$2, _b$4, _f$5]\n        });\n        var List$ifor_u32 = _xs$2 => _b$4 => _f$5 => List$ifor_u32$(_xs$2, _b$4, _f$5);\n        var arg = [_xs$2, _b$4, _f$5];\n        while (true) {\n            let [_xs$2, _b$4, _f$5] = arg;\n            var R = (() => {\n                var self = _xs$2;\n                switch (self._) {\n                    case 'List.nil':\n                        var $167 = _b$4;\n                        return $167;\n                    case 'List.cons':\n                        var $168 = self.head;\n                        var $169 = self.tail;\n                        var $170 = List$ifor_u32$($169, _f$5(0)($168)(_b$4), (_n$8 => {\n                            var $171 = _f$5(((_n$8 + 1) >>> 0));\n                            return $171;\n                        }));\n                        return $170;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$ifor_u32 = x0 => x1 => x2 => List$ifor_u32$(x0, x1, x2);\n\n    function List$(_A$1) {\n        var $172 = null;\n        return $172;\n    };\n    const List = x0 => List$(x0);\n\n    function Map$(_A$1) {\n        var $173 = null;\n        return $173;\n    };\n    const Map = x0 => Map$(x0);\n    const Mons$Map$new = Map$new;\n\n    function List$length_u32_go$(_xs$2, _n$3) {\n        var List$length_u32_go$ = (_xs$2, _n$3) => ({\n            ctr: 'TCO',\n            arg: [_xs$2, _n$3]\n        });\n        var List$length_u32_go = _xs$2 => _n$3 => List$length_u32_go$(_xs$2, _n$3);\n        var arg = [_xs$2, _n$3];\n        while (true) {\n            let [_xs$2, _n$3] = arg;\n            var R = (() => {\n                var self = _xs$2;\n                switch (self._) {\n                    case 'List.nil':\n                        var $174 = _n$3;\n                        return $174;\n                    case 'List.cons':\n                        var $175 = self.head;\n                        var $176 = self.tail;\n                        var $177 = List$length_u32_go$($176, ((1 + _n$3) >>> 0));\n                        return $177;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$length_u32_go = x0 => x1 => List$length_u32_go$(x0, x1);\n\n    function List$length_u32$(_xs$2) {\n        var $178 = List$length_u32_go$(_xs$2, 0);\n        return $178;\n    };\n    const List$length_u32 = x0 => List$length_u32$(x0);\n    const U32$for = a0 => a1 => a2 => a3 => (u32_for(a0, a1, a2, a3));\n\n    function Word$div$(_a$2, _b$3) {\n        var Word$div$ = (_a$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3]\n        });\n        var Word$div = _a$2 => _b$3 => Word$div$(_a$2, _b$3);\n        var arg = [_a$2, _b$3];\n        while (true) {\n            let [_a$2, _b$3] = arg;\n            var R = Word$div$(_a$2, _b$3);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$div = x0 => x1 => Word$div$(x0, x1);\n    const U32$div = a0 => a1 => ((a0 / a1) >>> 0);\n\n    function Word$or$(_a$2, _b$3) {\n        var Word$or$ = (_a$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3]\n        });\n        var Word$or = _a$2 => _b$3 => Word$or$(_a$2, _b$3);\n        var arg = [_a$2, _b$3];\n        while (true) {\n            let [_a$2, _b$3] = arg;\n            var R = Word$or$(_a$2, _b$3);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$or = x0 => x1 => Word$or$(x0, x1);\n    const U32$or = a0 => a1 => (a0 | a1);\n    const U32$shl = a0 => a1 => (a0 << a1);\n    const Pos32$new = a0 => a1 => a2 => ((0 | a0 | (a1 << 12) | (a2 << 24)));\n\n    function Word$fold$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var self = _word$6;\n        switch (self._) {\n            case 'Word.e':\n                var $180 = _nil$3;\n                var $179 = $180;\n                break;\n            case 'Word.o':\n                var $181 = self.pred;\n                var $182 = _w0$4(Word$fold$(_nil$3, _w0$4, _w1$5, $181));\n                var $179 = $182;\n                break;\n            case 'Word.i':\n                var $183 = self.pred;\n                var $184 = _w1$5(Word$fold$(_nil$3, _w0$4, _w1$5, $183));\n                var $179 = $184;\n                break;\n        };\n        return $179;\n    };\n    const Word$fold = x0 => x1 => x2 => x3 => Word$fold$(x0, x1, x2, x3);\n    const Nat$add = a0 => a1 => (a0 + a1);\n    const Nat$mul = a0 => a1 => (a0 * a1);\n\n    function Word$to_nat$(_word$2) {\n        var $185 = Word$fold$(0n, a1 => (2n * a1), (_x$4 => {\n            var $186 = Nat$succ$((2n * _x$4));\n            return $186;\n        }), _word$2);\n        return $185;\n    };\n    const Word$to_nat = x0 => Word$to_nat$(x0);\n\n    function U32$to_nat$(_a$1) {\n        var self = _a$1;\n        switch ('u32') {\n            case 'u32':\n                var $188 = u32_to_word(self);\n                var $189 = Word$to_nat$($188);\n                var $187 = $189;\n                break;\n        };\n        return $187;\n    };\n    const U32$to_nat = x0 => U32$to_nat$(x0);\n    const String$nil = '';\n\n    function String$cons$(_head$1, _tail$2) {\n        var $190 = (String.fromCharCode(_head$1) + _tail$2);\n        return $190;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n\n    function String$take$(_n$1, _xs$2) {\n        var self = _xs$2;\n        if (self.length === 0) {\n            var $192 = String$nil;\n            var $191 = $192;\n        } else {\n            var $193 = self.charCodeAt(0);\n            var $194 = self.slice(1);\n            var self = _n$1;\n            if (self === 0n) {\n                var $196 = String$nil;\n                var $195 = $196;\n            } else {\n                var $197 = (self - 1n);\n                var $198 = String$cons$($193, String$take$($197, $194));\n                var $195 = $198;\n            };\n            var $191 = $195;\n        };\n        return $191;\n    };\n    const String$take = x0 => x1 => String$take$(x0, x1);\n    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);\n\n    function String$drop$(_n$1, _xs$2) {\n        var String$drop$ = (_n$1, _xs$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _xs$2]\n        });\n        var String$drop = _n$1 => _xs$2 => String$drop$(_n$1, _xs$2);\n        var arg = [_n$1, _xs$2];\n        while (true) {\n            let [_n$1, _xs$2] = arg;\n            var R = (() => {\n                var self = _n$1;\n                if (self === 0n) {\n                    var $199 = _xs$2;\n                    return $199;\n                } else {\n                    var $200 = (self - 1n);\n                    var self = _xs$2;\n                    if (self.length === 0) {\n                        var $202 = String$nil;\n                        var $201 = $202;\n                    } else {\n                        var $203 = self.charCodeAt(0);\n                        var $204 = self.slice(1);\n                        var $205 = String$drop$($200, $204);\n                        var $201 = $205;\n                    };\n                    return $201;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$drop = x0 => x1 => String$drop$(x0, x1);\n\n    function String$slice$(_i$1, _j$2, _xs$3) {\n        var $206 = String$take$((_j$2 - _i$1 <= 0n ? 0n : _j$2 - _i$1), String$drop$(_i$1, _xs$3));\n        return $206;\n    };\n    const String$slice = x0 => x1 => x2 => String$slice$(x0, x1, x2);\n\n    function Map$tie$(_val$2, _lft$3, _rgt$4) {\n        var $207 = ({\n            _: 'Map.tie',\n            'val': _val$2,\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $207;\n    };\n    const Map$tie = x0 => x1 => x2 => Map$tie$(x0, x1, x2);\n\n    function Maybe$some$(_value$2) {\n        var $208 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $208;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n\n    function Map$set$(_bits$2, _val$3, _map$4) {\n        var self = _bits$2;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'e':\n                var self = _map$4;\n                switch (self._) {\n                    case 'Map.new':\n                        var $211 = Map$tie$(Maybe$some$(_val$3), Map$new, Map$new);\n                        var $210 = $211;\n                        break;\n                    case 'Map.tie':\n                        var $212 = self.val;\n                        var $213 = self.lft;\n                        var $214 = self.rgt;\n                        var $215 = Map$tie$(Maybe$some$(_val$3), $213, $214);\n                        var $210 = $215;\n                        break;\n                };\n                var $209 = $210;\n                break;\n            case 'o':\n                var $216 = self.slice(0, -1);\n                var self = _map$4;\n                switch (self._) {\n                    case 'Map.new':\n                        var $218 = Map$tie$(Maybe$none, Map$set$($216, _val$3, Map$new), Map$new);\n                        var $217 = $218;\n                        break;\n                    case 'Map.tie':\n                        var $219 = self.val;\n                        var $220 = self.lft;\n                        var $221 = self.rgt;\n                        var $222 = Map$tie$($219, Map$set$($216, _val$3, $220), $221);\n                        var $217 = $222;\n                        break;\n                };\n                var $209 = $217;\n                break;\n            case 'i':\n                var $223 = self.slice(0, -1);\n                var self = _map$4;\n                switch (self._) {\n                    case 'Map.new':\n                        var $225 = Map$tie$(Maybe$none, Map$new, Map$set$($223, _val$3, Map$new));\n                        var $224 = $225;\n                        break;\n                    case 'Map.tie':\n                        var $226 = self.val;\n                        var $227 = self.lft;\n                        var $228 = self.rgt;\n                        var $229 = Map$tie$($226, $227, Map$set$($223, _val$3, $228));\n                        var $224 = $229;\n                        break;\n                };\n                var $209 = $224;\n                break;\n        };\n        return $209;\n    };\n    const Map$set = x0 => x1 => x2 => Map$set$(x0, x1, x2);\n    const Bits$e = '';\n    const Bits$o = a0 => (a0 + '0');\n    const Bits$i = a0 => (a0 + '1');\n\n    function Word$to_bits$(_a$2) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.e':\n                var $231 = Bits$e;\n                var $230 = $231;\n                break;\n            case 'Word.o':\n                var $232 = self.pred;\n                var $233 = (Word$to_bits$($232) + '0');\n                var $230 = $233;\n                break;\n            case 'Word.i':\n                var $234 = self.pred;\n                var $235 = (Word$to_bits$($234) + '1');\n                var $230 = $235;\n                break;\n        };\n        return $230;\n    };\n    const Word$to_bits = x0 => Word$to_bits$(x0);\n\n    function U32$to_bits$(_a$1) {\n        var self = _a$1;\n        switch ('u32') {\n            case 'u32':\n                var $237 = u32_to_word(self);\n                var $238 = Word$to_bits$($237);\n                var $236 = $238;\n                break;\n        };\n        return $236;\n    };\n    const U32$to_bits = x0 => U32$to_bits$(x0);\n\n    function Mons$Map$set_list$(_pos$1, _objs$2, _map$3) {\n        var $239 = Map$set$(U32$to_bits$(_pos$1), _objs$2, _map$3);\n        return $239;\n    };\n    const Mons$Map$set_list = x0 => x1 => x2 => Mons$Map$set_list$(x0, x1, x2);\n\n    function Mons$Object$new$(_kin$1, _dir$2, _pad$3, _ani$4, _dmg$5, _bag$6, _mon$7, _bos$8, _cap$9, _idl$10, _eff$11) {\n        var $240 = ({\n            _: 'Mons.Object.new',\n            'kin': _kin$1,\n            'dir': _dir$2,\n            'pad': _pad$3,\n            'ani': _ani$4,\n            'dmg': _dmg$5,\n            'bag': _bag$6,\n            'mon': _mon$7,\n            'bos': _bos$8,\n            'cap': _cap$9,\n            'idl': _idl$10,\n            'eff': _eff$11\n        });\n        return $240;\n    };\n    const Mons$Object$new = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => x10 => Mons$Object$new$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);\n    const Mons$Dir$down = ({\n        _: 'Mons.Dir.down'\n    });\n\n    function Mons$Pad$new$(_r$1, _u$2, _l$3, _d$4) {\n        var $241 = ({\n            _: 'Mons.Pad.new',\n            'r': _r$1,\n            'u': _u$2,\n            'l': _l$3,\n            'd': _d$4\n        });\n        return $241;\n    };\n    const Mons$Pad$new = x0 => x1 => x2 => x3 => Mons$Pad$new$(x0, x1, x2, x3);\n    const Mons$Pad$null = Mons$Pad$new$(Bool$false, Bool$false, Bool$false, Bool$false);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $242 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $242;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n\n    function Mons$Effect$new$(_sleep$1, _burn$2, _protect$3, _minimize$4, _invulnerable$5, _hit$6, _poison$7, _swap_agi$8) {\n        var $243 = ({\n            _: 'Mons.Effect.new',\n            'sleep': _sleep$1,\n            'burn': _burn$2,\n            'protect': _protect$3,\n            'minimize': _minimize$4,\n            'invulnerable': _invulnerable$5,\n            'hit': _hit$6,\n            'poison': _poison$7,\n            'swap_agi': _swap_agi$8\n        });\n        return $243;\n    };\n    const Mons$Effect$new = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Mons$Effect$new$(x0, x1, x2, x3, x4, x5, x6, x7);\n    const Mons$Effect$clear = (() => {\n        var _clean$1 = Pair$new$(0, Bool$false);\n        var _clean_bool$2 = Pair$new$(Bool$false, Bool$false);\n        var $244 = Mons$Effect$new$(_clean$1, 0, _clean$1, _clean$1, _clean_bool$2, 0, Bool$false, Bool$false);\n        return $244;\n    })();\n\n    function Mons$Object$new_of_kind$(_kin$1) {\n        var $245 = Mons$Object$new$(_kin$1, Mons$Dir$down, Mons$Pad$null, 0, 0, List$nil, 0, List$nil, Pair$new$(11, List$nil), 0, Mons$Effect$clear);\n        return $245;\n    };\n    const Mons$Object$new_of_kind = x0 => Mons$Object$new_of_kind$(x0);\n\n    function Mons$Kind$Terrain$(_ele$1) {\n        var $246 = ({\n            _: 'Mons.Kind.Terrain',\n            'ele': _ele$1\n        });\n        return $246;\n    };\n    const Mons$Kind$Terrain = x0 => Mons$Kind$Terrain$(x0);\n\n    function Mons$Kind$new_terrain$(_kin$1) {\n        var $247 = Mons$Object$new_of_kind$(Mons$Kind$Terrain$(_kin$1));\n        return $247;\n    };\n    const Mons$Kind$new_terrain = x0 => Mons$Kind$new_terrain$(x0);\n\n    function Mons$Kind$terrain$FLOOR$(_lvl$1, _model$2) {\n        var $248 = ({\n            _: 'Mons.Kind.terrain.FLOOR',\n            'lvl': _lvl$1,\n            'model': _model$2\n        });\n        return $248;\n    };\n    const Mons$Kind$terrain$FLOOR = x0 => x1 => Mons$Kind$terrain$FLOOR$(x0, x1);\n\n    function Mons$Kind$terrain$PATH_BLOCKER$(_lvl$1, _model$2) {\n        var $249 = ({\n            _: 'Mons.Kind.terrain.PATH_BLOCKER',\n            'lvl': _lvl$1,\n            'model': _model$2\n        });\n        return $249;\n    };\n    const Mons$Kind$terrain$PATH_BLOCKER = x0 => x1 => Mons$Kind$terrain$PATH_BLOCKER$(x0, x1);\n    const Bool$and = a0 => a1 => (a0 && a1);\n    const U16$eql = a0 => a1 => (a0 === a1);\n    const String$eql = a0 => a1 => (a0 === a1);\n\n    function Mons$Map$code_to_tile$aux$(_code$1, _cond$2) {\n        var Mons$Map$code_to_tile$aux$ = (_code$1, _cond$2) => ({\n            ctr: 'TCO',\n            arg: [_code$1, _cond$2]\n        });\n        var Mons$Map$code_to_tile$aux = _code$1 => _cond$2 => Mons$Map$code_to_tile$aux$(_code$1, _cond$2);\n        var arg = [_code$1, _cond$2];\n        while (true) {\n            let [_code$1, _cond$2] = arg;\n            var R = (() => {\n                var self = _cond$2;\n                switch (self._) {\n                    case 'List.nil':\n                        var $250 = List$nil;\n                        return $250;\n                    case 'List.cons':\n                        var $251 = self.head;\n                        var $252 = self.tail;\n                        var self = $251;\n                        switch (self._) {\n                            case 'Pair.new':\n                                var $254 = self.fst;\n                                var $255 = self.snd;\n                                var self = (_code$1 === $254);\n                                if (self) {\n                                    var $257 = $255;\n                                    var $256 = $257;\n                                } else {\n                                    var $258 = Mons$Map$code_to_tile$aux$(_code$1, $252);\n                                    var $256 = $258;\n                                };\n                                var $253 = $256;\n                                break;\n                        };\n                        return $253;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Mons$Map$code_to_tile$aux = x0 => x1 => Mons$Map$code_to_tile$aux$(x0, x1);\n\n    function List$cons$(_head$2, _tail$3) {\n        var $259 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $259;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function Pair$(_A$1, _B$2) {\n        var $260 = null;\n        return $260;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n\n    function Mons$Kind$Mons$(_ele$1, _boss$2, _pri_type$3, _agi$4) {\n        var $261 = ({\n            _: 'Mons.Kind.Mons',\n            'ele': _ele$1,\n            'boss': _boss$2,\n            'pri_type': _pri_type$3,\n            'agi': _agi$4\n        });\n        return $261;\n    };\n    const Mons$Kind$Mons = x0 => x1 => x2 => x3 => Mons$Kind$Mons$(x0, x1, x2, x3);\n\n    function Mons$Kind$new_mons$(_kin$1, _type$2, _agi$3) {\n        var $262 = List$cons$(Mons$Object$new_of_kind$(Mons$Kind$Mons$(_kin$1, Bool$false, _type$2, _agi$3)), List$nil);\n        return $262;\n    };\n    const Mons$Kind$new_mons = x0 => x1 => x2 => Mons$Kind$new_mons$(x0, x1, x2);\n    const Mons$Kind$mons$MAGE = ({\n        _: 'Mons.Kind.mons.MAGE'\n    });\n    const Mons$Type$normal = ({\n        _: 'Mons.Type.normal'\n    });\n\n    function Mons$Kind$Const$(_ele$1) {\n        var $263 = ({\n            _: 'Mons.Kind.Const',\n            'ele': _ele$1\n        });\n        return $263;\n    };\n    const Mons$Kind$Const = x0 => Mons$Kind$Const$(x0);\n\n    function Mons$Kind$new_const$(_kin$1) {\n        var $264 = Mons$Object$new_of_kind$(Mons$Kind$Const$(_kin$1));\n        return $264;\n    };\n    const Mons$Kind$new_const = x0 => Mons$Kind$new_const$(x0);\n    const Mons$Kind$const$CRYSTAL = ({\n        _: 'Mons.Kind.const.CRYSTAL'\n    });\n\n    function Mons$Kind$const$FOUNTAIN$(_model$1, _slice$2) {\n        var $265 = ({\n            _: 'Mons.Kind.const.FOUNTAIN',\n            'model': _model$1,\n            'slice': _slice$2\n        });\n        return $265;\n    };\n    const Mons$Kind$const$FOUNTAIN = x0 => x1 => Mons$Kind$const$FOUNTAIN$(x0, x1);\n    const Mons$Kind$const$PORTAL = ({\n        _: 'Mons.Kind.const.PORTAL'\n    });\n    const Mons$Kind$terrain$VOID_BLACK = ({\n        _: 'Mons.Kind.terrain.VOID_BLACK'\n    });\n\n    function Mons$Kind$terrain$MID_CITY$(_row$1, _column$2) {\n        var $266 = ({\n            _: 'Mons.Kind.terrain.MID_CITY',\n            'row': _row$1,\n            'column': _column$2\n        });\n        return $266;\n    };\n    const Mons$Kind$terrain$MID_CITY = x0 => x1 => Mons$Kind$terrain$MID_CITY$(x0, x1);\n\n    function Mons$Kind$terrain$STAIRS$(_row$1, _column$2) {\n        var $267 = ({\n            _: 'Mons.Kind.terrain.STAIRS',\n            'row': _row$1,\n            'column': _column$2\n        });\n        return $267;\n    };\n    const Mons$Kind$terrain$STAIRS = x0 => x1 => Mons$Kind$terrain$STAIRS$(x0, x1);\n\n    function Mons$Kind$Interactive$(_ele$1, _on$2, _eff$3) {\n        var $268 = ({\n            _: 'Mons.Kind.Interactive',\n            'ele': _ele$1,\n            'on': _on$2,\n            'eff': _eff$3\n        });\n        return $268;\n    };\n    const Mons$Kind$Interactive = x0 => x1 => x2 => Mons$Kind$Interactive$(x0, x1, x2);\n\n    function Mons$Kind$new_interactive_tool$(_kin$1, _stt$2, _fun$3) {\n        var $269 = Mons$Object$new_of_kind$(Mons$Kind$Interactive$(_kin$1, _stt$2, _fun$3));\n        return $269;\n    };\n    const Mons$Kind$new_interactive_tool = x0 => x1 => x2 => Mons$Kind$new_interactive_tool$(x0, x1, x2);\n    const Mons$Kind$inter$HEAL = ({\n        _: 'Mons.Kind.inter.HEAL'\n    });\n\n    function Maybe$(_A$1) {\n        var $270 = null;\n        return $270;\n    };\n    const Maybe = x0 => Maybe$(x0);\n\n    function Map$get$(_bits$2, _map$3) {\n        var Map$get$ = (_bits$2, _map$3) => ({\n            ctr: 'TCO',\n            arg: [_bits$2, _map$3]\n        });\n        var Map$get = _bits$2 => _map$3 => Map$get$(_bits$2, _map$3);\n        var arg = [_bits$2, _map$3];\n        while (true) {\n            let [_bits$2, _map$3] = arg;\n            var R = (() => {\n                var self = _bits$2;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'e':\n                        var self = _map$3;\n                        switch (self._) {\n                            case 'Map.new':\n                                var $272 = Maybe$none;\n                                var $271 = $272;\n                                break;\n                            case 'Map.tie':\n                                var $273 = self.val;\n                                var $274 = self.lft;\n                                var $275 = self.rgt;\n                                var $276 = $273;\n                                var $271 = $276;\n                                break;\n                        };\n                        return $271;\n                    case 'o':\n                        var $277 = self.slice(0, -1);\n                        var self = _map$3;\n                        switch (self._) {\n                            case 'Map.new':\n                                var $279 = Maybe$none;\n                                var $278 = $279;\n                                break;\n                            case 'Map.tie':\n                                var $280 = self.val;\n                                var $281 = self.lft;\n                                var $282 = self.rgt;\n                                var $283 = Map$get$($277, $281);\n                                var $278 = $283;\n                                break;\n                        };\n                        return $278;\n                    case 'i':\n                        var $284 = self.slice(0, -1);\n                        var self = _map$3;\n                        switch (self._) {\n                            case 'Map.new':\n                                var $286 = Maybe$none;\n                                var $285 = $286;\n                                break;\n                            case 'Map.tie':\n                                var $287 = self.val;\n                                var $288 = self.lft;\n                                var $289 = self.rgt;\n                                var $290 = Map$get$($284, $289);\n                                var $285 = $290;\n                                break;\n                        };\n                        return $285;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Map$get = x0 => x1 => Map$get$(x0, x1);\n\n    function Mons$Game$get_user_pos$(_user$1, _game$2) {\n        var self = _game$2;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $292 = self.usr;\n                var $293 = self.pos;\n                var $294 = self.map;\n                var $295 = self.stt;\n                var $296 = self.tik;\n                var $297 = Map$get$(Word$to_bits$(_user$1), $293);\n                var $291 = $297;\n                break;\n        };\n        return $291;\n    };\n    const Mons$Game$get_user_pos = x0 => x1 => Mons$Game$get_user_pos$(x0, x1);\n\n    function Mons$Game$get_hero_pos$(_game$1) {\n        var self = _game$1;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $299 = self.usr;\n                var $300 = self.pos;\n                var $301 = self.map;\n                var $302 = self.stt;\n                var $303 = self.tik;\n                var $304 = Mons$Game$get_user_pos$($299, _game$1);\n                var $298 = $304;\n                break;\n        };\n        return $298;\n    };\n    const Mons$Game$get_hero_pos = x0 => Mons$Game$get_hero_pos$(x0);\n\n    function Word$and$(_a$2, _b$3) {\n        var Word$and$ = (_a$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3]\n        });\n        var Word$and = _a$2 => _b$3 => Word$and$(_a$2, _b$3);\n        var arg = [_a$2, _b$3];\n        while (true) {\n            let [_a$2, _b$3] = arg;\n            var R = Word$and$(_a$2, _b$3);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$and = x0 => x1 => Word$and$(x0, x1);\n    const U32$and = a0 => a1 => (a0 & a1);\n    const Pos32$get_x = a0 => ((a0 & 0xFFF));\n    const Pos32$get_y = a0 => (((a0 >>> 12) & 0xFFF));\n    const Pos32$get_z = a0 => ((a0 >>> 24));\n\n    function Mons$Map$get_list$(_pos$1, _map$2) {\n        var self = Map$get$(U32$to_bits$(_pos$1), _map$2);\n        switch (self._) {\n            case 'Maybe.none':\n                var $306 = List$nil;\n                var $305 = $306;\n                break;\n            case 'Maybe.some':\n                var $307 = self.value;\n                var $308 = $307;\n                var $305 = $308;\n                break;\n        };\n        return $305;\n    };\n    const Mons$Map$get_list = x0 => x1 => Mons$Map$get_list$(x0, x1);\n\n    function Mons$Kind$is_hero$(_kind$1) {\n        var self = _kind$1;\n        switch (self._) {\n            case 'Mons.Kind.Mons':\n                var $310 = self.ele;\n                var $311 = self.boss;\n                var $312 = self.pri_type;\n                var $313 = self.agi;\n                var self = $310;\n                switch (self._) {\n                    case 'Mons.Kind.mons.HERO':\n                        var $315 = Bool$true;\n                        var $314 = $315;\n                        break;\n                    case 'Mons.Kind.mons.MAGE':\n                        var $316 = Bool$false;\n                        var $314 = $316;\n                        break;\n                    case 'Mons.Kind.mons.BEHOLDER':\n                        var $317 = Bool$false;\n                        var $314 = $317;\n                        break;\n                    case 'Mons.Kind.mons.ZOIO':\n                        var $318 = Bool$false;\n                        var $314 = $318;\n                        break;\n                    case 'Mons.Kind.mons.CYCLOPE':\n                        var $319 = Bool$false;\n                        var $314 = $319;\n                        break;\n                    case 'Mons.Kind.mons.POISOLICK':\n                        var $320 = Bool$false;\n                        var $314 = $320;\n                        break;\n                    case 'Mons.Kind.mons.TROWL':\n                        var $321 = Bool$false;\n                        var $314 = $321;\n                        break;\n                    case 'Mons.Kind.mons.MIMIC':\n                        var $322 = Bool$false;\n                        var $314 = $322;\n                        break;\n                    case 'Mons.Kind.mons.MIMIC2':\n                        var $323 = Bool$false;\n                        var $314 = $323;\n                        break;\n                    case 'Mons.Kind.mons.AZULA':\n                        var $324 = Bool$false;\n                        var $314 = $324;\n                        break;\n                    case 'Mons.Kind.mons.EMERELDER':\n                        var $325 = Bool$false;\n                        var $314 = $325;\n                        break;\n                    case 'Mons.Kind.mons.EMERELDER2':\n                        var $326 = Bool$false;\n                        var $314 = $326;\n                        break;\n                };\n                var $309 = $314;\n                break;\n            case 'Mons.Kind.Const':\n                var $327 = self.ele;\n                var $328 = Bool$false;\n                var $309 = $328;\n                break;\n            case 'Mons.Kind.Terrain':\n                var $329 = self.ele;\n                var $330 = Bool$false;\n                var $309 = $330;\n                break;\n            case 'Mons.Kind.Interactive':\n                var $331 = self.ele;\n                var $332 = self.on;\n                var $333 = self.eff;\n                var $334 = Bool$false;\n                var $309 = $334;\n                break;\n        };\n        return $309;\n    };\n    const Mons$Kind$is_hero = x0 => Mons$Kind$is_hero$(x0);\n\n    function Mons$Object$get_kin$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $336 = self.kin;\n                var $337 = self.dir;\n                var $338 = self.pad;\n                var $339 = self.ani;\n                var $340 = self.dmg;\n                var $341 = self.bag;\n                var $342 = self.mon;\n                var $343 = self.bos;\n                var $344 = self.cap;\n                var $345 = self.idl;\n                var $346 = self.eff;\n                var $347 = $336;\n                var $335 = $347;\n                break;\n        };\n        return $335;\n    };\n    const Mons$Object$get_kin = x0 => Mons$Object$get_kin$(x0);\n\n    function List$ifind$go$(_xs$2, _f$3, _i$4) {\n        var List$ifind$go$ = (_xs$2, _f$3, _i$4) => ({\n            ctr: 'TCO',\n            arg: [_xs$2, _f$3, _i$4]\n        });\n        var List$ifind$go = _xs$2 => _f$3 => _i$4 => List$ifind$go$(_xs$2, _f$3, _i$4);\n        var arg = [_xs$2, _f$3, _i$4];\n        while (true) {\n            let [_xs$2, _f$3, _i$4] = arg;\n            var R = (() => {\n                var self = _xs$2;\n                switch (self._) {\n                    case 'List.nil':\n                        var $348 = Maybe$none;\n                        return $348;\n                    case 'List.cons':\n                        var $349 = self.head;\n                        var $350 = self.tail;\n                        var self = _f$3($349)(_i$4);\n                        if (self) {\n                            var $352 = Maybe$some$(Pair$new$($349, _i$4));\n                            var $351 = $352;\n                        } else {\n                            var $353 = List$ifind$go$($350, _f$3, Nat$succ$(_i$4));\n                            var $351 = $353;\n                        };\n                        return $351;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$ifind$go = x0 => x1 => x2 => List$ifind$go$(x0, x1, x2);\n\n    function List$ifind$(_xs$2, _f$3) {\n        var $354 = List$ifind$go$(_xs$2, _f$3, Nat$zero);\n        return $354;\n    };\n    const List$ifind = x0 => x1 => List$ifind$(x0, x1);\n    const Mons$Kind$terrain$VOID = ({\n        _: 'Mons.Kind.terrain.VOID'\n    });\n    const Mons$Object$void = (() => {\n        var _void$1 = Mons$Kind$Terrain$(Mons$Kind$terrain$VOID);\n        var $355 = Mons$Object$new$(_void$1, Mons$Dir$down, Mons$Pad$null, 0, 0, List$nil, 0, List$nil, Pair$new$(33, List$nil), 0, Mons$Effect$clear);\n        return $355;\n    })();\n\n    function Pair$fst$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $357 = self.fst;\n                var $358 = self.snd;\n                var $359 = $357;\n                var $356 = $359;\n                break;\n        };\n        return $356;\n    };\n    const Pair$fst = x0 => Pair$fst$(x0);\n\n    function Pair$snd$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $361 = self.fst;\n                var $362 = self.snd;\n                var $363 = $362;\n                var $360 = $363;\n                break;\n        };\n        return $360;\n    };\n    const Pair$snd = x0 => Pair$snd$(x0);\n\n    function Mons$Map$get_hero$(_pos$1, _map$2) {\n        var _tile$3 = Mons$Map$get_list$(_pos$1, _map$2);\n        var _obj_is_hero$4 = (_obj$4 => {\n            var $365 = Mons$Kind$is_hero$(Mons$Object$get_kin$(_obj$4));\n            return $365;\n        });\n        var _fun$5 = (_obj$5 => _idx$6 => {\n            var $366 = _obj_is_hero$4(_obj$5);\n            return $366;\n        });\n        var _both$6 = List$ifind$(_tile$3, _fun$5);\n        var self = _both$6;\n        switch (self._) {\n            case 'Maybe.none':\n                var $367 = Pair$new$(Mons$Object$void, 0);\n                var $364 = $367;\n                break;\n            case 'Maybe.some':\n                var $368 = self.value;\n                var _hero$8 = Pair$fst$($368);\n                var _idx$9 = (Number(Pair$snd$($368)));\n                var $369 = Pair$new$(_hero$8, _idx$9);\n                var $364 = $369;\n                break;\n        };\n        return $364;\n    };\n    const Mons$Map$get_hero = x0 => x1 => Mons$Map$get_hero$(x0, x1);\n    const Mons$Kind$const$CHEST = ({\n        _: 'Mons.Kind.const.CHEST'\n    });\n\n    function Mons$Map$push$(_pos$1, _obj$2, _map$3) {\n        var _objs$4 = Mons$Map$get_list$(_pos$1, _map$3);\n        var _objs$5 = List$cons$(_obj$2, _objs$4);\n        var $370 = Mons$Map$set_list$(_pos$1, _objs$5, _map$3);\n        return $370;\n    };\n    const Mons$Map$push = x0 => x1 => x2 => Mons$Map$push$(x0, x1, x2);\n\n    function Mons$Game$new$(_usr$1, _pos$2, _map$3, _stt$4, _tik$5) {\n        var $371 = ({\n            _: 'Mons.Game.new',\n            'usr': _usr$1,\n            'pos': _pos$2,\n            'map': _map$3,\n            'stt': _stt$4,\n            'tik': _tik$5\n        });\n        return $371;\n    };\n    const Mons$Game$new = x0 => x1 => x2 => x3 => x4 => Mons$Game$new$(x0, x1, x2, x3, x4);\n\n    function Mons$Game$set_map$(_map$1, _game$2) {\n        var self = _game$2;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $373 = self.usr;\n                var $374 = self.pos;\n                var $375 = self.map;\n                var $376 = self.stt;\n                var $377 = self.tik;\n                var $378 = Mons$Game$new$($373, $374, _map$1, $376, $377);\n                var $372 = $378;\n                break;\n        };\n        return $372;\n    };\n    const Mons$Game$set_map = x0 => x1 => Mons$Game$set_map$(x0, x1);\n\n    function Mons$Game$map_push$(_pos$1, _obj$2, _game$3) {\n        var self = _game$3;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $380 = self.usr;\n                var $381 = self.pos;\n                var $382 = self.map;\n                var $383 = self.stt;\n                var $384 = self.tik;\n                var _map$9 = Mons$Map$push$(_pos$1, _obj$2, $382);\n                var $385 = Mons$Game$set_map$(_map$9, _game$3);\n                var $379 = $385;\n                break;\n        };\n        return $379;\n    };\n    const Mons$Game$map_push = x0 => x1 => x2 => Mons$Game$map_push$(x0, x1, x2);\n\n    function Mons$Object$get_adjacent_pos$(_pos$1, _dir$2, _map$3) {\n        var _x$4 = ((_pos$1 & 0xFFF));\n        var _y$5 = (((_pos$1 >>> 12) & 0xFFF));\n        var _z$6 = ((_pos$1 >>> 24));\n        var self = _dir$2;\n        switch (self._) {\n            case 'Mons.Dir.right':\n                var $387 = ((0 | ((_x$4 + 1) >>> 0) | (_y$5 << 12) | (_z$6 << 24)));\n                var $386 = $387;\n                break;\n            case 'Mons.Dir.up':\n                var $388 = ((0 | _x$4 | ((Math.max(_y$5 - 1, 0)) << 12) | (_z$6 << 24)));\n                var $386 = $388;\n                break;\n            case 'Mons.Dir.left':\n                var $389 = ((0 | (Math.max(_x$4 - 1, 0)) | (_y$5 << 12) | (_z$6 << 24)));\n                var $386 = $389;\n                break;\n            case 'Mons.Dir.down':\n                var $390 = ((0 | _x$4 | (((_y$5 + 1) >>> 0) << 12) | (_z$6 << 24)));\n                var $386 = $390;\n                break;\n        };\n        return $386;\n    };\n    const Mons$Object$get_adjacent_pos = x0 => x1 => x2 => Mons$Object$get_adjacent_pos$(x0, x1, x2);\n\n    function Mons$Game$get_tile$(_pos$1, _game$2) {\n        var self = _game$2;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $392 = self.usr;\n                var $393 = self.pos;\n                var $394 = self.map;\n                var $395 = self.stt;\n                var $396 = self.tik;\n                var $397 = Mons$Map$get_list$(_pos$1, $394);\n                var $391 = $397;\n                break;\n        };\n        return $391;\n    };\n    const Mons$Game$get_tile = x0 => x1 => Mons$Game$get_tile$(x0, x1);\n\n    function Mons$Object$get_adjacent_obj_list$(_pos$1, _dir$2, _game$3) {\n        var self = _game$3;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $399 = self.usr;\n                var $400 = self.pos;\n                var $401 = self.map;\n                var $402 = self.stt;\n                var $403 = self.tik;\n                var _adjacent_pos$9 = Mons$Object$get_adjacent_pos$(_pos$1, _dir$2, $401);\n                var $404 = Mons$Game$get_tile$(_adjacent_pos$9, _game$3);\n                var $398 = $404;\n                break;\n        };\n        return $398;\n    };\n    const Mons$Object$get_adjacent_obj_list = x0 => x1 => x2 => Mons$Object$get_adjacent_obj_list$(x0, x1, x2);\n    const Nat$eql = a0 => a1 => (a0 === a1);\n    const List$length = a0 => (list_length(a0));\n\n    function Mons$Object$can_move_forward$(_pos$1, _dir$2, _game$3) {\n        var self = _game$3;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $406 = self.usr;\n                var $407 = self.pos;\n                var $408 = self.map;\n                var $409 = self.stt;\n                var $410 = self.tik;\n                var _adjacent_objs$9 = Mons$Object$get_adjacent_obj_list$(_pos$1, _dir$2, _game$3);\n                var $411 = ((list_length(_adjacent_objs$9)) === 1n);\n                var $405 = $411;\n                break;\n        };\n        return $405;\n    };\n    const Mons$Object$can_move_forward = x0 => x1 => x2 => Mons$Object$can_move_forward$(x0, x1, x2);\n\n    function List$tail$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.nil':\n                var $413 = List$nil;\n                var $412 = $413;\n                break;\n            case 'List.cons':\n                var $414 = self.head;\n                var $415 = self.tail;\n                var $416 = $415;\n                var $412 = $416;\n                break;\n        };\n        return $412;\n    };\n    const List$tail = x0 => List$tail$(x0);\n\n    function List$delete_at_u32$(_idx$2, _list$3) {\n        var self = (_idx$2 === 0);\n        if (self) {\n            var $418 = List$tail$(_list$3);\n            var $417 = $418;\n        } else {\n            var self = _list$3;\n            switch (self._) {\n                case 'List.nil':\n                    var $420 = _list$3;\n                    var $419 = $420;\n                    break;\n                case 'List.cons':\n                    var $421 = self.head;\n                    var $422 = self.tail;\n                    var $423 = List$cons$($421, List$delete_at_u32$((Math.max(_idx$2 - 1, 0)), $422));\n                    var $419 = $423;\n                    break;\n            };\n            var $417 = $419;\n        };\n        return $417;\n    };\n    const List$delete_at_u32 = x0 => x1 => List$delete_at_u32$(x0, x1);\n\n    function Mons$Map$del$(_pos$1, _idx$2, _map$3) {\n        var _objs$4 = Mons$Map$get_list$(_pos$1, _map$3);\n        var _objs$5 = List$delete_at_u32$(_idx$2, _objs$4);\n        var $424 = Mons$Map$set_list$(_pos$1, _objs$5, _map$3);\n        return $424;\n    };\n    const Mons$Map$del = x0 => x1 => x2 => Mons$Map$del$(x0, x1, x2);\n\n    function Mons$Game$map_del$(_pos$1, _idx$2, _game$3) {\n        var self = _game$3;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $426 = self.usr;\n                var $427 = self.pos;\n                var $428 = self.map;\n                var $429 = self.stt;\n                var $430 = self.tik;\n                var _map$9 = Mons$Map$del$(_pos$1, _idx$2, $428);\n                var $431 = Mons$Game$set_map$(_map$9, _game$3);\n                var $425 = $431;\n                break;\n        };\n        return $425;\n    };\n    const Mons$Game$map_del = x0 => x1 => x2 => Mons$Game$map_del$(x0, x1, x2);\n\n    function Mons$Object$heal_all_mons$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $433 = self.kin;\n                var $434 = self.dir;\n                var $435 = self.pad;\n                var $436 = self.ani;\n                var $437 = self.dmg;\n                var $438 = self.bag;\n                var $439 = self.mon;\n                var $440 = self.bos;\n                var $441 = self.cap;\n                var $442 = self.idl;\n                var $443 = self.eff;\n                var $444 = _obj$1;\n                var $432 = $444;\n                break;\n        };\n        return $432;\n    };\n    const Mons$Object$heal_all_mons = x0 => Mons$Object$heal_all_mons$(x0);\n\n    function List$update_at$(_index$2, _fn$3, _list$4) {\n        var self = _list$4;\n        switch (self._) {\n            case 'List.nil':\n                var $446 = List$nil;\n                var $445 = $446;\n                break;\n            case 'List.cons':\n                var $447 = self.head;\n                var $448 = self.tail;\n                var self = _index$2;\n                if (self === 0n) {\n                    var $450 = List$cons$(_fn$3($447), $448);\n                    var $449 = $450;\n                } else {\n                    var $451 = (self - 1n);\n                    var $452 = List$cons$($447, List$update_at$($451, _fn$3, $448));\n                    var $449 = $452;\n                };\n                var $445 = $449;\n                break;\n        };\n        return $445;\n    };\n    const List$update_at = x0 => x1 => x2 => List$update_at$(x0, x1, x2);\n\n    function Mons$Map$set$(_pos$1, _idx$2, _val$3, _map$4) {\n        var _list$5 = Mons$Map$get_list$(_pos$1, _map$4);\n        var _list$6 = List$update_at$(U32$to_nat$(_idx$2), (_$6 => {\n            var $454 = _val$3;\n            return $454;\n        }), _list$5);\n        var $453 = Mons$Map$set_list$(_pos$1, _list$6, _map$4);\n        return $453;\n    };\n    const Mons$Map$set = x0 => x1 => x2 => x3 => Mons$Map$set$(x0, x1, x2, x3);\n\n    function Mons$Game$map_set$(_pos$1, _idx$2, _obj$3, _game$4) {\n        var self = _game$4;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $456 = self.usr;\n                var $457 = self.pos;\n                var $458 = self.map;\n                var $459 = self.stt;\n                var $460 = self.tik;\n                var _map$10 = Mons$Map$set$(_pos$1, _idx$2, _obj$3, $458);\n                var $461 = Mons$Game$set_map$(_map$10, _game$4);\n                var $455 = $461;\n                break;\n        };\n        return $455;\n    };\n    const Mons$Game$map_set = x0 => x1 => x2 => x3 => Mons$Game$map_set$(x0, x1, x2, x3);\n\n    function Mons$Kind$inter_lever_eff$(_kind$1, _on$2, _game$3) {\n        var self = Mons$Game$get_hero_pos$(_game$3);\n        switch (self._) {\n            case 'Maybe.none':\n                var $463 = _game$3;\n                var $462 = $463;\n                break;\n            case 'Maybe.some':\n                var $464 = self.value;\n                var _hero_pos$5 = $464;\n                var _x$6 = ((_hero_pos$5 & 0xFFF));\n                var _y$7 = (((_hero_pos$5 >>> 12) & 0xFFF));\n                var _z$8 = ((_hero_pos$5 >>> 24));\n                var self = _game$3;\n                switch (self._) {\n                    case 'Mons.Game.new':\n                        var $466 = self.usr;\n                        var $467 = self.pos;\n                        var $468 = self.map;\n                        var $469 = self.stt;\n                        var $470 = self.tik;\n                        var _map$14 = $468;\n                        var _hero_pair$15 = Mons$Map$get_hero$(_hero_pos$5, _map$14);\n                        var _hero_obj$16 = Pair$fst$(_hero_pair$15);\n                        var _hero_idx$17 = Pair$snd$(_hero_pair$15);\n                        var _obj_idx$18 = 0;\n                        var self = _hero_obj$16;\n                        switch (self._) {\n                            case 'Mons.Object.new':\n                                var $472 = self.kin;\n                                var $473 = self.dir;\n                                var $474 = self.pad;\n                                var $475 = self.ani;\n                                var $476 = self.dmg;\n                                var $477 = self.bag;\n                                var $478 = self.mon;\n                                var $479 = self.bos;\n                                var $480 = self.cap;\n                                var $481 = self.idl;\n                                var $482 = self.eff;\n                                var self = _kind$1;\n                                switch (self._) {\n                                    case 'Mons.Kind.inter.LEVER':\n                                        var $484 = self.id;\n                                        var self = (_z$8 === 1);\n                                        if (self) {\n                                            var self = ($484 === 0);\n                                            if (self) {\n                                                var _sign$31 = Mons$Kind$new_const$(Mons$Kind$const$CHEST);\n                                                var _obj_pos$32 = ((0 | ((1 + _x$6) >>> 0) | ((Math.max(_y$7 - 1, 0)) << 12) | (_z$8 << 24)));\n                                                var $487 = Mons$Game$map_push$(_obj_pos$32, _sign$31, _game$3);\n                                                var $486 = $487;\n                                            } else {\n                                                var $488 = _game$3;\n                                                var $486 = $488;\n                                            };\n                                            var $485 = $486;\n                                        } else {\n                                            var $489 = _game$3;\n                                            var $485 = $489;\n                                        };\n                                        var $483 = $485;\n                                        break;\n                                    case 'Mons.Kind.inter.MOVE':\n                                        var _movable_obj_pos$30 = Mons$Object$get_adjacent_pos$(_hero_pos$5, $473, _map$14);\n                                        var self = Mons$Object$can_move_forward$(_movable_obj_pos$30, $473, _game$3);\n                                        if (self) {\n                                            var _obj$31 = Mons$Kind$new_interactive_tool$(_kind$1, Bool$true, Mons$Kind$inter_lever_eff);\n                                            var _new_pos$32 = Mons$Object$get_adjacent_pos$(_movable_obj_pos$30, $473, _map$14);\n                                            var _game$33 = Mons$Game$map_del$(_movable_obj_pos$30, _obj_idx$18, _game$3);\n                                            var $491 = Mons$Game$map_push$(_new_pos$32, _obj$31, _game$33);\n                                            var $490 = $491;\n                                        } else {\n                                            var $492 = _game$3;\n                                            var $490 = $492;\n                                        };\n                                        var $483 = $490;\n                                        break;\n                                    case 'Mons.Kind.inter.HEAL':\n                                        var self = _on$2;\n                                        if (self) {\n                                            var $494 = _game$3;\n                                            var $493 = $494;\n                                        } else {\n                                            var _hero_obj$30 = Mons$Object$heal_all_mons$(_hero_obj$16);\n                                            var $495 = Mons$Game$map_set$(_hero_pos$5, _hero_idx$17, _hero_obj$30, _game$3);\n                                            var $493 = $495;\n                                        };\n                                        var $483 = $493;\n                                        break;\n                                };\n                                var $471 = $483;\n                                break;\n                        };\n                        var $465 = $471;\n                        break;\n                };\n                var $462 = $465;\n                break;\n        };\n        return $462;\n    };\n    const Mons$Kind$inter_lever_eff = x0 => x1 => x2 => Mons$Kind$inter_lever_eff$(x0, x1, x2);\n\n    function Mons$Kind$inter$LEVER$(_id$1) {\n        var $496 = ({\n            _: 'Mons.Kind.inter.LEVER',\n            'id': _id$1\n        });\n        return $496;\n    };\n    const Mons$Kind$inter$LEVER = x0 => Mons$Kind$inter$LEVER$(x0);\n    const Mons$Kind$terrain$GRASS_PLANT = ({\n        _: 'Mons.Kind.terrain.GRASS_PLANT'\n    });\n    const Mons$Kind$terrain$PLANT_0 = ({\n        _: 'Mons.Kind.terrain.PLANT_0'\n    });\n\n    function Mons$Map$code_to_tile$(_code$1, _dim$2) {\n        var self = (_dim$2 === 0);\n        if (self) {\n            var _path_brick$3 = Mons$Kind$new_terrain$(Mons$Kind$terrain$FLOOR$(0, 0));\n            var _lvl0$4 = 0;\n            var _path_blocker$5 = Mons$Kind$new_terrain$(Mons$Kind$terrain$PATH_BLOCKER$(_lvl0$4, 0));\n            var $498 = Mons$Map$code_to_tile$aux$(_code$1, List$cons$(Pair$new$(\"mg\", Mons$Kind$new_mons$(Mons$Kind$mons$MAGE, Mons$Type$normal, 2)), List$cons$(Pair$new$(\"ct\", List$cons$(Mons$Kind$new_const$(Mons$Kind$const$CRYSTAL), List$nil)), List$cons$(Pair$new$(\"ft\", List$cons$(Mons$Kind$new_const$(Mons$Kind$const$FOUNTAIN$(_lvl0$4, 0)), List$cons$(_path_brick$3, List$nil))), List$cons$(Pair$new$(\"pt\", List$cons$(Mons$Kind$new_const$(Mons$Kind$const$PORTAL), List$nil)), List$cons$(Pair$new$(\".g\", List$cons$(_path_brick$3, List$nil)), List$cons$(Pair$new$(\"bb\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$VOID_BLACK), List$nil)), List$cons$(Pair$new$(\"xx\", List$cons$(_path_blocker$5, List$nil)), List$cons$(Pair$new$(\"c1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(0, 1)), List$nil)), List$cons$(Pair$new$(\"c2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(0, 2)), List$nil)), List$cons$(Pair$new$(\"c3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(0, 3)), List$nil)), List$cons$(Pair$new$(\"c4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(0, 4)), List$nil)), List$cons$(Pair$new$(\"c5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(0, 5)), List$nil)), List$cons$(Pair$new$(\"d1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(1, 1)), List$nil)), List$cons$(Pair$new$(\"d2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(1, 2)), List$nil)), List$cons$(Pair$new$(\"d3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(1, 3)), List$nil)), List$cons$(Pair$new$(\"d4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(1, 4)), List$nil)), List$cons$(Pair$new$(\"d5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(1, 5)), List$nil)), List$cons$(Pair$new$(\"e1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(2, 1)), List$nil)), List$cons$(Pair$new$(\"e2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(2, 2)), List$nil)), List$cons$(Pair$new$(\"e3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(2, 3)), List$nil)), List$cons$(Pair$new$(\"e4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(2, 4)), List$nil)), List$cons$(Pair$new$(\"e5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(2, 5)), List$nil)), List$cons$(Pair$new$(\"f1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(3, 1)), List$nil)), List$cons$(Pair$new$(\"f2\", List$cons$(_path_blocker$5, List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(3, 2)), List$nil))), List$cons$(Pair$new$(\"f3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(3, 3)), List$nil)), List$cons$(Pair$new$(\"f4\", List$cons$(_path_blocker$5, List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(3, 4)), List$nil))), List$cons$(Pair$new$(\"f5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(3, 5)), List$nil)), List$cons$(Pair$new$(\"g1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(4, 1)), List$nil)), List$cons$(Pair$new$(\"g2\", List$cons$(_path_blocker$5, List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(4, 2)), List$nil))), List$cons$(Pair$new$(\"g3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(4, 3)), List$nil)), List$cons$(Pair$new$(\"g4\", List$cons$(_path_blocker$5, List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(4, 4)), List$nil))), List$cons$(Pair$new$(\"g5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(4, 5)), List$nil)), List$cons$(Pair$new$(\"a1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(5, 1)), List$nil)), List$cons$(Pair$new$(\"a2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(5, 2)), List$nil)), List$cons$(Pair$new$(\"a3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(5, 3)), List$nil)), List$cons$(Pair$new$(\"a4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(5, 4)), List$nil)), List$cons$(Pair$new$(\"a5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(5, 5)), List$nil)), List$cons$(Pair$new$(\"b1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(6, 1)), List$nil)), List$cons$(Pair$new$(\"b2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(6, 2)), List$nil)), List$cons$(Pair$new$(\"b3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(6, 3)), List$nil)), List$cons$(Pair$new$(\"b4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(6, 4)), List$nil)), List$cons$(Pair$new$(\"b5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(6, 5)), List$nil)), List$cons$(Pair$new$(\"h1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(7, 1)), List$nil)), List$cons$(Pair$new$(\"h2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(7, 2)), List$nil)), List$cons$(Pair$new$(\"h3\", List$cons$(_path_blocker$5, List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(7, 3)), List$nil))), List$cons$(Pair$new$(\"h4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(7, 4)), List$nil)), List$cons$(Pair$new$(\"h5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(7, 5)), List$nil)), List$cons$(Pair$new$(\"i1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(8, 1)), List$nil)), List$cons$(Pair$new$(\"i2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(8, 2)), List$nil)), List$cons$(Pair$new$(\"i3\", List$cons$(_path_blocker$5, List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(8, 3)), List$cons$(Mons$Kind$new_const$(Mons$Kind$const$FOUNTAIN$(_lvl0$4, 0)), List$nil)))), List$cons$(Pair$new$(\"i4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(8, 4)), List$nil)), List$cons$(Pair$new$(\"i5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(8, 5)), List$nil)), List$cons$(Pair$new$(\"j1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(9, 1)), List$nil)), List$cons$(Pair$new$(\"j2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(9, 2)), List$nil)), List$cons$(Pair$new$(\"j3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(9, 3)), List$nil)), List$cons$(Pair$new$(\"j4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(9, 4)), List$nil)), List$cons$(Pair$new$(\"j5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(9, 5)), List$nil)), List$cons$(Pair$new$(\"k1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(10, 1)), List$nil)), List$cons$(Pair$new$(\"k2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(10, 2)), List$nil)), List$cons$(Pair$new$(\"k3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(10, 3)), List$nil)), List$cons$(Pair$new$(\"k4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(10, 4)), List$nil)), List$cons$(Pair$new$(\"k5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(10, 5)), List$nil)), List$cons$(Pair$new$(\"l1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(11, 1)), List$nil)), List$cons$(Pair$new$(\"l2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(11, 2)), List$nil)), List$cons$(Pair$new$(\"l3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(11, 3)), List$nil)), List$cons$(Pair$new$(\"l4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(11, 4)), List$nil)), List$cons$(Pair$new$(\"l5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(11, 5)), List$nil)), List$cons$(Pair$new$(\"m1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(12, 1)), List$nil)), List$cons$(Pair$new$(\"m2\", List$cons$(_path_blocker$5, List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(12, 2)), List$nil))), List$cons$(Pair$new$(\"m3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(12, 3)), List$nil)), List$cons$(Pair$new$(\"m4\", List$cons$(_path_blocker$5, List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(12, 4)), List$nil))), List$cons$(Pair$new$(\"m5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(12, 5)), List$nil)), List$cons$(Pair$new$(\"n1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(13, 1)), List$nil)), List$cons$(Pair$new$(\"n2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(13, 2)), List$nil)), List$cons$(Pair$new$(\"n3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(13, 3)), List$nil)), List$cons$(Pair$new$(\"n4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(13, 4)), List$nil)), List$cons$(Pair$new$(\"n5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(13, 5)), List$nil)), List$cons$(Pair$new$(\"o1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(14, 1)), List$nil)), List$cons$(Pair$new$(\"o2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(14, 2)), List$nil)), List$cons$(Pair$new$(\"o3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(14, 3)), List$nil)), List$cons$(Pair$new$(\"o4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(14, 4)), List$nil)), List$cons$(Pair$new$(\"o5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(14, 5)), List$nil)), List$cons$(Pair$new$(\"p1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(15, 1)), List$nil)), List$cons$(Pair$new$(\"p2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(15, 2)), List$nil)), List$cons$(Pair$new$(\"p3\", List$cons$(_path_blocker$5, List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(15, 3)), List$nil))), List$cons$(Pair$new$(\"p4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(15, 4)), List$nil)), List$cons$(Pair$new$(\"p5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(15, 5)), List$nil)), List$cons$(Pair$new$(\"q1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(16, 1)), List$nil)), List$cons$(Pair$new$(\"q2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(16, 2)), List$nil)), List$cons$(Pair$new$(\"q3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(16, 3)), List$nil)), List$cons$(Pair$new$(\"q4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(16, 4)), List$nil)), List$cons$(Pair$new$(\"q5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(16, 5)), List$nil)), List$cons$(Pair$new$(\"r1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(17, 1)), List$nil)), List$cons$(Pair$new$(\"r2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(17, 2)), List$nil)), List$cons$(Pair$new$(\"r3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(17, 3)), List$nil)), List$cons$(Pair$new$(\"r4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(17, 4)), List$nil)), List$cons$(Pair$new$(\"r5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(17, 5)), List$nil)), List$cons$(Pair$new$(\"s1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(18, 1)), List$nil)), List$cons$(Pair$new$(\"s2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(18, 2)), List$nil)), List$cons$(Pair$new$(\"s3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(18, 3)), List$nil)), List$cons$(Pair$new$(\"s4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(18, 4)), List$nil)), List$cons$(Pair$new$(\"s5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(18, 5)), List$nil)), List$cons$(Pair$new$(\"t1\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(19, 1)), List$nil)), List$cons$(Pair$new$(\"t2\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(19, 2)), List$nil)), List$cons$(Pair$new$(\"t3\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(19, 3)), List$nil)), List$cons$(Pair$new$(\"t4\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(19, 4)), List$nil)), List$cons$(Pair$new$(\"t5\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$MID_CITY$(19, 5)), List$nil)), List$cons$(Pair$new$(\"fg\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(0, 0)), List$nil)), List$cons$(Pair$new$(\"mc\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(38, 0)), List$nil)), List$cons$(Pair$new$(\"mf\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(38, 1)), List$nil)), List$cons$(Pair$new$(\"lc\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(37, 0)), List$nil)), List$cons$(Pair$new$(\"lf\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(37, 1)), List$nil)), List$cons$(Pair$new$(\"kc\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(36, 0)), List$nil)), List$cons$(Pair$new$(\"kf\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(36, 1)), List$nil)), List$cons$(Pair$new$(\"jc\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(35, 0)), List$nil)), List$cons$(Pair$new$(\"jf\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(35, 1)), List$nil)), List$cons$(Pair$new$(\"ic\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(34, 0)), List$nil)), List$cons$(Pair$new$(\"if\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$STAIRS$(34, 1)), List$nil)), List$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n            var $497 = $498;\n        } else {\n            var self = (_dim$2 === 1);\n            if (self) {\n                var _floor$3 = Mons$Kind$new_terrain$(Mons$Kind$terrain$FLOOR$(1, 0));\n                var $500 = Mons$Map$code_to_tile$aux$(_code$1, List$cons$(Pair$new$(\"ft\", List$cons$(Mons$Kind$new_const$(Mons$Kind$const$FOUNTAIN$(1, 0)), List$nil)), List$cons$(Pair$new$(\"pt\", List$cons$(Mons$Kind$new_const$(Mons$Kind$const$PORTAL), List$nil)), List$cons$(Pair$new$(\"hl\", List$cons$(Mons$Kind$new_interactive_tool$(Mons$Kind$inter$HEAL, Bool$false, Mons$Kind$inter_lever_eff), List$cons$(_floor$3, List$nil))), List$cons$(Pair$new$(\"al\", List$cons$(Mons$Kind$new_interactive_tool$(Mons$Kind$inter$LEVER$(0), Bool$false, Mons$Kind$inter_lever_eff), List$nil)), List$cons$(Pair$new$(\".g\", List$cons$(_floor$3, List$nil)), List$cons$(Pair$new$(\".d\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$GRASS_PLANT), List$nil)), List$cons$(Pair$new$(\"xx\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$PATH_BLOCKER$(1, 0)), List$nil)), List$cons$(Pair$new$(\"pg\", List$cons$(Mons$Kind$new_terrain$(Mons$Kind$terrain$PLANT_0), List$cons$(_floor$3, List$nil))), List$nil)))))))));\n                var $499 = $500;\n            } else {\n                var self = (_dim$2 === 2);\n                if (self) {\n                    var _floor$3 = Mons$Kind$new_terrain$(Mons$Kind$terrain$FLOOR$(2, 0));\n                    var $502 = Mons$Map$code_to_tile$aux$(_code$1, List$cons$(Pair$new$(\".g\", List$cons$(_floor$3, List$nil)), List$cons$(Pair$new$(\"pt\", List$cons$(Mons$Kind$new_const$(Mons$Kind$const$PORTAL), List$nil)), List$nil)));\n                    var $501 = $502;\n                } else {\n                    var _path_brick$3 = Mons$Kind$new_terrain$(Mons$Kind$terrain$FLOOR$(1, 0));\n                    var $503 = Mons$Map$code_to_tile$aux$(_code$1, List$cons$(Pair$new$(\".g\", List$cons$(_path_brick$3, List$nil)), List$nil));\n                    var $501 = $503;\n                };\n                var $499 = $501;\n            };\n            var $497 = $499;\n        };\n        return $497;\n    };\n    const Mons$Map$code_to_tile = x0 => x1 => Mons$Map$code_to_tile$(x0, x1);\n\n    function Mons$Map$build$(_code$1) {\n        var $504 = List$ifor_u32$(_code$1, Mons$Map$new, (_z$2 => _plane$3 => _map$4 => {\n            var _size$5 = List$length_u32$(_plane$3);\n            var $505 = List$ifor_u32$(_plane$3, _map$4, (_j$6 => _row$7 => _map$8 => {\n                var _map$9 = (() => {\n                    var $507 = _map$8;\n                    var $508 = 0;\n                    var $509 = _size$5;\n                    let _map$10 = $507;\n                    for (let _i$9 = $508; _i$9 < $509; ++_i$9) {\n                        var _t_x$11 = (((Math.max(2048 - ((_size$5 / 2) >>> 0), 0)) + _i$9) >>> 0);\n                        var _t_y$12 = (((Math.max(2048 - ((_size$5 / 2) >>> 0), 0)) + _j$6) >>> 0);\n                        var _t_z$13 = _z$2;\n                        var _pos$14 = ((0 | _t_x$11 | (_t_y$12 << 12) | (_t_z$13 << 24)));\n                        var _ini$15 = U32$to_nat$(((_i$9 * 2) >>> 0));\n                        var _end$16 = U32$to_nat$(((((_i$9 * 2) >>> 0) + 2) >>> 0));\n                        var _sli$17 = String$slice$(_ini$15, _end$16, _row$7);\n                        var $507 = Mons$Map$set_list$(_pos$14, Mons$Map$code_to_tile$(_sli$17, _z$2), _map$10);\n                        _map$10 = $507;\n                    };\n                    return _map$10;\n                })();\n                var $506 = _map$9;\n                return $506;\n            }));\n            return $505;\n        }));\n        return $504;\n    };\n    const Mons$Map$build = x0 => Mons$Map$build$(x0);\n    const Mons$map_source = List$cons$(List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbptbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbecbbxx.g.gfg.g.gxxbbefbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbfcbbxx.g.gfg.g.gxxbbffbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbgcbbxx.g.gfg.g.gxxbbgfbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbhcxx.g.gfg.g.gxxhfbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbicxx.g.gfg.g.gxxifbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbjcxx.g.gfg.g.gxxjfbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbkcxx.g.gfg.g.gxxkfbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbblcxx.g.gfg.g.gxxlfbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbmcxx.g.gfg.g.gxxmfbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbc0bbbbbbbbc1bbbbbbbbc2bbxx.g.gc3.g.gxxbbc4bbbbbbbbc5bbbbbbbbc6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbd0bbbbbbbbd1bbbbbbbbd2bbxx.g.gd3.g.gxxbbd4bbbbbbbbd5bbbbbbbbd6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbe0bbbbbbbbe1bbbbbbbbe2bbxx.g.ge3.g.gxxbbe4bbbbbbbbe5bbbbbbbbe6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbf0bbbbbbbbf1bbbbbbxxf2xx.g.g.gf3.g.g.gxxf4xxbbbbbbf5bbbbbbbbf6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbg0bbbbbbbbg1bbbbbbxxg2.g.g.g.gg3.g.g.g.gg4xxbbbbbbg5bbbbbbbbg6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbba0bbbbbbbba1bbbbbbxxa2.g.g.g.ga3.g.g.g.ga4xxbbbbbba5bbbbbbbba6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb0bbbbbbbbb1bbbbbbxxb2.g.g.g.gb3.g.g.g.gb4xxbbbbbbb5bbbbbbbbb6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbh0bbbbbbbbh1bbbbbbxxh2.g.g.g.gh3.g.g.g.gh4xxbbbbbbh5bbbbbbbbh6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbi0bbbbbbbbi1bbbbbbxxi2.g.g.gxxi3xx.g.g.gi4xxbbbbbbi5bbbbbbbbi6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbj0bbbbbbbbj1bbbbbbxxj2.g.g.g.gj3mg.g.g.gj4xxbbbbbbj5bbbbbbbbj6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbk0bbbbbbbbk1bbbbbbxxk2.g.g.g.gk3.g.g.g.gk4xxbbbbbbk5bbbbbbbbk6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbl0bbbbbbbbl1bbbbbbxxl2.g.g.g.gl3.g.g.g.gl4xxbbbbbbl5bbbbbbbbl6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbm0bbbbbbbbm1bbbbbbxxm2.g.g.g.gm3.g.gxxxxm4xxbbbbbbm5bbbbbbbbm6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbn0bbbbbbbbn1bbbbbbbbn2xx.g.g.gn3.g.gxxxxn4bbbbbbbbn5bbbbbbbbn6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbo0bbbbbbbbo1bbbbbbbbo2xx.g.g.go3.g.gxxbbo4bbbbbbbbo5bbbbbbbbo6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbp0bbbbbbbbp1bbbbbbbbp2xxxxxxxxp3xxxxxxbbp4bbbbbbbbp4bbbbbbbbp6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbq0bbbbbbbbq1bbbbbbbbq2xxbbbbbbq3bbbbxxbbq4bbbbbbbbq5bbbbbbbbq6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbr0bbbbbbbbr1bbbbbbbbr2bbxxbbbbr3bbbbxxbbr4bbbbbbbbr5bbbbbbbbr6bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbs1bbbbbbbbs2bbxxbbbbs3bbbbxxbbs4bbbbbbbbs5bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbt1bbbbbbbbt2bbxxbbbbt3bbbbxxbbt4bbbbbbbbt5bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbu1bbbbbbbbu2bbxxbbbbu3bbbbxxbbu4bbbbbbbbu5bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbv1bbbbbbbbv2bbxxbbbbv3bbbbxxbbv4bbbbbbbbv5bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbw1bbbbbbbbw2bbxxxxxxw3xxxxxxbbw4bbbbbbbbw5bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbx1bbbbbbbbx2bbbbbbbbx3bbbbbbbbx4bbbbbbbbx5bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbby1bbbbbbbby2bbbbbbbby3bbbbbbbby4bbbbbbbby5bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbz1bbbbbbbbz2bbbbbbbbz3bbbbbbbbz4bbbbbbbbz5bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbacbbbbbbbbadbbbbbbbbaebbbbbbbbafbbbbbbbbagbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbcbbbbbbbbbdbbbbbbbbbebbbbbbbbbfbbbbbbbbbgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccbbbbbbbbcdbbbbbbbbcebbbbbbbbcfbbbbbbbbcgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbdcbbbbbbbbddbbbbbbbbdebbbbbbbbdfbbbbbbbbdgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbegbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbfgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbggbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbhgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbigbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbjgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbkgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbblgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbmgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), List$cons$(List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpg.g.g.g.gpgpgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbpgpg.g.gpt.g.g.gpgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.gpgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpg.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.ghl.g.g.g.g.g.gpgpgpg.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gpgpg.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gpgpg.g.g.g.g.g.g.g.g.g.g.gpgpg.g.g.g.g.gpgpg.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.gpgbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbpg.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpgpgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.gpopopopopopopo.g.g.g.g.gbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.gpopopopopopopo.g.g.g.g.gbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.gpopopopopopopo.g.g.g.g.gbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbememememememem.g.g.g.g.g.gpgpgbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.gpopopopopopopo.g.g.g.g.gbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbpgememememememem.g.g.g.g.g.gpgpgpgbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbpgpgpgpgpgpopopopopopopopgpgpgpgpgbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbpgememememememem.g.g.g.g.g.g.gpgpgbbbbbbbbbbbb.g.g.gmimimimimimimi.g.g.gpg.g.gbbbbbbpgpgpgpgpgpopopopopopopopgpgpgpgpgbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbpgpgememememememem.g.g.g.g.g.g.g.g.g.gbbbbbbbbbb.g.g.gmimimimimimimi.g.g.g.g.g.gbbbbbb.g.g.g.g.gpopopopopopopo.g.g.g.g.gbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbpgpgememememememem.g.g.g.g.g.g.g.g.g.g.ghl.g.g.g.g.g.gmimimimimimimi.g.g.g.g.g.gbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbpgpgemememememememenenenenenenen.g.g.g.g.g.g.g.g.g.g.gmimimimimimimi.g.g.gpgpg.gbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbpgpgemememememememenenenenenenen.g.g.g.g.g.g.g.g.g.g.gmimimimimimimi.g.g.gpgpg.gbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbpgpg.g.g.g.g.g.g.genenenenenenen.g.g.gbbbbbbbbbb.g.g.gmimimimimimimi.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbpgpgpgpg.g.g.g.g.genenenenenenenpgpgbbbbbbbbbbbb.g.g.gmimimimimimimi.g.g.gpgpg.gbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbpgpgpgpg.g.g.g.genenenenenenenpgpgbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.gpgpg.gbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbpgpgpgpgpg.g.g.genenenenenenenpgbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.gpg.g.g.g.g.gbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpgpg.g.g.genenenenenenenbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbb.g.gmimimimimimimi.g.gbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbb.g.gmimimimimimimi.g.gbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbb.g.gmimimimimimimi.g.gbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpgpgpgpgpg.gpgpgpgpgpgpgpgpgpgpgpg.g.g.g.gpgpgbbbbbbbbbbbb.g.gmimimimimimimi.g.gbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpg.g.g.g.g.g.gbbbbbbbbpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpg.g.g.g.gpgpgbbbbbbbbbbbb.g.gmimimimimimimi.g.gbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpgtrtrtrtrtrtrtr.gbbbbbb.gpgpgpgpgpgpgpgpgpgpgpg.gpgpgpgazazazazazazaz.gbbbbbbbbbbbb.g.gmimimimimimimi.g.gbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpgtrtrtrtrtrtrtr.gbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gazazazazazazaz.gbbbbbbbbbbbb.g.gmimimimimimimi.g.gbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gtrtrtrtrtrtrtr.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gazazazazazazaz.gbbbbbbbbbbbb.g.g.gpg.g.g.gpg.g.g.gbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gtrtrtrtrtrtrtr.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gazazazazazazaz.gbbbbbbbbbbbb.g.g.gpg.g.g.gpg.g.g.gbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gtrtrtrtrtrtrtr.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gazazazazazazaz.gbbbbbbbbbbbbbb.g.gpg.g.g.gpg.g.gbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gtrtrtrtrtrtrtr.gbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gazazazazazazaz.gbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gtrtrtrtrtrtrtrpgbbbbbb.g.g.g.gpgpgpgpgpg.gpgpgpgpgpgpgazazazazazazaz.gbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.gpgpgpgbbbbbb.gpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpg.g.g.g.g.gbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.gpgpgbbbbbbbbpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpgpg.g.gpgpgpgbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbpgpgpgpg.gpgpgpgpgpgpgpg.g.g.gpgpgpg.g.g.gpgpgpgbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpgcycycycycycycy.gbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpgpgcycycycycycycy.g.gbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbpgpg.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpg.gcycycycycycycy.g.gbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbpgpg.gzozozozozozozobbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gcycycycycycycy.g.gbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gzozozozozozozo.gbbbbbbbbbbbbbbbbbbbbbbbb.g.g.gcycycycycycycy.g.gbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gzozozozozozozo.g.g.g.gpgpgpg.g.g.g.ghl.g.g.g.gcycycycycycycy.g.gbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gzozozozozozozo.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gcycycycycycycy.g.gbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbpg.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbpgpg.gzozozozozozozo.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpgpg.g.g.g.g.g.g.gbbbbbbbbbbbbbbbb.g.g.gzozozozozozozopgpgbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbpgpg.g.g.g.g.g.gbbbbbbbbbbbbbbbbbb.g.g.gzozozozozozozo.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.gpg.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.gpg.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gpg.g.g.g.gpg.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.gpg.g.g.g.g.g.g.g.gpg.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.gpg.g.g.g.g.g.g.g.gpg.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gpg.g.g.g.gpg.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$cons$(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb.g.g.g.g.g.gbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\", List$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), List$cons$(List$cons$(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", List$cons$(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", List$cons$(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", List$cons$(\"xxxxxxxxxxxxxx.g.g.g.g.g.gxxxxxxxxxxxxxx\", List$cons$(\"xxxxxxxxxx.g.g.g.g.g.g.g.g.g.gxxxxxxxxxx\", List$cons$(\"xxxxxxxx.g.g.g.g.g.g.g.g.g.g.g.gxxxxxxxx\", List$cons$(\"xxxxxx.g.g.g.g.g.g.g.g.g.g.g.g.g.gxxxxxx\", List$cons$(\"xxxxxx.g.g.g.g.g.g.g.g.g.g.g.g.g.gxxxxxx\", List$cons$(\"xxxx.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gxxxx\", List$cons$(\"xxxx.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gxxxx\", List$cons$(\"xxxx.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gxxxx\", List$cons$(\"xxxx.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gxxxx\", List$cons$(\"xxxx.g.g.g.g.g.g.g.g.g.g.g.g.g.g.g.gxxxx\", List$cons$(\"xxxxxx.g.g.g.g.g.g.g.g.g.g.g.g.g.gxxxxxx\", List$cons$(\"xxxxxx.g.g.g.g.g.g.g.g.g.g.g.g.g.gxxxxxx\", List$cons$(\"xxxxxxxx.g.g.g.g.g.g.g.g.g.g.g.gxxxxxxxx\", List$cons$(\"xxxxxxxxxx.g.g.g.g.g.g.g.g.g.gxxxxxxxxxx\", List$cons$(\"xxxxxxxxxxxxxx.g.g.g.g.g.gxxxxxxxxxxxxxx\", List$cons$(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", List$cons$(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\", List$nil)))))))))))))))))))), List$nil)));\n\n    function Mons$Screen$welcome$(_idx$1) {\n        var $510 = ({\n            _: 'Mons.Screen.welcome',\n            'idx': _idx$1\n        });\n        return $510;\n    };\n    const Mons$Screen$welcome = x0 => Mons$Screen$welcome$(x0);\n\n    function App$Render$pix$(_pixs$1) {\n        var $511 = ({\n            _: 'App.Render.pix',\n            'pixs': _pixs$1\n        });\n        return $511;\n    };\n    const App$Render$pix = x0 => App$Render$pix$(x0);\n\n    function Image3D$set_length$(_length$1, _img$2) {\n        var self = _img$2;\n        switch (self._) {\n            case 'Image3D.new':\n                var $513 = self.length;\n                var $514 = self.capacity;\n                var $515 = self.buffer;\n                var $516 = Image3D$new$(_length$1, $514, $515);\n                var $512 = $516;\n                break;\n        };\n        return $512;\n    };\n    const Image3D$set_length = x0 => x1 => Image3D$set_length$(x0, x1);\n\n    function Image3D$clear$(_img$1) {\n        var $517 = Image3D$set_length$(0, _img$1);\n        return $517;\n    };\n    const Image3D$clear = x0 => Image3D$clear$(x0);\n\n    function List$at$(_index$2, _list$3) {\n        var List$at$ = (_index$2, _list$3) => ({\n            ctr: 'TCO',\n            arg: [_index$2, _list$3]\n        });\n        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);\n        var arg = [_index$2, _list$3];\n        while (true) {\n            let [_index$2, _list$3] = arg;\n            var R = (() => {\n                var self = _list$3;\n                switch (self._) {\n                    case 'List.nil':\n                        var $518 = Maybe$none;\n                        return $518;\n                    case 'List.cons':\n                        var $519 = self.head;\n                        var $520 = self.tail;\n                        var self = _index$2;\n                        if (self === 0n) {\n                            var $522 = Maybe$some$($519);\n                            var $521 = $522;\n                        } else {\n                            var $523 = (self - 1n);\n                            var $524 = List$at$($523, $520);\n                            var $521 = $524;\n                        };\n                        return $521;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$at = x0 => x1 => List$at$(x0, x1);\n\n    function Mons$Map$get$(_pos$1, _idx$2, _map$3) {\n        var _list$4 = Mons$Map$get_list$(_pos$1, _map$3);\n        var self = List$at$(U32$to_nat$(_idx$2), _list$4);\n        switch (self._) {\n            case 'Maybe.none':\n                var $526 = Mons$Object$void;\n                var $525 = $526;\n                break;\n            case 'Maybe.some':\n                var $527 = self.value;\n                var $528 = $527;\n                var $525 = $528;\n                break;\n        };\n        return $525;\n    };\n    const Mons$Map$get = x0 => x1 => x2 => Mons$Map$get$(x0, x1, x2);\n\n    function Mons$Game$dim$(_game$1) {\n        var self = Mons$Game$get_hero_pos$(_game$1);\n        switch (self._) {\n            case 'Maybe.none':\n                var $530 = 0;\n                var $529 = $530;\n                break;\n            case 'Maybe.some':\n                var $531 = self.value;\n                var $532 = (($531 >>> 24));\n                var $529 = $532;\n                break;\n        };\n        return $529;\n    };\n    const Mons$Game$dim = x0 => Mons$Game$dim$(x0);\n\n    function Mons$Object$get_current_mon$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $534 = self.kin;\n                var $535 = self.dir;\n                var $536 = self.pad;\n                var $537 = self.ani;\n                var $538 = self.dmg;\n                var $539 = self.bag;\n                var $540 = self.mon;\n                var $541 = self.bos;\n                var $542 = self.cap;\n                var $543 = self.idl;\n                var $544 = self.eff;\n                var _idx$13 = U32$to_nat$($540);\n                var self = List$at$(_idx$13, $539);\n                switch (self._) {\n                    case 'Maybe.none':\n                        var $546 = _obj$1;\n                        var $545 = $546;\n                        break;\n                    case 'Maybe.some':\n                        var $547 = self.value;\n                        var $548 = $547;\n                        var $545 = $548;\n                        break;\n                };\n                var $533 = $545;\n                break;\n        };\n        return $533;\n    };\n    const Mons$Object$get_current_mon = x0 => Mons$Object$get_current_mon$(x0);\n\n    function Mons$Attr$new$(_blocks$1, _mhp$2, _atk$3, _name$4, _wlk$5, _idl$6, _pic$7, _battle_spr$8, _skills$9, _pos$10) {\n        var $549 = ({\n            _: 'Mons.Attr.new',\n            'blocks': _blocks$1,\n            'mhp': _mhp$2,\n            'atk': _atk$3,\n            'name': _name$4,\n            'wlk': _wlk$5,\n            'idl': _idl$6,\n            'pic': _pic$7,\n            'battle_spr': _battle_spr$8,\n            'skills': _skills$9,\n            'pos': _pos$10\n        });\n        return $549;\n    };\n    const Mons$Attr$new = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => Mons$Attr$new$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);\n\n    function Mons$Kind$set_static_sprites$(_spr$1, _x$2, _y$3, _obj_ani$4, _obj_dir$5) {\n        var $550 = _spr$1;\n        return $550;\n    };\n    const Mons$Kind$set_static_sprites = x0 => x1 => x2 => x3 => x4 => Mons$Kind$set_static_sprites$(x0, x1, x2, x3, x4);\n    const Image3D$empty = Image3D$alloc_capacity$(100);\n\n    function Mons$Kind$set_pic$(_spr$1) {\n        var self = _spr$1;\n        switch (self._) {\n            case 'List.nil':\n                var $552 = Image3D$empty;\n                var $551 = $552;\n                break;\n            case 'List.cons':\n                var $553 = self.head;\n                var $554 = self.tail;\n                var $555 = $553;\n                var $551 = $555;\n                break;\n        };\n        return $551;\n    };\n    const Mons$Kind$set_pic = x0 => Mons$Kind$set_pic$(x0);\n\n    function Mons$Kind$set_default_battle_spr$(_is_up$1) {\n        var $556 = Image3D$empty;\n        return $556;\n    };\n    const Mons$Kind$set_default_battle_spr = x0 => Mons$Kind$set_default_battle_spr$(x0);\n    const Mons$global_scr_mid = ((0 | 2048 | (2048 << 12) | (0 << 24)));\n\n    function Mons$Attr$new_neutral$(_spr$1) {\n        var $557 = Mons$Attr$new$(Bool$false, 0, 0, \"\", Mons$Kind$set_static_sprites(_spr$1), _spr$1, Mons$Kind$set_pic$(_spr$1), Mons$Kind$set_default_battle_spr, List$nil, Mons$global_scr_mid);\n        return $557;\n    };\n    const Mons$Attr$new_neutral = x0 => Mons$Attr$new_neutral$(x0);\n\n    function Mons$Kind$attr$(_kin$1) {\n        var $558 = Mons$Attr$new_neutral$(List$cons$(Image3D$empty, List$nil));\n        return $558;\n    };\n    const Mons$Kind$attr = x0 => Mons$Kind$attr$(x0);\n\n    function Mons$Object$get_ani$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $560 = self.kin;\n                var $561 = self.dir;\n                var $562 = self.pad;\n                var $563 = self.ani;\n                var $564 = self.dmg;\n                var $565 = self.bag;\n                var $566 = self.mon;\n                var $567 = self.bos;\n                var $568 = self.cap;\n                var $569 = self.idl;\n                var $570 = self.eff;\n                var $571 = $563;\n                var $559 = $571;\n                break;\n        };\n        return $559;\n    };\n    const Mons$Object$get_ani = x0 => Mons$Object$get_ani$(x0);\n\n    function Mons$Object$is_standing$(_obj$1) {\n        var $572 = (Mons$Object$get_ani$(_obj$1) === 0);\n        return $572;\n    };\n    const Mons$Object$is_standing = x0 => Mons$Object$is_standing$(x0);\n    const U32$length = a0 => (a0.length);\n    const U32$slice = a0 => a1 => a2 => (a2.slice(a0, a1));\n    const U32$read_base = a0 => a1 => (parseInt(a1, a0));\n\n    function Image3D$parse_byte$(_idx$1, _voxdata$2) {\n        var _chr$3 = (_voxdata$2.slice(((_idx$1 * 2) >>> 0), ((((_idx$1 * 2) >>> 0) + 2) >>> 0)));\n        var $573 = (parseInt(_chr$3, 16));\n        return $573;\n    };\n    const Image3D$parse_byte = x0 => x1 => Image3D$parse_byte$(x0, x1);\n    const Col32$new = a0 => a1 => a2 => a3 => ((0 | a0 | (a1 << 8) | (a2 << 16) | (a3 << 24)));\n\n    function Word$trim$(_new_size$2, _word$3) {\n        var self = _new_size$2;\n        if (self === 0n) {\n            var $575 = Word$e;\n            var $574 = $575;\n        } else {\n            var $576 = (self - 1n);\n            var self = _word$3;\n            switch (self._) {\n                case 'Word.e':\n                    var $578 = Word$o$(Word$trim$($576, Word$e));\n                    var $577 = $578;\n                    break;\n                case 'Word.o':\n                    var $579 = self.pred;\n                    var $580 = Word$o$(Word$trim$($576, $579));\n                    var $577 = $580;\n                    break;\n                case 'Word.i':\n                    var $581 = self.pred;\n                    var $582 = Word$i$(Word$trim$($576, $581));\n                    var $577 = $582;\n                    break;\n            };\n            var $574 = $577;\n        };\n        return $574;\n    };\n    const Word$trim = x0 => x1 => Word$trim$(x0, x1);\n    const Unit$new = 1;\n\n    function Array$extract_tip$(_arr$2) {\n        var self = _arr$2;\n        switch (self._) {\n            case 'Array.tip':\n                var $584 = self.value;\n                var $585 = $584;\n                var $583 = $585;\n                break;\n            case 'Array.tie':\n                var $586 = self.lft;\n                var $587 = self.rgt;\n                var $588 = Unit$new;\n                var $583 = $588;\n                break;\n        };\n        return $583;\n    };\n    const Array$extract_tip = x0 => Array$extract_tip$(x0);\n\n    function Array$extract_tie$(_arr$3) {\n        var self = _arr$3;\n        switch (self._) {\n            case 'Array.tip':\n                var $590 = self.value;\n                var $591 = Unit$new;\n                var $589 = $591;\n                break;\n            case 'Array.tie':\n                var $592 = self.lft;\n                var $593 = self.rgt;\n                var $594 = Pair$new$($592, $593);\n                var $589 = $594;\n                break;\n        };\n        return $589;\n    };\n    const Array$extract_tie = x0 => Array$extract_tie$(x0);\n\n    function Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var Word$foldl$ = (_nil$3, _w0$4, _w1$5, _word$6) => ({\n            ctr: 'TCO',\n            arg: [_nil$3, _w0$4, _w1$5, _word$6]\n        });\n        var Word$foldl = _nil$3 => _w0$4 => _w1$5 => _word$6 => Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6);\n        var arg = [_nil$3, _w0$4, _w1$5, _word$6];\n        while (true) {\n            let [_nil$3, _w0$4, _w1$5, _word$6] = arg;\n            var R = (() => {\n                var self = _word$6;\n                switch (self._) {\n                    case 'Word.e':\n                        var $595 = _nil$3;\n                        return $595;\n                    case 'Word.o':\n                        var $596 = self.pred;\n                        var $597 = Word$foldl$(_w0$4(_nil$3), _w0$4, _w1$5, $596);\n                        return $597;\n                    case 'Word.i':\n                        var $598 = self.pred;\n                        var $599 = Word$foldl$(_w1$5(_nil$3), _w0$4, _w1$5, $598);\n                        return $599;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$foldl = x0 => x1 => x2 => x3 => Word$foldl$(x0, x1, x2, x3);\n\n    function Array$mut$(_idx$3, _f$4, _arr$5) {\n        var $600 = Word$foldl$((_arr$6 => {\n            var $601 = Array$tip$(_f$4(Array$extract_tip$(_arr$6)));\n            return $601;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $603 = self.fst;\n                    var $604 = self.snd;\n                    var $605 = Array$tie$(_rec$7($603), $604);\n                    var $602 = $605;\n                    break;\n            };\n            return $602;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $607 = self.fst;\n                    var $608 = self.snd;\n                    var $609 = Array$tie$($607, _rec$7($608));\n                    var $606 = $609;\n                    break;\n            };\n            return $606;\n        }), _idx$3)(_arr$5);\n        return $600;\n    };\n    const Array$mut = x0 => x1 => x2 => Array$mut$(x0, x1, x2);\n\n    function Array$set$(_idx$3, _val$4, _arr$5) {\n        var $610 = Array$mut$(_idx$3, (_x$6 => {\n            var $611 = _val$4;\n            return $611;\n        }), _arr$5);\n        return $610;\n    };\n    const Array$set = x0 => x1 => x2 => Array$set$(x0, x1, x2);\n    const Buffer32$set = a0 => a1 => a2 => ((a2[a0] = a1, a2));\n    const Image3D$set_pos = a0 => a1 => a2 => ((a2.buffer[a0 * 2] = a1, a2));\n    const Image3D$set_col = a0 => a1 => a2 => ((a2.buffer[a0 * 2 + 1] = a1, a2));\n    const Image3D$push = a0 => a1 => a2 => ((a2.buffer[a2.length * 2] = a0, a2.buffer[a2.length * 2 + 1] = a1, a2.length++, a2));\n\n    function Image3D$parse$(_voxdata$1) {\n        var _siz$2 = (((_voxdata$1.length) / 12) >>> 0);\n        var _img$3 = Image3D$alloc_capacity$(_siz$2);\n        var $612 = (() => {\n            var $613 = _img$3;\n            var $614 = 0;\n            var $615 = _siz$2;\n            let _img$5 = $613;\n            for (let _i$4 = $614; _i$4 < $615; ++_i$4) {\n                var _x$6 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 0) >>> 0), _voxdata$1);\n                var _y$7 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 1) >>> 0), _voxdata$1);\n                var _z$8 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 2) >>> 0), _voxdata$1);\n                var _r$9 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 3) >>> 0), _voxdata$1);\n                var _g$10 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 4) >>> 0), _voxdata$1);\n                var _b$11 = Image3D$parse_byte$(((((_i$4 * 6) >>> 0) + 5) >>> 0), _voxdata$1);\n                var _pos$12 = ((0 | _x$6 | (_y$7 << 12) | (_z$8 << 24)));\n                var _col$13 = ((0 | _r$9 | (_g$10 << 8) | (_b$11 << 16) | (255 << 24)));\n                var _img$14 = ((_img$5.buffer[_img$5.length * 2] = _pos$12, _img$5.buffer[_img$5.length * 2 + 1] = _col$13, _img$5.length++, _img$5));\n                var $613 = _img$14;\n                _img$5 = $613;\n            };\n            return _img$5;\n        })();\n        return $612;\n    };\n    const Image3D$parse = x0 => Image3D$parse$(x0);\n    const Mons$Char_black$103 = Image3D$parse$(\"7e7e28ffffff7f7e28ffffff807e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff818428ffffff7e8528ffffff7f8528ffffff808528ffffff\");\n\n    function Image3D$get_length$(_img$1) {\n        var self = _img$1;\n        switch (self._) {\n            case 'Image3D.new':\n                var $617 = self.length;\n                var $618 = self.capacity;\n                var $619 = self.buffer;\n                var $620 = $617;\n                var $616 = $620;\n                break;\n        };\n        return $616;\n    };\n    const Image3D$get_length = x0 => Image3D$get_length$(x0);\n\n    function Array$get$(_idx$3, _arr$4) {\n        var $621 = Word$foldl$(Array$extract_tip, (_rec$6 => _arr$7 => {\n            var _arr_l$8 = Array$extract_tie$(_arr$7);\n            var self = _arr_l$8;\n            switch (self._) {\n                case 'Pair.new':\n                    var $623 = self.fst;\n                    var $624 = self.snd;\n                    var $625 = _rec$6($623);\n                    var $622 = $625;\n                    break;\n            };\n            return $622;\n        }), (_rec$6 => _arr$7 => {\n            var _arr_r$8 = Array$extract_tie$(_arr$7);\n            var self = _arr_r$8;\n            switch (self._) {\n                case 'Pair.new':\n                    var $627 = self.fst;\n                    var $628 = self.snd;\n                    var $629 = _rec$6($628);\n                    var $626 = $629;\n                    break;\n            };\n            return $626;\n        }), _idx$3)(_arr$4);\n        return $621;\n    };\n    const Array$get = x0 => x1 => Array$get$(x0, x1);\n    const Buffer32$get = a0 => a1 => ((a1[a0]));\n    const Image3D$get_pos = a0 => a1 => ((a1.buffer[a0 * 2]));\n    const Image3D$get_col = a0 => a1 => ((a1.buffer[a0 * 2 + 1]));\n\n    function Pos32$sub$(_a$1, _b$2) {\n        var _a_x$3 = ((_a$1 & 0xFFF));\n        var _a_y$4 = (((_a$1 >>> 12) & 0xFFF));\n        var _a_z$5 = ((_a$1 >>> 24));\n        var _b_x$6 = ((_b$2 & 0xFFF));\n        var _b_y$7 = (((_b$2 >>> 12) & 0xFFF));\n        var _b_z$8 = ((_b$2 >>> 24));\n        var _c_x$9 = (Math.max(_a_x$3 - _b_x$6, 0));\n        var _c_y$10 = (Math.max(_a_y$4 - _b_y$7, 0));\n        var _c_z$11 = (Math.max(_a_z$5 - _b_z$8, 0));\n        var $630 = ((0 | _c_x$9 | (_c_y$10 << 12) | (_c_z$11 << 24)));\n        return $630;\n    };\n    const Pos32$sub = x0 => x1 => Pos32$sub$(x0, x1);\n\n    function Pos32$add$(_a$1, _b$2) {\n        var _a_x$3 = ((_a$1 & 0xFFF));\n        var _a_y$4 = (((_a$1 >>> 12) & 0xFFF));\n        var _a_z$5 = ((_a$1 >>> 24));\n        var _b_x$6 = ((_b$2 & 0xFFF));\n        var _b_y$7 = (((_b$2 >>> 12) & 0xFFF));\n        var _b_z$8 = ((_b$2 >>> 24));\n        var _c_x$9 = ((_a_x$3 + _b_x$6) >>> 0);\n        var _c_y$10 = ((_a_y$4 + _b_y$7) >>> 0);\n        var _c_z$11 = ((_a_z$5 + _b_z$8) >>> 0);\n        var $631 = ((0 | _c_x$9 | (_c_y$10 << 12) | (_c_z$11 << 24)));\n        return $631;\n    };\n    const Pos32$add = x0 => x1 => Pos32$add$(x0, x1);\n    const Mons$vox_mid = ((0 | 128 | (128 << 12) | (0 << 24)));\n\n    function Mons$draw$image$(_img$1, _pos$2, _scr$3) {\n        var _len$4 = Image3D$get_length$(_img$1);\n        var _scr$5 = (() => {\n            var $633 = _scr$3;\n            var $634 = 0;\n            var $635 = _len$4;\n            let _scr$6 = $633;\n            for (let _i$5 = $634; _i$5 < $635; ++_i$5) {\n                var _pix_pos$7 = ((_img$1.buffer[_i$5 * 2]));\n                var _pix_col$8 = ((_img$1.buffer[_i$5 * 2 + 1]));\n                var _pix_pos$9 = Pos32$sub$(Pos32$add$(_pos$2, _pix_pos$7), Mons$vox_mid);\n                var $633 = ((_scr$6.buffer[_scr$6.length * 2] = _pix_pos$9, _scr$6.buffer[_scr$6.length * 2 + 1] = _pix_col$8, _scr$6.length++, _scr$6));\n                _scr$6 = $633;\n            };\n            return _scr$6;\n        })();\n        var $632 = _scr$5;\n        return $632;\n    };\n    const Mons$draw$image = x0 => x1 => x2 => Mons$draw$image$(x0, x1, x2);\n    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));\n\n    function List$imap$(_f$3, _xs$4) {\n        var self = _xs$4;\n        switch (self._) {\n            case 'List.nil':\n                var $637 = List$nil;\n                var $636 = $637;\n                break;\n            case 'List.cons':\n                var $638 = self.head;\n                var $639 = self.tail;\n                var $640 = List$cons$(_f$3(0n)($638), List$imap$((_n$7 => {\n                    var $641 = _f$3(Nat$succ$(_n$7));\n                    return $641;\n                }), $639));\n                var $636 = $640;\n                break;\n        };\n        return $636;\n    };\n    const List$imap = x0 => x1 => List$imap$(x0, x1);\n\n    function List$indices$u32$(_xs$2) {\n        var $642 = List$imap$((_i$3 => _x$4 => {\n            var $643 = Pair$new$((Number(_i$3)), _x$4);\n            return $643;\n        }), _xs$2);\n        return $642;\n    };\n    const List$indices$u32 = x0 => List$indices$u32$(x0);\n\n    function String$to_list$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $645 = List$nil;\n            var $644 = $645;\n        } else {\n            var $646 = self.charCodeAt(0);\n            var $647 = self.slice(1);\n            var $648 = List$cons$($646, String$to_list$($647));\n            var $644 = $648;\n        };\n        return $644;\n    };\n    const String$to_list = x0 => String$to_list$(x0);\n    const U16$to_bits = a0 => (u16_to_bits(a0));\n\n    function Mons$font$get_img$(_char$1, _map$2) {\n        var self = Map$get$((u16_to_bits(_char$1)), _map$2);\n        switch (self._) {\n            case 'Maybe.none':\n                var $650 = Maybe$none;\n                var $649 = $650;\n                break;\n            case 'Maybe.some':\n                var $651 = self.value;\n                var $652 = Maybe$some$($651);\n                var $649 = $652;\n                break;\n        };\n        return $649;\n    };\n    const Mons$font$get_img = x0 => x1 => Mons$font$get_img$(x0, x1);\n\n    function Mons$draw$char$(_chr$1, _font_map$2, _chr_pos$3, _scr$4) {\n        var self = Mons$font$get_img$(_chr$1, _font_map$2);\n        switch (self._) {\n            case 'Maybe.none':\n                var $654 = _scr$4;\n                var $653 = $654;\n                break;\n            case 'Maybe.some':\n                var $655 = self.value;\n                var _img$6 = $655;\n                var _img_len$7 = Image3D$get_length$(_img$6);\n                var _scr$8 = (() => {\n                    var $657 = _scr$4;\n                    var $658 = 0;\n                    var $659 = _img_len$7;\n                    let _scr$9 = $657;\n                    for (let _i$8 = $658; _i$8 < $659; ++_i$8) {\n                        var _vox_pos$10 = ((_img$6.buffer[_i$8 * 2]));\n                        var _pos$11 = Pos32$sub$(Pos32$add$(_chr_pos$3, _vox_pos$10), Mons$vox_mid);\n                        var _col$12 = ((_img$6.buffer[_i$8 * 2 + 1]));\n                        var $657 = ((_scr$9.buffer[_scr$9.length * 2] = _pos$11, _scr$9.buffer[_scr$9.length * 2 + 1] = _col$12, _scr$9.length++, _scr$9));\n                        _scr$9 = $657;\n                    };\n                    return _scr$9;\n                })();\n                var $656 = _scr$8;\n                var $653 = $656;\n                break;\n        };\n        return $653;\n    };\n    const Mons$draw$char = x0 => x1 => x2 => x3 => Mons$draw$char$(x0, x1, x2, x3);\n\n    function Mons$draw$text$(_txt$1, _font_map$2, _chr_pos$3, _scr$4) {\n        var _scr$5 = (() => {\n            var $662 = _scr$4;\n            var $663 = List$indices$u32$(String$to_list$(_txt$1));\n            let _scr$6 = $662;\n            let _pair$5;\n            while ($663._ === 'List.cons') {\n                _pair$5 = $663.head;\n                var self = _pair$5;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $664 = self.fst;\n                        var $665 = self.snd;\n                        var _add_pos$9 = ((0 | (($664 * 6) >>> 0) | (0 << 12) | (0 << 24)));\n                        var $666 = Mons$draw$char$($665, _font_map$2, Pos32$add$(_chr_pos$3, _add_pos$9), _scr$6);\n                        var $662 = $666;\n                        break;\n                };\n                _scr$6 = $662;\n                $663 = $663.tail;\n            }\n            return _scr$6;\n        })();\n        var $660 = _scr$5;\n        return $660;\n    };\n    const Mons$draw$text = x0 => x1 => x2 => x3 => Mons$draw$text$(x0, x1, x2, x3);\n\n    function Mons$draw$list$go$(_texts$1, _horizontal$2, _spacing$3, _font_map$4, _pos$5, _scr$6, _idx$7) {\n        var Mons$draw$list$go$ = (_texts$1, _horizontal$2, _spacing$3, _font_map$4, _pos$5, _scr$6, _idx$7) => ({\n            ctr: 'TCO',\n            arg: [_texts$1, _horizontal$2, _spacing$3, _font_map$4, _pos$5, _scr$6, _idx$7]\n        });\n        var Mons$draw$list$go = _texts$1 => _horizontal$2 => _spacing$3 => _font_map$4 => _pos$5 => _scr$6 => _idx$7 => Mons$draw$list$go$(_texts$1, _horizontal$2, _spacing$3, _font_map$4, _pos$5, _scr$6, _idx$7);\n        var arg = [_texts$1, _horizontal$2, _spacing$3, _font_map$4, _pos$5, _scr$6, _idx$7];\n        while (true) {\n            let [_texts$1, _horizontal$2, _spacing$3, _font_map$4, _pos$5, _scr$6, _idx$7] = arg;\n            var R = (() => {\n                var _x$8 = ((_pos$5 & 0xFFF));\n                var _y$9 = (((_pos$5 >>> 12) & 0xFFF));\n                var self = _horizontal$2;\n                if (self) {\n                    var $668 = ((0 | ((((_spacing$3 + _idx$7) >>> 0) + _x$8) >>> 0) | (_y$9 << 12) | (0 << 24)));\n                    var _pos$10 = $668;\n                } else {\n                    var $669 = ((0 | _x$8 | (((((_spacing$3 + _idx$7) >>> 0) + _y$9) >>> 0) << 12) | (0 << 24)));\n                    var _pos$10 = $669;\n                };\n                var self = _texts$1;\n                switch (self._) {\n                    case 'List.nil':\n                        var $670 = _scr$6;\n                        var $667 = $670;\n                        break;\n                    case 'List.cons':\n                        var $671 = self.head;\n                        var $672 = self.tail;\n                        var _scr$13 = Mons$draw$text$($671, _font_map$4, _pos$10, _scr$6);\n                        var $673 = Mons$draw$list$go$($672, _horizontal$2, _spacing$3, _font_map$4, _pos$10, _scr$13, ((_idx$7 + 1) >>> 0));\n                        var $667 = $673;\n                        break;\n                };\n                return $667;\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Mons$draw$list$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Mons$draw$list$go$(x0, x1, x2, x3, x4, x5, x6);\n\n    function Mons$draw$list$(_texts$1, _horizontal$2, _spacing$3, _font_map$4, _start_pos$5, _scr$6) {\n        var _qtd$7 = (Number((list_length(_texts$1))));\n        var $674 = Mons$draw$list$go$(_texts$1, _horizontal$2, _spacing$3, _font_map$4, _start_pos$5, _scr$6, 0);\n        return $674;\n    };\n    const Mons$draw$list = x0 => x1 => x2 => x3 => x4 => x5 => Mons$draw$list$(x0, x1, x2, x3, x4, x5);\n\n    function Mons$font$set_img$(_char$1, _img$2, _map$3) {\n        var $675 = Map$set$((u16_to_bits(_char$1)), _img$2, _map$3);\n        return $675;\n    };\n    const Mons$font$set_img = x0 => x1 => x2 => Mons$font$set_img$(x0, x1, x2);\n\n    function U16$new$(_value$1) {\n        var $676 = word_to_u16(_value$1);\n        return $676;\n    };\n    const U16$new = x0 => U16$new$(x0);\n\n    function U16$inc$(_a$1) {\n        var self = _a$1;\n        switch ('u16') {\n            case 'u16':\n                var $678 = u16_to_word(self);\n                var $679 = U16$new$(Word$inc$($678));\n                var $677 = $679;\n                break;\n        };\n        return $677;\n    };\n    const U16$inc = x0 => U16$inc$(x0);\n    const U16$zero = U16$new$(Word$zero$(16n));\n    const Nat$to_u16 = a0 => (Number(a0));\n    const Mons$Char_black$100 = Image3D$parse$(\"817c28ffffff817d28ffffff7e7e28ffffff7f7e28ffffff807e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$101 = Image3D$parse$(\"7e7e28ffffff7f7e28ffffff807e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff7e8028ffffff7f8028ffffff808028ffffff818028ffffff7d8128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$102 = Image3D$parse$(\"7f7c28ffffff807c28ffffff817c28ffffff7e7d28ffffff7e7e28ffffff7d7f28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff817f28ffffff7e8028ffffff7e8128ffffff7e8228ffffff7e8328ffffff\");\n    const Mons$Char_black$104 = Image3D$parse$(\"7d7c28ffffff7d7d28ffffff7d7e28ffffff7e7e28ffffff7f7e28ffffff807e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$105 = Image3D$parse$(\"7f7d28ffffff7e7f28ffffff7f7f28ffffff7f8028ffffff7f8128ffffff7f8228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$106 = Image3D$parse$(\"817d28ffffff7f7f28ffffff807f28ffffff817f28ffffff818028ffffff818128ffffff818228ffffff818328ffffff818428ffffff7e8528ffffff7f8528ffffff808528ffffff\");\n    const Mons$Char_black$107 = Image3D$parse$(\"7d7c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff807f28ffffff7d8028ffffff7e8028ffffff7f8028ffffff7d8128ffffff808128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$108 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff7f7d28ffffff7f7e28ffffff7f7f28ffffff7f8028ffffff7f8128ffffff7f8228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$109 = Image3D$parse$(\"7d7e28ffffff7e7e28ffffff7f7e28ffffff807e28ffffff7d7f28ffffff7f7f28ffffff817f28ffffff7d8028ffffff7f8028ffffff818028ffffff7d8128ffffff7f8128ffffff818128ffffff7d8228ffffff7f8228ffffff818228ffffff7d8328ffffff7f8328ffffff818328ffffff\");\n    const Mons$Char_black$110 = Image3D$parse$(\"7d7e28ffffff7e7e28ffffff7f7e28ffffff807e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$111 = Image3D$parse$(\"7e7e28ffffff7f7e28ffffff807e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$112 = Image3D$parse$(\"7d7e28ffffff7e7e28ffffff7f7e28ffffff807e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff7d8428ffffff7d8528ffffff\");\n    const Mons$Char_black$113 = Image3D$parse$(\"7e7e28ffffff7f7e28ffffff807e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff818428ffffff818528ffffff\");\n    const Mons$Char_black$114 = Image3D$parse$(\"7d7e28ffffff807e28ffffff817e28ffffff7d7f28ffffff7f7f28ffffff7d8028ffffff7e8028ffffff7d8128ffffff7d8228ffffff7d8328ffffff\");\n    const Mons$Char_black$115 = Image3D$parse$(\"7e7e28ffffff7f7e28ffffff807e28ffffff817e28ffffff7d7f28ffffff7e8028ffffff7f8028ffffff808028ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$116 = Image3D$parse$(\"7e7c28ffffff7e7d28ffffff7d7e28ffffff7e7e28ffffff7f7e28ffffff807e28ffffff7e7f28ffffff7e8028ffffff7e8128ffffff7e8228ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$117 = Image3D$parse$(\"7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$118 = Image3D$parse$(\"7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7e8228ffffff808228ffffff7f8328ffffff\");\n    const Mons$Char_black$119 = Image3D$parse$(\"7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff7f8128ffffff818128ffffff7d8228ffffff7f8228ffffff818228ffffff7e8328ffffff808328ffffff\");\n    const Mons$Char_black$120 = Image3D$parse$(\"7d7e28ffffff817e28ffffff7e7f28ffffff807f28ffffff7f8028ffffff7f8128ffffff7e8228ffffff808228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$121 = Image3D$parse$(\"7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff808428ffffff7d8528ffffff7e8528ffffff7f8528ffffff\");\n    const Mons$Char_black$122 = Image3D$parse$(\"7d7e28ffffff7e7e28ffffff7f7e28ffffff807e28ffffff817e28ffffff817f28ffffff7f8028ffffff808028ffffff7e8128ffffff7d8228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$123 = Image3D$parse$(\"807c28ffffff7f7d28ffffff7f7e28ffffff7f7f28ffffff7e8028ffffff7f8128ffffff7f8228ffffff808328ffffff\");\n    const Mons$Char_black$124 = Image3D$parse$(\"7f7c28ffffff7f7d28ffffff7f7e28ffffff7f7f28ffffff7f8028ffffff7f8128ffffff7f8228ffffff7f8328ffffff\");\n    const Mons$Char_black$125 = Image3D$parse$(\"7e7c28ffffff7f7d28ffffff7f7e28ffffff7f7f28ffffff808028ffffff7f8128ffffff7f8228ffffff7e8328ffffff\");\n    const Mons$Char_black$126 = Image3D$parse$(\"7e7b28ffffff817b28ffffff7d7c28ffffff7f7c28ffffff817c28ffffff7d7d28ffffff807d28ffffff\");\n    const Mons$Char_black$32 = Image3D$parse$(\"\");\n    const Mons$Char_black$33 = Image3D$parse$(\"7f7c28ffffff7f7d28ffffff7f7e28ffffff7f7f28ffffff7f8028ffffff7f8128ffffff7f8328ffffff\");\n    const Mons$Char_black$34 = Image3D$parse$(\"7e7c28ffffff807c28ffffff7e7d28ffffff807d28ffffff\");\n    const Mons$Char_black$35 = Image3D$parse$(\"7e7c28ffffff807c28ffffff7e7d28ffffff807d28ffffff7d7e28ffffff7e7e28ffffff7f7e28ffffff807e28ffffff817e28ffffff7e7f28ffffff807f28ffffff7e8028ffffff808028ffffff7d8128ffffff7e8128ffffff7f8128ffffff808128ffffff818128ffffff7e8228ffffff808228ffffff7e8328ffffff808328ffffff\");\n    const Mons$Char_black$36 = Image3D$parse$(\"7f7b28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff7e7f28ffffff7f8028ffffff808028ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff7f8428ffffff\");\n    const Mons$Char_black$37 = Image3D$parse$(\"7e7b28ffffff7d7c28ffffff7f7c28ffffff7e7d28ffffff817d28ffffff807e28ffffff7f7f28ffffff7e8028ffffff7d8128ffffff808128ffffff7f8228ffffff818228ffffff808328ffffff\");\n    const Mons$Char_black$38 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff7d7d28ffffff807d28ffffff7d7e28ffffff807e28ffffff7e7f28ffffff7f7f28ffffff7d8028ffffff7d8128ffffff7f8128ffffff808128ffffff818128ffffff7d8228ffffff808228ffffff7e8328ffffff7f8328ffffff818328ffffff\");\n    const Mons$Char_black$39 = Image3D$parse$(\"7f7c28ffffff7f7d28ffffff\");\n    const Mons$Char_black$40 = Image3D$parse$(\"807c28ffffff7f7d28ffffff7e7e28ffffff7e7f28ffffff7e8028ffffff7e8128ffffff7f8228ffffff808328ffffff\");\n    const Mons$Char_black$41 = Image3D$parse$(\"7e7c28ffffff7f7d28ffffff807e28ffffff807f28ffffff808028ffffff808128ffffff7f8228ffffff7e8328ffffff\");\n    const Mons$Char_black$42 = Image3D$parse$(\"7e7d28ffffff807d28ffffff7f7e28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff7f8028ffffff7e8128ffffff808128ffffff\");\n    const Mons$Char_black$43 = Image3D$parse$(\"7f7d28ffffff7f7e28ffffff7d7f28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff817f28ffffff7f8028ffffff7f8128ffffff\");\n    const Mons$Char_black$44 = Image3D$parse$(\"7f8228ffffff808228ffffff7f8328ffffff808328ffffff808428ffffff7f8528ffffff\");\n    const Mons$Char_black$45 = Image3D$parse$(\"7d7f28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff817f28ffffff\");\n    const Mons$Char_black$46 = Image3D$parse$(\"808328ffffff818328ffffff\");\n    const Mons$Char_black$47 = Image3D$parse$(\"817c28ffffff807d28ffffff807e28ffffff7f7f28ffffff7f8028ffffff7e8128ffffff7e8228ffffff7d8328ffffff\");\n    const Mons$Char_black$48 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff807e28ffffff817e28ffffff7d7f28ffffff7f7f28ffffff817f28ffffff7d8028ffffff7f8028ffffff818028ffffff7d8128ffffff7e8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$49 = Image3D$parse$(\"807c28ffffff7f7d28ffffff807d28ffffff7e7e28ffffff807e28ffffff7d7f28ffffff807f28ffffff808028ffffff808128ffffff808228ffffff808328ffffff\");\n    const Mons$Char_black$50 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff807f28ffffff7f8028ffffff7e8128ffffff7d8228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$51 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff817e28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff818028ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$52 = Image3D$parse$(\"7e7c28ffffff7e7d28ffffff7e7e28ffffff807e28ffffff7e7f28ffffff807f28ffffff7d8028ffffff808028ffffff7d8128ffffff7e8128ffffff7f8128ffffff808128ffffff818128ffffff808228ffffff808328ffffff\");\n    const Mons$Char_black$53 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff817c28ffffff7d7d28ffffff7d7e28ffffff7d7f28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff818028ffffff818128ffffff818228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$54 = Image3D$parse$(\"807c28ffffff7f7d28ffffff7e7e28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$55 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff817c28ffffff817d28ffffff807e28ffffff7f7f28ffffff7e8028ffffff7e8128ffffff7e8228ffffff7e8328ffffff\");\n    const Mons$Char_black$56 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$57 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7e8028ffffff7f8028ffffff808028ffffff808128ffffff7f8228ffffff7e8328ffffff\");\n    const Mons$Char_black$58 = Image3D$parse$(\"7f7f28ffffff807f28ffffff7f8228ffffff808228ffffff\");\n    const Mons$Char_black$59 = Image3D$parse$(\"7f7f28ffffff807f28ffffff7f8228ffffff808228ffffff7f8328ffffff808328ffffff808428ffffff7f8528ffffff\");\n    const Mons$Char_black$60 = Image3D$parse$(\"807c28ffffff7f7d28ffffff7e7e28ffffff7d7f28ffffff7d8028ffffff7e8128ffffff7f8228ffffff808328ffffff\");\n    const Mons$Char_black$61 = Image3D$parse$(\"7d7f28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff817f28ffffff7d8128ffffff7e8128ffffff7f8128ffffff808128ffffff818128ffffff\");\n    const Mons$Char_black$62 = Image3D$parse$(\"7e7c28ffffff7f7d28ffffff807e28ffffff817f28ffffff818028ffffff808128ffffff7f8228ffffff7e8328ffffff\");\n    const Mons$Char_black$63 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff807f28ffffff7f8028ffffff7f8128ffffff7f8328ffffff\");\n    const Mons$Char_black$64 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff807e28ffffff817e28ffffff7d7f28ffffff7f7f28ffffff817f28ffffff7d8028ffffff7f8028ffffff818028ffffff7d8128ffffff808128ffffff818128ffffff7d8228ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$65 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff7e8128ffffff7f8128ffffff808128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$66 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$67 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff7d7f28ffffff7d8028ffffff7d8128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$68 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$69 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff817c28ffffff7d7d28ffffff7d7e28ffffff7d7f28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff817f28ffffff7d8028ffffff7d8128ffffff7d8228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$70 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff817c28ffffff7d7d28ffffff7d7e28ffffff7d7f28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff7d8028ffffff7d8128ffffff7d8228ffffff7d8328ffffff\");\n    const Mons$Char_black$71 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff7d7f28ffffff7d8028ffffff7d8128ffffff808128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$72 = Image3D$parse$(\"7d7c28ffffff817c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff7e7f28ffffff7f7f28ffffff807f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$73 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7f7d28ffffff7f7e28ffffff7f7f28ffffff7f8028ffffff7f8128ffffff7f8228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$74 = Image3D$parse$(\"817c28ffffff817d28ffffff817e28ffffff817f28ffffff818028ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$75 = Image3D$parse$(\"7d7c28ffffff817c28ffffff7d7d28ffffff807d28ffffff7d7e28ffffff7f7e28ffffff7d7f28ffffff7e7f28ffffff7d8028ffffff7f8028ffffff7d8128ffffff808128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$76 = Image3D$parse$(\"7d7c28ffffff7d7d28ffffff7d7e28ffffff7d7f28ffffff7d8028ffffff7d8128ffffff7d8228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$77 = Image3D$parse$(\"7d7c28ffffff817c28ffffff7d7d28ffffff7e7d28ffffff807d28ffffff817d28ffffff7d7e28ffffff7f7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$78 = Image3D$parse$(\"7d7c28ffffff817c28ffffff7d7d28ffffff7e7d28ffffff817d28ffffff7d7e28ffffff7f7e28ffffff817e28ffffff7d7f28ffffff807f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$79 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$80 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff7e8028ffffff7f8028ffffff808028ffffff7d8128ffffff7d8228ffffff7d8328ffffff\");\n    const Mons$Char_black$81 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff808428ffffff818428ffffff\");\n    const Mons$Char_black$82 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff7e8028ffffff7f8028ffffff808028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$83 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff7e7f28ffffff7f7f28ffffff808028ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$84 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff817c28ffffff7f7d28ffffff7f7e28ffffff7f7f28ffffff7f8028ffffff7f8128ffffff7f8228ffffff7f8328ffffff\");\n    const Mons$Char_black$85 = Image3D$parse$(\"7d7c28ffffff817c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$86 = Image3D$parse$(\"7d7c28ffffff817c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7e8228ffffff808228ffffff7f8328ffffff\");\n    const Mons$Char_black$87 = Image3D$parse$(\"7d7c28ffffff817c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff7f8128ffffff818128ffffff7d8228ffffff7e8228ffffff808228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$88 = Image3D$parse$(\"7d7c28ffffff817c28ffffff7d7d28ffffff817d28ffffff7e7e28ffffff807e28ffffff7f7f28ffffff7f8028ffffff7e8128ffffff808128ffffff7d8228ffffff818228ffffff7d8328ffffff818328ffffff\");\n    const Mons$Char_black$89 = Image3D$parse$(\"7d7c28ffffff817c28ffffff7d7d28ffffff817d28ffffff7d7e28ffffff817e28ffffff7e7f28ffffff807f28ffffff7f8028ffffff7f8128ffffff7f8228ffffff7f8328ffffff\");\n    const Mons$Char_black$90 = Image3D$parse$(\"7d7c28ffffff7e7c28ffffff7f7c28ffffff807c28ffffff817c28ffffff817d28ffffff807e28ffffff7f7f28ffffff7e8028ffffff7e8128ffffff7d8228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$91 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff7e7d28ffffff7e7e28ffffff7e7f28ffffff7e8028ffffff7e8128ffffff7e8228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$92 = Image3D$parse$(\"7d7c28ffffff7e7d28ffffff7e7e28ffffff7f7f28ffffff7f8028ffffff808128ffffff808228ffffff818328ffffff\");\n    const Mons$Char_black$93 = Image3D$parse$(\"7e7c28ffffff7f7c28ffffff807c28ffffff807d28ffffff807e28ffffff807f28ffffff808028ffffff808128ffffff808228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$94 = Image3D$parse$(\"7f7b28ffffff7e7c28ffffff807c28ffffff7d7d28ffffff817d28ffffff\");\n    const Mons$Char_black$95 = Image3D$parse$(\"7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$96 = Image3D$parse$(\"7e7b28ffffff7f7c28ffffff807d28ffffff\");\n    const Mons$Char_black$97 = Image3D$parse$(\"7e7e28ffffff7f7e28ffffff807e28ffffff817f28ffffff7e8028ffffff7f8028ffffff808028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff818328ffffff\");\n    const Mons$Char_black$98 = Image3D$parse$(\"7d7c28ffffff7d7d28ffffff7d7e28ffffff7e7e28ffffff7f7e28ffffff807e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff818028ffffff7d8128ffffff818128ffffff7d8228ffffff818228ffffff7d8328ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$99 = Image3D$parse$(\"7e7e28ffffff7f7e28ffffff807e28ffffff7d7f28ffffff817f28ffffff7d8028ffffff7d8128ffffff7d8228ffffff818228ffffff7e8328ffffff7f8328ffffff808328ffffff\");\n    const Mons$Char_black$normal = Image3D$parse$(\"7e7e28544b487f7e28544b48807e28544b487d7f28544b487e7f28e7dcc17f7f28cab89d807f28bba38a817f28544b487d8028544b487e8028cab89d7f8028bba38a808028bba38a818028544b487d8128544b487e8128bba38a7f8128bba38a808128a5876e818128544b487e8228544b487f8228544b48808228544b48\");\n    const Mons$Char_black$earth = Image3D$parse$(\"7d7e285f35387e7e285f35387f7e285f3538807e285f3538817e285f35387d7f285f35387e7f289f5b447f7f289f5b44807f289f5b44817f285f35387d80284b2a357e8028884e3f7f8028884e3f808028884e3f8180284b2a357e81284b2a357f81286f403b8081284b2a357e82284b2a357f82284b2a358082284b2a35\");\n    const Mons$Char_black$fire = Image3D$parse$(\"7e7d28a432347f7d28a432347e7e28a432347f7e28fbe896807e28a432347d7f2898202e7e7f28e7cb557f7f28e7cb55807f28e7cb55817f2898202e7d802898202e7e8028efa93f7f8028efa93f808028efa93f81802898202e7d812877262f7e8128d3783c7f8128d3783c808128d3783c81812877262f7e822877262f7f822877262f80822877262f\");\n    const Mons$Char_black$water = Image3D$parse$(\"7e7d282f37707f7d282f37707e7e282f37707f7e28f0e8cc807e282f37707d7f282f37707e7f2863a9a47f7f2882c8ac807f28f0e8cc817f282f37707d80282729607e802863a9a47f8028799cd380802882c8ac8180282729607d81282729607e8128428a9b7f812863a9a480812863a9a48181282729607e82283421637f8228342163808228342163\");\n    const Mons$Char_black$grass = Image3D$parse$(\"807d28375839817d28477e3d7f7e28375839807e2885ca77817e283758397e7f283758397f7f2885ca77807f2864af69817f283758397d80282a56517e802885ca777f8028287f4e80802864af698180283758397d81282a56517e8128287f4e7f812864af6980812885ca778181283758397e82282a56517f82282a5651808228375839\");\n    const Mons$Char_black$electric = Image3D$parse$(\"7f7d28d3783c807d28d3783c7e7e28c766437f7e28e7cb55807e28d3783c7d7f28b64c3b7e7f28dab04d7f7f28c766437e8028c766437f8028dab04d808028b64c3b7d8128c766437e8128e7cb557f8128c766437d8228d3783c7e8228c76643\");\n    const Mons$Char_black$psychic = Image3D$parse$(\"7e7e286420737f7e28642073807e286420737d7f286420737e7f28c757a67f7f28ac4999807f28f0e8cc817f286420737d80284a2b717e8028fa83a97f8028342163808028ac49998180284a2b717d81283421637e8128fa83a97f8128fa83a9808128c757a68181283421637e82283421637f8228342163808228342163\");\n    const Mons$Char_black$ice = Image3D$parse$(\"7e7e2882c8ac7f7e284662a1807e2882c8ac7d7f2882c8ac7e7f2863a9a47f7f28394c87807f2863a9a4817f2882c8ac7d80284662a17e8028394c877f802863a9a4808028394c878180284662a17d812882c8ac7e812863a9a47f8128394c8780812863a9a481812882c8ac7e822882c8ac7f82284662a180822882c8ac\");\n    const Mons$Char_black$light = Image3D$parse$(\"7e7e28d296437f7e28dab04d807e28d296437d7f28d296437e7f28fbe8967f7f28e7cb55807f28fbe896817f28d296437d8028dab04d7e8028e7cb557f8028fbe896808028e7cb55818028dab04d7d8128d296437e8128fbe8967f8128e7cb55808128fbe896818128d296437e8228d296437f8228dab04d808228d29643\");\n    const Mons$Char_black$darkness = Image3D$parse$(\"7e7e284a2b717f7e282c333d807e284a2b717d7f284a2b717e7f286a3a867f7f28353b48807f286a3a86817f284a2b717d80282c333d7e8028353b487f80282c333d808028353b488180282c333d7d81284a2b717e81286a3a867f8128353b488081286a3a868181284a2b717e82284a2b717f82282c333d8082284a2b71\");\n    const Mons$Char_black$s_72 = Image3D$parse$(\"7d7d28212128807d282121287d7e28212128807e282121287d7f282121287e7f282121287f7f28212128807f282121287d80282121288080282121287d8128212128808128212128\");\n    const Mons$Char_black$s_80 = Image3D$parse$(\"7d7d282121287e7d282121287f7d28212128807d282121287d7e28212128807e282121287d7f282121287e7f282121287f7f282121287d80282121287d8128212128\");\n    const Mons$Char_black$burn = Image3D$parse$(\"7d7d1e4b2a357e7d1e4b2a357f7d1e4b2a357d7e1e4b2a357e7e1efa642f7f7e1efa642f807e1e4b2a357e7f1e4b2a357f7f1eefa93f807f1efa642f817f1e4b2a357d801e4b2a357e801eefa93f7f801efbe89680801efbe89681801e4b2a357d811e4b2a357e811efa642f7f811eefa93f80811efbe89681811e4b2a357d821e4b2a357e821efa642f7f821efa642f80821eefa93f81821e4b2a357e831e4b2a357f831e4b2a3580831e4b2a35\");\n    const Mons$Char_black$hit = Image3D$parse$(\"7f7d1e3758397e7e1e3758397f7e1ec7c85c807e1e3758397e7f1e3758397f7f1ec7c85c807f1e3758397d801e3758397e801e6b91477f801e6b914780801ec7c85c81801e3758397d811e3758397e811e477e3d7f811e477e3d80811ec7c85c81811e3758397d821e3758397e821e477e3d7f821e477e3d80821e6b914781821e3758397e831e3758397f831e37583980831e375839\");\n    const Mons$Char_black$invulnerable = Image3D$parse$(\"7d7d1e4b2a357e7d1e4b2a35817d1e4b2a357d7e1e4b2a357e7e1edab04d7f7e1e4b2a35807e1e4b2a35817e1ef0e8cc7e7f1e4b2a357f7f1ef0e8cc807f1ee7cb55817f1e4b2a357e801e4b2a357f801ee7cb5580801edab04d81801e4b2a357d811e4b2a357e811ee7cb557f811edab04d80811ed3783c81811e4b2a357d821edab04d7e821e4b2a357f821e4b2a3580821e4b2a3581821edab04d7d831e4b2a3581831e4b2a35\");\n    const Mons$Char_black$minimize = Image3D$parse$(\"7d7d1e2c333d7e7d1e2c333d7f7d1e2c333d807d1e2c333d817d1e2c333d7d7e1e2c333d7e7e1e656c7f7f7e1eabaeb2807e1eabaeb2817e1e2c333d7d7f1e2c333d7e7f1e656c7f7f7f1e656c7f807f1e656c7f817f1e2c333d7d801e2c333d7e801e565d6e7f801e565d6e80801e656c7f81801e2c333d7d811e2c333d7e811e565d6e7f811e565d6e80811e656c7f81811e2c333d7e821e2c333d7f821e565d6e80821e2c333d7f831e2c333d\");\n    const Mons$Char_black$poison = Image3D$parse$(\"7f7d1e5f19347e7e1e5f19347f7e1edf3e46807e1e5f19347e7f1e5f19347f7f1edf3e46807f1e5f19347d801e5f19347e801ea2242c7f801ea2242c80801edf3e4681801e5f19347d811e5f19347e811e8c0b2c7f811e8c0b2c80811edf3e4681811e5f19347d821e5f19347e821e8c0b2c7f821e8c0b2c80821ea2242c81821e5f19347e831e5f19347f831e5f193480831e5f1934\");\n    const Mons$Char_black$protect = Image3D$parse$(\"7d7d1e4b2a357e7d1e4b2a357f7d1e4b2a35807d1e4b2a35817d1e4b2a357d7e1e4b2a357e7e1ecc833c7f7e1edab04d807e1edab04d817e1e4b2a357d7f1e4b2a357e7f1ecc833c7f7f1ecc833c807f1ecc833c817f1e4b2a357d801e4b2a357e801eb96b337f801eb96b3380801ecc833c81801e4b2a357d811e4b2a357e811eb96b337f811eb96b3380811ecc833c81811e4b2a357e821e4b2a357f821eb96b3380821e4b2a357f831e4b2a35\");\n    const Mons$Char_black$sleep = Image3D$parse$(\"7d7d1e2729607e7d1e2729607f7d1e272960807d1e272960817d1e2729607d7e1e2729607e7e1e799cd37f7e1e799cd3807e1e799cd3817e1e2729607e7f1e2729607f7f1e272960807f1e799cd3817f1e2729607e801e2729607f801e5176b880801e2729607d811e2729607e811e4662a17f811e27296080811e2729607d821e2729607e821e4662a17f821e4662a180821e4662a181821e2729607d831e2729607e831e2729607f831e27296080831e27296081831e272960\");\n    const Mons$Char_black$font = (() => {\n        var _map$1 = Map$new;\n        var _map$2 = Mons$font$set_img$(100, Mons$Char_black$100, _map$1);\n        var _map$3 = Mons$font$set_img$(101, Mons$Char_black$101, _map$2);\n        var _map$4 = Mons$font$set_img$(102, Mons$Char_black$102, _map$3);\n        var _map$5 = Mons$font$set_img$(103, Mons$Char_black$103, _map$4);\n        var _map$6 = Mons$font$set_img$(104, Mons$Char_black$104, _map$5);\n        var _map$7 = Mons$font$set_img$(105, Mons$Char_black$105, _map$6);\n        var _map$8 = Mons$font$set_img$(106, Mons$Char_black$106, _map$7);\n        var _map$9 = Mons$font$set_img$(107, Mons$Char_black$107, _map$8);\n        var _map$10 = Mons$font$set_img$(108, Mons$Char_black$108, _map$9);\n        var _map$11 = Mons$font$set_img$(109, Mons$Char_black$109, _map$10);\n        var _map$12 = Mons$font$set_img$(110, Mons$Char_black$110, _map$11);\n        var _map$13 = Mons$font$set_img$(111, Mons$Char_black$111, _map$12);\n        var _map$14 = Mons$font$set_img$(112, Mons$Char_black$112, _map$13);\n        var _map$15 = Mons$font$set_img$(113, Mons$Char_black$113, _map$14);\n        var _map$16 = Mons$font$set_img$(114, Mons$Char_black$114, _map$15);\n        var _map$17 = Mons$font$set_img$(115, Mons$Char_black$115, _map$16);\n        var _map$18 = Mons$font$set_img$(116, Mons$Char_black$116, _map$17);\n        var _map$19 = Mons$font$set_img$(117, Mons$Char_black$117, _map$18);\n        var _map$20 = Mons$font$set_img$(118, Mons$Char_black$118, _map$19);\n        var _map$21 = Mons$font$set_img$(119, Mons$Char_black$119, _map$20);\n        var _map$22 = Mons$font$set_img$(120, Mons$Char_black$120, _map$21);\n        var _map$23 = Mons$font$set_img$(121, Mons$Char_black$121, _map$22);\n        var _map$24 = Mons$font$set_img$(122, Mons$Char_black$122, _map$23);\n        var _map$25 = Mons$font$set_img$(123, Mons$Char_black$123, _map$24);\n        var _map$26 = Mons$font$set_img$(124, Mons$Char_black$124, _map$25);\n        var _map$27 = Mons$font$set_img$(125, Mons$Char_black$125, _map$26);\n        var _map$28 = Mons$font$set_img$(126, Mons$Char_black$126, _map$27);\n        var _map$29 = Mons$font$set_img$(32, Mons$Char_black$32, _map$28);\n        var _map$30 = Mons$font$set_img$(33, Mons$Char_black$33, _map$29);\n        var _map$31 = Mons$font$set_img$(34, Mons$Char_black$34, _map$30);\n        var _map$32 = Mons$font$set_img$(35, Mons$Char_black$35, _map$31);\n        var _map$33 = Mons$font$set_img$(36, Mons$Char_black$36, _map$32);\n        var _map$34 = Mons$font$set_img$(37, Mons$Char_black$37, _map$33);\n        var _map$35 = Mons$font$set_img$(38, Mons$Char_black$38, _map$34);\n        var _map$36 = Mons$font$set_img$(39, Mons$Char_black$39, _map$35);\n        var _map$37 = Mons$font$set_img$(40, Mons$Char_black$40, _map$36);\n        var _map$38 = Mons$font$set_img$(41, Mons$Char_black$41, _map$37);\n        var _map$39 = Mons$font$set_img$(42, Mons$Char_black$42, _map$38);\n        var _map$40 = Mons$font$set_img$(43, Mons$Char_black$43, _map$39);\n        var _map$41 = Mons$font$set_img$(44, Mons$Char_black$44, _map$40);\n        var _map$42 = Mons$font$set_img$(45, Mons$Char_black$45, _map$41);\n        var _map$43 = Mons$font$set_img$(46, Mons$Char_black$46, _map$42);\n        var _map$44 = Mons$font$set_img$(47, Mons$Char_black$47, _map$43);\n        var _map$45 = Mons$font$set_img$(48, Mons$Char_black$48, _map$44);\n        var _map$46 = Mons$font$set_img$(49, Mons$Char_black$49, _map$45);\n        var _map$47 = Mons$font$set_img$(50, Mons$Char_black$50, _map$46);\n        var _map$48 = Mons$font$set_img$(51, Mons$Char_black$51, _map$47);\n        var _map$49 = Mons$font$set_img$(52, Mons$Char_black$52, _map$48);\n        var _map$50 = Mons$font$set_img$(53, Mons$Char_black$53, _map$49);\n        var _map$51 = Mons$font$set_img$(54, Mons$Char_black$54, _map$50);\n        var _map$52 = Mons$font$set_img$(55, Mons$Char_black$55, _map$51);\n        var _map$53 = Mons$font$set_img$(56, Mons$Char_black$56, _map$52);\n        var _map$54 = Mons$font$set_img$(57, Mons$Char_black$57, _map$53);\n        var _map$55 = Mons$font$set_img$(58, Mons$Char_black$58, _map$54);\n        var _map$56 = Mons$font$set_img$(59, Mons$Char_black$59, _map$55);\n        var _map$57 = Mons$font$set_img$(60, Mons$Char_black$60, _map$56);\n        var _map$58 = Mons$font$set_img$(61, Mons$Char_black$61, _map$57);\n        var _map$59 = Mons$font$set_img$(62, Mons$Char_black$62, _map$58);\n        var _map$60 = Mons$font$set_img$(63, Mons$Char_black$63, _map$59);\n        var _map$61 = Mons$font$set_img$(64, Mons$Char_black$64, _map$60);\n        var _map$62 = Mons$font$set_img$(65, Mons$Char_black$65, _map$61);\n        var _map$63 = Mons$font$set_img$(66, Mons$Char_black$66, _map$62);\n        var _map$64 = Mons$font$set_img$(67, Mons$Char_black$67, _map$63);\n        var _map$65 = Mons$font$set_img$(68, Mons$Char_black$68, _map$64);\n        var _map$66 = Mons$font$set_img$(69, Mons$Char_black$69, _map$65);\n        var _map$67 = Mons$font$set_img$(70, Mons$Char_black$70, _map$66);\n        var _map$68 = Mons$font$set_img$(71, Mons$Char_black$71, _map$67);\n        var _map$69 = Mons$font$set_img$(72, Mons$Char_black$72, _map$68);\n        var _map$70 = Mons$font$set_img$(73, Mons$Char_black$73, _map$69);\n        var _map$71 = Mons$font$set_img$(74, Mons$Char_black$74, _map$70);\n        var _map$72 = Mons$font$set_img$(75, Mons$Char_black$75, _map$71);\n        var _map$73 = Mons$font$set_img$(76, Mons$Char_black$76, _map$72);\n        var _map$74 = Mons$font$set_img$(77, Mons$Char_black$77, _map$73);\n        var _map$75 = Mons$font$set_img$(78, Mons$Char_black$78, _map$74);\n        var _map$76 = Mons$font$set_img$(79, Mons$Char_black$79, _map$75);\n        var _map$77 = Mons$font$set_img$(80, Mons$Char_black$80, _map$76);\n        var _map$78 = Mons$font$set_img$(81, Mons$Char_black$81, _map$77);\n        var _map$79 = Mons$font$set_img$(82, Mons$Char_black$82, _map$78);\n        var _map$80 = Mons$font$set_img$(83, Mons$Char_black$83, _map$79);\n        var _map$81 = Mons$font$set_img$(84, Mons$Char_black$84, _map$80);\n        var _map$82 = Mons$font$set_img$(85, Mons$Char_black$85, _map$81);\n        var _map$83 = Mons$font$set_img$(86, Mons$Char_black$86, _map$82);\n        var _map$84 = Mons$font$set_img$(87, Mons$Char_black$87, _map$83);\n        var _map$85 = Mons$font$set_img$(88, Mons$Char_black$88, _map$84);\n        var _map$86 = Mons$font$set_img$(89, Mons$Char_black$89, _map$85);\n        var _map$87 = Mons$font$set_img$(90, Mons$Char_black$90, _map$86);\n        var _map$88 = Mons$font$set_img$(91, Mons$Char_black$91, _map$87);\n        var _map$89 = Mons$font$set_img$(92, Mons$Char_black$92, _map$88);\n        var _map$90 = Mons$font$set_img$(93, Mons$Char_black$93, _map$89);\n        var _map$91 = Mons$font$set_img$(94, Mons$Char_black$94, _map$90);\n        var _map$92 = Mons$font$set_img$(95, Mons$Char_black$95, _map$91);\n        var _map$93 = Mons$font$set_img$(96, Mons$Char_black$96, _map$92);\n        var _map$94 = Mons$font$set_img$(97, Mons$Char_black$97, _map$93);\n        var _map$95 = Mons$font$set_img$(98, Mons$Char_black$98, _map$94);\n        var _map$96 = Mons$font$set_img$(99, Mons$Char_black$99, _map$95);\n        var _map$97 = Mons$font$set_img$(9312, Mons$Char_black$normal, _map$96);\n        var _map$98 = Mons$font$set_img$(9313, Mons$Char_black$earth, _map$97);\n        var _map$99 = Mons$font$set_img$(9314, Mons$Char_black$fire, _map$98);\n        var _map$100 = Mons$font$set_img$(9315, Mons$Char_black$water, _map$99);\n        var _map$101 = Mons$font$set_img$(9316, Mons$Char_black$grass, _map$100);\n        var _map$102 = Mons$font$set_img$(9317, Mons$Char_black$electric, _map$101);\n        var _map$103 = Mons$font$set_img$(9318, Mons$Char_black$psychic, _map$102);\n        var _map$104 = Mons$font$set_img$(9319, Mons$Char_black$ice, _map$103);\n        var _map$105 = Mons$font$set_img$(9320, Mons$Char_black$light, _map$104);\n        var _map$106 = Mons$font$set_img$(9321, Mons$Char_black$darkness, _map$105);\n        var _map$107 = Mons$font$set_img$(405, Mons$Char_black$s_72, _map$106);\n        var _map$108 = Mons$font$set_img$(421, Mons$Char_black$s_80, _map$107);\n        var _map$109 = Mons$font$set_img$(9398, Mons$Char_black$burn, _map$108);\n        var _map$110 = Mons$font$set_img$(9399, Mons$Char_black$hit, _map$109);\n        var _map$111 = Mons$font$set_img$(9400, Mons$Char_black$invulnerable, _map$110);\n        var _map$112 = Mons$font$set_img$(9401, Mons$Char_black$minimize, _map$111);\n        var _map$113 = Mons$font$set_img$(9402, Mons$Char_black$poison, _map$112);\n        var _map$114 = Mons$font$set_img$(9403, Mons$Char_black$protect, _map$113);\n        var _map$115 = Mons$font$set_img$(9404, Mons$Char_black$sleep, _map$114);\n        var $680 = _map$115;\n        return $680;\n    })();\n\n    function Mons$draw$list_selector$(_idx$1, _horizontal$2, _spacing$3, _font_map$4, _start_pos$5, _scr$6) {\n        var _x$7 = ((_start_pos$5 & 0xFFF));\n        var _y$8 = (((_start_pos$5 >>> 12) & 0xFFF));\n        var _idx$9 = ((_idx$1 + 1) >>> 0);\n        var self = _horizontal$2;\n        if (self) {\n            var $682 = ((0 | ((((_spacing$3 * _idx$9) >>> 0) + _x$7) >>> 0) | (_y$8 << 12) | (0 << 24)));\n            var _pos$10 = $682;\n        } else {\n            var $683 = ((0 | _x$7 | (((((_spacing$3 * _idx$9) >>> 0) + _y$8) >>> 0) << 12) | (0 << 24)));\n            var _pos$10 = $683;\n        };\n        var $681 = Mons$draw$text$(\"> \", _font_map$4, _pos$10, _scr$6);\n        return $681;\n    };\n    const Mons$draw$list_selector = x0 => x1 => x2 => x3 => x4 => x5 => Mons$draw$list_selector$(x0, x1, x2, x3, x4, x5);\n    const Mons$Char_white$100 = Image3D$parse$(\"817c1effffff817d1effffff7e7e1effffff7f7e1effffff807e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$101 = Image3D$parse$(\"7e7e1effffff7f7e1effffff807e1effffff7d7f1effffff817f1effffff7d801effffff7e801effffff7f801effffff80801effffff81801effffff7d811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$102 = Image3D$parse$(\"7f7c1effffff807c1effffff817c1effffff7e7d1effffff7e7e1effffff7d7f1effffff7e7f1effffff7f7f1effffff807f1effffff817f1effffff7e801effffff7e811effffff7e821effffff7e831effffff\");\n    const Mons$Char_white$103 = Image3D$parse$(\"7e7e1effffff7f7e1effffff807e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff81831effffff81841effffff7e851effffff7f851effffff80851effffff\");\n    const Mons$Char_white$104 = Image3D$parse$(\"7d7c1effffff7d7d1effffff7d7e1effffff7e7e1effffff7f7e1effffff807e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$105 = Image3D$parse$(\"7f7d1effffff7e7f1effffff7f7f1effffff7f801effffff7f811effffff7f821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$106 = Image3D$parse$(\"817d1effffff7f7f1effffff807f1effffff817f1effffff81801effffff81811effffff81821effffff81831effffff81841effffff7e851effffff7f851effffff80851effffff\");\n    const Mons$Char_white$107 = Image3D$parse$(\"7d7c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff807f1effffff7d801effffff7e801effffff7f801effffff7d811effffff80811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$108 = Image3D$parse$(\"7e7c1effffff7f7c1effffff7f7d1effffff7f7e1effffff7f7f1effffff7f801effffff7f811effffff7f821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$109 = Image3D$parse$(\"7d7e1effffff7e7e1effffff7f7e1effffff807e1effffff7d7f1effffff7f7f1effffff817f1effffff7d801effffff7f801effffff81801effffff7d811effffff7f811effffff81811effffff7d821effffff7f821effffff81821effffff7d831effffff7f831effffff81831effffff\");\n    const Mons$Char_white$110 = Image3D$parse$(\"7d7e1effffff7e7e1effffff7f7e1effffff807e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$111 = Image3D$parse$(\"7e7e1effffff7f7e1effffff807e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$112 = Image3D$parse$(\"7d7e1effffff7e7e1effffff7f7e1effffff807e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff7e831effffff7f831effffff80831effffff7d841effffff7d851effffff\");\n    const Mons$Char_white$113 = Image3D$parse$(\"7e7e1effffff7f7e1effffff807e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff81831effffff81841effffff81851effffff\");\n    const Mons$Char_white$114 = Image3D$parse$(\"7d7e1effffff807e1effffff817e1effffff7d7f1effffff7f7f1effffff7d801effffff7e801effffff7d811effffff7d821effffff7d831effffff\");\n    const Mons$Char_white$115 = Image3D$parse$(\"7e7e1effffff7f7e1effffff807e1effffff817e1effffff7d7f1effffff7e801effffff7f801effffff80801effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$116 = Image3D$parse$(\"7e7c1effffff7e7d1effffff7d7e1effffff7e7e1effffff7f7e1effffff807e1effffff7e7f1effffff7e801effffff7e811effffff7e821effffff7f831effffff80831effffff\");\n    const Mons$Char_white$117 = Image3D$parse$(\"7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$118 = Image3D$parse$(\"7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7e821effffff80821effffff7f831effffff\");\n    const Mons$Char_white$119 = Image3D$parse$(\"7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff7f811effffff81811effffff7d821effffff7f821effffff81821effffff7e831effffff80831effffff\");\n    const Mons$Char_white$120 = Image3D$parse$(\"7d7e1effffff817e1effffff7e7f1effffff807f1effffff7f801effffff7f811effffff7e821effffff80821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$121 = Image3D$parse$(\"7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff80841effffff7d851effffff7e851effffff7f851effffff\");\n    const Mons$Char_white$122 = Image3D$parse$(\"7d7e1effffff7e7e1effffff7f7e1effffff807e1effffff817e1effffff817f1effffff7f801effffff80801effffff7e811effffff7d821effffff7d831effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$123 = Image3D$parse$(\"807c1effffff7f7d1effffff7f7e1effffff7f7f1effffff7e801effffff7f811effffff7f821effffff80831effffff\");\n    const Mons$Char_white$124 = Image3D$parse$(\"7f7c1effffff7f7d1effffff7f7e1effffff7f7f1effffff7f801effffff7f811effffff7f821effffff7f831effffff\");\n    const Mons$Char_white$125 = Image3D$parse$(\"7e7c1effffff7f7d1effffff7f7e1effffff7f7f1effffff80801effffff7f811effffff7f821effffff7e831effffff\");\n    const Mons$Char_white$126 = Image3D$parse$(\"7e7b1effffff817b1effffff7d7c1effffff7f7c1effffff817c1effffff7d7d1effffff807d1effffff\");\n    const Mons$Char_white$32 = Image3D$parse$(\"\");\n    const Mons$Char_white$33 = Image3D$parse$(\"7f7c1effffff7f7d1effffff7f7e1effffff7f7f1effffff7f801effffff7f811effffff7f831effffff\");\n    const Mons$Char_white$34 = Image3D$parse$(\"7e7c1effffff807c1effffff7e7d1effffff807d1effffff\");\n    const Mons$Char_white$35 = Image3D$parse$(\"7e7c1effffff807c1effffff7e7d1effffff807d1effffff7d7e1effffff7e7e1effffff7f7e1effffff807e1effffff817e1effffff7e7f1effffff807f1effffff7e801effffff80801effffff7d811effffff7e811effffff7f811effffff80811effffff81811effffff7e821effffff80821effffff7e831effffff80831effffff\");\n    const Mons$Char_white$36 = Image3D$parse$(\"7f7b1effffff7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff7e7f1effffff7f801effffff80801effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff7f841effffff\");\n    const Mons$Char_white$37 = Image3D$parse$(\"7e7b1effffff7d7c1effffff7f7c1effffff7e7d1effffff817d1effffff807e1effffff7f7f1effffff7e801effffff7d811effffff80811effffff7f821effffff81821effffff80831effffff\");\n    const Mons$Char_white$38 = Image3D$parse$(\"7e7c1effffff7f7c1effffff7d7d1effffff807d1effffff7d7e1effffff807e1effffff7e7f1effffff7f7f1effffff7d801effffff7d811effffff7f811effffff80811effffff81811effffff7d821effffff80821effffff7e831effffff7f831effffff81831effffff\");\n    const Mons$Char_white$39 = Image3D$parse$(\"7f7c1effffff7f7d1effffff\");\n    const Mons$Char_white$40 = Image3D$parse$(\"807c1effffff7f7d1effffff7e7e1effffff7e7f1effffff7e801effffff7e811effffff7f821effffff80831effffff\");\n    const Mons$Char_white$41 = Image3D$parse$(\"7e7c1effffff7f7d1effffff807e1effffff807f1effffff80801effffff80811effffff7f821effffff7e831effffff\");\n    const Mons$Char_white$42 = Image3D$parse$(\"7e7d1effffff807d1effffff7f7e1effffff7e7f1effffff7f7f1effffff807f1effffff7f801effffff7e811effffff80811effffff\");\n    const Mons$Char_white$43 = Image3D$parse$(\"7f7d1effffff7f7e1effffff7d7f1effffff7e7f1effffff7f7f1effffff807f1effffff817f1effffff7f801effffff7f811effffff\");\n    const Mons$Char_white$44 = Image3D$parse$(\"7f821effffff80821effffff7f831effffff80831effffff80841effffff7f851effffff\");\n    const Mons$Char_white$45 = Image3D$parse$(\"7d7f1effffff7e7f1effffff7f7f1effffff807f1effffff817f1effffff\");\n    const Mons$Char_white$46 = Image3D$parse$(\"80831effffff81831effffff\");\n    const Mons$Char_white$47 = Image3D$parse$(\"817c1effffff807d1effffff807e1effffff7f7f1effffff7f801effffff7e811effffff7e821effffff7d831effffff\");\n    const Mons$Char_white$48 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff807e1effffff817e1effffff7d7f1effffff7f7f1effffff817f1effffff7d801effffff7f801effffff81801effffff7d811effffff7e811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$49 = Image3D$parse$(\"807c1effffff7f7d1effffff807d1effffff7e7e1effffff807e1effffff7d7f1effffff807f1effffff80801effffff80811effffff80821effffff80831effffff\");\n    const Mons$Char_white$50 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff807f1effffff7f801effffff7e811effffff7d821effffff7d831effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$51 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff817e1effffff7e7f1effffff7f7f1effffff807f1effffff81801effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$52 = Image3D$parse$(\"7e7c1effffff7e7d1effffff7e7e1effffff807e1effffff7e7f1effffff807f1effffff7d801effffff80801effffff7d811effffff7e811effffff7f811effffff80811effffff81811effffff80821effffff80831effffff\");\n    const Mons$Char_white$53 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff817c1effffff7d7d1effffff7d7e1effffff7d7f1effffff7e7f1effffff7f7f1effffff807f1effffff81801effffff81811effffff81821effffff7d831effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$54 = Image3D$parse$(\"807c1effffff7f7d1effffff7e7e1effffff7e7f1effffff7f7f1effffff807f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$55 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff817c1effffff817d1effffff807e1effffff7f7f1effffff7e801effffff7e811effffff7e821effffff7e831effffff\");\n    const Mons$Char_white$56 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7e7f1effffff7f7f1effffff807f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$57 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7e801effffff7f801effffff80801effffff80811effffff7f821effffff7e831effffff\");\n    const Mons$Char_white$58 = Image3D$parse$(\"7f7f1effffff807f1effffff7f821effffff80821effffff\");\n    const Mons$Char_white$59 = Image3D$parse$(\"7f7f1effffff807f1effffff7f821effffff80821effffff7f831effffff80831effffff80841effffff7f851effffff\");\n    const Mons$Char_white$60 = Image3D$parse$(\"807c1effffff7f7d1effffff7e7e1effffff7d7f1effffff7d801effffff7e811effffff7f821effffff80831effffff\");\n    const Mons$Char_white$61 = Image3D$parse$(\"7d7f1effffff7e7f1effffff7f7f1effffff807f1effffff817f1effffff7d811effffff7e811effffff7f811effffff80811effffff81811effffff\");\n    const Mons$Char_white$62 = Image3D$parse$(\"7e7c1effffff7f7d1effffff807e1effffff817f1effffff81801effffff80811effffff7f821effffff7e831effffff\");\n    const Mons$Char_white$63 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff807f1effffff7f801effffff7f811effffff7f831effffff\");\n    const Mons$Char_white$64 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff807e1effffff817e1effffff7d7f1effffff7f7f1effffff817f1effffff7d801effffff7f801effffff81801effffff7d811effffff80811effffff81811effffff7d821effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$65 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff7e811effffff7f811effffff80811effffff81811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$66 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff7e7f1effffff7f7f1effffff807f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$67 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff7d7f1effffff7d801effffff7d811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$68 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$69 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff817c1effffff7d7d1effffff7d7e1effffff7d7f1effffff7e7f1effffff7f7f1effffff807f1effffff817f1effffff7d801effffff7d811effffff7d821effffff7d831effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$70 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff817c1effffff7d7d1effffff7d7e1effffff7d7f1effffff7e7f1effffff7f7f1effffff807f1effffff7d801effffff7d811effffff7d821effffff7d831effffff\");\n    const Mons$Char_white$71 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff7d7f1effffff7d801effffff7d811effffff80811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$72 = Image3D$parse$(\"7d7c1effffff817c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff7e7f1effffff7f7f1effffff807f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$73 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7f7d1effffff7f7e1effffff7f7f1effffff7f801effffff7f811effffff7f821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$74 = Image3D$parse$(\"817c1effffff817d1effffff817e1effffff817f1effffff81801effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$75 = Image3D$parse$(\"7d7c1effffff817c1effffff7d7d1effffff807d1effffff7d7e1effffff7f7e1effffff7d7f1effffff7e7f1effffff7d801effffff7f801effffff7d811effffff80811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$76 = Image3D$parse$(\"7d7c1effffff7d7d1effffff7d7e1effffff7d7f1effffff7d801effffff7d811effffff7d821effffff7d831effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$77 = Image3D$parse$(\"7d7c1effffff817c1effffff7d7d1effffff7e7d1effffff807d1effffff817d1effffff7d7e1effffff7f7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$78 = Image3D$parse$(\"7d7c1effffff817c1effffff7d7d1effffff7e7d1effffff817d1effffff7d7e1effffff7f7e1effffff817e1effffff7d7f1effffff807f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$79 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$80 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff7e801effffff7f801effffff80801effffff7d811effffff7d821effffff7d831effffff\");\n    const Mons$Char_white$81 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff80841effffff81841effffff\");\n    const Mons$Char_white$82 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff7e801effffff7f801effffff80801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$83 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7d7d1effffff817d1effffff7d7e1effffff7e7f1effffff7f7f1effffff80801effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$84 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff817c1effffff7f7d1effffff7f7e1effffff7f7f1effffff7f801effffff7f811effffff7f821effffff7f831effffff\");\n    const Mons$Char_white$85 = Image3D$parse$(\"7d7c1effffff817c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$86 = Image3D$parse$(\"7d7c1effffff817c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7e821effffff80821effffff7f831effffff\");\n    const Mons$Char_white$87 = Image3D$parse$(\"7d7c1effffff817c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff7f811effffff81811effffff7d821effffff7e821effffff80821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$88 = Image3D$parse$(\"7d7c1effffff817c1effffff7d7d1effffff817d1effffff7e7e1effffff807e1effffff7f7f1effffff7f801effffff7e811effffff80811effffff7d821effffff81821effffff7d831effffff81831effffff\");\n    const Mons$Char_white$89 = Image3D$parse$(\"7d7c1effffff817c1effffff7d7d1effffff817d1effffff7d7e1effffff817e1effffff7e7f1effffff807f1effffff7f801effffff7f811effffff7f821effffff7f831effffff\");\n    const Mons$Char_white$90 = Image3D$parse$(\"7d7c1effffff7e7c1effffff7f7c1effffff807c1effffff817c1effffff817d1effffff807e1effffff7f7f1effffff7e801effffff7e811effffff7d821effffff7d831effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$91 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff7e7d1effffff7e7e1effffff7e7f1effffff7e801effffff7e811effffff7e821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$92 = Image3D$parse$(\"7d7c1effffff7e7d1effffff7e7e1effffff7f7f1effffff7f801effffff80811effffff80821effffff81831effffff\");\n    const Mons$Char_white$93 = Image3D$parse$(\"7e7c1effffff7f7c1effffff807c1effffff807d1effffff807e1effffff807f1effffff80801effffff80811effffff80821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$94 = Image3D$parse$(\"7f7b1effffff7e7c1effffff807c1effffff7d7d1effffff817d1effffff\");\n    const Mons$Char_white$95 = Image3D$parse$(\"7d831effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$96 = Image3D$parse$(\"7e7b1effffff7f7c1effffff807d1effffff\");\n    const Mons$Char_white$97 = Image3D$parse$(\"7e7e1effffff7f7e1effffff807e1effffff817f1effffff7e801effffff7f801effffff80801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff81831effffff\");\n    const Mons$Char_white$98 = Image3D$parse$(\"7d7c1effffff7d7d1effffff7d7e1effffff7e7e1effffff7f7e1effffff807e1effffff7d7f1effffff817f1effffff7d801effffff81801effffff7d811effffff81811effffff7d821effffff81821effffff7d831effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$99 = Image3D$parse$(\"7e7e1effffff7f7e1effffff807e1effffff7d7f1effffff817f1effffff7d801effffff7d811effffff7d821effffff81821effffff7e831effffff7f831effffff80831effffff\");\n    const Mons$Char_white$font = (() => {\n        var _map$1 = Map$new;\n        var _map$2 = Mons$font$set_img$(100, Mons$Char_white$100, _map$1);\n        var _map$3 = Mons$font$set_img$(101, Mons$Char_white$101, _map$2);\n        var _map$4 = Mons$font$set_img$(102, Mons$Char_white$102, _map$3);\n        var _map$5 = Mons$font$set_img$(103, Mons$Char_white$103, _map$4);\n        var _map$6 = Mons$font$set_img$(104, Mons$Char_white$104, _map$5);\n        var _map$7 = Mons$font$set_img$(105, Mons$Char_white$105, _map$6);\n        var _map$8 = Mons$font$set_img$(106, Mons$Char_white$106, _map$7);\n        var _map$9 = Mons$font$set_img$(107, Mons$Char_white$107, _map$8);\n        var _map$10 = Mons$font$set_img$(108, Mons$Char_white$108, _map$9);\n        var _map$11 = Mons$font$set_img$(109, Mons$Char_white$109, _map$10);\n        var _map$12 = Mons$font$set_img$(110, Mons$Char_white$110, _map$11);\n        var _map$13 = Mons$font$set_img$(111, Mons$Char_white$111, _map$12);\n        var _map$14 = Mons$font$set_img$(112, Mons$Char_white$112, _map$13);\n        var _map$15 = Mons$font$set_img$(113, Mons$Char_white$113, _map$14);\n        var _map$16 = Mons$font$set_img$(114, Mons$Char_white$114, _map$15);\n        var _map$17 = Mons$font$set_img$(115, Mons$Char_white$115, _map$16);\n        var _map$18 = Mons$font$set_img$(116, Mons$Char_white$116, _map$17);\n        var _map$19 = Mons$font$set_img$(117, Mons$Char_white$117, _map$18);\n        var _map$20 = Mons$font$set_img$(118, Mons$Char_white$118, _map$19);\n        var _map$21 = Mons$font$set_img$(119, Mons$Char_white$119, _map$20);\n        var _map$22 = Mons$font$set_img$(120, Mons$Char_white$120, _map$21);\n        var _map$23 = Mons$font$set_img$(121, Mons$Char_white$121, _map$22);\n        var _map$24 = Mons$font$set_img$(122, Mons$Char_white$122, _map$23);\n        var _map$25 = Mons$font$set_img$(123, Mons$Char_white$123, _map$24);\n        var _map$26 = Mons$font$set_img$(124, Mons$Char_white$124, _map$25);\n        var _map$27 = Mons$font$set_img$(125, Mons$Char_white$125, _map$26);\n        var _map$28 = Mons$font$set_img$(126, Mons$Char_white$126, _map$27);\n        var _map$29 = Mons$font$set_img$(32, Mons$Char_white$32, _map$28);\n        var _map$30 = Mons$font$set_img$(33, Mons$Char_white$33, _map$29);\n        var _map$31 = Mons$font$set_img$(34, Mons$Char_white$34, _map$30);\n        var _map$32 = Mons$font$set_img$(35, Mons$Char_white$35, _map$31);\n        var _map$33 = Mons$font$set_img$(36, Mons$Char_white$36, _map$32);\n        var _map$34 = Mons$font$set_img$(37, Mons$Char_white$37, _map$33);\n        var _map$35 = Mons$font$set_img$(38, Mons$Char_white$38, _map$34);\n        var _map$36 = Mons$font$set_img$(39, Mons$Char_white$39, _map$35);\n        var _map$37 = Mons$font$set_img$(40, Mons$Char_white$40, _map$36);\n        var _map$38 = Mons$font$set_img$(41, Mons$Char_white$41, _map$37);\n        var _map$39 = Mons$font$set_img$(42, Mons$Char_white$42, _map$38);\n        var _map$40 = Mons$font$set_img$(43, Mons$Char_white$43, _map$39);\n        var _map$41 = Mons$font$set_img$(44, Mons$Char_white$44, _map$40);\n        var _map$42 = Mons$font$set_img$(45, Mons$Char_white$45, _map$41);\n        var _map$43 = Mons$font$set_img$(46, Mons$Char_white$46, _map$42);\n        var _map$44 = Mons$font$set_img$(47, Mons$Char_white$47, _map$43);\n        var _map$45 = Mons$font$set_img$(48, Mons$Char_white$48, _map$44);\n        var _map$46 = Mons$font$set_img$(49, Mons$Char_white$49, _map$45);\n        var _map$47 = Mons$font$set_img$(50, Mons$Char_white$50, _map$46);\n        var _map$48 = Mons$font$set_img$(51, Mons$Char_white$51, _map$47);\n        var _map$49 = Mons$font$set_img$(52, Mons$Char_white$52, _map$48);\n        var _map$50 = Mons$font$set_img$(53, Mons$Char_white$53, _map$49);\n        var _map$51 = Mons$font$set_img$(54, Mons$Char_white$54, _map$50);\n        var _map$52 = Mons$font$set_img$(55, Mons$Char_white$55, _map$51);\n        var _map$53 = Mons$font$set_img$(56, Mons$Char_white$56, _map$52);\n        var _map$54 = Mons$font$set_img$(57, Mons$Char_white$57, _map$53);\n        var _map$55 = Mons$font$set_img$(58, Mons$Char_white$58, _map$54);\n        var _map$56 = Mons$font$set_img$(59, Mons$Char_white$59, _map$55);\n        var _map$57 = Mons$font$set_img$(60, Mons$Char_white$60, _map$56);\n        var _map$58 = Mons$font$set_img$(61, Mons$Char_white$61, _map$57);\n        var _map$59 = Mons$font$set_img$(62, Mons$Char_white$62, _map$58);\n        var _map$60 = Mons$font$set_img$(63, Mons$Char_white$63, _map$59);\n        var _map$61 = Mons$font$set_img$(64, Mons$Char_white$64, _map$60);\n        var _map$62 = Mons$font$set_img$(65, Mons$Char_white$65, _map$61);\n        var _map$63 = Mons$font$set_img$(66, Mons$Char_white$66, _map$62);\n        var _map$64 = Mons$font$set_img$(67, Mons$Char_white$67, _map$63);\n        var _map$65 = Mons$font$set_img$(68, Mons$Char_white$68, _map$64);\n        var _map$66 = Mons$font$set_img$(69, Mons$Char_white$69, _map$65);\n        var _map$67 = Mons$font$set_img$(70, Mons$Char_white$70, _map$66);\n        var _map$68 = Mons$font$set_img$(71, Mons$Char_white$71, _map$67);\n        var _map$69 = Mons$font$set_img$(72, Mons$Char_white$72, _map$68);\n        var _map$70 = Mons$font$set_img$(73, Mons$Char_white$73, _map$69);\n        var _map$71 = Mons$font$set_img$(74, Mons$Char_white$74, _map$70);\n        var _map$72 = Mons$font$set_img$(75, Mons$Char_white$75, _map$71);\n        var _map$73 = Mons$font$set_img$(76, Mons$Char_white$76, _map$72);\n        var _map$74 = Mons$font$set_img$(77, Mons$Char_white$77, _map$73);\n        var _map$75 = Mons$font$set_img$(78, Mons$Char_white$78, _map$74);\n        var _map$76 = Mons$font$set_img$(79, Mons$Char_white$79, _map$75);\n        var _map$77 = Mons$font$set_img$(80, Mons$Char_white$80, _map$76);\n        var _map$78 = Mons$font$set_img$(81, Mons$Char_white$81, _map$77);\n        var _map$79 = Mons$font$set_img$(82, Mons$Char_white$82, _map$78);\n        var _map$80 = Mons$font$set_img$(83, Mons$Char_white$83, _map$79);\n        var _map$81 = Mons$font$set_img$(84, Mons$Char_white$84, _map$80);\n        var _map$82 = Mons$font$set_img$(85, Mons$Char_white$85, _map$81);\n        var _map$83 = Mons$font$set_img$(86, Mons$Char_white$86, _map$82);\n        var _map$84 = Mons$font$set_img$(87, Mons$Char_white$87, _map$83);\n        var _map$85 = Mons$font$set_img$(88, Mons$Char_white$88, _map$84);\n        var _map$86 = Mons$font$set_img$(89, Mons$Char_white$89, _map$85);\n        var _map$87 = Mons$font$set_img$(90, Mons$Char_white$90, _map$86);\n        var _map$88 = Mons$font$set_img$(91, Mons$Char_white$91, _map$87);\n        var _map$89 = Mons$font$set_img$(92, Mons$Char_white$92, _map$88);\n        var _map$90 = Mons$font$set_img$(93, Mons$Char_white$93, _map$89);\n        var _map$91 = Mons$font$set_img$(94, Mons$Char_white$94, _map$90);\n        var _map$92 = Mons$font$set_img$(95, Mons$Char_white$95, _map$91);\n        var _map$93 = Mons$font$set_img$(96, Mons$Char_white$96, _map$92);\n        var _map$94 = Mons$font$set_img$(97, Mons$Char_white$97, _map$93);\n        var _map$95 = Mons$font$set_img$(98, Mons$Char_white$98, _map$94);\n        var _map$96 = Mons$font$set_img$(99, Mons$Char_white$99, _map$95);\n        var _map$97 = Mons$font$set_img$(9312, Mons$Char_black$normal, _map$96);\n        var _map$98 = Mons$font$set_img$(9313, Mons$Char_black$earth, _map$97);\n        var _map$99 = Mons$font$set_img$(9314, Mons$Char_black$fire, _map$98);\n        var _map$100 = Mons$font$set_img$(9315, Mons$Char_black$water, _map$99);\n        var _map$101 = Mons$font$set_img$(9316, Mons$Char_black$grass, _map$100);\n        var _map$102 = Mons$font$set_img$(9317, Mons$Char_black$electric, _map$101);\n        var _map$103 = Mons$font$set_img$(9318, Mons$Char_black$psychic, _map$102);\n        var _map$104 = Mons$font$set_img$(9319, Mons$Char_black$ice, _map$103);\n        var _map$105 = Mons$font$set_img$(9320, Mons$Char_black$light, _map$104);\n        var _map$106 = Mons$font$set_img$(9321, Mons$Char_black$darkness, _map$105);\n        var $684 = _map$106;\n        return $684;\n    })();\n\n    function List$reverse$go$(_xs$2, _res$3) {\n        var List$reverse$go$ = (_xs$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_xs$2, _res$3]\n        });\n        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);\n        var arg = [_xs$2, _res$3];\n        while (true) {\n            let [_xs$2, _res$3] = arg;\n            var R = (() => {\n                var self = _xs$2;\n                switch (self._) {\n                    case 'List.nil':\n                        var $685 = _res$3;\n                        return $685;\n                    case 'List.cons':\n                        var $686 = self.head;\n                        var $687 = self.tail;\n                        var $688 = List$reverse$go$($687, List$cons$($686, _res$3));\n                        return $688;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);\n\n    function List$reverse$(_xs$2) {\n        var $689 = List$reverse$go$(_xs$2, List$nil);\n        return $689;\n    };\n    const List$reverse = x0 => List$reverse$(x0);\n\n    function Mons$Object$get_dir$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $691 = self.kin;\n                var $692 = self.dir;\n                var $693 = self.pad;\n                var $694 = self.ani;\n                var $695 = self.dmg;\n                var $696 = self.bag;\n                var $697 = self.mon;\n                var $698 = self.bos;\n                var $699 = self.cap;\n                var $700 = self.idl;\n                var $701 = self.eff;\n                var $702 = $692;\n                var $690 = $702;\n                break;\n        };\n        return $690;\n    };\n    const Mons$Object$get_dir = x0 => Mons$Object$get_dir$(x0);\n\n    function Mons$draw$global_xy$(_t_x$1, _t_y$2, _obj$3) {\n        var self = _obj$3;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $704 = self.kin;\n                var $705 = self.dir;\n                var $706 = self.pad;\n                var $707 = self.ani;\n                var $708 = self.dmg;\n                var $709 = self.bag;\n                var $710 = self.mon;\n                var $711 = self.bos;\n                var $712 = self.cap;\n                var $713 = self.idl;\n                var $714 = self.eff;\n                var _ani$15 = Mons$Object$get_ani$(_obj$3);\n                var _dir$16 = Mons$Object$get_dir$(_obj$3);\n                var _g_x$17 = ((_t_x$1 * 16) >>> 0);\n                var _g_y$18 = ((_t_y$2 * 16) >>> 0);\n                var self = _dir$16;\n                switch (self._) {\n                    case 'Mons.Dir.right':\n                        var $716 = (Math.max(_g_x$17 - _ani$15, 0));\n                        var _g_x$19 = $716;\n                        break;\n                    case 'Mons.Dir.up':\n                        var $717 = _g_x$17;\n                        var _g_x$19 = $717;\n                        break;\n                    case 'Mons.Dir.left':\n                        var $718 = ((_g_x$17 + _ani$15) >>> 0);\n                        var _g_x$19 = $718;\n                        break;\n                    case 'Mons.Dir.down':\n                        var $719 = _g_x$17;\n                        var _g_x$19 = $719;\n                        break;\n                };\n                var self = _dir$16;\n                switch (self._) {\n                    case 'Mons.Dir.right':\n                        var $720 = _g_y$18;\n                        var _g_y$20 = $720;\n                        break;\n                    case 'Mons.Dir.up':\n                        var $721 = ((_g_y$18 + _ani$15) >>> 0);\n                        var _g_y$20 = $721;\n                        break;\n                    case 'Mons.Dir.left':\n                        var $722 = _g_y$18;\n                        var _g_y$20 = $722;\n                        break;\n                    case 'Mons.Dir.down':\n                        var $723 = (Math.max(_g_y$18 - _ani$15, 0));\n                        var _g_y$20 = $723;\n                        break;\n                };\n                var $715 = Pair$new$(_g_x$19, _g_y$20);\n                var $703 = $715;\n                break;\n        };\n        return $703;\n    };\n    const Mons$draw$global_xy = x0 => x1 => x2 => Mons$draw$global_xy$(x0, x1, x2);\n\n    function Nat$mod$go$(_n$1, _m$2, _r$3) {\n        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _r$3]\n        });\n        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);\n        var arg = [_n$1, _m$2, _r$3];\n        while (true) {\n            let [_n$1, _m$2, _r$3] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $724 = Nat$mod$go$(_n$1, _r$3, _m$2);\n                    return $724;\n                } else {\n                    var $725 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $727 = _r$3;\n                        var $726 = $727;\n                    } else {\n                        var $728 = (self - 1n);\n                        var $729 = Nat$mod$go$($728, $725, Nat$succ$(_r$3));\n                        var $726 = $729;\n                    };\n                    return $726;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);\n\n    function Nat$mod$(_n$1, _m$2) {\n        var $730 = Nat$mod$go$(_n$1, _m$2, 0n);\n        return $730;\n    };\n    const Nat$mod = x0 => x1 => Nat$mod$(x0, x1);\n\n    function Either$(_A$1, _B$2) {\n        var $731 = null;\n        return $731;\n    };\n    const Either = x0 => x1 => Either$(x0, x1);\n\n    function Either$left$(_value$3) {\n        var $732 = ({\n            _: 'Either.left',\n            'value': _value$3\n        });\n        return $732;\n    };\n    const Either$left = x0 => Either$left$(x0);\n\n    function Either$right$(_value$3) {\n        var $733 = ({\n            _: 'Either.right',\n            'value': _value$3\n        });\n        return $733;\n    };\n    const Either$right = x0 => Either$right$(x0);\n\n    function Nat$sub_rem$(_n$1, _m$2) {\n        var Nat$sub_rem$ = (_n$1, _m$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2]\n        });\n        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);\n        var arg = [_n$1, _m$2];\n        while (true) {\n            let [_n$1, _m$2] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $734 = Either$left$(_n$1);\n                    return $734;\n                } else {\n                    var $735 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $737 = Either$right$(Nat$succ$($735));\n                        var $736 = $737;\n                    } else {\n                        var $738 = (self - 1n);\n                        var $739 = Nat$sub_rem$($738, $735);\n                        var $736 = $739;\n                    };\n                    return $736;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);\n\n    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {\n        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _d$3]\n        });\n        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);\n        var arg = [_n$1, _m$2, _d$3];\n        while (true) {\n            let [_n$1, _m$2, _d$3] = arg;\n            var R = (() => {\n                var self = Nat$sub_rem$(_n$1, _m$2);\n                switch (self._) {\n                    case 'Either.left':\n                        var $740 = self.value;\n                        var $741 = Nat$div_mod$go$($740, _m$2, Nat$succ$(_d$3));\n                        return $741;\n                    case 'Either.right':\n                        var $742 = self.value;\n                        var $743 = Pair$new$(_d$3, _n$1);\n                        return $743;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);\n    const Nat$div_mod = a0 => a1 => (({\n        _: 'Pair.new',\n        'fst': a0 / a1,\n        'snd': a0 % a1\n    }));\n    const Nat$div = a0 => a1 => (a0 / a1);\n\n    function Mons$draw$cur_sprite$(_idl$1, _sprites$2) {\n        var _len_sprite$3 = (list_length(_sprites$2));\n        var _idl_nat$4 = U32$to_nat$((Math.max(_idl$1 - 1, 0)));\n        var _idx$5 = Nat$mod$((_idl_nat$4 / 4n), _len_sprite$3);\n        var self = List$at$(_idx$5, _sprites$2);\n        switch (self._) {\n            case 'Maybe.none':\n                var $745 = Image3D$empty;\n                var $744 = $745;\n                break;\n            case 'Maybe.some':\n                var $746 = self.value;\n                var $747 = $746;\n                var $744 = $747;\n                break;\n        };\n        return $744;\n    };\n    const Mons$draw$cur_sprite = x0 => x1 => Mons$draw$cur_sprite$(x0, x1);\n\n    function Mons$Sprite$new$(_x$1, _y$2, _z$3, _img$4) {\n        var $748 = ({\n            _: 'Mons.Sprite.new',\n            'x': _x$1,\n            'y': _y$2,\n            'z': _z$3,\n            'img': _img$4\n        });\n        return $748;\n    };\n    const Mons$Sprite$new = x0 => x1 => x2 => x3 => Mons$Sprite$new$(x0, x1, x2, x3);\n\n    function Mons$game_sprites$(_game$1) {\n        var self = _game$1;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $750 = self.usr;\n                var $751 = self.pos;\n                var $752 = self.map;\n                var $753 = self.stt;\n                var $754 = self.tik;\n                var _sprs$7 = List$nil;\n                var self = Mons$Game$get_hero_pos$(_game$1);\n                switch (self._) {\n                    case 'Maybe.none':\n                        var $756 = List$nil;\n                        var $755 = $756;\n                        break;\n                    case 'Maybe.some':\n                        var $757 = self.value;\n                        var _c_x$9 = (($757 & 0xFFF));\n                        var _c_y$10 = ((($757 >>> 12) & 0xFFF));\n                        var _c_z$11 = (($757 >>> 24));\n                        var _sprs$12 = (() => {\n                            var $759 = _sprs$7;\n                            var $760 = 0;\n                            var $761 = 17;\n                            let _sprs$13 = $759;\n                            for (let _x$12 = $760; _x$12 < $761; ++_x$12) {\n                                var _sprs$14 = (() => {\n                                    var $762 = _sprs$13;\n                                    var $763 = 0;\n                                    var $764 = 13;\n                                    let _sprs$15 = $762;\n                                    for (let _y$14 = $763; _y$14 < $764; ++_y$14) {\n                                        var _t_x$16 = (((Math.max(_c_x$9 - 8, 0)) + _x$12) >>> 0);\n                                        var _t_y$17 = (((Math.max(_c_y$10 - 6, 0)) + _y$14) >>> 0);\n                                        var _t_z$18 = _c_z$11;\n                                        var _pos$19 = ((0 | _t_x$16 | (_t_y$17 << 12) | (_t_z$18 << 24)));\n                                        var _got$20 = Map$get$(U32$to_bits$(_pos$19), $752);\n                                        var self = _got$20;\n                                        switch (self._) {\n                                            case 'Maybe.none':\n                                                var $765 = List$cons$(Mons$Object$void, List$nil);\n                                                var _objs$21 = $765;\n                                                break;\n                                            case 'Maybe.some':\n                                                var $766 = self.value;\n                                                var $767 = List$reverse$($766);\n                                                var _objs$21 = $767;\n                                                break;\n                                        };\n                                        var _sprs$22 = (() => {\n                                            var $769 = _sprs$15;\n                                            var $770 = _objs$21;\n                                            let _sprs$23 = $769;\n                                            let _obj$22;\n                                            while ($770._ === 'List.cons') {\n                                                _obj$22 = $770.head;\n                                                var self = _obj$22;\n                                                switch (self._) {\n                                                    case 'Mons.Object.new':\n                                                        var $771 = self.kin;\n                                                        var $772 = self.dir;\n                                                        var $773 = self.pad;\n                                                        var $774 = self.ani;\n                                                        var $775 = self.dmg;\n                                                        var $776 = self.bag;\n                                                        var $777 = self.mon;\n                                                        var $778 = self.bos;\n                                                        var $779 = self.cap;\n                                                        var $780 = self.idl;\n                                                        var $781 = self.eff;\n                                                        var self = Mons$Kind$attr$($771);\n                                                        switch (self._) {\n                                                            case 'Mons.Attr.new':\n                                                                var $783 = self.blocks;\n                                                                var $784 = self.mhp;\n                                                                var $785 = self.atk;\n                                                                var $786 = self.name;\n                                                                var $787 = self.wlk;\n                                                                var $788 = self.idl;\n                                                                var $789 = self.pic;\n                                                                var $790 = self.battle_spr;\n                                                                var $791 = self.skills;\n                                                                var $792 = self.pos;\n                                                                var _sprites$45 = $787(_t_x$16)(_t_y$17)($774)($772);\n                                                                var self = Mons$draw$global_xy$(_t_x$16, _t_y$17, _obj$22);\n                                                                switch (self._) {\n                                                                    case 'Pair.new':\n                                                                        var $794 = self.fst;\n                                                                        var $795 = self.snd;\n                                                                        var _s_z$48 = _t_z$18;\n                                                                        var self = Mons$Object$is_standing$(_obj$22);\n                                                                        if (self) {\n                                                                            var _cur_spr$49 = Mons$draw$cur_sprite$($754, _sprites$45);\n                                                                            var _spr$50 = Mons$Sprite$new$($794, $795, _s_z$48, _cur_spr$49);\n                                                                            var $797 = List$cons$(_spr$50, _sprs$23);\n                                                                            var $796 = $797;\n                                                                        } else {\n                                                                            var _sprs$49 = (() => {\n                                                                                var $800 = _sprs$23;\n                                                                                var $801 = _sprites$45;\n                                                                                let _sprs$50 = $800;\n                                                                                let _img$49;\n                                                                                while ($801._ === 'List.cons') {\n                                                                                    _img$49 = $801.head;\n                                                                                    var _ani$51 = Mons$Object$get_ani$(_obj$22);\n                                                                                    var _dir$52 = Mons$Object$get_dir$(_obj$22);\n                                                                                    var _spr$53 = Mons$Sprite$new$($794, $795, _s_z$48, _img$49);\n                                                                                    var $800 = List$cons$(_spr$53, _sprs$50);\n                                                                                    _sprs$50 = $800;\n                                                                                    $801 = $801.tail;\n                                                                                }\n                                                                                return _sprs$50;\n                                                                            })();\n                                                                            var $798 = _sprs$49;\n                                                                            var $796 = $798;\n                                                                        };\n                                                                        var $793 = $796;\n                                                                        break;\n                                                                };\n                                                                var $782 = $793;\n                                                                break;\n                                                        };\n                                                        var $769 = $782;\n                                                        break;\n                                                };\n                                                _sprs$23 = $769;\n                                                $770 = $770.tail;\n                                            }\n                                            return _sprs$23;\n                                        })();\n                                        var $762 = _sprs$22;\n                                        _sprs$15 = $762;\n                                    };\n                                    return _sprs$15;\n                                })();\n                                var $759 = _sprs$14;\n                                _sprs$13 = $759;\n                            };\n                            return _sprs$13;\n                        })();\n                        var $758 = _sprs$12;\n                        var $755 = $758;\n                        break;\n                };\n                var $749 = $755;\n                break;\n        };\n        return $749;\n    };\n    const Mons$game_sprites = x0 => Mons$game_sprites$(x0);\n    const Mons$scr_mid = ((0 | 120 | (80 << 12) | (0 << 24)));\n\n    function Cmp$as_lte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $803 = Bool$true;\n                var $802 = $803;\n                break;\n            case 'Cmp.eql':\n                var $804 = Bool$true;\n                var $802 = $804;\n                break;\n            case 'Cmp.gtn':\n                var $805 = Bool$false;\n                var $802 = $805;\n                break;\n        };\n        return $802;\n    };\n    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);\n\n    function Word$lte$(_a$2, _b$3) {\n        var $806 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));\n        return $806;\n    };\n    const Word$lte = x0 => x1 => Word$lte$(x0, x1);\n    const U32$lte = a0 => a1 => (a0 <= a1);\n\n    function Cmp$as_ltn$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $808 = Bool$true;\n                var $807 = $808;\n                break;\n            case 'Cmp.eql':\n                var $809 = Bool$false;\n                var $807 = $809;\n                break;\n            case 'Cmp.gtn':\n                var $810 = Bool$false;\n                var $807 = $810;\n                break;\n        };\n        return $807;\n    };\n    const Cmp$as_ltn = x0 => Cmp$as_ltn$(x0);\n\n    function Word$ltn$(_a$2, _b$3) {\n        var $811 = Cmp$as_ltn$(Word$cmp$(_a$2, _b$3));\n        return $811;\n    };\n    const Word$ltn = x0 => x1 => Word$ltn$(x0, x1);\n    const U32$ltn = a0 => a1 => (a0 < a1);\n    const Bool$if = a0 => a1 => a2 => (a0 ? a1 : a2);\n\n    function Mons$Map$build_sprites$(_game$1, _scr$2, _hero_pos$3, _hero_obj$4) {\n        var _sprs$5 = Mons$game_sprites$(_game$1);\n        var _scr$6 = (() => {\n            var $814 = _scr$2;\n            var $815 = _sprs$5;\n            let _scr$7 = $814;\n            let _spr$6;\n            while ($815._ === 'List.cons') {\n                _spr$6 = $815.head;\n                var self = _spr$6;\n                switch (self._) {\n                    case 'Mons.Sprite.new':\n                        var $816 = self.x;\n                        var $817 = self.y;\n                        var $818 = self.z;\n                        var $819 = self.img;\n                        var _len$12 = Image3D$get_length$($819);\n                        var _scr$13 = (() => {\n                            var $821 = _scr$7;\n                            var $822 = 0;\n                            var $823 = _len$12;\n                            let _scr$14 = $821;\n                            for (let _i$13 = $822; _i$13 < $823; ++_i$13) {\n                                var _s_w$15 = ((Mons$scr_mid & 0xFFF));\n                                var _s_h$16 = (((Mons$scr_mid >>> 12) & 0xFFF));\n                                var _h_x$17 = ((_hero_pos$3 & 0xFFF));\n                                var _h_y$18 = (((_hero_pos$3 >>> 12) & 0xFFF));\n                                var self = Mons$draw$global_xy$(_h_x$17, _h_y$18, _hero_obj$4);\n                                switch (self._) {\n                                    case 'Pair.new':\n                                        var $824 = self.fst;\n                                        var $825 = self.snd;\n                                        var _s_x$21 = $816;\n                                        var _s_y$22 = $817;\n                                        var _s_z$23 = $818;\n                                        var _xyz$24 = (($819.buffer[_i$13 * 2]));\n                                        var _v_x$25 = (Math.max(((((_xyz$24 & 0xFFF)) + _s_x$21) >>> 0) - ((Mons$vox_mid & 0xFFF)), 0));\n                                        var _v_y$26 = (Math.max((((((_xyz$24 >>> 12) & 0xFFF)) + _s_y$22) >>> 0) - (((Mons$vox_mid >>> 12) & 0xFFF)), 0));\n                                        var _v_z$27 = ((_xyz$24 >>> 24));\n                                        var _ok0$28 = ((Math.max($824 - _s_w$15, 0)) <= _v_x$25);\n                                        var _ok1$29 = (_v_x$25 < (($824 + _s_w$15) >>> 0));\n                                        var _ok2$30 = ((Math.max($825 - _s_h$16, 0)) <= _v_y$26);\n                                        var _ok3$31 = (_v_y$26 < (($825 + _s_h$16) >>> 0));\n                                        var _ok$32 = (_ok0$28 && (_ok1$29 && (_ok2$30 && _ok3$31)));\n                                        var _c_x$33 = (Math.max(((_v_x$25 + ((Mons$scr_mid & 0xFFF))) >>> 0) - $824, 0));\n                                        var _c_y$34 = (Math.max(((_v_y$26 + (((Mons$scr_mid >>> 12) & 0xFFF))) >>> 0) - $825, 0));\n                                        var _c_z$35 = (_ok$32 ? _v_z$27 : 0);\n                                        var _pos$36 = ((0 | _c_x$33 | (_c_y$34 << 12) | (_c_z$35 << 24)));\n                                        var _col$37 = (($819.buffer[_i$13 * 2 + 1]));\n                                        var $826 = ((_scr$14.buffer[_scr$14.length * 2] = _pos$36, _scr$14.buffer[_scr$14.length * 2 + 1] = _col$37, _scr$14.length++, _scr$14));\n                                        var $821 = $826;\n                                        break;\n                                };\n                                _scr$14 = $821;\n                            };\n                            return _scr$14;\n                        })();\n                        var $820 = _scr$13;\n                        var $814 = $820;\n                        break;\n                };\n                _scr$7 = $814;\n                $815 = $815.tail;\n            }\n            return _scr$7;\n        })();\n        var $812 = _scr$6;\n        return $812;\n    };\n    const Mons$Map$build_sprites = x0 => x1 => x2 => x3 => Mons$Map$build_sprites$(x0, x1, x2, x3);\n    const Mons$draw$text_screen_bg = Image3D$empty;\n    const Mons$draw$msg_screen$line_0 = ((0 | 16 | (128 << 12) | (0 << 24)));\n    const Mons$draw$msg_screen$line_1 = ((0 | 16 | (144 << 12) | (0 << 24)));\n\n    function Mons$draw$mage_talk$(_text_0$1, _text_1$2, _scr$3) {\n        var _battle_boy_u$4 = Image3D$empty;\n        var _battle_mage_d$5 = Image3D$empty;\n        var _scr$6 = Mons$draw$image$(Mons$draw$text_screen_bg, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$3);\n        var _scr$7 = Mons$draw$text$(_text_0$1, Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$6);\n        var _scr$8 = Mons$draw$text$(_text_1$2, Mons$Char_black$font, Mons$draw$msg_screen$line_1, _scr$7);\n        var _scr$9 = Mons$draw$image$(_battle_boy_u$4, ((0 | 75 | (85 << 12) | (0 << 24))), _scr$8);\n        var _scr$10 = Mons$draw$image$(_battle_mage_d$5, ((0 | 180 | (80 << 12) | (0 << 24))), _scr$9);\n        var $827 = _scr$10;\n        return $827;\n    };\n    const Mons$draw$mage_talk = x0 => x1 => x2 => Mons$draw$mage_talk$(x0, x1, x2);\n\n    function Mons$Object$get_images$(_bag$1) {\n        var _images$2 = List$nil;\n        var _images$3 = (() => {\n            var $830 = _images$2;\n            var $831 = _bag$1;\n            let _images$4 = $830;\n            let _mon$3;\n            while ($831._ === 'List.cons') {\n                _mon$3 = $831.head;\n                var self = _mon$3;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $832 = self.kin;\n                        var $833 = self.dir;\n                        var $834 = self.pad;\n                        var $835 = self.ani;\n                        var $836 = self.dmg;\n                        var $837 = self.bag;\n                        var $838 = self.mon;\n                        var $839 = self.bos;\n                        var $840 = self.cap;\n                        var $841 = self.idl;\n                        var $842 = self.eff;\n                        var self = Mons$Kind$attr$($832);\n                        switch (self._) {\n                            case 'Mons.Attr.new':\n                                var $844 = self.blocks;\n                                var $845 = self.mhp;\n                                var $846 = self.atk;\n                                var $847 = self.name;\n                                var $848 = self.wlk;\n                                var $849 = self.idl;\n                                var $850 = self.pic;\n                                var $851 = self.battle_spr;\n                                var $852 = self.skills;\n                                var $853 = self.pos;\n                                var $854 = List$cons$($850, _images$4);\n                                var $843 = $854;\n                                break;\n                        };\n                        var $830 = $843;\n                        break;\n                };\n                _images$4 = $830;\n                $831 = $831.tail;\n            }\n            return _images$4;\n        })();\n        var $828 = _images$3;\n        return $828;\n    };\n    const Mons$Object$get_images = x0 => Mons$Object$get_images$(x0);\n\n    function Mons$Kind$get_name$(_kind$1) {\n        var self = Mons$Kind$attr$(_kind$1);\n        switch (self._) {\n            case 'Mons.Attr.new':\n                var $856 = self.blocks;\n                var $857 = self.mhp;\n                var $858 = self.atk;\n                var $859 = self.name;\n                var $860 = self.wlk;\n                var $861 = self.idl;\n                var $862 = self.pic;\n                var $863 = self.battle_spr;\n                var $864 = self.skills;\n                var $865 = self.pos;\n                var $866 = $859;\n                var $855 = $866;\n                break;\n        };\n        return $855;\n    };\n    const Mons$Kind$get_name = x0 => Mons$Kind$get_name$(x0);\n\n    function Mons$Object$get_names$(_bag$1) {\n        var _names$2 = List$nil;\n        var _names$3 = (() => {\n            var $869 = _names$2;\n            var $870 = _bag$1;\n            let _names$4 = $869;\n            let _mon$3;\n            while ($870._ === 'List.cons') {\n                _mon$3 = $870.head;\n                var self = _mon$3;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $871 = self.kin;\n                        var $872 = self.dir;\n                        var $873 = self.pad;\n                        var $874 = self.ani;\n                        var $875 = self.dmg;\n                        var $876 = self.bag;\n                        var $877 = self.mon;\n                        var $878 = self.bos;\n                        var $879 = self.cap;\n                        var $880 = self.idl;\n                        var $881 = self.eff;\n                        var _name$16 = Mons$Kind$get_name$($871);\n                        var $882 = List$cons$(_name$16, _names$4);\n                        var $869 = $882;\n                        break;\n                };\n                _names$4 = $869;\n                $870 = $870.tail;\n            }\n            return _names$4;\n        })();\n        var $867 = _names$3;\n        return $867;\n    };\n    const Mons$Object$get_names = x0 => Mons$Object$get_names$(x0);\n\n    function Mons$draw$list_image$go$(_images$1, _horizontal$2, _spacing$3, _pos$4, _scr$5, _idx$6) {\n        var Mons$draw$list_image$go$ = (_images$1, _horizontal$2, _spacing$3, _pos$4, _scr$5, _idx$6) => ({\n            ctr: 'TCO',\n            arg: [_images$1, _horizontal$2, _spacing$3, _pos$4, _scr$5, _idx$6]\n        });\n        var Mons$draw$list_image$go = _images$1 => _horizontal$2 => _spacing$3 => _pos$4 => _scr$5 => _idx$6 => Mons$draw$list_image$go$(_images$1, _horizontal$2, _spacing$3, _pos$4, _scr$5, _idx$6);\n        var arg = [_images$1, _horizontal$2, _spacing$3, _pos$4, _scr$5, _idx$6];\n        while (true) {\n            let [_images$1, _horizontal$2, _spacing$3, _pos$4, _scr$5, _idx$6] = arg;\n            var R = (() => {\n                var _x$7 = ((_pos$4 & 0xFFF));\n                var _y$8 = (((_pos$4 >>> 12) & 0xFFF));\n                var self = _images$1;\n                switch (self._) {\n                    case 'List.nil':\n                        var $884 = _scr$5;\n                        var $883 = $884;\n                        break;\n                    case 'List.cons':\n                        var $885 = self.head;\n                        var $886 = self.tail;\n                        var _inventory_mon_selection$11 = Image3D$empty;\n                        var _scr$12 = Mons$draw$image$(_inventory_mon_selection$11, _pos$4, _scr$5);\n                        var _scr$13 = Mons$draw$image$($885, _pos$4, _scr$12);\n                        var self = _horizontal$2;\n                        if (self) {\n                            var $888 = ((0 | ((_x$7 + _spacing$3) >>> 0) | (_y$8 << 12) | (0 << 24)));\n                            var _pos$14 = $888;\n                        } else {\n                            var $889 = ((0 | _x$7 | (((_y$8 + _spacing$3) >>> 0) << 12) | (0 << 24)));\n                            var _pos$14 = $889;\n                        };\n                        var $887 = Mons$draw$list_image$go$($886, _horizontal$2, _spacing$3, _pos$14, _scr$13, ((_idx$6 + 1) >>> 0));\n                        var $883 = $887;\n                        break;\n                };\n                return $883;\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Mons$draw$list_image$go = x0 => x1 => x2 => x3 => x4 => x5 => Mons$draw$list_image$go$(x0, x1, x2, x3, x4, x5);\n\n    function Mons$draw$list_image$(_images$1, _horizontal$2, _spacing$3, _start_pos$4, _scr$5) {\n        var _qtd$6 = (Number((list_length(_images$1))));\n        var $890 = Mons$draw$list_image$go$(_images$1, _horizontal$2, _spacing$3, _start_pos$4, _scr$5, 0);\n        return $890;\n    };\n    const Mons$draw$list_image = x0 => x1 => x2 => x3 => x4 => Mons$draw$list_image$(x0, x1, x2, x3, x4);\n\n    function Mons$draw$mon_img_selected$(_mon_idx$1, _qtd$2, _horizontal$3, _spacing$4, _pos$5, _scr$6) {\n        var _x_pos$7 = ((_pos$5 & 0xFFF));\n        var _y_pos$8 = (((_pos$5 >>> 12) & 0xFFF));\n        var self = (_mon_idx$1 === 0);\n        if (self) {\n            var $892 = ((0 | _x_pos$7 | (_y_pos$8 << 12) | (0 << 24)));\n            var _pos$9 = $892;\n        } else {\n            var self = _horizontal$3;\n            if (self) {\n                var $894 = ((0 | ((_x_pos$7 + ((_spacing$4 * _mon_idx$1) >>> 0)) >>> 0) | (_y_pos$8 << 12) | (0 << 24)));\n                var $893 = $894;\n            } else {\n                var $895 = ((0 | _x_pos$7 | (((_y_pos$8 + ((_spacing$4 * _mon_idx$1) >>> 0)) >>> 0) << 12) | (0 << 24)));\n                var $893 = $895;\n            };\n            var _pos$9 = $893;\n        };\n        var self = (_qtd$2 === 0);\n        if (self) {\n            var $896 = _scr$6;\n            var $891 = $896;\n        } else {\n            var _inventory_mon_selected$10 = Image3D$empty;\n            var $897 = Mons$draw$image$(_inventory_mon_selected$10, _pos$9, _scr$6);\n            var $891 = $897;\n        };\n        return $891;\n    };\n    const Mons$draw$mon_img_selected = x0 => x1 => x2 => x3 => x4 => x5 => Mons$draw$mon_img_selected$(x0, x1, x2, x3, x4, x5);\n\n    function Mons$draw$initial_mons$(_obj$1, _scr$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $899 = self.kin;\n                var $900 = self.dir;\n                var $901 = self.pad;\n                var $902 = self.ani;\n                var $903 = self.dmg;\n                var $904 = self.bag;\n                var $905 = self.mon;\n                var $906 = self.bos;\n                var $907 = self.cap;\n                var $908 = self.idl;\n                var $909 = self.eff;\n                var _qtd$14 = (Number((list_length($904))));\n                var self = (_qtd$14 === 0);\n                if (self) {\n                    var $911 = Mons$draw$text$(\"nothing to show\", Mons$Char_white$font, ((0 | 60 | (50 << 12) | (0 << 24))), _scr$2);\n                    var $910 = $911;\n                } else {\n                    var _scr$15 = Mons$draw$image$(Mons$draw$text_screen_bg, ((0 | 120 | (90 << 12) | (0 << 24))), _scr$2);\n                    var _mons_images$16 = List$reverse$(Mons$Object$get_images$($904));\n                    var _mons_names$17 = List$reverse$(Mons$Object$get_names$($904));\n                    var _scr$18 = Mons$draw$list$(_mons_names$17, Bool$false, 34, Mons$Char_white$font, ((0 | 70 | (0 << 12) | (0 << 24))), _scr$15);\n                    var _scr$19 = Mons$draw$list_image$(_mons_images$16, Bool$false, 34, ((0 | 40 | (30 << 12) | (0 << 24))), _scr$18);\n                    var _scr$20 = Mons$draw$mon_img_selected$($905, _qtd$14, Bool$false, 34, ((0 | 40 | (30 << 12) | (0 << 24))), _scr$19);\n                    var _scr$21 = Mons$draw$text$(\"Choose a Mon to start with and \", Mons$Char_black$font, ((0 | 16 | (134 << 12) | (0 << 24))), _scr$20);\n                    var _scr$22 = Mons$draw$text$(\"run to the tower. [c]\", Mons$Char_black$font, ((0 | 16 | (148 << 12) | (0 << 24))), _scr$21);\n                    var $912 = _scr$22;\n                    var $910 = $912;\n                };\n                var $898 = $910;\n                break;\n        };\n        return $898;\n    };\n    const Mons$draw$initial_mons = x0 => x1 => Mons$draw$initial_mons$(x0, x1);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function String$flatten$go$(_xs$1, _res$2) {\n        var String$flatten$go$ = (_xs$1, _res$2) => ({\n            ctr: 'TCO',\n            arg: [_xs$1, _res$2]\n        });\n        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);\n        var arg = [_xs$1, _res$2];\n        while (true) {\n            let [_xs$1, _res$2] = arg;\n            var R = (() => {\n                var self = _xs$1;\n                switch (self._) {\n                    case 'List.nil':\n                        var $913 = _res$2;\n                        return $913;\n                    case 'List.cons':\n                        var $914 = self.head;\n                        var $915 = self.tail;\n                        var $916 = String$flatten$go$($915, (_res$2 + $914));\n                        return $916;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);\n\n    function String$flatten$(_xs$1) {\n        var $917 = String$flatten$go$(_xs$1, \"\");\n        return $917;\n    };\n    const String$flatten = x0 => String$flatten$(x0);\n\n    function Mons$draw$img_type$(_kind$1) {\n        var self = _kind$1;\n        switch (self._) {\n            case 'Mons.Kind.Mons':\n                var $919 = self.ele;\n                var $920 = self.boss;\n                var $921 = self.pri_type;\n                var $922 = self.agi;\n                var self = $921;\n                switch (self._) {\n                    case 'Mons.Type.normal':\n                        var $924 = \"\\u{2460}\";\n                        var $923 = $924;\n                        break;\n                    case 'Mons.Type.earth':\n                        var $925 = \"\\u{2461}\";\n                        var $923 = $925;\n                        break;\n                    case 'Mons.Type.fire':\n                        var $926 = \"\\u{2462}\";\n                        var $923 = $926;\n                        break;\n                    case 'Mons.Type.water':\n                        var $927 = \"\\u{2463}\";\n                        var $923 = $927;\n                        break;\n                    case 'Mons.Type.grass':\n                        var $928 = \"\\u{2464}\";\n                        var $923 = $928;\n                        break;\n                    case 'Mons.Type.electric':\n                        var $929 = \"\\u{2465}\";\n                        var $923 = $929;\n                        break;\n                    case 'Mons.Type.psychic':\n                        var $930 = \"\\u{2466}\";\n                        var $923 = $930;\n                        break;\n                    case 'Mons.Type.ice':\n                        var $931 = \"\\u{2467}\";\n                        var $923 = $931;\n                        break;\n                    case 'Mons.Type.light':\n                        var $932 = \"\\u{2468}\";\n                        var $923 = $932;\n                        break;\n                    case 'Mons.Type.darkness':\n                        var $933 = \"\\u{2469}\";\n                        var $923 = $933;\n                        break;\n                };\n                var $918 = $923;\n                break;\n            case 'Mons.Kind.Const':\n                var $934 = self.ele;\n                var $935 = \"\";\n                var $918 = $935;\n                break;\n            case 'Mons.Kind.Terrain':\n                var $936 = self.ele;\n                var $937 = \"\";\n                var $918 = $937;\n                break;\n            case 'Mons.Kind.Interactive':\n                var $938 = self.ele;\n                var $939 = self.on;\n                var $940 = self.eff;\n                var $941 = \"\";\n                var $918 = $941;\n                break;\n        };\n        return $918;\n    };\n    const Mons$draw$img_type = x0 => Mons$draw$img_type$(x0);\n    const Mons$draw$small_HP = \"\\u{195}\\u{1a5}\";\n\n    function List$fold$(_list$2, _nil$4, _cons$5) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.nil':\n                var $943 = _nil$4;\n                var $942 = $943;\n                break;\n            case 'List.cons':\n                var $944 = self.head;\n                var $945 = self.tail;\n                var $946 = _cons$5($944)(List$fold$($945, _nil$4, _cons$5));\n                var $942 = $946;\n                break;\n        };\n        return $942;\n    };\n    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);\n\n    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {\n        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_base$1, _nat$2, _res$3]\n        });\n        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);\n        var arg = [_base$1, _nat$2, _res$3];\n        while (true) {\n            let [_base$1, _nat$2, _res$3] = arg;\n            var R = (() => {\n                var self = (({\n                    _: 'Pair.new',\n                    'fst': _nat$2 / _base$1,\n                    'snd': _nat$2 % _base$1\n                }));\n                switch (self._) {\n                    case 'Pair.new':\n                        var $947 = self.fst;\n                        var $948 = self.snd;\n                        var self = $947;\n                        if (self === 0n) {\n                            var $950 = List$cons$($948, _res$3);\n                            var $949 = $950;\n                        } else {\n                            var $951 = (self - 1n);\n                            var $952 = Nat$to_base$go$(_base$1, $947, List$cons$($948, _res$3));\n                            var $949 = $952;\n                        };\n                        return $949;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);\n\n    function Nat$to_base$(_base$1, _nat$2) {\n        var $953 = Nat$to_base$go$(_base$1, _nat$2, List$nil);\n        return $953;\n    };\n    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);\n    const Nat$gtn = a0 => a1 => (a0 > a1);\n    const Nat$lte = a0 => a1 => (a0 <= a1);\n\n    function Nat$show_digit$(_base$1, _n$2) {\n        var _m$3 = Nat$mod$(_n$2, _base$1);\n        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n        var self = ((_base$1 > 0n) && (_base$1 <= 64n));\n        if (self) {\n            var self = List$at$(_m$3, _base64$4);\n            switch (self._) {\n                case 'Maybe.none':\n                    var $956 = 35;\n                    var $955 = $956;\n                    break;\n                case 'Maybe.some':\n                    var $957 = self.value;\n                    var $958 = $957;\n                    var $955 = $958;\n                    break;\n            };\n            var $954 = $955;\n        } else {\n            var $959 = 35;\n            var $954 = $959;\n        };\n        return $954;\n    };\n    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);\n\n    function Nat$to_string_base$(_base$1, _nat$2) {\n        var $960 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {\n            var $961 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);\n            return $961;\n        }));\n        return $960;\n    };\n    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);\n\n    function U32$to_string$(_n$1) {\n        var $962 = Nat$to_string_base$(10n, U32$to_nat$(_n$1));\n        return $962;\n    };\n    const U32$to_string = x0 => U32$to_string$(x0);\n    const Bool$not = a0 => (!a0);\n\n    function Mons$Object$remaining_hp$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $964 = self.kin;\n                var $965 = self.dir;\n                var $966 = self.pad;\n                var $967 = self.ani;\n                var $968 = self.dmg;\n                var $969 = self.bag;\n                var $970 = self.mon;\n                var $971 = self.bos;\n                var $972 = self.cap;\n                var $973 = self.idl;\n                var $974 = self.eff;\n                var self = $964;\n                switch (self._) {\n                    case 'Mons.Kind.Mons':\n                        var $976 = self.ele;\n                        var $977 = self.boss;\n                        var $978 = self.pri_type;\n                        var $979 = self.agi;\n                        var self = Mons$Kind$attr$($964);\n                        switch (self._) {\n                            case 'Mons.Attr.new':\n                                var $981 = self.blocks;\n                                var $982 = self.mhp;\n                                var $983 = self.atk;\n                                var $984 = self.name;\n                                var $985 = self.wlk;\n                                var $986 = self.idl;\n                                var $987 = self.pic;\n                                var $988 = self.battle_spr;\n                                var $989 = self.skills;\n                                var $990 = self.pos;\n                                var $991 = (Math.max($982 - $968, 0));\n                                var $980 = $991;\n                                break;\n                        };\n                        var $975 = $980;\n                        break;\n                    case 'Mons.Kind.Const':\n                        var $992 = self.ele;\n                        var $993 = $968;\n                        var $975 = $993;\n                        break;\n                    case 'Mons.Kind.Terrain':\n                        var $994 = self.ele;\n                        var $995 = $968;\n                        var $975 = $995;\n                        break;\n                    case 'Mons.Kind.Interactive':\n                        var $996 = self.ele;\n                        var $997 = self.on;\n                        var $998 = self.eff;\n                        var $999 = $968;\n                        var $975 = $999;\n                        break;\n                };\n                var $963 = $975;\n                break;\n        };\n        return $963;\n    };\n    const Mons$Object$remaining_hp = x0 => Mons$Object$remaining_hp$(x0);\n\n    function Mons$Object$is_obj_defeated$(_obj$1) {\n        var $1000 = (Mons$Object$remaining_hp$(_obj$1) === 0);\n        return $1000;\n    };\n    const Mons$Object$is_obj_defeated = x0 => Mons$Object$is_obj_defeated$(x0);\n\n    function Mons$Object$is_battling$(_adve$1, _hero_or_mon$2) {\n        var _is_adve_alive$3 = (!Mons$Object$is_obj_defeated$(_adve$1));\n        var _is_hero_alive$4 = (!Mons$Object$is_obj_defeated$(_hero_or_mon$2));\n        var $1001 = (_is_adve_alive$3 && _is_hero_alive$4);\n        return $1001;\n    };\n    const Mons$Object$is_battling = x0 => x1 => Mons$Object$is_battling$(x0, x1);\n\n    function Mons$draw$background$(_idx$1) {\n        var self = (_idx$1 === 1);\n        if (self) {\n            var $1003 = Pair$new$(Image3D$empty, Image3D$empty);\n            var $1002 = $1003;\n        } else {\n            var self = (_idx$1 === 2);\n            if (self) {\n                var $1005 = Pair$new$(Image3D$empty, Image3D$empty);\n                var $1004 = $1005;\n            } else {\n                var $1006 = Pair$new$(Image3D$empty, Image3D$empty);\n                var $1004 = $1006;\n            };\n            var $1002 = $1004;\n        };\n        return $1002;\n    };\n    const Mons$draw$background = x0 => Mons$draw$background$(x0);\n\n    function Mons$draw$get_battle_bg$(_idx$1) {\n        var $1007 = Pair$fst$(Mons$draw$background$(_idx$1));\n        return $1007;\n    };\n    const Mons$draw$get_battle_bg = x0 => Mons$draw$get_battle_bg$(x0);\n\n    function Mons$draw$battle_bg$(_adve_kind$1, _is_boss$2, _idx$3, _scr$4) {\n        var _screen$battle_default$5 = Image3D$empty;\n        var _screen$battle_boss$6 = Image3D$empty;\n        var _scr$7 = Mons$draw$image$(Mons$draw$get_battle_bg$(_idx$3), ((0 | 120 | (80 << 12) | (0 << 24))), _scr$4);\n        var self = _is_boss$2;\n        if (self) {\n            var $1009 = Mons$draw$image$(_screen$battle_boss$6, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$7);\n            var _scr$8 = $1009;\n        } else {\n            var $1010 = Mons$draw$image$(_screen$battle_default$5, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$7);\n            var _scr$8 = $1010;\n        };\n        var $1008 = _scr$8;\n        return $1008;\n    };\n    const Mons$draw$battle_bg = x0 => x1 => x2 => x3 => Mons$draw$battle_bg$(x0, x1, x2, x3);\n\n    function Mons$draw$hero_hp$(_chp$1, _mhp$2, _name$3, _hero_hp$4, _scr$5) {\n        var _battle_hp$6 = Image3D$empty;\n        var _p_hp$7 = ((((_chp$1 * 70) >>> 0) / _mhp$2) >>> 0);\n        var _pos_chp$8 = ((0 | ((100 + _p_hp$7) >>> 0) | (82 << 12) | (0 << 24)));\n        var _pos_name$9 = ((0 | 139 | (82 << 12) | (0 << 24)));\n        var _scr$10 = Mons$draw$image$(_battle_hp$6, _pos_chp$8, _scr$5);\n        var _scr$11 = Mons$draw$text$(_name$3, Mons$Char_white$font, _pos_name$9, _scr$10);\n        var _scr$12 = Mons$draw$text$(_hero_hp$4, Mons$Char_black$font, ((0 | 139 | (97 << 12) | (0 << 24))), _scr$11);\n        var $1011 = _scr$12;\n        return $1011;\n    };\n    const Mons$draw$hero_hp = x0 => x1 => x2 => x3 => x4 => Mons$draw$hero_hp$(x0, x1, x2, x3, x4);\n\n    function Mons$draw$adve_hp$(_chp$1, _mhp$2, _name$3, _adve_hp$4, _scr$5) {\n        var _battle_hp$6 = Image3D$empty;\n        var _p_hp$7 = ((((_chp$1 * 70) >>> 0) / _mhp$2) >>> 0);\n        var _pos_chp$8 = ((0 | _p_hp$7 | (21 << 12) | (0 << 24)));\n        var _pos_name$9 = ((0 | 38 | (21 << 12) | (0 << 24)));\n        var _scr$10 = Mons$draw$image$(_battle_hp$6, _pos_chp$8, _scr$5);\n        var _scr$11 = Mons$draw$text$(_name$3, Mons$Char_white$font, _pos_name$9, _scr$10);\n        var _scr$12 = Mons$draw$text$(_adve_hp$4, Mons$Char_black$font, ((0 | 38 | (36 << 12) | (0 << 24))), _scr$11);\n        var $1012 = _scr$12;\n        return $1012;\n    };\n    const Mons$draw$adve_hp = x0 => x1 => x2 => x3 => x4 => Mons$draw$adve_hp$(x0, x1, x2, x3, x4);\n\n    function Mons$draw$effect$(_eff$1, _pos$2, _scr$3) {\n        var $1013 = _scr$3;\n        return $1013;\n    };\n    const Mons$draw$effect = x0 => x1 => x2 => Mons$draw$effect$(x0, x1, x2);\n\n    function Mons$draw$effects$(_hero_eff$1, _adve_eff$2, _scr$3) {\n        var _scr$4 = Mons$draw$effect$(_hero_eff$1, ((0 | 140 | (105 << 12) | (0 << 24))), _scr$3);\n        var _scr$5 = Mons$draw$effect$(_adve_eff$2, ((0 | 38 | (45 << 12) | (0 << 24))), _scr$4);\n        var $1014 = _scr$5;\n        return $1014;\n    };\n    const Mons$draw$effects = x0 => x1 => x2 => Mons$draw$effects$(x0, x1, x2);\n\n    function Cmp$as_gtn$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $1016 = Bool$false;\n                var $1015 = $1016;\n                break;\n            case 'Cmp.eql':\n                var $1017 = Bool$false;\n                var $1015 = $1017;\n                break;\n            case 'Cmp.gtn':\n                var $1018 = Bool$true;\n                var $1015 = $1018;\n                break;\n        };\n        return $1015;\n    };\n    const Cmp$as_gtn = x0 => Cmp$as_gtn$(x0);\n\n    function Word$gtn$(_a$2, _b$3) {\n        var $1019 = Cmp$as_gtn$(Word$cmp$(_a$2, _b$3));\n        return $1019;\n    };\n    const Word$gtn = x0 => x1 => Word$gtn$(x0, x1);\n    const U32$gtn = a0 => a1 => (a0 > a1);\n\n    function Mons$Turn$is_active$(_turn$1) {\n        var self = _turn$1;\n        switch (self._) {\n            case 'Mons.Turn.new':\n                var $1021 = self.exec_hero;\n                var $1022 = self.hero_skill;\n                var $1023 = self.adve_skill;\n                var $1024 = self.play;\n                var $1025 = ($1024 > 0);\n                var $1020 = $1025;\n                break;\n        };\n        return $1020;\n    };\n    const Mons$Turn$is_active = x0 => Mons$Turn$is_active$(x0);\n\n    function Mons$Turn$hero_turn$(_turn$1) {\n        var self = _turn$1;\n        switch (self._) {\n            case 'Mons.Turn.new':\n                var $1027 = self.exec_hero;\n                var $1028 = self.hero_skill;\n                var $1029 = self.adve_skill;\n                var $1030 = self.play;\n                var $1031 = $1027;\n                var $1026 = $1031;\n                break;\n        };\n        return $1026;\n    };\n    const Mons$Turn$hero_turn = x0 => Mons$Turn$hero_turn$(x0);\n\n    function Mons$Skill$get_name$(_skill$1) {\n        var self = _skill$1;\n        switch (self._) {\n            case 'Mons.Skill.hit_4':\n                var $1033 = \"hit 4\";\n                var $1032 = $1033;\n                break;\n            case 'Mons.Skill.hit_2':\n                var $1034 = \"hit 2\";\n                var $1032 = $1034;\n                break;\n            case 'Mons.Skill.heal':\n                var $1035 = \"heal\";\n                var $1032 = $1035;\n                break;\n            case 'Mons.Skill.none':\n                var $1036 = \"none\";\n                var $1032 = $1036;\n                break;\n            case 'Mons.Skill.run':\n                var $1037 = \"Run\";\n                var $1032 = $1037;\n                break;\n            case 'Mons.Skill.dig':\n                var $1038 = \"Dig\";\n                var $1032 = $1038;\n                break;\n            case 'Mons.Skill.sand_tomb':\n                var $1039 = \"Sand bomb\";\n                var $1032 = $1039;\n                break;\n            case 'Mons.Skill.protect':\n                var $1040 = \"Protect\";\n                var $1032 = $1040;\n                break;\n            case 'Mons.Skill.slam':\n                var $1041 = \"Slam\";\n                var $1032 = $1041;\n                break;\n            case 'Mons.Skill.counter':\n                var $1042 = \"Counter\";\n                var $1032 = $1042;\n                break;\n            case 'Mons.Skill.recover':\n                var $1043 = \"Recover\";\n                var $1032 = $1043;\n                break;\n            case 'Mons.Skill.rock_smash':\n                var $1044 = \"Rock Smash\";\n                var $1032 = $1044;\n                break;\n            case 'Mons.Skill.crunch':\n                var $1045 = \"Crunch\";\n                var $1032 = $1045;\n                break;\n            case 'Mons.Skill.sludge_bomb':\n                var $1046 = \"Sludge bomb\";\n                var $1032 = $1046;\n                break;\n            case 'Mons.Skill.gyro_ball':\n                var $1047 = \"Gyro Ball\";\n                var $1032 = $1047;\n                break;\n            case 'Mons.Skill.iron_defense':\n                var $1048 = \"Iron Defense\";\n                var $1032 = $1048;\n                break;\n            case 'Mons.Skill.super_fang':\n                var $1049 = \"Super Fang\";\n                var $1032 = $1049;\n                break;\n            case 'Mons.Skill.hypnosis':\n                var $1050 = \"Hypnosis\";\n                var $1032 = $1050;\n                break;\n            case 'Mons.Skill.dream_eater':\n                var $1051 = \"Dream Eater\";\n                var $1032 = $1051;\n                break;\n            case 'Mons.Skill.wing_attack':\n                var $1052 = \"Wing Attack\";\n                var $1032 = $1052;\n                break;\n            case 'Mons.Skill.moonlight':\n                var $1053 = \"Moonlight\";\n                var $1032 = $1053;\n                break;\n            case 'Mons.Skill.play_rough':\n                var $1054 = \"Play Rough\";\n                var $1032 = $1054;\n                break;\n            case 'Mons.Skill.psychic':\n                var $1055 = \"Psychic\";\n                var $1032 = $1055;\n                break;\n            case 'Mons.Skill.ancient_power':\n                var $1056 = \"Ancient Power\";\n                var $1032 = $1056;\n                break;\n            case 'Mons.Skill.thunder_wave':\n                var $1057 = \"Thunder Wave\";\n                var $1032 = $1057;\n                break;\n            case 'Mons.Skill.charge':\n                var $1058 = \"Charge\";\n                var $1032 = $1058;\n                break;\n            case 'Mons.Skill.agility':\n                var $1059 = \"Agility\";\n                var $1032 = $1059;\n                break;\n            case 'Mons.Skill.hero_kill':\n                var $1060 = \"ONE PUNCH\";\n                var $1032 = $1060;\n                break;\n            case 'Mons.Skill.nightmare':\n                var $1061 = \"Nightmare\";\n                var $1032 = $1061;\n                break;\n        };\n        return $1032;\n    };\n    const Mons$Skill$get_name = x0 => Mons$Skill$get_name$(x0);\n\n    function Mons$Skill$short_description$(_skill$1) {\n        var self = _skill$1;\n        switch (self._) {\n            case 'Mons.Skill.hit_4':\n                var $1063 = \"damage 4\";\n                var $1062 = $1063;\n                break;\n            case 'Mons.Skill.hit_2':\n                var $1064 = \"damage 2\";\n                var $1062 = $1064;\n                break;\n            case 'Mons.Skill.heal':\n                var $1065 = \"heal 3\";\n                var $1062 = $1065;\n                break;\n            case 'Mons.Skill.none':\n                var $1066 = \"does nothing\";\n                var $1062 = $1066;\n                break;\n            case 'Mons.Skill.run':\n                var $1067 = \"Run from battle\";\n                var $1062 = $1067;\n                break;\n            case 'Mons.Skill.dig':\n                var $1068 = \"Add hit next turn, add invul\";\n                var $1062 = $1068;\n                break;\n            case 'Mons.Skill.sand_tomb':\n                var $1069 = \"Dmg this turn + burn(5)\";\n                var $1062 = $1069;\n                break;\n            case 'Mons.Skill.protect':\n                var $1070 = \"-50% dmg next turn\";\n                var $1062 = $1070;\n                break;\n            case 'Mons.Skill.slam':\n                var $1071 = \"Hit 6hp\";\n                var $1062 = $1071;\n                break;\n            case 'Mons.Skill.counter':\n                var $1072 = \"Burn for 5 turns and heal 3hp\";\n                var $1062 = $1072;\n                break;\n            case 'Mons.Skill.recover':\n                var $1073 = \"Restore 25% hp, add poison\";\n                var $1062 = $1073;\n                break;\n            case 'Mons.Skill.rock_smash':\n                var $1074 = \"Hit 2hp + 50% of critical\";\n                var $1062 = $1074;\n                break;\n            case 'Mons.Skill.crunch':\n                var $1075 = \"Hit 4hp + 25% of critical\";\n                var $1062 = $1075;\n                break;\n            case 'Mons.Skill.sludge_bomb':\n                var $1076 = \"Hit 2hp + 30% of poisoning\";\n                var $1062 = $1076;\n                break;\n            case 'Mons.Skill.gyro_ball':\n                var $1077 = \"Hit 4. If more agility + 50% dmg\";\n                var $1062 = $1077;\n                break;\n            case 'Mons.Skill.iron_defense':\n                var $1078 = \"-25% dmg for this and next turn\";\n                var $1062 = $1078;\n                break;\n            case 'Mons.Skill.super_fang':\n                var $1079 = \"Hit 50% hp + loses 25% of hp\";\n                var $1062 = $1079;\n                break;\n            case 'Mons.Skill.hypnosis':\n                var $1080 = \"50% of sleep if can\";\n                var $1062 = $1080;\n                break;\n            case 'Mons.Skill.dream_eater':\n                var $1081 = \"If sleep, hit 6 and heal 4\";\n                var $1062 = $1081;\n                break;\n            case 'Mons.Skill.wing_attack':\n                var $1082 = \"Hit 6hp\";\n                var $1062 = $1082;\n                break;\n            case 'Mons.Skill.moonlight':\n                var $1083 = \"Hit 4 + 20% of sleep\";\n                var $1062 = $1083;\n                break;\n            case 'Mons.Skill.play_rough':\n                var $1084 = \"Hit 4 + 20% of critical\";\n                var $1062 = $1084;\n                break;\n            case 'Mons.Skill.psychic':\n                var $1085 = \"Hit 2hp + 10% sleep and hit\";\n                var $1062 = $1085;\n                break;\n            case 'Mons.Skill.ancient_power':\n                var $1086 = \"Hit 4hp + 10% adve miss the attack\";\n                var $1062 = $1086;\n                break;\n            case 'Mons.Skill.thunder_wave':\n                var $1087 = \"Hit 6\";\n                var $1062 = $1087;\n                break;\n            case 'Mons.Skill.charge':\n                var $1088 = \"Hit4, if adve has minimize, hit8\";\n                var $1062 = $1088;\n                break;\n            case 'Mons.Skill.agility':\n                var $1089 = \"Invert Mon\\'s agitity value\";\n                var $1062 = $1089;\n                break;\n            case 'Mons.Skill.hero_kill':\n                var $1090 = \"Herro atk\";\n                var $1062 = $1090;\n                break;\n            case 'Mons.Skill.nightmare':\n                var $1091 = \"If sleep damage hit 20% hp\";\n                var $1062 = $1091;\n                break;\n        };\n        return $1062;\n    };\n    const Mons$Skill$short_description = x0 => Mons$Skill$short_description$(x0);\n\n    function Mons$draw$turn$(_name$1, _skill$2, _scr$3) {\n        var _msg$4 = String$flatten$(List$cons$(_name$1, List$cons$(\" used \", List$cons$(Mons$Skill$get_name$(_skill$2), List$cons$(\".\", List$nil)))));\n        var _scr$5 = Mons$draw$text$(_msg$4, Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$3);\n        var _desc$6 = Mons$Skill$short_description$(_skill$2);\n        var $1092 = Mons$draw$text$(String$flatten$(List$cons$(_desc$6, List$cons$(\"  [c]\", List$nil))), Mons$Char_black$font, Mons$draw$msg_screen$line_1, _scr$5);\n        return $1092;\n    };\n    const Mons$draw$turn = x0 => x1 => x2 => Mons$draw$turn$(x0, x1, x2);\n\n    function Mons$Kind$get_skills$(_kind$1) {\n        var self = Mons$Kind$attr$(_kind$1);\n        switch (self._) {\n            case 'Mons.Attr.new':\n                var $1094 = self.blocks;\n                var $1095 = self.mhp;\n                var $1096 = self.atk;\n                var $1097 = self.name;\n                var $1098 = self.wlk;\n                var $1099 = self.idl;\n                var $1100 = self.pic;\n                var $1101 = self.battle_spr;\n                var $1102 = self.skills;\n                var $1103 = self.pos;\n                var $1104 = $1102;\n                var $1093 = $1104;\n                break;\n        };\n        return $1093;\n    };\n    const Mons$Kind$get_skills = x0 => Mons$Kind$get_skills$(x0);\n    const Mons$Skill$none = ({\n        _: 'Mons.Skill.none'\n    });\n\n    function Mons$Game$get_skills_at$(_idx$1, _obj$2) {\n        var self = _obj$2;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1106 = self.kin;\n                var $1107 = self.dir;\n                var $1108 = self.pad;\n                var $1109 = self.ani;\n                var $1110 = self.dmg;\n                var $1111 = self.bag;\n                var $1112 = self.mon;\n                var $1113 = self.bos;\n                var $1114 = self.cap;\n                var $1115 = self.idl;\n                var $1116 = self.eff;\n                var _skills$14 = Mons$Kind$get_skills$($1106);\n                var self = List$at$(_idx$1, _skills$14);\n                switch (self._) {\n                    case 'Maybe.none':\n                        var $1118 = Mons$Skill$none;\n                        var $1117 = $1118;\n                        break;\n                    case 'Maybe.some':\n                        var $1119 = self.value;\n                        var $1120 = $1119;\n                        var $1117 = $1120;\n                        break;\n                };\n                var $1105 = $1117;\n                break;\n        };\n        return $1105;\n    };\n    const Mons$Game$get_skills_at = x0 => x1 => Mons$Game$get_skills_at$(x0, x1);\n\n    function Mons$draw$battle_skills$(_hero_obj$1, _scr$2) {\n        var _u$3 = Mons$Skill$get_name$(Mons$Game$get_skills_at$(0n, _hero_obj$1));\n        var _i$4 = Mons$Skill$get_name$(Mons$Game$get_skills_at$(1n, _hero_obj$1));\n        var _j$5 = Mons$Skill$get_name$(Mons$Game$get_skills_at$(2n, _hero_obj$1));\n        var _k$6 = Mons$Skill$get_name$(Mons$Game$get_skills_at$(3n, _hero_obj$1));\n        var _scr$7 = Mons$draw$text$(String$flatten$(List$cons$(\"[u] \", List$cons$(_u$3, List$cons$(\"   [i] \", List$cons$(_i$4, List$nil))))), Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$2);\n        var $1121 = Mons$draw$text$(String$flatten$(List$cons$(\"[j] \", List$cons$(_j$5, List$cons$(\"   [k] \", List$cons$(_k$6, List$nil))))), Mons$Char_black$font, Mons$draw$msg_screen$line_1, _scr$7);\n        return $1121;\n    };\n    const Mons$draw$battle_skills = x0 => x1 => Mons$draw$battle_skills$(x0, x1);\n\n    function Mons$draw$get_full_bg$(_idx$1) {\n        var $1122 = Pair$snd$(Mons$draw$background$(_idx$1));\n        return $1122;\n    };\n    const Mons$draw$get_full_bg = x0 => Mons$draw$get_full_bg$(x0);\n\n    function Mons$draw$capture_bg$(_adve_kind$1, _idx$2, _scr$3) {\n        var _scr$4 = Mons$draw$image$(Mons$draw$get_full_bg$(_idx$2), ((0 | 120 | (80 << 12) | (0 << 24))), _scr$3);\n        var _sct$5 = Mons$draw$image$(Mons$draw$text_screen_bg, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$4);\n        var $1123 = _scr$4;\n        return $1123;\n    };\n    const Mons$draw$capture_bg = x0 => x1 => x2 => Mons$draw$capture_bg$(x0, x1, x2);\n\n    function Mons$draw$battle_win_bg$(_adve_kind$1, _idx$2, _scr$3) {\n        var _battle_win$4 = Image3D$empty;\n        var _scr$5 = Mons$draw$image$(Mons$draw$get_full_bg$(_idx$2), ((0 | 120 | (80 << 12) | (0 << 24))), _scr$3);\n        var _scr$6 = Mons$draw$image$(_battle_win$4, ((0 | 70 | (90 << 12) | (0 << 24))), _scr$5);\n        var _scr$7 = Mons$draw$image$(Mons$draw$text_screen_bg, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$6);\n        var $1124 = _scr$7;\n        return $1124;\n    };\n    const Mons$draw$battle_win_bg = x0 => x1 => x2 => Mons$draw$battle_win_bg$(x0, x1, x2);\n\n    function Mons$Kind$is_portal$(_adve_kin$1) {\n        var self = _adve_kin$1;\n        switch (self._) {\n            case 'Mons.Kind.Mons':\n                var $1126 = self.ele;\n                var $1127 = self.boss;\n                var $1128 = self.pri_type;\n                var $1129 = self.agi;\n                var $1130 = Bool$false;\n                var $1125 = $1130;\n                break;\n            case 'Mons.Kind.Const':\n                var $1131 = self.ele;\n                var self = $1131;\n                switch (self._) {\n                    case 'Mons.Kind.const.FOUNTAIN':\n                        var $1133 = self.model;\n                        var $1134 = self.slice;\n                        var $1135 = Bool$false;\n                        var $1132 = $1135;\n                        break;\n                    case 'Mons.Kind.const.CHEST':\n                        var $1136 = Bool$false;\n                        var $1132 = $1136;\n                        break;\n                    case 'Mons.Kind.const.CRYSTAL':\n                        var $1137 = Bool$false;\n                        var $1132 = $1137;\n                        break;\n                    case 'Mons.Kind.const.PORTAL':\n                        var $1138 = Bool$true;\n                        var $1132 = $1138;\n                        break;\n                };\n                var $1125 = $1132;\n                break;\n            case 'Mons.Kind.Terrain':\n                var $1139 = self.ele;\n                var $1140 = Bool$false;\n                var $1125 = $1140;\n                break;\n            case 'Mons.Kind.Interactive':\n                var $1141 = self.ele;\n                var $1142 = self.on;\n                var $1143 = self.eff;\n                var $1144 = Bool$false;\n                var $1125 = $1144;\n                break;\n        };\n        return $1125;\n    };\n    const Mons$Kind$is_portal = x0 => Mons$Kind$is_portal$(x0);\n    const Bool$or = a0 => a1 => (a0 || a1);\n\n    function Mons$Game$defeated_lvl_mons$(_qtd_defeated$1, _dim$2) {\n        var self = (_dim$2 === 0);\n        if (self) {\n            var $1146 = Bool$true;\n            var $1145 = $1146;\n        } else {\n            var self = (_dim$2 === 1);\n            if (self) {\n                var $1148 = Bool$true;\n                var $1147 = $1148;\n            } else {\n                var $1149 = Bool$false;\n                var $1147 = $1149;\n            };\n            var $1145 = $1147;\n        };\n        return $1145;\n    };\n    const Mons$Game$defeated_lvl_mons = x0 => x1 => Mons$Game$defeated_lvl_mons$(x0, x1);\n    const Mons$Assets$void = Image3D$parse$(\"7878021012167978021012167a78021012167b78021012167c78021012167d78021012167e78021012167f78021012168078021012168178021012168278021012168378021012168478021012168578021012168678021012168778021012167879021012167979021012167a79021012167b79021012167c79021012167d79021012167e79021012167f7902101216807902101216817902101216827902101216837902101216847902101216857902101216867902101216877902101216787a02101216797a021012167a7a021012167b7a021012167c7a021012167d7a021012167e7a021012167f7a02101216807a02101216817a02101216827a02101216837a02101216847a02101216857a02101216867a02101216877a02101216787b02101216797b021012167a7b021012167b7b021012167c7b021012167d7b021012167e7b021012167f7b02101216807b02101216817b02101216827b02101216837b02101216847b02101216857b02101216867b02101216877b02101216787c02101216797c021012167a7c021012167b7c021012167c7c021012167d7c021012167e7c021012167f7c02101216807c02101216817c02101216827c02101216837c02101216847c02101216857c02101216867c02101216877c02101216787d02101216797d021012167a7d021012167b7d021012167c7d021012167d7d021012167e7d021012167f7d02101216807d02101216817d02101216827d02101216837d02101216847d02101216857d02101216867d02101216877d02101216787e02101216797e021012167a7e021012167b7e021012167c7e021012167d7e021012167e7e021012167f7e02101216807e02101216817e02101216827e02101216837e02101216847e02101216857e02101216867e02101216877e02101216787f02101216797f021012167a7f021012167b7f021012167c7f021012167d7f021012167e7f021012167f7f02101216807f02101216817f02101216827f02101216837f02101216847f02101216857f02101216867f02101216877f021012167880021012167980021012167a80021012167b80021012167c80021012167d80021012167e80021012167f80021012168080021012168180021012168280021012168380021012168480021012168580021012168680021012168780021012167881021012167981021012167a81021012167b81021012167c81021012167d81021012167e81021012167f81021012168081021012168181021012168281021012168381021012168481021012168581021012168681021012168781021012167882021012167982021012167a82021012167b82021012167c82021012167d82021012167e82021012167f82021012168082021012168182021012168282021012168382021012168482021012168582021012168682021012168782021012167883021012167983021012167a83021012167b83021012167c83021012167d83021012167e83021012167f83021012168083021012168183021012168283021012168383021012168483021012168583021012168683021012168783021012167884021012167984021012167a84021012167b84021012167c84021012167d84021012167e84021012167f84021012168084021012168184021012168284021012168384021012168484021012168584021012168684021012168784021012167885021012167985021012167a85021012167b85021012167c85021012167d85021012167e85021012167f85021012168085021012168185021012168285021012168385021012168485021012168585021012168685021012168785021012167886021012167986021012167a86021012167b86021012167c86021012167d86021012167e86021012167f86021012168086021012168186021012168286021012168386021012168486021012168586021012168686021012168786021012167887021012167987021012167a87021012167b87021012167c87021012167d87021012167e87021012167f8702101216808702101216818702101216828702101216838702101216848702101216858702101216868702101216878702101216\");\n\n    function Mons$Object$qtd_mons_defeated$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1151 = self.kin;\n                var $1152 = self.dir;\n                var $1153 = self.pad;\n                var $1154 = self.ani;\n                var $1155 = self.dmg;\n                var $1156 = self.bag;\n                var $1157 = self.mon;\n                var $1158 = self.bos;\n                var $1159 = self.cap;\n                var $1160 = self.idl;\n                var $1161 = self.eff;\n                var $1162 = (Number((list_length(Pair$snd$($1159)))));\n                var $1150 = $1162;\n                break;\n        };\n        return $1150;\n    };\n    const Mons$Object$qtd_mons_defeated = x0 => Mons$Object$qtd_mons_defeated$(x0);\n\n    function Mons$draw$bag_select$(_mon_idx$1, _qtd$2, _scr$3) {\n        var _def_y$4 = 42;\n        var self = (_mon_idx$1 === 0);\n        if (self) {\n            var $1164 = ((0 | 160 | (_def_y$4 << 12) | (0 << 24)));\n            var _pos$5 = $1164;\n        } else {\n            var $1165 = ((0 | 160 | (((_def_y$4 + ((16 * _mon_idx$1) >>> 0)) >>> 0) << 12) | (0 << 24)));\n            var _pos$5 = $1165;\n        };\n        var self = (_qtd$2 === 0);\n        if (self) {\n            var $1166 = _scr$3;\n            var $1163 = $1166;\n        } else {\n            var _inventory_row_mon_selected$6 = Image3D$empty;\n            var $1167 = Mons$draw$image$(_inventory_row_mon_selected$6, _pos$5, _scr$3);\n            var $1163 = $1167;\n        };\n        return $1163;\n    };\n    const Mons$draw$bag_select = x0 => x1 => x2 => Mons$draw$bag_select$(x0, x1, x2);\n\n    function Mons$draw$bag$(_obj$1, _idx$2, _scr$3) {\n        var _inventory$4 = Mons$Assets$void;\n        var _scr$5 = Mons$draw$image$(_inventory$4, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$3);\n        var _scr$6 = Mons$draw$image$(Mons$draw$get_full_bg$(_idx$2), ((0 | 120 | (80 << 12) | (0 << 24))), _scr$5);\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1169 = self.kin;\n                var $1170 = self.dir;\n                var $1171 = self.pad;\n                var $1172 = self.ani;\n                var $1173 = self.dmg;\n                var $1174 = self.bag;\n                var $1175 = self.mon;\n                var $1176 = self.bos;\n                var $1177 = self.cap;\n                var $1178 = self.idl;\n                var $1179 = self.eff;\n                var _boss_def$18 = U32$to_string$((Number((list_length($1176)))));\n                var _qtd$19 = (Number((list_length($1174))));\n                var self = (_qtd$19 === 0);\n                if (self) {\n                    var $1181 = \"Nothing to show for now\";\n                    var _qtd_field$20 = $1181;\n                } else {\n                    var _qtd_mons_game$20 = U32$to_string$(Pair$fst$($1177));\n                    var _qtd_defeated$21 = U32$to_string$(Mons$Object$qtd_mons_defeated$(_obj$1));\n                    var $1182 = String$flatten$(List$cons$(\"Captured: \", List$cons$(_qtd_defeated$21, List$cons$(\"/\", List$cons$(_qtd_mons_game$20, List$nil)))));\n                    var _qtd_field$20 = $1182;\n                };\n                var _scr$21 = Mons$draw$text$(_qtd_field$20, Mons$Char_black$font, ((0 | 95 | (25 << 12) | (0 << 24))), _scr$6);\n                var _scr$22 = Mons$draw$bag_select$($1175, _qtd$19, _scr$21);\n                var _scr$23 = Mons$draw$mon_img_selected$($1175, _qtd$19, Bool$false, 34, ((0 | 40 | (50 << 12) | (0 << 24))), _scr$22);\n                var _mons_names$24 = List$reverse$(Mons$Object$get_names$($1174));\n                var _mons_images$25 = List$reverse$(Mons$Object$get_images$($1174));\n                var _scr$26 = Mons$draw$list_image$(_mons_images$25, Bool$false, 34, ((0 | 40 | (50 << 12) | (0 << 24))), _scr$23);\n                var _scr$27 = Mons$draw$list$(_mons_names$24, Bool$false, 14, Mons$Char_black$font, ((0 | 95 | (29 << 12) | (0 << 24))), _scr$26);\n                var $1180 = _scr$27;\n                var $1168 = $1180;\n                break;\n        };\n        return $1168;\n    };\n    const Mons$draw$bag = x0 => x1 => x2 => Mons$draw$bag$(x0, x1, x2);\n\n    function Mons$draw$full_bag$(_obj$1, _adve_obj$2, _idx$3, _scr$4) {\n        var _inventory_mon_selection$5 = Image3D$empty;\n        var _inventory_replace$6 = Image3D$empty;\n        var _scr$7 = Mons$draw$image$(Mons$draw$get_full_bg$(_idx$3), ((0 | 120 | (80 << 12) | (0 << 24))), _scr$4);\n        var _scr$8 = Mons$draw$image$(Mons$draw$text_screen_bg, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$7);\n        var _scr$9 = Mons$draw$image$(_inventory_replace$6, ((0 | 65 | (60 << 12) | (0 << 24))), _scr$8);\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1184 = self.kin;\n                var $1185 = self.dir;\n                var $1186 = self.pad;\n                var $1187 = self.ani;\n                var $1188 = self.dmg;\n                var $1189 = self.bag;\n                var $1190 = self.mon;\n                var $1191 = self.bos;\n                var $1192 = self.cap;\n                var $1193 = self.idl;\n                var $1194 = self.eff;\n                var self = _adve_obj$2;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $1196 = self.kin;\n                        var $1197 = self.dir;\n                        var $1198 = self.pad;\n                        var $1199 = self.ani;\n                        var $1200 = self.dmg;\n                        var $1201 = self.bag;\n                        var $1202 = self.mon;\n                        var $1203 = self.bos;\n                        var $1204 = self.cap;\n                        var $1205 = self.idl;\n                        var $1206 = self.eff;\n                        var self = Mons$Kind$attr$($1196);\n                        switch (self._) {\n                            case 'Mons.Attr.new':\n                                var $1208 = self.blocks;\n                                var $1209 = self.mhp;\n                                var $1210 = self.atk;\n                                var $1211 = self.name;\n                                var $1212 = self.wlk;\n                                var $1213 = self.idl;\n                                var $1214 = self.pic;\n                                var $1215 = self.battle_spr;\n                                var $1216 = self.skills;\n                                var $1217 = self.pos;\n                                var _scr$42 = Mons$draw$image$($1215(Bool$false), ((0 | 180 | (40 << 12) | (0 << 24))), _scr$9);\n                                var _scr$43 = Mons$draw$image$($1214, ((0 | 180 | (90 << 12) | (0 << 24))), _scr$42);\n                                var _scr$44 = Mons$draw$image$(_inventory_mon_selection$5, ((0 | 180 | (90 << 12) | (0 << 24))), _scr$43);\n                                var _qtd$45 = (Number((list_length($1189))));\n                                var _mons_images$46 = List$reverse$(Mons$Object$get_images$($1189));\n                                var _scr$47 = Mons$draw$list_image$(_mons_images$46, Bool$true, 35, ((0 | 30 | (90 << 12) | (0 << 24))), _scr$44);\n                                var _scr$48 = Mons$draw$mon_img_selected$($1190, _qtd$45, Bool$true, 35, ((0 | 30 | (90 << 12) | (0 << 24))), _scr$47);\n                                var _scr$49 = Mons$draw$text$(\"Select a mon to replace or skip\", Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$48);\n                                var _scr$50 = Mons$draw$text$(\"[c] Replace  | [z] Skip     \", Mons$Char_black$font, Mons$draw$msg_screen$line_1, _scr$49);\n                                var $1218 = _scr$50;\n                                var $1207 = $1218;\n                                break;\n                        };\n                        var $1195 = $1207;\n                        break;\n                };\n                var $1183 = $1195;\n                break;\n        };\n        return $1183;\n    };\n    const Mons$draw$full_bag = x0 => x1 => x2 => x3 => Mons$draw$full_bag$(x0, x1, x2, x3);\n\n    function Mons$draw$(_game$1, _scr$2) {\n        var self = _game$1;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1220 = self.usr;\n                var $1221 = self.pos;\n                var $1222 = self.map;\n                var $1223 = self.stt;\n                var $1224 = self.tik;\n                var _hero_pos$8 = Mons$Game$get_hero_pos$(_game$1);\n                var _scr$9 = Image3D$clear$(_scr$2);\n                var self = _hero_pos$8;\n                switch (self._) {\n                    case 'Maybe.none':\n                        var $1226 = _scr$9;\n                        var $1225 = $1226;\n                        break;\n                    case 'Maybe.some':\n                        var $1227 = self.value;\n                        var _hero_pair$11 = Mons$Map$get_hero$($1227, $1222);\n                        var _hero_obj$12 = Pair$fst$(_hero_pair$11);\n                        var _hero_idx$13 = Pair$snd$(_hero_pair$11);\n                        var _adve_obj$14 = Mons$Map$get$($1227, ((_hero_idx$13 + 1) >>> 0), $1222);\n                        var _dim$15 = Mons$Game$dim$(_game$1);\n                        var self = _hero_obj$12;\n                        switch (self._) {\n                            case 'Mons.Object.new':\n                                var $1229 = self.kin;\n                                var $1230 = self.dir;\n                                var $1231 = self.pad;\n                                var $1232 = self.ani;\n                                var $1233 = self.dmg;\n                                var $1234 = self.bag;\n                                var $1235 = self.mon;\n                                var $1236 = self.bos;\n                                var $1237 = self.cap;\n                                var $1238 = self.idl;\n                                var $1239 = self.eff;\n                                var self = _adve_obj$14;\n                                switch (self._) {\n                                    case 'Mons.Object.new':\n                                        var $1241 = self.kin;\n                                        var $1242 = self.dir;\n                                        var $1243 = self.pad;\n                                        var $1244 = self.ani;\n                                        var $1245 = self.dmg;\n                                        var $1246 = self.bag;\n                                        var $1247 = self.mon;\n                                        var $1248 = self.bos;\n                                        var $1249 = self.cap;\n                                        var $1250 = self.idl;\n                                        var $1251 = self.eff;\n                                        var _hero_mon_obj$38 = Mons$Object$get_current_mon$(_hero_obj$12);\n                                        var self = _hero_mon_obj$38;\n                                        switch (self._) {\n                                            case 'Mons.Object.new':\n                                                var $1253 = self.kin;\n                                                var $1254 = self.dir;\n                                                var $1255 = self.pad;\n                                                var $1256 = self.ani;\n                                                var $1257 = self.dmg;\n                                                var $1258 = self.bag;\n                                                var $1259 = self.mon;\n                                                var $1260 = self.bos;\n                                                var $1261 = self.cap;\n                                                var $1262 = self.idl;\n                                                var $1263 = self.eff;\n                                                var self = Mons$Kind$attr$($1241);\n                                                switch (self._) {\n                                                    case 'Mons.Attr.new':\n                                                        var $1265 = self.blocks;\n                                                        var $1266 = self.mhp;\n                                                        var $1267 = self.atk;\n                                                        var $1268 = self.name;\n                                                        var $1269 = self.wlk;\n                                                        var $1270 = self.idl;\n                                                        var $1271 = self.pic;\n                                                        var $1272 = self.battle_spr;\n                                                        var $1273 = self.skills;\n                                                        var $1274 = self.pos;\n                                                        var _is_standing$60 = Mons$Object$is_standing$(_hero_obj$12);\n                                                        var self = $1223;\n                                                        switch (self._) {\n                                                            case 'Mons.Screen.welcome':\n                                                                var $1276 = self.idx;\n                                                                var _logo$62 = Mons$Char_black$103;\n                                                                var _scr$63 = Mons$draw$image$(_logo$62, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$9);\n                                                                var _scr$64 = Mons$draw$list$(List$cons$(\"Play\", List$cons$(\"Credits\", List$nil)), Bool$false, 25, Mons$Char_black$font, ((0 | 40 | (50 << 12) | (0 << 24))), _scr$63);\n                                                                var _scr$65 = Mons$draw$list_selector$($1276, Bool$false, 25, Mons$Char_black$font, ((0 | 30 | (50 << 12) | (0 << 24))), _scr$64);\n                                                                var _scr$66 = Mons$draw$text$(\"[c] Select\", Mons$Char_black$font, ((0 | 40 | (128 << 12) | (0 << 24))), _scr$65);\n                                                                var $1277 = _scr$66;\n                                                                var $1275 = $1277;\n                                                                break;\n                                                            case 'Mons.Screen.credits':\n                                                                var _battle_normal_bg_full$61 = Image3D$empty;\n                                                                var _scr$62 = Mons$draw$image$(_battle_normal_bg_full$61, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$9);\n                                                                var _artists0$63 = List$cons$(\"Alexandre Avila\", List$cons$(\"Caio Carvalho\", List$cons$(\"Johnny Azevedo\", List$cons$(\"Lucca Tuelher\", List$cons$(\"Maisa Milena\", List$cons$(\"Marcio Maia\", List$cons$(\"Marcos Medeiros\", List$nil)))))));\n                                                                var _artists1$64 = List$cons$(\"Marcos Motta\", List$cons$(\"Nathan Danjo\", List$cons$(\"Paulo Reis\", List$cons$(\"Pedro Taka\", List$cons$(\"Rodrigo Rodrigues\", List$cons$(\"Victor Maia\", List$cons$(\"Yuri Carvalho\", List$nil)))))));\n                                                                var _scr$65 = Mons$draw$text$(\"[z] Back\", Mons$Char_white$font, ((0 | 20 | (15 << 12) | (0 << 24))), _scr$62);\n                                                                var _scr$66 = Mons$draw$list$(_artists0$63, Bool$false, 15, Mons$Char_white$font, ((0 | 20 | (20 << 12) | (0 << 24))), _scr$65);\n                                                                var _scr$67 = Mons$draw$list$(_artists1$64, Bool$false, 15, Mons$Char_white$font, ((0 | 125 | (20 << 12) | (0 << 24))), _scr$66);\n                                                                var $1278 = _scr$67;\n                                                                var $1275 = $1278;\n                                                                break;\n                                                            case 'Mons.Screen.introduction':\n                                                                var $1279 = self.step;\n                                                                var self = (($1268 === \"MAGE\") && _is_standing$60);\n                                                                if (self) {\n                                                                    var self = ($1279 === 0);\n                                                                    if (self) {\n                                                                        var _game$62 = Mons$Map$build_sprites$(_game$1, _scr$9, $1227, _hero_obj$12);\n                                                                        var $1282 = Mons$draw$mage_talk$(\"Oh! So you really exist... the\", \"young man of the prophecy. [c]\", _scr$9);\n                                                                        var $1281 = $1282;\n                                                                    } else {\n                                                                        var self = ($1279 === 1);\n                                                                        if (self) {\n                                                                            var _game$62 = Mons$Map$build_sprites$(_game$1, _scr$9, $1227, _hero_obj$12);\n                                                                            var $1284 = Mons$draw$mage_talk$(\"I\\'m in a hurry and can\\'t explain\", \"now, but... we depend on you. [c]\", _scr$9);\n                                                                            var $1283 = $1284;\n                                                                        } else {\n                                                                            var self = ($1279 === 2);\n                                                                            if (self) {\n                                                                                var _game$62 = Mons$Map$build_sprites$(_game$1, _scr$9, $1227, _hero_obj$12);\n                                                                                var $1286 = Mons$draw$mage_talk$(\"Great choice! You can press\", \"[e] to check it on the bag. [c]\", _scr$9);\n                                                                                var $1285 = $1286;\n                                                                            } else {\n                                                                                var $1287 = Mons$Map$build_sprites$(_game$1, _scr$9, $1227, _hero_obj$12);\n                                                                                var $1285 = $1287;\n                                                                            };\n                                                                            var $1283 = $1285;\n                                                                        };\n                                                                        var $1281 = $1283;\n                                                                    };\n                                                                    var $1280 = $1281;\n                                                                } else {\n                                                                    var $1288 = Mons$Map$build_sprites$(_game$1, _scr$9, $1227, _hero_obj$12);\n                                                                    var $1280 = $1288;\n                                                                };\n                                                                var $1275 = $1280;\n                                                                break;\n                                                            case 'Mons.Screen.intro_select':\n                                                                var $1289 = self.idx;\n                                                                var _game$62 = Mons$Map$build_sprites$(_game$1, _scr$9, $1227, _hero_obj$12);\n                                                                var $1290 = Mons$draw$initial_mons$(_hero_obj$12, _scr$9);\n                                                                var $1275 = $1290;\n                                                                break;\n                                                            case 'Mons.Screen.game':\n                                                                var $1291 = self.cmd;\n                                                                var $1292 = self.turn;\n                                                                var _hero_mon_attr$63 = Mons$Kind$attr$($1253);\n                                                                var self = _hero_mon_attr$63;\n                                                                switch (self._) {\n                                                                    case 'Mons.Attr.new':\n                                                                        var $1294 = self.blocks;\n                                                                        var $1295 = self.mhp;\n                                                                        var $1296 = self.atk;\n                                                                        var $1297 = self.name;\n                                                                        var $1298 = self.wlk;\n                                                                        var $1299 = self.idl;\n                                                                        var $1300 = self.pic;\n                                                                        var $1301 = self.battle_spr;\n                                                                        var $1302 = self.skills;\n                                                                        var $1303 = self.pos;\n                                                                        var self = $1241;\n                                                                        switch (self._) {\n                                                                            case 'Mons.Kind.Mons':\n                                                                                var $1305 = self.ele;\n                                                                                var $1306 = self.boss;\n                                                                                var $1307 = self.pri_type;\n                                                                                var $1308 = self.agi;\n                                                                                var _hero_chp$78 = (Math.max($1295 - $1257, 0));\n                                                                                var _hero_btl_img$79 = $1301(Bool$true);\n                                                                                var _hero_txt$80 = String$flatten$(List$cons$($1297, List$cons$(\" \", List$cons$(Mons$draw$img_type$($1253), List$nil))));\n                                                                                var _hero_hp$81 = String$flatten$(List$cons$(Mons$draw$small_HP, List$cons$(\" \", List$cons$(U32$to_string$(_hero_chp$78), List$cons$(\"/\", List$cons$(U32$to_string$($1295), List$nil))))));\n                                                                                var _adve_chp$82 = (Math.max($1266 - $1245, 0));\n                                                                                var _adve_btl_img$83 = $1272(Bool$false);\n                                                                                var _adve_txt$84 = String$flatten$(List$cons$($1268, List$cons$(\" \", List$cons$(Mons$draw$img_type$($1241), List$nil))));\n                                                                                var _adve_hp$85 = String$flatten$(List$cons$(Mons$draw$small_HP, List$cons$(\" \", List$cons$(U32$to_string$(_adve_chp$82), List$cons$(\"/\", List$cons$(U32$to_string$($1266), List$nil))))));\n                                                                                var self = _is_standing$60;\n                                                                                if (self) {\n                                                                                    var self = Mons$Object$is_battling$(_adve_obj$14, _hero_mon_obj$38);\n                                                                                    if (self) {\n                                                                                        var _scr$86 = Mons$draw$battle_bg$($1305, $1306, _dim$15, _scr$9);\n                                                                                        var _scr$87 = Mons$draw$hero_hp$(_hero_chp$78, $1295, _hero_txt$80, _hero_hp$81, _scr$86);\n                                                                                        var _scr$88 = Mons$draw$adve_hp$(_adve_chp$82, $1266, _adve_txt$84, _adve_hp$85, _scr$87);\n                                                                                        var _scr$89 = Mons$draw$image$(_hero_btl_img$79, ((0 | 75 | (80 << 12) | (0 << 24))), _scr$88);\n                                                                                        var _scr$90 = Mons$draw$image$(_adve_btl_img$83, ((0 | 180 | (40 << 12) | (0 << 24))), _scr$89);\n                                                                                        var self = $1292;\n                                                                                        switch (self._) {\n                                                                                            case 'Mons.Turn.new':\n                                                                                                var $1312 = self.exec_hero;\n                                                                                                var $1313 = self.hero_skill;\n                                                                                                var $1314 = self.adve_skill;\n                                                                                                var $1315 = self.play;\n                                                                                                var _scr$95 = Mons$draw$effects$($1263, $1251, _scr$90);\n                                                                                                var self = Mons$Turn$is_active$($1292);\n                                                                                                if (self) {\n                                                                                                    var self = Mons$Turn$hero_turn$($1292);\n                                                                                                    if (self) {\n                                                                                                        var $1318 = Mons$draw$turn$($1297, $1313, _scr$95);\n                                                                                                        var $1317 = $1318;\n                                                                                                    } else {\n                                                                                                        var $1319 = Mons$draw$turn$($1268, $1314, _scr$95);\n                                                                                                        var $1317 = $1319;\n                                                                                                    };\n                                                                                                    var $1316 = $1317;\n                                                                                                } else {\n                                                                                                    var $1320 = Mons$draw$battle_skills$(_hero_mon_obj$38, _scr$95);\n                                                                                                    var $1316 = $1320;\n                                                                                                };\n                                                                                                var $1311 = $1316;\n                                                                                                break;\n                                                                                        };\n                                                                                        var $1310 = $1311;\n                                                                                    } else {\n                                                                                        var _scr$86 = Mons$draw$capture_bg$($1305, _dim$15, _scr$9);\n                                                                                        var self = Mons$Object$is_obj_defeated$(_adve_obj$14);\n                                                                                        if (self) {\n                                                                                            var self = $1306;\n                                                                                            if (self) {\n                                                                                                var _scr$87 = Mons$draw$battle_win_bg$($1305, _dim$15, _scr$86);\n                                                                                                var _scr$88 = Mons$draw$text$(\"You unlocked the next level.\", Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$87);\n                                                                                                var _scr$89 = Mons$draw$text$(\"[c] I\\'m ready!\", Mons$Char_black$font, Mons$draw$msg_screen$line_1, _scr$88);\n                                                                                                var $1323 = Mons$draw$image$(_adve_btl_img$83, ((0 | 180 | (40 << 12) | (0 << 24))), _scr$89);\n                                                                                                var $1322 = $1323;\n                                                                                            } else {\n                                                                                                var _scr$87 = Mons$draw$battle_win_bg$($1305, _dim$15, _scr$86);\n                                                                                                var _scr$88 = Mons$draw$text$(\"[c] Capture\", Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$87);\n                                                                                                var _scr$89 = Mons$draw$text$(\"[z] Free\", Mons$Char_black$font, Mons$draw$msg_screen$line_1, _scr$88);\n                                                                                                var $1324 = Mons$draw$image$(_adve_btl_img$83, ((0 | 180 | (40 << 12) | (0 << 24))), _scr$89);\n                                                                                                var $1322 = $1324;\n                                                                                            };\n                                                                                            var _scr$87 = $1322;\n                                                                                        } else {\n                                                                                            var self = Mons$Object$is_obj_defeated$(_hero_mon_obj$38);\n                                                                                            if (self) {\n                                                                                                var _scr$87 = Mons$draw$text$(\"You lost the battle and your Mon.\", Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$86);\n                                                                                                var _scr$88 = Mons$draw$text$(\"[c] I\\'ll do better next time\", Mons$Char_black$font, Mons$draw$msg_screen$line_1, _scr$87);\n                                                                                                var $1326 = Mons$draw$image$(_hero_btl_img$79, ((0 | 75 | (80 << 12) | (0 << 24))), _scr$88);\n                                                                                                var $1325 = $1326;\n                                                                                            } else {\n                                                                                                var $1327 = _scr$86;\n                                                                                                var $1325 = $1327;\n                                                                                            };\n                                                                                            var _scr$87 = $1325;\n                                                                                        };\n                                                                                        var $1321 = _scr$87;\n                                                                                        var $1310 = $1321;\n                                                                                    };\n                                                                                    var $1309 = $1310;\n                                                                                } else {\n                                                                                    var $1328 = Mons$Map$build_sprites$(_game$1, _scr$9, $1227, _hero_obj$12);\n                                                                                    var $1309 = $1328;\n                                                                                };\n                                                                                var $1304 = $1309;\n                                                                                break;\n                                                                            case 'Mons.Kind.Const':\n                                                                                var $1329 = self.ele;\n                                                                                var self = (_is_standing$60 && Mons$Kind$is_portal$($1241));\n                                                                                if (self) {\n                                                                                    var _game$75 = Mons$Map$build_sprites$(_game$1, _scr$9, $1227, _hero_obj$12);\n                                                                                    var self = (Mons$Game$defeated_lvl_mons$(Pair$fst$($1237), _dim$15) || ((Number((list_length($1236)))) === ((_dim$15 / 2) >>> 0)));\n                                                                                    if (self) {\n                                                                                        var _scr$76 = Mons$draw$image$(Mons$draw$text_screen_bg, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$9);\n                                                                                        var $1332 = Mons$draw$text$(\"Press [c] to access next level\", Mons$Char_black$font, ((0 | 30 | (135 << 12) | (0 << 24))), _scr$76);\n                                                                                        var $1331 = $1332;\n                                                                                    } else {\n                                                                                        var _scr$76 = Mons$draw$image$(Mons$draw$text_screen_bg, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$9);\n                                                                                        var _scr$77 = Mons$draw$text$(\"To access the next level you must\", Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$76);\n                                                                                        var $1333 = Mons$draw$text$(\"first defeat all enemies.\", Mons$Char_black$font, Mons$draw$msg_screen$line_1, _scr$77);\n                                                                                        var $1331 = $1333;\n                                                                                    };\n                                                                                    var $1330 = $1331;\n                                                                                } else {\n                                                                                    var $1334 = Mons$Map$build_sprites$(_game$1, _scr$9, $1227, _hero_obj$12);\n                                                                                    var $1330 = $1334;\n                                                                                };\n                                                                                var $1304 = $1330;\n                                                                                break;\n                                                                            case 'Mons.Kind.Terrain':\n                                                                                var $1335 = self.ele;\n                                                                                var $1336 = Mons$Map$build_sprites$(_game$1, _scr$9, $1227, _hero_obj$12);\n                                                                                var $1304 = $1336;\n                                                                                break;\n                                                                            case 'Mons.Kind.Interactive':\n                                                                                var $1337 = self.ele;\n                                                                                var $1338 = self.on;\n                                                                                var $1339 = self.eff;\n                                                                                var self = $1337;\n                                                                                switch (self._) {\n                                                                                    case 'Mons.Kind.inter.LEVER':\n                                                                                        var $1341 = self.id;\n                                                                                        var $1342 = Mons$Map$build_sprites$(_game$1, _scr$9, $1227, _hero_obj$12);\n                                                                                        var $1340 = $1342;\n                                                                                        break;\n                                                                                    case 'Mons.Kind.inter.MOVE':\n                                                                                        var $1343 = Mons$Map$build_sprites$(_game$1, _scr$9, $1227, _hero_obj$12);\n                                                                                        var $1340 = $1343;\n                                                                                        break;\n                                                                                    case 'Mons.Kind.inter.HEAL':\n                                                                                        var self = $1338;\n                                                                                        if (self) {\n                                                                                            var _scr$77 = Mons$Map$build_sprites$(_game$1, _scr$9, $1227, _hero_obj$12);\n                                                                                            var _scr$78 = Mons$draw$image$(Mons$draw$text_screen_bg, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$77);\n                                                                                            var $1345 = Mons$draw$text$(\"You already used the heal.\", Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$78);\n                                                                                            var $1344 = $1345;\n                                                                                        } else {\n                                                                                            var _scr$77 = Mons$Map$build_sprites$(_game$1, _scr$9, $1227, _hero_obj$12);\n                                                                                            var _scr$78 = Mons$draw$image$(Mons$draw$text_screen_bg, ((0 | 120 | (80 << 12) | (0 << 24))), _scr$77);\n                                                                                            var _scr$79 = Mons$draw$text$(\"Press [c] to heal 15HP on all of\", Mons$Char_black$font, Mons$draw$msg_screen$line_0, _scr$78);\n                                                                                            var $1346 = Mons$draw$text$(\"your Mons\", Mons$Char_black$font, Mons$draw$msg_screen$line_1, _scr$79);\n                                                                                            var $1344 = $1346;\n                                                                                        };\n                                                                                        var $1340 = $1344;\n                                                                                        break;\n                                                                                };\n                                                                                var $1304 = $1340;\n                                                                                break;\n                                                                        };\n                                                                        var $1293 = $1304;\n                                                                        break;\n                                                                };\n                                                                var $1275 = $1293;\n                                                                break;\n                                                            case 'Mons.Screen.inventory':\n                                                                var $1347 = self.idx;\n                                                                var $1348 = Mons$draw$bag$(_hero_obj$12, _dim$15, _scr$9);\n                                                                var $1275 = $1348;\n                                                                break;\n                                                            case 'Mons.Screen.capture_mon':\n                                                                var $1349 = self.idx;\n                                                                var $1350 = self.full_bag;\n                                                                var self = $1350;\n                                                                if (self) {\n                                                                    var $1352 = Mons$draw$full_bag$(_hero_obj$12, _adve_obj$14, _dim$15, _scr$9);\n                                                                    var $1351 = $1352;\n                                                                } else {\n                                                                    var $1353 = Mons$Map$build_sprites$(_game$1, _scr$9, $1227, _hero_obj$12);\n                                                                    var $1351 = $1353;\n                                                                };\n                                                                var $1275 = $1351;\n                                                                break;\n                                                            case 'Mons.Screen.game_over':\n                                                                var $1354 = Mons$draw$text$(\"GAME OVER\", Mons$Char_white$font, ((0 | 90 | (80 << 12) | (0 << 24))), _scr$9);\n                                                                var $1275 = $1354;\n                                                                break;\n                                                        };\n                                                        var $1264 = $1275;\n                                                        break;\n                                                };\n                                                var $1252 = $1264;\n                                                break;\n                                        };\n                                        var $1240 = $1252;\n                                        break;\n                                };\n                                var $1228 = $1240;\n                                break;\n                        };\n                        var $1225 = $1228;\n                        break;\n                };\n                var $1219 = $1225;\n                break;\n        };\n        return $1219;\n    };\n    const Mons$draw = x0 => x1 => Mons$draw$(x0, x1);\n\n    function App$Action$(_S$1) {\n        var $1355 = null;\n        return $1355;\n    };\n    const App$Action = x0 => App$Action$(x0);\n\n    function App$Action$print$(_text$2) {\n        var $1356 = ({\n            _: 'App.Action.print',\n            'text': _text$2\n        });\n        return $1356;\n    };\n    const App$Action$print = x0 => App$Action$print$(x0);\n\n    function App$Action$resize$(_width$2, _height$3) {\n        var $1357 = ({\n            _: 'App.Action.resize',\n            'width': _width$2,\n            'height': _height$3\n        });\n        return $1357;\n    };\n    const App$Action$resize = x0 => x1 => App$Action$resize$(x0, x1);\n    const Mons$scr_w = ((((Mons$scr_mid & 0xFFF)) * 2) >>> 0);\n    const Mons$scr_h = (((((Mons$scr_mid >>> 12) & 0xFFF)) * 2) >>> 0);\n\n    function App$Action$state$(_value$2) {\n        var $1358 = ({\n            _: 'App.Action.state',\n            'value': _value$2\n        });\n        return $1358;\n    };\n    const App$Action$state = x0 => App$Action$state$(x0);\n\n    function Mons$Game$set_usr$(_usr$1, _game$2) {\n        var self = _game$2;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1360 = self.usr;\n                var $1361 = self.pos;\n                var $1362 = self.map;\n                var $1363 = self.stt;\n                var $1364 = self.tik;\n                var $1365 = Mons$Game$new$(_usr$1, $1361, $1362, $1363, $1364);\n                var $1359 = $1365;\n                break;\n        };\n        return $1359;\n    };\n    const Mons$Game$set_usr = x0 => x1 => Mons$Game$set_usr$(x0, x1);\n\n    function App$Action$watch$(_room$2) {\n        var $1366 = ({\n            _: 'App.Action.watch',\n            'room': _room$2\n        });\n        return $1366;\n    };\n    const App$Action$watch = x0 => App$Action$watch$(x0);\n\n    function Word$from_bits$(_size$1, _bits$2) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $1368 = Word$e;\n            var $1367 = $1368;\n        } else {\n            var $1369 = (self - 1n);\n            var self = _bits$2;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'e':\n                    var $1371 = Word$o$(Word$from_bits$($1369, Bits$e));\n                    var $1370 = $1371;\n                    break;\n                case 'o':\n                    var $1372 = self.slice(0, -1);\n                    var $1373 = Word$o$(Word$from_bits$($1369, $1372));\n                    var $1370 = $1373;\n                    break;\n                case 'i':\n                    var $1374 = self.slice(0, -1);\n                    var $1375 = Word$i$(Word$from_bits$($1369, $1374));\n                    var $1370 = $1375;\n                    break;\n            };\n            var $1367 = $1370;\n        };\n        return $1367;\n    };\n    const Word$from_bits = x0 => x1 => Word$from_bits$(x0, x1);\n    const Bits$concat = a0 => a1 => (a1 + a0);\n\n    function String$to_bits$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $1377 = Bits$e;\n            var $1376 = $1377;\n        } else {\n            var $1378 = self.charCodeAt(0);\n            var $1379 = self.slice(1);\n            var $1380 = (String$to_bits$($1379) + (u16_to_bits($1378)));\n            var $1376 = $1380;\n        };\n        return $1376;\n    };\n    const String$to_bits = x0 => String$to_bits$(x0);\n    const Mons$App$room = Word$from_bits$(48n, String$to_bits$(\"MON\"));\n\n    function Cmp$as_gte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $1382 = Bool$false;\n                var $1381 = $1382;\n                break;\n            case 'Cmp.eql':\n                var $1383 = Bool$true;\n                var $1381 = $1383;\n                break;\n            case 'Cmp.gtn':\n                var $1384 = Bool$true;\n                var $1381 = $1384;\n                break;\n        };\n        return $1381;\n    };\n    const Cmp$as_gte = x0 => Cmp$as_gte$(x0);\n\n    function Word$gte$(_a$2, _b$3) {\n        var $1385 = Cmp$as_gte$(Word$cmp$(_a$2, _b$3));\n        return $1385;\n    };\n    const Word$gte = x0 => x1 => Word$gte$(x0, x1);\n    const U16$gte = a0 => a1 => (a0 >= a1);\n    const U16$lte = a0 => a1 => (a0 <= a1);\n    const U16$sub = a0 => a1 => (Math.max(a0 - a1, 0));\n\n    function Char$to_upper$(_char$1) {\n        var self = ((_char$1 >= 97) && (_char$1 <= 122));\n        if (self) {\n            var $1387 = (Math.max(_char$1 - 32, 0));\n            var $1386 = $1387;\n        } else {\n            var $1388 = _char$1;\n            var $1386 = $1388;\n        };\n        return $1386;\n    };\n    const Char$to_upper = x0 => Char$to_upper$(x0);\n    const U16$add = a0 => a1 => ((a0 + a1) & 0xFFFF);\n\n    function Char$to_lower$(_char$1) {\n        var self = ((_char$1 >= 65) && (_char$1 <= 90));\n        if (self) {\n            var $1390 = ((_char$1 + 32) & 0xFFFF);\n            var $1389 = $1390;\n        } else {\n            var $1391 = _char$1;\n            var $1389 = $1391;\n        };\n        return $1389;\n    };\n    const Char$to_lower = x0 => Char$to_lower$(x0);\n\n    function Mons$Input$char$(_down$1, _code$2) {\n        var self = _down$1;\n        if (self) {\n            var $1393 = Char$to_upper$(_code$2);\n            var $1392 = $1393;\n        } else {\n            var $1394 = Char$to_lower$(_code$2);\n            var $1392 = $1394;\n        };\n        return $1392;\n    };\n    const Mons$Input$char = x0 => x1 => Mons$Input$char$(x0, x1);\n    const Mons$Input$list = (() => {\n        var _b0$1 = Bits$o;\n        var _b1$2 = Bits$i;\n        var _bn$3 = Bits$e;\n        var $1395 = List$cons$(Pair$new$(68, _b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(87, _b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(65, _b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(83, _b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(85, _b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(73, _b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(74, _b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b1$2(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(75, _b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b1$2(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(100, _b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b0$1(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(119, _b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b0$1(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(97, _b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b1$2(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(115, _b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b1$2(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(117, _b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b1$2(_b0$1(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(105, _b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b1$2(_b0$1(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(106, _b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b1$2(_b1$2(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(107, _b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_b1$2(_b1$2(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(101, _b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b0$1(_b0$1(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(69, _b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b0$1(_b0$1(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(99, _b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b0$1(_b1$2(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(67, _b0$1(_b0$1(_b0$1(_b1$2(_b0$1(_b1$2(_b1$2(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(122, _b0$1(_b0$1(_b0$1(_b1$2(_b1$2(_b1$2(_b1$2(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(90, _b0$1(_b0$1(_b1$2(_b0$1(_b0$1(_b0$1(_b0$1(_b0$1(_bn$3))))))))), List$cons$(Pair$new$(82, _b0$1(_b0$1(_b1$2(_b0$1(_b0$1(_b0$1(_b0$1(_b1$2(_bn$3))))))))), List$cons$(Pair$new$(114, _b0$1(_b0$1(_b0$1(_b1$2(_b1$2(_b1$2(_b1$2(_b1$2(_bn$3))))))))), List$nil))))))))))))))))))))))));\n        return $1395;\n    })();\n    const Mons$Input$char_to_code_map = (() => {\n        var _map$1 = Map$new;\n        var _map$2 = (() => {\n            var $1398 = _map$1;\n            var $1399 = Mons$Input$list;\n            let _map$3 = $1398;\n            let _char_code$2;\n            while ($1399._ === 'List.cons') {\n                _char_code$2 = $1399.head;\n                var self = _char_code$2;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $1400 = self.fst;\n                        var $1401 = self.snd;\n                        var $1402 = Map$set$((u16_to_bits($1400)), $1401, _map$3);\n                        var $1398 = $1402;\n                        break;\n                };\n                _map$3 = $1398;\n                $1399 = $1399.tail;\n            }\n            return _map$3;\n        })();\n        var $1396 = _map$2;\n        return $1396;\n    })();\n\n    function Mons$Input$serialize$(_char$1) {\n        var self = Map$get$((u16_to_bits(_char$1)), Mons$Input$char_to_code_map);\n        switch (self._) {\n            case 'Maybe.none':\n                var $1404 = Maybe$none;\n                var $1403 = $1404;\n                break;\n            case 'Maybe.some':\n                var $1405 = self.value;\n                var $1406 = Maybe$some$(Word$from_bits$(256n, $1405));\n                var $1403 = $1406;\n                break;\n        };\n        return $1403;\n    };\n    const Mons$Input$serialize = x0 => Mons$Input$serialize$(x0);\n\n    function App$Action$post$(_room$2, _data$3) {\n        var $1407 = ({\n            _: 'App.Action.post',\n            'room': _room$2,\n            'data': _data$3\n        });\n        return $1407;\n    };\n    const App$Action$post = x0 => x1 => App$Action$post$(x0, x1);\n\n    function Mons$Object$set_ani$(_obj$1, _ani$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1409 = self.kin;\n                var $1410 = self.dir;\n                var $1411 = self.pad;\n                var $1412 = self.ani;\n                var $1413 = self.dmg;\n                var $1414 = self.bag;\n                var $1415 = self.mon;\n                var $1416 = self.bos;\n                var $1417 = self.cap;\n                var $1418 = self.idl;\n                var $1419 = self.eff;\n                var $1420 = Mons$Object$new$($1409, $1410, $1411, _ani$2, $1413, $1414, $1415, $1416, $1417, $1418, $1419);\n                var $1408 = $1420;\n                break;\n        };\n        return $1408;\n    };\n    const Mons$Object$set_ani = x0 => x1 => Mons$Object$set_ani$(x0, x1);\n\n    function Mons$Object$set_dir$(_obj$1, _dir$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1422 = self.kin;\n                var $1423 = self.dir;\n                var $1424 = self.pad;\n                var $1425 = self.ani;\n                var $1426 = self.dmg;\n                var $1427 = self.bag;\n                var $1428 = self.mon;\n                var $1429 = self.bos;\n                var $1430 = self.cap;\n                var $1431 = self.idl;\n                var $1432 = self.eff;\n                var $1433 = Mons$Object$new$($1422, _dir$2, $1424, $1425, $1426, $1427, $1428, $1429, $1430, $1431, $1432);\n                var $1421 = $1433;\n                break;\n        };\n        return $1421;\n    };\n    const Mons$Object$set_dir = x0 => x1 => Mons$Object$set_dir$(x0, x1);\n\n    function Mons$Object$is_free_to_move$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1435 = self.kin;\n                var $1436 = self.dir;\n                var $1437 = self.pad;\n                var $1438 = self.ani;\n                var $1439 = self.dmg;\n                var $1440 = self.bag;\n                var $1441 = self.mon;\n                var $1442 = self.bos;\n                var $1443 = self.cap;\n                var $1444 = self.idl;\n                var $1445 = self.eff;\n                var $1446 = ($1438 === 0);\n                var $1434 = $1446;\n                break;\n        };\n        return $1434;\n    };\n    const Mons$Object$is_free_to_move = x0 => Mons$Object$is_free_to_move$(x0);\n    const Mons$Dir$up = ({\n        _: 'Mons.Dir.up'\n    });\n    const Mons$Dir$left = ({\n        _: 'Mons.Dir.left'\n    });\n    const Mons$Dir$right = ({\n        _: 'Mons.Dir.right'\n    });\n\n    function Mons$Object$tick$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1448 = self.kin;\n                var $1449 = self.dir;\n                var $1450 = self.pad;\n                var $1451 = self.ani;\n                var $1452 = self.dmg;\n                var $1453 = self.bag;\n                var $1454 = self.mon;\n                var $1455 = self.bos;\n                var $1456 = self.cap;\n                var $1457 = self.idl;\n                var $1458 = self.eff;\n                var _obj$13 = Mons$Object$set_ani$(_obj$1, (() => {\n                    var self = ($1451 > 0);\n                    if (self) {\n                        var $1460 = (Math.max($1451 - 2, 0));\n                        return $1460;\n                    } else {\n                        var $1461 = $1451;\n                        return $1461;\n                    };\n                })());\n                var _obj$14 = Mons$Object$set_dir$(_obj$13, (() => {\n                    var self = Mons$Object$is_free_to_move$(_obj$13);\n                    if (self) {\n                        var self = $1450;\n                        switch (self._) {\n                            case 'Mons.Pad.new':\n                                var $1463 = self.r;\n                                var $1464 = self.u;\n                                var $1465 = self.l;\n                                var $1466 = self.d;\n                                var self = $1464;\n                                if (self) {\n                                    var $1468 = Mons$Dir$up;\n                                    var $1467 = $1468;\n                                } else {\n                                    var self = $1465;\n                                    if (self) {\n                                        var $1470 = Mons$Dir$left;\n                                        var $1469 = $1470;\n                                    } else {\n                                        var self = $1466;\n                                        if (self) {\n                                            var $1472 = Mons$Dir$down;\n                                            var $1471 = $1472;\n                                        } else {\n                                            var self = $1463;\n                                            if (self) {\n                                                var $1474 = Mons$Dir$right;\n                                                var $1473 = $1474;\n                                            } else {\n                                                var $1475 = $1449;\n                                                var $1473 = $1475;\n                                            };\n                                            var $1471 = $1473;\n                                        };\n                                        var $1469 = $1471;\n                                    };\n                                    var $1467 = $1469;\n                                };\n                                var $1462 = $1467;\n                                break;\n                        };\n                        return $1462;\n                    } else {\n                        var $1476 = $1449;\n                        return $1476;\n                    };\n                })());\n                var $1459 = _obj$14;\n                var $1447 = $1459;\n                break;\n        };\n        return $1447;\n    };\n    const Mons$Object$tick = x0 => Mons$Object$tick$(x0);\n\n    function Mons$Dir$move$(_dir$1, _pos$2) {\n        var self = _dir$1;\n        switch (self._) {\n            case 'Mons.Dir.right':\n                var $1478 = Pos32$add$(_pos$2, ((0 | 1 | (0 << 12) | (0 << 24))));\n                var $1477 = $1478;\n                break;\n            case 'Mons.Dir.up':\n                var $1479 = Pos32$sub$(_pos$2, ((0 | 0 | (1 << 12) | (0 << 24))));\n                var $1477 = $1479;\n                break;\n            case 'Mons.Dir.left':\n                var $1480 = Pos32$sub$(_pos$2, ((0 | 1 | (0 << 12) | (0 << 24))));\n                var $1477 = $1480;\n                break;\n            case 'Mons.Dir.down':\n                var $1481 = Pos32$add$(_pos$2, ((0 | 0 | (1 << 12) | (0 << 24))));\n                var $1477 = $1481;\n                break;\n        };\n        return $1477;\n    };\n    const Mons$Dir$move = x0 => x1 => Mons$Dir$move$(x0, x1);\n\n    function Mons$Map$pop$(_pos$1, _map$2) {\n        var _objs$3 = Mons$Map$get_list$(_pos$1, _map$2);\n        var self = _objs$3;\n        switch (self._) {\n            case 'List.nil':\n                var $1483 = Pair$new$(_map$2, Mons$Object$void);\n                var $1482 = $1483;\n                break;\n            case 'List.cons':\n                var $1484 = self.head;\n                var $1485 = self.tail;\n                var _map$6 = Mons$Map$set_list$(_pos$1, $1485, _map$2);\n                var $1486 = Pair$new$(_map$6, $1484);\n                var $1482 = $1486;\n                break;\n        };\n        return $1482;\n    };\n    const Mons$Map$pop = x0 => x1 => Mons$Map$pop$(x0, x1);\n\n    function Mons$Map$get_top$(_pos$1, _map$2) {\n        var $1487 = Pair$snd$(Mons$Map$pop$(_pos$1, _map$2));\n        return $1487;\n    };\n    const Mons$Map$get_top = x0 => x1 => Mons$Map$get_top$(x0, x1);\n\n    function Mons$Object$is_walking$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1489 = self.kin;\n                var $1490 = self.dir;\n                var $1491 = self.pad;\n                var $1492 = self.ani;\n                var $1493 = self.dmg;\n                var $1494 = self.bag;\n                var $1495 = self.mon;\n                var $1496 = self.bos;\n                var $1497 = self.cap;\n                var $1498 = self.idl;\n                var $1499 = self.eff;\n                var self = $1491;\n                switch (self._) {\n                    case 'Mons.Pad.new':\n                        var $1501 = self.r;\n                        var $1502 = self.u;\n                        var $1503 = self.l;\n                        var $1504 = self.d;\n                        var _is_walking_x$17 = ($1502 || $1504);\n                        var _is_walking_y$18 = ($1503 || $1501);\n                        var $1505 = (_is_walking_x$17 || _is_walking_y$18);\n                        var $1500 = $1505;\n                        break;\n                };\n                var $1488 = $1500;\n                break;\n        };\n        return $1488;\n    };\n    const Mons$Object$is_walking = x0 => Mons$Object$is_walking$(x0);\n\n    function Mons$Kind$get_blocks$(_kind$1) {\n        var self = Mons$Kind$attr$(_kind$1);\n        switch (self._) {\n            case 'Mons.Attr.new':\n                var $1507 = self.blocks;\n                var $1508 = self.mhp;\n                var $1509 = self.atk;\n                var $1510 = self.name;\n                var $1511 = self.wlk;\n                var $1512 = self.idl;\n                var $1513 = self.pic;\n                var $1514 = self.battle_spr;\n                var $1515 = self.skills;\n                var $1516 = self.pos;\n                var $1517 = $1507;\n                var $1506 = $1517;\n                break;\n        };\n        return $1506;\n    };\n    const Mons$Kind$get_blocks = x0 => Mons$Kind$get_blocks$(x0);\n\n    function Mons$Game$move_obj$(_from$1, _idx$2, _to$3, _obj$4, _game$5) {\n        var _game$6 = Mons$Game$map_del$(_from$1, _idx$2, _game$5);\n        var _game$7 = Mons$Game$map_push$(_to$3, _obj$4, _game$6);\n        var $1518 = _game$7;\n        return $1518;\n    };\n    const Mons$Game$move_obj = x0 => x1 => x2 => x3 => x4 => Mons$Game$move_obj$(x0, x1, x2, x3, x4);\n\n    function Mons$Game$set_user_pos$(_user$1, _pos$2, _game$3) {\n        var self = _game$3;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1520 = self.usr;\n                var $1521 = self.pos;\n                var $1522 = self.map;\n                var $1523 = self.stt;\n                var $1524 = self.tik;\n                var $1525 = Mons$Game$new$($1520, Map$set$(Word$to_bits$(_user$1), _pos$2, $1521), $1522, $1523, $1524);\n                var $1519 = $1525;\n                break;\n        };\n        return $1519;\n    };\n    const Mons$Game$set_user_pos = x0 => x1 => x2 => Mons$Game$set_user_pos$(x0, x1, x2);\n\n    function Mons$Game$tick_user$(_user$1, _pos$2, _game$3) {\n        var self = _game$3;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1527 = self.usr;\n                var $1528 = self.pos;\n                var $1529 = self.map;\n                var $1530 = self.stt;\n                var $1531 = self.tik;\n                var _map$9 = $1529;\n                var _obj_idx$10 = Mons$Map$get_hero$(_pos$2, _map$9);\n                var _obj$11 = Pair$fst$(_obj_idx$10);\n                var _idx$12 = Pair$snd$(_obj_idx$10);\n                var _obj$13 = Mons$Object$tick$(_obj$11);\n                var self = _obj$13;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $1533 = self.kin;\n                        var $1534 = self.dir;\n                        var $1535 = self.pad;\n                        var $1536 = self.ani;\n                        var $1537 = self.dmg;\n                        var $1538 = self.bag;\n                        var $1539 = self.mon;\n                        var $1540 = self.bos;\n                        var $1541 = self.cap;\n                        var $1542 = self.idl;\n                        var $1543 = self.eff;\n                        var _old_pos$25 = _pos$2;\n                        var _new_pos$26 = Mons$Dir$move$($1534, _pos$2);\n                        var _trg$27 = Mons$Map$get_top$(_new_pos$26, _map$9);\n                        var self = _trg$27;\n                        switch (self._) {\n                            case 'Mons.Object.new':\n                                var $1545 = self.kin;\n                                var $1546 = self.dir;\n                                var $1547 = self.pad;\n                                var $1548 = self.ani;\n                                var $1549 = self.dmg;\n                                var $1550 = self.bag;\n                                var $1551 = self.mon;\n                                var $1552 = self.bos;\n                                var $1553 = self.cap;\n                                var $1554 = self.idl;\n                                var $1555 = self.eff;\n                                var _is_walking$39 = Mons$Object$is_walking$(_obj$13);\n                                var _is_movfree$40 = Mons$Object$is_free_to_move$(_obj$13);\n                                var _is_blocked$41 = Mons$Kind$get_blocks$($1545);\n                                var self = (_is_walking$39 && (_is_movfree$40 && (!_is_blocked$41)));\n                                if (self) {\n                                    var _obj$42 = Mons$Object$set_ani$(_obj$13, 16);\n                                    var _game$43 = Mons$Game$move_obj$(_old_pos$25, _idx$12, _new_pos$26, _obj$42, _game$3);\n                                    var _game$44 = Mons$Game$set_user_pos$(_user$1, _new_pos$26, _game$43);\n                                    var $1557 = _game$44;\n                                    var $1556 = $1557;\n                                } else {\n                                    var $1558 = Mons$Game$map_set$(_pos$2, _idx$12, _obj$13, _game$3);\n                                    var $1556 = $1558;\n                                };\n                                var $1544 = $1556;\n                                break;\n                        };\n                        var $1532 = $1544;\n                        break;\n                };\n                var $1526 = $1532;\n                break;\n        };\n        return $1526;\n    };\n    const Mons$Game$tick_user = x0 => x1 => x2 => Mons$Game$tick_user$(x0, x1, x2);\n\n    function Mons$Game$set_tik$(_tik$1, _game$2) {\n        var self = _game$2;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1560 = self.usr;\n                var $1561 = self.pos;\n                var $1562 = self.map;\n                var $1563 = self.stt;\n                var $1564 = self.tik;\n                var $1565 = Mons$Game$new$($1560, $1561, $1562, $1563, _tik$1);\n                var $1559 = $1565;\n                break;\n        };\n        return $1559;\n    };\n    const Mons$Game$set_tik = x0 => x1 => Mons$Game$set_tik$(x0, x1);\n\n    function Mons$Game$tick_game$(_game$1) {\n        var self = _game$1;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1567 = self.usr;\n                var $1568 = self.pos;\n                var $1569 = self.map;\n                var $1570 = self.stt;\n                var $1571 = self.tik;\n                var $1572 = Mons$Game$set_tik$((($1571 + 1) >>> 0), _game$1);\n                var $1566 = $1572;\n                break;\n        };\n        return $1566;\n    };\n    const Mons$Game$tick_game = x0 => Mons$Game$tick_game$(x0);\n\n    function Mons$Game$tick$(_game$1, _time$2) {\n        var self = _game$1;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1574 = self.usr;\n                var $1575 = self.pos;\n                var $1576 = self.map;\n                var $1577 = self.stt;\n                var $1578 = self.tik;\n                var self = Mons$Game$get_user_pos$($1574, _game$1);\n                switch (self._) {\n                    case 'Maybe.none':\n                        var $1580 = Mons$scr_mid;\n                        var _pos$8 = $1580;\n                        break;\n                    case 'Maybe.some':\n                        var $1581 = self.value;\n                        var $1582 = $1581;\n                        var _pos$8 = $1582;\n                        break;\n                };\n                var _game$9 = Mons$Game$tick_user$($1574, _pos$8, _game$1);\n                var _game$10 = Mons$Game$tick_game$(_game$9);\n                var $1579 = _game$10;\n                var $1573 = $1579;\n                break;\n        };\n        return $1573;\n    };\n    const Mons$Game$tick = x0 => x1 => Mons$Game$tick$(x0, x1);\n\n    function Bits$slice$(_len$1, _bits$2) {\n        var self = _len$1;\n        if (self === 0n) {\n            var $1584 = Bits$e;\n            var $1583 = $1584;\n        } else {\n            var $1585 = (self - 1n);\n            var self = _bits$2;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'e':\n                    var $1587 = Bits$e;\n                    var $1586 = $1587;\n                    break;\n                case 'o':\n                    var $1588 = self.slice(0, -1);\n                    var $1589 = (Bits$slice$($1585, $1588) + '0');\n                    var $1586 = $1589;\n                    break;\n                case 'i':\n                    var $1590 = self.slice(0, -1);\n                    var $1591 = (Bits$slice$($1585, $1590) + '1');\n                    var $1586 = $1591;\n                    break;\n            };\n            var $1583 = $1586;\n        };\n        return $1583;\n    };\n    const Bits$slice = x0 => x1 => Bits$slice$(x0, x1);\n    const Mons$Input$code_to_char_map = (() => {\n        var _map$1 = Map$new;\n        var _map$2 = (() => {\n            var $1594 = _map$1;\n            var $1595 = Mons$Input$list;\n            let _map$3 = $1594;\n            let _char_code$2;\n            while ($1595._ === 'List.cons') {\n                _char_code$2 = $1595.head;\n                var self = _char_code$2;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $1596 = self.fst;\n                        var $1597 = self.snd;\n                        var $1598 = Map$set$($1597, $1596, _map$3);\n                        var $1594 = $1598;\n                        break;\n                };\n                _map$3 = $1594;\n                $1595 = $1595.tail;\n            }\n            return _map$3;\n        })();\n        var $1592 = _map$2;\n        return $1592;\n    })();\n\n    function Mons$Input$deserialize$(_code$1) {\n        var $1599 = Map$get$(Bits$slice$(8n, Word$to_bits$(_code$1)), Mons$Input$code_to_char_map);\n        return $1599;\n    };\n    const Mons$Input$deserialize = x0 => Mons$Input$deserialize$(x0);\n\n    function Mons$Game$set_stt$(_stt$1, _game$2) {\n        var self = _game$2;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1601 = self.usr;\n                var $1602 = self.pos;\n                var $1603 = self.map;\n                var $1604 = self.stt;\n                var $1605 = self.tik;\n                var $1606 = Mons$Game$new$($1601, $1602, $1603, _stt$1, $1605);\n                var $1600 = $1606;\n                break;\n        };\n        return $1600;\n    };\n    const Mons$Game$set_stt = x0 => x1 => Mons$Game$set_stt$(x0, x1);\n\n    function Mons$Screen$game$(_cmd$1, _turn$2) {\n        var $1607 = ({\n            _: 'Mons.Screen.game',\n            'cmd': _cmd$1,\n            'turn': _turn$2\n        });\n        return $1607;\n    };\n    const Mons$Screen$game = x0 => x1 => Mons$Screen$game$(x0, x1);\n\n    function Mons$Turn$new$(_exec_hero$1, _hero_skill$2, _adve_skill$3, _play$4) {\n        var $1608 = ({\n            _: 'Mons.Turn.new',\n            'exec_hero': _exec_hero$1,\n            'hero_skill': _hero_skill$2,\n            'adve_skill': _adve_skill$3,\n            'play': _play$4\n        });\n        return $1608;\n    };\n    const Mons$Turn$new = x0 => x1 => x2 => x3 => Mons$Turn$new$(x0, x1, x2, x3);\n    const Mons$Turn$empty = Mons$Turn$new$(Bool$false, Mons$Skill$none, Mons$Skill$none, 0);\n    const Mons$Kind$mons$HERO = ({\n        _: 'Mons.Kind.mons.HERO'\n    });\n    const Mons$Type$fire = ({\n        _: 'Mons.Type.fire'\n    });\n    const Mons$Object$hero = Mons$Object$new_of_kind$(Mons$Kind$Mons$(Mons$Kind$mons$HERO, Bool$false, Mons$Type$fire, 1));\n\n    function Mons$Object$ended_battle$(_adve$1, _hero$2) {\n        var self = _adve$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1610 = self.kin;\n                var $1611 = self.dir;\n                var $1612 = self.pad;\n                var $1613 = self.ani;\n                var $1614 = self.dmg;\n                var $1615 = self.bag;\n                var $1616 = self.mon;\n                var $1617 = self.bos;\n                var $1618 = self.cap;\n                var $1619 = self.idl;\n                var $1620 = self.eff;\n                var self = _hero$2;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $1622 = self.kin;\n                        var $1623 = self.dir;\n                        var $1624 = self.pad;\n                        var $1625 = self.ani;\n                        var $1626 = self.dmg;\n                        var $1627 = self.bag;\n                        var $1628 = self.mon;\n                        var $1629 = self.bos;\n                        var $1630 = self.cap;\n                        var $1631 = self.idl;\n                        var $1632 = self.eff;\n                        var self = $1610;\n                        switch (self._) {\n                            case 'Mons.Kind.Mons':\n                                var $1634 = self.ele;\n                                var $1635 = self.boss;\n                                var $1636 = self.pri_type;\n                                var $1637 = self.agi;\n                                var _adve_kin$29 = Mons$Kind$attr$($1610);\n                                var _hero_kin$30 = Mons$Kind$attr$($1622);\n                                var self = _adve_kin$29;\n                                switch (self._) {\n                                    case 'Mons.Attr.new':\n                                        var $1639 = self.blocks;\n                                        var $1640 = self.mhp;\n                                        var $1641 = self.atk;\n                                        var $1642 = self.name;\n                                        var $1643 = self.wlk;\n                                        var $1644 = self.idl;\n                                        var $1645 = self.pic;\n                                        var $1646 = self.battle_spr;\n                                        var $1647 = self.skills;\n                                        var $1648 = self.pos;\n                                        var self = _hero_kin$30;\n                                        switch (self._) {\n                                            case 'Mons.Attr.new':\n                                                var $1650 = self.blocks;\n                                                var $1651 = self.mhp;\n                                                var $1652 = self.atk;\n                                                var $1653 = self.name;\n                                                var $1654 = self.wlk;\n                                                var $1655 = self.idl;\n                                                var $1656 = self.pic;\n                                                var $1657 = self.battle_spr;\n                                                var $1658 = self.skills;\n                                                var $1659 = self.pos;\n                                                var _adve_status$51 = Mons$Object$is_obj_defeated$(_adve$1);\n                                                var _hero_status$52 = Mons$Object$is_obj_defeated$(_hero$2);\n                                                var $1660 = (_adve_status$51 || _hero_status$52);\n                                                var $1649 = $1660;\n                                                break;\n                                        };\n                                        var $1638 = $1649;\n                                        break;\n                                };\n                                var $1633 = $1638;\n                                break;\n                            case 'Mons.Kind.Const':\n                                var $1661 = self.ele;\n                                var $1662 = Bool$false;\n                                var $1633 = $1662;\n                                break;\n                            case 'Mons.Kind.Terrain':\n                                var $1663 = self.ele;\n                                var $1664 = Bool$false;\n                                var $1633 = $1664;\n                                break;\n                            case 'Mons.Kind.Interactive':\n                                var $1665 = self.ele;\n                                var $1666 = self.on;\n                                var $1667 = self.eff;\n                                var $1668 = Bool$false;\n                                var $1633 = $1668;\n                                break;\n                        };\n                        var $1621 = $1633;\n                        break;\n                };\n                var $1609 = $1621;\n                break;\n        };\n        return $1609;\n    };\n    const Mons$Object$ended_battle = x0 => x1 => Mons$Object$ended_battle$(x0, x1);\n\n    function Mons$Screen$introduction$(_step$1) {\n        var $1669 = ({\n            _: 'Mons.Screen.introduction',\n            'step': _step$1\n        });\n        return $1669;\n    };\n    const Mons$Screen$introduction = x0 => Mons$Screen$introduction$(x0);\n    const Mons$Screen$credits = ({\n        _: 'Mons.Screen.credits'\n    });\n\n    function List$elem$(_p$2, _a$3, _as$4) {\n        var List$elem$ = (_p$2, _a$3, _as$4) => ({\n            ctr: 'TCO',\n            arg: [_p$2, _a$3, _as$4]\n        });\n        var List$elem = _p$2 => _a$3 => _as$4 => List$elem$(_p$2, _a$3, _as$4);\n        var arg = [_p$2, _a$3, _as$4];\n        while (true) {\n            let [_p$2, _a$3, _as$4] = arg;\n            var R = (() => {\n                var self = _as$4;\n                switch (self._) {\n                    case 'List.nil':\n                        var $1670 = Bool$false;\n                        return $1670;\n                    case 'List.cons':\n                        var $1671 = self.head;\n                        var $1672 = self.tail;\n                        var self = _p$2(_a$3)($1671);\n                        if (self) {\n                            var $1674 = Bool$true;\n                            var $1673 = $1674;\n                        } else {\n                            var $1675 = List$elem$(_p$2, _a$3, $1672);\n                            var $1673 = $1675;\n                        };\n                        return $1673;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$elem = x0 => x1 => x2 => List$elem$(x0, x1, x2);\n\n    function Char$eql$(_a$1, _b$2) {\n        var $1676 = (_a$1 === _b$2);\n        return $1676;\n    };\n    const Char$eql = x0 => x1 => Char$eql$(x0, x1);\n\n    function Mons$is_walk_cmd$(_cmd$1) {\n        var $1677 = List$elem$(Char$eql, _cmd$1, List$cons$(87, List$cons$(65, List$cons$(83, List$cons$(68, List$cons$(119, List$cons$(97, List$cons$(115, List$cons$(100, List$nil)))))))));\n        return $1677;\n    };\n    const Mons$is_walk_cmd = x0 => Mons$is_walk_cmd$(x0);\n\n    function Mons$key_to_dir$(_key_code$1) {\n        var self = ((_key_code$1 === 65) || (_key_code$1 === 97));\n        if (self) {\n            var $1679 = Maybe$some$(Mons$Dir$left);\n            var $1678 = $1679;\n        } else {\n            var self = ((_key_code$1 === 68) || (_key_code$1 === 100));\n            if (self) {\n                var $1681 = Maybe$some$(Mons$Dir$right);\n                var $1680 = $1681;\n            } else {\n                var self = ((_key_code$1 === 87) || (_key_code$1 === 119));\n                if (self) {\n                    var $1683 = Maybe$some$(Mons$Dir$up);\n                    var $1682 = $1683;\n                } else {\n                    var self = ((_key_code$1 === 83) || (_key_code$1 === 115));\n                    if (self) {\n                        var $1685 = Maybe$some$(Mons$Dir$down);\n                        var $1684 = $1685;\n                    } else {\n                        var $1686 = Maybe$none;\n                        var $1684 = $1686;\n                    };\n                    var $1682 = $1684;\n                };\n                var $1680 = $1682;\n            };\n            var $1678 = $1680;\n        };\n        return $1678;\n    };\n    const Mons$key_to_dir = x0 => Mons$key_to_dir$(x0);\n\n    function Mons$Object$set_pad$(_obj$1, _pad$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1688 = self.kin;\n                var $1689 = self.dir;\n                var $1690 = self.pad;\n                var $1691 = self.ani;\n                var $1692 = self.dmg;\n                var $1693 = self.bag;\n                var $1694 = self.mon;\n                var $1695 = self.bos;\n                var $1696 = self.cap;\n                var $1697 = self.idl;\n                var $1698 = self.eff;\n                var $1699 = Mons$Object$new$($1688, $1689, _pad$2, $1691, $1692, $1693, $1694, $1695, $1696, $1697, $1698);\n                var $1687 = $1699;\n                break;\n        };\n        return $1687;\n    };\n    const Mons$Object$set_pad = x0 => x1 => Mons$Object$set_pad$(x0, x1);\n\n    function Mons$Pad$set_r$(_pad$1, _val$2) {\n        var self = _pad$1;\n        switch (self._) {\n            case 'Mons.Pad.new':\n                var $1701 = self.r;\n                var $1702 = self.u;\n                var $1703 = self.l;\n                var $1704 = self.d;\n                var $1705 = Mons$Pad$new$(_val$2, $1702, $1703, $1704);\n                var $1700 = $1705;\n                break;\n        };\n        return $1700;\n    };\n    const Mons$Pad$set_r = x0 => x1 => Mons$Pad$set_r$(x0, x1);\n\n    function Mons$Object$set_pad_r$(_obj$1, _val$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1707 = self.kin;\n                var $1708 = self.dir;\n                var $1709 = self.pad;\n                var $1710 = self.ani;\n                var $1711 = self.dmg;\n                var $1712 = self.bag;\n                var $1713 = self.mon;\n                var $1714 = self.bos;\n                var $1715 = self.cap;\n                var $1716 = self.idl;\n                var $1717 = self.eff;\n                var $1718 = Mons$Object$set_pad$(_obj$1, Mons$Pad$set_r$($1709, _val$2));\n                var $1706 = $1718;\n                break;\n        };\n        return $1706;\n    };\n    const Mons$Object$set_pad_r = x0 => x1 => Mons$Object$set_pad_r$(x0, x1);\n\n    function Mons$Pad$set_u$(_pad$1, _val$2) {\n        var self = _pad$1;\n        switch (self._) {\n            case 'Mons.Pad.new':\n                var $1720 = self.r;\n                var $1721 = self.u;\n                var $1722 = self.l;\n                var $1723 = self.d;\n                var $1724 = Mons$Pad$new$($1720, _val$2, $1722, $1723);\n                var $1719 = $1724;\n                break;\n        };\n        return $1719;\n    };\n    const Mons$Pad$set_u = x0 => x1 => Mons$Pad$set_u$(x0, x1);\n\n    function Mons$Object$set_pad_u$(_obj$1, _val$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1726 = self.kin;\n                var $1727 = self.dir;\n                var $1728 = self.pad;\n                var $1729 = self.ani;\n                var $1730 = self.dmg;\n                var $1731 = self.bag;\n                var $1732 = self.mon;\n                var $1733 = self.bos;\n                var $1734 = self.cap;\n                var $1735 = self.idl;\n                var $1736 = self.eff;\n                var $1737 = Mons$Object$set_pad$(_obj$1, Mons$Pad$set_u$($1728, _val$2));\n                var $1725 = $1737;\n                break;\n        };\n        return $1725;\n    };\n    const Mons$Object$set_pad_u = x0 => x1 => Mons$Object$set_pad_u$(x0, x1);\n\n    function Mons$Pad$set_l$(_pad$1, _val$2) {\n        var self = _pad$1;\n        switch (self._) {\n            case 'Mons.Pad.new':\n                var $1739 = self.r;\n                var $1740 = self.u;\n                var $1741 = self.l;\n                var $1742 = self.d;\n                var $1743 = Mons$Pad$new$($1739, $1740, _val$2, $1742);\n                var $1738 = $1743;\n                break;\n        };\n        return $1738;\n    };\n    const Mons$Pad$set_l = x0 => x1 => Mons$Pad$set_l$(x0, x1);\n\n    function Mons$Object$set_pad_l$(_obj$1, _val$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1745 = self.kin;\n                var $1746 = self.dir;\n                var $1747 = self.pad;\n                var $1748 = self.ani;\n                var $1749 = self.dmg;\n                var $1750 = self.bag;\n                var $1751 = self.mon;\n                var $1752 = self.bos;\n                var $1753 = self.cap;\n                var $1754 = self.idl;\n                var $1755 = self.eff;\n                var $1756 = Mons$Object$set_pad$(_obj$1, Mons$Pad$set_l$($1747, _val$2));\n                var $1744 = $1756;\n                break;\n        };\n        return $1744;\n    };\n    const Mons$Object$set_pad_l = x0 => x1 => Mons$Object$set_pad_l$(x0, x1);\n\n    function Mons$Pad$set_d$(_pad$1, _val$2) {\n        var self = _pad$1;\n        switch (self._) {\n            case 'Mons.Pad.new':\n                var $1758 = self.r;\n                var $1759 = self.u;\n                var $1760 = self.l;\n                var $1761 = self.d;\n                var $1762 = Mons$Pad$new$($1758, $1759, $1760, _val$2);\n                var $1757 = $1762;\n                break;\n        };\n        return $1757;\n    };\n    const Mons$Pad$set_d = x0 => x1 => Mons$Pad$set_d$(x0, x1);\n\n    function Mons$Object$set_pad_d$(_obj$1, _val$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1764 = self.kin;\n                var $1765 = self.dir;\n                var $1766 = self.pad;\n                var $1767 = self.ani;\n                var $1768 = self.dmg;\n                var $1769 = self.bag;\n                var $1770 = self.mon;\n                var $1771 = self.bos;\n                var $1772 = self.cap;\n                var $1773 = self.idl;\n                var $1774 = self.eff;\n                var $1775 = Mons$Object$set_pad$(_obj$1, Mons$Pad$set_d$($1766, _val$2));\n                var $1763 = $1775;\n                break;\n        };\n        return $1763;\n    };\n    const Mons$Object$set_pad_d = x0 => x1 => Mons$Object$set_pad_d$(x0, x1);\n\n    function Mons$dir_to_set_pad$(_dir$1) {\n        var self = _dir$1;\n        switch (self._) {\n            case 'Mons.Dir.right':\n                var $1777 = Mons$Object$set_pad_r;\n                var $1776 = $1777;\n                break;\n            case 'Mons.Dir.up':\n                var $1778 = Mons$Object$set_pad_u;\n                var $1776 = $1778;\n                break;\n            case 'Mons.Dir.left':\n                var $1779 = Mons$Object$set_pad_l;\n                var $1776 = $1779;\n                break;\n            case 'Mons.Dir.down':\n                var $1780 = Mons$Object$set_pad_d;\n                var $1776 = $1780;\n                break;\n        };\n        return $1776;\n    };\n    const Mons$dir_to_set_pad = x0 => Mons$dir_to_set_pad$(x0);\n\n    function Char$is_upper$(_char$1) {\n        var $1781 = ((_char$1 >= 65) && (_char$1 <= 90));\n        return $1781;\n    };\n    const Char$is_upper = x0 => Char$is_upper$(x0);\n\n    function Mons$Game$update$(_fn$1, _pos$2, _idx$3, _game$4) {\n        var self = _game$4;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1783 = self.usr;\n                var $1784 = self.pos;\n                var $1785 = self.map;\n                var $1786 = self.stt;\n                var $1787 = self.tik;\n                var _obj$10 = _fn$1(Mons$Map$get$(_pos$2, _idx$3, $1785));\n                var _map$11 = Mons$Map$set$(_pos$2, _idx$3, _obj$10, $1785);\n                var $1788 = Mons$Game$set_map$(_map$11, _game$4);\n                var $1782 = $1788;\n                break;\n        };\n        return $1782;\n    };\n    const Mons$Game$update = x0 => x1 => x2 => x3 => Mons$Game$update$(x0, x1, x2, x3);\n\n    function Mons$Game$walk$(_cmd$1, _pos$2, _idx$3, _game$4) {\n        var self = _game$4;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1790 = self.usr;\n                var $1791 = self.pos;\n                var $1792 = self.map;\n                var $1793 = self.stt;\n                var $1794 = self.tik;\n                var self = Mons$key_to_dir$(_cmd$1);\n                switch (self._) {\n                    case 'Maybe.none':\n                        var $1796 = _game$4;\n                        var $1795 = $1796;\n                        break;\n                    case 'Maybe.some':\n                        var $1797 = self.value;\n                        var _dir$11 = $1797;\n                        var _set_pad$12 = Mons$dir_to_set_pad$(_dir$11);\n                        var _flag$13 = Char$is_upper$(_cmd$1);\n                        var $1798 = Mons$Game$update$((_obj$14 => {\n                            var $1799 = _set_pad$12(_obj$14)(_flag$13);\n                            return $1799;\n                        }), _pos$2, _idx$3, _game$4);\n                        var $1795 = $1798;\n                        break;\n                };\n                var $1789 = $1795;\n                break;\n        };\n        return $1789;\n    };\n    const Mons$Game$walk = x0 => x1 => x2 => x3 => Mons$Game$walk$(x0, x1, x2, x3);\n\n    function Mons$Kind$is_mage$(_kind$1) {\n        var self = _kind$1;\n        switch (self._) {\n            case 'Mons.Kind.Mons':\n                var $1801 = self.ele;\n                var $1802 = self.boss;\n                var $1803 = self.pri_type;\n                var $1804 = self.agi;\n                var self = $1801;\n                switch (self._) {\n                    case 'Mons.Kind.mons.HERO':\n                        var $1806 = Bool$false;\n                        var $1805 = $1806;\n                        break;\n                    case 'Mons.Kind.mons.MAGE':\n                        var $1807 = Bool$true;\n                        var $1805 = $1807;\n                        break;\n                    case 'Mons.Kind.mons.BEHOLDER':\n                        var $1808 = Bool$false;\n                        var $1805 = $1808;\n                        break;\n                    case 'Mons.Kind.mons.ZOIO':\n                        var $1809 = Bool$false;\n                        var $1805 = $1809;\n                        break;\n                    case 'Mons.Kind.mons.CYCLOPE':\n                        var $1810 = Bool$false;\n                        var $1805 = $1810;\n                        break;\n                    case 'Mons.Kind.mons.POISOLICK':\n                        var $1811 = Bool$false;\n                        var $1805 = $1811;\n                        break;\n                    case 'Mons.Kind.mons.TROWL':\n                        var $1812 = Bool$false;\n                        var $1805 = $1812;\n                        break;\n                    case 'Mons.Kind.mons.MIMIC':\n                        var $1813 = Bool$false;\n                        var $1805 = $1813;\n                        break;\n                    case 'Mons.Kind.mons.MIMIC2':\n                        var $1814 = Bool$false;\n                        var $1805 = $1814;\n                        break;\n                    case 'Mons.Kind.mons.AZULA':\n                        var $1815 = Bool$false;\n                        var $1805 = $1815;\n                        break;\n                    case 'Mons.Kind.mons.EMERELDER':\n                        var $1816 = Bool$false;\n                        var $1805 = $1816;\n                        break;\n                    case 'Mons.Kind.mons.EMERELDER2':\n                        var $1817 = Bool$false;\n                        var $1805 = $1817;\n                        break;\n                };\n                var $1800 = $1805;\n                break;\n            case 'Mons.Kind.Const':\n                var $1818 = self.ele;\n                var $1819 = Bool$false;\n                var $1800 = $1819;\n                break;\n            case 'Mons.Kind.Terrain':\n                var $1820 = self.ele;\n                var $1821 = Bool$false;\n                var $1800 = $1821;\n                break;\n            case 'Mons.Kind.Interactive':\n                var $1822 = self.ele;\n                var $1823 = self.on;\n                var $1824 = self.eff;\n                var $1825 = Bool$false;\n                var $1800 = $1825;\n                break;\n        };\n        return $1800;\n    };\n    const Mons$Kind$is_mage = x0 => Mons$Kind$is_mage$(x0);\n\n    function Mons$Object$set_bag$(_bag$1, _obj$2) {\n        var self = _obj$2;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1827 = self.kin;\n                var $1828 = self.dir;\n                var $1829 = self.pad;\n                var $1830 = self.ani;\n                var $1831 = self.dmg;\n                var $1832 = self.bag;\n                var $1833 = self.mon;\n                var $1834 = self.bos;\n                var $1835 = self.cap;\n                var $1836 = self.idl;\n                var $1837 = self.eff;\n                var $1838 = Mons$Object$new$($1827, $1828, $1829, $1830, $1831, _bag$1, $1833, $1834, $1835, $1836, $1837);\n                var $1826 = $1838;\n                break;\n        };\n        return $1826;\n    };\n    const Mons$Object$set_bag = x0 => x1 => Mons$Object$set_bag$(x0, x1);\n    const Mons$Kind$mons$POISOLICK = ({\n        _: 'Mons.Kind.mons.POISOLICK'\n    });\n    const Mons$Kind$mons$AZULA = ({\n        _: 'Mons.Kind.mons.AZULA'\n    });\n    const Mons$Kind$mons$EMERELDER = ({\n        _: 'Mons.Kind.mons.EMERELDER'\n    });\n\n    function Mons$Object$set_dmg$(_obj$1, _dmg$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1840 = self.kin;\n                var $1841 = self.dir;\n                var $1842 = self.pad;\n                var $1843 = self.ani;\n                var $1844 = self.dmg;\n                var $1845 = self.bag;\n                var $1846 = self.mon;\n                var $1847 = self.bos;\n                var $1848 = self.cap;\n                var $1849 = self.idl;\n                var $1850 = self.eff;\n                var $1851 = Mons$Object$new$($1840, $1841, $1842, $1843, _dmg$2, $1845, $1846, $1847, $1848, $1849, $1850);\n                var $1839 = $1851;\n                break;\n        };\n        return $1839;\n    };\n    const Mons$Object$set_dmg = x0 => x1 => Mons$Object$set_dmg$(x0, x1);\n    const Nat$ltn = a0 => a1 => (a0 < a1);\n\n    function List$pure$(_x$2) {\n        var $1852 = List$cons$(_x$2, List$nil);\n        return $1852;\n    };\n    const List$pure = x0 => List$pure$(x0);\n\n    function List$append$(_as$2, _a$3) {\n        var self = _as$2;\n        switch (self._) {\n            case 'List.nil':\n                var $1854 = List$pure$(_a$3);\n                var $1853 = $1854;\n                break;\n            case 'List.cons':\n                var $1855 = self.head;\n                var $1856 = self.tail;\n                var $1857 = List$cons$($1855, List$append$($1856, _a$3));\n                var $1853 = $1857;\n                break;\n        };\n        return $1853;\n    };\n    const List$append = x0 => x1 => List$append$(x0, x1);\n\n    function Mons$Object$push_to_bag$(_obj$1, _hero$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1859 = self.kin;\n                var $1860 = self.dir;\n                var $1861 = self.pad;\n                var $1862 = self.ani;\n                var $1863 = self.dmg;\n                var $1864 = self.bag;\n                var $1865 = self.mon;\n                var $1866 = self.bos;\n                var $1867 = self.cap;\n                var $1868 = self.idl;\n                var $1869 = self.eff;\n                var self = _hero$2;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $1871 = self.kin;\n                        var $1872 = self.dir;\n                        var $1873 = self.pad;\n                        var $1874 = self.ani;\n                        var $1875 = self.dmg;\n                        var $1876 = self.bag;\n                        var $1877 = self.mon;\n                        var $1878 = self.bos;\n                        var $1879 = self.cap;\n                        var $1880 = self.idl;\n                        var $1881 = self.eff;\n                        var _qtd$25 = (list_length($1876));\n                        var self = $1859;\n                        switch (self._) {\n                            case 'Mons.Kind.Mons':\n                                var $1883 = self.ele;\n                                var $1884 = self.boss;\n                                var $1885 = self.pri_type;\n                                var $1886 = self.agi;\n                                var _obj$30 = Mons$Object$set_dmg$(_obj$1, 0);\n                                var self = (_qtd$25 < 3n);\n                                if (self) {\n                                    var _new_bag$31 = List$append$($1876, _obj$30);\n                                    var $1888 = Mons$Object$set_bag$(_new_bag$31, _hero$2);\n                                    var $1887 = $1888;\n                                } else {\n                                    var $1889 = _hero$2;\n                                    var $1887 = $1889;\n                                };\n                                var $1882 = $1887;\n                                break;\n                            case 'Mons.Kind.Const':\n                                var $1890 = self.ele;\n                                var $1891 = _hero$2;\n                                var $1882 = $1891;\n                                break;\n                            case 'Mons.Kind.Terrain':\n                                var $1892 = self.ele;\n                                var $1893 = _hero$2;\n                                var $1882 = $1893;\n                                break;\n                            case 'Mons.Kind.Interactive':\n                                var $1894 = self.ele;\n                                var $1895 = self.on;\n                                var $1896 = self.eff;\n                                var $1897 = _hero$2;\n                                var $1882 = $1897;\n                                break;\n                        };\n                        var $1870 = $1882;\n                        break;\n                };\n                var $1858 = $1870;\n                break;\n        };\n        return $1858;\n    };\n    const Mons$Object$push_to_bag = x0 => x1 => Mons$Object$push_to_bag$(x0, x1);\n\n    function Mons$initial_mons$(_hero_obj$1, _pos$2, _hero_idx$3, _game$4) {\n        var self = _hero_obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1899 = self.kin;\n                var $1900 = self.dir;\n                var $1901 = self.pad;\n                var $1902 = self.ani;\n                var $1903 = self.dmg;\n                var $1904 = self.bag;\n                var $1905 = self.mon;\n                var $1906 = self.bos;\n                var $1907 = self.cap;\n                var $1908 = self.idl;\n                var $1909 = self.eff;\n                var _hero_obj$16 = Mons$Object$set_bag$(List$nil, _hero_obj$1);\n                var _mon0_bag$17 = Mons$Object$new_of_kind$(Mons$Kind$Mons$(Mons$Kind$mons$POISOLICK, Bool$false, Mons$Type$normal, 2));\n                var _mon1_bag$18 = Mons$Object$new_of_kind$(Mons$Kind$Mons$(Mons$Kind$mons$AZULA, Bool$false, Mons$Type$normal, 2));\n                var _mon2_bag$19 = Mons$Object$new_of_kind$(Mons$Kind$Mons$(Mons$Kind$mons$EMERELDER, Bool$false, Mons$Type$normal, 2));\n                var _hero_obj$20 = Mons$Object$push_to_bag$(_mon0_bag$17, _hero_obj$16);\n                var _hero_obj$21 = Mons$Object$push_to_bag$(_mon1_bag$18, _hero_obj$20);\n                var _hero_obj$22 = Mons$Object$push_to_bag$(_mon2_bag$19, _hero_obj$21);\n                var $1910 = Mons$Game$map_set$(_pos$2, _hero_idx$3, _hero_obj$22, _game$4);\n                var $1898 = $1910;\n                break;\n        };\n        return $1898;\n    };\n    const Mons$initial_mons = x0 => x1 => x2 => x3 => Mons$initial_mons$(x0, x1, x2, x3);\n\n    function Mons$Screen$intro_select$(_idx$1) {\n        var $1911 = ({\n            _: 'Mons.Screen.intro_select',\n            'idx': _idx$1\n        });\n        return $1911;\n    };\n    const Mons$Screen$intro_select = x0 => Mons$Screen$intro_select$(x0);\n    const Mons$Type$earth = ({\n        _: 'Mons.Type.earth'\n    });\n\n    function Mons$Object$set_mon$(_idx$1, _obj$2) {\n        var self = _obj$2;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1913 = self.kin;\n                var $1914 = self.dir;\n                var $1915 = self.pad;\n                var $1916 = self.ani;\n                var $1917 = self.dmg;\n                var $1918 = self.bag;\n                var $1919 = self.mon;\n                var $1920 = self.bos;\n                var $1921 = self.cap;\n                var $1922 = self.idl;\n                var $1923 = self.eff;\n                var $1924 = Mons$Object$new$($1913, $1914, $1915, $1916, $1917, $1918, _idx$1, $1920, $1921, $1922, $1923);\n                var $1912 = $1924;\n                break;\n        };\n        return $1912;\n    };\n    const Mons$Object$set_mon = x0 => x1 => Mons$Object$set_mon$(x0, x1);\n\n    function Mons$Object$delete_init_mons$(_hero_obj$1) {\n        var self = _hero_obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $1926 = self.kin;\n                var $1927 = self.dir;\n                var $1928 = self.pad;\n                var $1929 = self.ani;\n                var $1930 = self.dmg;\n                var $1931 = self.bag;\n                var $1932 = self.mon;\n                var $1933 = self.bos;\n                var $1934 = self.cap;\n                var $1935 = self.idl;\n                var $1936 = self.eff;\n                var _get_mon$13 = List$at$(U32$to_nat$($1932), $1931);\n                var self = _get_mon$13;\n                switch (self._) {\n                    case 'Maybe.none':\n                        var $1938 = Mons$Object$new_of_kind$(Mons$Kind$Mons$(Mons$Kind$mons$HERO, Bool$false, Mons$Type$earth, 2));\n                        var _cur_mon$14 = $1938;\n                        break;\n                    case 'Maybe.some':\n                        var $1939 = self.value;\n                        var $1940 = $1939;\n                        var _cur_mon$14 = $1940;\n                        break;\n                };\n                var _hero_obj$15 = Mons$Object$set_bag$(List$nil, _hero_obj$1);\n                var _hero_obj$16 = Mons$Object$push_to_bag$(_cur_mon$14, _hero_obj$15);\n                var _hero_obj$17 = Mons$Object$set_mon$(0, _hero_obj$16);\n                var $1937 = _hero_obj$17;\n                var $1925 = $1937;\n                break;\n        };\n        return $1925;\n    };\n    const Mons$Object$delete_init_mons = x0 => Mons$Object$delete_init_mons$(x0);\n    const U32$gte = a0 => a1 => (a0 >= a1);\n\n    function Word$mod$(_a$2, _b$3) {\n        var Word$mod$ = (_a$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3]\n        });\n        var Word$mod = _a$2 => _b$3 => Word$mod$(_a$2, _b$3);\n        var arg = [_a$2, _b$3];\n        while (true) {\n            let [_a$2, _b$3] = arg;\n            var R = Word$mod$(_a$2, _b$3);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mod = x0 => x1 => Word$mod$(x0, x1);\n    const U32$mod = a0 => a1 => (a0 % a1);\n\n    function Mons$Game$adve_turn$(_hero_obj$1, _adve_obj$2, _game$3) {\n        var self = _game$3;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $1942 = self.usr;\n                var $1943 = self.pos;\n                var $1944 = self.map;\n                var $1945 = self.stt;\n                var $1946 = self.tik;\n                var self = _hero_obj$1;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $1948 = self.kin;\n                        var $1949 = self.dir;\n                        var $1950 = self.pad;\n                        var $1951 = self.ani;\n                        var $1952 = self.dmg;\n                        var $1953 = self.bag;\n                        var $1954 = self.mon;\n                        var $1955 = self.bos;\n                        var $1956 = self.cap;\n                        var $1957 = self.idl;\n                        var $1958 = self.eff;\n                        var self = _adve_obj$2;\n                        switch (self._) {\n                            case 'Mons.Object.new':\n                                var $1960 = self.kin;\n                                var $1961 = self.dir;\n                                var $1962 = self.pad;\n                                var $1963 = self.ani;\n                                var $1964 = self.dmg;\n                                var $1965 = self.bag;\n                                var $1966 = self.mon;\n                                var $1967 = self.bos;\n                                var $1968 = self.cap;\n                                var $1969 = self.idl;\n                                var $1970 = self.eff;\n                                var _adve_hp$31 = Mons$Object$remaining_hp$(_adve_obj$2);\n                                var _hero_hp$32 = Mons$Object$remaining_hp$(_hero_obj$1);\n                                var _qtd_mon_bag$33 = (Number((list_length($1953))));\n                                var _hero_pos$34 = Mons$Game$get_hero_pos$(_game$3);\n                                var self = _hero_pos$34;\n                                switch (self._) {\n                                    case 'Maybe.none':\n                                        var $1972 = 80;\n                                        var _pos_x$35 = $1972;\n                                        break;\n                                    case 'Maybe.some':\n                                        var $1973 = self.value;\n                                        var $1974 = (($1973 & 0xFFF));\n                                        var _pos_x$35 = $1974;\n                                        break;\n                                };\n                                var self = ((Math.max(_hero_hp$32 - _adve_hp$31, 0)) > 15);\n                                if (self) {\n                                    var $1975 = 2n;\n                                    var $1971 = $1975;\n                                } else {\n                                    var self = ((_hero_hp$32 > 30) && (_hero_hp$32 < 25));\n                                    if (self) {\n                                        var $1977 = 2n;\n                                        var $1976 = $1977;\n                                    } else {\n                                        var self = ((Math.max(_adve_hp$31 - _hero_hp$32, 0)) >= 8);\n                                        if (self) {\n                                            var $1979 = 1n;\n                                            var $1978 = $1979;\n                                        } else {\n                                            var self = ((_qtd_mon_bag$33 > 1) && (_hero_hp$32 > 30));\n                                            if (self) {\n                                                var $1981 = 1n;\n                                                var $1980 = $1981;\n                                            } else {\n                                                var self = (_hero_hp$32 === _adve_hp$31);\n                                                if (self) {\n                                                    var $1983 = 3n;\n                                                    var $1982 = $1983;\n                                                } else {\n                                                    var self = ((!((_pos_x$35 % 2) === 0)) && (_hero_hp$32 < 15));\n                                                    if (self) {\n                                                        var $1985 = 1n;\n                                                        var $1984 = $1985;\n                                                    } else {\n                                                        var self = ((Math.max(_adve_hp$31 - _hero_hp$32, 0)) > 15);\n                                                        if (self) {\n                                                            var $1987 = 0n;\n                                                            var $1986 = $1987;\n                                                        } else {\n                                                            var self = ((_adve_hp$31 > _hero_hp$32) && (_hero_hp$32 > 30));\n                                                            if (self) {\n                                                                var $1989 = 0n;\n                                                                var $1988 = $1989;\n                                                            } else {\n                                                                var self = (_hero_hp$32 > 20);\n                                                                if (self) {\n                                                                    var $1991 = 1n;\n                                                                    var $1990 = $1991;\n                                                                } else {\n                                                                    var self = (((_pos_x$35 % 2) === 0) && (_hero_hp$32 < 15));\n                                                                    if (self) {\n                                                                        var $1993 = 1n;\n                                                                        var $1992 = $1993;\n                                                                    } else {\n                                                                        var self = (_hero_hp$32 < 5);\n                                                                        if (self) {\n                                                                            var $1995 = 0n;\n                                                                            var $1994 = $1995;\n                                                                        } else {\n                                                                            var $1996 = 0n;\n                                                                            var $1994 = $1996;\n                                                                        };\n                                                                        var $1992 = $1994;\n                                                                    };\n                                                                    var $1990 = $1992;\n                                                                };\n                                                                var $1988 = $1990;\n                                                            };\n                                                            var $1986 = $1988;\n                                                        };\n                                                        var $1984 = $1986;\n                                                    };\n                                                    var $1982 = $1984;\n                                                };\n                                                var $1980 = $1982;\n                                            };\n                                            var $1978 = $1980;\n                                        };\n                                        var $1976 = $1978;\n                                    };\n                                    var $1971 = $1976;\n                                };\n                                var $1959 = $1971;\n                                break;\n                        };\n                        var $1947 = $1959;\n                        break;\n                };\n                var $1941 = $1947;\n                break;\n        };\n        return $1941;\n    };\n    const Mons$Game$adve_turn = x0 => x1 => x2 => Mons$Game$adve_turn$(x0, x1, x2);\n\n    function Mons$Effect$upd_initial_eff$(_eff$1) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $1998 = self.sleep;\n                var $1999 = self.burn;\n                var $2000 = self.protect;\n                var $2001 = self.minimize;\n                var $2002 = self.invulnerable;\n                var $2003 = self.hit;\n                var $2004 = self.poison;\n                var $2005 = self.swap_agi;\n                var $2006 = Mons$Effect$new$($1998, (Math.max($1999 - 1, 0)), $2000, $2001, $2002, 0, $2004, Bool$false);\n                var $1997 = $2006;\n                break;\n        };\n        return $1997;\n    };\n    const Mons$Effect$upd_initial_eff = x0 => Mons$Effect$upd_initial_eff$(x0);\n\n    function Mons$Object$set_eff$(_eff$1, _obj$2) {\n        var self = _obj$2;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2008 = self.kin;\n                var $2009 = self.dir;\n                var $2010 = self.pad;\n                var $2011 = self.ani;\n                var $2012 = self.dmg;\n                var $2013 = self.bag;\n                var $2014 = self.mon;\n                var $2015 = self.bos;\n                var $2016 = self.cap;\n                var $2017 = self.idl;\n                var $2018 = self.eff;\n                var $2019 = Mons$Object$new$($2008, $2009, $2010, $2011, $2012, $2013, $2014, $2015, $2016, $2017, _eff$1);\n                var $2007 = $2019;\n                break;\n        };\n        return $2007;\n    };\n    const Mons$Object$set_eff = x0 => x1 => Mons$Object$set_eff$(x0, x1);\n\n    function Mons$Skill$update_mon_obj$(_hero_obj$1, _obj_updated$2, _pos$3, _idx$4, _game$5) {\n        var self = _hero_obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2021 = self.kin;\n                var $2022 = self.dir;\n                var $2023 = self.pad;\n                var $2024 = self.ani;\n                var $2025 = self.dmg;\n                var $2026 = self.bag;\n                var $2027 = self.mon;\n                var $2028 = self.bos;\n                var $2029 = self.cap;\n                var $2030 = self.idl;\n                var $2031 = self.eff;\n                var _qtd$17 = (list_length($2026));\n                var self = (_qtd$17 === 0n);\n                if (self) {\n                    var $2033 = Mons$Game$map_set$(_pos$3, _idx$4, _obj_updated$2, _game$5);\n                    var $2032 = $2033;\n                } else {\n                    var _idx_nat$18 = U32$to_nat$($2027);\n                    var _new_bag$19 = List$update_at$(_idx_nat$18, (_a$19 => {\n                        var $2035 = _obj_updated$2;\n                        return $2035;\n                    }), $2026);\n                    var _hero_obj$20 = Mons$Object$set_bag$(_new_bag$19, _hero_obj$1);\n                    var $2034 = Mons$Game$map_set$(_pos$3, _idx$4, _hero_obj$20, _game$5);\n                    var $2032 = $2034;\n                };\n                var $2020 = $2032;\n                break;\n        };\n        return $2020;\n    };\n    const Mons$Skill$update_mon_obj = x0 => x1 => x2 => x3 => x4 => Mons$Skill$update_mon_obj$(x0, x1, x2, x3, x4);\n\n    function Mons$Effect$has_invulnerable$(_eff$1) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $2037 = self.sleep;\n                var $2038 = self.burn;\n                var $2039 = self.protect;\n                var $2040 = self.minimize;\n                var $2041 = self.invulnerable;\n                var $2042 = self.hit;\n                var $2043 = self.poison;\n                var $2044 = self.swap_agi;\n                var self = $2041;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $2046 = self.fst;\n                        var $2047 = self.snd;\n                        var $2048 = $2046;\n                        var $2045 = $2048;\n                        break;\n                };\n                var $2036 = $2045;\n                break;\n        };\n        return $2036;\n    };\n    const Mons$Effect$has_invulnerable = x0 => Mons$Effect$has_invulnerable$(x0);\n\n    function Mons$Effect$has_burn$(_eff$1) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $2050 = self.sleep;\n                var $2051 = self.burn;\n                var $2052 = self.protect;\n                var $2053 = self.minimize;\n                var $2054 = self.invulnerable;\n                var $2055 = self.hit;\n                var $2056 = self.poison;\n                var $2057 = self.swap_agi;\n                var $2058 = ($2051 > 0);\n                var $2049 = $2058;\n                break;\n        };\n        return $2049;\n    };\n    const Mons$Effect$has_burn = x0 => Mons$Effect$has_burn$(x0);\n\n    function Mons$Effect$has_hit$(_eff$1) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $2060 = self.sleep;\n                var $2061 = self.burn;\n                var $2062 = self.protect;\n                var $2063 = self.minimize;\n                var $2064 = self.invulnerable;\n                var $2065 = self.hit;\n                var $2066 = self.poison;\n                var $2067 = self.swap_agi;\n                var $2068 = ($2065 > 0);\n                var $2059 = $2068;\n                break;\n        };\n        return $2059;\n    };\n    const Mons$Effect$has_hit = x0 => Mons$Effect$has_hit$(x0);\n\n    function Mons$Effect$has_poison$(_eff$1) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $2070 = self.sleep;\n                var $2071 = self.burn;\n                var $2072 = self.protect;\n                var $2073 = self.minimize;\n                var $2074 = self.invulnerable;\n                var $2075 = self.hit;\n                var $2076 = self.poison;\n                var $2077 = self.swap_agi;\n                var $2078 = $2076;\n                var $2069 = $2078;\n                break;\n        };\n        return $2069;\n    };\n    const Mons$Effect$has_poison = x0 => Mons$Effect$has_poison$(x0);\n\n    function Mons$Skill$apply_inital_eff_dmg$(_eff$1, _mhp$2, _idx$3) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $2080 = self.sleep;\n                var $2081 = self.burn;\n                var $2082 = self.protect;\n                var $2083 = self.minimize;\n                var $2084 = self.invulnerable;\n                var $2085 = self.hit;\n                var $2086 = self.poison;\n                var $2087 = self.swap_agi;\n                var self = (_idx$3 === 1);\n                if (self) {\n                    var $2089 = \"adve \";\n                    var _player$12 = $2089;\n                } else {\n                    var $2090 = \"hero \";\n                    var _player$12 = $2090;\n                };\n                var self = Mons$Effect$has_invulnerable$(_eff$1);\n                if (self) {\n                    var $2091 = 0;\n                    var $2088 = $2091;\n                } else {\n                    var self = Mons$Effect$has_burn$(_eff$1);\n                    if (self) {\n                        var $2093 = ((_mhp$2 / 16) >>> 0);\n                        var _dmg_burn$13 = $2093;\n                    } else {\n                        var $2094 = 0;\n                        var _dmg_burn$13 = $2094;\n                    };\n                    var self = Mons$Effect$has_hit$(_eff$1);\n                    if (self) {\n                        var $2095 = $2085;\n                        var _dmg_hit$14 = $2095;\n                    } else {\n                        var $2096 = 0;\n                        var _dmg_hit$14 = $2096;\n                    };\n                    var self = Mons$Effect$has_poison$(_eff$1);\n                    if (self) {\n                        var $2097 = ((_mhp$2 / 16) >>> 0);\n                        var _dmg_poison$15 = $2097;\n                    } else {\n                        var $2098 = 0;\n                        var _dmg_poison$15 = $2098;\n                    };\n                    var _dmg$16 = ((_dmg_poison$15 + ((_dmg_burn$13 + _dmg_hit$14) >>> 0)) >>> 0);\n                    var $2092 = _dmg$16;\n                    var $2088 = $2092;\n                };\n                var $2079 = $2088;\n                break;\n        };\n        return $2079;\n    };\n    const Mons$Skill$apply_inital_eff_dmg = x0 => x1 => x2 => Mons$Skill$apply_inital_eff_dmg$(x0, x1, x2);\n\n    function Mons$Effect$has_protect$(_eff$1) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $2100 = self.sleep;\n                var $2101 = self.burn;\n                var $2102 = self.protect;\n                var $2103 = self.minimize;\n                var $2104 = self.invulnerable;\n                var $2105 = self.hit;\n                var $2106 = self.poison;\n                var $2107 = self.swap_agi;\n                var _turn$10 = Pair$fst$($2102);\n                var $2108 = (_turn$10 === 1);\n                var $2099 = $2108;\n                break;\n        };\n        return $2099;\n    };\n    const Mons$Effect$has_protect = x0 => Mons$Effect$has_protect$(x0);\n\n    function Mons$Effect$has_minimize$(_eff$1) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $2110 = self.sleep;\n                var $2111 = self.burn;\n                var $2112 = self.protect;\n                var $2113 = self.minimize;\n                var $2114 = self.invulnerable;\n                var $2115 = self.hit;\n                var $2116 = self.poison;\n                var $2117 = self.swap_agi;\n                var self = $2113;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $2119 = self.fst;\n                        var $2120 = self.snd;\n                        var $2121 = ($2119 > 0);\n                        var $2118 = $2121;\n                        break;\n                };\n                var $2109 = $2118;\n                break;\n        };\n        return $2109;\n    };\n    const Mons$Effect$has_minimize = x0 => Mons$Effect$has_minimize$(x0);\n\n    function Mons$Object$get_dmg$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2123 = self.kin;\n                var $2124 = self.dir;\n                var $2125 = self.pad;\n                var $2126 = self.ani;\n                var $2127 = self.dmg;\n                var $2128 = self.bag;\n                var $2129 = self.mon;\n                var $2130 = self.bos;\n                var $2131 = self.cap;\n                var $2132 = self.idl;\n                var $2133 = self.eff;\n                var $2134 = $2127;\n                var $2122 = $2134;\n                break;\n        };\n        return $2122;\n    };\n    const Mons$Object$get_dmg = x0 => Mons$Object$get_dmg$(x0);\n\n    function Mons$Object$hit$(_obj$1, _dmg$2) {\n        var $2135 = Mons$Object$set_dmg$(_obj$1, ((Mons$Object$get_dmg$(_obj$1) + _dmg$2) >>> 0));\n        return $2135;\n    };\n    const Mons$Object$hit = x0 => x1 => Mons$Object$hit$(x0, x1);\n\n    function Mons$Skill$damage_eff$(_obj$1, _pos$2, _idx$3, _dmg$4, _game$5) {\n        var _obj_mon$6 = Mons$Object$get_current_mon$(_obj$1);\n        var self = _obj_mon$6;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2137 = self.kin;\n                var $2138 = self.dir;\n                var $2139 = self.pad;\n                var $2140 = self.ani;\n                var $2141 = self.dmg;\n                var $2142 = self.bag;\n                var $2143 = self.mon;\n                var $2144 = self.bos;\n                var $2145 = self.cap;\n                var $2146 = self.idl;\n                var $2147 = self.eff;\n                var self = Mons$Effect$has_invulnerable$($2147);\n                if (self) {\n                    var $2149 = _game$5;\n                    var $2148 = $2149;\n                } else {\n                    var self = (_idx$3 === 1);\n                    if (self) {\n                        var $2151 = \"adve \";\n                        var _player$18 = $2151;\n                    } else {\n                        var $2152 = \"hero \";\n                        var _player$18 = $2152;\n                    };\n                    var self = Mons$Effect$has_protect$($2147);\n                    if (self) {\n                        var $2153 = ((_dmg$4 / 2) >>> 0);\n                        var _dmg$19 = $2153;\n                    } else {\n                        var $2154 = _dmg$4;\n                        var _dmg$19 = $2154;\n                    };\n                    var self = Mons$Effect$has_minimize$($2147);\n                    if (self) {\n                        var $2155 = (Math.max(_dmg$19 - ((_dmg$19 / 4) >>> 0), 0));\n                        var _dmg$20 = $2155;\n                    } else {\n                        var $2156 = _dmg$19;\n                        var _dmg$20 = $2156;\n                    };\n                    var _obj_mon$21 = Mons$Object$hit$(_obj_mon$6, _dmg$20);\n                    var $2150 = Mons$Skill$update_mon_obj$(_obj$1, _obj_mon$21, _pos$2, _idx$3, _game$5);\n                    var $2148 = $2150;\n                };\n                var $2136 = $2148;\n                break;\n        };\n        return $2136;\n    };\n    const Mons$Skill$damage_eff = x0 => x1 => x2 => x3 => x4 => Mons$Skill$damage_eff$(x0, x1, x2, x3, x4);\n\n    function Mons$Skill$apply_inital_eff$(_hero_idx$1, _adve_idx$2, _pos$3, _game$4) {\n        var self = _game$4;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $2158 = self.usr;\n                var $2159 = self.pos;\n                var $2160 = self.map;\n                var $2161 = self.stt;\n                var $2162 = self.tik;\n                var _hero_obj$10 = Mons$Map$get$(_pos$3, _hero_idx$1, $2160);\n                var _hero_mon_obj$11 = Mons$Object$get_current_mon$(_hero_obj$10);\n                var self = _hero_mon_obj$11;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $2164 = self.kin;\n                        var $2165 = self.dir;\n                        var $2166 = self.pad;\n                        var $2167 = self.ani;\n                        var $2168 = self.dmg;\n                        var $2169 = self.bag;\n                        var $2170 = self.mon;\n                        var $2171 = self.bos;\n                        var $2172 = self.cap;\n                        var $2173 = self.idl;\n                        var $2174 = self.eff;\n                        var self = Mons$Kind$attr$($2164);\n                        switch (self._) {\n                            case 'Mons.Attr.new':\n                                var $2176 = self.blocks;\n                                var $2177 = self.mhp;\n                                var $2178 = self.atk;\n                                var $2179 = self.name;\n                                var $2180 = self.wlk;\n                                var $2181 = self.idl;\n                                var $2182 = self.pic;\n                                var $2183 = self.battle_spr;\n                                var $2184 = self.skills;\n                                var $2185 = self.pos;\n                                var _upd_effect$33 = Mons$Effect$upd_initial_eff$($2174);\n                                var _hero_mon_obj$34 = Mons$Object$set_eff$(_upd_effect$33, _hero_mon_obj$11);\n                                var _game$35 = Mons$Skill$update_mon_obj$(_hero_obj$10, _hero_mon_obj$34, _pos$3, _hero_idx$1, _game$4);\n                                var _hero_dmg$36 = Mons$Skill$apply_inital_eff_dmg$($2174, $2177, _hero_idx$1);\n                                var _game$37 = Mons$Skill$damage_eff$(_hero_obj$10, _pos$3, _hero_idx$1, _hero_dmg$36, _game$35);\n                                var _adve_obj$38 = Mons$Map$get$(_pos$3, _adve_idx$2, $2160);\n                                var self = _adve_obj$38;\n                                switch (self._) {\n                                    case 'Mons.Object.new':\n                                        var $2187 = self.kin;\n                                        var $2188 = self.dir;\n                                        var $2189 = self.pad;\n                                        var $2190 = self.ani;\n                                        var $2191 = self.dmg;\n                                        var $2192 = self.bag;\n                                        var $2193 = self.mon;\n                                        var $2194 = self.bos;\n                                        var $2195 = self.cap;\n                                        var $2196 = self.idl;\n                                        var $2197 = self.eff;\n                                        var self = Mons$Kind$attr$($2187);\n                                        switch (self._) {\n                                            case 'Mons.Attr.new':\n                                                var $2199 = self.blocks;\n                                                var $2200 = self.mhp;\n                                                var $2201 = self.atk;\n                                                var $2202 = self.name;\n                                                var $2203 = self.wlk;\n                                                var $2204 = self.idl;\n                                                var $2205 = self.pic;\n                                                var $2206 = self.battle_spr;\n                                                var $2207 = self.skills;\n                                                var $2208 = self.pos;\n                                                var _upd_effect$60 = Mons$Effect$upd_initial_eff$($2197);\n                                                var _adve_obj$61 = Mons$Object$set_eff$(_upd_effect$60, _adve_obj$38);\n                                                var _adve_dmg$62 = Mons$Skill$apply_inital_eff_dmg$($2197, $2200, _adve_idx$2);\n                                                var _game$63 = Mons$Skill$damage_eff$(_adve_obj$61, _pos$3, _adve_idx$2, _adve_dmg$62, _game$37);\n                                                var $2209 = _game$63;\n                                                var $2198 = $2209;\n                                                break;\n                                        };\n                                        var $2186 = $2198;\n                                        break;\n                                };\n                                var $2175 = $2186;\n                                break;\n                        };\n                        var $2163 = $2175;\n                        break;\n                };\n                var $2157 = $2163;\n                break;\n        };\n        return $2157;\n    };\n    const Mons$Skill$apply_inital_eff = x0 => x1 => x2 => x3 => Mons$Skill$apply_inital_eff$(x0, x1, x2, x3);\n\n    function Mons$Effect$has_sleep$(_eff$1) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $2211 = self.sleep;\n                var $2212 = self.burn;\n                var $2213 = self.protect;\n                var $2214 = self.minimize;\n                var $2215 = self.invulnerable;\n                var $2216 = self.hit;\n                var $2217 = self.poison;\n                var $2218 = self.swap_agi;\n                var _turn$10 = Pair$fst$($2211);\n                var $2219 = (_turn$10 === 1);\n                var $2210 = $2219;\n                break;\n        };\n        return $2210;\n    };\n    const Mons$Effect$has_sleep = x0 => Mons$Effect$has_sleep$(x0);\n\n    function Mons$Type$skill_n_type$(_val$1, _source_obj$2, _target_obj$3) {\n        var $2220 = 1;\n        return $2220;\n    };\n    const Mons$Type$skill_n_type = x0 => x1 => x2 => Mons$Type$skill_n_type$(x0, x1, x2);\n\n    function Mons$Object$heal$(_obj$1, _val$2) {\n        var $2221 = Mons$Object$set_dmg$(_obj$1, (Math.max(Mons$Object$get_dmg$(_obj$1) - _val$2, 0)));\n        return $2221;\n    };\n    const Mons$Object$heal = x0 => x1 => Mons$Object$heal$(x0, x1);\n\n    function Mons$Skill$heal_eff$(_obj$1, _pos$2, _idx$3, _val$4, _game$5) {\n        var _obj_updated$6 = Mons$Object$heal$(Mons$Object$get_current_mon$(_obj$1), _val$4);\n        var self = Mons$Object$is_obj_defeated$(_obj_updated$6);\n        if (self) {\n            var $2223 = _game$5;\n            var $2222 = $2223;\n        } else {\n            var $2224 = Mons$Skill$update_mon_obj$(_obj$1, _obj_updated$6, _pos$2, _idx$3, _game$5);\n            var $2222 = $2224;\n        };\n        return $2222;\n    };\n    const Mons$Skill$heal_eff = x0 => x1 => x2 => x3 => x4 => Mons$Skill$heal_eff$(x0, x1, x2, x3, x4);\n\n    function Mons$Effect$set_invulnerable$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2226 = self.kin;\n                var $2227 = self.dir;\n                var $2228 = self.pad;\n                var $2229 = self.ani;\n                var $2230 = self.dmg;\n                var $2231 = self.bag;\n                var $2232 = self.mon;\n                var $2233 = self.bos;\n                var $2234 = self.cap;\n                var $2235 = self.idl;\n                var $2236 = self.eff;\n                var self = $2236;\n                switch (self._) {\n                    case 'Mons.Effect.new':\n                        var $2238 = self.sleep;\n                        var $2239 = self.burn;\n                        var $2240 = self.protect;\n                        var $2241 = self.minimize;\n                        var $2242 = self.invulnerable;\n                        var $2243 = self.hit;\n                        var $2244 = self.poison;\n                        var $2245 = self.swap_agi;\n                        var self = $2242;\n                        switch (self._) {\n                            case 'Pair.new':\n                                var $2247 = self.fst;\n                                var $2248 = self.snd;\n                                var _new_eff$23 = Mons$Effect$new$($2238, $2239, $2240, $2241, Pair$new$(Bool$true, Bool$true), $2243, $2244, $2245);\n                                var $2249 = Mons$Object$set_eff$(_new_eff$23, _obj$1);\n                                var $2246 = $2249;\n                                break;\n                        };\n                        var $2237 = $2246;\n                        break;\n                };\n                var $2225 = $2237;\n                break;\n        };\n        return $2225;\n    };\n    const Mons$Effect$set_invulnerable = x0 => Mons$Effect$set_invulnerable$(x0);\n\n    function Mons$Skill$invulnerable_eff$(_obj$1, _pos$2, _idx$3, _game$4) {\n        var _obj_updated$5 = Mons$Effect$set_invulnerable$(Mons$Object$get_current_mon$(_obj$1));\n        var $2250 = Mons$Skill$update_mon_obj$(_obj$1, _obj_updated$5, _pos$2, _idx$3, _game$4);\n        return $2250;\n    };\n    const Mons$Skill$invulnerable_eff = x0 => x1 => x2 => x3 => Mons$Skill$invulnerable_eff$(x0, x1, x2, x3);\n\n    function Mons$Effect$set_hit$(_obj$1, _val$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2252 = self.kin;\n                var $2253 = self.dir;\n                var $2254 = self.pad;\n                var $2255 = self.ani;\n                var $2256 = self.dmg;\n                var $2257 = self.bag;\n                var $2258 = self.mon;\n                var $2259 = self.bos;\n                var $2260 = self.cap;\n                var $2261 = self.idl;\n                var $2262 = self.eff;\n                var self = $2262;\n                switch (self._) {\n                    case 'Mons.Effect.new':\n                        var $2264 = self.sleep;\n                        var $2265 = self.burn;\n                        var $2266 = self.protect;\n                        var $2267 = self.minimize;\n                        var $2268 = self.invulnerable;\n                        var $2269 = self.hit;\n                        var $2270 = self.poison;\n                        var $2271 = self.swap_agi;\n                        var _new_eff$22 = Mons$Effect$new$($2264, $2265, $2266, $2267, $2268, _val$2, $2270, $2271);\n                        var $2272 = Mons$Object$set_eff$(_new_eff$22, _obj$1);\n                        var $2263 = $2272;\n                        break;\n                };\n                var $2251 = $2263;\n                break;\n        };\n        return $2251;\n    };\n    const Mons$Effect$set_hit = x0 => x1 => Mons$Effect$set_hit$(x0, x1);\n\n    function Mons$Skill$hit_next_eff$(_obj$1, _val$2, _pos$3, _idx$4, _game$5) {\n        var _obj_updated$6 = Mons$Effect$set_hit$(Mons$Object$get_current_mon$(_obj$1), _val$2);\n        var $2273 = Mons$Skill$update_mon_obj$(_obj$1, _obj_updated$6, _pos$3, _idx$4, _game$5);\n        return $2273;\n    };\n    const Mons$Skill$hit_next_eff = x0 => x1 => x2 => x3 => x4 => Mons$Skill$hit_next_eff$(x0, x1, x2, x3, x4);\n\n    function Mons$Effect$set_burn$(_obj$1, _turns$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2275 = self.kin;\n                var $2276 = self.dir;\n                var $2277 = self.pad;\n                var $2278 = self.ani;\n                var $2279 = self.dmg;\n                var $2280 = self.bag;\n                var $2281 = self.mon;\n                var $2282 = self.bos;\n                var $2283 = self.cap;\n                var $2284 = self.idl;\n                var $2285 = self.eff;\n                var self = $2285;\n                switch (self._) {\n                    case 'Mons.Effect.new':\n                        var $2287 = self.sleep;\n                        var $2288 = self.burn;\n                        var $2289 = self.protect;\n                        var $2290 = self.minimize;\n                        var $2291 = self.invulnerable;\n                        var $2292 = self.hit;\n                        var $2293 = self.poison;\n                        var $2294 = self.swap_agi;\n                        var _new_eff$22 = Mons$Effect$new$($2287, _turns$2, $2289, $2290, $2291, $2292, $2293, $2294);\n                        var $2295 = Mons$Object$set_eff$(_new_eff$22, _obj$1);\n                        var $2286 = $2295;\n                        break;\n                };\n                var $2274 = $2286;\n                break;\n        };\n        return $2274;\n    };\n    const Mons$Effect$set_burn = x0 => x1 => Mons$Effect$set_burn$(x0, x1);\n\n    function Mons$Skill$burn_eff$(_obj$1, _pos$2, _idx$3, _turns$4, _game$5) {\n        var _obj_updated$6 = Mons$Effect$set_burn$(Mons$Object$get_current_mon$(_obj$1), _turns$4);\n        var $2296 = Mons$Skill$update_mon_obj$(_obj$1, _obj_updated$6, _pos$2, _idx$3, _game$5);\n        return $2296;\n    };\n    const Mons$Skill$burn_eff = x0 => x1 => x2 => x3 => x4 => Mons$Skill$burn_eff$(x0, x1, x2, x3, x4);\n\n    function Mons$Effect$set_protect$(_obj$1, _turn$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2298 = self.kin;\n                var $2299 = self.dir;\n                var $2300 = self.pad;\n                var $2301 = self.ani;\n                var $2302 = self.dmg;\n                var $2303 = self.bag;\n                var $2304 = self.mon;\n                var $2305 = self.bos;\n                var $2306 = self.cap;\n                var $2307 = self.idl;\n                var $2308 = self.eff;\n                var self = $2308;\n                switch (self._) {\n                    case 'Mons.Effect.new':\n                        var $2310 = self.sleep;\n                        var $2311 = self.burn;\n                        var $2312 = self.protect;\n                        var $2313 = self.minimize;\n                        var $2314 = self.invulnerable;\n                        var $2315 = self.hit;\n                        var $2316 = self.poison;\n                        var $2317 = self.swap_agi;\n                        var _new_eff$22 = Mons$Effect$new$($2310, $2311, Pair$new$(_turn$2, Bool$true), $2313, $2314, $2315, $2316, $2317);\n                        var $2318 = Mons$Object$set_eff$(_new_eff$22, _obj$1);\n                        var $2309 = $2318;\n                        break;\n                };\n                var $2297 = $2309;\n                break;\n        };\n        return $2297;\n    };\n    const Mons$Effect$set_protect = x0 => x1 => Mons$Effect$set_protect$(x0, x1);\n\n    function Mons$Skill$protect_eff$(_obj$1, _pos$2, _idx$3, _turn$4, _game$5) {\n        var _obj_updated$6 = Mons$Effect$set_protect$(Mons$Object$get_current_mon$(_obj$1), _turn$4);\n        var $2319 = Mons$Skill$update_mon_obj$(_obj$1, _obj_updated$6, _pos$2, _idx$3, _game$5);\n        return $2319;\n    };\n    const Mons$Skill$protect_eff = x0 => x1 => x2 => x3 => x4 => Mons$Skill$protect_eff$(x0, x1, x2, x3, x4);\n\n    function Mons$Effect$set_poison$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2321 = self.kin;\n                var $2322 = self.dir;\n                var $2323 = self.pad;\n                var $2324 = self.ani;\n                var $2325 = self.dmg;\n                var $2326 = self.bag;\n                var $2327 = self.mon;\n                var $2328 = self.bos;\n                var $2329 = self.cap;\n                var $2330 = self.idl;\n                var $2331 = self.eff;\n                var self = $2331;\n                switch (self._) {\n                    case 'Mons.Effect.new':\n                        var $2333 = self.sleep;\n                        var $2334 = self.burn;\n                        var $2335 = self.protect;\n                        var $2336 = self.minimize;\n                        var $2337 = self.invulnerable;\n                        var $2338 = self.hit;\n                        var $2339 = self.poison;\n                        var $2340 = self.swap_agi;\n                        var _new_eff$21 = Mons$Effect$new$($2333, $2334, $2335, $2336, $2337, $2338, Bool$true, $2340);\n                        var $2341 = Mons$Object$set_eff$(_new_eff$21, _obj$1);\n                        var $2332 = $2341;\n                        break;\n                };\n                var $2320 = $2332;\n                break;\n        };\n        return $2320;\n    };\n    const Mons$Effect$set_poison = x0 => Mons$Effect$set_poison$(x0);\n\n    function Mons$Skill$poison_eff$(_obj$1, _pos$2, _idx$3, _game$4) {\n        var $2342 = Mons$Skill$update_mon_obj$(_obj$1, Mons$Effect$set_poison$(Mons$Object$get_current_mon$(_obj$1)), _pos$2, _idx$3, _game$4);\n        return $2342;\n    };\n    const Mons$Skill$poison_eff = x0 => x1 => x2 => x3 => Mons$Skill$poison_eff$(x0, x1, x2, x3);\n\n    function Mons$Skill$critical_hit$(_mhp$1, _hit_val$2, _perc$3, _tik$4) {\n        var self = ((_tik$4 % _perc$3) === 0);\n        if (self) {\n            var $2344 = ((((_mhp$1 / 16) >>> 0) + _hit_val$2) >>> 0);\n            var $2343 = $2344;\n        } else {\n            var $2345 = _hit_val$2;\n            var $2343 = $2345;\n        };\n        return $2343;\n    };\n    const Mons$Skill$critical_hit = x0 => x1 => x2 => x3 => Mons$Skill$critical_hit$(x0, x1, x2, x3);\n\n    function Mons$Skill$is_critical$(_perc$1, _tik$2) {\n        var $2346 = ((_tik$2 % _perc$1) === 0);\n        return $2346;\n    };\n    const Mons$Skill$is_critical = x0 => x1 => Mons$Skill$is_critical$(x0, x1);\n\n    function Mons$Kind$get_agi$(_kind$1) {\n        var self = _kind$1;\n        switch (self._) {\n            case 'Mons.Kind.Mons':\n                var $2348 = self.ele;\n                var $2349 = self.boss;\n                var $2350 = self.pri_type;\n                var $2351 = self.agi;\n                var $2352 = $2351;\n                var $2347 = $2352;\n                break;\n            case 'Mons.Kind.Const':\n                var $2353 = self.ele;\n                var $2354 = 3;\n                var $2347 = $2354;\n                break;\n            case 'Mons.Kind.Terrain':\n                var $2355 = self.ele;\n                var $2356 = 3;\n                var $2347 = $2356;\n                break;\n            case 'Mons.Kind.Interactive':\n                var $2357 = self.ele;\n                var $2358 = self.on;\n                var $2359 = self.eff;\n                var $2360 = 3;\n                var $2347 = $2360;\n                break;\n        };\n        return $2347;\n    };\n    const Mons$Kind$get_agi = x0 => Mons$Kind$get_agi$(x0);\n\n    function Mons$Effect$set_minimize$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2362 = self.kin;\n                var $2363 = self.dir;\n                var $2364 = self.pad;\n                var $2365 = self.ani;\n                var $2366 = self.dmg;\n                var $2367 = self.bag;\n                var $2368 = self.mon;\n                var $2369 = self.bos;\n                var $2370 = self.cap;\n                var $2371 = self.idl;\n                var $2372 = self.eff;\n                var self = $2372;\n                switch (self._) {\n                    case 'Mons.Effect.new':\n                        var $2374 = self.sleep;\n                        var $2375 = self.burn;\n                        var $2376 = self.protect;\n                        var $2377 = self.minimize;\n                        var $2378 = self.invulnerable;\n                        var $2379 = self.hit;\n                        var $2380 = self.poison;\n                        var $2381 = self.swap_agi;\n                        var _new_eff$21 = Mons$Effect$new$($2374, $2375, $2376, Pair$new$(2, Bool$true), $2378, $2379, $2380, $2381);\n                        var $2382 = Mons$Object$set_eff$(_new_eff$21, _obj$1);\n                        var $2373 = $2382;\n                        break;\n                };\n                var $2361 = $2373;\n                break;\n        };\n        return $2361;\n    };\n    const Mons$Effect$set_minimize = x0 => Mons$Effect$set_minimize$(x0);\n\n    function Mons$Skill$minimize_eff$(_obj$1, _pos$2, _idx$3, _game$4) {\n        var _obj_updated$5 = Mons$Effect$set_minimize$(Mons$Object$get_current_mon$(_obj$1));\n        var $2383 = Mons$Skill$update_mon_obj$(_obj$1, _obj_updated$5, _pos$2, _idx$3, _game$4);\n        return $2383;\n    };\n    const Mons$Skill$minimize_eff = x0 => x1 => x2 => x3 => Mons$Skill$minimize_eff$(x0, x1, x2, x3);\n\n    function Mons$Effect$set_sleep$(_obj$1, _turn$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2385 = self.kin;\n                var $2386 = self.dir;\n                var $2387 = self.pad;\n                var $2388 = self.ani;\n                var $2389 = self.dmg;\n                var $2390 = self.bag;\n                var $2391 = self.mon;\n                var $2392 = self.bos;\n                var $2393 = self.cap;\n                var $2394 = self.idl;\n                var $2395 = self.eff;\n                var self = $2395;\n                switch (self._) {\n                    case 'Mons.Effect.new':\n                        var $2397 = self.sleep;\n                        var $2398 = self.burn;\n                        var $2399 = self.protect;\n                        var $2400 = self.minimize;\n                        var $2401 = self.invulnerable;\n                        var $2402 = self.hit;\n                        var $2403 = self.poison;\n                        var $2404 = self.swap_agi;\n                        var _new_eff$22 = Mons$Effect$new$(Pair$new$(_turn$2, Bool$true), $2398, $2399, $2400, $2401, $2402, $2403, $2404);\n                        var $2405 = Mons$Object$set_eff$(_new_eff$22, _obj$1);\n                        var $2396 = $2405;\n                        break;\n                };\n                var $2384 = $2396;\n                break;\n        };\n        return $2384;\n    };\n    const Mons$Effect$set_sleep = x0 => x1 => Mons$Effect$set_sleep$(x0, x1);\n\n    function Mons$Skill$sleep_eff$(_obj$1, _pos$2, _idx$3, _turn$4, _game$5) {\n        var _obj_updated$6 = Mons$Effect$set_sleep$(Mons$Object$get_current_mon$(_obj$1), _turn$4);\n        var $2406 = Mons$Skill$update_mon_obj$(_obj$1, _obj_updated$6, _pos$2, _idx$3, _game$5);\n        return $2406;\n    };\n    const Mons$Skill$sleep_eff = x0 => x1 => x2 => x3 => x4 => Mons$Skill$sleep_eff$(x0, x1, x2, x3, x4);\n\n    function Mons$Skill$cast$(_pos$1, _source$2, _target$3, _skill$4, _game$5) {\n        var self = _game$5;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $2408 = self.usr;\n                var $2409 = self.pos;\n                var $2410 = self.map;\n                var $2411 = self.stt;\n                var $2412 = self.tik;\n                var _source_obj$11 = Mons$Map$get$(_pos$1, _source$2, $2410);\n                var _source_mon$12 = Mons$Object$get_current_mon$(_source_obj$11);\n                var _target_obj$13 = Mons$Map$get$(_pos$1, _target$3, $2410);\n                var _target_mon$14 = Mons$Object$get_current_mon$(_target_obj$13);\n                var self = _source_mon$12;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $2414 = self.kin;\n                        var $2415 = self.dir;\n                        var $2416 = self.pad;\n                        var $2417 = self.ani;\n                        var $2418 = self.dmg;\n                        var $2419 = self.bag;\n                        var $2420 = self.mon;\n                        var $2421 = self.bos;\n                        var $2422 = self.cap;\n                        var $2423 = self.idl;\n                        var $2424 = self.eff;\n                        var self = $2424;\n                        switch (self._) {\n                            case 'Mons.Effect.new':\n                                var $2426 = self.sleep;\n                                var $2427 = self.burn;\n                                var $2428 = self.protect;\n                                var $2429 = self.minimize;\n                                var $2430 = self.invulnerable;\n                                var $2431 = self.hit;\n                                var $2432 = self.poison;\n                                var $2433 = self.swap_agi;\n                                var self = _target_mon$14;\n                                switch (self._) {\n                                    case 'Mons.Object.new':\n                                        var $2435 = self.kin;\n                                        var $2436 = self.dir;\n                                        var $2437 = self.pad;\n                                        var $2438 = self.ani;\n                                        var $2439 = self.dmg;\n                                        var $2440 = self.bag;\n                                        var $2441 = self.mon;\n                                        var $2442 = self.bos;\n                                        var $2443 = self.cap;\n                                        var $2444 = self.idl;\n                                        var $2445 = self.eff;\n                                        var self = $2445;\n                                        switch (self._) {\n                                            case 'Mons.Effect.new':\n                                                var $2447 = self.sleep;\n                                                var $2448 = self.burn;\n                                                var $2449 = self.protect;\n                                                var $2450 = self.minimize;\n                                                var $2451 = self.invulnerable;\n                                                var $2452 = self.hit;\n                                                var $2453 = self.poison;\n                                                var $2454 = self.swap_agi;\n                                                var self = Mons$Kind$attr$($2414);\n                                                switch (self._) {\n                                                    case 'Mons.Attr.new':\n                                                        var $2456 = self.blocks;\n                                                        var $2457 = self.mhp;\n                                                        var $2458 = self.atk;\n                                                        var $2459 = self.name;\n                                                        var $2460 = self.wlk;\n                                                        var $2461 = self.idl;\n                                                        var $2462 = self.pic;\n                                                        var $2463 = self.battle_spr;\n                                                        var $2464 = self.skills;\n                                                        var $2465 = self.pos;\n                                                        var self = Mons$Kind$attr$($2435);\n                                                        switch (self._) {\n                                                            case 'Mons.Attr.new':\n                                                                var $2467 = self.blocks;\n                                                                var $2468 = self.mhp;\n                                                                var $2469 = self.atk;\n                                                                var $2470 = self.name;\n                                                                var $2471 = self.wlk;\n                                                                var $2472 = self.idl;\n                                                                var $2473 = self.pic;\n                                                                var $2474 = self.battle_spr;\n                                                                var $2475 = self.skills;\n                                                                var $2476 = self.pos;\n                                                                var _light_val$73 = 2;\n                                                                var _medium_val$74 = 4;\n                                                                var _high_val$75 = 6;\n                                                                var _can_attack$76 = (!Mons$Effect$has_sleep$($2424));\n                                                                var self = _can_attack$76;\n                                                                if (self) {\n                                                                    var self = _skill$4;\n                                                                    switch (self._) {\n                                                                        case 'Mons.Skill.hit_4':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_medium_val$74, _source_mon$12, _target_mon$14);\n                                                                            var $2479 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                            var $2478 = $2479;\n                                                                            break;\n                                                                        case 'Mons.Skill.hit_2':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_light_val$73, _source_mon$12, _target_mon$14);\n                                                                            var $2480 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                            var $2478 = $2480;\n                                                                            break;\n                                                                        case 'Mons.Skill.heal':\n                                                                            var $2481 = Mons$Skill$heal_eff$(_source_obj$11, _pos$1, _source$2, 3, _game$5);\n                                                                            var $2478 = $2481;\n                                                                            break;\n                                                                        case 'Mons.Skill.none':\n                                                                            var $2482 = _game$5;\n                                                                            var $2478 = $2482;\n                                                                            break;\n                                                                        case 'Mons.Skill.run':\n                                                                            var $2483 = _game$5;\n                                                                            var $2478 = $2483;\n                                                                            break;\n                                                                        case 'Mons.Skill.dig':\n                                                                            var _game$77 = Mons$Skill$invulnerable_eff$(_source_obj$11, _pos$1, _source$2, _game$5);\n                                                                            var _game$78 = Mons$Skill$hit_next_eff$(_target_obj$13, 3, _pos$1, _target$3, _game$77);\n                                                                            var $2484 = _game$78;\n                                                                            var $2478 = $2484;\n                                                                            break;\n                                                                        case 'Mons.Skill.sand_tomb':\n                                                                            var _game$77 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, Mons$Type$skill_n_type$(_light_val$73, _source_mon$12, _target_mon$14), _game$5);\n                                                                            var _game$78 = Mons$Skill$burn_eff$(_target_obj$13, _pos$1, _target$3, 5, _game$77);\n                                                                            var $2485 = _game$78;\n                                                                            var $2478 = $2485;\n                                                                            break;\n                                                                        case 'Mons.Skill.protect':\n                                                                            var self = Pair$snd$($2428);\n                                                                            if (self) {\n                                                                                var $2487 = _game$5;\n                                                                                var $2486 = $2487;\n                                                                            } else {\n                                                                                var $2488 = Mons$Skill$protect_eff$(_source_obj$11, _pos$1, _source$2, 2, _game$5);\n                                                                                var $2486 = $2488;\n                                                                            };\n                                                                            var $2478 = $2486;\n                                                                            break;\n                                                                        case 'Mons.Skill.slam':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_high_val$75, _source_mon$12, _target_mon$14);\n                                                                            var $2489 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                            var $2478 = $2489;\n                                                                            break;\n                                                                        case 'Mons.Skill.counter':\n                                                                            var _game$77 = Mons$Skill$heal_eff$(_source_obj$11, _pos$1, _source$2, _light_val$73, _game$5);\n                                                                            var $2490 = Mons$Skill$burn_eff$(_target_obj$13, _pos$1, _target$3, 5, _game$77);\n                                                                            var $2478 = $2490;\n                                                                            break;\n                                                                        case 'Mons.Skill.recover':\n                                                                            var _val$77 = ((Mons$Object$remaining_hp$(_source_mon$12) / 4) >>> 0);\n                                                                            var _game$78 = Mons$Skill$poison_eff$(_source_obj$11, _pos$1, _source$2, _game$5);\n                                                                            var $2491 = Mons$Skill$heal_eff$(_source_obj$11, _pos$1, _source$2, _val$77, _game$78);\n                                                                            var $2478 = $2491;\n                                                                            break;\n                                                                        case 'Mons.Skill.rock_smash':\n                                                                            var _val$77 = Mons$Skill$critical_hit$($2468, _light_val$73, 2, $2412);\n                                                                            var _game$78 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                            var $2492 = _game$78;\n                                                                            var $2478 = $2492;\n                                                                            break;\n                                                                        case 'Mons.Skill.crunch':\n                                                                            var _val$77 = Mons$Skill$critical_hit$($2468, _medium_val$74, 4, $2412);\n                                                                            var _game$78 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                            var $2493 = _game$78;\n                                                                            var $2478 = $2493;\n                                                                            break;\n                                                                        case 'Mons.Skill.sludge_bomb':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_light_val$73, _source_mon$12, _target_mon$14);\n                                                                            var _game$78 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                            var self = Mons$Skill$is_critical$(3, $2412);\n                                                                            if (self) {\n                                                                                var $2495 = Mons$Skill$poison_eff$(_target_obj$13, _pos$1, _target$3, _game$78);\n                                                                                var $2494 = $2495;\n                                                                            } else {\n                                                                                var $2496 = _game$78;\n                                                                                var $2494 = $2496;\n                                                                            };\n                                                                            var $2478 = $2494;\n                                                                            break;\n                                                                        case 'Mons.Skill.gyro_ball':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_medium_val$74, _source_mon$12, _target_mon$14);\n                                                                            var self = (Mons$Kind$get_agi$($2435) > Mons$Kind$get_agi$($2414));\n                                                                            if (self) {\n                                                                                var $2498 = ((((_val$77 / 2) >>> 0) + _val$77) >>> 0);\n                                                                                var _val$78 = $2498;\n                                                                            } else {\n                                                                                var $2499 = _val$77;\n                                                                                var _val$78 = $2499;\n                                                                            };\n                                                                            var _game$79 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$78, _game$5);\n                                                                            var $2497 = _game$79;\n                                                                            var $2478 = $2497;\n                                                                            break;\n                                                                        case 'Mons.Skill.iron_defense':\n                                                                            var $2500 = Mons$Skill$minimize_eff$(_source_obj$11, _pos$1, _source$2, _game$5);\n                                                                            var $2478 = $2500;\n                                                                            break;\n                                                                        case 'Mons.Skill.super_fang':\n                                                                            var _adve_dmg$77 = ((Mons$Object$remaining_hp$(_source_mon$12) / 4) >>> 0);\n                                                                            var _game$78 = Mons$Skill$burn_eff$(_source_obj$11, _pos$1, _target$3, 2, _game$5);\n                                                                            var _game$79 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _adve_dmg$77, _game$78);\n                                                                            var $2501 = _game$79;\n                                                                            var $2478 = $2501;\n                                                                            break;\n                                                                        case 'Mons.Skill.hypnosis':\n                                                                            var self = (Mons$Skill$is_critical$(2, $2412) && Mons$Effect$has_sleep$($2445));\n                                                                            if (self) {\n                                                                                var $2503 = Mons$Skill$sleep_eff$(_target_obj$13, _pos$1, _target$3, 2, _game$5);\n                                                                                var $2502 = $2503;\n                                                                            } else {\n                                                                                var $2504 = _game$5;\n                                                                                var $2502 = $2504;\n                                                                            };\n                                                                            var $2478 = $2502;\n                                                                            break;\n                                                                        case 'Mons.Skill.dream_eater':\n                                                                            var self = Mons$Effect$has_sleep$($2445);\n                                                                            if (self) {\n                                                                                var _val$77 = Mons$Type$skill_n_type$(_high_val$75, _source_mon$12, _target_mon$14);\n                                                                                var _game$78 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                                var $2506 = Mons$Skill$heal_eff$(_source_obj$11, _pos$1, _source$2, _val$77, _game$78);\n                                                                                var $2505 = $2506;\n                                                                            } else {\n                                                                                var $2507 = _game$5;\n                                                                                var $2505 = $2507;\n                                                                            };\n                                                                            var $2478 = $2505;\n                                                                            break;\n                                                                        case 'Mons.Skill.wing_attack':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_high_val$75, _source_mon$12, _target_mon$14);\n                                                                            var $2508 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                            var $2478 = $2508;\n                                                                            break;\n                                                                        case 'Mons.Skill.moonlight':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_medium_val$74, _source_mon$12, _target_mon$14);\n                                                                            var self = Mons$Skill$is_critical$(5, $2412);\n                                                                            if (self) {\n                                                                                var _game$78 = Mons$Skill$sleep_eff$(_target_obj$13, _pos$1, _target$3, 2, _game$5);\n                                                                                var $2510 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$78);\n                                                                                var $2509 = $2510;\n                                                                            } else {\n                                                                                var $2511 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                                var $2509 = $2511;\n                                                                            };\n                                                                            var $2478 = $2509;\n                                                                            break;\n                                                                        case 'Mons.Skill.play_rough':\n                                                                            var _val$77 = Mons$Skill$critical_hit$($2468, _medium_val$74, 5, $2412);\n                                                                            var $2512 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                            var $2478 = $2512;\n                                                                            break;\n                                                                        case 'Mons.Skill.psychic':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_light_val$73, _source_mon$12, _target_mon$14);\n                                                                            var self = Mons$Skill$is_critical$(10, $2412);\n                                                                            if (self) {\n                                                                                var _game$78 = Mons$Skill$sleep_eff$(_target_obj$13, _pos$1, _target$3, 1, _game$5);\n                                                                                var _game$79 = Mons$Skill$hit_next_eff$(_target_obj$13, 3, _pos$1, _target$3, _game$78);\n                                                                                var $2514 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$79);\n                                                                                var $2513 = $2514;\n                                                                            } else {\n                                                                                var $2515 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                                var $2513 = $2515;\n                                                                            };\n                                                                            var $2478 = $2513;\n                                                                            break;\n                                                                        case 'Mons.Skill.ancient_power':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_medium_val$74, _source_mon$12, _target_mon$14);\n                                                                            var self = Mons$Skill$is_critical$(10, $2412);\n                                                                            if (self) {\n                                                                                var _game$78 = Mons$Skill$sleep_eff$(_target_obj$13, _pos$1, _target$3, 1, _game$5);\n                                                                                var $2517 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$78);\n                                                                                var $2516 = $2517;\n                                                                            } else {\n                                                                                var $2518 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                                var $2516 = $2518;\n                                                                            };\n                                                                            var $2478 = $2516;\n                                                                            break;\n                                                                        case 'Mons.Skill.thunder_wave':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_high_val$75, _source_mon$12, _target_mon$14);\n                                                                            var $2519 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                            var $2478 = $2519;\n                                                                            break;\n                                                                        case 'Mons.Skill.charge':\n                                                                            var _val$77 = Mons$Type$skill_n_type$(_medium_val$74, _source_mon$12, _target_mon$14);\n                                                                            var self = Mons$Effect$has_minimize$($2445);\n                                                                            if (self) {\n                                                                                var $2521 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, ((_val$77 * 2) >>> 0), _game$5);\n                                                                                var $2520 = $2521;\n                                                                            } else {\n                                                                                var $2522 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, _val$77, _game$5);\n                                                                                var $2520 = $2522;\n                                                                            };\n                                                                            var $2478 = $2520;\n                                                                            break;\n                                                                        case 'Mons.Skill.agility':\n                                                                            var $2523 = _game$5;\n                                                                            var $2478 = $2523;\n                                                                            break;\n                                                                        case 'Mons.Skill.hero_kill':\n                                                                            var $2524 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, 40, _game$5);\n                                                                            var $2478 = $2524;\n                                                                            break;\n                                                                        case 'Mons.Skill.nightmare':\n                                                                            var self = Mons$Effect$has_sleep$($2445);\n                                                                            if (self) {\n                                                                                var _hp$77 = Mons$Object$remaining_hp$(_target_mon$14);\n                                                                                var $2526 = Mons$Skill$damage_eff$(_target_obj$13, _pos$1, _target$3, ((_hp$77 / 5) >>> 0), _game$5);\n                                                                                var $2525 = $2526;\n                                                                            } else {\n                                                                                var $2527 = _game$5;\n                                                                                var $2525 = $2527;\n                                                                            };\n                                                                            var $2478 = $2525;\n                                                                            break;\n                                                                    };\n                                                                    var $2477 = $2478;\n                                                                } else {\n                                                                    var $2528 = _game$5;\n                                                                    var $2477 = $2528;\n                                                                };\n                                                                var $2466 = $2477;\n                                                                break;\n                                                        };\n                                                        var $2455 = $2466;\n                                                        break;\n                                                };\n                                                var $2446 = $2455;\n                                                break;\n                                        };\n                                        var $2434 = $2446;\n                                        break;\n                                };\n                                var $2425 = $2434;\n                                break;\n                        };\n                        var $2413 = $2425;\n                        break;\n                };\n                var $2407 = $2413;\n                break;\n        };\n        return $2407;\n    };\n    const Mons$Skill$cast = x0 => x1 => x2 => x3 => x4 => Mons$Skill$cast$(x0, x1, x2, x3, x4);\n    const Mons$Skill$run = ({\n        _: 'Mons.Skill.run'\n    });\n\n    function Mons$Game$hero_start_attacking$(_hero_kin$1, _adve_kin$2) {\n        var _hero_agi$3 = Mons$Kind$get_agi$(_hero_kin$1);\n        var _adve_agi$4 = Mons$Kind$get_agi$(_adve_kin$2);\n        var $2529 = ((_hero_agi$3 < _adve_agi$4) || (_hero_agi$3 === _adve_agi$4));\n        return $2529;\n    };\n    const Mons$Game$hero_start_attacking = x0 => x1 => Mons$Game$hero_start_attacking$(x0, x1);\n\n    function Mons$Game$exec_turn$(_hero_obj$1, _adve_obj$2, _pos$3, _hero_idx$4, _adve_idx$5, _code_skill$6, _turn$7, _game$8) {\n        var self = _game$8;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $2531 = self.usr;\n                var $2532 = self.pos;\n                var $2533 = self.map;\n                var $2534 = self.stt;\n                var $2535 = self.tik;\n                var _hero_mon_obj$14 = Mons$Object$get_current_mon$(_hero_obj$1);\n                var self = _hero_mon_obj$14;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $2537 = self.kin;\n                        var $2538 = self.dir;\n                        var $2539 = self.pad;\n                        var $2540 = self.ani;\n                        var $2541 = self.dmg;\n                        var $2542 = self.bag;\n                        var $2543 = self.mon;\n                        var $2544 = self.bos;\n                        var $2545 = self.cap;\n                        var $2546 = self.idl;\n                        var $2547 = self.eff;\n                        var self = _adve_obj$2;\n                        switch (self._) {\n                            case 'Mons.Object.new':\n                                var $2549 = self.kin;\n                                var $2550 = self.dir;\n                                var $2551 = self.pad;\n                                var $2552 = self.ani;\n                                var $2553 = self.dmg;\n                                var $2554 = self.bag;\n                                var $2555 = self.mon;\n                                var $2556 = self.bos;\n                                var $2557 = self.cap;\n                                var $2558 = self.idl;\n                                var $2559 = self.eff;\n                                var _hero_skill$37 = Mons$Game$get_skills_at$(_code_skill$6, _hero_mon_obj$14);\n                                var _adve_skill_code$38 = Mons$Game$adve_turn$(_hero_obj$1, _adve_obj$2, _game$8);\n                                var _adve_skill$39 = Mons$Game$get_skills_at$(_adve_skill_code$38, _adve_obj$2);\n                                var self = (!Mons$Turn$is_active$(_turn$7));\n                                if (self) {\n                                    var _game$40 = Mons$Skill$apply_inital_eff$(_hero_idx$4, _adve_idx$5, _pos$3, _game$8);\n                                    var self = (_code_skill$6 === 4n);\n                                    if (self) {\n                                        var _game$41 = Mons$Skill$cast$(_pos$3, _adve_idx$5, _hero_idx$4, _adve_skill$39, _game$40);\n                                        var _game$42 = Mons$Skill$cast$(_pos$3, _hero_idx$4, _adve_idx$5, Mons$Skill$run, _game$41);\n                                        var _turn$43 = Mons$Turn$new$(Bool$true, Mons$Skill$run, _adve_skill$39, 5);\n                                        var $2562 = Mons$Game$set_stt$(Mons$Screen$game$(46, _turn$43), _game$42);\n                                        var $2561 = $2562;\n                                    } else {\n                                        var self = Mons$Game$hero_start_attacking$($2537, $2549);\n                                        if (self) {\n                                            var _game$41 = Mons$Skill$cast$(_pos$3, _hero_idx$4, _adve_idx$5, _hero_skill$37, _game$40);\n                                            var _game$42 = Mons$Skill$cast$(_pos$3, _adve_idx$5, _hero_idx$4, _adve_skill$39, _game$41);\n                                            var _turn$43 = Mons$Turn$new$(Bool$true, _hero_skill$37, _adve_skill$39, 2);\n                                            var $2564 = Mons$Game$set_stt$(Mons$Screen$game$(46, _turn$43), _game$42);\n                                            var $2563 = $2564;\n                                        } else {\n                                            var _game$41 = Mons$Skill$cast$(_pos$3, _adve_idx$5, _hero_idx$4, _adve_skill$39, _game$40);\n                                            var _game$42 = Mons$Skill$cast$(_pos$3, _hero_idx$4, _adve_idx$5, _hero_skill$37, _game$41);\n                                            var _turn$43 = Mons$Turn$new$(Bool$false, _hero_skill$37, _adve_skill$39, 2);\n                                            var $2565 = Mons$Game$set_stt$(Mons$Screen$game$(46, _turn$43), _game$42);\n                                            var $2563 = $2565;\n                                        };\n                                        var $2561 = $2563;\n                                    };\n                                    var $2560 = $2561;\n                                } else {\n                                    var $2566 = _game$8;\n                                    var $2560 = $2566;\n                                };\n                                var $2548 = $2560;\n                                break;\n                        };\n                        var $2536 = $2548;\n                        break;\n                };\n                var $2530 = $2536;\n                break;\n        };\n        return $2530;\n    };\n    const Mons$Game$exec_turn = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Mons$Game$exec_turn$(x0, x1, x2, x3, x4, x5, x6, x7);\n\n    function Mons$Kind$is_mon_area$(_adve_kin$1) {\n        var self = _adve_kin$1;\n        switch (self._) {\n            case 'Mons.Kind.Mons':\n                var $2568 = self.ele;\n                var $2569 = self.boss;\n                var $2570 = self.pri_type;\n                var $2571 = self.agi;\n                var $2572 = Bool$false;\n                var $2567 = $2572;\n                break;\n            case 'Mons.Kind.Const':\n                var $2573 = self.ele;\n                var $2574 = Bool$false;\n                var $2567 = $2574;\n                break;\n            case 'Mons.Kind.Terrain':\n                var $2575 = self.ele;\n                var self = $2575;\n                switch (self._) {\n                    case 'Mons.Kind.terrain.VOID':\n                        var $2577 = Bool$false;\n                        var $2576 = $2577;\n                        break;\n                    case 'Mons.Kind.terrain.VOID_BLACK':\n                        var $2578 = Bool$false;\n                        var $2576 = $2578;\n                        break;\n                    case 'Mons.Kind.terrain.FLOOR':\n                        var $2579 = self.lvl;\n                        var $2580 = self.model;\n                        var $2581 = Bool$false;\n                        var $2576 = $2581;\n                        break;\n                    case 'Mons.Kind.terrain.GRASS_PLANT':\n                        var $2582 = Bool$false;\n                        var $2576 = $2582;\n                        break;\n                    case 'Mons.Kind.terrain.BUSH':\n                        var $2583 = self.model;\n                        var $2584 = Bool$false;\n                        var $2576 = $2584;\n                        break;\n                    case 'Mons.Kind.terrain.PLANT_0':\n                        var $2585 = Bool$false;\n                        var $2576 = $2585;\n                        break;\n                    case 'Mons.Kind.terrain.SAND_0':\n                        var $2586 = Bool$false;\n                        var $2576 = $2586;\n                        break;\n                    case 'Mons.Kind.terrain.PATH_BLOCKER':\n                        var $2587 = self.lvl;\n                        var $2588 = self.model;\n                        var $2589 = Bool$false;\n                        var $2576 = $2589;\n                        break;\n                    case 'Mons.Kind.terrain.MID_CITY':\n                        var $2590 = self.row;\n                        var $2591 = self.column;\n                        var $2592 = Bool$false;\n                        var $2576 = $2592;\n                        break;\n                    case 'Mons.Kind.terrain.STAIRS':\n                        var $2593 = self.row;\n                        var $2594 = self.column;\n                        var $2595 = Bool$false;\n                        var $2576 = $2595;\n                        break;\n                    case 'Mons.Kind.terrain.MON_AREA':\n                        var $2596 = self.pos_mon;\n                        var $2597 = Bool$true;\n                        var $2576 = $2597;\n                        break;\n                };\n                var $2567 = $2576;\n                break;\n            case 'Mons.Kind.Interactive':\n                var $2598 = self.ele;\n                var $2599 = self.on;\n                var $2600 = self.eff;\n                var $2601 = Bool$false;\n                var $2567 = $2601;\n                break;\n        };\n        return $2567;\n    };\n    const Mons$Kind$is_mon_area = x0 => Mons$Kind$is_mon_area$(x0);\n\n    function Mons$Kind$area_mon_pos$(_adve_kin$1, _hero_pos$2) {\n        var self = _adve_kin$1;\n        switch (self._) {\n            case 'Mons.Kind.Mons':\n                var $2603 = self.ele;\n                var $2604 = self.boss;\n                var $2605 = self.pri_type;\n                var $2606 = self.agi;\n                var $2607 = _hero_pos$2;\n                var $2602 = $2607;\n                break;\n            case 'Mons.Kind.Const':\n                var $2608 = self.ele;\n                var $2609 = _hero_pos$2;\n                var $2602 = $2609;\n                break;\n            case 'Mons.Kind.Terrain':\n                var $2610 = self.ele;\n                var self = $2610;\n                switch (self._) {\n                    case 'Mons.Kind.terrain.VOID':\n                        var $2612 = _hero_pos$2;\n                        var $2611 = $2612;\n                        break;\n                    case 'Mons.Kind.terrain.VOID_BLACK':\n                        var $2613 = _hero_pos$2;\n                        var $2611 = $2613;\n                        break;\n                    case 'Mons.Kind.terrain.FLOOR':\n                        var $2614 = self.lvl;\n                        var $2615 = self.model;\n                        var $2616 = _hero_pos$2;\n                        var $2611 = $2616;\n                        break;\n                    case 'Mons.Kind.terrain.GRASS_PLANT':\n                        var $2617 = _hero_pos$2;\n                        var $2611 = $2617;\n                        break;\n                    case 'Mons.Kind.terrain.BUSH':\n                        var $2618 = self.model;\n                        var $2619 = _hero_pos$2;\n                        var $2611 = $2619;\n                        break;\n                    case 'Mons.Kind.terrain.PLANT_0':\n                        var $2620 = _hero_pos$2;\n                        var $2611 = $2620;\n                        break;\n                    case 'Mons.Kind.terrain.SAND_0':\n                        var $2621 = _hero_pos$2;\n                        var $2611 = $2621;\n                        break;\n                    case 'Mons.Kind.terrain.PATH_BLOCKER':\n                        var $2622 = self.lvl;\n                        var $2623 = self.model;\n                        var $2624 = _hero_pos$2;\n                        var $2611 = $2624;\n                        break;\n                    case 'Mons.Kind.terrain.MID_CITY':\n                        var $2625 = self.row;\n                        var $2626 = self.column;\n                        var $2627 = _hero_pos$2;\n                        var $2611 = $2627;\n                        break;\n                    case 'Mons.Kind.terrain.STAIRS':\n                        var $2628 = self.row;\n                        var $2629 = self.column;\n                        var $2630 = _hero_pos$2;\n                        var $2611 = $2630;\n                        break;\n                    case 'Mons.Kind.terrain.MON_AREA':\n                        var $2631 = self.pos_mon;\n                        var $2632 = $2631;\n                        var $2611 = $2632;\n                        break;\n                };\n                var $2602 = $2611;\n                break;\n            case 'Mons.Kind.Interactive':\n                var $2633 = self.ele;\n                var $2634 = self.on;\n                var $2635 = self.eff;\n                var $2636 = _hero_pos$2;\n                var $2602 = $2636;\n                break;\n        };\n        return $2602;\n    };\n    const Mons$Kind$area_mon_pos = x0 => x1 => Mons$Kind$area_mon_pos$(x0, x1);\n\n    function Mons$Screen$inventory$(_idx$1) {\n        var $2637 = ({\n            _: 'Mons.Screen.inventory',\n            'idx': _idx$1\n        });\n        return $2637;\n    };\n    const Mons$Screen$inventory = x0 => Mons$Screen$inventory$(x0);\n\n    function Mons$Skill$clear_after_battle$(_hero_idx$1, _adve_idx$2, _pos$3, _game$4) {\n        var self = _game$4;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $2639 = self.usr;\n                var $2640 = self.pos;\n                var $2641 = self.map;\n                var $2642 = self.stt;\n                var $2643 = self.tik;\n                var _hero_obj$10 = Mons$Map$get$(_pos$3, _hero_idx$1, $2641);\n                var _hero_mon_obj$11 = Mons$Object$get_current_mon$(_hero_obj$10);\n                var _adve_obj$12 = Mons$Map$get$(_pos$3, _adve_idx$2, $2641);\n                var _hero_mon_obj$13 = Mons$Object$set_eff$(Mons$Effect$clear, _hero_mon_obj$11);\n                var _game$14 = Mons$Skill$update_mon_obj$(_hero_obj$10, _hero_mon_obj$13, _pos$3, _hero_idx$1, _game$4);\n                var _adve_obj$15 = Mons$Object$set_eff$(Mons$Effect$clear, _adve_obj$12);\n                var _game$16 = Mons$Skill$update_mon_obj$(_adve_obj$15, _adve_obj$15, _pos$3, _adve_idx$2, _game$14);\n                var $2644 = _game$16;\n                var $2638 = $2644;\n                break;\n        };\n        return $2638;\n    };\n    const Mons$Skill$clear_after_battle = x0 => x1 => x2 => x3 => Mons$Skill$clear_after_battle$(x0, x1, x2, x3);\n\n    function Mons$Object$set_cap$(_cap$1, _obj$2) {\n        var self = _obj$2;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2646 = self.kin;\n                var $2647 = self.dir;\n                var $2648 = self.pad;\n                var $2649 = self.ani;\n                var $2650 = self.dmg;\n                var $2651 = self.bag;\n                var $2652 = self.mon;\n                var $2653 = self.bos;\n                var $2654 = self.cap;\n                var $2655 = self.idl;\n                var $2656 = self.eff;\n                var $2657 = Mons$Object$new$($2646, $2647, $2648, $2649, $2650, $2651, $2652, $2653, _cap$1, $2655, $2656);\n                var $2645 = $2657;\n                break;\n        };\n        return $2645;\n    };\n    const Mons$Object$set_cap = x0 => x1 => Mons$Object$set_cap$(x0, x1);\n\n    function Mons$Object$add_defeated_mon$(_obj$1, _hero$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2659 = self.kin;\n                var $2660 = self.dir;\n                var $2661 = self.pad;\n                var $2662 = self.ani;\n                var $2663 = self.dmg;\n                var $2664 = self.bag;\n                var $2665 = self.mon;\n                var $2666 = self.bos;\n                var $2667 = self.cap;\n                var $2668 = self.idl;\n                var $2669 = self.eff;\n                var self = _hero$2;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $2671 = self.kin;\n                        var $2672 = self.dir;\n                        var $2673 = self.pad;\n                        var $2674 = self.ani;\n                        var $2675 = self.dmg;\n                        var $2676 = self.bag;\n                        var $2677 = self.mon;\n                        var $2678 = self.bos;\n                        var $2679 = self.cap;\n                        var $2680 = self.idl;\n                        var $2681 = self.eff;\n                        var self = $2659;\n                        switch (self._) {\n                            case 'Mons.Kind.Mons':\n                                var $2683 = self.ele;\n                                var $2684 = self.boss;\n                                var $2685 = self.pri_type;\n                                var $2686 = self.agi;\n                                var _qtd_mons$29 = Pair$fst$($2679);\n                                var _mons_defeated$30 = Pair$snd$($2679);\n                                var _new_cap$31 = Pair$new$(_qtd_mons$29, List$append$(_mons_defeated$30, _obj$1));\n                                var $2687 = Mons$Object$set_cap$(_new_cap$31, _hero$2);\n                                var $2682 = $2687;\n                                break;\n                            case 'Mons.Kind.Const':\n                                var $2688 = self.ele;\n                                var $2689 = _hero$2;\n                                var $2682 = $2689;\n                                break;\n                            case 'Mons.Kind.Terrain':\n                                var $2690 = self.ele;\n                                var $2691 = _hero$2;\n                                var $2682 = $2691;\n                                break;\n                            case 'Mons.Kind.Interactive':\n                                var $2692 = self.ele;\n                                var $2693 = self.on;\n                                var $2694 = self.eff;\n                                var $2695 = _hero$2;\n                                var $2682 = $2695;\n                                break;\n                        };\n                        var $2670 = $2682;\n                        break;\n                };\n                var $2658 = $2670;\n                break;\n        };\n        return $2658;\n    };\n    const Mons$Object$add_defeated_mon = x0 => x1 => Mons$Object$add_defeated_mon$(x0, x1);\n\n    function Mons$Object$set_bos$(_bos$1, _obj$2) {\n        var self = _obj$2;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2697 = self.kin;\n                var $2698 = self.dir;\n                var $2699 = self.pad;\n                var $2700 = self.ani;\n                var $2701 = self.dmg;\n                var $2702 = self.bag;\n                var $2703 = self.mon;\n                var $2704 = self.bos;\n                var $2705 = self.cap;\n                var $2706 = self.idl;\n                var $2707 = self.eff;\n                var $2708 = Mons$Object$new$($2697, $2698, $2699, $2700, $2701, $2702, $2703, _bos$1, $2705, $2706, $2707);\n                var $2696 = $2708;\n                break;\n        };\n        return $2696;\n    };\n    const Mons$Object$set_bos = x0 => x1 => Mons$Object$set_bos$(x0, x1);\n\n    function Mons$Object$capture_boss$(_boss$1, _hero$2) {\n        var self = _boss$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2710 = self.kin;\n                var $2711 = self.dir;\n                var $2712 = self.pad;\n                var $2713 = self.ani;\n                var $2714 = self.dmg;\n                var $2715 = self.bag;\n                var $2716 = self.mon;\n                var $2717 = self.bos;\n                var $2718 = self.cap;\n                var $2719 = self.idl;\n                var $2720 = self.eff;\n                var self = _hero$2;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $2722 = self.kin;\n                        var $2723 = self.dir;\n                        var $2724 = self.pad;\n                        var $2725 = self.ani;\n                        var $2726 = self.dmg;\n                        var $2727 = self.bag;\n                        var $2728 = self.mon;\n                        var $2729 = self.bos;\n                        var $2730 = self.cap;\n                        var $2731 = self.idl;\n                        var $2732 = self.eff;\n                        var self = $2710;\n                        switch (self._) {\n                            case 'Mons.Kind.Mons':\n                                var $2734 = self.ele;\n                                var $2735 = self.boss;\n                                var $2736 = self.pri_type;\n                                var $2737 = self.agi;\n                                var _new_boss_bag$29 = List$append$($2729, _boss$1);\n                                var $2738 = Mons$Object$set_bos$(_new_boss_bag$29, _hero$2);\n                                var $2733 = $2738;\n                                break;\n                            case 'Mons.Kind.Const':\n                                var $2739 = self.ele;\n                                var $2740 = _hero$2;\n                                var $2733 = $2740;\n                                break;\n                            case 'Mons.Kind.Terrain':\n                                var $2741 = self.ele;\n                                var $2742 = _hero$2;\n                                var $2733 = $2742;\n                                break;\n                            case 'Mons.Kind.Interactive':\n                                var $2743 = self.ele;\n                                var $2744 = self.on;\n                                var $2745 = self.eff;\n                                var $2746 = _hero$2;\n                                var $2733 = $2746;\n                                break;\n                        };\n                        var $2721 = $2733;\n                        break;\n                };\n                var $2709 = $2721;\n                break;\n        };\n        return $2709;\n    };\n    const Mons$Object$capture_boss = x0 => x1 => Mons$Object$capture_boss$(x0, x1);\n\n    function Mons$Game$delete_adve_obj$(_adve_obj$1, _hero_obj$2, _pos$3, _hero_idx$4, _adve_idx$5, _game$6) {\n        var _game$7 = Mons$Game$map_del$(_pos$3, _adve_idx$5, _game$6);\n        var _game$8 = Mons$Game$map_set$(_pos$3, _hero_idx$4, _hero_obj$2, _game$7);\n        var $2747 = Mons$Game$set_stt$(Mons$Screen$game$(46, Mons$Turn$empty), _game$8);\n        return $2747;\n    };\n    const Mons$Game$delete_adve_obj = x0 => x1 => x2 => x3 => x4 => x5 => Mons$Game$delete_adve_obj$(x0, x1, x2, x3, x4, x5);\n\n    function Mons$Object$is_full_bag$(_obj$1) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2749 = self.kin;\n                var $2750 = self.dir;\n                var $2751 = self.pad;\n                var $2752 = self.ani;\n                var $2753 = self.dmg;\n                var $2754 = self.bag;\n                var $2755 = self.mon;\n                var $2756 = self.bos;\n                var $2757 = self.cap;\n                var $2758 = self.idl;\n                var $2759 = self.eff;\n                var _len$13 = (list_length($2754));\n                var $2760 = (_len$13 === 3n);\n                var $2748 = $2760;\n                break;\n        };\n        return $2748;\n    };\n    const Mons$Object$is_full_bag = x0 => Mons$Object$is_full_bag$(x0);\n\n    function Mons$Screen$capture_mon$(_idx$1, _full_bag$2) {\n        var $2761 = ({\n            _: 'Mons.Screen.capture_mon',\n            'idx': _idx$1,\n            'full_bag': _full_bag$2\n        });\n        return $2761;\n    };\n    const Mons$Screen$capture_mon = x0 => x1 => Mons$Screen$capture_mon$(x0, x1);\n\n    function Mons$Kind$get_pos$(_kin$1) {\n        var self = Mons$Kind$attr$(_kin$1);\n        switch (self._) {\n            case 'Mons.Attr.new':\n                var $2763 = self.blocks;\n                var $2764 = self.mhp;\n                var $2765 = self.atk;\n                var $2766 = self.name;\n                var $2767 = self.wlk;\n                var $2768 = self.idl;\n                var $2769 = self.pic;\n                var $2770 = self.battle_spr;\n                var $2771 = self.skills;\n                var $2772 = self.pos;\n                var $2773 = $2772;\n                var $2762 = $2773;\n                break;\n        };\n        return $2762;\n    };\n    const Mons$Kind$get_pos = x0 => Mons$Kind$get_pos$(x0);\n\n    function Mons$Game$add_mon$(_kind_mon$1, _agi$2, _type$3, _game$4) {\n        var $2774 = Mons$Game$move_obj$(Mons$global_scr_mid, 0, Mons$Kind$get_pos$(Mons$Kind$Mons$(_kind_mon$1, Bool$false, _type$3, _agi$2)), Mons$Object$new_of_kind$(Mons$Kind$Mons$(_kind_mon$1, Bool$false, _type$3, _agi$2)), _game$4);\n        return $2774;\n    };\n    const Mons$Game$add_mon = x0 => x1 => x2 => x3 => Mons$Game$add_mon$(x0, x1, x2, x3);\n\n    function List$delete_at$(_idx$2, _list$3) {\n        var self = _idx$2;\n        if (self === 0n) {\n            var $2776 = List$tail$(_list$3);\n            var $2775 = $2776;\n        } else {\n            var $2777 = (self - 1n);\n            var self = _list$3;\n            switch (self._) {\n                case 'List.nil':\n                    var $2779 = _list$3;\n                    var $2778 = $2779;\n                    break;\n                case 'List.cons':\n                    var $2780 = self.head;\n                    var $2781 = self.tail;\n                    var $2782 = List$cons$($2780, List$delete_at$($2777, $2781));\n                    var $2778 = $2782;\n                    break;\n            };\n            var $2775 = $2778;\n        };\n        return $2775;\n    };\n    const List$delete_at = x0 => x1 => List$delete_at$(x0, x1);\n\n    function Mons$Object$delete_from_bag$(_idx$1, _hero_obj$2) {\n        var _idx_nat$3 = U32$to_nat$(_idx$1);\n        var self = _hero_obj$2;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2784 = self.kin;\n                var $2785 = self.dir;\n                var $2786 = self.pad;\n                var $2787 = self.ani;\n                var $2788 = self.dmg;\n                var $2789 = self.bag;\n                var $2790 = self.mon;\n                var $2791 = self.bos;\n                var $2792 = self.cap;\n                var $2793 = self.idl;\n                var $2794 = self.eff;\n                var _qtd$15 = (list_length($2789));\n                var self = (_qtd$15 === 0n);\n                if (self) {\n                    var $2796 = _hero_obj$2;\n                    var $2795 = $2796;\n                } else {\n                    var _new_bag$16 = List$delete_at$(_idx_nat$3, $2789);\n                    var _hero_obj$17 = Mons$Object$set_bag$(_new_bag$16, _hero_obj$2);\n                    var $2797 = Mons$Object$set_mon$(0, _hero_obj$17);\n                    var $2795 = $2797;\n                };\n                var $2783 = $2795;\n                break;\n        };\n        return $2783;\n    };\n    const Mons$Object$delete_from_bag = x0 => x1 => Mons$Object$delete_from_bag$(x0, x1);\n    const Mons$Screen$game_over = ({\n        _: 'Mons.Screen.game_over'\n    });\n\n    function Mons$Turn$is_last_player_move$(_turn$1) {\n        var self = _turn$1;\n        switch (self._) {\n            case 'Mons.Turn.new':\n                var $2799 = self.exec_hero;\n                var $2800 = self.hero_skill;\n                var $2801 = self.adve_skill;\n                var $2802 = self.play;\n                var $2803 = ($2802 === 1);\n                var $2798 = $2803;\n                break;\n        };\n        return $2798;\n    };\n    const Mons$Turn$is_last_player_move = x0 => Mons$Turn$is_last_player_move$(x0);\n\n    function Mons$Turn$hero_run$(_turn$1) {\n        var self = _turn$1;\n        switch (self._) {\n            case 'Mons.Turn.new':\n                var $2805 = self.exec_hero;\n                var $2806 = self.hero_skill;\n                var $2807 = self.adve_skill;\n                var $2808 = self.play;\n                var $2809 = ($2808 === 5);\n                var $2804 = $2809;\n                break;\n        };\n        return $2804;\n    };\n    const Mons$Turn$hero_run = x0 => Mons$Turn$hero_run$(x0);\n\n    function Mons$Effect$upd_end_turn_eff$(_eff$1) {\n        var self = _eff$1;\n        switch (self._) {\n            case 'Mons.Effect.new':\n                var $2811 = self.sleep;\n                var $2812 = self.burn;\n                var $2813 = self.protect;\n                var $2814 = self.minimize;\n                var $2815 = self.invulnerable;\n                var $2816 = self.hit;\n                var $2817 = self.poison;\n                var $2818 = self.swap_agi;\n                var _sleep_turn$10 = Pair$fst$($2811);\n                var _protect_turn$11 = Pair$fst$($2813);\n                var _minimize_turn$12 = Pair$fst$($2814);\n                var _invulnerable$13 = Pair$fst$($2815);\n                var _update_turn_counter$14 = (_val$14 => {\n                    var $2820 = Pair$new$((Math.max(_val$14 - 1, 0)), (_val$14 === 2));\n                    return $2820;\n                });\n                var $2819 = Mons$Effect$new$(_update_turn_counter$14(_sleep_turn$10), $2812, _update_turn_counter$14(_protect_turn$11), _update_turn_counter$14(_minimize_turn$12), (() => {\n                    var self = _invulnerable$13;\n                    if (self) {\n                        var $2821 = Pair$new$(Bool$false, Bool$true);\n                        return $2821;\n                    } else {\n                        var $2822 = Pair$new$(Bool$false, Bool$false);\n                        return $2822;\n                    };\n                })(), $2816, $2817, $2818);\n                var $2810 = $2819;\n                break;\n        };\n        return $2810;\n    };\n    const Mons$Effect$upd_end_turn_eff = x0 => Mons$Effect$upd_end_turn_eff$(x0);\n\n    function Mons$Skill$apply_end_turn_eff$(_hero_idx$1, _adve_idx$2, _pos$3, _game$4) {\n        var self = _game$4;\n        switch (self._) {\n            case 'Mons.Game.new':\n                var $2824 = self.usr;\n                var $2825 = self.pos;\n                var $2826 = self.map;\n                var $2827 = self.stt;\n                var $2828 = self.tik;\n                var _hero_obj$10 = Mons$Map$get$(_pos$3, _hero_idx$1, $2826);\n                var _hero_mon_obj$11 = Mons$Object$get_current_mon$(_hero_obj$10);\n                var _adve_obj$12 = Mons$Map$get$(_pos$3, _adve_idx$2, $2826);\n                var self = _hero_mon_obj$11;\n                switch (self._) {\n                    case 'Mons.Object.new':\n                        var $2830 = self.kin;\n                        var $2831 = self.dir;\n                        var $2832 = self.pad;\n                        var $2833 = self.ani;\n                        var $2834 = self.dmg;\n                        var $2835 = self.bag;\n                        var $2836 = self.mon;\n                        var $2837 = self.bos;\n                        var $2838 = self.cap;\n                        var $2839 = self.idl;\n                        var $2840 = self.eff;\n                        var _eff_upd$24 = Mons$Effect$upd_end_turn_eff$($2840);\n                        var _hero_mon_obj$25 = Mons$Object$set_eff$(_eff_upd$24, _hero_mon_obj$11);\n                        var _game$26 = Mons$Skill$update_mon_obj$(_hero_obj$10, _hero_mon_obj$25, _pos$3, _hero_idx$1, _game$4);\n                        var self = _adve_obj$12;\n                        switch (self._) {\n                            case 'Mons.Object.new':\n                                var $2842 = self.kin;\n                                var $2843 = self.dir;\n                                var $2844 = self.pad;\n                                var $2845 = self.ani;\n                                var $2846 = self.dmg;\n                                var $2847 = self.bag;\n                                var $2848 = self.mon;\n                                var $2849 = self.bos;\n                                var $2850 = self.cap;\n                                var $2851 = self.idl;\n                                var $2852 = self.eff;\n                                var _upd_effect$38 = Mons$Effect$upd_end_turn_eff$($2852);\n                                var _adve_obj$39 = Mons$Object$set_eff$(_upd_effect$38, _adve_obj$12);\n                                var _game$40 = Mons$Game$map_set$(_pos$3, _adve_idx$2, _adve_obj$39, _game$26);\n                                var $2853 = _game$40;\n                                var $2841 = $2853;\n                                break;\n                        };\n                        var $2829 = $2841;\n                        break;\n                };\n                var $2823 = $2829;\n                break;\n        };\n        return $2823;\n    };\n    const Mons$Skill$apply_end_turn_eff = x0 => x1 => x2 => x3 => Mons$Skill$apply_end_turn_eff$(x0, x1, x2, x3);\n\n    function Mons$Game$move_hero_down$(_usr$1, _hero_obj$2, _pos$3, _hero_idx$4, _game$5) {\n        var _y$6 = (((_pos$3 >>> 12) & 0xFFF));\n        var _x$7 = ((_pos$3 & 0xFFF));\n        var _z$8 = ((_pos$3 >>> 24));\n        var _new_pos$9 = ((0 | _x$7 | (((_y$6 + 1) >>> 0) << 12) | (_z$8 << 24)));\n        var _game$10 = Mons$Game$move_obj$(_pos$3, _hero_idx$4, _new_pos$9, _hero_obj$2, _game$5);\n        var $2854 = Mons$Game$set_user_pos$(_usr$1, _new_pos$9, _game$10);\n        return $2854;\n    };\n    const Mons$Game$move_hero_down = x0 => x1 => x2 => x3 => x4 => Mons$Game$move_hero_down$(x0, x1, x2, x3, x4);\n    const Mons$Kind$mons$ZOIO = ({\n        _: 'Mons.Kind.mons.ZOIO'\n    });\n    const Mons$Kind$mons$MIMIC = ({\n        _: 'Mons.Kind.mons.MIMIC'\n    });\n    const Mons$Kind$mons$MIMIC2 = ({\n        _: 'Mons.Kind.mons.MIMIC2'\n    });\n    const Mons$Kind$mons$CYCLOPE = ({\n        _: 'Mons.Kind.mons.CYCLOPE'\n    });\n    const Mons$Kind$mons$TROWL = ({\n        _: 'Mons.Kind.mons.TROWL'\n    });\n    const Mons$Kind$mons$EMERELDER2 = ({\n        _: 'Mons.Kind.mons.EMERELDER2'\n    });\n\n    function Mons$Game$add_boss$(_kind_mon$1, _agi$2, _type$3, _game$4) {\n        var $2855 = Mons$Game$move_obj$(Mons$global_scr_mid, 0, Mons$Kind$get_pos$(Mons$Kind$Mons$(_kind_mon$1, Bool$true, _type$3, _agi$2)), Mons$Object$new_of_kind$(Mons$Kind$Mons$(_kind_mon$1, Bool$true, _type$3, _agi$2)), _game$4);\n        return $2855;\n    };\n    const Mons$Game$add_boss = x0 => x1 => x2 => x3 => Mons$Game$add_boss$(x0, x1, x2, x3);\n    const Mons$Kind$mons$BEHOLDER = ({\n        _: 'Mons.Kind.mons.BEHOLDER'\n    });\n\n    function Mons$Game$add_mons_to_map$(_pos$1, _game$2) {\n        var _lvl$3 = ((_pos$1 >>> 24));\n        var self = (_lvl$3 === 1);\n        if (self) {\n            var _type$4 = Mons$Type$normal;\n            var _game$5 = Mons$Game$add_mon$(Mons$Kind$mons$ZOIO, 2, _type$4, _game$2);\n            var _game$6 = Mons$Game$add_mon$(Mons$Kind$mons$MIMIC, 0, _type$4, _game$5);\n            var _game$7 = Mons$Game$add_mon$(Mons$Kind$mons$MIMIC2, 0, _type$4, _game$6);\n            var _game$8 = Mons$Game$add_mon$(Mons$Kind$mons$POISOLICK, 2, _type$4, _game$7);\n            var _game$9 = Mons$Game$add_mon$(Mons$Kind$mons$AZULA, 1, _type$4, _game$8);\n            var _game$10 = Mons$Game$add_mon$(Mons$Kind$mons$CYCLOPE, 2, _type$4, _game$9);\n            var _game$11 = Mons$Game$add_mon$(Mons$Kind$mons$TROWL, 0, _type$4, _game$10);\n            var _game$12 = Mons$Game$add_mon$(Mons$Kind$mons$EMERELDER, 2, _type$4, _game$11);\n            var _game$13 = Mons$Game$add_mon$(Mons$Kind$mons$EMERELDER2, 2, _type$4, _game$12);\n            var $2857 = _game$13;\n            var $2856 = $2857;\n        } else {\n            var self = (_lvl$3 === 2);\n            if (self) {\n                var $2859 = Mons$Game$add_boss$(Mons$Kind$mons$BEHOLDER, 2, Mons$Type$normal, _game$2);\n                var $2858 = $2859;\n            } else {\n                var $2860 = _game$2;\n                var $2858 = $2860;\n            };\n            var $2856 = $2858;\n        };\n        return $2856;\n    };\n    const Mons$Game$add_mons_to_map = x0 => x1 => Mons$Game$add_mons_to_map$(x0, x1);\n\n    function Mons$Game$hero_inital_position$(_usr$1, _hero_obj$2, _pos$3, _hero_idx$4, _game$5) {\n        var _x$6 = ((Mons$global_scr_mid & 0xFFF));\n        var _y$7 = (((Mons$global_scr_mid >>> 12) & 0xFFF));\n        var _z$8 = ((_pos$3 >>> 24));\n        var self = (_z$8 === 0);\n        if (self) {\n            var _new_pos$9 = ((0 | _x$6 | (((_y$7 + 12) >>> 0) << 12) | (0 << 24)));\n            var _game$10 = Mons$Game$move_obj$(_pos$3, _hero_idx$4, _new_pos$9, _hero_obj$2, _game$5);\n            var $2862 = Mons$Game$set_user_pos$(_usr$1, _new_pos$9, _game$10);\n            var $2861 = $2862;\n        } else {\n            var self = (_z$8 === 1);\n            if (self) {\n                var $2864 = ((0 | _x$6 | (((_y$7 + 38) >>> 0) << 12) | (1 << 24)));\n                var _new_pos$9 = $2864;\n            } else {\n                var self = (_z$8 === 2);\n                if (self) {\n                    var $2866 = ((0 | _x$6 | (((_y$7 + 5) >>> 0) << 12) | (2 << 24)));\n                    var $2865 = $2866;\n                } else {\n                    var $2867 = _pos$3;\n                    var $2865 = $2867;\n                };\n                var _new_pos$9 = $2865;\n            };\n            var _game$10 = Mons$Game$move_obj$(Mons$global_scr_mid, _hero_idx$4, _new_pos$9, _hero_obj$2, _game$5);\n            var _game$11 = Mons$Game$set_user_pos$(_usr$1, _new_pos$9, _game$10);\n            var $2863 = Mons$Game$add_mons_to_map$(_new_pos$9, _game$11);\n            var $2861 = $2863;\n        };\n        return $2861;\n    };\n    const Mons$Game$hero_inital_position = x0 => x1 => x2 => x3 => x4 => Mons$Game$hero_inital_position$(x0, x1, x2, x3, x4);\n\n    function Mons$Object$get_adjacent_obj$(_pos$1, _dir$2, _map$3) {\n        var _adjacent_pos$4 = Mons$Object$get_adjacent_pos$(_pos$1, _dir$2, _map$3);\n        var $2868 = Mons$Map$get_top$(_adjacent_pos$4, _map$3);\n        return $2868;\n    };\n    const Mons$Object$get_adjacent_obj = x0 => x1 => x2 => Mons$Object$get_adjacent_obj$(x0, x1, x2);\n\n    function Mons$Object$hero_can_push_obj$(_pos$1, _dir$2, _map$3) {\n        var self = Mons$Object$get_adjacent_obj$(_pos$1, _dir$2, _map$3);\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2870 = self.kin;\n                var $2871 = self.dir;\n                var $2872 = self.pad;\n                var $2873 = self.ani;\n                var $2874 = self.dmg;\n                var $2875 = self.bag;\n                var $2876 = self.mon;\n                var $2877 = self.bos;\n                var $2878 = self.cap;\n                var $2879 = self.idl;\n                var $2880 = self.eff;\n                var self = $2870;\n                switch (self._) {\n                    case 'Mons.Kind.Mons':\n                        var $2882 = self.ele;\n                        var $2883 = self.boss;\n                        var $2884 = self.pri_type;\n                        var $2885 = self.agi;\n                        var $2886 = Bool$false;\n                        var $2881 = $2886;\n                        break;\n                    case 'Mons.Kind.Const':\n                        var $2887 = self.ele;\n                        var $2888 = Bool$false;\n                        var $2881 = $2888;\n                        break;\n                    case 'Mons.Kind.Terrain':\n                        var $2889 = self.ele;\n                        var $2890 = Bool$false;\n                        var $2881 = $2890;\n                        break;\n                    case 'Mons.Kind.Interactive':\n                        var $2891 = self.ele;\n                        var $2892 = self.on;\n                        var $2893 = self.eff;\n                        var self = $2891;\n                        switch (self._) {\n                            case 'Mons.Kind.inter.LEVER':\n                                var $2895 = self.id;\n                                var $2896 = Bool$true;\n                                var $2894 = $2896;\n                                break;\n                            case 'Mons.Kind.inter.MOVE':\n                                var $2897 = Bool$true;\n                                var $2894 = $2897;\n                                break;\n                            case 'Mons.Kind.inter.HEAL':\n                                var $2898 = Bool$false;\n                                var $2894 = $2898;\n                                break;\n                        };\n                        var $2881 = $2894;\n                        break;\n                };\n                var $2869 = $2881;\n                break;\n        };\n        return $2869;\n    };\n    const Mons$Object$hero_can_push_obj = x0 => x1 => x2 => Mons$Object$hero_can_push_obj$(x0, x1, x2);\n\n    function Mons$Kind$exec_eff$(_kind$1, _game$2) {\n        var self = _kind$1;\n        switch (self._) {\n            case 'Mons.Kind.Mons':\n                var $2900 = self.ele;\n                var $2901 = self.boss;\n                var $2902 = self.pri_type;\n                var $2903 = self.agi;\n                var $2904 = _game$2;\n                var $2899 = $2904;\n                break;\n            case 'Mons.Kind.Const':\n                var $2905 = self.ele;\n                var $2906 = _game$2;\n                var $2899 = $2906;\n                break;\n            case 'Mons.Kind.Terrain':\n                var $2907 = self.ele;\n                var $2908 = _game$2;\n                var $2899 = $2908;\n                break;\n            case 'Mons.Kind.Interactive':\n                var $2909 = self.ele;\n                var $2910 = self.on;\n                var $2911 = self.eff;\n                var $2912 = $2911($2909)($2910)(_game$2);\n                var $2899 = $2912;\n                break;\n        };\n        return $2899;\n    };\n    const Mons$Kind$exec_eff = x0 => x1 => Mons$Kind$exec_eff$(x0, x1);\n\n    function Mons$Object$set_kin$(_obj$1, _kin$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2914 = self.kin;\n                var $2915 = self.dir;\n                var $2916 = self.pad;\n                var $2917 = self.ani;\n                var $2918 = self.dmg;\n                var $2919 = self.bag;\n                var $2920 = self.mon;\n                var $2921 = self.bos;\n                var $2922 = self.cap;\n                var $2923 = self.idl;\n                var $2924 = self.eff;\n                var $2925 = Mons$Object$new$(_kin$2, $2915, $2916, $2917, $2918, $2919, $2920, $2921, $2922, $2923, $2924);\n                var $2913 = $2925;\n                break;\n        };\n        return $2913;\n    };\n    const Mons$Object$set_kin = x0 => x1 => Mons$Object$set_kin$(x0, x1);\n\n    function Mons$Object$update_interactive$(_obj$1, _fun$2) {\n        var self = _obj$1;\n        switch (self._) {\n            case 'Mons.Object.new':\n                var $2927 = self.kin;\n                var $2928 = self.dir;\n                var $2929 = self.pad;\n                var $2930 = self.ani;\n                var $2931 = self.dmg;\n                var $2932 = self.bag;\n                var $2933 = self.mon;\n                var $2934 = self.bos;\n                var $2935 = self.cap;\n                var $2936 = self.idl;\n                var $2937 = self.eff;\n                var $2938 = Mons$Object$set_kin$(_obj$1, _fun$2($2927));\n                var $2926 = $2938;\n                break;\n        };\n        return $2926;\n    };\n    const Mons$Object$update_interactive = x0 => x1 => Mons$Object$update_interactive$(x0, x1);\n\n    function Mons$Kind$set_on_interactive$(_kind$1) {\n        var self = _kind$1;\n        switch (self._) {\n            case 'Mons.Kind.Mons':\n                var $2940 = self.ele;\n                var $2941 = self.boss;\n                var $2942 = self.pri_type;\n                var $2943 = self.agi;\n                var $2944 = _kind$1;\n                var $2939 = $2944;\n                break;\n            case 'Mons.Kind.Const':\n                var $2945 = self.ele;\n                var $2946 = _kind$1;\n                var $2939 = $2946;\n                break;\n            case 'Mons.Kind.Terrain':\n                var $2947 = self.ele;\n                var $2948 = _kind$1;\n                var $2939 = $2948;\n                break;\n            case 'Mons.Kind.Interactive':\n                var $2949 = self.ele;\n                var $2950 = self.on;\n                var $2951 = self.eff;\n                var $2952 = Mons$Kind$Interactive$($2949, Bool$true, $2951);\n                var $2939 = $2952;\n                break;\n        };\n        return $2939;\n    };\n    const Mons$Kind$set_on_interactive = x0 => Mons$Kind$set_on_interactive$(x0);\n\n    function Mons$Game$cmd$(_cmd$1, _usr$2, _game$3) {\n        var _pos$4 = Mons$Game$get_user_pos$(_usr$2, _game$3);\n        var _set_stt_game$5 = (_game$5 => {\n            var $2954 = Mons$Game$set_stt$(Mons$Screen$game$(46, Mons$Turn$empty), _game$5);\n            return $2954;\n        });\n        var self = _pos$4;\n        switch (self._) {\n            case 'Maybe.none':\n                var _pos$6 = ((0 | 2048 | (2048 << 12) | (0 << 24)));\n                var _obj$7 = Mons$Object$hero;\n                var _game$8 = Mons$Game$map_push$(_pos$6, _obj$7, _game$3);\n                var _game$9 = Mons$Game$set_user_pos$(_usr$2, _pos$6, _game$8);\n                var $2955 = _game$9;\n                var $2953 = $2955;\n                break;\n            case 'Maybe.some':\n                var $2956 = self.value;\n                var self = _game$3;\n                switch (self._) {\n                    case 'Mons.Game.new':\n                        var $2958 = self.usr;\n                        var $2959 = self.pos;\n                        var $2960 = self.map;\n                        var $2961 = self.stt;\n                        var $2962 = self.tik;\n                        var _pos$12 = $2956;\n                        var _hero_pair$13 = Mons$Map$get_hero$(_pos$12, $2960);\n                        var _hero_obj$14 = Pair$fst$(_hero_pair$13);\n                        var _hero_idx$15 = Pair$snd$(_hero_pair$13);\n                        var _adve_idx$16 = 1;\n                        var _adve_obj$17 = Mons$Map$get$(_pos$12, _adve_idx$16, $2960);\n                        var _is_battling$18 = Mons$Object$is_battling$(_adve_obj$17, _hero_obj$14);\n                        var _end_battle$19 = Mons$Object$ended_battle$(_adve_obj$17, _hero_obj$14);\n                        var _curr_mon$20 = Mons$Object$get_current_mon$(_hero_obj$14);\n                        var self = _curr_mon$20;\n                        switch (self._) {\n                            case 'Mons.Object.new':\n                                var $2964 = self.kin;\n                                var $2965 = self.dir;\n                                var $2966 = self.pad;\n                                var $2967 = self.ani;\n                                var $2968 = self.dmg;\n                                var $2969 = self.bag;\n                                var $2970 = self.mon;\n                                var $2971 = self.bos;\n                                var $2972 = self.cap;\n                                var $2973 = self.idl;\n                                var $2974 = self.eff;\n                                var _skills$32 = Mons$Kind$get_skills$($2964);\n                                var self = _hero_obj$14;\n                                switch (self._) {\n                                    case 'Mons.Object.new':\n                                        var $2976 = self.kin;\n                                        var $2977 = self.dir;\n                                        var $2978 = self.pad;\n                                        var $2979 = self.ani;\n                                        var $2980 = self.dmg;\n                                        var $2981 = self.bag;\n                                        var $2982 = self.mon;\n                                        var $2983 = self.bos;\n                                        var $2984 = self.cap;\n                                        var $2985 = self.idl;\n                                        var $2986 = self.eff;\n                                        var self = _adve_obj$17;\n                                        switch (self._) {\n                                            case 'Mons.Object.new':\n                                                var $2988 = self.kin;\n                                                var $2989 = self.dir;\n                                                var $2990 = self.pad;\n                                                var $2991 = self.ani;\n                                                var $2992 = self.dmg;\n                                                var $2993 = self.bag;\n                                                var $2994 = self.mon;\n                                                var $2995 = self.bos;\n                                                var $2996 = self.cap;\n                                                var $2997 = self.idl;\n                                                var $2998 = self.eff;\n                                                var self = $2961;\n                                                switch (self._) {\n                                                    case 'Mons.Screen.welcome':\n                                                        var $3000 = self.idx;\n                                                        var self = ((_cmd$1 === 99) || (_cmd$1 === 67));\n                                                        if (self) {\n                                                            var self = ($3000 === 0);\n                                                            if (self) {\n                                                                var $3003 = Mons$Game$set_stt$(Mons$Screen$introduction$(0), _game$3);\n                                                                var $3002 = $3003;\n                                                            } else {\n                                                                var $3004 = Mons$Game$set_stt$(Mons$Screen$credits, _game$3);\n                                                                var $3002 = $3004;\n                                                            };\n                                                            var $3001 = $3002;\n                                                        } else {\n                                                            var self = ((_cmd$1 === 119) || (_cmd$1 === 87));\n                                                            if (self) {\n                                                                var $3006 = Mons$Game$set_stt$(Mons$Screen$welcome$(0), _game$3);\n                                                                var $3005 = $3006;\n                                                            } else {\n                                                                var self = ((_cmd$1 === 115) || (_cmd$1 === 83));\n                                                                if (self) {\n                                                                    var $3008 = Mons$Game$set_stt$(Mons$Screen$welcome$(1), _game$3);\n                                                                    var $3007 = $3008;\n                                                                } else {\n                                                                    var $3009 = _game$3;\n                                                                    var $3007 = $3009;\n                                                                };\n                                                                var $3005 = $3007;\n                                                            };\n                                                            var $3001 = $3005;\n                                                        };\n                                                        var $2999 = $3001;\n                                                        break;\n                                                    case 'Mons.Screen.credits':\n                                                        var self = ((_cmd$1 === 122) || (_cmd$1 === 90));\n                                                        if (self) {\n                                                            var $3011 = Mons$Game$set_stt$(Mons$Screen$welcome$(0), _game$3);\n                                                            var $3010 = $3011;\n                                                        } else {\n                                                            var $3012 = _game$3;\n                                                            var $3010 = $3012;\n                                                        };\n                                                        var $2999 = $3010;\n                                                        break;\n                                                    case 'Mons.Screen.introduction':\n                                                        var $3013 = self.step;\n                                                        var _can_walk$56 = ($3013 === 0);\n                                                        var self = (_can_walk$56 && Mons$is_walk_cmd$(_cmd$1));\n                                                        if (self) {\n                                                            var $3015 = Mons$Game$walk$(_cmd$1, _pos$12, _hero_idx$15, _game$3);\n                                                            var $3014 = $3015;\n                                                        } else {\n                                                            var self = ((_cmd$1 === 99) && Mons$Kind$is_mage$($2988));\n                                                            if (self) {\n                                                                var self = ($3013 === 0);\n                                                                if (self) {\n                                                                    var _game$57 = Mons$initial_mons$(_hero_obj$14, _pos$12, 0, _game$3);\n                                                                    var $3018 = Mons$Game$set_stt$(Mons$Screen$introduction$(1), _game$57);\n                                                                    var $3017 = $3018;\n                                                                } else {\n                                                                    var self = ($3013 === 1);\n                                                                    if (self) {\n                                                                        var $3020 = Mons$Game$set_stt$(Mons$Screen$intro_select$(0), _game$3);\n                                                                        var $3019 = $3020;\n                                                                    } else {\n                                                                        var self = ($3013 === 2);\n                                                                        if (self) {\n                                                                            var _game$57 = Mons$Game$map_del$(_pos$12, _adve_idx$16, _game$3);\n                                                                            var _hero_obj$58 = Mons$Object$delete_init_mons$(_hero_obj$14);\n                                                                            var _game$59 = Mons$Game$map_set$(_pos$12, _hero_idx$15, _hero_obj$58, _game$57);\n                                                                            var $3022 = Mons$Game$set_stt$(Mons$Screen$game$(46, Mons$Turn$empty), _game$59);\n                                                                            var $3021 = $3022;\n                                                                        } else {\n                                                                            var $3023 = Mons$Game$set_stt$(Mons$Screen$game$(46, Mons$Turn$empty), _game$3);\n                                                                            var $3021 = $3023;\n                                                                        };\n                                                                        var $3019 = $3021;\n                                                                    };\n                                                                    var $3017 = $3019;\n                                                                };\n                                                                var $3016 = $3017;\n                                                            } else {\n                                                                var $3024 = _game$3;\n                                                                var $3016 = $3024;\n                                                            };\n                                                            var $3014 = $3016;\n                                                        };\n                                                        var $2999 = $3014;\n                                                        break;\n                                                    case 'Mons.Screen.intro_select':\n                                                        var $3025 = self.idx;\n                                                        var self = (_cmd$1 === 99);\n                                                        if (self) {\n                                                            var $3027 = Mons$Game$set_stt$(Mons$Screen$introduction$(2), _game$3);\n                                                            var $3026 = $3027;\n                                                        } else {\n                                                            var $3028 = _game$3;\n                                                            var $3026 = $3028;\n                                                        };\n                                                        var $2999 = $3026;\n                                                        break;\n                                                    case 'Mons.Screen.game':\n                                                        var $3029 = self.cmd;\n                                                        var $3030 = self.turn;\n                                                        var self = (_cmd$1 === 85);\n                                                        if (self) {\n                                                            var $3032 = Mons$Game$exec_turn$(_hero_obj$14, _adve_obj$17, _pos$12, _hero_idx$15, _adve_idx$16, 0n, $3030, _game$3);\n                                                            var $3031 = $3032;\n                                                        } else {\n                                                            var self = (_cmd$1 === 73);\n                                                            if (self) {\n                                                                var $3034 = Mons$Game$exec_turn$(_hero_obj$14, _adve_obj$17, _pos$12, _hero_idx$15, _adve_idx$16, 1n, $3030, _game$3);\n                                                                var $3033 = $3034;\n                                                            } else {\n                                                                var self = (_cmd$1 === 74);\n                                                                if (self) {\n                                                                    var $3036 = Mons$Game$exec_turn$(_hero_obj$14, _adve_obj$17, _pos$12, _hero_idx$15, _adve_idx$16, 2n, $3030, _game$3);\n                                                                    var $3035 = $3036;\n                                                                } else {\n                                                                    var self = (_cmd$1 === 75);\n                                                                    if (self) {\n                                                                        var $3038 = Mons$Game$exec_turn$(_hero_obj$14, _adve_obj$17, _pos$12, _hero_idx$15, _adve_idx$16, 3n, $3030, _game$3);\n                                                                        var $3037 = $3038;\n                                                                    } else {\n                                                                        var self = (_cmd$1 === 82);\n                                                                        if (self) {\n                                                                            var $3040 = Mons$Game$exec_turn$(_hero_obj$14, _adve_obj$17, _pos$12, _hero_idx$15, _adve_idx$16, 4n, $3030, _game$3);\n                                                                            var $3039 = $3040;\n                                                                        } else {\n                                                                            var self = Mons$is_walk_cmd$(_cmd$1);\n                                                                            if (self) {\n                                                                                var self = Mons$Kind$is_mon_area$($2988);\n                                                                                if (self) {\n                                                                                    var _adve_pos$57 = Mons$Kind$area_mon_pos$($2988, _pos$12);\n                                                                                    var _mon_area_obj$58 = Mons$Map$get$(_adve_pos$57, 0, $2960);\n                                                                                    var self = _mon_area_obj$58;\n                                                                                    switch (self._) {\n                                                                                        case 'Mons.Object.new':\n                                                                                            var $3044 = self.kin;\n                                                                                            var $3045 = self.dir;\n                                                                                            var $3046 = self.pad;\n                                                                                            var $3047 = self.ani;\n                                                                                            var $3048 = self.dmg;\n                                                                                            var $3049 = self.bag;\n                                                                                            var $3050 = self.mon;\n                                                                                            var $3051 = self.bos;\n                                                                                            var $3052 = self.cap;\n                                                                                            var $3053 = self.idl;\n                                                                                            var $3054 = self.eff;\n                                                                                            var self = $3044;\n                                                                                            switch (self._) {\n                                                                                                case 'Mons.Kind.Mons':\n                                                                                                    var $3056 = self.ele;\n                                                                                                    var $3057 = self.boss;\n                                                                                                    var $3058 = self.pri_type;\n                                                                                                    var $3059 = self.agi;\n                                                                                                    var _game$74 = Mons$Game$walk$(_cmd$1, _pos$12, _hero_idx$15, _game$3);\n                                                                                                    var self = ($2979 === 0);\n                                                                                                    if (self) {\n                                                                                                        var _game$75 = Mons$Game$move_obj$(_adve_pos$57, 0, _pos$12, _mon_area_obj$58, _game$74);\n                                                                                                        var _game$76 = Mons$Game$move_obj$(_pos$12, 1, _pos$12, _hero_obj$14, _game$75);\n                                                                                                        var $3061 = Mons$Game$set_user_pos$($2958, _pos$12, _game$76);\n                                                                                                        var $3060 = $3061;\n                                                                                                    } else {\n                                                                                                        var $3062 = _game$74;\n                                                                                                        var $3060 = $3062;\n                                                                                                    };\n                                                                                                    var $3055 = $3060;\n                                                                                                    break;\n                                                                                                case 'Mons.Kind.Const':\n                                                                                                    var $3063 = self.ele;\n                                                                                                    var $3064 = Mons$Game$walk$(_cmd$1, _pos$12, _hero_idx$15, _game$3);\n                                                                                                    var $3055 = $3064;\n                                                                                                    break;\n                                                                                                case 'Mons.Kind.Terrain':\n                                                                                                    var $3065 = self.ele;\n                                                                                                    var $3066 = Mons$Game$walk$(_cmd$1, _pos$12, _hero_idx$15, _game$3);\n                                                                                                    var $3055 = $3066;\n                                                                                                    break;\n                                                                                                case 'Mons.Kind.Interactive':\n                                                                                                    var $3067 = self.ele;\n                                                                                                    var $3068 = self.on;\n                                                                                                    var $3069 = self.eff;\n                                                                                                    var $3070 = Mons$Game$walk$(_cmd$1, _pos$12, _hero_idx$15, _game$3);\n                                                                                                    var $3055 = $3070;\n                                                                                                    break;\n                                                                                            };\n                                                                                            var $3043 = $3055;\n                                                                                            break;\n                                                                                    };\n                                                                                    var $3042 = $3043;\n                                                                                } else {\n                                                                                    var self = (Mons$Object$is_battling$(_adve_obj$17, _hero_obj$14) && (!Mons$Kind$is_mage$($2988)));\n                                                                                    if (self) {\n                                                                                        var self = ($2979 === 0);\n                                                                                        if (self) {\n                                                                                            var $3073 = Mons$Game$move_obj$(_pos$12, 0, _pos$12, _hero_obj$14, _game$3);\n                                                                                            var $3072 = $3073;\n                                                                                        } else {\n                                                                                            var $3074 = Mons$Game$walk$(_cmd$1, _pos$12, _hero_idx$15, _game$3);\n                                                                                            var $3072 = $3074;\n                                                                                        };\n                                                                                        var $3071 = $3072;\n                                                                                    } else {\n                                                                                        var $3075 = Mons$Game$walk$(_cmd$1, _pos$12, _hero_idx$15, _game$3);\n                                                                                        var $3071 = $3075;\n                                                                                    };\n                                                                                    var $3042 = $3071;\n                                                                                };\n                                                                                var $3041 = $3042;\n                                                                            } else {\n                                                                                var self = (_cmd$1 === 101);\n                                                                                if (self) {\n                                                                                    var self = (_is_battling$18 || _end_battle$19);\n                                                                                    if (self) {\n                                                                                        var $3078 = _game$3;\n                                                                                        var $3077 = $3078;\n                                                                                    } else {\n                                                                                        var $3079 = Mons$Game$set_stt$(Mons$Screen$inventory$(0), _game$3);\n                                                                                        var $3077 = $3079;\n                                                                                    };\n                                                                                    var $3076 = $3077;\n                                                                                } else {\n                                                                                    var self = (_cmd$1 === 99);\n                                                                                    if (self) {\n                                                                                        var self = $2988;\n                                                                                        switch (self._) {\n                                                                                            case 'Mons.Kind.Mons':\n                                                                                                var $3082 = self.ele;\n                                                                                                var $3083 = self.boss;\n                                                                                                var $3084 = self.pri_type;\n                                                                                                var $3085 = self.agi;\n                                                                                                var self = Mons$Object$is_obj_defeated$(_adve_obj$17);\n                                                                                                if (self) {\n                                                                                                    var _game$61 = Mons$Skill$clear_after_battle$(_hero_idx$15, _adve_idx$16, _pos$12, _game$3);\n                                                                                                    var _hero_obj$62 = Mons$Object$add_defeated_mon$(_adve_obj$17, _hero_obj$14);\n                                                                                                    var self = $3083;\n                                                                                                    if (self) {\n                                                                                                        var _hero_obj$63 = Mons$Object$capture_boss$(_adve_obj$17, _hero_obj$62);\n                                                                                                        var $3088 = Mons$Game$delete_adve_obj$(_adve_obj$17, _hero_obj$63, _pos$12, _hero_idx$15, _adve_idx$16, _game$61);\n                                                                                                        var $3087 = $3088;\n                                                                                                    } else {\n                                                                                                        var self = Mons$Object$is_full_bag$(_hero_obj$62);\n                                                                                                        if (self) {\n                                                                                                            var _game$63 = Mons$Game$map_set$(_pos$12, _hero_idx$15, _hero_obj$62, _game$61);\n                                                                                                            var $3090 = Mons$Game$set_stt$(Mons$Screen$capture_mon$(0, Bool$true), _game$63);\n                                                                                                            var $3089 = $3090;\n                                                                                                        } else {\n                                                                                                            var _adve_obj$63 = Mons$Object$set_eff$(Mons$Effect$clear, _adve_obj$17);\n                                                                                                            var _hero_obj$64 = Mons$Object$push_to_bag$(_adve_obj$63, _hero_obj$62);\n                                                                                                            var $3091 = Mons$Game$delete_adve_obj$(_adve_obj$63, _hero_obj$64, _pos$12, _hero_idx$15, _adve_idx$16, _game$61);\n                                                                                                            var $3089 = $3091;\n                                                                                                        };\n                                                                                                        var $3087 = $3089;\n                                                                                                    };\n                                                                                                    var $3086 = $3087;\n                                                                                                } else {\n                                                                                                    var self = Mons$Object$is_obj_defeated$(_curr_mon$20);\n                                                                                                    if (self) {\n                                                                                                        var _game$61 = Mons$Skill$clear_after_battle$(_hero_idx$15, _adve_idx$16, _pos$12, _game$3);\n                                                                                                        var _game$62 = Mons$Game$add_mon$($3082, $3085, $3084, _game$61);\n                                                                                                        var _hero_obj$63 = Mons$Object$delete_from_bag$($2982, _hero_obj$14);\n                                                                                                        var _game$64 = Mons$Game$map_set$(_pos$12, _hero_idx$15, _hero_obj$63, _game$62);\n                                                                                                        var self = ((list_length($2981)) === 0n);\n                                                                                                        if (self) {\n                                                                                                            var $3094 = Mons$Game$set_stt$(Mons$Screen$game_over, _game$64);\n                                                                                                            var $3093 = $3094;\n                                                                                                        } else {\n                                                                                                            var _game$65 = Mons$Game$delete_adve_obj$(_adve_obj$17, _hero_obj$63, _pos$12, _hero_idx$15, _adve_idx$16, _game$64);\n                                                                                                            var $3095 = _set_stt_game$5(_game$65);\n                                                                                                            var $3093 = $3095;\n                                                                                                        };\n                                                                                                        var $3092 = $3093;\n                                                                                                    } else {\n                                                                                                        var self = $3030;\n                                                                                                        switch (self._) {\n                                                                                                            case 'Mons.Turn.new':\n                                                                                                                var $3097 = self.exec_hero;\n                                                                                                                var $3098 = self.hero_skill;\n                                                                                                                var $3099 = self.adve_skill;\n                                                                                                                var $3100 = self.play;\n                                                                                                                var self = Mons$Turn$is_active$($3030);\n                                                                                                                if (self) {\n                                                                                                                    var self = (Mons$Turn$is_last_player_move$($3030) || Mons$Turn$hero_run$($3030));\n                                                                                                                    if (self) {\n                                                                                                                        var _game$65 = Mons$Skill$apply_end_turn_eff$(_hero_idx$15, _adve_idx$16, _pos$12, _game$3);\n                                                                                                                        var self = Mons$Turn$hero_run$($3030);\n                                                                                                                        if (self) {\n                                                                                                                            var _game$66 = Mons$Skill$clear_after_battle$(_hero_idx$15, _adve_idx$16, _pos$12, _game$65);\n                                                                                                                            var _game$67 = Mons$Game$move_obj$(_pos$12, _adve_idx$16, Mons$Kind$get_pos$($2988), _adve_obj$17, _game$66);\n                                                                                                                            var _game$68 = Mons$Game$move_hero_down$($2958, _hero_obj$14, _pos$12, _hero_idx$15, _game$67);\n                                                                                                                            var $3104 = _set_stt_game$5(_game$68);\n                                                                                                                            var $3103 = $3104;\n                                                                                                                        } else {\n                                                                                                                            var $3105 = _set_stt_game$5(_game$65);\n                                                                                                                            var $3103 = $3105;\n                                                                                                                        };\n                                                                                                                        var $3102 = $3103;\n                                                                                                                    } else {\n                                                                                                                        var _turn$65 = Mons$Turn$new$((!$3097), $3098, $3099, (Math.max($3100 - 1, 0)));\n                                                                                                                        var $3106 = Mons$Game$set_stt$(Mons$Screen$game$(46, _turn$65), _game$3);\n                                                                                                                        var $3102 = $3106;\n                                                                                                                    };\n                                                                                                                    var $3101 = $3102;\n                                                                                                                } else {\n                                                                                                                    var $3107 = _set_stt_game$5(_game$3);\n                                                                                                                    var $3101 = $3107;\n                                                                                                                };\n                                                                                                                var $3096 = $3101;\n                                                                                                                break;\n                                                                                                        };\n                                                                                                        var $3092 = $3096;\n                                                                                                    };\n                                                                                                    var $3086 = $3092;\n                                                                                                };\n                                                                                                var $3081 = $3086;\n                                                                                                break;\n                                                                                            case 'Mons.Kind.Const':\n                                                                                                var $3108 = self.ele;\n                                                                                                var self = Mons$Kind$is_portal$($2988);\n                                                                                                if (self) {\n                                                                                                    var _new_pos$58 = Pos32$add$(_pos$12, ((0 | 0 | (0 << 12) | (1 << 24))));\n                                                                                                    var $3110 = Mons$Game$hero_inital_position$(_usr$2, _hero_obj$14, _new_pos$58, _hero_idx$15, _game$3);\n                                                                                                    var $3109 = $3110;\n                                                                                                } else {\n                                                                                                    var $3111 = _game$3;\n                                                                                                    var $3109 = $3111;\n                                                                                                };\n                                                                                                var $3081 = $3109;\n                                                                                                break;\n                                                                                            case 'Mons.Kind.Terrain':\n                                                                                                var $3112 = self.ele;\n                                                                                                var self = Mons$Object$hero_can_push_obj$(_pos$12, $2977, $2960);\n                                                                                                if (self) {\n                                                                                                    var _adjacent_obj$58 = Mons$Object$get_adjacent_obj$(_pos$12, $2977, $2960);\n                                                                                                    var self = _adjacent_obj$58;\n                                                                                                    switch (self._) {\n                                                                                                        case 'Mons.Object.new':\n                                                                                                            var $3115 = self.kin;\n                                                                                                            var $3116 = self.dir;\n                                                                                                            var $3117 = self.pad;\n                                                                                                            var $3118 = self.ani;\n                                                                                                            var $3119 = self.dmg;\n                                                                                                            var $3120 = self.bag;\n                                                                                                            var $3121 = self.mon;\n                                                                                                            var $3122 = self.bos;\n                                                                                                            var $3123 = self.cap;\n                                                                                                            var $3124 = self.idl;\n                                                                                                            var $3125 = self.eff;\n                                                                                                            var $3126 = Mons$Kind$exec_eff$($3115, _game$3);\n                                                                                                            var $3114 = $3126;\n                                                                                                            break;\n                                                                                                    };\n                                                                                                    var $3113 = $3114;\n                                                                                                } else {\n                                                                                                    var $3127 = _set_stt_game$5(_game$3);\n                                                                                                    var $3113 = $3127;\n                                                                                                };\n                                                                                                var $3081 = $3113;\n                                                                                                break;\n                                                                                            case 'Mons.Kind.Interactive':\n                                                                                                var $3128 = self.ele;\n                                                                                                var $3129 = self.on;\n                                                                                                var $3130 = self.eff;\n                                                                                                var _inter_obj$60 = Mons$Object$update_interactive$(_adve_obj$17, Mons$Kind$set_on_interactive);\n                                                                                                var _game$61 = Mons$Game$map_set$(_pos$12, _adve_idx$16, _inter_obj$60, _game$3);\n                                                                                                var self = _inter_obj$60;\n                                                                                                switch (self._) {\n                                                                                                    case 'Mons.Object.new':\n                                                                                                        var $3132 = self.kin;\n                                                                                                        var $3133 = self.dir;\n                                                                                                        var $3134 = self.pad;\n                                                                                                        var $3135 = self.ani;\n                                                                                                        var $3136 = self.dmg;\n                                                                                                        var $3137 = self.bag;\n                                                                                                        var $3138 = self.mon;\n                                                                                                        var $3139 = self.bos;\n                                                                                                        var $3140 = self.cap;\n                                                                                                        var $3141 = self.idl;\n                                                                                                        var $3142 = self.eff;\n                                                                                                        var $3143 = Mons$Kind$exec_eff$($3132, _game$61);\n                                                                                                        var _game_eff_after_interact$60 = $3143;\n                                                                                                        break;\n                                                                                                };\n                                                                                                var self = $3128;\n                                                                                                switch (self._) {\n                                                                                                    case 'Mons.Kind.inter.LEVER':\n                                                                                                        var $3144 = self.id;\n                                                                                                        var $3145 = _game_eff_after_interact$60;\n                                                                                                        var $3131 = $3145;\n                                                                                                        break;\n                                                                                                    case 'Mons.Kind.inter.MOVE':\n                                                                                                        var $3146 = _game_eff_after_interact$60;\n                                                                                                        var $3131 = $3146;\n                                                                                                        break;\n                                                                                                    case 'Mons.Kind.inter.HEAL':\n                                                                                                        var _game$61 = Mons$Kind$exec_eff$($2988, _game$3);\n                                                                                                        var _inter_obj$62 = Mons$Object$update_interactive$(_adve_obj$17, Mons$Kind$set_on_interactive);\n                                                                                                        var $3147 = Mons$Game$map_set$(_pos$12, _adve_idx$16, _inter_obj$62, _game$61);\n                                                                                                        var $3131 = $3147;\n                                                                                                        break;\n                                                                                                };\n                                                                                                var $3081 = $3131;\n                                                                                                break;\n                                                                                        };\n                                                                                        var $3080 = $3081;\n                                                                                    } else {\n                                                                                        var self = (_cmd$1 === 122);\n                                                                                        if (self) {\n                                                                                            var self = $2988;\n                                                                                            switch (self._) {\n                                                                                                case 'Mons.Kind.Mons':\n                                                                                                    var $3150 = self.ele;\n                                                                                                    var $3151 = self.boss;\n                                                                                                    var $3152 = self.pri_type;\n                                                                                                    var $3153 = self.agi;\n                                                                                                    var self = Mons$Object$is_obj_defeated$(_adve_obj$17);\n                                                                                                    if (self) {\n                                                                                                        var _hero_obj$61 = Mons$Object$add_defeated_mon$(_adve_obj$17, _hero_obj$14);\n                                                                                                        var _game$62 = Mons$Game$map_del$(_pos$12, _adve_idx$16, _game$3);\n                                                                                                        var _game$63 = Mons$Game$map_set$(_pos$12, _hero_idx$15, _hero_obj$61, _game$62);\n                                                                                                        var $3155 = _set_stt_game$5(_game$63);\n                                                                                                        var $3154 = $3155;\n                                                                                                    } else {\n                                                                                                        var $3156 = _game$3;\n                                                                                                        var $3154 = $3156;\n                                                                                                    };\n                                                                                                    var $3149 = $3154;\n                                                                                                    break;\n                                                                                                case 'Mons.Kind.Const':\n                                                                                                    var $3157 = self.ele;\n                                                                                                    var $3158 = _set_stt_game$5(_game$3);\n                                                                                                    var $3149 = $3158;\n                                                                                                    break;\n                                                                                                case 'Mons.Kind.Terrain':\n                                                                                                    var $3159 = self.ele;\n                                                                                                    var $3160 = _set_stt_game$5(_game$3);\n                                                                                                    var $3149 = $3160;\n                                                                                                    break;\n                                                                                                case 'Mons.Kind.Interactive':\n                                                                                                    var $3161 = self.ele;\n                                                                                                    var $3162 = self.on;\n                                                                                                    var $3163 = self.eff;\n                                                                                                    var $3164 = _set_stt_game$5(_game$3);\n                                                                                                    var $3149 = $3164;\n                                                                                                    break;\n                                                                                            };\n                                                                                            var $3148 = $3149;\n                                                                                        } else {\n                                                                                            var $3165 = _game$3;\n                                                                                            var $3148 = $3165;\n                                                                                        };\n                                                                                        var $3080 = $3148;\n                                                                                    };\n                                                                                    var $3076 = $3080;\n                                                                                };\n                                                                                var $3041 = $3076;\n                                                                            };\n                                                                            var $3039 = $3041;\n                                                                        };\n                                                                        var $3037 = $3039;\n                                                                    };\n                                                                    var $3035 = $3037;\n                                                                };\n                                                                var $3033 = $3035;\n                                                            };\n                                                            var $3031 = $3033;\n                                                        };\n                                                        var $2999 = $3031;\n                                                        break;\n                                                    case 'Mons.Screen.inventory':\n                                                        var $3166 = self.idx;\n                                                        var $3167 = _game$3;\n                                                        var $2999 = $3167;\n                                                        break;\n                                                    case 'Mons.Screen.capture_mon':\n                                                        var $3168 = self.idx;\n                                                        var $3169 = self.full_bag;\n                                                        var self = (_cmd$1 === 99);\n                                                        if (self) {\n                                                            var _hero_obj$57 = Mons$Object$delete_from_bag$($2982, _hero_obj$14);\n                                                            var _hero_obj$58 = Mons$Object$push_to_bag$(_adve_obj$17, _hero_obj$57);\n                                                            var _hero_obj$59 = Mons$Object$set_mon$(2, _hero_obj$58);\n                                                            var _game$60 = Mons$Game$map_del$(_pos$12, _adve_idx$16, _game$3);\n                                                            var _game$61 = Mons$Game$map_set$(_pos$12, _hero_idx$15, _hero_obj$59, _game$60);\n                                                            var $3171 = _set_stt_game$5(_game$61);\n                                                            var $3170 = $3171;\n                                                        } else {\n                                                            var self = (_cmd$1 === 122);\n                                                            if (self) {\n                                                                var self = Mons$Object$is_obj_defeated$(_adve_obj$17);\n                                                                if (self) {\n                                                                    var _game$57 = Mons$Game$map_del$(_pos$12, _adve_idx$16, _game$3);\n                                                                    var _game$58 = Mons$Game$map_set$(_pos$12, _hero_idx$15, _hero_obj$14, _game$57);\n                                                                    var $3174 = _set_stt_game$5(_game$58);\n                                                                    var $3173 = $3174;\n                                                                } else {\n                                                                    var $3175 = _game$3;\n                                                                    var $3173 = $3175;\n                                                                };\n                                                                var $3172 = $3173;\n                                                            } else {\n                                                                var $3176 = _game$3;\n                                                                var $3172 = $3176;\n                                                            };\n                                                            var $3170 = $3172;\n                                                        };\n                                                        var $2999 = $3170;\n                                                        break;\n                                                    case 'Mons.Screen.game_over':\n                                                        var $3177 = _game$3;\n                                                        var $2999 = $3177;\n                                                        break;\n                                                };\n                                                var $2987 = $2999;\n                                                break;\n                                        };\n                                        var $2975 = $2987;\n                                        break;\n                                };\n                                var $2963 = $2975;\n                                break;\n                        };\n                        var $2957 = $2963;\n                        break;\n                };\n                var $2953 = $2957;\n                break;\n        };\n        return $2953;\n    };\n    const Mons$Game$cmd = x0 => x1 => x2 => Mons$Game$cmd$(x0, x1, x2);\n\n    function App$new$(_init$2, _draw$3, _when$4) {\n        var $3178 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4\n        });\n        return $3178;\n    };\n    const App$new = x0 => x1 => x2 => App$new$(x0, x1, x2);\n\n    function Mons$start$(_online$1) {\n        var _screen$2 = Image3D$alloc_capacity$(524288);\n        var $3179 = App$new$((() => {\n            var _game_usr$3 = Word$zero$(160n);\n            var _game_pos$4 = Map$new;\n            var _game_map$5 = Mons$Map$build$(Mons$map_source);\n            var _game$6 = Mons$Game$new$(_game_usr$3, _game_pos$4, _game_map$5, Mons$Screen$welcome$(0), 0);\n            var $3180 = _game$6;\n            return $3180;\n        })(), (_game$3 => {\n            var $3181 = App$Render$pix$(Mons$draw$(_game$3, _screen$2));\n            return $3181;\n        }), (_event$3 => _game$4 => {\n            var self = _online$1;\n            if (self) {\n                var self = _event$3;\n                switch (self._) {\n                    case 'App.Event.init':\n                        var $3184 = self.time;\n                        var $3185 = self.addr;\n                        var $3186 = self.screen;\n                        var $3187 = self.mouse;\n                        var $3188 = List$cons$(App$Action$print$(\"Starting app.\"), List$cons$(App$Action$resize$(Mons$scr_w, Mons$scr_h), List$cons$(App$Action$state$(Mons$Game$set_usr$($3185, _game$4)), List$cons$(App$Action$watch$(Mons$App$room), List$cons$((() => {\n                            var _chr$9 = Mons$Input$char$(Bool$true, 46);\n                            var self = Mons$Input$serialize$(_chr$9);\n                            switch (self._) {\n                                case 'Maybe.none':\n                                    var $3190 = App$Action$print$(\"\");\n                                    var $3189 = $3190;\n                                    break;\n                                case 'Maybe.some':\n                                    var $3191 = self.value;\n                                    var $3192 = App$Action$post$(Mons$App$room, $3191);\n                                    var $3189 = $3192;\n                                    break;\n                            };\n                            return $3189;\n                        })(), List$nil)))));\n                        var $3183 = $3188;\n                        break;\n                    case 'App.Event.tick':\n                        var $3193 = self.time;\n                        var $3194 = self.screen;\n                        var $3195 = self.mouse;\n                        var $3196 = List$cons$(App$Action$state$(Mons$Game$tick$(_game$4, $3193)), List$nil);\n                        var $3183 = $3196;\n                        break;\n                    case 'App.Event.xkey':\n                        var $3197 = self.time;\n                        var $3198 = self.down;\n                        var $3199 = self.code;\n                        var _chr$8 = Mons$Input$char$($3198, $3199);\n                        var self = Mons$Input$serialize$(_chr$8);\n                        switch (self._) {\n                            case 'Maybe.none':\n                                var $3201 = List$nil;\n                                var $3200 = $3201;\n                                break;\n                            case 'Maybe.some':\n                                var $3202 = self.value;\n                                var $3203 = List$cons$(App$Action$post$(Mons$App$room, $3202), List$nil);\n                                var $3200 = $3203;\n                                break;\n                        };\n                        var $3183 = $3200;\n                        break;\n                    case 'App.Event.post':\n                        var $3204 = self.time;\n                        var $3205 = self.room;\n                        var $3206 = self.addr;\n                        var $3207 = self.data;\n                        var self = Mons$Input$deserialize$($3207);\n                        switch (self._) {\n                            case 'Maybe.none':\n                                var $3209 = List$nil;\n                                var $3208 = $3209;\n                                break;\n                            case 'Maybe.some':\n                                var $3210 = self.value;\n                                var $3211 = List$cons$((() => {\n                                    var self = _game$4;\n                                    switch (self._) {\n                                        case 'Mons.Game.new':\n                                            var $3212 = self.usr;\n                                            var $3213 = self.pos;\n                                            var $3214 = self.map;\n                                            var $3215 = self.stt;\n                                            var $3216 = self.tik;\n                                            var $3217 = App$Action$state$(Mons$Game$cmd$($3210, $3206, _game$4));\n                                            return $3217;\n                                    };\n                                })(), List$nil);\n                                var $3208 = $3211;\n                                break;\n                        };\n                        var $3183 = $3208;\n                        break;\n                };\n                var $3182 = $3183;\n            } else {\n                var self = _event$3;\n                switch (self._) {\n                    case 'App.Event.init':\n                        var $3219 = self.time;\n                        var $3220 = self.addr;\n                        var $3221 = self.screen;\n                        var $3222 = self.mouse;\n                        var $3223 = List$cons$(App$Action$resize$(Mons$scr_w, Mons$scr_h), List$cons$((() => {\n                            var _game$9 = Mons$Game$set_usr$($3220, _game$4);\n                            var _game$10 = Mons$Game$cmd$(100, $3220, _game$9);\n                            var self = _game$10;\n                            switch (self._) {\n                                case 'Mons.Game.new':\n                                    var $3225 = self.usr;\n                                    var $3226 = self.pos;\n                                    var $3227 = self.map;\n                                    var $3228 = self.stt;\n                                    var $3229 = self.tik;\n                                    var self = Mons$Game$get_hero_pos$(_game$10);\n                                    switch (self._) {\n                                        case 'Maybe.none':\n                                            var $3231 = Mons$scr_mid;\n                                            var _pos$16 = $3231;\n                                            break;\n                                        case 'Maybe.some':\n                                            var $3232 = self.value;\n                                            var $3233 = $3232;\n                                            var _pos$16 = $3233;\n                                            break;\n                                    };\n                                    var _hero_info$17 = Mons$Map$get_hero$(_pos$16, $3227);\n                                    var _hero_obj$18 = Pair$fst$(_hero_info$17);\n                                    var _hero_idx$19 = Pair$snd$(_hero_info$17);\n                                    var _game$20 = Mons$Game$hero_inital_position$($3225, _hero_obj$18, _pos$16, 0, _game$10);\n                                    var $3230 = App$Action$state$(_game$20);\n                                    var $3224 = $3230;\n                                    break;\n                            };\n                            return $3224;\n                        })(), List$nil));\n                        var $3218 = $3223;\n                        break;\n                    case 'App.Event.tick':\n                        var $3234 = self.time;\n                        var $3235 = self.screen;\n                        var $3236 = self.mouse;\n                        var $3237 = List$cons$(App$Action$state$(Mons$Game$tick$(_game$4, $3234)), List$nil);\n                        var $3218 = $3237;\n                        break;\n                    case 'App.Event.xkey':\n                        var $3238 = self.time;\n                        var $3239 = self.down;\n                        var $3240 = self.code;\n                        var $3241 = List$cons$((() => {\n                            var self = _game$4;\n                            switch (self._) {\n                                case 'Mons.Game.new':\n                                    var $3242 = self.usr;\n                                    var $3243 = self.pos;\n                                    var $3244 = self.map;\n                                    var $3245 = self.stt;\n                                    var $3246 = self.tik;\n                                    var _chr$13 = Mons$Input$char$($3239, $3240);\n                                    var $3247 = App$Action$state$(Mons$Game$cmd$(_chr$13, $3242, _game$4));\n                                    return $3247;\n                            };\n                        })(), List$nil);\n                        var $3218 = $3241;\n                        break;\n                    case 'App.Event.post':\n                        var $3248 = self.time;\n                        var $3249 = self.room;\n                        var $3250 = self.addr;\n                        var $3251 = self.data;\n                        var $3252 = List$nil;\n                        var $3218 = $3252;\n                        break;\n                };\n                var $3182 = $3218;\n            };\n            return $3182;\n        }));\n        return $3179;\n    };\n    const Mons$start = x0 => Mons$start$(x0);\n    const Mons$off = Mons$start$(Bool$false);\n    const Mons = Mons$off;\n    return {\n        'Buffer32.new': Buffer32$new,\n        'Array': Array,\n        'Array.tip': Array$tip,\n        'Array.tie': Array$tie,\n        'Array.alloc': Array$alloc,\n        'U32.new': U32$new,\n        'Word': Word,\n        'Word.e': Word$e,\n        'Word.o': Word$o,\n        'Word.zero': Word$zero,\n        'U32.zero': U32$zero,\n        'Buffer32.alloc': Buffer32$alloc,\n        'Bool.false': Bool$false,\n        'Bool.true': Bool$true,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.eql': Word$eql,\n        'Nat.succ': Nat$succ,\n        'Nat.zero': Nat$zero,\n        'U32.eql': U32$eql,\n        'Nat.apply': Nat$apply,\n        'Word.i': Word$i,\n        'Word.inc': Word$inc,\n        'U32.inc': U32$inc,\n        'Nat.to_u32': Nat$to_u32,\n        'U32.shr': U32$shr,\n        'U32.needed_depth.go': U32$needed_depth$go,\n        'Word.subber': Word$subber,\n        'Word.sub': Word$sub,\n        'U32.sub': U32$sub,\n        'U32.needed_depth': U32$needed_depth,\n        'Word.mul': Word$mul,\n        'U32.mul': U32$mul,\n        'Image3D.new': Image3D$new,\n        'Image3D.alloc_capacity': Image3D$alloc_capacity,\n        'Map.new': Map$new,\n        'Word.adder': Word$adder,\n        'Word.add': Word$add,\n        'U32.add': U32$add,\n        'List.ifor_u32': List$ifor_u32,\n        'List': List,\n        'Map': Map,\n        'Mons.Map.new': Mons$Map$new,\n        'List.length_u32_go': List$length_u32_go,\n        'List.length_u32': List$length_u32,\n        'U32.for': U32$for,\n        'Word.div': Word$div,\n        'U32.div': U32$div,\n        'Word.or': Word$or,\n        'U32.or': U32$or,\n        'U32.shl': U32$shl,\n        'Pos32.new': Pos32$new,\n        'Word.fold': Word$fold,\n        'Nat.add': Nat$add,\n        'Nat.mul': Nat$mul,\n        'Word.to_nat': Word$to_nat,\n        'U32.to_nat': U32$to_nat,\n        'String.nil': String$nil,\n        'String.cons': String$cons,\n        'String.take': String$take,\n        'Nat.sub': Nat$sub,\n        'String.drop': String$drop,\n        'String.slice': String$slice,\n        'Map.tie': Map$tie,\n        'Maybe.some': Maybe$some,\n        'Maybe.none': Maybe$none,\n        'Map.set': Map$set,\n        'Bits.e': Bits$e,\n        'Bits.o': Bits$o,\n        'Bits.i': Bits$i,\n        'Word.to_bits': Word$to_bits,\n        'U32.to_bits': U32$to_bits,\n        'Mons.Map.set_list': Mons$Map$set_list,\n        'Mons.Object.new': Mons$Object$new,\n        'Mons.Dir.down': Mons$Dir$down,\n        'Mons.Pad.new': Mons$Pad$new,\n        'Mons.Pad.null': Mons$Pad$null,\n        'List.nil': List$nil,\n        'Pair.new': Pair$new,\n        'Mons.Effect.new': Mons$Effect$new,\n        'Mons.Effect.clear': Mons$Effect$clear,\n        'Mons.Object.new_of_kind': Mons$Object$new_of_kind,\n        'Mons.Kind.Terrain': Mons$Kind$Terrain,\n        'Mons.Kind.new_terrain': Mons$Kind$new_terrain,\n        'Mons.Kind.terrain.FLOOR': Mons$Kind$terrain$FLOOR,\n        'Mons.Kind.terrain.PATH_BLOCKER': Mons$Kind$terrain$PATH_BLOCKER,\n        'Bool.and': Bool$and,\n        'U16.eql': U16$eql,\n        'String.eql': String$eql,\n        'Mons.Map.code_to_tile.aux': Mons$Map$code_to_tile$aux,\n        'List.cons': List$cons,\n        'Pair': Pair,\n        'Mons.Kind.Mons': Mons$Kind$Mons,\n        'Mons.Kind.new_mons': Mons$Kind$new_mons,\n        'Mons.Kind.mons.MAGE': Mons$Kind$mons$MAGE,\n        'Mons.Type.normal': Mons$Type$normal,\n        'Mons.Kind.Const': Mons$Kind$Const,\n        'Mons.Kind.new_const': Mons$Kind$new_const,\n        'Mons.Kind.const.CRYSTAL': Mons$Kind$const$CRYSTAL,\n        'Mons.Kind.const.FOUNTAIN': Mons$Kind$const$FOUNTAIN,\n        'Mons.Kind.const.PORTAL': Mons$Kind$const$PORTAL,\n        'Mons.Kind.terrain.VOID_BLACK': Mons$Kind$terrain$VOID_BLACK,\n        'Mons.Kind.terrain.MID_CITY': Mons$Kind$terrain$MID_CITY,\n        'Mons.Kind.terrain.STAIRS': Mons$Kind$terrain$STAIRS,\n        'Mons.Kind.Interactive': Mons$Kind$Interactive,\n        'Mons.Kind.new_interactive_tool': Mons$Kind$new_interactive_tool,\n        'Mons.Kind.inter.HEAL': Mons$Kind$inter$HEAL,\n        'Maybe': Maybe,\n        'Map.get': Map$get,\n        'Mons.Game.get_user_pos': Mons$Game$get_user_pos,\n        'Mons.Game.get_hero_pos': Mons$Game$get_hero_pos,\n        'Word.and': Word$and,\n        'U32.and': U32$and,\n        'Pos32.get_x': Pos32$get_x,\n        'Pos32.get_y': Pos32$get_y,\n        'Pos32.get_z': Pos32$get_z,\n        'Mons.Map.get_list': Mons$Map$get_list,\n        'Mons.Kind.is_hero': Mons$Kind$is_hero,\n        'Mons.Object.get_kin': Mons$Object$get_kin,\n        'List.ifind.go': List$ifind$go,\n        'List.ifind': List$ifind,\n        'Mons.Kind.terrain.VOID': Mons$Kind$terrain$VOID,\n        'Mons.Object.void': Mons$Object$void,\n        'Pair.fst': Pair$fst,\n        'Pair.snd': Pair$snd,\n        'Mons.Map.get_hero': Mons$Map$get_hero,\n        'Mons.Kind.const.CHEST': Mons$Kind$const$CHEST,\n        'Mons.Map.push': Mons$Map$push,\n        'Mons.Game.new': Mons$Game$new,\n        'Mons.Game.set_map': Mons$Game$set_map,\n        'Mons.Game.map_push': Mons$Game$map_push,\n        'Mons.Object.get_adjacent_pos': Mons$Object$get_adjacent_pos,\n        'Mons.Game.get_tile': Mons$Game$get_tile,\n        'Mons.Object.get_adjacent_obj_list': Mons$Object$get_adjacent_obj_list,\n        'Nat.eql': Nat$eql,\n        'List.length': List$length,\n        'Mons.Object.can_move_forward': Mons$Object$can_move_forward,\n        'List.tail': List$tail,\n        'List.delete_at_u32': List$delete_at_u32,\n        'Mons.Map.del': Mons$Map$del,\n        'Mons.Game.map_del': Mons$Game$map_del,\n        'Mons.Object.heal_all_mons': Mons$Object$heal_all_mons,\n        'List.update_at': List$update_at,\n        'Mons.Map.set': Mons$Map$set,\n        'Mons.Game.map_set': Mons$Game$map_set,\n        'Mons.Kind.inter_lever_eff': Mons$Kind$inter_lever_eff,\n        'Mons.Kind.inter.LEVER': Mons$Kind$inter$LEVER,\n        'Mons.Kind.terrain.GRASS_PLANT': Mons$Kind$terrain$GRASS_PLANT,\n        'Mons.Kind.terrain.PLANT_0': Mons$Kind$terrain$PLANT_0,\n        'Mons.Map.code_to_tile': Mons$Map$code_to_tile,\n        'Mons.Map.build': Mons$Map$build,\n        'Mons.map_source': Mons$map_source,\n        'Mons.Screen.welcome': Mons$Screen$welcome,\n        'App.Render.pix': App$Render$pix,\n        'Image3D.set_length': Image3D$set_length,\n        'Image3D.clear': Image3D$clear,\n        'List.at': List$at,\n        'Mons.Map.get': Mons$Map$get,\n        'Mons.Game.dim': Mons$Game$dim,\n        'Mons.Object.get_current_mon': Mons$Object$get_current_mon,\n        'Mons.Attr.new': Mons$Attr$new,\n        'Mons.Kind.set_static_sprites': Mons$Kind$set_static_sprites,\n        'Image3D.empty': Image3D$empty,\n        'Mons.Kind.set_pic': Mons$Kind$set_pic,\n        'Mons.Kind.set_default_battle_spr': Mons$Kind$set_default_battle_spr,\n        'Mons.global_scr_mid': Mons$global_scr_mid,\n        'Mons.Attr.new_neutral': Mons$Attr$new_neutral,\n        'Mons.Kind.attr': Mons$Kind$attr,\n        'Mons.Object.get_ani': Mons$Object$get_ani,\n        'Mons.Object.is_standing': Mons$Object$is_standing,\n        'U32.length': U32$length,\n        'U32.slice': U32$slice,\n        'U32.read_base': U32$read_base,\n        'Image3D.parse_byte': Image3D$parse_byte,\n        'Col32.new': Col32$new,\n        'Word.trim': Word$trim,\n        'Unit.new': Unit$new,\n        'Array.extract_tip': Array$extract_tip,\n        'Array.extract_tie': Array$extract_tie,\n        'Word.foldl': Word$foldl,\n        'Array.mut': Array$mut,\n        'Array.set': Array$set,\n        'Buffer32.set': Buffer32$set,\n        'Image3D.set_pos': Image3D$set_pos,\n        'Image3D.set_col': Image3D$set_col,\n        'Image3D.push': Image3D$push,\n        'Image3D.parse': Image3D$parse,\n        'Mons.Char_black.103': Mons$Char_black$103,\n        'Image3D.get_length': Image3D$get_length,\n        'Array.get': Array$get,\n        'Buffer32.get': Buffer32$get,\n        'Image3D.get_pos': Image3D$get_pos,\n        'Image3D.get_col': Image3D$get_col,\n        'Pos32.sub': Pos32$sub,\n        'Pos32.add': Pos32$add,\n        'Mons.vox_mid': Mons$vox_mid,\n        'Mons.draw.image': Mons$draw$image,\n        'List.for': List$for,\n        'List.imap': List$imap,\n        'List.indices.u32': List$indices$u32,\n        'String.to_list': String$to_list,\n        'U16.to_bits': U16$to_bits,\n        'Mons.font.get_img': Mons$font$get_img,\n        'Mons.draw.char': Mons$draw$char,\n        'Mons.draw.text': Mons$draw$text,\n        'Mons.draw.list.go': Mons$draw$list$go,\n        'Mons.draw.list': Mons$draw$list,\n        'Mons.font.set_img': Mons$font$set_img,\n        'U16.new': U16$new,\n        'U16.inc': U16$inc,\n        'U16.zero': U16$zero,\n        'Nat.to_u16': Nat$to_u16,\n        'Mons.Char_black.100': Mons$Char_black$100,\n        'Mons.Char_black.101': Mons$Char_black$101,\n        'Mons.Char_black.102': Mons$Char_black$102,\n        'Mons.Char_black.104': Mons$Char_black$104,\n        'Mons.Char_black.105': Mons$Char_black$105,\n        'Mons.Char_black.106': Mons$Char_black$106,\n        'Mons.Char_black.107': Mons$Char_black$107,\n        'Mons.Char_black.108': Mons$Char_black$108,\n        'Mons.Char_black.109': Mons$Char_black$109,\n        'Mons.Char_black.110': Mons$Char_black$110,\n        'Mons.Char_black.111': Mons$Char_black$111,\n        'Mons.Char_black.112': Mons$Char_black$112,\n        'Mons.Char_black.113': Mons$Char_black$113,\n        'Mons.Char_black.114': Mons$Char_black$114,\n        'Mons.Char_black.115': Mons$Char_black$115,\n        'Mons.Char_black.116': Mons$Char_black$116,\n        'Mons.Char_black.117': Mons$Char_black$117,\n        'Mons.Char_black.118': Mons$Char_black$118,\n        'Mons.Char_black.119': Mons$Char_black$119,\n        'Mons.Char_black.120': Mons$Char_black$120,\n        'Mons.Char_black.121': Mons$Char_black$121,\n        'Mons.Char_black.122': Mons$Char_black$122,\n        'Mons.Char_black.123': Mons$Char_black$123,\n        'Mons.Char_black.124': Mons$Char_black$124,\n        'Mons.Char_black.125': Mons$Char_black$125,\n        'Mons.Char_black.126': Mons$Char_black$126,\n        'Mons.Char_black.32': Mons$Char_black$32,\n        'Mons.Char_black.33': Mons$Char_black$33,\n        'Mons.Char_black.34': Mons$Char_black$34,\n        'Mons.Char_black.35': Mons$Char_black$35,\n        'Mons.Char_black.36': Mons$Char_black$36,\n        'Mons.Char_black.37': Mons$Char_black$37,\n        'Mons.Char_black.38': Mons$Char_black$38,\n        'Mons.Char_black.39': Mons$Char_black$39,\n        'Mons.Char_black.40': Mons$Char_black$40,\n        'Mons.Char_black.41': Mons$Char_black$41,\n        'Mons.Char_black.42': Mons$Char_black$42,\n        'Mons.Char_black.43': Mons$Char_black$43,\n        'Mons.Char_black.44': Mons$Char_black$44,\n        'Mons.Char_black.45': Mons$Char_black$45,\n        'Mons.Char_black.46': Mons$Char_black$46,\n        'Mons.Char_black.47': Mons$Char_black$47,\n        'Mons.Char_black.48': Mons$Char_black$48,\n        'Mons.Char_black.49': Mons$Char_black$49,\n        'Mons.Char_black.50': Mons$Char_black$50,\n        'Mons.Char_black.51': Mons$Char_black$51,\n        'Mons.Char_black.52': Mons$Char_black$52,\n        'Mons.Char_black.53': Mons$Char_black$53,\n        'Mons.Char_black.54': Mons$Char_black$54,\n        'Mons.Char_black.55': Mons$Char_black$55,\n        'Mons.Char_black.56': Mons$Char_black$56,\n        'Mons.Char_black.57': Mons$Char_black$57,\n        'Mons.Char_black.58': Mons$Char_black$58,\n        'Mons.Char_black.59': Mons$Char_black$59,\n        'Mons.Char_black.60': Mons$Char_black$60,\n        'Mons.Char_black.61': Mons$Char_black$61,\n        'Mons.Char_black.62': Mons$Char_black$62,\n        'Mons.Char_black.63': Mons$Char_black$63,\n        'Mons.Char_black.64': Mons$Char_black$64,\n        'Mons.Char_black.65': Mons$Char_black$65,\n        'Mons.Char_black.66': Mons$Char_black$66,\n        'Mons.Char_black.67': Mons$Char_black$67,\n        'Mons.Char_black.68': Mons$Char_black$68,\n        'Mons.Char_black.69': Mons$Char_black$69,\n        'Mons.Char_black.70': Mons$Char_black$70,\n        'Mons.Char_black.71': Mons$Char_black$71,\n        'Mons.Char_black.72': Mons$Char_black$72,\n        'Mons.Char_black.73': Mons$Char_black$73,\n        'Mons.Char_black.74': Mons$Char_black$74,\n        'Mons.Char_black.75': Mons$Char_black$75,\n        'Mons.Char_black.76': Mons$Char_black$76,\n        'Mons.Char_black.77': Mons$Char_black$77,\n        'Mons.Char_black.78': Mons$Char_black$78,\n        'Mons.Char_black.79': Mons$Char_black$79,\n        'Mons.Char_black.80': Mons$Char_black$80,\n        'Mons.Char_black.81': Mons$Char_black$81,\n        'Mons.Char_black.82': Mons$Char_black$82,\n        'Mons.Char_black.83': Mons$Char_black$83,\n        'Mons.Char_black.84': Mons$Char_black$84,\n        'Mons.Char_black.85': Mons$Char_black$85,\n        'Mons.Char_black.86': Mons$Char_black$86,\n        'Mons.Char_black.87': Mons$Char_black$87,\n        'Mons.Char_black.88': Mons$Char_black$88,\n        'Mons.Char_black.89': Mons$Char_black$89,\n        'Mons.Char_black.90': Mons$Char_black$90,\n        'Mons.Char_black.91': Mons$Char_black$91,\n        'Mons.Char_black.92': Mons$Char_black$92,\n        'Mons.Char_black.93': Mons$Char_black$93,\n        'Mons.Char_black.94': Mons$Char_black$94,\n        'Mons.Char_black.95': Mons$Char_black$95,\n        'Mons.Char_black.96': Mons$Char_black$96,\n        'Mons.Char_black.97': Mons$Char_black$97,\n        'Mons.Char_black.98': Mons$Char_black$98,\n        'Mons.Char_black.99': Mons$Char_black$99,\n        'Mons.Char_black.normal': Mons$Char_black$normal,\n        'Mons.Char_black.earth': Mons$Char_black$earth,\n        'Mons.Char_black.fire': Mons$Char_black$fire,\n        'Mons.Char_black.water': Mons$Char_black$water,\n        'Mons.Char_black.grass': Mons$Char_black$grass,\n        'Mons.Char_black.electric': Mons$Char_black$electric,\n        'Mons.Char_black.psychic': Mons$Char_black$psychic,\n        'Mons.Char_black.ice': Mons$Char_black$ice,\n        'Mons.Char_black.light': Mons$Char_black$light,\n        'Mons.Char_black.darkness': Mons$Char_black$darkness,\n        'Mons.Char_black.s_72': Mons$Char_black$s_72,\n        'Mons.Char_black.s_80': Mons$Char_black$s_80,\n        'Mons.Char_black.burn': Mons$Char_black$burn,\n        'Mons.Char_black.hit': Mons$Char_black$hit,\n        'Mons.Char_black.invulnerable': Mons$Char_black$invulnerable,\n        'Mons.Char_black.minimize': Mons$Char_black$minimize,\n        'Mons.Char_black.poison': Mons$Char_black$poison,\n        'Mons.Char_black.protect': Mons$Char_black$protect,\n        'Mons.Char_black.sleep': Mons$Char_black$sleep,\n        'Mons.Char_black.font': Mons$Char_black$font,\n        'Mons.draw.list_selector': Mons$draw$list_selector,\n        'Mons.Char_white.100': Mons$Char_white$100,\n        'Mons.Char_white.101': Mons$Char_white$101,\n        'Mons.Char_white.102': Mons$Char_white$102,\n        'Mons.Char_white.103': Mons$Char_white$103,\n        'Mons.Char_white.104': Mons$Char_white$104,\n        'Mons.Char_white.105': Mons$Char_white$105,\n        'Mons.Char_white.106': Mons$Char_white$106,\n        'Mons.Char_white.107': Mons$Char_white$107,\n        'Mons.Char_white.108': Mons$Char_white$108,\n        'Mons.Char_white.109': Mons$Char_white$109,\n        'Mons.Char_white.110': Mons$Char_white$110,\n        'Mons.Char_white.111': Mons$Char_white$111,\n        'Mons.Char_white.112': Mons$Char_white$112,\n        'Mons.Char_white.113': Mons$Char_white$113,\n        'Mons.Char_white.114': Mons$Char_white$114,\n        'Mons.Char_white.115': Mons$Char_white$115,\n        'Mons.Char_white.116': Mons$Char_white$116,\n        'Mons.Char_white.117': Mons$Char_white$117,\n        'Mons.Char_white.118': Mons$Char_white$118,\n        'Mons.Char_white.119': Mons$Char_white$119,\n        'Mons.Char_white.120': Mons$Char_white$120,\n        'Mons.Char_white.121': Mons$Char_white$121,\n        'Mons.Char_white.122': Mons$Char_white$122,\n        'Mons.Char_white.123': Mons$Char_white$123,\n        'Mons.Char_white.124': Mons$Char_white$124,\n        'Mons.Char_white.125': Mons$Char_white$125,\n        'Mons.Char_white.126': Mons$Char_white$126,\n        'Mons.Char_white.32': Mons$Char_white$32,\n        'Mons.Char_white.33': Mons$Char_white$33,\n        'Mons.Char_white.34': Mons$Char_white$34,\n        'Mons.Char_white.35': Mons$Char_white$35,\n        'Mons.Char_white.36': Mons$Char_white$36,\n        'Mons.Char_white.37': Mons$Char_white$37,\n        'Mons.Char_white.38': Mons$Char_white$38,\n        'Mons.Char_white.39': Mons$Char_white$39,\n        'Mons.Char_white.40': Mons$Char_white$40,\n        'Mons.Char_white.41': Mons$Char_white$41,\n        'Mons.Char_white.42': Mons$Char_white$42,\n        'Mons.Char_white.43': Mons$Char_white$43,\n        'Mons.Char_white.44': Mons$Char_white$44,\n        'Mons.Char_white.45': Mons$Char_white$45,\n        'Mons.Char_white.46': Mons$Char_white$46,\n        'Mons.Char_white.47': Mons$Char_white$47,\n        'Mons.Char_white.48': Mons$Char_white$48,\n        'Mons.Char_white.49': Mons$Char_white$49,\n        'Mons.Char_white.50': Mons$Char_white$50,\n        'Mons.Char_white.51': Mons$Char_white$51,\n        'Mons.Char_white.52': Mons$Char_white$52,\n        'Mons.Char_white.53': Mons$Char_white$53,\n        'Mons.Char_white.54': Mons$Char_white$54,\n        'Mons.Char_white.55': Mons$Char_white$55,\n        'Mons.Char_white.56': Mons$Char_white$56,\n        'Mons.Char_white.57': Mons$Char_white$57,\n        'Mons.Char_white.58': Mons$Char_white$58,\n        'Mons.Char_white.59': Mons$Char_white$59,\n        'Mons.Char_white.60': Mons$Char_white$60,\n        'Mons.Char_white.61': Mons$Char_white$61,\n        'Mons.Char_white.62': Mons$Char_white$62,\n        'Mons.Char_white.63': Mons$Char_white$63,\n        'Mons.Char_white.64': Mons$Char_white$64,\n        'Mons.Char_white.65': Mons$Char_white$65,\n        'Mons.Char_white.66': Mons$Char_white$66,\n        'Mons.Char_white.67': Mons$Char_white$67,\n        'Mons.Char_white.68': Mons$Char_white$68,\n        'Mons.Char_white.69': Mons$Char_white$69,\n        'Mons.Char_white.70': Mons$Char_white$70,\n        'Mons.Char_white.71': Mons$Char_white$71,\n        'Mons.Char_white.72': Mons$Char_white$72,\n        'Mons.Char_white.73': Mons$Char_white$73,\n        'Mons.Char_white.74': Mons$Char_white$74,\n        'Mons.Char_white.75': Mons$Char_white$75,\n        'Mons.Char_white.76': Mons$Char_white$76,\n        'Mons.Char_white.77': Mons$Char_white$77,\n        'Mons.Char_white.78': Mons$Char_white$78,\n        'Mons.Char_white.79': Mons$Char_white$79,\n        'Mons.Char_white.80': Mons$Char_white$80,\n        'Mons.Char_white.81': Mons$Char_white$81,\n        'Mons.Char_white.82': Mons$Char_white$82,\n        'Mons.Char_white.83': Mons$Char_white$83,\n        'Mons.Char_white.84': Mons$Char_white$84,\n        'Mons.Char_white.85': Mons$Char_white$85,\n        'Mons.Char_white.86': Mons$Char_white$86,\n        'Mons.Char_white.87': Mons$Char_white$87,\n        'Mons.Char_white.88': Mons$Char_white$88,\n        'Mons.Char_white.89': Mons$Char_white$89,\n        'Mons.Char_white.90': Mons$Char_white$90,\n        'Mons.Char_white.91': Mons$Char_white$91,\n        'Mons.Char_white.92': Mons$Char_white$92,\n        'Mons.Char_white.93': Mons$Char_white$93,\n        'Mons.Char_white.94': Mons$Char_white$94,\n        'Mons.Char_white.95': Mons$Char_white$95,\n        'Mons.Char_white.96': Mons$Char_white$96,\n        'Mons.Char_white.97': Mons$Char_white$97,\n        'Mons.Char_white.98': Mons$Char_white$98,\n        'Mons.Char_white.99': Mons$Char_white$99,\n        'Mons.Char_white.font': Mons$Char_white$font,\n        'List.reverse.go': List$reverse$go,\n        'List.reverse': List$reverse,\n        'Mons.Object.get_dir': Mons$Object$get_dir,\n        'Mons.draw.global_xy': Mons$draw$global_xy,\n        'Nat.mod.go': Nat$mod$go,\n        'Nat.mod': Nat$mod,\n        'Either': Either,\n        'Either.left': Either$left,\n        'Either.right': Either$right,\n        'Nat.sub_rem': Nat$sub_rem,\n        'Nat.div_mod.go': Nat$div_mod$go,\n        'Nat.div_mod': Nat$div_mod,\n        'Nat.div': Nat$div,\n        'Mons.draw.cur_sprite': Mons$draw$cur_sprite,\n        'Mons.Sprite.new': Mons$Sprite$new,\n        'Mons.game_sprites': Mons$game_sprites,\n        'Mons.scr_mid': Mons$scr_mid,\n        'Cmp.as_lte': Cmp$as_lte,\n        'Word.lte': Word$lte,\n        'U32.lte': U32$lte,\n        'Cmp.as_ltn': Cmp$as_ltn,\n        'Word.ltn': Word$ltn,\n        'U32.ltn': U32$ltn,\n        'Bool.if': Bool$if,\n        'Mons.Map.build_sprites': Mons$Map$build_sprites,\n        'Mons.draw.text_screen_bg': Mons$draw$text_screen_bg,\n        'Mons.draw.msg_screen.line_0': Mons$draw$msg_screen$line_0,\n        'Mons.draw.msg_screen.line_1': Mons$draw$msg_screen$line_1,\n        'Mons.draw.mage_talk': Mons$draw$mage_talk,\n        'Mons.Object.get_images': Mons$Object$get_images,\n        'Mons.Kind.get_name': Mons$Kind$get_name,\n        'Mons.Object.get_names': Mons$Object$get_names,\n        'Mons.draw.list_image.go': Mons$draw$list_image$go,\n        'Mons.draw.list_image': Mons$draw$list_image,\n        'Mons.draw.mon_img_selected': Mons$draw$mon_img_selected,\n        'Mons.draw.initial_mons': Mons$draw$initial_mons,\n        'String.concat': String$concat,\n        'String.flatten.go': String$flatten$go,\n        'String.flatten': String$flatten,\n        'Mons.draw.img_type': Mons$draw$img_type,\n        'Mons.draw.small_HP': Mons$draw$small_HP,\n        'List.fold': List$fold,\n        'Nat.to_base.go': Nat$to_base$go,\n        'Nat.to_base': Nat$to_base,\n        'Nat.gtn': Nat$gtn,\n        'Nat.lte': Nat$lte,\n        'Nat.show_digit': Nat$show_digit,\n        'Nat.to_string_base': Nat$to_string_base,\n        'U32.to_string': U32$to_string,\n        'Bool.not': Bool$not,\n        'Mons.Object.remaining_hp': Mons$Object$remaining_hp,\n        'Mons.Object.is_obj_defeated': Mons$Object$is_obj_defeated,\n        'Mons.Object.is_battling': Mons$Object$is_battling,\n        'Mons.draw.background': Mons$draw$background,\n        'Mons.draw.get_battle_bg': Mons$draw$get_battle_bg,\n        'Mons.draw.battle_bg': Mons$draw$battle_bg,\n        'Mons.draw.hero_hp': Mons$draw$hero_hp,\n        'Mons.draw.adve_hp': Mons$draw$adve_hp,\n        'Mons.draw.effect': Mons$draw$effect,\n        'Mons.draw.effects': Mons$draw$effects,\n        'Cmp.as_gtn': Cmp$as_gtn,\n        'Word.gtn': Word$gtn,\n        'U32.gtn': U32$gtn,\n        'Mons.Turn.is_active': Mons$Turn$is_active,\n        'Mons.Turn.hero_turn': Mons$Turn$hero_turn,\n        'Mons.Skill.get_name': Mons$Skill$get_name,\n        'Mons.Skill.short_description': Mons$Skill$short_description,\n        'Mons.draw.turn': Mons$draw$turn,\n        'Mons.Kind.get_skills': Mons$Kind$get_skills,\n        'Mons.Skill.none': Mons$Skill$none,\n        'Mons.Game.get_skills_at': Mons$Game$get_skills_at,\n        'Mons.draw.battle_skills': Mons$draw$battle_skills,\n        'Mons.draw.get_full_bg': Mons$draw$get_full_bg,\n        'Mons.draw.capture_bg': Mons$draw$capture_bg,\n        'Mons.draw.battle_win_bg': Mons$draw$battle_win_bg,\n        'Mons.Kind.is_portal': Mons$Kind$is_portal,\n        'Bool.or': Bool$or,\n        'Mons.Game.defeated_lvl_mons': Mons$Game$defeated_lvl_mons,\n        'Mons.Assets.void': Mons$Assets$void,\n        'Mons.Object.qtd_mons_defeated': Mons$Object$qtd_mons_defeated,\n        'Mons.draw.bag_select': Mons$draw$bag_select,\n        'Mons.draw.bag': Mons$draw$bag,\n        'Mons.draw.full_bag': Mons$draw$full_bag,\n        'Mons.draw': Mons$draw,\n        'App.Action': App$Action,\n        'App.Action.print': App$Action$print,\n        'App.Action.resize': App$Action$resize,\n        'Mons.scr_w': Mons$scr_w,\n        'Mons.scr_h': Mons$scr_h,\n        'App.Action.state': App$Action$state,\n        'Mons.Game.set_usr': Mons$Game$set_usr,\n        'App.Action.watch': App$Action$watch,\n        'Word.from_bits': Word$from_bits,\n        'Bits.concat': Bits$concat,\n        'String.to_bits': String$to_bits,\n        'Mons.App.room': Mons$App$room,\n        'Cmp.as_gte': Cmp$as_gte,\n        'Word.gte': Word$gte,\n        'U16.gte': U16$gte,\n        'U16.lte': U16$lte,\n        'U16.sub': U16$sub,\n        'Char.to_upper': Char$to_upper,\n        'U16.add': U16$add,\n        'Char.to_lower': Char$to_lower,\n        'Mons.Input.char': Mons$Input$char,\n        'Mons.Input.list': Mons$Input$list,\n        'Mons.Input.char_to_code_map': Mons$Input$char_to_code_map,\n        'Mons.Input.serialize': Mons$Input$serialize,\n        'App.Action.post': App$Action$post,\n        'Mons.Object.set_ani': Mons$Object$set_ani,\n        'Mons.Object.set_dir': Mons$Object$set_dir,\n        'Mons.Object.is_free_to_move': Mons$Object$is_free_to_move,\n        'Mons.Dir.up': Mons$Dir$up,\n        'Mons.Dir.left': Mons$Dir$left,\n        'Mons.Dir.right': Mons$Dir$right,\n        'Mons.Object.tick': Mons$Object$tick,\n        'Mons.Dir.move': Mons$Dir$move,\n        'Mons.Map.pop': Mons$Map$pop,\n        'Mons.Map.get_top': Mons$Map$get_top,\n        'Mons.Object.is_walking': Mons$Object$is_walking,\n        'Mons.Kind.get_blocks': Mons$Kind$get_blocks,\n        'Mons.Game.move_obj': Mons$Game$move_obj,\n        'Mons.Game.set_user_pos': Mons$Game$set_user_pos,\n        'Mons.Game.tick_user': Mons$Game$tick_user,\n        'Mons.Game.set_tik': Mons$Game$set_tik,\n        'Mons.Game.tick_game': Mons$Game$tick_game,\n        'Mons.Game.tick': Mons$Game$tick,\n        'Bits.slice': Bits$slice,\n        'Mons.Input.code_to_char_map': Mons$Input$code_to_char_map,\n        'Mons.Input.deserialize': Mons$Input$deserialize,\n        'Mons.Game.set_stt': Mons$Game$set_stt,\n        'Mons.Screen.game': Mons$Screen$game,\n        'Mons.Turn.new': Mons$Turn$new,\n        'Mons.Turn.empty': Mons$Turn$empty,\n        'Mons.Kind.mons.HERO': Mons$Kind$mons$HERO,\n        'Mons.Type.fire': Mons$Type$fire,\n        'Mons.Object.hero': Mons$Object$hero,\n        'Mons.Object.ended_battle': Mons$Object$ended_battle,\n        'Mons.Screen.introduction': Mons$Screen$introduction,\n        'Mons.Screen.credits': Mons$Screen$credits,\n        'List.elem': List$elem,\n        'Char.eql': Char$eql,\n        'Mons.is_walk_cmd': Mons$is_walk_cmd,\n        'Mons.key_to_dir': Mons$key_to_dir,\n        'Mons.Object.set_pad': Mons$Object$set_pad,\n        'Mons.Pad.set_r': Mons$Pad$set_r,\n        'Mons.Object.set_pad_r': Mons$Object$set_pad_r,\n        'Mons.Pad.set_u': Mons$Pad$set_u,\n        'Mons.Object.set_pad_u': Mons$Object$set_pad_u,\n        'Mons.Pad.set_l': Mons$Pad$set_l,\n        'Mons.Object.set_pad_l': Mons$Object$set_pad_l,\n        'Mons.Pad.set_d': Mons$Pad$set_d,\n        'Mons.Object.set_pad_d': Mons$Object$set_pad_d,\n        'Mons.dir_to_set_pad': Mons$dir_to_set_pad,\n        'Char.is_upper': Char$is_upper,\n        'Mons.Game.update': Mons$Game$update,\n        'Mons.Game.walk': Mons$Game$walk,\n        'Mons.Kind.is_mage': Mons$Kind$is_mage,\n        'Mons.Object.set_bag': Mons$Object$set_bag,\n        'Mons.Kind.mons.POISOLICK': Mons$Kind$mons$POISOLICK,\n        'Mons.Kind.mons.AZULA': Mons$Kind$mons$AZULA,\n        'Mons.Kind.mons.EMERELDER': Mons$Kind$mons$EMERELDER,\n        'Mons.Object.set_dmg': Mons$Object$set_dmg,\n        'Nat.ltn': Nat$ltn,\n        'List.pure': List$pure,\n        'List.append': List$append,\n        'Mons.Object.push_to_bag': Mons$Object$push_to_bag,\n        'Mons.initial_mons': Mons$initial_mons,\n        'Mons.Screen.intro_select': Mons$Screen$intro_select,\n        'Mons.Type.earth': Mons$Type$earth,\n        'Mons.Object.set_mon': Mons$Object$set_mon,\n        'Mons.Object.delete_init_mons': Mons$Object$delete_init_mons,\n        'U32.gte': U32$gte,\n        'Word.mod': Word$mod,\n        'U32.mod': U32$mod,\n        'Mons.Game.adve_turn': Mons$Game$adve_turn,\n        'Mons.Effect.upd_initial_eff': Mons$Effect$upd_initial_eff,\n        'Mons.Object.set_eff': Mons$Object$set_eff,\n        'Mons.Skill.update_mon_obj': Mons$Skill$update_mon_obj,\n        'Mons.Effect.has_invulnerable': Mons$Effect$has_invulnerable,\n        'Mons.Effect.has_burn': Mons$Effect$has_burn,\n        'Mons.Effect.has_hit': Mons$Effect$has_hit,\n        'Mons.Effect.has_poison': Mons$Effect$has_poison,\n        'Mons.Skill.apply_inital_eff_dmg': Mons$Skill$apply_inital_eff_dmg,\n        'Mons.Effect.has_protect': Mons$Effect$has_protect,\n        'Mons.Effect.has_minimize': Mons$Effect$has_minimize,\n        'Mons.Object.get_dmg': Mons$Object$get_dmg,\n        'Mons.Object.hit': Mons$Object$hit,\n        'Mons.Skill.damage_eff': Mons$Skill$damage_eff,\n        'Mons.Skill.apply_inital_eff': Mons$Skill$apply_inital_eff,\n        'Mons.Effect.has_sleep': Mons$Effect$has_sleep,\n        'Mons.Type.skill_n_type': Mons$Type$skill_n_type,\n        'Mons.Object.heal': Mons$Object$heal,\n        'Mons.Skill.heal_eff': Mons$Skill$heal_eff,\n        'Mons.Effect.set_invulnerable': Mons$Effect$set_invulnerable,\n        'Mons.Skill.invulnerable_eff': Mons$Skill$invulnerable_eff,\n        'Mons.Effect.set_hit': Mons$Effect$set_hit,\n        'Mons.Skill.hit_next_eff': Mons$Skill$hit_next_eff,\n        'Mons.Effect.set_burn': Mons$Effect$set_burn,\n        'Mons.Skill.burn_eff': Mons$Skill$burn_eff,\n        'Mons.Effect.set_protect': Mons$Effect$set_protect,\n        'Mons.Skill.protect_eff': Mons$Skill$protect_eff,\n        'Mons.Effect.set_poison': Mons$Effect$set_poison,\n        'Mons.Skill.poison_eff': Mons$Skill$poison_eff,\n        'Mons.Skill.critical_hit': Mons$Skill$critical_hit,\n        'Mons.Skill.is_critical': Mons$Skill$is_critical,\n        'Mons.Kind.get_agi': Mons$Kind$get_agi,\n        'Mons.Effect.set_minimize': Mons$Effect$set_minimize,\n        'Mons.Skill.minimize_eff': Mons$Skill$minimize_eff,\n        'Mons.Effect.set_sleep': Mons$Effect$set_sleep,\n        'Mons.Skill.sleep_eff': Mons$Skill$sleep_eff,\n        'Mons.Skill.cast': Mons$Skill$cast,\n        'Mons.Skill.run': Mons$Skill$run,\n        'Mons.Game.hero_start_attacking': Mons$Game$hero_start_attacking,\n        'Mons.Game.exec_turn': Mons$Game$exec_turn,\n        'Mons.Kind.is_mon_area': Mons$Kind$is_mon_area,\n        'Mons.Kind.area_mon_pos': Mons$Kind$area_mon_pos,\n        'Mons.Screen.inventory': Mons$Screen$inventory,\n        'Mons.Skill.clear_after_battle': Mons$Skill$clear_after_battle,\n        'Mons.Object.set_cap': Mons$Object$set_cap,\n        'Mons.Object.add_defeated_mon': Mons$Object$add_defeated_mon,\n        'Mons.Object.set_bos': Mons$Object$set_bos,\n        'Mons.Object.capture_boss': Mons$Object$capture_boss,\n        'Mons.Game.delete_adve_obj': Mons$Game$delete_adve_obj,\n        'Mons.Object.is_full_bag': Mons$Object$is_full_bag,\n        'Mons.Screen.capture_mon': Mons$Screen$capture_mon,\n        'Mons.Kind.get_pos': Mons$Kind$get_pos,\n        'Mons.Game.add_mon': Mons$Game$add_mon,\n        'List.delete_at': List$delete_at,\n        'Mons.Object.delete_from_bag': Mons$Object$delete_from_bag,\n        'Mons.Screen.game_over': Mons$Screen$game_over,\n        'Mons.Turn.is_last_player_move': Mons$Turn$is_last_player_move,\n        'Mons.Turn.hero_run': Mons$Turn$hero_run,\n        'Mons.Effect.upd_end_turn_eff': Mons$Effect$upd_end_turn_eff,\n        'Mons.Skill.apply_end_turn_eff': Mons$Skill$apply_end_turn_eff,\n        'Mons.Game.move_hero_down': Mons$Game$move_hero_down,\n        'Mons.Kind.mons.ZOIO': Mons$Kind$mons$ZOIO,\n        'Mons.Kind.mons.MIMIC': Mons$Kind$mons$MIMIC,\n        'Mons.Kind.mons.MIMIC2': Mons$Kind$mons$MIMIC2,\n        'Mons.Kind.mons.CYCLOPE': Mons$Kind$mons$CYCLOPE,\n        'Mons.Kind.mons.TROWL': Mons$Kind$mons$TROWL,\n        'Mons.Kind.mons.EMERELDER2': Mons$Kind$mons$EMERELDER2,\n        'Mons.Game.add_boss': Mons$Game$add_boss,\n        'Mons.Kind.mons.BEHOLDER': Mons$Kind$mons$BEHOLDER,\n        'Mons.Game.add_mons_to_map': Mons$Game$add_mons_to_map,\n        'Mons.Game.hero_inital_position': Mons$Game$hero_inital_position,\n        'Mons.Object.get_adjacent_obj': Mons$Object$get_adjacent_obj,\n        'Mons.Object.hero_can_push_obj': Mons$Object$hero_can_push_obj,\n        'Mons.Kind.exec_eff': Mons$Kind$exec_eff,\n        'Mons.Object.set_kin': Mons$Object$set_kin,\n        'Mons.Object.update_interactive': Mons$Object$update_interactive,\n        'Mons.Kind.set_on_interactive': Mons$Kind$set_on_interactive,\n        'Mons.Game.cmd': Mons$Game$cmd,\n        'App.new': App$new,\n        'Mons.start': Mons$start,\n        'Mons.off': Mons$off,\n        'Mons': Mons,\n    };\n})();"],"sourceRoot":""}