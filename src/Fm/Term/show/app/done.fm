Fm.Term.show.app.done(term: Fm.Term, path: Maybe(Bits -> Bits), args: List(String)): String
  let arity = List.length<_>(args);
  if Bool.and(Fm.Term.show.is_ref(term,"Equal"), Nat.eql(arity,3)) then
    let func = Fm.Term.show.go(term, path);
    let eq_lft = Maybe.default<_>("?", List.at<_>(1, args));
    let eq_rgt = Maybe.default<_>("?", List.at<_>(2, args));
    String.flatten([eq_lft, " == ", eq_rgt])
  else
    let func = Fm.Term.show.go(term, path);
    let wrap = case func {nil: Bool.false, cons: U16.eql(func.head,'(')};
    let args = String.join(",", args);
    let func = if wrap then String.flatten(["(",func,")"]) else func;
    String.flatten([func, "(", args, ")"])