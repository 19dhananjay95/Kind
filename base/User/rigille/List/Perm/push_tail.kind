User.rigille.List.Perm.push_tail<A: Type>(
  xs: List<A>,
  ys: List<A>,
  zs: List<A>,
  Hyp: User.rigille.List.Perm<A>(xs, ys)
): User.rigille.List.Perm<A>(xs ++ zs, ys ++ zs)
  def Perm = User.rigille.List.Perm<A>
  case Hyp with Hyp {
    nil: User.rigille.List.Perm.refl<A>(zs)
    skip: ind = User.rigille.List.Perm.push_tail<A>(Hyp.l0, Hyp.l1, zs, Hyp.Hyp)
          qed = User.rigille.List.Perm.skip<A>(Hyp.x, _, _, ind)
          qed
    swap: qed = User.rigille.List.Perm.swap<A>(Hyp.x, Hyp.y, Hyp.l ++ zs)
          qed
    // TODO this is non-terminating :/
    trans: qed = User.rigille.List.Perm.push_tail<A>(Hyp.l0, Hyp.l2, zs, Hyp)
           qed
  }!
