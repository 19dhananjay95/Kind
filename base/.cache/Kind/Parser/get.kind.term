((((((Monad.bind Parser) Parser.monad) Nat) Kind.Term) Kind.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "{")) # ((((((Monad.bind Parser) Parser.monad) Kind.Name) Kind.Term) Kind.Parser.name) #nam0 ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text ",")) # ((((((Monad.bind Parser) Parser.monad) Kind.Name) Kind.Term) Kind.Parser.name) #nam1 ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "}")) # ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "= ")) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) Kind.Parser.term) #expr ((((((Monad.bind Parser) Parser.monad) (Maybe Unit)) Kind.Term) ((Parser.maybe Unit) (Kind.Parser.text ";"))) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) Kind.Parser.term) #body ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Kind.Term) (Kind.Parser.stop init)) #orig !term = expr; !term = ((Kind.Term.app term) ((Kind.Term.lam "x") #x (Kind.Term.hol Bits.e))); !term = ((Kind.Term.app term) ((Kind.Term.lam nam0) #x ((Kind.Term.lam nam1) #y body))); ((((Monad.pure Parser) Parser.monad) Kind.Term) ((Kind.Term.ori orig) term)))))))))))))