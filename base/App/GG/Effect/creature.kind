App.GG.Effect.creature.is_enemy(coord: App.GG.Coord): App.GG.Effect<Bool>
  (center, origin, local)
  let grid = local@grid
  let bool =
    Maybe {
      get creature = App.GG.Creature.get(coord, grid)
      get team  = App.GG.Team.get(center, origin, grid)
      let bool = App.GG.Team.eql(creature@team, team)
      return not(bool) 
    } <> false
  App.GG.Effect.Result.new!(bool, center, origin, local, (enemy, img) img, 0, "")


// App.GG.Effect.creature.change_hp_at(dmg: I32, pos: App.GG.Coord, flinch: Bool): App.GG.Effect<I32>
//   (center, origin, local)
//   let grid = local@grid
//   let {real_dmg, new_grid} =
//     Maybe {
//       get tile = App.GG.Grid.get(pos, grid)
//       get creature = tile@creature
//       let hp = creature@hp
//       let new_hp = I32.max(hp - dmg, 0)
//       let new_creature = creature@hp <- new_hp
//       let new_tile = tile@creature <- some(new_creature)
//       let real_dmg = hp - new_hp
//       let new_grid = App.GG.Grid.set(pos, new_tile, grid)
//       let new_grid = 
//         if flinch then
//           let stun = App.GG.Actions.stun(App.GG.Creature.Status.Stun.flinch, App.GG.Animation.damage, 24)
//           App.GG.Actions.new_actions(pos, new_grid, stun)
//         else
//           new_grid
//       let new_grid = 
//         if new_hp =? 0 then
//           let vbox = App.GG.Monster.to_vbox(creature@category)
//           let vbox = vbox(App.GG.Animation.death)
//           let target = App.GG.Creature.get(pos, new_grid)
//           without target: new_grid 
//           let new_grid = App.GG.Creature.delete(pos, new_grid)
//           let new_grid = App.GG.Projectile.create(pos, App.GG.Projectile.death(vbox, 23#64, target@team), new_grid)
//           new_grid
//         else
//           new_grid 

//       return {real_dmg, new_grid}
//     } <> {+0#32, grid}
//     let new_local = local@grid <- new_grid
//   App.GG.Effect.Result.new!(real_dmg, center, origin, new_local, (enemy, img) img, 0, "")


App.GG.Effect.creature.change_energy_at(val: I32, pos: App.GG.Coord): App.GG.Effect<I32>
  (center, origin, local)
  let grid = local@grid
  let {real_val, new_grid} = 
    Maybe { 
      get tile = App.GG.Grid.get(pos, grid)
      get creature = tile@creature
      let category = creature@category
      let {mod_monster, energy} = case category {
        minion: {category, +0#32}
        slime:
          let new_energy = I32.max(category.energy - val , 0)
          {App.GG.Monster.slime(category.data, category.attributes, category.charge, category.hand, category.folder, new_energy), category.energy}
      }
      let modif_energy = I32.max(energy - val , 0)
      let new_creature = creature@category <- mod_monster
      let new_tile = tile@creature <- some(new_creature)
      let real_val = energy - modif_energy
      let new_grid = App.GG.Grid.set(pos, new_tile, grid)

      return {real_val, new_grid}
    } <> {+0#32, grid}
    let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(real_val, center, origin, new_local, (enemy, img) img, 0, "")

App.GG.Effect.creature.get: App.GG.Effect<Maybe<App.GG.Creature>>
  (center, origin, local)
  let creature = App.GG.Creature.get(center, local@grid)
  App.GG.Effect.Result.new!(creature, center, origin, local, (enemy, img) img, 0, "")

App.GG.Effect.creature.del_at(pos: App.GG.Coord): App.GG.Effect<Unit>
  (center, origin, local)
  let new_grid = App.GG.Creature.delete(pos, local@grid)
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(unit, center, origin, new_local, (enemy, img) img, 0, "")

App.GG.Effect.creature.get_at(pos: App.GG.Coord): App.GG.Effect<Maybe<App.GG.Creature>>
  (center, origin, local)
  let creature = App.GG.Creature.get(pos, local@grid)
  App.GG.Effect.Result.new!(creature, center, origin, local, (enemy, img) img, 0, "")

App.GG.Effect.creature.modify(mod: App.GG.Creature -> App.GG.Creature): App.GG.Effect<Unit>
  (center, origin, local)
  let new_grid = App.GG.Creature.modify_at(mod, center, local@grid)
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(unit, center, origin, new_local, (enemy, img) img, 0, "")

App.GG.Effect.creature.modify_at(mod: App.GG.Creature -> App.GG.Creature, pos: App.GG.Coord): App.GG.Effect<Unit>
  (center, origin, local)
  let new_grid = App.GG.Creature.modify_at(mod, pos, local@grid)
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(unit, center, origin, new_local, (enemy, img) img, 0, "")
