def TEXT: 1954047348

// Converts an UTF-8 string into a list of bytes
def to_chars: [str]
  [Cons]
  dup Cons = Cons
  let Cons-non-0 = [c]
    get &(c0, c1) = cpy c
    if {c0 > 0}
    then: (Cons c1)
    else: [x] x
  dup f =
    let func = [c] [cs]
      get &(ca, cb) = cpy c
      get &(c0, c1) = cpy ca
      get &(c2, c3) = cpy cb
      let Cons-c0 = (Cons-non-0 {{c0 >>  0} & 0xFF})
      let Cons-c1 = (Cons-non-0 {{c1 >>  8} & 0xFF})
      let Cons-c2 = (Cons-non-0 {{c2 >> 16} & 0xFF})
      let Cons-c3 = (Cons-non-0 {{c3 >> 24} & 0xFF})
      (Cons-c0 (Cons-c1 (Cons-c2 (Cons-c3 cs))))
    (snd str #func)
  # [nil] (f nil)

// Converts a list of bytes back to an UTF-8 string
def from_chars: [chars]
  let nums =
    [Cons]
    dup Cons = Cons
    dup func =
      let loop = [c] [cont] [char] [indx]
        get &(indx0, indx1) = cpy indx
        get &(char0, char1) = cpy {{char >> 8} | {c << 24}}
        get &(done0, done1) = cpy {{indx0 % 4} == 3}
        let Cons-char =
          if done0
          then: (Cons char0)
          else: [x]x
        let next-char =
          if done1
          then: 0
          else: char1
        (Cons-char (cont next-char {indx1 + 1}))
      (chars #loop)
    # [nil] (func [char][indx](Cons char nil) 0 0)
  &(TEXT, nums)

def string_concat: [a] [b]
  (from_chars (concat (to_chars a) (to_chars b)))
