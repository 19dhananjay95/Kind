Nat.lte.double_square(
  a: Nat
  b: Nat 
): Nat.lte(Nat.double(a*b), Nat.pow(a+b,2)) == true
  let hyp = Nat.Order.refl(Nat.double(a*b))
  let h1 = Nat.Order.add.combine(0,Nat.pow(a,2), Nat.double(a*b), Nat.double(a*b), _, hyp)
  let h2 = h1 :: rewrite X in (Nat.lte(X,Nat.add(Nat.pow(a,2),Nat.double(a*b))) == Bool.true) with Nat.add.zero_left(Nat.double(a*b))
  let h3 = Nat.Order.add.combine(0,Nat.pow(b,2),Nat.double(a*b), Nat.pow(a,2) + Nat.double(a*b), _, h2)
  let h4 = h3 :: rewrite X in (Nat.lte(X,Nat.add(Nat.pow(b,2),Nat.add(Nat.pow(a,2),Nat.double(a*b)))) == Bool.true) with Nat.add.zero_left(Nat.double(a*b))
  let h5 = h4 :: rewrite X in (Nat.lte(Nat.double(a*b),X) == Bool.true) with mirror(Nat.add.assoc(Nat.pow(b,2),Nat.pow(a,2),Nat.double(a*b)))
  let h6 = h5 :: rewrite X in (Nat.lte(Nat.double(a*b),Nat.add(X,Nat.double(a*b))) == Bool.true) with Nat.add.comm(Nat.pow(b,2),Nat.pow(a,2))
  let h7 = h6 :: rewrite X in (Nat.lte(Nat.double(a*b),X) == Bool.true) with Nat.add.assoc(Nat.pow(a,2),Nat.pow(b,2),Nat.double(a*b))
  let qed = h7 :: rewrite X in (Nat.lte(Nat.double(a*b),X) == Bool.true) with mirror(Nat.square.sum(a,b))
  qed