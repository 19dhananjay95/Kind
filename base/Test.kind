Parser.float.64: Parser(F64)
  Parser {
    Kind.Parser.spaces
    get sign = Parser.maybe!(Kind.Parser.float.sign)
    let sign = case sign {
      some:
        String.cons(sign.value, "")
      none:
        ""
    }
    get digits = Parser.many1<Char>(Kind.Parser.float.str_digit)
    get frac = Parser.maybe!(Parser {
      Parser.text(".")
      get frac = Parser.many<Char>(Kind.Parser.float.str_digit)
      return frac
    })
    let float_str = sign|String.from_list(digits)
      |case frac {
        none:
          ""
        some:
          "."|String.from_list(frac.value)
      }
    return F64.parse(float_str)
  }

Parser.vector: Parser(V3)
  Parser {
    Kind.Parser.text("(")
    get a = Parser.float.64
    Kind.Parser.text(",")
    get b = Parser.float.64
    Kind.Parser.text(",")
    get c = Parser.float.64
    Kind.Parser.text(")")
    return V3.new(a, b, c)
  }

Parser.vector_set: Parser(List<V3>)
  Kind.Parser.items!("{", Parser.vector, "}")

Test: _
  let parsed = Parser.vector_set(Parser.State.from_code("{(-1.2,2,+3.111), (1, 2, 3), (-73.12, -1, 0)}"))
  case parsed {
    value:
      IO {
        IO.print(List.show!(V3.show, parsed.val))
      }
    error:
      IO {
        open parsed.err
        IO.print(parsed.err.msg)
      }
  }
