#expr #name #wyth #cses #type #defs #ctxt (((((((((((((((((((Fm.Term.reduce type) defs) #type Fm.Term) #type.name #type.indx !expr = (((((List.for Fm.Def) wyth) Fm.Term) expr) #defn #expr ((Fm.Term.app expr) ((defn #defn Fm.Term) #defn.file #defn.code #defn.orig #defn.name #defn.term #defn.type #defn.isct #defn.stat defn.term))); expr) #type.name !expr = (((((List.for Fm.Def) wyth) Fm.Term) expr) #defn #expr ((Fm.Term.app expr) ((defn #defn Fm.Term) #defn.file #defn.code #defn.orig #defn.name #defn.term #defn.type #defn.isct #defn.stat defn.term))); expr) !expr = (((((List.for Fm.Def) wyth) Fm.Term) expr) #defn #expr ((Fm.Term.app expr) ((defn #defn Fm.Term) #defn.file #defn.code #defn.orig #defn.name #defn.term #defn.type #defn.isct #defn.stat defn.term))); expr) #type.eras #type.self #type.name #type.xtyp #type.body !got = (((Maybe.or Fm.Term) (((Fm.get Fm.Term) type.name) cses)) (((Fm.get Fm.Term) "_") cses)); (((got #got Fm.Term) !expr = (((((List.for Fm.Def) wyth) Fm.Term) expr) #defn #expr ((defn #defn Fm.Term) #defn.file #defn.code #defn.orig #defn.name #defn.term #defn.type #defn.isct #defn.stat ((Fm.Term.app expr) defn.term))); expr) #got.value !argm = (((((Fm.Term.desugar_cse.argument name) wyth) type.xtyp) got.value) defs); !expr = ((Fm.Term.app expr) argm); !type = ((type.body ((Fm.Term.var type.self) +0)) ((Fm.Term.var type.name) +0)); (((((((Fm.Term.desugar_cse.cases expr) name) wyth) cses) type) defs) ctxt))) #type.name #type.body !expr = (((((List.for Fm.Def) wyth) Fm.Term) expr) #defn #expr ((Fm.Term.app expr) ((defn #defn Fm.Term) #defn.file #defn.code #defn.orig #defn.name #defn.term #defn.type #defn.isct #defn.stat defn.term))); expr) #type.func #type.argm !expr = (((((List.for Fm.Def) wyth) Fm.Term) expr) #defn #expr ((Fm.Term.app expr) ((defn #defn Fm.Term) #defn.file #defn.code #defn.orig #defn.name #defn.term #defn.type #defn.isct #defn.stat defn.term))); expr) #type.name #type.expr #type.body !expr = (((((List.for Fm.Def) wyth) Fm.Term) expr) #defn #expr ((Fm.Term.app expr) ((defn #defn Fm.Term) #defn.file #defn.code #defn.orig #defn.name #defn.term #defn.type #defn.isct #defn.stat defn.term))); expr) #type.name #type.expr #type.body !expr = (((((List.for Fm.Def) wyth) Fm.Term) expr) #defn #expr ((Fm.Term.app expr) ((defn #defn Fm.Term) #defn.file #defn.code #defn.orig #defn.name #defn.term #defn.type #defn.isct #defn.stat defn.term))); expr) #type.done #type.term #type.type !expr = (((((List.for Fm.Def) wyth) Fm.Term) expr) #defn #expr ((Fm.Term.app expr) ((defn #defn Fm.Term) #defn.file #defn.code #defn.orig #defn.name #defn.term #defn.type #defn.isct #defn.stat defn.term))); expr) #type.name #type.dref #type.verb !expr = (((((List.for Fm.Def) wyth) Fm.Term) expr) #defn #expr ((Fm.Term.app expr) ((defn #defn Fm.Term) #defn.file #defn.code #defn.orig #defn.name #defn.term #defn.type #defn.isct #defn.stat defn.term))); expr) #type.path !expr = (((((List.for Fm.Def) wyth) Fm.Term) expr) #defn #expr ((Fm.Term.app expr) ((defn #defn Fm.Term) #defn.file #defn.code #defn.orig #defn.name #defn.term #defn.type #defn.isct #defn.stat defn.term))); expr) #type.natx !expr = (((((List.for Fm.Def) wyth) Fm.Term) expr) #defn #expr ((Fm.Term.app expr) ((defn #defn Fm.Term) #defn.file #defn.code #defn.orig #defn.name #defn.term #defn.type #defn.isct #defn.stat defn.term))); expr) #type.chrx !expr = (((((List.for Fm.Def) wyth) Fm.Term) expr) #defn #expr ((Fm.Term.app expr) ((defn #defn Fm.Term) #defn.file #defn.code #defn.orig #defn.name #defn.term #defn.type #defn.isct #defn.stat defn.term))); expr) #type.strx !expr = (((((List.for Fm.Def) wyth) Fm.Term) expr) #defn #expr ((Fm.Term.app expr) ((defn #defn Fm.Term) #defn.file #defn.code #defn.orig #defn.name #defn.term #defn.type #defn.isct #defn.stat defn.term))); expr) #type.path #type.expr #type.name #type.with #type.cses #type.moti !expr = (((((List.for Fm.Def) wyth) Fm.Term) expr) #defn #expr ((Fm.Term.app expr) ((defn #defn Fm.Term) #defn.file #defn.code #defn.orig #defn.name #defn.term #defn.type #defn.isct #defn.stat defn.term))); expr) #type.orig #type.expr !expr = (((((List.for Fm.Def) wyth) Fm.Term) expr) #defn #expr ((Fm.Term.app expr) ((defn #defn Fm.Term) #defn.file #defn.code #defn.orig #defn.name #defn.term #defn.type #defn.isct #defn.stat defn.term))); expr)