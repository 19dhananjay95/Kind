{"version":3,"sources":["webpack://kind-web/./src/apps/App.Hello.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS,iCAAiC;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjfile":"130.index.js","sourcesContent":["module.exports = (function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    const inst_unit = x => x(null);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c0;\n                return $2;\n            } else {\n                var $3 = c1;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c0;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c1($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $11 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $9 = u16_to_word(self);\n                    var $10 = c0($9);\n                    return $10;\n            };\n        })();\n        return $11;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $14 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $12 = u32_to_word(self);\n                    var $13 = c0($12);\n                    return $13;\n            };\n        })();\n        return $14;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $15 = u64_to_word(self);\n                    var $16 = c0($15);\n                    return $16;\n            };\n        })();\n        return $17;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $22 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $18 = c0;\n                return $18;\n            } else {\n                var $19 = self.charCodeAt(0);\n                var $20 = self.slice(1);\n                var $21 = c1($19)($20);\n                return $21;\n            };\n        })();\n        return $22;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $26 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $23 = buffer32_to_depth(self);\n                    var $24 = buffer32_to_u32array(self);\n                    var $25 = c0($23)($24);\n                    return $25;\n            };\n        })();\n        return $26;\n    });\n\n    function App$new$(_init$2, _draw$3, _when$4, _tick$5, _post$6) {\n        var $27 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4,\n            'tick': _tick$5,\n            'post': _post$6\n        });\n        return $27;\n    };\n    const App$new = x0 => x1 => x2 => x3 => x4 => App$new$(x0, x1, x2, x3, x4);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $28 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $28;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n    const App$State$new = Pair$new$(null, null);\n    const App$Hello$State = App$State$new;\n\n    function App$Store$new$(_local$2, _global$3) {\n        var $29 = ({\n            _: 'App.Store.new',\n            'local': _local$2,\n            'global': _global$3\n        });\n        return $29;\n    };\n    const App$Store$new = x0 => x1 => App$Store$new$(x0, x1);\n    const App$Hello$init = App$Store$new$(0n, 0n);\n\n    function DOM$node$(_tag$1, _props$2, _style$3, _children$4) {\n        var $30 = ({\n            _: 'DOM.node',\n            'tag': _tag$1,\n            'props': _props$2,\n            'style': _style$3,\n            'children': _children$4\n        });\n        return $30;\n    };\n    const DOM$node = x0 => x1 => x2 => x3 => DOM$node$(x0, x1, x2, x3);\n\n    function BBL$(_K$1, _V$2) {\n        var $31 = null;\n        return $31;\n    };\n    const BBL = x0 => x1 => BBL$(x0, x1);\n\n    function Pair$fst$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $33 = self.fst;\n                var $34 = $33;\n                var $32 = $34;\n                break;\n        };\n        return $32;\n    };\n    const Pair$fst = x0 => Pair$fst$(x0);\n\n    function Pair$snd$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $36 = self.snd;\n                var $37 = $36;\n                var $35 = $37;\n                break;\n        };\n        return $35;\n    };\n    const Pair$snd = x0 => Pair$snd$(x0);\n\n    function BBL$bin$(_size$3, _key$4, _val$5, _left$6, _right$7) {\n        var $38 = ({\n            _: 'BBL.bin',\n            'size': _size$3,\n            'key': _key$4,\n            'val': _val$5,\n            'left': _left$6,\n            'right': _right$7\n        });\n        return $38;\n    };\n    const BBL$bin = x0 => x1 => x2 => x3 => x4 => BBL$bin$(x0, x1, x2, x3, x4);\n\n    function U32$new$(_value$1) {\n        var $39 = word_to_u32(_value$1);\n        return $39;\n    };\n    const U32$new = x0 => U32$new$(x0);\n\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _f$3, _x$4]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [_n$2, _f$3, _x$4];\n        while (true) {\n            let [_n$2, _f$3, _x$4] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $40 = _x$4;\n                    return $40;\n                } else {\n                    var $41 = (self - 1n);\n                    var $42 = Nat$apply$($41, _f$3, _f$3(_x$4));\n                    return $42;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n\n    function Word$(_size$1) {\n        var $43 = null;\n        return $43;\n    };\n    const Word = x0 => Word$(x0);\n    const Word$e = ({\n        _: 'Word.e'\n    });\n\n    function Word$i$(_pred$2) {\n        var $44 = ({\n            _: 'Word.i',\n            'pred': _pred$2\n        });\n        return $44;\n    };\n    const Word$i = x0 => Word$i$(x0);\n\n    function Word$o$(_pred$2) {\n        var $45 = ({\n            _: 'Word.o',\n            'pred': _pred$2\n        });\n        return $45;\n    };\n    const Word$o = x0 => Word$o$(x0);\n\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $47 = self.pred;\n                var $48 = Word$i$($47);\n                var $46 = $48;\n                break;\n            case 'Word.i':\n                var $49 = self.pred;\n                var $50 = Word$o$(Word$inc$($49));\n                var $46 = $50;\n                break;\n            case 'Word.e':\n                var $51 = Word$e;\n                var $46 = $51;\n                break;\n        };\n        return $46;\n    };\n    const Word$inc = x0 => Word$inc$(x0);\n\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $53 = Word$e;\n            var $52 = $53;\n        } else {\n            var $54 = (self - 1n);\n            var $55 = Word$o$(Word$zero$($54));\n            var $52 = $55;\n        };\n        return $52;\n    };\n    const Word$zero = x0 => Word$zero$(x0);\n\n    function Nat$to_word$(_size$1, _n$2) {\n        var $56 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));\n        return $56;\n    };\n    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);\n\n    function Nat$succ$(_pred$1) {\n        var $57 = 1n + _pred$1;\n        return $57;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const Nat$to_u32 = a0 => (Number(a0) >>> 0);\n    const BBL$tip = ({\n        _: 'BBL.tip'\n    });\n\n    function BBL$singleton$(_key$3, _val$4) {\n        var $58 = BBL$bin$(1, _key$3, _val$4, BBL$tip, BBL$tip);\n        return $58;\n    };\n    const BBL$singleton = x0 => x1 => BBL$singleton$(x0, x1);\n\n    function BBL$size$(_map$3) {\n        var self = _map$3;\n        switch (self._) {\n            case 'BBL.bin':\n                var $60 = self.size;\n                var $61 = $60;\n                var $59 = $61;\n                break;\n            case 'BBL.tip':\n                var $62 = 0;\n                var $59 = $62;\n                break;\n        };\n        return $59;\n    };\n    const BBL$size = x0 => BBL$size$(x0);\n    const Bool$false = false;\n    const Bool$true = true;\n\n    function Word$adder$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $64 = self.pred;\n                var $65 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $67 = self.pred;\n                            var $68 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $70 = Word$i$(Word$adder$(_a$pred$10, $67, Bool$false));\n                                    var $69 = $70;\n                                } else {\n                                    var $71 = Word$o$(Word$adder$(_a$pred$10, $67, Bool$false));\n                                    var $69 = $71;\n                                };\n                                return $69;\n                            });\n                            var $66 = $68;\n                            break;\n                        case 'Word.i':\n                            var $72 = self.pred;\n                            var $73 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $75 = Word$o$(Word$adder$(_a$pred$10, $72, Bool$true));\n                                    var $74 = $75;\n                                } else {\n                                    var $76 = Word$i$(Word$adder$(_a$pred$10, $72, Bool$false));\n                                    var $74 = $76;\n                                };\n                                return $74;\n                            });\n                            var $66 = $73;\n                            break;\n                        case 'Word.e':\n                            var $77 = (_a$pred$8 => {\n                                var $78 = Word$e;\n                                return $78;\n                            });\n                            var $66 = $77;\n                            break;\n                    };\n                    var $66 = $66($64);\n                    return $66;\n                });\n                var $63 = $65;\n                break;\n            case 'Word.i':\n                var $79 = self.pred;\n                var $80 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $82 = self.pred;\n                            var $83 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $85 = Word$o$(Word$adder$(_a$pred$10, $82, Bool$true));\n                                    var $84 = $85;\n                                } else {\n                                    var $86 = Word$i$(Word$adder$(_a$pred$10, $82, Bool$false));\n                                    var $84 = $86;\n                                };\n                                return $84;\n                            });\n                            var $81 = $83;\n                            break;\n                        case 'Word.i':\n                            var $87 = self.pred;\n                            var $88 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $90 = Word$i$(Word$adder$(_a$pred$10, $87, Bool$true));\n                                    var $89 = $90;\n                                } else {\n                                    var $91 = Word$o$(Word$adder$(_a$pred$10, $87, Bool$true));\n                                    var $89 = $91;\n                                };\n                                return $89;\n                            });\n                            var $81 = $88;\n                            break;\n                        case 'Word.e':\n                            var $92 = (_a$pred$8 => {\n                                var $93 = Word$e;\n                                return $93;\n                            });\n                            var $81 = $92;\n                            break;\n                    };\n                    var $81 = $81($79);\n                    return $81;\n                });\n                var $63 = $80;\n                break;\n            case 'Word.e':\n                var $94 = (_b$5 => {\n                    var $95 = Word$e;\n                    return $95;\n                });\n                var $63 = $94;\n                break;\n        };\n        var $63 = $63(_b$3);\n        return $63;\n    };\n    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);\n\n    function Word$add$(_a$2, _b$3) {\n        var $96 = Word$adder$(_a$2, _b$3, Bool$false);\n        return $96;\n    };\n    const Word$add = x0 => x1 => Word$add$(x0, x1);\n    const U32$add = a0 => a1 => ((a0 + a1) >>> 0);\n\n    function Word$shift_left$one$go$(_word$2, _prev$3) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $98 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $100 = Word$i$(Word$shift_left$one$go$($98, Bool$false));\n                    var $99 = $100;\n                } else {\n                    var $101 = Word$o$(Word$shift_left$one$go$($98, Bool$false));\n                    var $99 = $101;\n                };\n                var $97 = $99;\n                break;\n            case 'Word.i':\n                var $102 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $104 = Word$i$(Word$shift_left$one$go$($102, Bool$true));\n                    var $103 = $104;\n                } else {\n                    var $105 = Word$o$(Word$shift_left$one$go$($102, Bool$true));\n                    var $103 = $105;\n                };\n                var $97 = $103;\n                break;\n            case 'Word.e':\n                var $106 = Word$e;\n                var $97 = $106;\n                break;\n        };\n        return $97;\n    };\n    const Word$shift_left$one$go = x0 => x1 => Word$shift_left$one$go$(x0, x1);\n\n    function Word$shift_left$one$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $108 = self.pred;\n                var $109 = Word$o$(Word$shift_left$one$go$($108, Bool$false));\n                var $107 = $109;\n                break;\n            case 'Word.i':\n                var $110 = self.pred;\n                var $111 = Word$o$(Word$shift_left$one$go$($110, Bool$true));\n                var $107 = $111;\n                break;\n            case 'Word.e':\n                var $112 = Word$e;\n                var $107 = $112;\n                break;\n        };\n        return $107;\n    };\n    const Word$shift_left$one = x0 => Word$shift_left$one$(x0);\n\n    function Word$shift_left$(_n$2, _value$3) {\n        var Word$shift_left$ = (_n$2, _value$3) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _value$3]\n        });\n        var Word$shift_left = _n$2 => _value$3 => Word$shift_left$(_n$2, _value$3);\n        var arg = [_n$2, _value$3];\n        while (true) {\n            let [_n$2, _value$3] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $113 = _value$3;\n                    return $113;\n                } else {\n                    var $114 = (self - 1n);\n                    var $115 = Word$shift_left$($114, Word$shift_left$one$(_value$3));\n                    return $115;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$shift_left = x0 => x1 => Word$shift_left$(x0, x1);\n\n    function Word$mul$go$(_a$3, _b$4, _acc$5) {\n        var Word$mul$go$ = (_a$3, _b$4, _acc$5) => ({\n            ctr: 'TCO',\n            arg: [_a$3, _b$4, _acc$5]\n        });\n        var Word$mul$go = _a$3 => _b$4 => _acc$5 => Word$mul$go$(_a$3, _b$4, _acc$5);\n        var arg = [_a$3, _b$4, _acc$5];\n        while (true) {\n            let [_a$3, _b$4, _acc$5] = arg;\n            var R = (() => {\n                var self = _a$3;\n                switch (self._) {\n                    case 'Word.o':\n                        var $116 = self.pred;\n                        var $117 = Word$mul$go$($116, Word$shift_left$(1n, _b$4), _acc$5);\n                        return $117;\n                    case 'Word.i':\n                        var $118 = self.pred;\n                        var $119 = Word$mul$go$($118, Word$shift_left$(1n, _b$4), Word$add$(_b$4, _acc$5));\n                        return $119;\n                    case 'Word.e':\n                        var $120 = _acc$5;\n                        return $120;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mul$go = x0 => x1 => x2 => Word$mul$go$(x0, x1, x2);\n\n    function Word$to_zero$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $122 = self.pred;\n                var $123 = Word$o$(Word$to_zero$($122));\n                var $121 = $123;\n                break;\n            case 'Word.i':\n                var $124 = self.pred;\n                var $125 = Word$o$(Word$to_zero$($124));\n                var $121 = $125;\n                break;\n            case 'Word.e':\n                var $126 = Word$e;\n                var $121 = $126;\n                break;\n        };\n        return $121;\n    };\n    const Word$to_zero = x0 => Word$to_zero$(x0);\n\n    function Word$mul$(_a$2, _b$3) {\n        var $127 = Word$mul$go$(_a$2, _b$3, Word$to_zero$(_a$2));\n        return $127;\n    };\n    const Word$mul = x0 => x1 => Word$mul$(x0, x1);\n    const U32$mul = a0 => a1 => ((a0 * a1) >>> 0);\n    const BBL$w = 3;\n\n    function Cmp$as_ltn$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $129 = Bool$true;\n                var $128 = $129;\n                break;\n            case 'Cmp.eql':\n            case 'Cmp.gtn':\n                var $130 = Bool$false;\n                var $128 = $130;\n                break;\n        };\n        return $128;\n    };\n    const Cmp$as_ltn = x0 => Cmp$as_ltn$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $132 = self.pred;\n                var $133 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $135 = self.pred;\n                            var $136 = (_a$pred$10 => {\n                                var $137 = Word$cmp$go$(_a$pred$10, $135, _c$4);\n                                return $137;\n                            });\n                            var $134 = $136;\n                            break;\n                        case 'Word.i':\n                            var $138 = self.pred;\n                            var $139 = (_a$pred$10 => {\n                                var $140 = Word$cmp$go$(_a$pred$10, $138, Cmp$ltn);\n                                return $140;\n                            });\n                            var $134 = $139;\n                            break;\n                        case 'Word.e':\n                            var $141 = (_a$pred$8 => {\n                                var $142 = _c$4;\n                                return $142;\n                            });\n                            var $134 = $141;\n                            break;\n                    };\n                    var $134 = $134($132);\n                    return $134;\n                });\n                var $131 = $133;\n                break;\n            case 'Word.i':\n                var $143 = self.pred;\n                var $144 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $146 = self.pred;\n                            var $147 = (_a$pred$10 => {\n                                var $148 = Word$cmp$go$(_a$pred$10, $146, Cmp$gtn);\n                                return $148;\n                            });\n                            var $145 = $147;\n                            break;\n                        case 'Word.i':\n                            var $149 = self.pred;\n                            var $150 = (_a$pred$10 => {\n                                var $151 = Word$cmp$go$(_a$pred$10, $149, _c$4);\n                                return $151;\n                            });\n                            var $145 = $150;\n                            break;\n                        case 'Word.e':\n                            var $152 = (_a$pred$8 => {\n                                var $153 = _c$4;\n                                return $153;\n                            });\n                            var $145 = $152;\n                            break;\n                    };\n                    var $145 = $145($143);\n                    return $145;\n                });\n                var $131 = $144;\n                break;\n            case 'Word.e':\n                var $154 = (_b$5 => {\n                    var $155 = _c$4;\n                    return $155;\n                });\n                var $131 = $154;\n                break;\n        };\n        var $131 = $131(_b$3);\n        return $131;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $156 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $156;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$ltn$(_a$2, _b$3) {\n        var $157 = Cmp$as_ltn$(Word$cmp$(_a$2, _b$3));\n        return $157;\n    };\n    const Word$ltn = x0 => x1 => Word$ltn$(x0, x1);\n    const U32$ltn = a0 => a1 => (a0 < a1);\n    const U32$from_nat = a0 => (Number(a0) >>> 0);\n\n    function BBL$node$(_key$3, _val$4, _left$5, _right$6) {\n        var _size_left$7 = BBL$size$(_left$5);\n        var _size_right$8 = BBL$size$(_right$6);\n        var _new_size$9 = ((1 + ((_size_left$7 + _size_right$8) >>> 0)) >>> 0);\n        var $158 = BBL$bin$(_new_size$9, _key$3, _val$4, _left$5, _right$6);\n        return $158;\n    };\n    const BBL$node = x0 => x1 => x2 => x3 => BBL$node$(x0, x1, x2, x3);\n\n    function Cmp$as_gtn$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.eql':\n                var $160 = Bool$false;\n                var $159 = $160;\n                break;\n            case 'Cmp.gtn':\n                var $161 = Bool$true;\n                var $159 = $161;\n                break;\n        };\n        return $159;\n    };\n    const Cmp$as_gtn = x0 => Cmp$as_gtn$(x0);\n\n    function Word$gtn$(_a$2, _b$3) {\n        var $162 = Cmp$as_gtn$(Word$cmp$(_a$2, _b$3));\n        return $162;\n    };\n    const Word$gtn = x0 => x1 => Word$gtn$(x0, x1);\n    const U32$gtn = a0 => a1 => (a0 > a1);\n\n    function BBL$balance$(_k$3, _v$4, _l$5, _r$6) {\n        var _size_l$7 = BBL$size$(_l$5);\n        var _size_r$8 = BBL$size$(_r$6);\n        var _size_l_plus_size_r$9 = ((_size_l$7 + _size_r$8) >>> 0);\n        var _w_x_size_l$10 = ((BBL$w * _size_l$7) >>> 0);\n        var _w_x_size_r$11 = ((BBL$w * _size_r$8) >>> 0);\n        var self = (_size_l_plus_size_r$9 < 2);\n        if (self) {\n            var $164 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n            var $163 = $164;\n        } else {\n            var self = (_size_r$8 > _w_x_size_l$10);\n            if (self) {\n                var self = _r$6;\n                switch (self._) {\n                    case 'BBL.bin':\n                        var $167 = self.key;\n                        var $168 = self.val;\n                        var $169 = self.left;\n                        var $170 = self.right;\n                        var _size_rl$17 = BBL$size$($169);\n                        var _size_rr$18 = BBL$size$($170);\n                        var self = (_size_rl$17 < _size_rr$18);\n                        if (self) {\n                            var _new_key$19 = $167;\n                            var _new_val$20 = $168;\n                            var _new_left$21 = BBL$node$(_k$3, _v$4, _l$5, $169);\n                            var _new_right$22 = $170;\n                            var $172 = BBL$node$(_new_key$19, _new_val$20, _new_left$21, _new_right$22);\n                            var $171 = $172;\n                        } else {\n                            var self = $169;\n                            switch (self._) {\n                                case 'BBL.bin':\n                                    var $174 = self.key;\n                                    var $175 = self.val;\n                                    var $176 = self.left;\n                                    var $177 = self.right;\n                                    var _new_key$24 = $174;\n                                    var _new_val$25 = $175;\n                                    var _new_left$26 = BBL$node$(_k$3, _v$4, _l$5, $176);\n                                    var _new_right$27 = BBL$node$($167, $168, $177, $170);\n                                    var $178 = BBL$node$(_new_key$24, _new_val$25, _new_left$26, _new_right$27);\n                                    var $173 = $178;\n                                    break;\n                                case 'BBL.tip':\n                                    var $179 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                                    var $173 = $179;\n                                    break;\n                            };\n                            var $171 = $173;\n                        };\n                        var $166 = $171;\n                        break;\n                    case 'BBL.tip':\n                        var $180 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                        var $166 = $180;\n                        break;\n                };\n                var $165 = $166;\n            } else {\n                var self = (_size_l$7 > _w_x_size_r$11);\n                if (self) {\n                    var self = _l$5;\n                    switch (self._) {\n                        case 'BBL.bin':\n                            var $183 = self.key;\n                            var $184 = self.val;\n                            var $185 = self.left;\n                            var $186 = self.right;\n                            var _size_ll$17 = BBL$size$($185);\n                            var _size_lr$18 = BBL$size$($186);\n                            var self = (_size_lr$18 < _size_ll$17);\n                            if (self) {\n                                var _new_key$19 = $183;\n                                var _new_val$20 = $184;\n                                var _new_left$21 = $185;\n                                var _new_right$22 = BBL$node$(_k$3, _v$4, $186, _r$6);\n                                var $188 = BBL$node$(_new_key$19, _new_val$20, _new_left$21, _new_right$22);\n                                var $187 = $188;\n                            } else {\n                                var self = $186;\n                                switch (self._) {\n                                    case 'BBL.bin':\n                                        var $190 = self.key;\n                                        var $191 = self.val;\n                                        var $192 = self.left;\n                                        var $193 = self.right;\n                                        var _new_key$24 = $190;\n                                        var _new_val$25 = $191;\n                                        var _new_left$26 = BBL$node$($183, $184, $185, $192);\n                                        var _new_right$27 = BBL$node$(_k$3, _v$4, $193, _r$6);\n                                        var $194 = BBL$node$(_new_key$24, _new_val$25, _new_left$26, _new_right$27);\n                                        var $189 = $194;\n                                        break;\n                                    case 'BBL.tip':\n                                        var $195 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                                        var $189 = $195;\n                                        break;\n                                };\n                                var $187 = $189;\n                            };\n                            var $182 = $187;\n                            break;\n                        case 'BBL.tip':\n                            var $196 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                            var $182 = $196;\n                            break;\n                    };\n                    var $181 = $182;\n                } else {\n                    var $197 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                    var $181 = $197;\n                };\n                var $165 = $181;\n            };\n            var $163 = $165;\n        };\n        return $163;\n    };\n    const BBL$balance = x0 => x1 => x2 => x3 => BBL$balance$(x0, x1, x2, x3);\n\n    function BBL$insert$(_cmp$3, _key$4, _val$5, _map$6) {\n        var self = _map$6;\n        switch (self._) {\n            case 'BBL.bin':\n                var $199 = self.key;\n                var $200 = self.val;\n                var $201 = self.left;\n                var $202 = self.right;\n                var self = _cmp$3(_key$4)($199);\n                switch (self._) {\n                    case 'Cmp.ltn':\n                        var _new_key$12 = $199;\n                        var _new_val$13 = $200;\n                        var _new_left$14 = BBL$insert$(_cmp$3, _key$4, _val$5, $201);\n                        var _new_right$15 = $202;\n                        var $204 = BBL$balance$(_new_key$12, _new_val$13, _new_left$14, _new_right$15);\n                        var $203 = $204;\n                        break;\n                    case 'Cmp.eql':\n                        var $205 = BBL$node$(_key$4, _val$5, $201, $202);\n                        var $203 = $205;\n                        break;\n                    case 'Cmp.gtn':\n                        var _new_key$12 = $199;\n                        var _new_val$13 = $200;\n                        var _new_left$14 = $201;\n                        var _new_right$15 = BBL$insert$(_cmp$3, _key$4, _val$5, $202);\n                        var $206 = BBL$balance$(_new_key$12, _new_val$13, _new_left$14, _new_right$15);\n                        var $203 = $206;\n                        break;\n                };\n                var $198 = $203;\n                break;\n            case 'BBL.tip':\n                var $207 = BBL$singleton$(_key$4, _val$5);\n                var $198 = $207;\n                break;\n        };\n        return $198;\n    };\n    const BBL$insert = x0 => x1 => x2 => x3 => BBL$insert$(x0, x1, x2, x3);\n\n    function BBL$from_list$go$(_cmp$3, _acc$4, _xs$5) {\n        var BBL$from_list$go$ = (_cmp$3, _acc$4, _xs$5) => ({\n            ctr: 'TCO',\n            arg: [_cmp$3, _acc$4, _xs$5]\n        });\n        var BBL$from_list$go = _cmp$3 => _acc$4 => _xs$5 => BBL$from_list$go$(_cmp$3, _acc$4, _xs$5);\n        var arg = [_cmp$3, _acc$4, _xs$5];\n        while (true) {\n            let [_cmp$3, _acc$4, _xs$5] = arg;\n            var R = (() => {\n                var self = _xs$5;\n                switch (self._) {\n                    case 'List.cons':\n                        var $208 = self.head;\n                        var $209 = self.tail;\n                        var _key$8 = Pair$fst$($208);\n                        var _val$9 = Pair$snd$($208);\n                        var _new_acc$10 = BBL$insert$(_cmp$3, _key$8, _val$9, _acc$4);\n                        var $210 = BBL$from_list$go$(_cmp$3, _new_acc$10, $209);\n                        return $210;\n                    case 'List.nil':\n                        var $211 = _acc$4;\n                        return $211;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const BBL$from_list$go = x0 => x1 => x2 => BBL$from_list$go$(x0, x1, x2);\n\n    function BBL$from_list$(_cmp$3, _xs$4) {\n        var $212 = BBL$from_list$go$(_cmp$3, BBL$tip, _xs$4);\n        return $212;\n    };\n    const BBL$from_list = x0 => x1 => BBL$from_list$(x0, x1);\n    const U16$ltn = a0 => a1 => (a0 < a1);\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $214 = Bool$false;\n                var $213 = $214;\n                break;\n            case 'Cmp.eql':\n                var $215 = Bool$true;\n                var $213 = $215;\n                break;\n        };\n        return $213;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $216 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $216;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n    const U16$eql = a0 => a1 => (a0 === a1);\n\n    function U16$cmp$(_a$1, _b$2) {\n        var self = (_a$1 < _b$2);\n        if (self) {\n            var $218 = Cmp$ltn;\n            var $217 = $218;\n        } else {\n            var self = (_a$1 === _b$2);\n            if (self) {\n                var $220 = Cmp$eql;\n                var $219 = $220;\n            } else {\n                var $221 = Cmp$gtn;\n                var $219 = $221;\n            };\n            var $217 = $219;\n        };\n        return $217;\n    };\n    const U16$cmp = x0 => x1 => U16$cmp$(x0, x1);\n\n    function String$cmp$(_a$1, _b$2) {\n        var String$cmp$ = (_a$1, _b$2) => ({\n            ctr: 'TCO',\n            arg: [_a$1, _b$2]\n        });\n        var String$cmp = _a$1 => _b$2 => String$cmp$(_a$1, _b$2);\n        var arg = [_a$1, _b$2];\n        while (true) {\n            let [_a$1, _b$2] = arg;\n            var R = (() => {\n                var self = _a$1;\n                if (self.length === 0) {\n                    var self = _b$2;\n                    if (self.length === 0) {\n                        var $223 = Cmp$eql;\n                        var $222 = $223;\n                    } else {\n                        var $224 = self.charCodeAt(0);\n                        var $225 = self.slice(1);\n                        var $226 = Cmp$ltn;\n                        var $222 = $226;\n                    };\n                    return $222;\n                } else {\n                    var $227 = self.charCodeAt(0);\n                    var $228 = self.slice(1);\n                    var self = _b$2;\n                    if (self.length === 0) {\n                        var $230 = Cmp$gtn;\n                        var $229 = $230;\n                    } else {\n                        var $231 = self.charCodeAt(0);\n                        var $232 = self.slice(1);\n                        var self = U16$cmp$($227, $231);\n                        switch (self._) {\n                            case 'Cmp.ltn':\n                                var $234 = Cmp$ltn;\n                                var $233 = $234;\n                                break;\n                            case 'Cmp.eql':\n                                var $235 = String$cmp$($228, $232);\n                                var $233 = $235;\n                                break;\n                            case 'Cmp.gtn':\n                                var $236 = Cmp$gtn;\n                                var $233 = $236;\n                                break;\n                        };\n                        var $229 = $233;\n                    };\n                    return $229;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$cmp = x0 => x1 => String$cmp$(x0, x1);\n\n    function Map$from_list$(_xs$2) {\n        var $237 = BBL$from_list$(String$cmp, _xs$2);\n        return $237;\n    };\n    const Map$from_list = x0 => Map$from_list$(x0);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function Pair$(_A$1, _B$2) {\n        var $238 = null;\n        return $238;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n\n    function List$cons$(_head$2, _tail$3) {\n        var $239 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $239;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function DOM$text$(_value$1) {\n        var $240 = ({\n            _: 'DOM.text',\n            'value': _value$1\n        });\n        return $240;\n    };\n    const DOM$text = x0 => DOM$text$(x0);\n\n    function String$cons$(_head$1, _tail$2) {\n        var $241 = (String.fromCharCode(_head$1) + _tail$2);\n        return $241;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function List$fold$(_list$2, _nil$4, _cons$5) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.cons':\n                var $243 = self.head;\n                var $244 = self.tail;\n                var $245 = _cons$5($243)(List$fold$($244, _nil$4, _cons$5));\n                var $242 = $245;\n                break;\n            case 'List.nil':\n                var $246 = _nil$4;\n                var $242 = $246;\n                break;\n        };\n        return $242;\n    };\n    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);\n\n    function Either$(_A$1, _B$2) {\n        var $247 = null;\n        return $247;\n    };\n    const Either = x0 => x1 => Either$(x0, x1);\n\n    function Either$left$(_value$3) {\n        var $248 = ({\n            _: 'Either.left',\n            'value': _value$3\n        });\n        return $248;\n    };\n    const Either$left = x0 => Either$left$(x0);\n\n    function Either$right$(_value$3) {\n        var $249 = ({\n            _: 'Either.right',\n            'value': _value$3\n        });\n        return $249;\n    };\n    const Either$right = x0 => Either$right$(x0);\n\n    function Nat$sub_rem$(_n$1, _m$2) {\n        var Nat$sub_rem$ = (_n$1, _m$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2]\n        });\n        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);\n        var arg = [_n$1, _m$2];\n        while (true) {\n            let [_n$1, _m$2] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $250 = Either$left$(_n$1);\n                    return $250;\n                } else {\n                    var $251 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $253 = Either$right$(Nat$succ$($251));\n                        var $252 = $253;\n                    } else {\n                        var $254 = (self - 1n);\n                        var $255 = Nat$sub_rem$($254, $251);\n                        var $252 = $255;\n                    };\n                    return $252;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);\n\n    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {\n        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _d$3]\n        });\n        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);\n        var arg = [_n$1, _m$2, _d$3];\n        while (true) {\n            let [_n$1, _m$2, _d$3] = arg;\n            var R = (() => {\n                var self = Nat$sub_rem$(_n$1, _m$2);\n                switch (self._) {\n                    case 'Either.left':\n                        var $256 = self.value;\n                        var $257 = Nat$div_mod$go$($256, _m$2, Nat$succ$(_d$3));\n                        return $257;\n                    case 'Either.right':\n                        var $258 = Pair$new$(_d$3, _n$1);\n                        return $258;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);\n    const Nat$div_mod = a0 => a1 => (({\n        _: 'Pair.new',\n        'fst': a0 / a1,\n        'snd': a0 % a1\n    }));\n\n    function List$(_A$1) {\n        var $259 = null;\n        return $259;\n    };\n    const List = x0 => List$(x0);\n\n    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {\n        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_base$1, _nat$2, _res$3]\n        });\n        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);\n        var arg = [_base$1, _nat$2, _res$3];\n        while (true) {\n            let [_base$1, _nat$2, _res$3] = arg;\n            var R = (() => {\n                var self = (({\n                    _: 'Pair.new',\n                    'fst': _nat$2 / _base$1,\n                    'snd': _nat$2 % _base$1\n                }));\n                switch (self._) {\n                    case 'Pair.new':\n                        var $260 = self.fst;\n                        var $261 = self.snd;\n                        var self = $260;\n                        if (self === 0n) {\n                            var $263 = List$cons$($261, _res$3);\n                            var $262 = $263;\n                        } else {\n                            var $264 = (self - 1n);\n                            var $265 = Nat$to_base$go$(_base$1, $260, List$cons$($261, _res$3));\n                            var $262 = $265;\n                        };\n                        return $262;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);\n\n    function Nat$to_base$(_base$1, _nat$2) {\n        var $266 = Nat$to_base$go$(_base$1, _nat$2, List$nil);\n        return $266;\n    };\n    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);\n    const String$nil = '';\n\n    function Nat$mod$go$(_n$1, _m$2, _r$3) {\n        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _r$3]\n        });\n        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);\n        var arg = [_n$1, _m$2, _r$3];\n        while (true) {\n            let [_n$1, _m$2, _r$3] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $267 = Nat$mod$go$(_n$1, _r$3, _m$2);\n                    return $267;\n                } else {\n                    var $268 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $270 = _r$3;\n                        var $269 = $270;\n                    } else {\n                        var $271 = (self - 1n);\n                        var $272 = Nat$mod$go$($271, $268, Nat$succ$(_r$3));\n                        var $269 = $272;\n                    };\n                    return $269;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);\n    const Nat$mod = a0 => a1 => (a0 % a1);\n    const Bool$and = a0 => a1 => (a0 && a1);\n    const Nat$gtn = a0 => a1 => (a0 > a1);\n    const Nat$lte = a0 => a1 => (a0 <= a1);\n\n    function Maybe$(_A$1) {\n        var $273 = null;\n        return $273;\n    };\n    const Maybe = x0 => Maybe$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n\n    function Maybe$some$(_value$2) {\n        var $274 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $274;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n\n    function List$at$(_index$2, _list$3) {\n        var List$at$ = (_index$2, _list$3) => ({\n            ctr: 'TCO',\n            arg: [_index$2, _list$3]\n        });\n        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);\n        var arg = [_index$2, _list$3];\n        while (true) {\n            let [_index$2, _list$3] = arg;\n            var R = (() => {\n                var self = _list$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $275 = self.head;\n                        var $276 = self.tail;\n                        var self = _index$2;\n                        if (self === 0n) {\n                            var $278 = Maybe$some$($275);\n                            var $277 = $278;\n                        } else {\n                            var $279 = (self - 1n);\n                            var $280 = List$at$($279, $276);\n                            var $277 = $280;\n                        };\n                        return $277;\n                    case 'List.nil':\n                        var $281 = Maybe$none;\n                        return $281;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$at = x0 => x1 => List$at$(x0, x1);\n\n    function Nat$show_digit$(_base$1, _n$2) {\n        var _m$3 = (_n$2 % _base$1);\n        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n        var self = ((_base$1 > 0n) && (_base$1 <= 64n));\n        if (self) {\n            var self = List$at$(_m$3, _base64$4);\n            switch (self._) {\n                case 'Maybe.some':\n                    var $284 = self.value;\n                    var $285 = $284;\n                    var $283 = $285;\n                    break;\n                case 'Maybe.none':\n                    var $286 = 35;\n                    var $283 = $286;\n                    break;\n            };\n            var $282 = $283;\n        } else {\n            var $287 = 35;\n            var $282 = $287;\n        };\n        return $282;\n    };\n    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);\n\n    function Nat$to_string_base$(_base$1, _nat$2) {\n        var $288 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {\n            var $289 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);\n            return $289;\n        }));\n        return $288;\n    };\n    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);\n\n    function Nat$show$(_n$1) {\n        var $290 = Nat$to_string_base$(10n, _n$1);\n        return $290;\n    };\n    const Nat$show = x0 => Nat$show$(x0);\n\n    function App$Hello$draw$(_state$1) {\n        var $291 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"border\", \"1px solid black\"), List$nil)), List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"font-weight\", \"bold\"), List$nil)), List$cons$(DOM$text$(\"Hello, world!\"), List$nil)), List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$text$((\"Clicks: \" + Nat$show$((() => {\n            var self = _state$1;\n            switch (self._) {\n                case 'App.Store.new':\n                    var $292 = self.local;\n                    var $293 = $292;\n                    return $293;\n            };\n        })()))), List$nil)), List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$text$((\"Visits: \" + Nat$show$((() => {\n            var self = _state$1;\n            switch (self._) {\n                case 'App.Store.new':\n                    var $294 = self.global;\n                    var $295 = $294;\n                    return $295;\n            };\n        })()))), List$nil)), List$nil))));\n        return $291;\n    };\n    const App$Hello$draw = x0 => App$Hello$draw$(x0);\n\n    function IO$(_A$1) {\n        var $296 = null;\n        return $296;\n    };\n    const IO = x0 => IO$(x0);\n    const App$State$local = Pair$fst;\n\n    function IO$ask$(_query$2, _param$3, _then$4) {\n        var $297 = ({\n            _: 'IO.ask',\n            'query': _query$2,\n            'param': _param$3,\n            'then': _then$4\n        });\n        return $297;\n    };\n    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);\n\n    function IO$bind$(_a$3, _f$4) {\n        var self = _a$3;\n        switch (self._) {\n            case 'IO.end':\n                var $299 = self.value;\n                var $300 = _f$4($299);\n                var $298 = $300;\n                break;\n            case 'IO.ask':\n                var $301 = self.query;\n                var $302 = self.param;\n                var $303 = self.then;\n                var $304 = IO$ask$($301, $302, (_x$8 => {\n                    var $305 = IO$bind$($303(_x$8), _f$4);\n                    return $305;\n                }));\n                var $298 = $304;\n                break;\n        };\n        return $298;\n    };\n    const IO$bind = x0 => x1 => IO$bind$(x0, x1);\n\n    function IO$end$(_value$2) {\n        var $306 = ({\n            _: 'IO.end',\n            'value': _value$2\n        });\n        return $306;\n    };\n    const IO$end = x0 => IO$end$(x0);\n\n    function IO$monad$(_new$2) {\n        var $307 = _new$2(IO$bind)(IO$end);\n        return $307;\n    };\n    const IO$monad = x0 => IO$monad$(x0);\n    const Unit$new = null;\n\n    function IO$do$(_call$1, _param$2) {\n        var $308 = IO$ask$(_call$1, _param$2, (_answer$3 => {\n            var $309 = IO$end$(Unit$new);\n            return $309;\n        }));\n        return $308;\n    };\n    const IO$do = x0 => x1 => IO$do$(x0, x1);\n    const App$pass = IO$monad$((_m$bind$2 => _m$pure$3 => {\n        var $310 = _m$pure$3;\n        return $310;\n    }))(Maybe$none);\n\n    function App$do$(_call$2, _param$3) {\n        var $311 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n            var $312 = _m$bind$4;\n            return $312;\n        }))(IO$do$(_call$2, _param$3))((_$4 => {\n            var $313 = App$pass;\n            return $313;\n        }));\n        return $311;\n    };\n    const App$do = x0 => x1 => App$do$(x0, x1);\n\n    function App$watch$(_room$2) {\n        var $314 = App$do$(\"watch\", _room$2);\n        return $314;\n    };\n    const App$watch = x0 => App$watch$(x0);\n    const App$room_zero = \"0x00000000000000\";\n\n    function App$new_post$(_room$2, _data$3) {\n        var $315 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n            var $316 = _m$bind$4;\n            return $316;\n        }))(App$do$(\"post\", (_room$2 + (\";\" + _data$3))))((_$4 => {\n            var $317 = App$pass;\n            return $317;\n        }));\n        return $315;\n    };\n    const App$new_post = x0 => x1 => App$new_post$(x0, x1);\n    const App$empty_post = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\n    function App$set_local$(_value$2) {\n        var $318 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n            var $319 = _m$pure$4;\n            return $319;\n        }))(Maybe$some$(_value$2));\n        return $318;\n    };\n    const App$set_local = x0 => App$set_local$(x0);\n    const Nat$add = a0 => a1 => (a0 + a1);\n\n    function App$Hello$when$(_event$1, _state$2) {\n        var self = _event$1;\n        switch (self._) {\n            case 'App.Event.init':\n                var $321 = IO$monad$((_m$bind$6 => _m$pure$7 => {\n                    var $322 = _m$bind$6;\n                    return $322;\n                }))(App$watch$(App$room_zero))((_$6 => {\n                    var $323 = App$new_post$(App$room_zero, App$empty_post);\n                    return $323;\n                }));\n                var $320 = $321;\n                break;\n            case 'App.Event.frame':\n            case 'App.Event.mouse_up':\n            case 'App.Event.key_down':\n            case 'App.Event.key_up':\n            case 'App.Event.mouse_move':\n            case 'App.Event.mouse_over':\n            case 'App.Event.mouse_click':\n            case 'App.Event.input':\n                var $324 = App$pass;\n                var $320 = $324;\n                break;\n            case 'App.Event.mouse_down':\n                var $325 = App$set_local$(((() => {\n                    var self = _state$2;\n                    switch (self._) {\n                        case 'App.Store.new':\n                            var $326 = self.local;\n                            var $327 = $326;\n                            return $327;\n                    };\n                })() + 1n));\n                var $320 = $325;\n                break;\n        };\n        return $320;\n    };\n    const App$Hello$when = x0 => x1 => App$Hello$when$(x0, x1);\n\n    function App$no_tick$(_tick$2, _glob$3) {\n        var $328 = _glob$3;\n        return $328;\n    };\n    const App$no_tick = x0 => x1 => App$no_tick$(x0, x1);\n    const App$Hello$tick = App$no_tick;\n\n    function App$Hello$post$(_time$1, _room$2, _addr$3, _data$4, _global_state$5) {\n        var $329 = (_global_state$5 + 1n);\n        return $329;\n    };\n    const App$Hello$post = x0 => x1 => x2 => x3 => x4 => App$Hello$post$(x0, x1, x2, x3, x4);\n    const App$Hello = App$new$(App$Hello$init, App$Hello$draw, App$Hello$when, App$Hello$tick, App$Hello$post);\n    return {\n        'App.new': App$new,\n        'Pair.new': Pair$new,\n        'App.State.new': App$State$new,\n        'App.Hello.State': App$Hello$State,\n        'App.Store.new': App$Store$new,\n        'App.Hello.init': App$Hello$init,\n        'DOM.node': DOM$node,\n        'BBL': BBL,\n        'Pair.fst': Pair$fst,\n        'Pair.snd': Pair$snd,\n        'BBL.bin': BBL$bin,\n        'U32.new': U32$new,\n        'Nat.apply': Nat$apply,\n        'Word': Word,\n        'Word.e': Word$e,\n        'Word.i': Word$i,\n        'Word.o': Word$o,\n        'Word.inc': Word$inc,\n        'Word.zero': Word$zero,\n        'Nat.to_word': Nat$to_word,\n        'Nat.succ': Nat$succ,\n        'Nat.zero': Nat$zero,\n        'Nat.to_u32': Nat$to_u32,\n        'BBL.tip': BBL$tip,\n        'BBL.singleton': BBL$singleton,\n        'BBL.size': BBL$size,\n        'Bool.false': Bool$false,\n        'Bool.true': Bool$true,\n        'Word.adder': Word$adder,\n        'Word.add': Word$add,\n        'U32.add': U32$add,\n        'Word.shift_left.one.go': Word$shift_left$one$go,\n        'Word.shift_left.one': Word$shift_left$one,\n        'Word.shift_left': Word$shift_left,\n        'Word.mul.go': Word$mul$go,\n        'Word.to_zero': Word$to_zero,\n        'Word.mul': Word$mul,\n        'U32.mul': U32$mul,\n        'BBL.w': BBL$w,\n        'Cmp.as_ltn': Cmp$as_ltn,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.ltn': Word$ltn,\n        'U32.ltn': U32$ltn,\n        'U32.from_nat': U32$from_nat,\n        'BBL.node': BBL$node,\n        'Cmp.as_gtn': Cmp$as_gtn,\n        'Word.gtn': Word$gtn,\n        'U32.gtn': U32$gtn,\n        'BBL.balance': BBL$balance,\n        'BBL.insert': BBL$insert,\n        'BBL.from_list.go': BBL$from_list$go,\n        'BBL.from_list': BBL$from_list,\n        'U16.ltn': U16$ltn,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Word.eql': Word$eql,\n        'U16.eql': U16$eql,\n        'U16.cmp': U16$cmp,\n        'String.cmp': String$cmp,\n        'Map.from_list': Map$from_list,\n        'List.nil': List$nil,\n        'Pair': Pair,\n        'List.cons': List$cons,\n        'DOM.text': DOM$text,\n        'String.cons': String$cons,\n        'String.concat': String$concat,\n        'List.fold': List$fold,\n        'Either': Either,\n        'Either.left': Either$left,\n        'Either.right': Either$right,\n        'Nat.sub_rem': Nat$sub_rem,\n        'Nat.div_mod.go': Nat$div_mod$go,\n        'Nat.div_mod': Nat$div_mod,\n        'List': List,\n        'Nat.to_base.go': Nat$to_base$go,\n        'Nat.to_base': Nat$to_base,\n        'String.nil': String$nil,\n        'Nat.mod.go': Nat$mod$go,\n        'Nat.mod': Nat$mod,\n        'Bool.and': Bool$and,\n        'Nat.gtn': Nat$gtn,\n        'Nat.lte': Nat$lte,\n        'Maybe': Maybe,\n        'Maybe.none': Maybe$none,\n        'Maybe.some': Maybe$some,\n        'List.at': List$at,\n        'Nat.show_digit': Nat$show_digit,\n        'Nat.to_string_base': Nat$to_string_base,\n        'Nat.show': Nat$show,\n        'App.Hello.draw': App$Hello$draw,\n        'IO': IO,\n        'App.State.local': App$State$local,\n        'IO.ask': IO$ask,\n        'IO.bind': IO$bind,\n        'IO.end': IO$end,\n        'IO.monad': IO$monad,\n        'Unit.new': Unit$new,\n        'IO.do': IO$do,\n        'App.pass': App$pass,\n        'App.do': App$do,\n        'App.watch': App$watch,\n        'App.room_zero': App$room_zero,\n        'App.new_post': App$new_post,\n        'App.empty_post': App$empty_post,\n        'App.set_local': App$set_local,\n        'Nat.add': Nat$add,\n        'App.Hello.when': App$Hello$when,\n        'App.no_tick': App$no_tick,\n        'App.Hello.tick': App$Hello$tick,\n        'App.Hello.post': App$Hello$post,\n        'App.Hello': App$Hello,\n    };\n})();"],"sourceRoot":""}