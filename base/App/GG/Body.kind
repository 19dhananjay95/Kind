type App.GG.Body.Triple{ 
  new(fst: App.GG.Chip, snd: App.GG.Chip, trd: App.GG.Chip)
}

type App.GG.Body {
  new(
    hull : App.GG.Body.Hull
    upper: App.GG.Body.Upper
    lower: App.GG.Body.Lower
    arm_1: App.GG.Body.Arms
    arm_2: App.GG.Body.Arms
  )
}

App.GG.Body.get_correspondent_chip(
  chips: App.GG.Chips
  id: Nat
): App.GG.Chip

  List.get!(id, chips) <> App.GG.Chip.Generic

App.GG.Body.generic(
  body: App.GG.Parts,
  chips: App.GG.Chips
): App.GG.Body.Triple

  let f = App.GG.Body.get_correspondent_chip(chips)
  {f(body@fst), f(body@snd) , f(body@trd)}

//============================================

App.GG.Body.chips(
  body: App.GG.Body
): App.GG.Chips

  let hull  = App.GG.Body.Hull.get_chips(body)
  let upper = App.GG.Body.Upper.get_chips(body)
  let lower = App.GG.Body.Lower.get_chips(body)
  let arm_1 = App.GG.Body.Arms.get_chips_1(body)
  let arm_2 = App.GG.Body.Arms.get_chips_2(body)
  let chips = hull ++ upper ++ lower ++ arm_1 ++ arm_2
  chips

App.GG.Body.attributes(
  body: App.GG.Body
): App.GG.Attributes
  let chips = App.GG.Body.chips(body)
  let f = (chip: App.GG.Chip, attributes: App.GG.Attributes) App.GG.Attributes.add(attributes, chip@attributes)
  let attributes = List.foldr!!(App.GG.Attributes.pure, f, chips)
  attributes

App.GG.Body.to_folder(body: App.GG.Body): App.GG.Chips
  let chips = App.GG.Body.chips(body)
  let f = 
    (chip: App.GG.Chip)
      [chip, chip, chip]
  let new_list = List.map!!(f, chips)
  let flat = List.flatten!(new_list)
  flat
