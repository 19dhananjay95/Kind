((((((Monad.bind Parser) Parser.monad) Nat) Fm.Term) Fm.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Unit) Fm.Term) (Fm.Parser.text "open ")) # ((((((Monad.bind Parser) Parser.monad) (List Unit)) Fm.Term) Fm.Parser.spaces) # ((((((Monad.bind Parser) Parser.monad) Fm.Term) Fm.Term) Fm.Parser.term) #expr ((((((Monad.bind Parser) Parser.monad) (Maybe Fm.Name)) Fm.Term) ((Parser.maybe Fm.Name) ((((((Monad.bind Parser) Parser.monad) Unit) Fm.Name) (Fm.Parser.text "as")) # Fm.Parser.name1))) #name ((((((Monad.bind Parser) Parser.monad) (Maybe Unit)) Fm.Term) ((Parser.maybe Unit) (Fm.Parser.text ";"))) # !name = (((name #name Fm.Name) (((((((((((((((((((Fm.Term.reduce expr) (Map.new Fm.Def)) #expr Fm.Name) #expr.name #expr.indx expr.name) #expr.name expr.name) (Fm.Name.read "self")) #expr.eras #expr.self #expr.name #expr.xtyp #expr.body (Fm.Name.read "self")) #expr.name #expr.body (Fm.Name.read "self")) #expr.func #expr.argm (Fm.Name.read "self")) #expr.name #expr.expr #expr.body (Fm.Name.read "self")) #expr.name #expr.expr #expr.body (Fm.Name.read "self")) #expr.done #expr.term #expr.type (Fm.Name.read "self")) #expr.name #expr.dref #expr.verb (Fm.Name.read "self")) #expr.path (Fm.Name.read "self")) #expr.natx (Fm.Name.read "self")) #expr.chrx (Fm.Name.read "self")) #expr.strx (Fm.Name.read "self")) #expr.path #expr.expr #expr.name #expr.with #expr.cses #expr.moti (Fm.Name.read "self")) #expr.orig #expr.expr (Fm.Name.read "self"))) #name.value name.value); !wyth = (List.nil Fm.Def); ((((((Monad.bind Parser) Parser.monad) Fm.Term) Fm.Term) Fm.Parser.term) #rest !cses = ((((Fm.set Fm.Term) "_") rest) (Map.new Fm.Term)); !moti = ((Maybe.some Fm.Term) (Fm.Term.hol Bits.e)); ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Fm.Term) (Fm.Parser.stop init)) #orig ((((Monad.pure Parser) Parser.monad) Fm.Term) ((Fm.Term.ori orig) ((((((Fm.Term.cse Bits.e) expr) name) wyth) cses) moti)))))))))))