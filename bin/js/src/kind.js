module.exports = (function() {
    function word_to_u16(w) {
        var u = 0;
        for (var i = 0; i < 16; ++i) {
            u = u | (w._ === 'Word.i' ? 1 << i : 0);
            w = w.pred;
        };
        return u;
    };

    function u16_to_word(u) {
        var w = {
            _: 'Word.e'
        };
        for (var i = 0; i < 16; ++i) {
            w = {
                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',
                pred: w
            };
        };
        return w;
    };

    function u16_to_bits(x) {
        var s = '';
        for (var i = 0; i < 16; ++i) {
            s = (x & 1 ? '1' : '0') + s;
            x = x >>> 1;
        }
        return s;
    };
    var list_for = list => nil => cons => {
        while (list._ !== 'List.nil') {
            nil = cons(list.head)(nil);
            list = list.tail;
        }
        return nil;
    };
    var list_length = list => {
        var len = 0;
        while (list._ === 'List.cons') {
            len += 1;
            list = list.tail;
        };
        return BigInt(len);
    };
    var nat_to_bits = n => {
        return n === 0n ? '' : n.toString(2);
    };
    var kind_name_to_bits = name => {
        const TABLE = {
            'A': '000000',
            'B': '100000',
            'C': '010000',
            'D': '110000',
            'E': '001000',
            'F': '101000',
            'G': '011000',
            'H': '111000',
            'I': '000100',
            'J': '100100',
            'K': '010100',
            'L': '110100',
            'M': '001100',
            'N': '101100',
            'O': '011100',
            'P': '111100',
            'Q': '000010',
            'R': '100010',
            'S': '010010',
            'T': '110010',
            'U': '001010',
            'V': '101010',
            'W': '011010',
            'X': '111010',
            'Y': '000110',
            'Z': '100110',
            'a': '010110',
            'b': '110110',
            'c': '001110',
            'd': '101110',
            'e': '011110',
            'f': '111110',
            'g': '000001',
            'h': '100001',
            'i': '010001',
            'j': '110001',
            'k': '001001',
            'l': '101001',
            'm': '011001',
            'n': '111001',
            'o': '000101',
            'p': '100101',
            'q': '010101',
            'r': '110101',
            's': '001101',
            't': '101101',
            'u': '011101',
            'v': '111101',
            'w': '000011',
            'x': '100011',
            'y': '010011',
            'z': '110011',
            '0': '001011',
            '1': '101011',
            '2': '011011',
            '3': '111011',
            '4': '000111',
            '5': '100111',
            '6': '010111',
            '7': '110111',
            '8': '001111',
            '9': '101111',
            '.': '011111',
            '_': '111111',
        }
        var a = '';
        for (var i = name.length - 1; i >= 0; --i) {
            a += TABLE[name[i]];
        }
        return a;
    };
    const inst_unit = x => x(null);
    const elim_unit = (x => {
        var $1 = (() => c0 => {
            var self = x;
            switch ("unit") {
                case 'unit':
                    var $0 = c0;
                    return $0;
            };
        })();
        return $1;
    });
    const inst_bool = x => x(true)(false);
    const elim_bool = (x => {
        var $4 = (() => c0 => c1 => {
            var self = x;
            if (self) {
                var $2 = c0;
                return $2;
            } else {
                var $3 = c1;
                return $3;
            };
        })();
        return $4;
    });
    const inst_nat = x => x(0n)(x0 => 1n + x0);
    const elim_nat = (x => {
        var $8 = (() => c0 => c1 => {
            var self = x;
            if (self === 0n) {
                var $5 = c0;
                return $5;
            } else {
                var $6 = (self - 1n);
                var $7 = c1($6);
                return $7;
            };
        })();
        return $8;
    });
    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');
    const elim_bits = (x => {
        var $14 = (() => c0 => c1 => c2 => {
            var self = x;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'o':
                    var $9 = self.slice(0, -1);
                    var $10 = c1($9);
                    return $10;
                case 'i':
                    var $11 = self.slice(0, -1);
                    var $12 = c2($11);
                    return $12;
                case 'e':
                    var $13 = c0;
                    return $13;
            };
        })();
        return $14;
    });
    const inst_u16 = x => x(x0 => word_to_u16(x0));
    const elim_u16 = (x => {
        var $17 = (() => c0 => {
            var self = x;
            switch ('u16') {
                case 'u16':
                    var $15 = u16_to_word(self);
                    var $16 = c0($15);
                    return $16;
            };
        })();
        return $17;
    });
    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));
    const elim_string = (x => {
        var $22 = (() => c0 => c1 => {
            var self = x;
            if (self.length === 0) {
                var $18 = c0;
                return $18;
            } else {
                var $19 = self.charCodeAt(0);
                var $20 = self.slice(1);
                var $21 = c1($19)($20);
                return $21;
            };
        })();
        return $22;
    });
    var run = (p) => {
        if (typeof window === 'undefined') {
            var rl = eval("require('readline')").createInterface({
                input: process.stdin,
                output: process.stdout,
                terminal: false
            });
            var fs = eval("require('fs')");
            var pc = eval("process");
        } else {
            var rl = {
                question: (x, f) => f(''),
                close: () => {}
            };
            var fs = {
                readFileSync: () => ''
            };
            var pc = {
                exit: () => {},
                argv: []
            };
        };
        return run_io({
            rl,
            fs,
            pc
        }, p).then((x) => {
            rl.close();
            return x;
        }).catch((e) => {
            rl.close();
            throw e;
        });
    };
    var set_file = (lib, param) => {
        var path = '';
        for (var i = 0; i < param.length && param[i] !== '='; ++i) {
            path += param[i];
        };
        var data = param.slice(i + 1);
        lib.fs.mkdirSync(path.split('/').slice(0, -1).join('/'), {
            recursive: true
        });
        lib.fs.writeFileSync(path, data);
        return '';
    };
    var del_file = (lib, param) => {
        try {
            lib.fs.unlinkSync(param);
            return '';
        } catch (e) {
            if (e.message.indexOf('EPERM') !== -1) {
                lib.fs.rmdirSync(param);
                return '';
            } else {
                throw e;
            }
        }
    };
    var get_file = (lib, param) => {
        return lib.fs.readFileSync(param, 'utf8');
    }
    var get_dir = (lib, param) => {
        return lib.fs.readdirSync(param).join(';');
    };
    var get_file_mtime = (lib, param) => {
        return String(lib.fs.statSync(param).mtime.getTime());
    };
    var run_io = (lib, p) => {
        switch (p._) {
            case 'IO.end':
                return Promise.resolve(p.value);
            case 'IO.ask':
                return new Promise((res, err) => {
                    switch (p.query) {
                        case 'print':
                            console.log(p.param);
                            run_io(lib, p.then('')).then(res).catch(err);
                            break;
                        case 'put_string':
                            process.stdout.write(p.param);
                            run_io(lib, p.then('')).then(res).catch(err);
                            break;
                        case 'exit':
                            lib.pc.exit();
                            break;
                        case 'get_time':
                            run_io(lib, p.then(String(Date.now()))).then(res).catch(err);
                            break;
                        case 'get_line':
                            lib.rl.question(p.param, (line) => run_io(lib, p.then(line)).then(res).catch(err));
                            break;
                        case 'get_file':
                            try {
                                run_io(lib, p.then(get_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'set_file':
                            try {
                                run_io(lib, p.then(set_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'del_file':
                            try {
                                run_io(lib, p.then(del_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'get_dir':
                            try {
                                run_io(lib, p.then(get_dir(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'get_file_mtime':
                            try {
                                run_io(lib, p.then(get_file_mtime(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'get_args':
                            run_io(lib, p.then(lib.pc.argv[2] || '')).then(res).catch(err);
                            break;
                    }
                });
        }
    };

    function IO$(_A$1) {
        var $23 = null;
        return $23;
    };
    const IO = x0 => IO$(x0);

    function IO$ask$(_query$2, _param$3, _then$4) {
        var $24 = ({
            _: 'IO.ask',
            'query': _query$2,
            'param': _param$3,
            'then': _then$4
        });
        return $24;
    };
    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);

    function IO$bind$(_a$3, _f$4) {
        var self = _a$3;
        switch (self._) {
            case 'IO.end':
                var $26 = self.value;
                var $27 = _f$4($26);
                var $25 = $27;
                break;
            case 'IO.ask':
                var $28 = self.query;
                var $29 = self.param;
                var $30 = self.then;
                var $31 = IO$ask$($28, $29, (_x$8 => {
                    var $32 = IO$bind$($30(_x$8), _f$4);
                    return $32;
                }));
                var $25 = $31;
                break;
        };
        return $25;
    };
    const IO$bind = x0 => x1 => IO$bind$(x0, x1);

    function IO$end$(_value$2) {
        var $33 = ({
            _: 'IO.end',
            'value': _value$2
        });
        return $33;
    };
    const IO$end = x0 => IO$end$(x0);

    function IO$monad$(_new$2) {
        var $34 = _new$2(IO$bind)(IO$end);
        return $34;
    };
    const IO$monad = x0 => IO$monad$(x0);

    function Maybe$(_A$1) {
        var $35 = null;
        return $35;
    };
    const Maybe = x0 => Maybe$(x0);

    function BitsMap$(_A$1) {
        var $36 = null;
        return $36;
    };
    const BitsMap = x0 => BitsMap$(x0);
    const Maybe$none = ({
        _: 'Maybe.none'
    });

    function BitsMap$get$(_bits$2, _map$3) {
        var BitsMap$get$ = (_bits$2, _map$3) => ({
            ctr: 'TCO',
            arg: [_bits$2, _map$3]
        });
        var BitsMap$get = _bits$2 => _map$3 => BitsMap$get$(_bits$2, _map$3);
        var arg = [_bits$2, _map$3];
        while (true) {
            let [_bits$2, _map$3] = arg;
            var R = (() => {
                var self = _bits$2;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $37 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $39 = self.lft;
                                var $40 = BitsMap$get$($37, $39);
                                var $38 = $40;
                                break;
                            case 'BitsMap.new':
                                var $41 = Maybe$none;
                                var $38 = $41;
                                break;
                        };
                        return $38;
                    case 'i':
                        var $42 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $44 = self.rgt;
                                var $45 = BitsMap$get$($42, $44);
                                var $43 = $45;
                                break;
                            case 'BitsMap.new':
                                var $46 = Maybe$none;
                                var $43 = $46;
                                break;
                        };
                        return $43;
                    case 'e':
                        var self = _map$3;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $48 = self.val;
                                var $49 = $48;
                                var $47 = $49;
                                break;
                            case 'BitsMap.new':
                                var $50 = Maybe$none;
                                var $47 = $50;
                                break;
                        };
                        return $47;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const BitsMap$get = x0 => x1 => BitsMap$get$(x0, x1);
    const Bits$e = '';
    const Bool$false = false;
    const Bool$and = a0 => a1 => (a0 && a1);
    const Bool$true = true;

    function Cmp$as_lte$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
            case 'Cmp.eql':
                var $52 = Bool$true;
                var $51 = $52;
                break;
            case 'Cmp.gtn':
                var $53 = Bool$false;
                var $51 = $53;
                break;
        };
        return $51;
    };
    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);
    const Cmp$ltn = ({
        _: 'Cmp.ltn'
    });
    const Cmp$gtn = ({
        _: 'Cmp.gtn'
    });

    function Word$cmp$go$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $55 = self.pred;
                var $56 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $58 = self.pred;
                            var $59 = (_a$pred$10 => {
                                var $60 = Word$cmp$go$(_a$pred$10, $58, _c$4);
                                return $60;
                            });
                            var $57 = $59;
                            break;
                        case 'Word.i':
                            var $61 = self.pred;
                            var $62 = (_a$pred$10 => {
                                var $63 = Word$cmp$go$(_a$pred$10, $61, Cmp$ltn);
                                return $63;
                            });
                            var $57 = $62;
                            break;
                        case 'Word.e':
                            var $64 = (_a$pred$8 => {
                                var $65 = _c$4;
                                return $65;
                            });
                            var $57 = $64;
                            break;
                    };
                    var $57 = $57($55);
                    return $57;
                });
                var $54 = $56;
                break;
            case 'Word.i':
                var $66 = self.pred;
                var $67 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $69 = self.pred;
                            var $70 = (_a$pred$10 => {
                                var $71 = Word$cmp$go$(_a$pred$10, $69, Cmp$gtn);
                                return $71;
                            });
                            var $68 = $70;
                            break;
                        case 'Word.i':
                            var $72 = self.pred;
                            var $73 = (_a$pred$10 => {
                                var $74 = Word$cmp$go$(_a$pred$10, $72, _c$4);
                                return $74;
                            });
                            var $68 = $73;
                            break;
                        case 'Word.e':
                            var $75 = (_a$pred$8 => {
                                var $76 = _c$4;
                                return $76;
                            });
                            var $68 = $75;
                            break;
                    };
                    var $68 = $68($66);
                    return $68;
                });
                var $54 = $67;
                break;
            case 'Word.e':
                var $77 = (_b$5 => {
                    var $78 = _c$4;
                    return $78;
                });
                var $54 = $77;
                break;
        };
        var $54 = $54(_b$3);
        return $54;
    };
    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);
    const Cmp$eql = ({
        _: 'Cmp.eql'
    });

    function Word$cmp$(_a$2, _b$3) {
        var $79 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);
        return $79;
    };
    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);

    function Word$lte$(_a$2, _b$3) {
        var $80 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));
        return $80;
    };
    const Word$lte = x0 => x1 => Word$lte$(x0, x1);

    function Nat$succ$(_pred$1) {
        var $81 = 1n + _pred$1;
        return $81;
    };
    const Nat$succ = x0 => Nat$succ$(x0);
    const Nat$zero = 0n;
    const U16$lte = a0 => a1 => (a0 <= a1);

    function U16$btw$(_a$1, _b$2, _c$3) {
        var $82 = ((_a$1 <= _b$2) && (_b$2 <= _c$3));
        return $82;
    };
    const U16$btw = x0 => x1 => x2 => U16$btw$(x0, x1, x2);

    function U16$new$(_value$1) {
        var $83 = word_to_u16(_value$1);
        return $83;
    };
    const U16$new = x0 => U16$new$(x0);
    const Word$e = ({
        _: 'Word.e'
    });

    function Word$(_size$1) {
        var $84 = null;
        return $84;
    };
    const Word = x0 => Word$(x0);

    function Word$i$(_pred$2) {
        var $85 = ({
            _: 'Word.i',
            'pred': _pred$2
        });
        return $85;
    };
    const Word$i = x0 => Word$i$(x0);

    function Word$o$(_pred$2) {
        var $86 = ({
            _: 'Word.o',
            'pred': _pred$2
        });
        return $86;
    };
    const Word$o = x0 => Word$o$(x0);

    function Word$subber$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $88 = self.pred;
                var $89 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $91 = self.pred;
                            var $92 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $94 = Word$i$(Word$subber$(_a$pred$10, $91, Bool$true));
                                    var $93 = $94;
                                } else {
                                    var $95 = Word$o$(Word$subber$(_a$pred$10, $91, Bool$false));
                                    var $93 = $95;
                                };
                                return $93;
                            });
                            var $90 = $92;
                            break;
                        case 'Word.i':
                            var $96 = self.pred;
                            var $97 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $99 = Word$o$(Word$subber$(_a$pred$10, $96, Bool$true));
                                    var $98 = $99;
                                } else {
                                    var $100 = Word$i$(Word$subber$(_a$pred$10, $96, Bool$true));
                                    var $98 = $100;
                                };
                                return $98;
                            });
                            var $90 = $97;
                            break;
                        case 'Word.e':
                            var $101 = (_a$pred$8 => {
                                var $102 = Word$e;
                                return $102;
                            });
                            var $90 = $101;
                            break;
                    };
                    var $90 = $90($88);
                    return $90;
                });
                var $87 = $89;
                break;
            case 'Word.i':
                var $103 = self.pred;
                var $104 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $106 = self.pred;
                            var $107 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $109 = Word$o$(Word$subber$(_a$pred$10, $106, Bool$false));
                                    var $108 = $109;
                                } else {
                                    var $110 = Word$i$(Word$subber$(_a$pred$10, $106, Bool$false));
                                    var $108 = $110;
                                };
                                return $108;
                            });
                            var $105 = $107;
                            break;
                        case 'Word.i':
                            var $111 = self.pred;
                            var $112 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $114 = Word$i$(Word$subber$(_a$pred$10, $111, Bool$true));
                                    var $113 = $114;
                                } else {
                                    var $115 = Word$o$(Word$subber$(_a$pred$10, $111, Bool$false));
                                    var $113 = $115;
                                };
                                return $113;
                            });
                            var $105 = $112;
                            break;
                        case 'Word.e':
                            var $116 = (_a$pred$8 => {
                                var $117 = Word$e;
                                return $117;
                            });
                            var $105 = $116;
                            break;
                    };
                    var $105 = $105($103);
                    return $105;
                });
                var $87 = $104;
                break;
            case 'Word.e':
                var $118 = (_b$5 => {
                    var $119 = Word$e;
                    return $119;
                });
                var $87 = $118;
                break;
        };
        var $87 = $87(_b$3);
        return $87;
    };
    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);

    function Word$sub$(_a$2, _b$3) {
        var $120 = Word$subber$(_a$2, _b$3, Bool$false);
        return $120;
    };
    const Word$sub = x0 => x1 => Word$sub$(x0, x1);
    const U16$sub = a0 => a1 => ((a0 - a1) & 0xFFFF);

    function Nat$apply$(_n$2, _f$3, _x$4) {
        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({
            ctr: 'TCO',
            arg: [_n$2, _f$3, _x$4]
        });
        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);
        var arg = [_n$2, _f$3, _x$4];
        while (true) {
            let [_n$2, _f$3, _x$4] = arg;
            var R = (() => {
                var self = _n$2;
                if (self === 0n) {
                    var $121 = _x$4;
                    return $121;
                } else {
                    var $122 = (self - 1n);
                    var $123 = Nat$apply$($122, _f$3, _f$3(_x$4));
                    return $123;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);

    function Word$inc$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $125 = self.pred;
                var $126 = Word$i$($125);
                var $124 = $126;
                break;
            case 'Word.i':
                var $127 = self.pred;
                var $128 = Word$o$(Word$inc$($127));
                var $124 = $128;
                break;
            case 'Word.e':
                var $129 = Word$e;
                var $124 = $129;
                break;
        };
        return $124;
    };
    const Word$inc = x0 => Word$inc$(x0);

    function Word$zero$(_size$1) {
        var self = _size$1;
        if (self === 0n) {
            var $131 = Word$e;
            var $130 = $131;
        } else {
            var $132 = (self - 1n);
            var $133 = Word$o$(Word$zero$($132));
            var $130 = $133;
        };
        return $130;
    };
    const Word$zero = x0 => Word$zero$(x0);

    function Nat$to_word$(_size$1, _n$2) {
        var $134 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));
        return $134;
    };
    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);
    const Nat$to_u16 = a0 => (Number(a0) & 0xFFFF);

    function Word$adder$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $136 = self.pred;
                var $137 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $139 = self.pred;
                            var $140 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $142 = Word$i$(Word$adder$(_a$pred$10, $139, Bool$false));
                                    var $141 = $142;
                                } else {
                                    var $143 = Word$o$(Word$adder$(_a$pred$10, $139, Bool$false));
                                    var $141 = $143;
                                };
                                return $141;
                            });
                            var $138 = $140;
                            break;
                        case 'Word.i':
                            var $144 = self.pred;
                            var $145 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $147 = Word$o$(Word$adder$(_a$pred$10, $144, Bool$true));
                                    var $146 = $147;
                                } else {
                                    var $148 = Word$i$(Word$adder$(_a$pred$10, $144, Bool$false));
                                    var $146 = $148;
                                };
                                return $146;
                            });
                            var $138 = $145;
                            break;
                        case 'Word.e':
                            var $149 = (_a$pred$8 => {
                                var $150 = Word$e;
                                return $150;
                            });
                            var $138 = $149;
                            break;
                    };
                    var $138 = $138($136);
                    return $138;
                });
                var $135 = $137;
                break;
            case 'Word.i':
                var $151 = self.pred;
                var $152 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $154 = self.pred;
                            var $155 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $157 = Word$o$(Word$adder$(_a$pred$10, $154, Bool$true));
                                    var $156 = $157;
                                } else {
                                    var $158 = Word$i$(Word$adder$(_a$pred$10, $154, Bool$false));
                                    var $156 = $158;
                                };
                                return $156;
                            });
                            var $153 = $155;
                            break;
                        case 'Word.i':
                            var $159 = self.pred;
                            var $160 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $162 = Word$i$(Word$adder$(_a$pred$10, $159, Bool$true));
                                    var $161 = $162;
                                } else {
                                    var $163 = Word$o$(Word$adder$(_a$pred$10, $159, Bool$true));
                                    var $161 = $163;
                                };
                                return $161;
                            });
                            var $153 = $160;
                            break;
                        case 'Word.e':
                            var $164 = (_a$pred$8 => {
                                var $165 = Word$e;
                                return $165;
                            });
                            var $153 = $164;
                            break;
                    };
                    var $153 = $153($151);
                    return $153;
                });
                var $135 = $152;
                break;
            case 'Word.e':
                var $166 = (_b$5 => {
                    var $167 = Word$e;
                    return $167;
                });
                var $135 = $166;
                break;
        };
        var $135 = $135(_b$3);
        return $135;
    };
    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);

    function Word$add$(_a$2, _b$3) {
        var $168 = Word$adder$(_a$2, _b$3, Bool$false);
        return $168;
    };
    const Word$add = x0 => x1 => Word$add$(x0, x1);
    const U16$add = a0 => a1 => ((a0 + a1) & 0xFFFF);

    function Cmp$as_eql$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
            case 'Cmp.gtn':
                var $170 = Bool$false;
                var $169 = $170;
                break;
            case 'Cmp.eql':
                var $171 = Bool$true;
                var $169 = $171;
                break;
        };
        return $169;
    };
    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);

    function Word$eql$(_a$2, _b$3) {
        var $172 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));
        return $172;
    };
    const Word$eql = x0 => x1 => Word$eql$(x0, x1);
    const U16$eql = a0 => a1 => (a0 === a1);
    const Bits$o = a0 => (a0 + '0');
    const Bits$i = a0 => (a0 + '1');

    function Word$to_bits$(_a$2) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $174 = self.pred;
                var $175 = (Word$to_bits$($174) + '0');
                var $173 = $175;
                break;
            case 'Word.i':
                var $176 = self.pred;
                var $177 = (Word$to_bits$($176) + '1');
                var $173 = $177;
                break;
            case 'Word.e':
                var $178 = Bits$e;
                var $173 = $178;
                break;
        };
        return $173;
    };
    const Word$to_bits = x0 => Word$to_bits$(x0);

    function Word$trim$(_new_size$2, _word$3) {
        var self = _new_size$2;
        if (self === 0n) {
            var $180 = Word$e;
            var $179 = $180;
        } else {
            var $181 = (self - 1n);
            var self = _word$3;
            switch (self._) {
                case 'Word.o':
                    var $183 = self.pred;
                    var $184 = Word$o$(Word$trim$($181, $183));
                    var $182 = $184;
                    break;
                case 'Word.i':
                    var $185 = self.pred;
                    var $186 = Word$i$(Word$trim$($181, $185));
                    var $182 = $186;
                    break;
                case 'Word.e':
                    var $187 = Word$o$(Word$trim$($181, Word$e));
                    var $182 = $187;
                    break;
            };
            var $179 = $182;
        };
        return $179;
    };
    const Word$trim = x0 => x1 => Word$trim$(x0, x1);
    const Bits$concat = a0 => a1 => (a1 + a0);

    function Bits$reverse$tco$(_a$1, _r$2) {
        var Bits$reverse$tco$ = (_a$1, _r$2) => ({
            ctr: 'TCO',
            arg: [_a$1, _r$2]
        });
        var Bits$reverse$tco = _a$1 => _r$2 => Bits$reverse$tco$(_a$1, _r$2);
        var arg = [_a$1, _r$2];
        while (true) {
            let [_a$1, _r$2] = arg;
            var R = (() => {
                var self = _a$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $188 = self.slice(0, -1);
                        var $189 = Bits$reverse$tco$($188, (_r$2 + '0'));
                        return $189;
                    case 'i':
                        var $190 = self.slice(0, -1);
                        var $191 = Bits$reverse$tco$($190, (_r$2 + '1'));
                        return $191;
                    case 'e':
                        var $192 = _r$2;
                        return $192;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Bits$reverse$tco = x0 => x1 => Bits$reverse$tco$(x0, x1);

    function Bits$reverse$(_a$1) {
        var $193 = Bits$reverse$tco$(_a$1, Bits$e);
        return $193;
    };
    const Bits$reverse = x0 => Bits$reverse$(x0);
    const Kind$Name$to_bits = a0 => (kind_name_to_bits(a0));

    function Kind$Map$get$(_name$2, _map$3) {
        var $194 = BitsMap$get$((kind_name_to_bits(_name$2)), _map$3);
        return $194;
    };
    const Kind$Map$get = x0 => x1 => Kind$Map$get$(x0, x1);

    function Parser$Reply$(_V$1) {
        var $195 = null;
        return $195;
    };
    const Parser$Reply = x0 => Parser$Reply$(x0);

    function List$(_A$1) {
        var $196 = null;
        return $196;
    };
    const List = x0 => List$(x0);

    function Parser$Reply$error$(_idx$2, _code$3, _err$4) {
        var $197 = ({
            _: 'Parser.Reply.error',
            'idx': _idx$2,
            'code': _code$3,
            'err': _err$4
        });
        return $197;
    };
    const Parser$Reply$error = x0 => x1 => x2 => Parser$Reply$error$(x0, x1, x2);

    function Parser$Reply$value$(_idx$2, _code$3, _val$4) {
        var $198 = ({
            _: 'Parser.Reply.value',
            'idx': _idx$2,
            'code': _code$3,
            'val': _val$4
        });
        return $198;
    };
    const Parser$Reply$value = x0 => x1 => x2 => Parser$Reply$value$(x0, x1, x2);
    const List$nil = ({
        _: 'List.nil'
    });

    function List$cons$(_head$2, _tail$3) {
        var $199 = ({
            _: 'List.cons',
            'head': _head$2,
            'tail': _tail$3
        });
        return $199;
    };
    const List$cons = x0 => x1 => List$cons$(x0, x1);

    function Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5) {
        var Parser$many$go$ = (_parse$2, _values$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_parse$2, _values$3, _idx$4, _code$5]
        });
        var Parser$many$go = _parse$2 => _values$3 => _idx$4 => _code$5 => Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5);
        var arg = [_parse$2, _values$3, _idx$4, _code$5];
        while (true) {
            let [_parse$2, _values$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _parse$2(_idx$4)(_code$5);
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $200 = self.idx;
                        var $201 = self.code;
                        var $202 = self.val;
                        var $203 = Parser$many$go$(_parse$2, (_xs$9 => {
                            var $204 = _values$3(List$cons$($202, _xs$9));
                            return $204;
                        }), $200, $201);
                        return $203;
                    case 'Parser.Reply.error':
                        var $205 = Parser$Reply$value$(_idx$4, _code$5, _values$3(List$nil));
                        return $205;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$many$go = x0 => x1 => x2 => x3 => Parser$many$go$(x0, x1, x2, x3);

    function Parser$many$(_parser$2) {
        var $206 = Parser$many$go(_parser$2)((_x$3 => {
            var $207 = _x$3;
            return $207;
        }));
        return $206;
    };
    const Parser$many = x0 => Parser$many$(x0);

    function Parser$many1$(_parser$2, _idx$3, _code$4) {
        var self = _parser$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $209 = self.idx;
                var $210 = self.code;
                var $211 = self.err;
                var $212 = Parser$Reply$error$($209, $210, $211);
                var $208 = $212;
                break;
            case 'Parser.Reply.value':
                var $213 = self.idx;
                var $214 = self.code;
                var $215 = self.val;
                var self = Parser$many$(_parser$2)($213)($214);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $217 = self.idx;
                        var $218 = self.code;
                        var $219 = self.err;
                        var $220 = Parser$Reply$error$($217, $218, $219);
                        var $216 = $220;
                        break;
                    case 'Parser.Reply.value':
                        var $221 = self.idx;
                        var $222 = self.code;
                        var $223 = self.val;
                        var $224 = Parser$Reply$value$($221, $222, List$cons$($215, $223));
                        var $216 = $224;
                        break;
                };
                var $208 = $216;
                break;
        };
        return $208;
    };
    const Parser$many1 = x0 => x1 => x2 => Parser$many1$(x0, x1, x2);

    function Parser$digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $226 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $225 = $226;
        } else {
            var $227 = self.charCodeAt(0);
            var $228 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($227 === 48);
            if (self) {
                var $230 = Parser$Reply$value$(_sidx$5, $228, 0n);
                var $229 = $230;
            } else {
                var self = ($227 === 49);
                if (self) {
                    var $232 = Parser$Reply$value$(_sidx$5, $228, 1n);
                    var $231 = $232;
                } else {
                    var self = ($227 === 50);
                    if (self) {
                        var $234 = Parser$Reply$value$(_sidx$5, $228, 2n);
                        var $233 = $234;
                    } else {
                        var self = ($227 === 51);
                        if (self) {
                            var $236 = Parser$Reply$value$(_sidx$5, $228, 3n);
                            var $235 = $236;
                        } else {
                            var self = ($227 === 52);
                            if (self) {
                                var $238 = Parser$Reply$value$(_sidx$5, $228, 4n);
                                var $237 = $238;
                            } else {
                                var self = ($227 === 53);
                                if (self) {
                                    var $240 = Parser$Reply$value$(_sidx$5, $228, 5n);
                                    var $239 = $240;
                                } else {
                                    var self = ($227 === 54);
                                    if (self) {
                                        var $242 = Parser$Reply$value$(_sidx$5, $228, 6n);
                                        var $241 = $242;
                                    } else {
                                        var self = ($227 === 55);
                                        if (self) {
                                            var $244 = Parser$Reply$value$(_sidx$5, $228, 7n);
                                            var $243 = $244;
                                        } else {
                                            var self = ($227 === 56);
                                            if (self) {
                                                var $246 = Parser$Reply$value$(_sidx$5, $228, 8n);
                                                var $245 = $246;
                                            } else {
                                                var self = ($227 === 57);
                                                if (self) {
                                                    var $248 = Parser$Reply$value$(_sidx$5, $228, 9n);
                                                    var $247 = $248;
                                                } else {
                                                    var $249 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                    var $247 = $249;
                                                };
                                                var $245 = $247;
                                            };
                                            var $243 = $245;
                                        };
                                        var $241 = $243;
                                    };
                                    var $239 = $241;
                                };
                                var $237 = $239;
                            };
                            var $235 = $237;
                        };
                        var $233 = $235;
                    };
                    var $231 = $233;
                };
                var $229 = $231;
            };
            var $225 = $229;
        };
        return $225;
    };
    const Parser$digit = x0 => x1 => Parser$digit$(x0, x1);
    const Nat$add = a0 => a1 => (a0 + a1);
    const Nat$mul = a0 => a1 => (a0 * a1);

    function Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4) {
        var Nat$from_base$go$ = (_b$1, _ds$2, _p$3, _res$4) => ({
            ctr: 'TCO',
            arg: [_b$1, _ds$2, _p$3, _res$4]
        });
        var Nat$from_base$go = _b$1 => _ds$2 => _p$3 => _res$4 => Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4);
        var arg = [_b$1, _ds$2, _p$3, _res$4];
        while (true) {
            let [_b$1, _ds$2, _p$3, _res$4] = arg;
            var R = (() => {
                var self = _ds$2;
                switch (self._) {
                    case 'List.cons':
                        var $250 = self.head;
                        var $251 = self.tail;
                        var $252 = Nat$from_base$go$(_b$1, $251, (_b$1 * _p$3), (($250 * _p$3) + _res$4));
                        return $252;
                    case 'List.nil':
                        var $253 = _res$4;
                        return $253;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$from_base$go = x0 => x1 => x2 => x3 => Nat$from_base$go$(x0, x1, x2, x3);

    function List$reverse$go$(_xs$2, _res$3) {
        var List$reverse$go$ = (_xs$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_xs$2, _res$3]
        });
        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);
        var arg = [_xs$2, _res$3];
        while (true) {
            let [_xs$2, _res$3] = arg;
            var R = (() => {
                var self = _xs$2;
                switch (self._) {
                    case 'List.cons':
                        var $254 = self.head;
                        var $255 = self.tail;
                        var $256 = List$reverse$go$($255, List$cons$($254, _res$3));
                        return $256;
                    case 'List.nil':
                        var $257 = _res$3;
                        return $257;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);

    function List$reverse$(_xs$2) {
        var $258 = List$reverse$go$(_xs$2, List$nil);
        return $258;
    };
    const List$reverse = x0 => List$reverse$(x0);

    function Nat$from_base$(_base$1, _ds$2) {
        var $259 = Nat$from_base$go$(_base$1, List$reverse$(_ds$2), 1n, 0n);
        return $259;
    };
    const Nat$from_base = x0 => x1 => Nat$from_base$(x0, x1);

    function Parser$nat$(_idx$1, _code$2) {
        var self = Parser$many1$(Parser$digit, _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $261 = self.idx;
                var $262 = self.code;
                var $263 = self.err;
                var $264 = Parser$Reply$error$($261, $262, $263);
                var $260 = $264;
                break;
            case 'Parser.Reply.value':
                var $265 = self.idx;
                var $266 = self.code;
                var $267 = self.val;
                var $268 = Parser$Reply$value$($265, $266, Nat$from_base$(10n, $267));
                var $260 = $268;
                break;
        };
        return $260;
    };
    const Parser$nat = x0 => x1 => Parser$nat$(x0, x1);

    function Nat$read$(_str$1) {
        var _p$2 = Parser$nat$(0n, _str$1);
        var self = _p$2;
        switch (self._) {
            case 'Parser.Reply.value':
                var $270 = self.val;
                var $271 = $270;
                var $269 = $271;
                break;
            case 'Parser.Reply.error':
                var $272 = 0n;
                var $269 = $272;
                break;
        };
        return $269;
    };
    const Nat$read = x0 => Nat$read$(x0);
    const IO$get_time = IO$ask$("get_time", "", (_time$1 => {
        var $273 = IO$end$(Nat$read$(_time$1));
        return $273;
    }));

    function Maybe$some$(_value$2) {
        var $274 = ({
            _: 'Maybe.some',
            'value': _value$2
        });
        return $274;
    };
    const Maybe$some = x0 => Maybe$some$(x0);

    function IO$get_file$(_name$1) {
        var $275 = IO$ask$("get_file", _name$1, (_file$2 => {
            var $276 = IO$end$(_file$2);
            return $276;
        }));
        return $275;
    };
    const IO$get_file = x0 => IO$get_file$(x0);

    function String$cons$(_head$1, _tail$2) {
        var $277 = (String.fromCharCode(_head$1) + _tail$2);
        return $277;
    };
    const String$cons = x0 => x1 => String$cons$(x0, x1);
    const String$concat = a0 => a1 => (a0 + a1);
    const Bool$not = a0 => (!a0);

    function String$is_empty$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $279 = Bool$true;
            var $278 = $279;
        } else {
            var $280 = self.charCodeAt(0);
            var $281 = self.slice(1);
            var $282 = Bool$false;
            var $278 = $282;
        };
        return $278;
    };
    const String$is_empty = x0 => String$is_empty$(x0);

    function IO$get_file_mtime$(_name$1) {
        var $283 = IO$ask$("get_file_mtime", _name$1, (_file$2 => {
            var $284 = IO$end$(_file$2);
            return $284;
        }));
        return $283;
    };
    const IO$get_file_mtime = x0 => IO$get_file_mtime$(x0);
    const String$eql = a0 => a1 => (a0 === a1);

    function Pair$new$(_fst$3, _snd$4) {
        var $285 = ({
            _: 'Pair.new',
            'fst': _fst$3,
            'snd': _snd$4
        });
        return $285;
    };
    const Pair$new = x0 => x1 => Pair$new$(x0, x1);

    function Maybe$bind$(_m$3, _f$4) {
        var self = _m$3;
        switch (self._) {
            case 'Maybe.some':
                var $287 = self.value;
                var $288 = _f$4($287);
                var $286 = $288;
                break;
            case 'Maybe.none':
                var $289 = Maybe$none;
                var $286 = $289;
                break;
        };
        return $286;
    };
    const Maybe$bind = x0 => x1 => Maybe$bind$(x0, x1);

    function Maybe$monad$(_new$2) {
        var $290 = _new$2(Maybe$bind)(Maybe$some);
        return $290;
    };
    const Maybe$monad = x0 => Maybe$monad$(x0);

    function Pair$(_A$1, _B$2) {
        var $291 = null;
        return $291;
    };
    const Pair = x0 => x1 => Pair$(x0, x1);
    const Unit$new = null;
    const Bool$or = a0 => a1 => (a0 || a1);

    function Kind$Core$read$spaces$(_code$1) {
        var Kind$Core$read$spaces$ = (_code$1) => ({
            ctr: 'TCO',
            arg: [_code$1]
        });
        var Kind$Core$read$spaces = _code$1 => Kind$Core$read$spaces$(_code$1);
        var arg = [_code$1];
        while (true) {
            let [_code$1] = arg;
            var R = (() => {
                var self = _code$1;
                if (self.length === 0) {
                    var $292 = Pair$new$(_code$1, Unit$new);
                    return $292;
                } else {
                    var $293 = self.charCodeAt(0);
                    var $294 = self.slice(1);
                    var _is_space$4 = (($293 === 32) || (($293 === 10) || (($293 === 13) || (($293 === 9) || (($293 === 11) || (($293 === 12) || Bool$false))))));
                    var self = _is_space$4;
                    if (self) {
                        var $296 = Kind$Core$read$spaces$($294);
                        var $295 = $296;
                    } else {
                        var $297 = Pair$new$(_code$1, Unit$new);
                        var $295 = $297;
                    };
                    return $295;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$spaces = x0 => Kind$Core$read$spaces$(x0);

    function Kind$Term$ref$(_name$1) {
        var $298 = ({
            _: 'Kind.Term.ref',
            'name': _name$1
        });
        return $298;
    };
    const Kind$Term$ref = x0 => Kind$Term$ref$(x0);

    function Char$eql$(_a$1, _b$2) {
        var $299 = (_a$1 === _b$2);
        return $299;
    };
    const Char$eql = x0 => x1 => Char$eql$(x0, x1);
    const Kind$Term$typ = ({
        _: 'Kind.Term.typ'
    });

    function Cmp$as_gte$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $301 = Bool$false;
                var $300 = $301;
                break;
            case 'Cmp.eql':
            case 'Cmp.gtn':
                var $302 = Bool$true;
                var $300 = $302;
                break;
        };
        return $300;
    };
    const Cmp$as_gte = x0 => Cmp$as_gte$(x0);

    function Word$gte$(_a$2, _b$3) {
        var $303 = Cmp$as_gte$(Word$cmp$(_a$2, _b$3));
        return $303;
    };
    const Word$gte = x0 => x1 => Word$gte$(x0, x1);
    const U16$gte = a0 => a1 => (a0 >= a1);

    function Cmp$as_ltn$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $305 = Bool$true;
                var $304 = $305;
                break;
            case 'Cmp.eql':
            case 'Cmp.gtn':
                var $306 = Bool$false;
                var $304 = $306;
                break;
        };
        return $304;
    };
    const Cmp$as_ltn = x0 => Cmp$as_ltn$(x0);

    function Word$ltn$(_a$2, _b$3) {
        var $307 = Cmp$as_ltn$(Word$cmp$(_a$2, _b$3));
        return $307;
    };
    const Word$ltn = x0 => x1 => Word$ltn$(x0, x1);
    const U16$ltn = a0 => a1 => (a0 < a1);

    function Kind$Core$read$is_name$(_chr$1) {
        var $308 = (((_chr$1 >= 46) && (_chr$1 <= 47)) || (((_chr$1 >= 48) && (_chr$1 < 58)) || (((_chr$1 >= 65) && (_chr$1 < 91)) || (((_chr$1 >= 95) && (_chr$1 < 96)) || (((_chr$1 >= 97) && (_chr$1 < 123)) || Bool$false)))));
        return $308;
    };
    const Kind$Core$read$is_name = x0 => Kind$Core$read$is_name$(x0);

    function Kind$Core$read$name$(_code$1) {
        var self = _code$1;
        if (self.length === 0) {
            var $310 = Pair$new$(_code$1, "");
            var $309 = $310;
        } else {
            var $311 = self.charCodeAt(0);
            var $312 = self.slice(1);
            var self = Kind$Core$read$is_name$($311);
            if (self) {
                var self = Kind$Core$read$name$($312);
                switch (self._) {
                    case 'Pair.new':
                        var $315 = self.fst;
                        var $316 = self.snd;
                        var $317 = Pair$new$($315, String$cons$($311, $316));
                        var $314 = $317;
                        break;
                };
                var $313 = $314;
            } else {
                var $318 = Pair$new$(_code$1, "");
                var $313 = $318;
            };
            var $309 = $313;
        };
        return $309;
    };
    const Kind$Core$read$name = x0 => Kind$Core$read$name$(x0);

    function Kind$Core$read$char$(_code$1, _chr$2) {
        var self = Kind$Core$read$spaces$(_code$1);
        switch (self._) {
            case 'Pair.new':
                var $320 = self.fst;
                var self = $320;
                if (self.length === 0) {
                    var $322 = Pair$new$("", Unit$new);
                    var $321 = $322;
                } else {
                    var $323 = self.charCodeAt(0);
                    var $324 = self.slice(1);
                    var self = ($323 === _chr$2);
                    if (self) {
                        var $326 = Pair$new$($324, Unit$new);
                        var $325 = $326;
                    } else {
                        var $327 = Pair$new$("", Unit$new);
                        var $325 = $327;
                    };
                    var $321 = $325;
                };
                var $319 = $321;
                break;
        };
        return $319;
    };
    const Kind$Core$read$char = x0 => x1 => Kind$Core$read$char$(x0, x1);

    function Kind$Term$all$(_eras$1, _self$2, _name$3, _xtyp$4, _body$5) {
        var $328 = ({
            _: 'Kind.Term.all',
            'eras': _eras$1,
            'self': _self$2,
            'name': _name$3,
            'xtyp': _xtyp$4,
            'body': _body$5
        });
        return $328;
    };
    const Kind$Term$all = x0 => x1 => x2 => x3 => x4 => Kind$Term$all$(x0, x1, x2, x3, x4);

    function Kind$Term$lam$(_name$1, _body$2) {
        var $329 = ({
            _: 'Kind.Term.lam',
            'name': _name$1,
            'body': _body$2
        });
        return $329;
    };
    const Kind$Term$lam = x0 => x1 => Kind$Term$lam$(x0, x1);

    function Kind$Term$app$(_func$1, _argm$2) {
        var $330 = ({
            _: 'Kind.Term.app',
            'func': _func$1,
            'argm': _argm$2
        });
        return $330;
    };
    const Kind$Term$app = x0 => x1 => Kind$Term$app$(x0, x1);

    function Kind$Term$let$(_name$1, _expr$2, _body$3) {
        var $331 = ({
            _: 'Kind.Term.let',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $331;
    };
    const Kind$Term$let = x0 => x1 => x2 => Kind$Term$let$(x0, x1, x2);

    function Kind$Term$def$(_name$1, _expr$2, _body$3) {
        var $332 = ({
            _: 'Kind.Term.def',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $332;
    };
    const Kind$Term$def = x0 => x1 => x2 => Kind$Term$def$(x0, x1, x2);

    function Kind$Term$ann$(_done$1, _term$2, _type$3) {
        var $333 = ({
            _: 'Kind.Term.ann',
            'done': _done$1,
            'term': _term$2,
            'type': _type$3
        });
        return $333;
    };
    const Kind$Term$ann = x0 => x1 => x2 => Kind$Term$ann$(x0, x1, x2);

    function String$starts_with$(_xs$1, _match$2) {
        var String$starts_with$ = (_xs$1, _match$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _match$2]
        });
        var String$starts_with = _xs$1 => _match$2 => String$starts_with$(_xs$1, _match$2);
        var arg = [_xs$1, _match$2];
        while (true) {
            let [_xs$1, _match$2] = arg;
            var R = (() => {
                var self = _match$2;
                if (self.length === 0) {
                    var $334 = Bool$true;
                    return $334;
                } else {
                    var $335 = self.charCodeAt(0);
                    var $336 = self.slice(1);
                    var self = _xs$1;
                    if (self.length === 0) {
                        var $338 = Bool$false;
                        var $337 = $338;
                    } else {
                        var $339 = self.charCodeAt(0);
                        var $340 = self.slice(1);
                        var self = Char$eql$($335, $339);
                        if (self) {
                            var $342 = String$starts_with$($340, $336);
                            var $341 = $342;
                        } else {
                            var $343 = Bool$false;
                            var $341 = $343;
                        };
                        var $337 = $341;
                    };
                    return $337;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$starts_with = x0 => x1 => String$starts_with$(x0, x1);
    const String$nil = '';

    function String$drop$(_n$1, _xs$2) {
        var String$drop$ = (_n$1, _xs$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _xs$2]
        });
        var String$drop = _n$1 => _xs$2 => String$drop$(_n$1, _xs$2);
        var arg = [_n$1, _xs$2];
        while (true) {
            let [_n$1, _xs$2] = arg;
            var R = (() => {
                var self = _n$1;
                if (self === 0n) {
                    var $344 = _xs$2;
                    return $344;
                } else {
                    var $345 = (self - 1n);
                    var self = _xs$2;
                    if (self.length === 0) {
                        var $347 = String$nil;
                        var $346 = $347;
                    } else {
                        var $348 = self.charCodeAt(0);
                        var $349 = self.slice(1);
                        var $350 = String$drop$($345, $349);
                        var $346 = $350;
                    };
                    return $346;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$drop = x0 => x1 => String$drop$(x0, x1);

    function Char$is_hex$(_chr$1) {
        var $351 = (((_chr$1 >= 48) && (_chr$1 <= 57)) || (((_chr$1 >= 97) && (_chr$1 <= 102)) || (((_chr$1 >= 65) && (_chr$1 <= 70)) || Bool$false)));
        return $351;
    };
    const Char$is_hex = x0 => Char$is_hex$(x0);

    function Word$shift_left1$aux$(_word$2, _prev$3) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $353 = self.pred;
                var self = _prev$3;
                if (self) {
                    var $355 = Word$i$(Word$shift_left1$aux$($353, Bool$false));
                    var $354 = $355;
                } else {
                    var $356 = Word$o$(Word$shift_left1$aux$($353, Bool$false));
                    var $354 = $356;
                };
                var $352 = $354;
                break;
            case 'Word.i':
                var $357 = self.pred;
                var self = _prev$3;
                if (self) {
                    var $359 = Word$i$(Word$shift_left1$aux$($357, Bool$true));
                    var $358 = $359;
                } else {
                    var $360 = Word$o$(Word$shift_left1$aux$($357, Bool$true));
                    var $358 = $360;
                };
                var $352 = $358;
                break;
            case 'Word.e':
                var $361 = Word$e;
                var $352 = $361;
                break;
        };
        return $352;
    };
    const Word$shift_left1$aux = x0 => x1 => Word$shift_left1$aux$(x0, x1);

    function Word$shift_left1$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $363 = self.pred;
                var $364 = Word$o$(Word$shift_left1$aux$($363, Bool$false));
                var $362 = $364;
                break;
            case 'Word.i':
                var $365 = self.pred;
                var $366 = Word$o$(Word$shift_left1$aux$($365, Bool$true));
                var $362 = $366;
                break;
            case 'Word.e':
                var $367 = Word$e;
                var $362 = $367;
                break;
        };
        return $362;
    };
    const Word$shift_left1 = x0 => Word$shift_left1$(x0);

    function Word$mul$go$(_a$3, _b$4, _acc$5) {
        var Word$mul$go$ = (_a$3, _b$4, _acc$5) => ({
            ctr: 'TCO',
            arg: [_a$3, _b$4, _acc$5]
        });
        var Word$mul$go = _a$3 => _b$4 => _acc$5 => Word$mul$go$(_a$3, _b$4, _acc$5);
        var arg = [_a$3, _b$4, _acc$5];
        while (true) {
            let [_a$3, _b$4, _acc$5] = arg;
            var R = (() => {
                var self = _a$3;
                switch (self._) {
                    case 'Word.o':
                        var $368 = self.pred;
                        var $369 = Word$mul$go$($368, Word$shift_left1$(_b$4), _acc$5);
                        return $369;
                    case 'Word.i':
                        var $370 = self.pred;
                        var $371 = Word$mul$go$($370, Word$shift_left1$(_b$4), Word$add$(_b$4, _acc$5));
                        return $371;
                    case 'Word.e':
                        var $372 = _acc$5;
                        return $372;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Word$mul$go = x0 => x1 => x2 => Word$mul$go$(x0, x1, x2);

    function Word$to_zero$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $374 = self.pred;
                var $375 = Word$o$(Word$to_zero$($374));
                var $373 = $375;
                break;
            case 'Word.i':
                var $376 = self.pred;
                var $377 = Word$o$(Word$to_zero$($376));
                var $373 = $377;
                break;
            case 'Word.e':
                var $378 = Word$e;
                var $373 = $378;
                break;
        };
        return $373;
    };
    const Word$to_zero = x0 => Word$to_zero$(x0);

    function Word$mul$(_a$2, _b$3) {
        var $379 = Word$mul$go$(_a$2, _b$3, Word$to_zero$(_a$2));
        return $379;
    };
    const Word$mul = x0 => x1 => Word$mul$(x0, x1);
    const U16$mul = a0 => a1 => ((a0 * a1) & 0xFFFF);
    const U16$inc = a0 => ((a0 + 1) & 0xFFFF);
    const U16$zero = U16$new$(Word$zero$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$zero))))))))))))))))));

    function Char$hex_value16$(_chr$1) {
        var self = ((_chr$1 >= 48) && (_chr$1 <= 57));
        if (self) {
            var $381 = ((_chr$1 - 48) & 0xFFFF);
            var $380 = $381;
        } else {
            var self = ((_chr$1 >= 97) && (_chr$1 <= 102));
            if (self) {
                var $383 = (_x0$2 => {
                    var $384 = ((((((((((((((((((((_x0$2 + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF);
                    return $384;
                })(((_chr$1 - 97) & 0xFFFF));
                var $382 = $383;
            } else {
                var self = ((_chr$1 >= 65) && (_chr$1 <= 70));
                if (self) {
                    var $386 = (_x0$2 => {
                        var $387 = ((((((((((((((((((((_x0$2 + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF) + 1) & 0xFFFF);
                        return $387;
                    })(((_chr$1 - 65) & 0xFFFF));
                    var $385 = $386;
                } else {
                    var $388 = U16$zero;
                    var $385 = $388;
                };
                var $382 = $385;
            };
            var $380 = $382;
        };
        return $380;
    };
    const Char$hex_value16 = x0 => Char$hex_value16$(x0);

    function Kind$Core$read$u16$(_code$1, _u16$2) {
        var Kind$Core$read$u16$ = (_code$1, _u16$2) => ({
            ctr: 'TCO',
            arg: [_code$1, _u16$2]
        });
        var Kind$Core$read$u16 = _code$1 => _u16$2 => Kind$Core$read$u16$(_code$1, _u16$2);
        var arg = [_code$1, _u16$2];
        while (true) {
            let [_code$1, _u16$2] = arg;
            var R = (() => {
                var self = _code$1;
                if (self.length === 0) {
                    var $389 = Pair$new$(_code$1, _u16$2);
                    return $389;
                } else {
                    var $390 = self.charCodeAt(0);
                    var $391 = self.slice(1);
                    var self = Char$is_hex$($390);
                    if (self) {
                        var _u16$5 = ((((_u16$2 * 16) & 0xFFFF) + Char$hex_value16$($390)) & 0xFFFF);
                        var $393 = Kind$Core$read$u16$($391, _u16$5);
                        var $392 = $393;
                    } else {
                        var $394 = Pair$new$(_code$1, _u16$2);
                        var $392 = $394;
                    };
                    return $392;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$u16 = x0 => x1 => Kind$Core$read$u16$(x0, x1);

    function Kind$Core$read$chrx$(_code$1) {
        var self = String$starts_with$(_code$1, "\\u{");
        if (self) {
            var _code$2 = String$drop$(3n, _code$1);
            var self = Kind$Core$read$u16$(_code$2, 0);
            switch (self._) {
                case 'Pair.new':
                    var $397 = self.fst;
                    var $398 = self.snd;
                    var self = String$starts_with$($397, "}");
                    if (self) {
                        var $400 = Pair$new$(String$drop$(1n, $397), $398);
                        var $399 = $400;
                    } else {
                        var $401 = Pair$new$("", 63);
                        var $399 = $401;
                    };
                    var $396 = $399;
                    break;
            };
            var $395 = $396;
        } else {
            var self = String$starts_with$(_code$1, "\\\'");
            if (self) {
                var $403 = Pair$new$(String$drop$(2n, _code$1), 39);
                var $402 = $403;
            } else {
                var self = String$starts_with$(_code$1, "\\\"");
                if (self) {
                    var $405 = Pair$new$(String$drop$(2n, _code$1), 34);
                    var $404 = $405;
                } else {
                    var self = String$starts_with$(_code$1, "\\\\");
                    if (self) {
                        var $407 = Pair$new$(String$drop$(2n, _code$1), 92);
                        var $406 = $407;
                    } else {
                        var self = _code$1;
                        if (self.length === 0) {
                            var $409 = Pair$new$("", 63);
                            var $408 = $409;
                        } else {
                            var $410 = self.charCodeAt(0);
                            var $411 = self.slice(1);
                            var $412 = Pair$new$($411, $410);
                            var $408 = $412;
                        };
                        var $406 = $408;
                    };
                    var $404 = $406;
                };
                var $402 = $404;
            };
            var $395 = $402;
        };
        return $395;
    };
    const Kind$Core$read$chrx = x0 => Kind$Core$read$chrx$(x0);

    function Kind$Term$chr$(_chrx$1) {
        var $413 = ({
            _: 'Kind.Term.chr',
            'chrx': _chrx$1
        });
        return $413;
    };
    const Kind$Term$chr = x0 => Kind$Term$chr$(x0);

    function Kind$Core$read$strx$(_code$1) {
        var self = String$starts_with$(_code$1, "\"");
        if (self) {
            var $415 = Pair$new$(_code$1, "");
            var $414 = $415;
        } else {
            var self = Kind$Core$read$chrx$(_code$1);
            switch (self._) {
                case 'Pair.new':
                    var $417 = self.fst;
                    var $418 = self.snd;
                    var self = Kind$Core$read$strx$($417);
                    switch (self._) {
                        case 'Pair.new':
                            var $420 = self.fst;
                            var $421 = self.snd;
                            var $422 = Pair$new$($420, String$cons$($418, $421));
                            var $419 = $422;
                            break;
                    };
                    var $416 = $419;
                    break;
            };
            var $414 = $416;
        };
        return $414;
    };
    const Kind$Core$read$strx = x0 => Kind$Core$read$strx$(x0);

    function Kind$Term$str$(_strx$1) {
        var $423 = ({
            _: 'Kind.Term.str',
            'strx': _strx$1
        });
        return $423;
    };
    const Kind$Term$str = x0 => Kind$Term$str$(x0);

    function Char$dec_value$(_chr$1) {
        var self = (_chr$1 === 48);
        if (self) {
            var $425 = 0n;
            var $424 = $425;
        } else {
            var self = (_chr$1 === 49);
            if (self) {
                var $427 = 1n;
                var $426 = $427;
            } else {
                var self = (_chr$1 === 50);
                if (self) {
                    var $429 = 2n;
                    var $428 = $429;
                } else {
                    var self = (_chr$1 === 51);
                    if (self) {
                        var $431 = 3n;
                        var $430 = $431;
                    } else {
                        var self = (_chr$1 === 52);
                        if (self) {
                            var $433 = 4n;
                            var $432 = $433;
                        } else {
                            var self = (_chr$1 === 53);
                            if (self) {
                                var $435 = 5n;
                                var $434 = $435;
                            } else {
                                var self = (_chr$1 === 54);
                                if (self) {
                                    var $437 = 6n;
                                    var $436 = $437;
                                } else {
                                    var self = (_chr$1 === 55);
                                    if (self) {
                                        var $439 = 7n;
                                        var $438 = $439;
                                    } else {
                                        var self = (_chr$1 === 56);
                                        if (self) {
                                            var $441 = 8n;
                                            var $440 = $441;
                                        } else {
                                            var self = (_chr$1 === 57);
                                            if (self) {
                                                var $443 = 9n;
                                                var $442 = $443;
                                            } else {
                                                var $444 = 0n;
                                                var $442 = $444;
                                            };
                                            var $440 = $442;
                                        };
                                        var $438 = $440;
                                    };
                                    var $436 = $438;
                                };
                                var $434 = $436;
                            };
                            var $432 = $434;
                        };
                        var $430 = $432;
                    };
                    var $428 = $430;
                };
                var $426 = $428;
            };
            var $424 = $426;
        };
        return $424;
    };
    const Char$dec_value = x0 => Char$dec_value$(x0);

    function Kind$Core$read$natx$(_code$1, _nat$2) {
        var Kind$Core$read$natx$ = (_code$1, _nat$2) => ({
            ctr: 'TCO',
            arg: [_code$1, _nat$2]
        });
        var Kind$Core$read$natx = _code$1 => _nat$2 => Kind$Core$read$natx$(_code$1, _nat$2);
        var arg = [_code$1, _nat$2];
        while (true) {
            let [_code$1, _nat$2] = arg;
            var R = (() => {
                var self = _code$1;
                if (self.length === 0) {
                    var $445 = Pair$new$(_code$1, _nat$2);
                    return $445;
                } else {
                    var $446 = self.charCodeAt(0);
                    var $447 = self.slice(1);
                    var self = Char$is_hex$($446);
                    if (self) {
                        var _nat$5 = ((_nat$2 * 10n) + Char$dec_value$($446));
                        var $449 = Kind$Core$read$natx$($447, _nat$5);
                        var $448 = $449;
                    } else {
                        var $450 = Pair$new$(_code$1, _nat$2);
                        var $448 = $450;
                    };
                    return $448;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$natx = x0 => x1 => Kind$Core$read$natx$(x0, x1);

    function Kind$Term$nat$(_natx$1) {
        var $451 = ({
            _: 'Kind.Term.nat',
            'natx': _natx$1
        });
        return $451;
    };
    const Kind$Term$nat = x0 => Kind$Term$nat$(x0);

    function Pair$fst$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $453 = self.fst;
                var $454 = $453;
                var $452 = $454;
                break;
        };
        return $452;
    };
    const Pair$fst = x0 => Pair$fst$(x0);
    const Nat$eql = a0 => a1 => (a0 === a1);

    function Nat$pred$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $456 = Nat$zero;
            var $455 = $456;
        } else {
            var $457 = (self - 1n);
            var $458 = $457;
            var $455 = $458;
        };
        return $455;
    };
    const Nat$pred = x0 => Nat$pred$(x0);

    function Kind$Core$read$find$(_list$2, _cond$3, _indx$4, _skip$5) {
        var Kind$Core$read$find$ = (_list$2, _cond$3, _indx$4, _skip$5) => ({
            ctr: 'TCO',
            arg: [_list$2, _cond$3, _indx$4, _skip$5]
        });
        var Kind$Core$read$find = _list$2 => _cond$3 => _indx$4 => _skip$5 => Kind$Core$read$find$(_list$2, _cond$3, _indx$4, _skip$5);
        var arg = [_list$2, _cond$3, _indx$4, _skip$5];
        while (true) {
            let [_list$2, _cond$3, _indx$4, _skip$5] = arg;
            var R = (() => {
                var self = _list$2;
                switch (self._) {
                    case 'List.cons':
                        var $459 = self.head;
                        var $460 = self.tail;
                        var self = _cond$3($459)(_indx$4);
                        if (self) {
                            var self = (_skip$5 === 0n);
                            if (self) {
                                var $463 = Maybe$some$(Pair$new$($459, _indx$4));
                                var $462 = $463;
                            } else {
                                var $464 = Kind$Core$read$find$($460, _cond$3, Nat$succ$(_indx$4), Nat$pred$(_skip$5));
                                var $462 = $464;
                            };
                            var $461 = $462;
                        } else {
                            var $465 = Kind$Core$read$find$($460, _cond$3, Nat$succ$(_indx$4), _skip$5);
                            var $461 = $465;
                        };
                        return $461;
                    case 'List.nil':
                        var $466 = Maybe$none;
                        return $466;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$read$find = x0 => x1 => x2 => x3 => Kind$Core$read$find$(x0, x1, x2, x3);

    function Pair$snd$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $468 = self.snd;
                var $469 = $468;
                var $467 = $469;
                break;
        };
        return $467;
    };
    const Pair$snd = x0 => Pair$snd$(x0);

    function Kind$Core$read$term$(_code$1) {
        var self = Kind$Core$read$spaces$(_code$1);
        switch (self._) {
            case 'Pair.new':
                var $471 = self.fst;
                var self = $471;
                if (self.length === 0) {
                    var $473 = Pair$new$("", (_ctx$4 => {
                        var $474 = Kind$Term$ref$("error");
                        return $474;
                    }));
                    var $472 = $473;
                } else {
                    var $475 = self.charCodeAt(0);
                    var $476 = self.slice(1);
                    var _head$6 = $475;
                    var _code$7 = $476;
                    var self = Char$eql$(_head$6, 42);
                    if (self) {
                        var $478 = Pair$new$(_code$7, (_ctx$8 => {
                            var $479 = Kind$Term$typ;
                            return $479;
                        }));
                        var $477 = $478;
                    } else {
                        var self = (_head$6 === 64);
                        if (self) {
                            var self = Kind$Core$read$name$(_code$7);
                            switch (self._) {
                                case 'Pair.new':
                                    var $482 = self.fst;
                                    var $483 = self.snd;
                                    var self = Kind$Core$read$char$($482, 40);
                                    switch (self._) {
                                        case 'Pair.new':
                                            var $485 = self.fst;
                                            var self = Kind$Core$read$name$($485);
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $487 = self.fst;
                                                    var $488 = self.snd;
                                                    var self = Kind$Core$read$char$($487, 58);
                                                    switch (self._) {
                                                        case 'Pair.new':
                                                            var $490 = self.fst;
                                                            var self = Kind$Core$read$term$($490);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $492 = self.fst;
                                                                    var $493 = self.snd;
                                                                    var self = Kind$Core$read$char$($492, 41);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $495 = self.fst;
                                                                            var self = Kind$Core$read$term$($495);
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $497 = self.fst;
                                                                                    var $498 = self.snd;
                                                                                    var $499 = Pair$new$($497, (_ctx$22 => {
                                                                                        var $500 = Kind$Term$all$(Bool$false, $483, $488, $493(_ctx$22), (_s$23 => _x$24 => {
                                                                                            var $501 = $498(List$cons$(Pair$new$($488, _x$24), List$cons$(Pair$new$($483, _s$23), _ctx$22)));
                                                                                            return $501;
                                                                                        }));
                                                                                        return $500;
                                                                                    }));
                                                                                    var $496 = $499;
                                                                                    break;
                                                                            };
                                                                            var $494 = $496;
                                                                            break;
                                                                    };
                                                                    var $491 = $494;
                                                                    break;
                                                            };
                                                            var $489 = $491;
                                                            break;
                                                    };
                                                    var $486 = $489;
                                                    break;
                                            };
                                            var $484 = $486;
                                            break;
                                    };
                                    var $481 = $484;
                                    break;
                            };
                            var $480 = $481;
                        } else {
                            var self = (_head$6 === 37);
                            if (self) {
                                var self = Kind$Core$read$name$(_code$7);
                                switch (self._) {
                                    case 'Pair.new':
                                        var $504 = self.fst;
                                        var $505 = self.snd;
                                        var self = Kind$Core$read$char$($504, 40);
                                        switch (self._) {
                                            case 'Pair.new':
                                                var $507 = self.fst;
                                                var self = Kind$Core$read$name$($507);
                                                switch (self._) {
                                                    case 'Pair.new':
                                                        var $509 = self.fst;
                                                        var $510 = self.snd;
                                                        var self = Kind$Core$read$char$($509, 58);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $512 = self.fst;
                                                                var self = Kind$Core$read$term$($512);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $514 = self.fst;
                                                                        var $515 = self.snd;
                                                                        var self = Kind$Core$read$char$($514, 41);
                                                                        switch (self._) {
                                                                            case 'Pair.new':
                                                                                var $517 = self.fst;
                                                                                var self = Kind$Core$read$term$($517);
                                                                                switch (self._) {
                                                                                    case 'Pair.new':
                                                                                        var $519 = self.fst;
                                                                                        var $520 = self.snd;
                                                                                        var $521 = Pair$new$($519, (_ctx$22 => {
                                                                                            var $522 = Kind$Term$all$(Bool$true, $505, $510, $515(_ctx$22), (_s$23 => _x$24 => {
                                                                                                var $523 = $520(List$cons$(Pair$new$($510, _x$24), List$cons$(Pair$new$($505, _s$23), _ctx$22)));
                                                                                                return $523;
                                                                                            }));
                                                                                            return $522;
                                                                                        }));
                                                                                        var $518 = $521;
                                                                                        break;
                                                                                };
                                                                                var $516 = $518;
                                                                                break;
                                                                        };
                                                                        var $513 = $516;
                                                                        break;
                                                                };
                                                                var $511 = $513;
                                                                break;
                                                        };
                                                        var $508 = $511;
                                                        break;
                                                };
                                                var $506 = $508;
                                                break;
                                        };
                                        var $503 = $506;
                                        break;
                                };
                                var $502 = $503;
                            } else {
                                var self = (_head$6 === 35);
                                if (self) {
                                    var self = Kind$Core$read$name$(_code$7);
                                    switch (self._) {
                                        case 'Pair.new':
                                            var $526 = self.fst;
                                            var $527 = self.snd;
                                            var self = Kind$Core$read$term$($526);
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $529 = self.fst;
                                                    var $530 = self.snd;
                                                    var $531 = Pair$new$($529, (_ctx$12 => {
                                                        var $532 = Kind$Term$lam$($527, (_x$13 => {
                                                            var $533 = $530(List$cons$(Pair$new$($527, _x$13), _ctx$12));
                                                            return $533;
                                                        }));
                                                        return $532;
                                                    }));
                                                    var $528 = $531;
                                                    break;
                                            };
                                            var $525 = $528;
                                            break;
                                    };
                                    var $524 = $525;
                                } else {
                                    var self = (_head$6 === 40);
                                    if (self) {
                                        var self = Kind$Core$read$term$(_code$7);
                                        switch (self._) {
                                            case 'Pair.new':
                                                var $536 = self.fst;
                                                var $537 = self.snd;
                                                var self = Kind$Core$read$term$($536);
                                                switch (self._) {
                                                    case 'Pair.new':
                                                        var $539 = self.fst;
                                                        var $540 = self.snd;
                                                        var self = Kind$Core$read$char$($539, 41);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $542 = self.fst;
                                                                var $543 = Pair$new$($542, (_ctx$14 => {
                                                                    var $544 = Kind$Term$app$($537(_ctx$14), $540(_ctx$14));
                                                                    return $544;
                                                                }));
                                                                var $541 = $543;
                                                                break;
                                                        };
                                                        var $538 = $541;
                                                        break;
                                                };
                                                var $535 = $538;
                                                break;
                                        };
                                        var $534 = $535;
                                    } else {
                                        var self = (_head$6 === 33);
                                        if (self) {
                                            var self = Kind$Core$read$name$(_code$7);
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $547 = self.fst;
                                                    var $548 = self.snd;
                                                    var self = Kind$Core$read$char$($547, 61);
                                                    switch (self._) {
                                                        case 'Pair.new':
                                                            var $550 = self.fst;
                                                            var self = Kind$Core$read$term$($550);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $552 = self.fst;
                                                                    var $553 = self.snd;
                                                                    var self = Kind$Core$read$char$($552, 59);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $555 = self.fst;
                                                                            var self = Kind$Core$read$term$($555);
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $557 = self.fst;
                                                                                    var $558 = self.snd;
                                                                                    var $559 = Pair$new$($557, (_ctx$18 => {
                                                                                        var $560 = Kind$Term$let$($548, $553(_ctx$18), (_x$19 => {
                                                                                            var $561 = $558(List$cons$(Pair$new$($548, _x$19), _ctx$18));
                                                                                            return $561;
                                                                                        }));
                                                                                        return $560;
                                                                                    }));
                                                                                    var $556 = $559;
                                                                                    break;
                                                                            };
                                                                            var $554 = $556;
                                                                            break;
                                                                    };
                                                                    var $551 = $554;
                                                                    break;
                                                            };
                                                            var $549 = $551;
                                                            break;
                                                    };
                                                    var $546 = $549;
                                                    break;
                                            };
                                            var $545 = $546;
                                        } else {
                                            var self = (_head$6 === 36);
                                            if (self) {
                                                var self = Kind$Core$read$name$(_code$7);
                                                switch (self._) {
                                                    case 'Pair.new':
                                                        var $564 = self.fst;
                                                        var $565 = self.snd;
                                                        var self = Kind$Core$read$char$($564, 61);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $567 = self.fst;
                                                                var self = Kind$Core$read$term$($567);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $569 = self.fst;
                                                                        var $570 = self.snd;
                                                                        var self = Kind$Core$read$char$($569, 59);
                                                                        switch (self._) {
                                                                            case 'Pair.new':
                                                                                var $572 = self.fst;
                                                                                var self = Kind$Core$read$term$($572);
                                                                                switch (self._) {
                                                                                    case 'Pair.new':
                                                                                        var $574 = self.fst;
                                                                                        var $575 = self.snd;
                                                                                        var $576 = Pair$new$($574, (_ctx$18 => {
                                                                                            var $577 = Kind$Term$def$($565, $570(_ctx$18), (_x$19 => {
                                                                                                var $578 = $575(List$cons$(Pair$new$($565, _x$19), _ctx$18));
                                                                                                return $578;
                                                                                            }));
                                                                                            return $577;
                                                                                        }));
                                                                                        var $573 = $576;
                                                                                        break;
                                                                                };
                                                                                var $571 = $573;
                                                                                break;
                                                                        };
                                                                        var $568 = $571;
                                                                        break;
                                                                };
                                                                var $566 = $568;
                                                                break;
                                                        };
                                                        var $563 = $566;
                                                        break;
                                                };
                                                var $562 = $563;
                                            } else {
                                                var self = (_head$6 === 123);
                                                if (self) {
                                                    var self = Kind$Core$read$term$(_code$7);
                                                    switch (self._) {
                                                        case 'Pair.new':
                                                            var $581 = self.fst;
                                                            var $582 = self.snd;
                                                            var self = Kind$Core$read$char$($581, 58);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $584 = self.fst;
                                                                    var self = Kind$Core$read$term$($584);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $586 = self.fst;
                                                                            var $587 = self.snd;
                                                                            var self = Kind$Core$read$char$($586, 125);
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $589 = self.fst;
                                                                                    var $590 = Pair$new$($589, (_ctx$16 => {
                                                                                        var $591 = Kind$Term$ann$(Bool$false, $582(_ctx$16), $587(_ctx$16));
                                                                                        return $591;
                                                                                    }));
                                                                                    var $588 = $590;
                                                                                    break;
                                                                            };
                                                                            var $585 = $588;
                                                                            break;
                                                                    };
                                                                    var $583 = $585;
                                                                    break;
                                                            };
                                                            var $580 = $583;
                                                            break;
                                                    };
                                                    var $579 = $580;
                                                } else {
                                                    var self = (_head$6 === 39);
                                                    if (self) {
                                                        var self = Kind$Core$read$chrx$(_code$7);
                                                        switch (self._) {
                                                            case 'Pair.new':
                                                                var $594 = self.fst;
                                                                var $595 = self.snd;
                                                                var self = Kind$Core$read$char$($594, 39);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $597 = self.fst;
                                                                        var $598 = Pair$new$($597, (_ctx$12 => {
                                                                            var $599 = Kind$Term$chr$($595);
                                                                            return $599;
                                                                        }));
                                                                        var $596 = $598;
                                                                        break;
                                                                };
                                                                var $593 = $596;
                                                                break;
                                                        };
                                                        var $592 = $593;
                                                    } else {
                                                        var self = (_head$6 === 34);
                                                        if (self) {
                                                            var self = Kind$Core$read$strx$(_code$7);
                                                            switch (self._) {
                                                                case 'Pair.new':
                                                                    var $602 = self.fst;
                                                                    var $603 = self.snd;
                                                                    var self = Kind$Core$read$char$($602, 34);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $605 = self.fst;
                                                                            var $606 = Pair$new$($605, (_ctx$12 => {
                                                                                var $607 = Kind$Term$str$($603);
                                                                                return $607;
                                                                            }));
                                                                            var $604 = $606;
                                                                            break;
                                                                    };
                                                                    var $601 = $604;
                                                                    break;
                                                            };
                                                            var $600 = $601;
                                                        } else {
                                                            var self = (_head$6 === 43);
                                                            if (self) {
                                                                var self = Kind$Core$read$natx$(_code$7, 0n);
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $610 = self.fst;
                                                                        var $611 = self.snd;
                                                                        var $612 = Pair$new$($610, (_ctx$10 => {
                                                                            var $613 = Kind$Term$nat$($611);
                                                                            return $613;
                                                                        }));
                                                                        var $609 = $612;
                                                                        break;
                                                                };
                                                                var $608 = $609;
                                                            } else {
                                                                var self = Kind$Core$read$is_name$(_head$6);
                                                                if (self) {
                                                                    var self = Kind$Core$read$name$(_code$7);
                                                                    switch (self._) {
                                                                        case 'Pair.new':
                                                                            var $616 = self.fst;
                                                                            var $617 = self.snd;
                                                                            var _name$10 = String$cons$(_head$6, $617);
                                                                            var self = $616;
                                                                            if (self.length === 0) {
                                                                                var $619 = Pair$new$("", 0n);
                                                                                var self = $619;
                                                                            } else {
                                                                                var $620 = self.charCodeAt(0);
                                                                                var $621 = self.slice(1);
                                                                                var self = ($620 === 94);
                                                                                if (self) {
                                                                                    var $623 = Kind$Core$read$natx$($621, 0n);
                                                                                    var $622 = $623;
                                                                                } else {
                                                                                    var $624 = Pair$new$($616, 0n);
                                                                                    var $622 = $624;
                                                                                };
                                                                                var self = $622;
                                                                            };
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $625 = self.fst;
                                                                                    var $626 = self.snd;
                                                                                    var $627 = Pair$new$($625, (_ctx$13 => {
                                                                                        var _got$14 = Kind$Core$read$find$(_ctx$13, (_x$14 => _i$15 => {
                                                                                            var $629 = (Pair$fst$(_x$14) === _name$10);
                                                                                            return $629;
                                                                                        }), 0n, $626);
                                                                                        var self = _got$14;
                                                                                        switch (self._) {
                                                                                            case 'Maybe.some':
                                                                                                var $630 = self.value;
                                                                                                var $631 = Pair$snd$(Pair$fst$($630));
                                                                                                var $628 = $631;
                                                                                                break;
                                                                                            case 'Maybe.none':
                                                                                                var $632 = Kind$Term$ref$(_name$10);
                                                                                                var $628 = $632;
                                                                                                break;
                                                                                        };
                                                                                        return $628;
                                                                                    }));
                                                                                    var $618 = $627;
                                                                                    break;
                                                                            };
                                                                            var $615 = $618;
                                                                            break;
                                                                    };
                                                                    var $614 = $615;
                                                                } else {
                                                                    var $633 = Pair$new$("", (_ctx$8 => {
                                                                        var $634 = Kind$Term$ref$("error");
                                                                        return $634;
                                                                    }));
                                                                    var $614 = $633;
                                                                };
                                                                var $608 = $614;
                                                            };
                                                            var $600 = $608;
                                                        };
                                                        var $592 = $600;
                                                    };
                                                    var $579 = $592;
                                                };
                                                var $562 = $579;
                                            };
                                            var $545 = $562;
                                        };
                                        var $534 = $545;
                                    };
                                    var $524 = $534;
                                };
                                var $502 = $524;
                            };
                            var $480 = $502;
                        };
                        var $477 = $480;
                    };
                    var $472 = $477;
                };
                var $470 = $472;
                break;
        };
        return $470;
    };
    const Kind$Core$read$term = x0 => Kind$Core$read$term$(x0);

    function Kind$Core$read$(_code$1) {
        var self = Kind$Core$read$term$((_code$1 + ";"));
        switch (self._) {
            case 'Pair.new':
                var $636 = self.fst;
                var $637 = self.snd;
                var self = $636;
                if (self.length === 0) {
                    var $639 = Maybe$none;
                    var $638 = $639;
                } else {
                    var $640 = self.charCodeAt(0);
                    var $641 = self.slice(1);
                    var $642 = Maybe$some$($637(List$nil));
                    var $638 = $642;
                };
                var $635 = $638;
                break;
        };
        return $635;
    };
    const Kind$Core$read = x0 => Kind$Core$read$(x0);

    function Bool$read$(_code$1) {
        var self = (_code$1 === "Bool.true");
        if (self) {
            var $644 = Maybe$some$(Bool$true);
            var $643 = $644;
        } else {
            var self = (_code$1 === "Bool.false");
            if (self) {
                var $646 = Maybe$some$(Bool$false);
                var $645 = $646;
            } else {
                var $647 = Maybe$none;
                var $645 = $647;
            };
            var $643 = $645;
        };
        return $643;
    };
    const Bool$read = x0 => Bool$read$(x0);
    const Kind$Status$done = ({
        _: 'Kind.Status.done'
    });

    function Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _stat$9) {
        var $648 = ({
            _: 'Kind.Def.new',
            'file': _file$1,
            'code': _code$2,
            'orig': _orig$3,
            'name': _name$4,
            'term': _term$5,
            'type': _type$6,
            'isct': _isct$7,
            'arit': _arit$8,
            'stat': _stat$9
        });
        return $648;
    };
    const Kind$Def$new = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Def$new$(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    function Kind$Synth$load$cached$def$(_name$1) {
        var $649 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $650 = _m$bind$2;
            return $650;
        }))(IO$get_file$((".cache/" + (_name$1 + ".file"))))((_cache_file$2 => {
            var self = (!String$is_empty$(_cache_file$2));
            if (self) {
                var $652 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $653 = _m$bind$3;
                    return $653;
                }))(IO$get_file$((".cache/" + (_name$1 + ".time"))))((_cache_time$3 => {
                    var $654 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $655 = _m$bind$4;
                        return $655;
                    }))(IO$get_file_mtime$(_cache_file$2))((_cache_file_time$4 => {
                        var self = (_cache_time$3 === _cache_file_time$4);
                        if (self) {
                            var $657 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                                var $658 = _m$bind$5;
                                return $658;
                            }))(IO$get_file$((".cache/" + (_name$1 + ".term"))))((_cache_term$5 => {
                                var $659 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $660 = _m$bind$6;
                                    return $660;
                                }))(IO$get_file$((".cache/" + (_name$1 + ".type"))))((_cache_type$6 => {
                                    var $661 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                                        var $662 = _m$bind$7;
                                        return $662;
                                    }))(IO$get_file$((".cache/" + (_name$1 + ".isct"))))((_cache_isct$7 => {
                                        var $663 = IO$monad$((_m$bind$8 => _m$pure$9 => {
                                            var $664 = _m$bind$8;
                                            return $664;
                                        }))(IO$get_file$((".cache/" + (_name$1 + ".arit"))))((_cache_arit$8 => {
                                            var $665 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                                var $666 = _m$pure$10;
                                                return $666;
                                            }))((() => {
                                                var _file$9 = _cache_file$2;
                                                var _code$10 = "<cached>";
                                                var _orig$11 = Pair$new$(0n, 0n);
                                                var $667 = Maybe$monad$((_m$bind$12 => _m$pure$13 => {
                                                    var $668 = _m$bind$12;
                                                    return $668;
                                                }))(Kind$Core$read$(_cache_term$5))((_term$12 => {
                                                    var $669 = Maybe$monad$((_m$bind$13 => _m$pure$14 => {
                                                        var $670 = _m$bind$13;
                                                        return $670;
                                                    }))(Kind$Core$read$(_cache_type$6))((_type$13 => {
                                                        var $671 = Maybe$monad$((_m$bind$14 => _m$pure$15 => {
                                                            var $672 = _m$bind$14;
                                                            return $672;
                                                        }))(Bool$read$(_cache_isct$7))((_isct$14 => {
                                                            var $673 = Maybe$monad$((_m$bind$15 => _m$pure$16 => {
                                                                var $674 = _m$bind$15;
                                                                return $674;
                                                            }))(Maybe$some$(Nat$read$(_cache_arit$8)))((_arit$15 => {
                                                                var _stat$16 = Kind$Status$done;
                                                                var $675 = Maybe$monad$((_m$bind$17 => _m$pure$18 => {
                                                                    var $676 = _m$pure$18;
                                                                    return $676;
                                                                }))(Kind$Def$new$(_file$9, _code$10, _orig$11, _name$1, _term$12, _type$13, _isct$14, _arit$15, _stat$16));
                                                                return $675;
                                                            }));
                                                            return $673;
                                                        }));
                                                        return $671;
                                                    }));
                                                    return $669;
                                                }));
                                                return $667;
                                            })());
                                            return $665;
                                        }));
                                        return $663;
                                    }));
                                    return $661;
                                }));
                                return $659;
                            }));
                            var $656 = $657;
                        } else {
                            var $677 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                                var $678 = _m$pure$6;
                                return $678;
                            }))(Maybe$none);
                            var $656 = $677;
                        };
                        return $656;
                    }));
                    return $654;
                }));
                var $651 = $652;
            } else {
                var $679 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $680 = _m$pure$4;
                    return $680;
                }))(Maybe$none);
                var $651 = $679;
            };
            return $651;
        }));
        return $649;
    };
    const Kind$Synth$load$cached$def = x0 => Kind$Synth$load$cached$def$(x0);

    function Trampoline$call$(_t$2) {
        var Trampoline$call$ = (_t$2) => ({
            ctr: 'TCO',
            arg: [_t$2]
        });
        var Trampoline$call = _t$2 => Trampoline$call$(_t$2);
        var arg = [_t$2];
        while (true) {
            let [_t$2] = arg;
            var R = (() => {
                var self = _t$2;
                switch (self._) {
                    case 'Trampoline.done':
                        var $681 = self.value;
                        var $682 = $681;
                        return $682;
                    case 'Trampoline.wrap':
                        var $683 = self.value;
                        var $684 = Trampoline$call$($683(Unit$new));
                        return $684;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Trampoline$call = x0 => Trampoline$call$(x0);

    function Trampoline$(_A$1) {
        var $685 = null;
        return $685;
    };
    const Trampoline = x0 => Trampoline$(x0);

    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {
        var $686 = ({
            _: 'BitsMap.tie',
            'val': _val$2,
            'lft': _lft$3,
            'rgt': _rgt$4
        });
        return $686;
    };
    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);
    const BitsMap$new = ({
        _: 'BitsMap.new'
    });

    function Trampoline$wrap$(_value$2) {
        var $687 = ({
            _: 'Trampoline.wrap',
            'value': _value$2
        });
        return $687;
    };
    const Trampoline$wrap = x0 => Trampoline$wrap$(x0);

    function BitsMap$set$cps$go$(_bits$2, _val$3, _map$4, _cont$5) {
        var BitsMap$set$cps$go$ = (_bits$2, _val$3, _map$4, _cont$5) => ({
            ctr: 'TCO',
            arg: [_bits$2, _val$3, _map$4, _cont$5]
        });
        var BitsMap$set$cps$go = _bits$2 => _val$3 => _map$4 => _cont$5 => BitsMap$set$cps$go$(_bits$2, _val$3, _map$4, _cont$5);
        var arg = [_bits$2, _val$3, _map$4, _cont$5];
        while (true) {
            let [_bits$2, _val$3, _map$4, _cont$5] = arg;
            var R = (() => {
                var self = _bits$2;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $688 = self.slice(0, -1);
                        var self = _map$4;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $690 = self.val;
                                var $691 = self.lft;
                                var $692 = self.rgt;
                                var $693 = BitsMap$set$cps$go$($688, _val$3, $691, (_lft$10 => {
                                    var $694 = Trampoline$wrap$((_$11 => {
                                        var $695 = _cont$5(BitsMap$tie$($690, _lft$10, $692));
                                        return $695;
                                    }));
                                    return $694;
                                }));
                                var $689 = $693;
                                break;
                            case 'BitsMap.new':
                                var $696 = BitsMap$set$cps$go$($688, _val$3, BitsMap$new, (_lft$7 => {
                                    var $697 = Trampoline$wrap$((_$8 => {
                                        var $698 = _cont$5(BitsMap$tie$(Maybe$none, _lft$7, BitsMap$new));
                                        return $698;
                                    }));
                                    return $697;
                                }));
                                var $689 = $696;
                                break;
                        };
                        return $689;
                    case 'i':
                        var $699 = self.slice(0, -1);
                        var self = _map$4;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $701 = self.val;
                                var $702 = self.lft;
                                var $703 = self.rgt;
                                var $704 = BitsMap$set$cps$go$($699, _val$3, $703, (_rgt$10 => {
                                    var $705 = Trampoline$wrap$((_$11 => {
                                        var $706 = _cont$5(BitsMap$tie$($701, $702, _rgt$10));
                                        return $706;
                                    }));
                                    return $705;
                                }));
                                var $700 = $704;
                                break;
                            case 'BitsMap.new':
                                var $707 = BitsMap$set$cps$go$($699, _val$3, BitsMap$new, (_rgt$7 => {
                                    var $708 = Trampoline$wrap$((_$8 => {
                                        var $709 = _cont$5(BitsMap$tie$(Maybe$none, BitsMap$new, _rgt$7));
                                        return $709;
                                    }));
                                    return $708;
                                }));
                                var $700 = $707;
                                break;
                        };
                        return $700;
                    case 'e':
                        var self = _map$4;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $711 = self.lft;
                                var $712 = self.rgt;
                                var $713 = _cont$5(BitsMap$tie$(Maybe$some$(_val$3), $711, $712));
                                var $710 = $713;
                                break;
                            case 'BitsMap.new':
                                var $714 = _cont$5(BitsMap$tie$(Maybe$some$(_val$3), BitsMap$new, BitsMap$new));
                                var $710 = $714;
                                break;
                        };
                        return $710;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const BitsMap$set$cps$go = x0 => x1 => x2 => x3 => BitsMap$set$cps$go$(x0, x1, x2, x3);

    function Trampoline$done$(_value$2) {
        var $715 = ({
            _: 'Trampoline.done',
            'value': _value$2
        });
        return $715;
    };
    const Trampoline$done = x0 => Trampoline$done$(x0);

    function BitsMap$set$cps$(_bits$2, _val$3, _map$4) {
        var $716 = Trampoline$call$(BitsMap$set$cps$go$(_bits$2, _val$3, _map$4, Trampoline$done));
        return $716;
    };
    const BitsMap$set$cps = x0 => x1 => x2 => BitsMap$set$cps$(x0, x1, x2);

    function BitsMap$set$(_bits$2, _val$3, _map$4) {
        var $717 = BitsMap$set$cps$(_bits$2, _val$3, _map$4);
        return $717;
    };
    const BitsMap$set = x0 => x1 => x2 => BitsMap$set$(x0, x1, x2);

    function Kind$Map$set$(_name$2, _val$3, _map$4) {
        var $718 = BitsMap$set$((kind_name_to_bits(_name$2)), _val$3, _map$4);
        return $718;
    };
    const Kind$Map$set = x0 => x1 => x2 => Kind$Map$set$(x0, x1, x2);
    const Kind$Map$new = BitsMap$new;
    const Kind$Map = null;

    function Kind$Core$dependencies$go$(_term$1, _deps$2) {
        var _nil$3 = Kind$Term$typ;
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $720 = self.name;
                var $721 = Kind$Map$set$($720, Unit$new, _deps$2);
                var $719 = $721;
                break;
            case 'Kind.Term.all':
                var $722 = self.xtyp;
                var $723 = self.body;
                var _deps$9 = Kind$Core$dependencies$go$($722, _deps$2);
                var _deps$10 = Kind$Core$dependencies$go$($723(_nil$3)(_nil$3), _deps$9);
                var $724 = _deps$10;
                var $719 = $724;
                break;
            case 'Kind.Term.lam':
                var $725 = self.body;
                var _deps$6 = Kind$Core$dependencies$go$($725(_nil$3), _deps$2);
                var $726 = _deps$6;
                var $719 = $726;
                break;
            case 'Kind.Term.app':
                var $727 = self.func;
                var $728 = self.argm;
                var _deps$6 = Kind$Core$dependencies$go$($727, _deps$2);
                var _deps$7 = Kind$Core$dependencies$go$($728, _deps$6);
                var $729 = _deps$7;
                var $719 = $729;
                break;
            case 'Kind.Term.let':
                var $730 = self.expr;
                var $731 = self.body;
                var _deps$7 = Kind$Core$dependencies$go$($730, _deps$2);
                var _deps$8 = Kind$Core$dependencies$go$($731(_nil$3), _deps$7);
                var $732 = _deps$8;
                var $719 = $732;
                break;
            case 'Kind.Term.def':
                var $733 = self.expr;
                var $734 = self.body;
                var _deps$7 = Kind$Core$dependencies$go$($733, _deps$2);
                var _deps$8 = Kind$Core$dependencies$go$($734(_nil$3), _deps$7);
                var $735 = _deps$8;
                var $719 = $735;
                break;
            case 'Kind.Term.ann':
                var $736 = self.term;
                var $737 = self.type;
                var _deps$7 = Kind$Core$dependencies$go$($736, _deps$2);
                var _deps$8 = Kind$Core$dependencies$go$($737, _deps$7);
                var $738 = _deps$8;
                var $719 = $738;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $739 = _deps$2;
                var $719 = $739;
                break;
        };
        return $719;
    };
    const Kind$Core$dependencies$go = x0 => x1 => Kind$Core$dependencies$go$(x0, x1);

    function List$mapped$(_as$2, _f$4) {
        var self = _as$2;
        switch (self._) {
            case 'List.cons':
                var $741 = self.head;
                var $742 = self.tail;
                var $743 = List$cons$(_f$4($741), List$mapped$($742, _f$4));
                var $740 = $743;
                break;
            case 'List.nil':
                var $744 = List$nil;
                var $740 = $744;
                break;
        };
        return $740;
    };
    const List$mapped = x0 => x1 => List$mapped$(x0, x1);

    function BitsMap$to_list$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $746 = self.val;
                var $747 = self.lft;
                var $748 = self.rgt;
                var self = $746;
                switch (self._) {
                    case 'Maybe.some':
                        var $750 = self.value;
                        var $751 = List$cons$(Pair$new$(Bits$reverse$(_key$3), $750), _list$4);
                        var _list0$8 = $751;
                        break;
                    case 'Maybe.none':
                        var $752 = _list$4;
                        var _list0$8 = $752;
                        break;
                };
                var _list1$9 = BitsMap$to_list$go$($747, (_key$3 + '0'), _list0$8);
                var _list2$10 = BitsMap$to_list$go$($748, (_key$3 + '1'), _list1$9);
                var $749 = _list2$10;
                var $745 = $749;
                break;
            case 'BitsMap.new':
                var $753 = _list$4;
                var $745 = $753;
                break;
        };
        return $745;
    };
    const BitsMap$to_list$go = x0 => x1 => x2 => BitsMap$to_list$go$(x0, x1, x2);

    function Bits$chunks_of$go$(_len$1, _bits$2, _need$3, _chunk$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $755 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $757 = List$cons$(_head$6, _tail$7);
                    var $756 = $757;
                } else {
                    var $758 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '0');
                    var $759 = Bits$chunks_of$go$(_len$1, $755, $758, _chunk$7);
                    var $756 = $759;
                };
                var $754 = $756;
                break;
            case 'i':
                var $760 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $762 = List$cons$(_head$6, _tail$7);
                    var $761 = $762;
                } else {
                    var $763 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '1');
                    var $764 = Bits$chunks_of$go$(_len$1, $760, $763, _chunk$7);
                    var $761 = $764;
                };
                var $754 = $761;
                break;
            case 'e':
                var $765 = List$cons$(Bits$reverse$(_chunk$4), List$nil);
                var $754 = $765;
                break;
        };
        return $754;
    };
    const Bits$chunks_of$go = x0 => x1 => x2 => x3 => Bits$chunks_of$go$(x0, x1, x2, x3);

    function Bits$chunks_of$(_len$1, _bits$2) {
        var $766 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
        return $766;
    };
    const Bits$chunks_of = x0 => x1 => Bits$chunks_of$(x0, x1);

    function List$fold$(_list$2, _nil$4, _cons$5) {
        var self = _list$2;
        switch (self._) {
            case 'List.cons':
                var $768 = self.head;
                var $769 = self.tail;
                var $770 = _cons$5($768)(List$fold$($769, _nil$4, _cons$5));
                var $767 = $770;
                break;
            case 'List.nil':
                var $771 = _nil$4;
                var $767 = $771;
                break;
        };
        return $767;
    };
    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);

    function Word$from_bits$(_size$1, _bits$2) {
        var self = _size$1;
        if (self === 0n) {
            var $773 = Word$e;
            var $772 = $773;
        } else {
            var $774 = (self - 1n);
            var self = _bits$2;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'o':
                    var $776 = self.slice(0, -1);
                    var $777 = Word$o$(Word$from_bits$($774, $776));
                    var $775 = $777;
                    break;
                case 'i':
                    var $778 = self.slice(0, -1);
                    var $779 = Word$i$(Word$from_bits$($774, $778));
                    var $775 = $779;
                    break;
                case 'e':
                    var $780 = Word$o$(Word$from_bits$($774, Bits$e));
                    var $775 = $780;
                    break;
            };
            var $772 = $775;
        };
        return $772;
    };
    const Word$from_bits = x0 => x1 => Word$from_bits$(x0, x1);

    function Kind$Name$from_bits$(_bits$1) {
        var _list$2 = Bits$chunks_of$(6n, _bits$1);
        var _name$3 = List$fold$(_list$2, String$nil, (_bts$3 => _name$4 => {
            var _u16$5 = U16$new$(Word$from_bits$(16n, Bits$reverse$(_bts$3)));
            var self = U16$btw$(0, _u16$5, 25);
            if (self) {
                var $783 = ((_u16$5 + 65) & 0xFFFF);
                var _chr$6 = $783;
            } else {
                var self = U16$btw$(26, _u16$5, 51);
                if (self) {
                    var $785 = ((_u16$5 + 71) & 0xFFFF);
                    var $784 = $785;
                } else {
                    var self = U16$btw$(52, _u16$5, 61);
                    if (self) {
                        var $787 = ((_u16$5 - 4) & 0xFFFF);
                        var $786 = $787;
                    } else {
                        var self = (62 === _u16$5);
                        if (self) {
                            var $789 = 46;
                            var $788 = $789;
                        } else {
                            var $790 = 95;
                            var $788 = $790;
                        };
                        var $786 = $788;
                    };
                    var $784 = $786;
                };
                var _chr$6 = $784;
            };
            var $782 = String$cons$(_chr$6, _name$4);
            return $782;
        }));
        var $781 = _name$3;
        return $781;
    };
    const Kind$Name$from_bits = x0 => Kind$Name$from_bits$(x0);

    function Kind$Map$to_list$(_xs$2) {
        var _kvs$3 = List$reverse$(BitsMap$to_list$go$(_xs$2, Bits$e, List$nil));
        var $791 = List$mapped$(_kvs$3, (_kv$4 => {
            var self = _kv$4;
            switch (self._) {
                case 'Pair.new':
                    var $793 = self.fst;
                    var $794 = self.snd;
                    var $795 = Pair$new$(Kind$Name$from_bits$($793), $794);
                    var $792 = $795;
                    break;
            };
            return $792;
        }));
        return $791;
    };
    const Kind$Map$to_list = x0 => Kind$Map$to_list$(x0);

    function Kind$Map$keys$(_xs$2) {
        var $796 = List$mapped$(Kind$Map$to_list$(_xs$2), Pair$fst);
        return $796;
    };
    const Kind$Map$keys = x0 => Kind$Map$keys$(x0);

    function Kind$Synth$load$cached$(_names$1, _defs$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $798 = self.head;
                var $799 = self.tail;
                var self = Kind$Map$get$($798, _defs$2);
                switch (self._) {
                    case 'Maybe.none':
                        var _name$5 = $798;
                        var $801 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                            var $802 = _m$bind$6;
                            return $802;
                        }))(Kind$Synth$load$cached$def$(_name$5))((_defn$6 => {
                            var self = _defn$6;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $804 = self.value;
                                    var self = $804;
                                    switch (self._) {
                                        case 'Kind.Def.new':
                                            var $806 = self.term;
                                            var $807 = self.type;
                                            var _defs$17 = Kind$Map$set$(_name$5, $804, _defs$2);
                                            var _deps$18 = Kind$Map$new;
                                            var _deps$19 = Kind$Core$dependencies$go$($806, _deps$18);
                                            var _deps$20 = Kind$Core$dependencies$go$($807, _deps$19);
                                            var _deps$21 = Kind$Map$keys$(_deps$20);
                                            var $808 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                                var $809 = _m$bind$22;
                                                return $809;
                                            }))(Kind$Synth$load$cached$(_deps$21, _defs$17))((_defs$22 => {
                                                var self = _defs$22;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $811 = self.value;
                                                        var $812 = Kind$Synth$load$cached$($799, $811);
                                                        var $810 = $812;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $813 = IO$monad$((_m$bind$23 => _m$pure$24 => {
                                                            var $814 = _m$pure$24;
                                                            return $814;
                                                        }))(Maybe$none);
                                                        var $810 = $813;
                                                        break;
                                                };
                                                return $810;
                                            }));
                                            var $805 = $808;
                                            break;
                                    };
                                    var $803 = $805;
                                    break;
                                case 'Maybe.none':
                                    var $815 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                                        var $816 = _m$pure$8;
                                        return $816;
                                    }))(Maybe$none);
                                    var $803 = $815;
                                    break;
                            };
                            return $803;
                        }));
                        var $800 = $801;
                        break;
                    case 'Maybe.some':
                        var $817 = Kind$Synth$load$cached$($799, _defs$2);
                        var $800 = $817;
                        break;
                };
                var $797 = $800;
                break;
            case 'List.nil':
                var $818 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $819 = _m$pure$4;
                    return $819;
                }))(Maybe$some$(_defs$2));
                var $797 = $818;
                break;
        };
        return $797;
    };
    const Kind$Synth$load$cached = x0 => x1 => Kind$Synth$load$cached$(x0, x1);

    function Parser$is_eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $821 = Parser$Reply$value$(_idx$1, _code$2, Bool$true);
            var $820 = $821;
        } else {
            var $822 = self.charCodeAt(0);
            var $823 = self.slice(1);
            var $824 = Parser$Reply$value$(_idx$1, _code$2, Bool$false);
            var $820 = $824;
        };
        return $820;
    };
    const Parser$is_eof = x0 => x1 => Parser$is_eof$(x0, x1);

    function Parser$(_V$1) {
        var $825 = null;
        return $825;
    };
    const Parser = x0 => Parser$(x0);

    function Parser$ErrorAt$new$(_idx$1, _code$2, _err$3) {
        var $826 = ({
            _: 'Parser.ErrorAt.new',
            'idx': _idx$1,
            'code': _code$2,
            'err': _err$3
        });
        return $826;
    };
    const Parser$ErrorAt$new = x0 => x1 => x2 => Parser$ErrorAt$new$(x0, x1, x2);
    const Nat$gtn = a0 => a1 => (a0 > a1);

    function Parser$ErrorAt$combine$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Maybe.some':
                var $828 = self.value;
                var self = _b$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $830 = self.value;
                        var self = $828;
                        switch (self._) {
                            case 'Parser.ErrorAt.new':
                                var $832 = self.idx;
                                var self = $830;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $834 = self.idx;
                                        var self = ($832 > $834);
                                        if (self) {
                                            var $836 = _a$1;
                                            var $835 = $836;
                                        } else {
                                            var $837 = _b$2;
                                            var $835 = $837;
                                        };
                                        var $833 = $835;
                                        break;
                                };
                                var $831 = $833;
                                break;
                        };
                        var $829 = $831;
                        break;
                    case 'Maybe.none':
                        var $838 = _a$1;
                        var $829 = $838;
                        break;
                };
                var $827 = $829;
                break;
            case 'Maybe.none':
                var $839 = _b$2;
                var $827 = $839;
                break;
        };
        return $827;
    };
    const Parser$ErrorAt$combine = x0 => x1 => Parser$ErrorAt$combine$(x0, x1);

    function Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5) {
        var Parser$first_of$go$ = (_pars$2, _err$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_pars$2, _err$3, _idx$4, _code$5]
        });
        var Parser$first_of$go = _pars$2 => _err$3 => _idx$4 => _code$5 => Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5);
        var arg = [_pars$2, _err$3, _idx$4, _code$5];
        while (true) {
            let [_pars$2, _err$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _pars$2;
                switch (self._) {
                    case 'List.cons':
                        var $840 = self.head;
                        var $841 = self.tail;
                        var _parsed$8 = $840(_idx$4)(_code$5);
                        var self = _parsed$8;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $843 = self.idx;
                                var $844 = self.code;
                                var $845 = self.err;
                                var _neo$12 = Maybe$some$(Parser$ErrorAt$new$($843, $844, $845));
                                var _err$13 = Parser$ErrorAt$combine$(_neo$12, _err$3);
                                var $846 = Parser$first_of$go$($841, _err$13, _idx$4, _code$5);
                                var $842 = $846;
                                break;
                            case 'Parser.Reply.value':
                                var $847 = self.idx;
                                var $848 = self.code;
                                var $849 = self.val;
                                var $850 = Parser$Reply$value$($847, $848, $849);
                                var $842 = $850;
                                break;
                        };
                        return $842;
                    case 'List.nil':
                        var self = _err$3;
                        switch (self._) {
                            case 'Maybe.some':
                                var $852 = self.value;
                                var self = $852;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $854 = self.idx;
                                        var $855 = self.code;
                                        var $856 = self.err;
                                        var $857 = Parser$Reply$error$($854, $855, $856);
                                        var $853 = $857;
                                        break;
                                };
                                var $851 = $853;
                                break;
                            case 'Maybe.none':
                                var $858 = Parser$Reply$error$(_idx$4, _code$5, "No parse.");
                                var $851 = $858;
                                break;
                        };
                        return $851;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$first_of$go = x0 => x1 => x2 => x3 => Parser$first_of$go$(x0, x1, x2, x3);

    function Parser$first_of$(_pars$2) {
        var $859 = Parser$first_of$go(_pars$2)(Maybe$none);
        return $859;
    };
    const Parser$first_of = x0 => Parser$first_of$(x0);

    function String$flatten$go$(_xs$1, _res$2) {
        var String$flatten$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                switch (self._) {
                    case 'List.cons':
                        var $860 = self.head;
                        var $861 = self.tail;
                        var $862 = String$flatten$go$($861, (_res$2 + $860));
                        return $862;
                    case 'List.nil':
                        var $863 = _res$2;
                        return $863;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);

    function String$flatten$(_xs$1) {
        var $864 = String$flatten$go$(_xs$1, "");
        return $864;
    };
    const String$flatten = x0 => String$flatten$(x0);

    function Parser$text$go$(_text$1, _idx$2, _code$3) {
        var self = _text$1;
        if (self.length === 0) {
            var $866 = Parser$Reply$value$(_idx$2, _code$3, Unit$new);
            var $865 = $866;
        } else {
            var $867 = self.charCodeAt(0);
            var $868 = self.slice(1);
            var self = _code$3;
            if (self.length === 0) {
                var _error$6 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found end of file.", List$nil))));
                var $870 = Parser$Reply$error$(_idx$2, _code$3, _error$6);
                var $869 = $870;
            } else {
                var $871 = self.charCodeAt(0);
                var $872 = self.slice(1);
                var self = ($867 === $871);
                if (self) {
                    var $874 = Parser$text$($868, Nat$succ$(_idx$2), $872);
                    var $873 = $874;
                } else {
                    var _error$8 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found \'", List$cons$(String$cons$($871, String$nil), List$cons$("\'.", List$nil))))));
                    var $875 = Parser$Reply$error$(_idx$2, _code$3, _error$8);
                    var $873 = $875;
                };
                var $869 = $873;
            };
            var $865 = $869;
        };
        return $865;
    };
    const Parser$text$go = x0 => x1 => x2 => Parser$text$go$(x0, x1, x2);

    function Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Parser$text$go$(_text$1, _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $877 = self.err;
                var $878 = Parser$Reply$error$(_idx$2, _code$3, $877);
                var $876 = $878;
                break;
            case 'Parser.Reply.value':
                var $879 = self.idx;
                var $880 = self.code;
                var $881 = self.val;
                var $882 = Parser$Reply$value$($879, $880, $881);
                var $876 = $882;
                break;
        };
        return $876;
    };
    const Parser$text = x0 => x1 => x2 => Parser$text$(x0, x1, x2);

    function Parser$eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $884 = Parser$Reply$value$(_idx$1, _code$2, Unit$new);
            var $883 = $884;
        } else {
            var $885 = self.charCodeAt(0);
            var $886 = self.slice(1);
            var $887 = Parser$Reply$error$(_idx$1, _code$2, "Expected end-of-file.");
            var $883 = $887;
        };
        return $883;
    };
    const Parser$eof = x0 => x1 => Parser$eof$(x0, x1);

    function Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6) {
        var Parser$until$go$ = (_until$2, _parse$3, _values$4, _idx$5, _code$6) => ({
            ctr: 'TCO',
            arg: [_until$2, _parse$3, _values$4, _idx$5, _code$6]
        });
        var Parser$until$go = _until$2 => _parse$3 => _values$4 => _idx$5 => _code$6 => Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6);
        var arg = [_until$2, _parse$3, _values$4, _idx$5, _code$6];
        while (true) {
            let [_until$2, _parse$3, _values$4, _idx$5, _code$6] = arg;
            var R = (() => {
                var _until_reply$7 = _until$2(_idx$5)(_code$6);
                var self = _until_reply$7;
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $889 = self.idx;
                        var $890 = self.code;
                        var $891 = Parser$Reply$value$($889, $890, List$reverse$(_values$4));
                        var $888 = $891;
                        break;
                    case 'Parser.Reply.error':
                        var _reply$11 = _parse$3(_idx$5)(_code$6);
                        var self = _reply$11;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $893 = self.idx;
                                var $894 = self.code;
                                var $895 = self.err;
                                var $896 = Parser$Reply$error$($893, $894, $895);
                                var $892 = $896;
                                break;
                            case 'Parser.Reply.value':
                                var $897 = self.idx;
                                var $898 = self.code;
                                var $899 = self.val;
                                var $900 = Parser$until$go$(_until$2, _parse$3, List$cons$($899, _values$4), $897, $898);
                                var $892 = $900;
                                break;
                        };
                        var $888 = $892;
                        break;
                };
                return $888;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$until$go = x0 => x1 => x2 => x3 => x4 => Parser$until$go$(x0, x1, x2, x3, x4);

    function Parser$until$(_until$2, _parse$3) {
        var $901 = Parser$until$go(_until$2)(_parse$3)(List$nil);
        return $901;
    };
    const Parser$until = x0 => x1 => Parser$until$(x0, x1);

    function Parser$one$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $903 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected end of file.");
            var $902 = $903;
        } else {
            var $904 = self.charCodeAt(0);
            var $905 = self.slice(1);
            var $906 = Parser$Reply$value$(Nat$succ$(_idx$1), $905, $904);
            var $902 = $906;
        };
        return $902;
    };
    const Parser$one = x0 => x1 => Parser$one$(x0, x1);
    const Kind$Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{9}"), List$cons$(Parser$text("\u{a}"), List$cons$((_idx$1 => _code$2 => {
        var self = Parser$text$("//", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $908 = self.idx;
                var $909 = self.code;
                var $910 = self.err;
                var $911 = Parser$Reply$error$($908, $909, $910);
                var $907 = $911;
                break;
            case 'Parser.Reply.value':
                var $912 = self.idx;
                var $913 = self.code;
                var _endl_or_eof$6 = Parser$first_of$(List$cons$(Parser$text("\u{a}"), List$cons$(Parser$eof, List$nil)));
                var self = Parser$until$(_endl_or_eof$6, Parser$one)($912)($913);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $915 = self.idx;
                        var $916 = self.code;
                        var $917 = self.err;
                        var $918 = Parser$Reply$error$($915, $916, $917);
                        var $914 = $918;
                        break;
                    case 'Parser.Reply.value':
                        var $919 = self.idx;
                        var $920 = self.code;
                        var $921 = Parser$Reply$value$($919, $920, Unit$new);
                        var $914 = $921;
                        break;
                };
                var $907 = $914;
                break;
        };
        return $907;
    }), List$nil))))));

    function Parser$get_index$(_idx$1, _code$2) {
        var $922 = Parser$Reply$value$(_idx$1, _code$2, _idx$1);
        return $922;
    };
    const Parser$get_index = x0 => x1 => Parser$get_index$(x0, x1);

    function Kind$Parser$init$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $924 = self.idx;
                var $925 = self.code;
                var $926 = self.err;
                var $927 = Parser$Reply$error$($924, $925, $926);
                var $923 = $927;
                break;
            case 'Parser.Reply.value':
                var $928 = self.idx;
                var $929 = self.code;
                var self = Parser$get_index$($928, $929);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $931 = self.idx;
                        var $932 = self.code;
                        var $933 = self.err;
                        var $934 = Parser$Reply$error$($931, $932, $933);
                        var $930 = $934;
                        break;
                    case 'Parser.Reply.value':
                        var $935 = self.idx;
                        var $936 = self.code;
                        var $937 = self.val;
                        var $938 = Parser$Reply$value$($935, $936, $937);
                        var $930 = $938;
                        break;
                };
                var $923 = $930;
                break;
        };
        return $923;
    };
    const Kind$Parser$init = x0 => x1 => Kind$Parser$init$(x0, x1);

    function Kind$Name$is_letter$(_chr$1) {
        var self = U16$btw$(65, _chr$1, 90);
        if (self) {
            var $940 = Bool$true;
            var $939 = $940;
        } else {
            var self = U16$btw$(97, _chr$1, 122);
            if (self) {
                var $942 = Bool$true;
                var $941 = $942;
            } else {
                var self = U16$btw$(48, _chr$1, 57);
                if (self) {
                    var $944 = Bool$true;
                    var $943 = $944;
                } else {
                    var self = (46 === _chr$1);
                    if (self) {
                        var $946 = Bool$true;
                        var $945 = $946;
                    } else {
                        var self = (95 === _chr$1);
                        if (self) {
                            var $948 = Bool$true;
                            var $947 = $948;
                        } else {
                            var self = (94 === _chr$1);
                            if (self) {
                                var $950 = Bool$true;
                                var $949 = $950;
                            } else {
                                var $951 = Bool$false;
                                var $949 = $951;
                            };
                            var $947 = $949;
                        };
                        var $945 = $947;
                    };
                    var $943 = $945;
                };
                var $941 = $943;
            };
            var $939 = $941;
        };
        return $939;
    };
    const Kind$Name$is_letter = x0 => Kind$Name$is_letter$(x0);

    function Kind$Parser$letter$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $953 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected eof.");
            var $952 = $953;
        } else {
            var $954 = self.charCodeAt(0);
            var $955 = self.slice(1);
            var self = Kind$Name$is_letter$($954);
            if (self) {
                var $957 = Parser$Reply$value$(Nat$succ$(_idx$1), $955, $954);
                var $956 = $957;
            } else {
                var $958 = Parser$Reply$error$(_idx$1, _code$2, "Expected letter.");
                var $956 = $958;
            };
            var $952 = $956;
        };
        return $952;
    };
    const Kind$Parser$letter = x0 => x1 => Kind$Parser$letter$(x0, x1);

    function Kind$Parser$name1$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $960 = self.idx;
                var $961 = self.code;
                var $962 = self.err;
                var $963 = Parser$Reply$error$($960, $961, $962);
                var $959 = $963;
                break;
            case 'Parser.Reply.value':
                var $964 = self.idx;
                var $965 = self.code;
                var self = Parser$many1$(Kind$Parser$letter, $964, $965);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $967 = self.idx;
                        var $968 = self.code;
                        var $969 = self.err;
                        var $970 = Parser$Reply$error$($967, $968, $969);
                        var $966 = $970;
                        break;
                    case 'Parser.Reply.value':
                        var $971 = self.idx;
                        var $972 = self.code;
                        var $973 = self.val;
                        var $974 = Parser$Reply$value$($971, $972, List$fold$($973, String$nil, String$cons));
                        var $966 = $974;
                        break;
                };
                var $959 = $966;
                break;
        };
        return $959;
    };
    const Kind$Parser$name1 = x0 => x1 => Kind$Parser$name1$(x0, x1);

    function Kind$Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Kind$Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $976 = self.idx;
                var $977 = self.code;
                var $978 = self.err;
                var $979 = Parser$Reply$error$($976, $977, $978);
                var $975 = $979;
                break;
            case 'Parser.Reply.value':
                var $980 = self.idx;
                var $981 = self.code;
                var $982 = Parser$text$(_text$1, $980, $981);
                var $975 = $982;
                break;
        };
        return $975;
    };
    const Kind$Parser$text = x0 => x1 => x2 => Kind$Parser$text$(x0, x1, x2);

    function Parser$until1$(_cond$2, _parser$3, _idx$4, _code$5) {
        var self = _parser$3(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $984 = self.idx;
                var $985 = self.code;
                var $986 = self.err;
                var $987 = Parser$Reply$error$($984, $985, $986);
                var $983 = $987;
                break;
            case 'Parser.Reply.value':
                var $988 = self.idx;
                var $989 = self.code;
                var $990 = self.val;
                var self = Parser$until$(_cond$2, _parser$3)($988)($989);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $992 = self.idx;
                        var $993 = self.code;
                        var $994 = self.err;
                        var $995 = Parser$Reply$error$($992, $993, $994);
                        var $991 = $995;
                        break;
                    case 'Parser.Reply.value':
                        var $996 = self.idx;
                        var $997 = self.code;
                        var $998 = self.val;
                        var $999 = Parser$Reply$value$($996, $997, List$cons$($990, $998));
                        var $991 = $999;
                        break;
                };
                var $983 = $991;
                break;
        };
        return $983;
    };
    const Parser$until1 = x0 => x1 => x2 => x3 => Parser$until1$(x0, x1, x2, x3);

    function Parser$maybe$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.value':
                var $1001 = self.idx;
                var $1002 = self.code;
                var $1003 = self.val;
                var $1004 = Parser$Reply$value$($1001, $1002, Maybe$some$($1003));
                var $1000 = $1004;
                break;
            case 'Parser.Reply.error':
                var $1005 = Parser$Reply$value$(_idx$3, _code$4, Maybe$none);
                var $1000 = $1005;
                break;
        };
        return $1000;
    };
    const Parser$maybe = x0 => x1 => x2 => Parser$maybe$(x0, x1, x2);

    function Kind$Parser$item$(_parser$2, _idx$3, _code$4) {
        var self = Kind$Parser$spaces(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1007 = self.idx;
                var $1008 = self.code;
                var $1009 = self.err;
                var $1010 = Parser$Reply$error$($1007, $1008, $1009);
                var $1006 = $1010;
                break;
            case 'Parser.Reply.value':
                var $1011 = self.idx;
                var $1012 = self.code;
                var self = _parser$2($1011)($1012);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1014 = self.idx;
                        var $1015 = self.code;
                        var $1016 = self.err;
                        var $1017 = Parser$Reply$error$($1014, $1015, $1016);
                        var $1013 = $1017;
                        break;
                    case 'Parser.Reply.value':
                        var $1018 = self.idx;
                        var $1019 = self.code;
                        var $1020 = self.val;
                        var self = Parser$maybe$(Kind$Parser$text(","), $1018, $1019);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1022 = self.idx;
                                var $1023 = self.code;
                                var $1024 = self.err;
                                var $1025 = Parser$Reply$error$($1022, $1023, $1024);
                                var $1021 = $1025;
                                break;
                            case 'Parser.Reply.value':
                                var $1026 = self.idx;
                                var $1027 = self.code;
                                var $1028 = Parser$Reply$value$($1026, $1027, $1020);
                                var $1021 = $1028;
                                break;
                        };
                        var $1013 = $1021;
                        break;
                };
                var $1006 = $1013;
                break;
        };
        return $1006;
    };
    const Kind$Parser$item = x0 => x1 => x2 => Kind$Parser$item$(x0, x1, x2);

    function Kind$Parser$name$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1030 = self.idx;
                var $1031 = self.code;
                var $1032 = self.err;
                var $1033 = Parser$Reply$error$($1030, $1031, $1032);
                var $1029 = $1033;
                break;
            case 'Parser.Reply.value':
                var $1034 = self.idx;
                var $1035 = self.code;
                var self = Parser$many$(Kind$Parser$letter)($1034)($1035);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1037 = self.idx;
                        var $1038 = self.code;
                        var $1039 = self.err;
                        var $1040 = Parser$Reply$error$($1037, $1038, $1039);
                        var $1036 = $1040;
                        break;
                    case 'Parser.Reply.value':
                        var $1041 = self.idx;
                        var $1042 = self.code;
                        var $1043 = self.val;
                        var $1044 = Parser$Reply$value$($1041, $1042, List$fold$($1043, String$nil, String$cons));
                        var $1036 = $1044;
                        break;
                };
                var $1029 = $1036;
                break;
        };
        return $1029;
    };
    const Kind$Parser$name = x0 => x1 => Kind$Parser$name$(x0, x1);

    function Kind$Parser$stop$(_from$1, _idx$2, _code$3) {
        var self = Parser$get_index$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1046 = self.idx;
                var $1047 = self.code;
                var $1048 = self.err;
                var $1049 = Parser$Reply$error$($1046, $1047, $1048);
                var $1045 = $1049;
                break;
            case 'Parser.Reply.value':
                var $1050 = self.idx;
                var $1051 = self.code;
                var $1052 = self.val;
                var _orig$7 = Pair$new$(_from$1, $1052);
                var $1053 = Parser$Reply$value$($1050, $1051, _orig$7);
                var $1045 = $1053;
                break;
        };
        return $1045;
    };
    const Kind$Parser$stop = x0 => x1 => x2 => Kind$Parser$stop$(x0, x1, x2);

    function Kind$Term$ori$(_orig$1, _expr$2) {
        var $1054 = ({
            _: 'Kind.Term.ori',
            'orig': _orig$1,
            'expr': _expr$2
        });
        return $1054;
    };
    const Kind$Term$ori = x0 => x1 => Kind$Term$ori$(x0, x1);

    function Kind$Parser$forall$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1056 = self.idx;
                var $1057 = self.code;
                var $1058 = self.err;
                var $1059 = Parser$Reply$error$($1056, $1057, $1058);
                var $1055 = $1059;
                break;
            case 'Parser.Reply.value':
                var $1060 = self.idx;
                var $1061 = self.code;
                var $1062 = self.val;
                var self = Kind$Parser$name$($1060, $1061);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1064 = self.idx;
                        var $1065 = self.code;
                        var $1066 = self.err;
                        var $1067 = Parser$Reply$error$($1064, $1065, $1066);
                        var $1063 = $1067;
                        break;
                    case 'Parser.Reply.value':
                        var $1068 = self.idx;
                        var $1069 = self.code;
                        var $1070 = self.val;
                        var self = Kind$Parser$binder$(":", $1068, $1069);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1072 = self.idx;
                                var $1073 = self.code;
                                var $1074 = self.err;
                                var $1075 = Parser$Reply$error$($1072, $1073, $1074);
                                var $1071 = $1075;
                                break;
                            case 'Parser.Reply.value':
                                var $1076 = self.idx;
                                var $1077 = self.code;
                                var $1078 = self.val;
                                var self = Parser$maybe$(Kind$Parser$text("->"), $1076, $1077);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1080 = self.idx;
                                        var $1081 = self.code;
                                        var $1082 = self.err;
                                        var $1083 = Parser$Reply$error$($1080, $1081, $1082);
                                        var $1079 = $1083;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1084 = self.idx;
                                        var $1085 = self.code;
                                        var self = Kind$Parser$term$($1084, $1085);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1087 = self.idx;
                                                var $1088 = self.code;
                                                var $1089 = self.err;
                                                var $1090 = Parser$Reply$error$($1087, $1088, $1089);
                                                var $1086 = $1090;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1091 = self.idx;
                                                var $1092 = self.code;
                                                var $1093 = self.val;
                                                var _term$18 = List$fold$($1078, $1093, (_x$18 => _t$19 => {
                                                    var self = _x$18;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $1096 = self.eras;
                                                            var $1097 = self.name;
                                                            var $1098 = self.term;
                                                            var $1099 = Kind$Term$all$($1096, "", $1097, $1098, (_s$23 => _x$24 => {
                                                                var $1100 = _t$19;
                                                                return $1100;
                                                            }));
                                                            var $1095 = $1099;
                                                            break;
                                                    };
                                                    return $1095;
                                                }));
                                                var self = Kind$Parser$stop$($1062, $1091, $1092);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1101 = self.idx;
                                                        var $1102 = self.code;
                                                        var $1103 = self.err;
                                                        var $1104 = Parser$Reply$error$($1101, $1102, $1103);
                                                        var $1094 = $1104;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1105 = self.idx;
                                                        var $1106 = self.code;
                                                        var $1107 = self.val;
                                                        var $1108 = Parser$Reply$value$($1105, $1106, (() => {
                                                            var self = _term$18;
                                                            switch (self._) {
                                                                case 'Kind.Term.all':
                                                                    var $1109 = self.eras;
                                                                    var $1110 = self.name;
                                                                    var $1111 = self.xtyp;
                                                                    var $1112 = self.body;
                                                                    var $1113 = Kind$Term$ori$($1107, Kind$Term$all$($1109, $1070, $1110, $1111, $1112));
                                                                    return $1113;
                                                                case 'Kind.Term.var':
                                                                case 'Kind.Term.ref':
                                                                case 'Kind.Term.typ':
                                                                case 'Kind.Term.lam':
                                                                case 'Kind.Term.app':
                                                                case 'Kind.Term.let':
                                                                case 'Kind.Term.def':
                                                                case 'Kind.Term.ann':
                                                                case 'Kind.Term.gol':
                                                                case 'Kind.Term.hol':
                                                                case 'Kind.Term.nat':
                                                                case 'Kind.Term.chr':
                                                                case 'Kind.Term.str':
                                                                case 'Kind.Term.cse':
                                                                case 'Kind.Term.ori':
                                                                    var $1114 = _term$18;
                                                                    return $1114;
                                                            };
                                                        })());
                                                        var $1094 = $1108;
                                                        break;
                                                };
                                                var $1086 = $1094;
                                                break;
                                        };
                                        var $1079 = $1086;
                                        break;
                                };
                                var $1071 = $1079;
                                break;
                        };
                        var $1063 = $1071;
                        break;
                };
                var $1055 = $1063;
                break;
        };
        return $1055;
    };
    const Kind$Parser$forall = x0 => x1 => Kind$Parser$forall$(x0, x1);

    function Kind$Parser$make_lambda$(_names$1, _body$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $1116 = self.head;
                var $1117 = self.tail;
                var $1118 = Kind$Term$lam$($1116, (_x$5 => {
                    var $1119 = Kind$Parser$make_lambda$($1117, _body$2);
                    return $1119;
                }));
                var $1115 = $1118;
                break;
            case 'List.nil':
                var $1120 = _body$2;
                var $1115 = $1120;
                break;
        };
        return $1115;
    };
    const Kind$Parser$make_lambda = x0 => x1 => Kind$Parser$make_lambda$(x0, x1);

    function Kind$Parser$lambda$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1122 = self.idx;
                var $1123 = self.code;
                var $1124 = self.err;
                var $1125 = Parser$Reply$error$($1122, $1123, $1124);
                var $1121 = $1125;
                break;
            case 'Parser.Reply.value':
                var $1126 = self.idx;
                var $1127 = self.code;
                var $1128 = self.val;
                var self = Kind$Parser$text$("(", $1126, $1127);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1130 = self.idx;
                        var $1131 = self.code;
                        var $1132 = self.err;
                        var $1133 = Parser$Reply$error$($1130, $1131, $1132);
                        var $1129 = $1133;
                        break;
                    case 'Parser.Reply.value':
                        var $1134 = self.idx;
                        var $1135 = self.code;
                        var self = Parser$until1$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$name1), $1134, $1135);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1137 = self.idx;
                                var $1138 = self.code;
                                var $1139 = self.err;
                                var $1140 = Parser$Reply$error$($1137, $1138, $1139);
                                var $1136 = $1140;
                                break;
                            case 'Parser.Reply.value':
                                var $1141 = self.idx;
                                var $1142 = self.code;
                                var $1143 = self.val;
                                var self = Kind$Parser$term$($1141, $1142);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1145 = self.idx;
                                        var $1146 = self.code;
                                        var $1147 = self.err;
                                        var $1148 = Parser$Reply$error$($1145, $1146, $1147);
                                        var $1144 = $1148;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1149 = self.idx;
                                        var $1150 = self.code;
                                        var $1151 = self.val;
                                        var self = Kind$Parser$stop$($1128, $1149, $1150);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1153 = self.idx;
                                                var $1154 = self.code;
                                                var $1155 = self.err;
                                                var $1156 = Parser$Reply$error$($1153, $1154, $1155);
                                                var $1152 = $1156;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1157 = self.idx;
                                                var $1158 = self.code;
                                                var $1159 = self.val;
                                                var _expr$18 = Kind$Parser$make_lambda$($1143, $1151);
                                                var $1160 = Parser$Reply$value$($1157, $1158, Kind$Term$ori$($1159, _expr$18));
                                                var $1152 = $1160;
                                                break;
                                        };
                                        var $1144 = $1152;
                                        break;
                                };
                                var $1136 = $1144;
                                break;
                        };
                        var $1129 = $1136;
                        break;
                };
                var $1121 = $1129;
                break;
        };
        return $1121;
    };
    const Kind$Parser$lambda = x0 => x1 => Kind$Parser$lambda$(x0, x1);

    function Kind$Parser$lambda$erased$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1162 = self.idx;
                var $1163 = self.code;
                var $1164 = self.err;
                var $1165 = Parser$Reply$error$($1162, $1163, $1164);
                var $1161 = $1165;
                break;
            case 'Parser.Reply.value':
                var $1166 = self.idx;
                var $1167 = self.code;
                var $1168 = self.val;
                var self = Kind$Parser$text$("<", $1166, $1167);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1170 = self.idx;
                        var $1171 = self.code;
                        var $1172 = self.err;
                        var $1173 = Parser$Reply$error$($1170, $1171, $1172);
                        var $1169 = $1173;
                        break;
                    case 'Parser.Reply.value':
                        var $1174 = self.idx;
                        var $1175 = self.code;
                        var self = Parser$until1$(Kind$Parser$text(">"), Kind$Parser$item(Kind$Parser$name1), $1174, $1175);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1177 = self.idx;
                                var $1178 = self.code;
                                var $1179 = self.err;
                                var $1180 = Parser$Reply$error$($1177, $1178, $1179);
                                var $1176 = $1180;
                                break;
                            case 'Parser.Reply.value':
                                var $1181 = self.idx;
                                var $1182 = self.code;
                                var $1183 = self.val;
                                var self = Kind$Parser$term$($1181, $1182);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1185 = self.idx;
                                        var $1186 = self.code;
                                        var $1187 = self.err;
                                        var $1188 = Parser$Reply$error$($1185, $1186, $1187);
                                        var $1184 = $1188;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1189 = self.idx;
                                        var $1190 = self.code;
                                        var $1191 = self.val;
                                        var self = Kind$Parser$stop$($1168, $1189, $1190);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1193 = self.idx;
                                                var $1194 = self.code;
                                                var $1195 = self.err;
                                                var $1196 = Parser$Reply$error$($1193, $1194, $1195);
                                                var $1192 = $1196;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1197 = self.idx;
                                                var $1198 = self.code;
                                                var $1199 = self.val;
                                                var _expr$18 = Kind$Parser$make_lambda$($1183, $1191);
                                                var $1200 = Parser$Reply$value$($1197, $1198, Kind$Term$ori$($1199, _expr$18));
                                                var $1192 = $1200;
                                                break;
                                        };
                                        var $1184 = $1192;
                                        break;
                                };
                                var $1176 = $1184;
                                break;
                        };
                        var $1169 = $1176;
                        break;
                };
                var $1161 = $1169;
                break;
        };
        return $1161;
    };
    const Kind$Parser$lambda$erased = x0 => x1 => Kind$Parser$lambda$erased$(x0, x1);

    function Kind$Parser$lambda$nameless$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1202 = self.idx;
                var $1203 = self.code;
                var $1204 = self.err;
                var $1205 = Parser$Reply$error$($1202, $1203, $1204);
                var $1201 = $1205;
                break;
            case 'Parser.Reply.value':
                var $1206 = self.idx;
                var $1207 = self.code;
                var $1208 = self.val;
                var self = Kind$Parser$text$("()", $1206, $1207);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1210 = self.idx;
                        var $1211 = self.code;
                        var $1212 = self.err;
                        var $1213 = Parser$Reply$error$($1210, $1211, $1212);
                        var $1209 = $1213;
                        break;
                    case 'Parser.Reply.value':
                        var $1214 = self.idx;
                        var $1215 = self.code;
                        var self = Kind$Parser$term$($1214, $1215);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1217 = self.idx;
                                var $1218 = self.code;
                                var $1219 = self.err;
                                var $1220 = Parser$Reply$error$($1217, $1218, $1219);
                                var $1216 = $1220;
                                break;
                            case 'Parser.Reply.value':
                                var $1221 = self.idx;
                                var $1222 = self.code;
                                var $1223 = self.val;
                                var self = Kind$Parser$stop$($1208, $1221, $1222);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1225 = self.idx;
                                        var $1226 = self.code;
                                        var $1227 = self.err;
                                        var $1228 = Parser$Reply$error$($1225, $1226, $1227);
                                        var $1224 = $1228;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1229 = self.idx;
                                        var $1230 = self.code;
                                        var $1231 = self.val;
                                        var _expr$15 = Kind$Term$lam$("", (_x$15 => {
                                            var $1233 = $1223;
                                            return $1233;
                                        }));
                                        var $1232 = Parser$Reply$value$($1229, $1230, Kind$Term$ori$($1231, _expr$15));
                                        var $1224 = $1232;
                                        break;
                                };
                                var $1216 = $1224;
                                break;
                        };
                        var $1209 = $1216;
                        break;
                };
                var $1201 = $1209;
                break;
        };
        return $1201;
    };
    const Kind$Parser$lambda$nameless = x0 => x1 => Kind$Parser$lambda$nameless$(x0, x1);

    function Kind$Parser$parenthesis$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1235 = self.idx;
                var $1236 = self.code;
                var $1237 = self.err;
                var $1238 = Parser$Reply$error$($1235, $1236, $1237);
                var $1234 = $1238;
                break;
            case 'Parser.Reply.value':
                var $1239 = self.idx;
                var $1240 = self.code;
                var $1241 = self.val;
                var self = Kind$Parser$text$("(", $1239, $1240);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1243 = self.idx;
                        var $1244 = self.code;
                        var $1245 = self.err;
                        var $1246 = Parser$Reply$error$($1243, $1244, $1245);
                        var $1242 = $1246;
                        break;
                    case 'Parser.Reply.value':
                        var $1247 = self.idx;
                        var $1248 = self.code;
                        var self = Kind$Parser$term$($1247, $1248);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1250 = self.idx;
                                var $1251 = self.code;
                                var $1252 = self.err;
                                var $1253 = Parser$Reply$error$($1250, $1251, $1252);
                                var $1249 = $1253;
                                break;
                            case 'Parser.Reply.value':
                                var $1254 = self.idx;
                                var $1255 = self.code;
                                var $1256 = self.val;
                                var self = Kind$Parser$text$(")", $1254, $1255);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1258 = self.idx;
                                        var $1259 = self.code;
                                        var $1260 = self.err;
                                        var $1261 = Parser$Reply$error$($1258, $1259, $1260);
                                        var $1257 = $1261;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1262 = self.idx;
                                        var $1263 = self.code;
                                        var self = Kind$Parser$stop$($1241, $1262, $1263);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1265 = self.idx;
                                                var $1266 = self.code;
                                                var $1267 = self.err;
                                                var $1268 = Parser$Reply$error$($1265, $1266, $1267);
                                                var $1264 = $1268;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1269 = self.idx;
                                                var $1270 = self.code;
                                                var $1271 = self.val;
                                                var $1272 = Parser$Reply$value$($1269, $1270, Kind$Term$ori$($1271, $1256));
                                                var $1264 = $1272;
                                                break;
                                        };
                                        var $1257 = $1264;
                                        break;
                                };
                                var $1249 = $1257;
                                break;
                        };
                        var $1242 = $1249;
                        break;
                };
                var $1234 = $1242;
                break;
        };
        return $1234;
    };
    const Kind$Parser$parenthesis = x0 => x1 => Kind$Parser$parenthesis$(x0, x1);

    function Kind$Term$hol$(_path$1) {
        var $1273 = ({
            _: 'Kind.Term.hol',
            'path': _path$1
        });
        return $1273;
    };
    const Kind$Term$hol = x0 => Kind$Term$hol$(x0);

    function Kind$Parser$letforrange$u32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1275 = self.idx;
                var $1276 = self.code;
                var $1277 = self.err;
                var $1278 = Parser$Reply$error$($1275, $1276, $1277);
                var $1274 = $1278;
                break;
            case 'Parser.Reply.value':
                var $1279 = self.idx;
                var $1280 = self.code;
                var $1281 = self.val;
                var self = Kind$Parser$text$("let ", $1279, $1280);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1283 = self.idx;
                        var $1284 = self.code;
                        var $1285 = self.err;
                        var $1286 = Parser$Reply$error$($1283, $1284, $1285);
                        var $1282 = $1286;
                        break;
                    case 'Parser.Reply.value':
                        var $1287 = self.idx;
                        var $1288 = self.code;
                        var self = Kind$Parser$name1$($1287, $1288);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1290 = self.idx;
                                var $1291 = self.code;
                                var $1292 = self.err;
                                var $1293 = Parser$Reply$error$($1290, $1291, $1292);
                                var $1289 = $1293;
                                break;
                            case 'Parser.Reply.value':
                                var $1294 = self.idx;
                                var $1295 = self.code;
                                var $1296 = self.val;
                                var self = Kind$Parser$text$("=", $1294, $1295);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1298 = self.idx;
                                        var $1299 = self.code;
                                        var $1300 = self.err;
                                        var $1301 = Parser$Reply$error$($1298, $1299, $1300);
                                        var $1297 = $1301;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1302 = self.idx;
                                        var $1303 = self.code;
                                        var self = Kind$Parser$text$("for ", $1302, $1303);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1305 = self.idx;
                                                var $1306 = self.code;
                                                var $1307 = self.err;
                                                var $1308 = Parser$Reply$error$($1305, $1306, $1307);
                                                var $1304 = $1308;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1309 = self.idx;
                                                var $1310 = self.code;
                                                var self = Kind$Parser$name1$($1309, $1310);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1312 = self.idx;
                                                        var $1313 = self.code;
                                                        var $1314 = self.err;
                                                        var $1315 = Parser$Reply$error$($1312, $1313, $1314);
                                                        var $1311 = $1315;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1316 = self.idx;
                                                        var $1317 = self.code;
                                                        var $1318 = self.val;
                                                        var self = Kind$Parser$text$(":", $1316, $1317);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1320 = self.idx;
                                                                var $1321 = self.code;
                                                                var $1322 = self.err;
                                                                var $1323 = Parser$Reply$error$($1320, $1321, $1322);
                                                                var $1319 = $1323;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1324 = self.idx;
                                                                var $1325 = self.code;
                                                                var self = Kind$Parser$text$("U32", $1324, $1325);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1327 = self.idx;
                                                                        var $1328 = self.code;
                                                                        var $1329 = self.err;
                                                                        var $1330 = Parser$Reply$error$($1327, $1328, $1329);
                                                                        var $1326 = $1330;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1331 = self.idx;
                                                                        var $1332 = self.code;
                                                                        var self = Kind$Parser$text$("from", $1331, $1332);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1334 = self.idx;
                                                                                var $1335 = self.code;
                                                                                var $1336 = self.err;
                                                                                var $1337 = Parser$Reply$error$($1334, $1335, $1336);
                                                                                var $1333 = $1337;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1338 = self.idx;
                                                                                var $1339 = self.code;
                                                                                var self = Kind$Parser$term$($1338, $1339);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1341 = self.idx;
                                                                                        var $1342 = self.code;
                                                                                        var $1343 = self.err;
                                                                                        var $1344 = Parser$Reply$error$($1341, $1342, $1343);
                                                                                        var $1340 = $1344;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1345 = self.idx;
                                                                                        var $1346 = self.code;
                                                                                        var $1347 = self.val;
                                                                                        var self = Kind$Parser$text$("to", $1345, $1346);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1349 = self.idx;
                                                                                                var $1350 = self.code;
                                                                                                var $1351 = self.err;
                                                                                                var $1352 = Parser$Reply$error$($1349, $1350, $1351);
                                                                                                var $1348 = $1352;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1353 = self.idx;
                                                                                                var $1354 = self.code;
                                                                                                var self = Kind$Parser$term$($1353, $1354);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1356 = self.idx;
                                                                                                        var $1357 = self.code;
                                                                                                        var $1358 = self.err;
                                                                                                        var $1359 = Parser$Reply$error$($1356, $1357, $1358);
                                                                                                        var $1355 = $1359;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1360 = self.idx;
                                                                                                        var $1361 = self.code;
                                                                                                        var $1362 = self.val;
                                                                                                        var self = Kind$Parser$text$(":", $1360, $1361);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1364 = self.idx;
                                                                                                                var $1365 = self.code;
                                                                                                                var $1366 = self.err;
                                                                                                                var $1367 = Parser$Reply$error$($1364, $1365, $1366);
                                                                                                                var $1363 = $1367;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1368 = self.idx;
                                                                                                                var $1369 = self.code;
                                                                                                                var self = Kind$Parser$term$($1368, $1369);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1371 = self.idx;
                                                                                                                        var $1372 = self.code;
                                                                                                                        var $1373 = self.err;
                                                                                                                        var $1374 = Parser$Reply$error$($1371, $1372, $1373);
                                                                                                                        var $1370 = $1374;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1375 = self.idx;
                                                                                                                        var $1376 = self.code;
                                                                                                                        var $1377 = self.val;
                                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1375, $1376);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1379 = self.idx;
                                                                                                                                var $1380 = self.code;
                                                                                                                                var $1381 = self.err;
                                                                                                                                var $1382 = Parser$Reply$error$($1379, $1380, $1381);
                                                                                                                                var $1378 = $1382;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1383 = self.idx;
                                                                                                                                var $1384 = self.code;
                                                                                                                                var self = Kind$Parser$term$($1383, $1384);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $1386 = self.idx;
                                                                                                                                        var $1387 = self.code;
                                                                                                                                        var $1388 = self.err;
                                                                                                                                        var $1389 = Parser$Reply$error$($1386, $1387, $1388);
                                                                                                                                        var $1385 = $1389;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $1390 = self.idx;
                                                                                                                                        var $1391 = self.code;
                                                                                                                                        var $1392 = self.val;
                                                                                                                                        var self = Kind$Parser$stop$($1281, $1390, $1391);
                                                                                                                                        switch (self._) {
                                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                                var $1394 = self.idx;
                                                                                                                                                var $1395 = self.code;
                                                                                                                                                var $1396 = self.err;
                                                                                                                                                var $1397 = Parser$Reply$error$($1394, $1395, $1396);
                                                                                                                                                var $1393 = $1397;
                                                                                                                                                break;
                                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                                var $1398 = self.idx;
                                                                                                                                                var $1399 = self.code;
                                                                                                                                                var $1400 = self.val;
                                                                                                                                                var _term$54 = Kind$Term$ref$("U32.for");
                                                                                                                                                var _term$55 = Kind$Term$app$(_term$54, Kind$Term$hol$(Bits$e));
                                                                                                                                                var _term$56 = Kind$Term$app$(_term$55, Kind$Term$ref$($1296));
                                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, $1347);
                                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, $1362);
                                                                                                                                                var _lamb$59 = Kind$Term$lam$($1318, (_e$59 => {
                                                                                                                                                    var $1402 = Kind$Term$lam$($1296, (_s$60 => {
                                                                                                                                                        var $1403 = $1377;
                                                                                                                                                        return $1403;
                                                                                                                                                    }));
                                                                                                                                                    return $1402;
                                                                                                                                                }));
                                                                                                                                                var _term$60 = Kind$Term$app$(_term$58, _lamb$59);
                                                                                                                                                var _term$61 = Kind$Term$let$($1296, _term$60, (_x$61 => {
                                                                                                                                                    var $1404 = $1392;
                                                                                                                                                    return $1404;
                                                                                                                                                }));
                                                                                                                                                var $1401 = Parser$Reply$value$($1398, $1399, Kind$Term$ori$($1400, _term$61));
                                                                                                                                                var $1393 = $1401;
                                                                                                                                                break;
                                                                                                                                        };
                                                                                                                                        var $1385 = $1393;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $1378 = $1385;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1370 = $1378;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1363 = $1370;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1355 = $1363;
                                                                                                        break;
                                                                                                };
                                                                                                var $1348 = $1355;
                                                                                                break;
                                                                                        };
                                                                                        var $1340 = $1348;
                                                                                        break;
                                                                                };
                                                                                var $1333 = $1340;
                                                                                break;
                                                                        };
                                                                        var $1326 = $1333;
                                                                        break;
                                                                };
                                                                var $1319 = $1326;
                                                                break;
                                                        };
                                                        var $1311 = $1319;
                                                        break;
                                                };
                                                var $1304 = $1311;
                                                break;
                                        };
                                        var $1297 = $1304;
                                        break;
                                };
                                var $1289 = $1297;
                                break;
                        };
                        var $1282 = $1289;
                        break;
                };
                var $1274 = $1282;
                break;
        };
        return $1274;
    };
    const Kind$Parser$letforrange$u32 = x0 => x1 => Kind$Parser$letforrange$u32$(x0, x1);

    function Kind$Parser$letforrange$u32$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1406 = self.idx;
                var $1407 = self.code;
                var $1408 = self.err;
                var $1409 = Parser$Reply$error$($1406, $1407, $1408);
                var $1405 = $1409;
                break;
            case 'Parser.Reply.value':
                var $1410 = self.idx;
                var $1411 = self.code;
                var $1412 = self.val;
                var self = Kind$Parser$text$("for ", $1410, $1411);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1414 = self.idx;
                        var $1415 = self.code;
                        var $1416 = self.err;
                        var $1417 = Parser$Reply$error$($1414, $1415, $1416);
                        var $1413 = $1417;
                        break;
                    case 'Parser.Reply.value':
                        var $1418 = self.idx;
                        var $1419 = self.code;
                        var self = Kind$Parser$name1$($1418, $1419);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1421 = self.idx;
                                var $1422 = self.code;
                                var $1423 = self.err;
                                var $1424 = Parser$Reply$error$($1421, $1422, $1423);
                                var $1420 = $1424;
                                break;
                            case 'Parser.Reply.value':
                                var $1425 = self.idx;
                                var $1426 = self.code;
                                var $1427 = self.val;
                                var self = Kind$Parser$text$(":", $1425, $1426);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1429 = self.idx;
                                        var $1430 = self.code;
                                        var $1431 = self.err;
                                        var $1432 = Parser$Reply$error$($1429, $1430, $1431);
                                        var $1428 = $1432;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1433 = self.idx;
                                        var $1434 = self.code;
                                        var self = Kind$Parser$text$("U32", $1433, $1434);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1436 = self.idx;
                                                var $1437 = self.code;
                                                var $1438 = self.err;
                                                var $1439 = Parser$Reply$error$($1436, $1437, $1438);
                                                var $1435 = $1439;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1440 = self.idx;
                                                var $1441 = self.code;
                                                var self = Kind$Parser$text$("from", $1440, $1441);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1443 = self.idx;
                                                        var $1444 = self.code;
                                                        var $1445 = self.err;
                                                        var $1446 = Parser$Reply$error$($1443, $1444, $1445);
                                                        var $1442 = $1446;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1447 = self.idx;
                                                        var $1448 = self.code;
                                                        var self = Kind$Parser$term$($1447, $1448);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1450 = self.idx;
                                                                var $1451 = self.code;
                                                                var $1452 = self.err;
                                                                var $1453 = Parser$Reply$error$($1450, $1451, $1452);
                                                                var $1449 = $1453;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1454 = self.idx;
                                                                var $1455 = self.code;
                                                                var $1456 = self.val;
                                                                var self = Kind$Parser$text$("to", $1454, $1455);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1458 = self.idx;
                                                                        var $1459 = self.code;
                                                                        var $1460 = self.err;
                                                                        var $1461 = Parser$Reply$error$($1458, $1459, $1460);
                                                                        var $1457 = $1461;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1462 = self.idx;
                                                                        var $1463 = self.code;
                                                                        var self = Kind$Parser$term$($1462, $1463);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1465 = self.idx;
                                                                                var $1466 = self.code;
                                                                                var $1467 = self.err;
                                                                                var $1468 = Parser$Reply$error$($1465, $1466, $1467);
                                                                                var $1464 = $1468;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1469 = self.idx;
                                                                                var $1470 = self.code;
                                                                                var $1471 = self.val;
                                                                                var self = Kind$Parser$text$("with ", $1469, $1470);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1473 = self.idx;
                                                                                        var $1474 = self.code;
                                                                                        var $1475 = self.err;
                                                                                        var $1476 = Parser$Reply$error$($1473, $1474, $1475);
                                                                                        var $1472 = $1476;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1477 = self.idx;
                                                                                        var $1478 = self.code;
                                                                                        var self = Kind$Parser$name1$($1477, $1478);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1480 = self.idx;
                                                                                                var $1481 = self.code;
                                                                                                var $1482 = self.err;
                                                                                                var $1483 = Parser$Reply$error$($1480, $1481, $1482);
                                                                                                var $1479 = $1483;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1484 = self.idx;
                                                                                                var $1485 = self.code;
                                                                                                var $1486 = self.val;
                                                                                                var self = Kind$Parser$text$(":", $1484, $1485);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1488 = self.idx;
                                                                                                        var $1489 = self.code;
                                                                                                        var $1490 = self.err;
                                                                                                        var $1491 = Parser$Reply$error$($1488, $1489, $1490);
                                                                                                        var $1487 = $1491;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1492 = self.idx;
                                                                                                        var $1493 = self.code;
                                                                                                        var self = Kind$Parser$term$($1492, $1493);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1495 = self.idx;
                                                                                                                var $1496 = self.code;
                                                                                                                var $1497 = self.err;
                                                                                                                var $1498 = Parser$Reply$error$($1495, $1496, $1497);
                                                                                                                var $1494 = $1498;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1499 = self.idx;
                                                                                                                var $1500 = self.code;
                                                                                                                var $1501 = self.val;
                                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1499, $1500);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1503 = self.idx;
                                                                                                                        var $1504 = self.code;
                                                                                                                        var $1505 = self.err;
                                                                                                                        var $1506 = Parser$Reply$error$($1503, $1504, $1505);
                                                                                                                        var $1502 = $1506;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1507 = self.idx;
                                                                                                                        var $1508 = self.code;
                                                                                                                        var self = Kind$Parser$term$($1507, $1508);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1510 = self.idx;
                                                                                                                                var $1511 = self.code;
                                                                                                                                var $1512 = self.err;
                                                                                                                                var $1513 = Parser$Reply$error$($1510, $1511, $1512);
                                                                                                                                var $1509 = $1513;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1514 = self.idx;
                                                                                                                                var $1515 = self.code;
                                                                                                                                var $1516 = self.val;
                                                                                                                                var self = Kind$Parser$stop$($1412, $1514, $1515);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $1518 = self.idx;
                                                                                                                                        var $1519 = self.code;
                                                                                                                                        var $1520 = self.err;
                                                                                                                                        var $1521 = Parser$Reply$error$($1518, $1519, $1520);
                                                                                                                                        var $1517 = $1521;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $1522 = self.idx;
                                                                                                                                        var $1523 = self.code;
                                                                                                                                        var $1524 = self.val;
                                                                                                                                        var _term$51 = Kind$Term$ref$("U32.for");
                                                                                                                                        var _term$52 = Kind$Term$app$(_term$51, Kind$Term$hol$(Bits$e));
                                                                                                                                        var _term$53 = Kind$Term$app$(_term$52, Kind$Term$ref$($1486));
                                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, $1456);
                                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, $1471);
                                                                                                                                        var _lamb$56 = Kind$Term$lam$($1427, (_e$56 => {
                                                                                                                                            var $1526 = Kind$Term$lam$($1486, (_s$57 => {
                                                                                                                                                var $1527 = $1501;
                                                                                                                                                return $1527;
                                                                                                                                            }));
                                                                                                                                            return $1526;
                                                                                                                                        }));
                                                                                                                                        var _term$57 = Kind$Term$app$(_term$55, _lamb$56);
                                                                                                                                        var _term$58 = Kind$Term$let$($1486, _term$57, (_x$58 => {
                                                                                                                                            var $1528 = $1516;
                                                                                                                                            return $1528;
                                                                                                                                        }));
                                                                                                                                        var $1525 = Parser$Reply$value$($1522, $1523, Kind$Term$ori$($1524, _term$58));
                                                                                                                                        var $1517 = $1525;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $1509 = $1517;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1502 = $1509;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1494 = $1502;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1487 = $1494;
                                                                                                        break;
                                                                                                };
                                                                                                var $1479 = $1487;
                                                                                                break;
                                                                                        };
                                                                                        var $1472 = $1479;
                                                                                        break;
                                                                                };
                                                                                var $1464 = $1472;
                                                                                break;
                                                                        };
                                                                        var $1457 = $1464;
                                                                        break;
                                                                };
                                                                var $1449 = $1457;
                                                                break;
                                                        };
                                                        var $1442 = $1449;
                                                        break;
                                                };
                                                var $1435 = $1442;
                                                break;
                                        };
                                        var $1428 = $1435;
                                        break;
                                };
                                var $1420 = $1428;
                                break;
                        };
                        var $1413 = $1420;
                        break;
                };
                var $1405 = $1413;
                break;
        };
        return $1405;
    };
    const Kind$Parser$letforrange$u32$with = x0 => x1 => Kind$Parser$letforrange$u32$with$(x0, x1);

    function Kind$Parser$letforrange$nat$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1530 = self.idx;
                var $1531 = self.code;
                var $1532 = self.err;
                var $1533 = Parser$Reply$error$($1530, $1531, $1532);
                var $1529 = $1533;
                break;
            case 'Parser.Reply.value':
                var $1534 = self.idx;
                var $1535 = self.code;
                var $1536 = self.val;
                var self = Kind$Parser$text$("let ", $1534, $1535);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1538 = self.idx;
                        var $1539 = self.code;
                        var $1540 = self.err;
                        var $1541 = Parser$Reply$error$($1538, $1539, $1540);
                        var $1537 = $1541;
                        break;
                    case 'Parser.Reply.value':
                        var $1542 = self.idx;
                        var $1543 = self.code;
                        var self = Kind$Parser$name1$($1542, $1543);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1545 = self.idx;
                                var $1546 = self.code;
                                var $1547 = self.err;
                                var $1548 = Parser$Reply$error$($1545, $1546, $1547);
                                var $1544 = $1548;
                                break;
                            case 'Parser.Reply.value':
                                var $1549 = self.idx;
                                var $1550 = self.code;
                                var $1551 = self.val;
                                var self = Kind$Parser$text$("=", $1549, $1550);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1553 = self.idx;
                                        var $1554 = self.code;
                                        var $1555 = self.err;
                                        var $1556 = Parser$Reply$error$($1553, $1554, $1555);
                                        var $1552 = $1556;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1557 = self.idx;
                                        var $1558 = self.code;
                                        var self = Kind$Parser$text$("for ", $1557, $1558);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1560 = self.idx;
                                                var $1561 = self.code;
                                                var $1562 = self.err;
                                                var $1563 = Parser$Reply$error$($1560, $1561, $1562);
                                                var $1559 = $1563;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1564 = self.idx;
                                                var $1565 = self.code;
                                                var self = Kind$Parser$name1$($1564, $1565);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1567 = self.idx;
                                                        var $1568 = self.code;
                                                        var $1569 = self.err;
                                                        var $1570 = Parser$Reply$error$($1567, $1568, $1569);
                                                        var $1566 = $1570;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1571 = self.idx;
                                                        var $1572 = self.code;
                                                        var $1573 = self.val;
                                                        var self = Kind$Parser$text$("from", $1571, $1572);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1575 = self.idx;
                                                                var $1576 = self.code;
                                                                var $1577 = self.err;
                                                                var $1578 = Parser$Reply$error$($1575, $1576, $1577);
                                                                var $1574 = $1578;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1579 = self.idx;
                                                                var $1580 = self.code;
                                                                var self = Kind$Parser$term$($1579, $1580);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1582 = self.idx;
                                                                        var $1583 = self.code;
                                                                        var $1584 = self.err;
                                                                        var $1585 = Parser$Reply$error$($1582, $1583, $1584);
                                                                        var $1581 = $1585;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1586 = self.idx;
                                                                        var $1587 = self.code;
                                                                        var $1588 = self.val;
                                                                        var self = Kind$Parser$text$("to", $1586, $1587);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1590 = self.idx;
                                                                                var $1591 = self.code;
                                                                                var $1592 = self.err;
                                                                                var $1593 = Parser$Reply$error$($1590, $1591, $1592);
                                                                                var $1589 = $1593;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1594 = self.idx;
                                                                                var $1595 = self.code;
                                                                                var self = Kind$Parser$term$($1594, $1595);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1597 = self.idx;
                                                                                        var $1598 = self.code;
                                                                                        var $1599 = self.err;
                                                                                        var $1600 = Parser$Reply$error$($1597, $1598, $1599);
                                                                                        var $1596 = $1600;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1601 = self.idx;
                                                                                        var $1602 = self.code;
                                                                                        var $1603 = self.val;
                                                                                        var self = Kind$Parser$text$(":", $1601, $1602);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1605 = self.idx;
                                                                                                var $1606 = self.code;
                                                                                                var $1607 = self.err;
                                                                                                var $1608 = Parser$Reply$error$($1605, $1606, $1607);
                                                                                                var $1604 = $1608;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1609 = self.idx;
                                                                                                var $1610 = self.code;
                                                                                                var self = Kind$Parser$term$($1609, $1610);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1612 = self.idx;
                                                                                                        var $1613 = self.code;
                                                                                                        var $1614 = self.err;
                                                                                                        var $1615 = Parser$Reply$error$($1612, $1613, $1614);
                                                                                                        var $1611 = $1615;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1616 = self.idx;
                                                                                                        var $1617 = self.code;
                                                                                                        var $1618 = self.val;
                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1616, $1617);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1620 = self.idx;
                                                                                                                var $1621 = self.code;
                                                                                                                var $1622 = self.err;
                                                                                                                var $1623 = Parser$Reply$error$($1620, $1621, $1622);
                                                                                                                var $1619 = $1623;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1624 = self.idx;
                                                                                                                var $1625 = self.code;
                                                                                                                var self = Kind$Parser$term$($1624, $1625);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1627 = self.idx;
                                                                                                                        var $1628 = self.code;
                                                                                                                        var $1629 = self.err;
                                                                                                                        var $1630 = Parser$Reply$error$($1627, $1628, $1629);
                                                                                                                        var $1626 = $1630;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1631 = self.idx;
                                                                                                                        var $1632 = self.code;
                                                                                                                        var $1633 = self.val;
                                                                                                                        var self = Kind$Parser$stop$($1536, $1631, $1632);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1635 = self.idx;
                                                                                                                                var $1636 = self.code;
                                                                                                                                var $1637 = self.err;
                                                                                                                                var $1638 = Parser$Reply$error$($1635, $1636, $1637);
                                                                                                                                var $1634 = $1638;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1639 = self.idx;
                                                                                                                                var $1640 = self.code;
                                                                                                                                var $1641 = self.val;
                                                                                                                                var _term$48 = Kind$Term$ref$("Nat.for");
                                                                                                                                var _term$49 = Kind$Term$app$(_term$48, Kind$Term$hol$(Bits$e));
                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$ref$($1551));
                                                                                                                                var _term$51 = Kind$Term$app$(_term$50, $1588);
                                                                                                                                var _term$52 = Kind$Term$app$(_term$51, $1603);
                                                                                                                                var _lamb$53 = Kind$Term$lam$($1573, (_e$53 => {
                                                                                                                                    var $1643 = Kind$Term$lam$($1551, (_s$54 => {
                                                                                                                                        var $1644 = $1618;
                                                                                                                                        return $1644;
                                                                                                                                    }));
                                                                                                                                    return $1643;
                                                                                                                                }));
                                                                                                                                var _term$54 = Kind$Term$app$(_term$52, _lamb$53);
                                                                                                                                var _term$55 = Kind$Term$let$($1551, _term$54, (_x$55 => {
                                                                                                                                    var $1645 = $1633;
                                                                                                                                    return $1645;
                                                                                                                                }));
                                                                                                                                var $1642 = Parser$Reply$value$($1639, $1640, Kind$Term$ori$($1641, _term$55));
                                                                                                                                var $1634 = $1642;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1626 = $1634;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1619 = $1626;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1611 = $1619;
                                                                                                        break;
                                                                                                };
                                                                                                var $1604 = $1611;
                                                                                                break;
                                                                                        };
                                                                                        var $1596 = $1604;
                                                                                        break;
                                                                                };
                                                                                var $1589 = $1596;
                                                                                break;
                                                                        };
                                                                        var $1581 = $1589;
                                                                        break;
                                                                };
                                                                var $1574 = $1581;
                                                                break;
                                                        };
                                                        var $1566 = $1574;
                                                        break;
                                                };
                                                var $1559 = $1566;
                                                break;
                                        };
                                        var $1552 = $1559;
                                        break;
                                };
                                var $1544 = $1552;
                                break;
                        };
                        var $1537 = $1544;
                        break;
                };
                var $1529 = $1537;
                break;
        };
        return $1529;
    };
    const Kind$Parser$letforrange$nat = x0 => x1 => Kind$Parser$letforrange$nat$(x0, x1);

    function Kind$Parser$letforrange$nat$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1647 = self.idx;
                var $1648 = self.code;
                var $1649 = self.err;
                var $1650 = Parser$Reply$error$($1647, $1648, $1649);
                var $1646 = $1650;
                break;
            case 'Parser.Reply.value':
                var $1651 = self.idx;
                var $1652 = self.code;
                var $1653 = self.val;
                var self = Kind$Parser$text$("for ", $1651, $1652);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1655 = self.idx;
                        var $1656 = self.code;
                        var $1657 = self.err;
                        var $1658 = Parser$Reply$error$($1655, $1656, $1657);
                        var $1654 = $1658;
                        break;
                    case 'Parser.Reply.value':
                        var $1659 = self.idx;
                        var $1660 = self.code;
                        var self = Kind$Parser$name1$($1659, $1660);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1662 = self.idx;
                                var $1663 = self.code;
                                var $1664 = self.err;
                                var $1665 = Parser$Reply$error$($1662, $1663, $1664);
                                var $1661 = $1665;
                                break;
                            case 'Parser.Reply.value':
                                var $1666 = self.idx;
                                var $1667 = self.code;
                                var $1668 = self.val;
                                var self = Kind$Parser$text$("from", $1666, $1667);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1670 = self.idx;
                                        var $1671 = self.code;
                                        var $1672 = self.err;
                                        var $1673 = Parser$Reply$error$($1670, $1671, $1672);
                                        var $1669 = $1673;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1674 = self.idx;
                                        var $1675 = self.code;
                                        var self = Kind$Parser$term$($1674, $1675);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1677 = self.idx;
                                                var $1678 = self.code;
                                                var $1679 = self.err;
                                                var $1680 = Parser$Reply$error$($1677, $1678, $1679);
                                                var $1676 = $1680;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1681 = self.idx;
                                                var $1682 = self.code;
                                                var $1683 = self.val;
                                                var self = Kind$Parser$text$("to", $1681, $1682);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1685 = self.idx;
                                                        var $1686 = self.code;
                                                        var $1687 = self.err;
                                                        var $1688 = Parser$Reply$error$($1685, $1686, $1687);
                                                        var $1684 = $1688;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1689 = self.idx;
                                                        var $1690 = self.code;
                                                        var self = Kind$Parser$term$($1689, $1690);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1692 = self.idx;
                                                                var $1693 = self.code;
                                                                var $1694 = self.err;
                                                                var $1695 = Parser$Reply$error$($1692, $1693, $1694);
                                                                var $1691 = $1695;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1696 = self.idx;
                                                                var $1697 = self.code;
                                                                var $1698 = self.val;
                                                                var self = Kind$Parser$text$("with ", $1696, $1697);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1700 = self.idx;
                                                                        var $1701 = self.code;
                                                                        var $1702 = self.err;
                                                                        var $1703 = Parser$Reply$error$($1700, $1701, $1702);
                                                                        var $1699 = $1703;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1704 = self.idx;
                                                                        var $1705 = self.code;
                                                                        var self = Kind$Parser$name1$($1704, $1705);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1707 = self.idx;
                                                                                var $1708 = self.code;
                                                                                var $1709 = self.err;
                                                                                var $1710 = Parser$Reply$error$($1707, $1708, $1709);
                                                                                var $1706 = $1710;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1711 = self.idx;
                                                                                var $1712 = self.code;
                                                                                var $1713 = self.val;
                                                                                var self = Kind$Parser$text$(":", $1711, $1712);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1715 = self.idx;
                                                                                        var $1716 = self.code;
                                                                                        var $1717 = self.err;
                                                                                        var $1718 = Parser$Reply$error$($1715, $1716, $1717);
                                                                                        var $1714 = $1718;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1719 = self.idx;
                                                                                        var $1720 = self.code;
                                                                                        var self = Kind$Parser$term$($1719, $1720);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1722 = self.idx;
                                                                                                var $1723 = self.code;
                                                                                                var $1724 = self.err;
                                                                                                var $1725 = Parser$Reply$error$($1722, $1723, $1724);
                                                                                                var $1721 = $1725;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1726 = self.idx;
                                                                                                var $1727 = self.code;
                                                                                                var $1728 = self.val;
                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1726, $1727);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1730 = self.idx;
                                                                                                        var $1731 = self.code;
                                                                                                        var $1732 = self.err;
                                                                                                        var $1733 = Parser$Reply$error$($1730, $1731, $1732);
                                                                                                        var $1729 = $1733;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1734 = self.idx;
                                                                                                        var $1735 = self.code;
                                                                                                        var self = Kind$Parser$term$($1734, $1735);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1737 = self.idx;
                                                                                                                var $1738 = self.code;
                                                                                                                var $1739 = self.err;
                                                                                                                var $1740 = Parser$Reply$error$($1737, $1738, $1739);
                                                                                                                var $1736 = $1740;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1741 = self.idx;
                                                                                                                var $1742 = self.code;
                                                                                                                var $1743 = self.val;
                                                                                                                var self = Kind$Parser$stop$($1653, $1741, $1742);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1745 = self.idx;
                                                                                                                        var $1746 = self.code;
                                                                                                                        var $1747 = self.err;
                                                                                                                        var $1748 = Parser$Reply$error$($1745, $1746, $1747);
                                                                                                                        var $1744 = $1748;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1749 = self.idx;
                                                                                                                        var $1750 = self.code;
                                                                                                                        var $1751 = self.val;
                                                                                                                        var _term$45 = Kind$Term$ref$("Nat.for");
                                                                                                                        var _term$46 = Kind$Term$app$(_term$45, Kind$Term$hol$(Bits$e));
                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$ref$($1713));
                                                                                                                        var _term$48 = Kind$Term$app$(_term$47, $1683);
                                                                                                                        var _term$49 = Kind$Term$app$(_term$48, $1698);
                                                                                                                        var _lamb$50 = Kind$Term$lam$($1668, (_e$50 => {
                                                                                                                            var $1753 = Kind$Term$lam$($1713, (_s$51 => {
                                                                                                                                var $1754 = $1728;
                                                                                                                                return $1754;
                                                                                                                            }));
                                                                                                                            return $1753;
                                                                                                                        }));
                                                                                                                        var _term$51 = Kind$Term$app$(_term$49, _lamb$50);
                                                                                                                        var _term$52 = Kind$Term$let$($1713, _term$51, (_x$52 => {
                                                                                                                            var $1755 = $1743;
                                                                                                                            return $1755;
                                                                                                                        }));
                                                                                                                        var $1752 = Parser$Reply$value$($1749, $1750, Kind$Term$ori$($1751, _term$52));
                                                                                                                        var $1744 = $1752;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1736 = $1744;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1729 = $1736;
                                                                                                        break;
                                                                                                };
                                                                                                var $1721 = $1729;
                                                                                                break;
                                                                                        };
                                                                                        var $1714 = $1721;
                                                                                        break;
                                                                                };
                                                                                var $1706 = $1714;
                                                                                break;
                                                                        };
                                                                        var $1699 = $1706;
                                                                        break;
                                                                };
                                                                var $1691 = $1699;
                                                                break;
                                                        };
                                                        var $1684 = $1691;
                                                        break;
                                                };
                                                var $1676 = $1684;
                                                break;
                                        };
                                        var $1669 = $1676;
                                        break;
                                };
                                var $1661 = $1669;
                                break;
                        };
                        var $1654 = $1661;
                        break;
                };
                var $1646 = $1654;
                break;
        };
        return $1646;
    };
    const Kind$Parser$letforrange$nat$with = x0 => x1 => Kind$Parser$letforrange$nat$with$(x0, x1);

    function Kind$Parser$letforin$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1757 = self.idx;
                var $1758 = self.code;
                var $1759 = self.err;
                var $1760 = Parser$Reply$error$($1757, $1758, $1759);
                var $1756 = $1760;
                break;
            case 'Parser.Reply.value':
                var $1761 = self.idx;
                var $1762 = self.code;
                var $1763 = self.val;
                var self = Kind$Parser$text$("let ", $1761, $1762);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1765 = self.idx;
                        var $1766 = self.code;
                        var $1767 = self.err;
                        var $1768 = Parser$Reply$error$($1765, $1766, $1767);
                        var $1764 = $1768;
                        break;
                    case 'Parser.Reply.value':
                        var $1769 = self.idx;
                        var $1770 = self.code;
                        var self = Kind$Parser$name1$($1769, $1770);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1772 = self.idx;
                                var $1773 = self.code;
                                var $1774 = self.err;
                                var $1775 = Parser$Reply$error$($1772, $1773, $1774);
                                var $1771 = $1775;
                                break;
                            case 'Parser.Reply.value':
                                var $1776 = self.idx;
                                var $1777 = self.code;
                                var $1778 = self.val;
                                var self = Kind$Parser$text$("=", $1776, $1777);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1780 = self.idx;
                                        var $1781 = self.code;
                                        var $1782 = self.err;
                                        var $1783 = Parser$Reply$error$($1780, $1781, $1782);
                                        var $1779 = $1783;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1784 = self.idx;
                                        var $1785 = self.code;
                                        var self = Kind$Parser$text$("for ", $1784, $1785);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1787 = self.idx;
                                                var $1788 = self.code;
                                                var $1789 = self.err;
                                                var $1790 = Parser$Reply$error$($1787, $1788, $1789);
                                                var $1786 = $1790;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1791 = self.idx;
                                                var $1792 = self.code;
                                                var self = Kind$Parser$name1$($1791, $1792);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1794 = self.idx;
                                                        var $1795 = self.code;
                                                        var $1796 = self.err;
                                                        var $1797 = Parser$Reply$error$($1794, $1795, $1796);
                                                        var $1793 = $1797;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1798 = self.idx;
                                                        var $1799 = self.code;
                                                        var $1800 = self.val;
                                                        var self = Kind$Parser$text$("in", $1798, $1799);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1802 = self.idx;
                                                                var $1803 = self.code;
                                                                var $1804 = self.err;
                                                                var $1805 = Parser$Reply$error$($1802, $1803, $1804);
                                                                var $1801 = $1805;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1806 = self.idx;
                                                                var $1807 = self.code;
                                                                var self = Kind$Parser$term$($1806, $1807);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1809 = self.idx;
                                                                        var $1810 = self.code;
                                                                        var $1811 = self.err;
                                                                        var $1812 = Parser$Reply$error$($1809, $1810, $1811);
                                                                        var $1808 = $1812;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1813 = self.idx;
                                                                        var $1814 = self.code;
                                                                        var $1815 = self.val;
                                                                        var self = Kind$Parser$text$(":", $1813, $1814);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1817 = self.idx;
                                                                                var $1818 = self.code;
                                                                                var $1819 = self.err;
                                                                                var $1820 = Parser$Reply$error$($1817, $1818, $1819);
                                                                                var $1816 = $1820;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1821 = self.idx;
                                                                                var $1822 = self.code;
                                                                                var self = Kind$Parser$term$($1821, $1822);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1824 = self.idx;
                                                                                        var $1825 = self.code;
                                                                                        var $1826 = self.err;
                                                                                        var $1827 = Parser$Reply$error$($1824, $1825, $1826);
                                                                                        var $1823 = $1827;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1828 = self.idx;
                                                                                        var $1829 = self.code;
                                                                                        var $1830 = self.val;
                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1828, $1829);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1832 = self.idx;
                                                                                                var $1833 = self.code;
                                                                                                var $1834 = self.err;
                                                                                                var $1835 = Parser$Reply$error$($1832, $1833, $1834);
                                                                                                var $1831 = $1835;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1836 = self.idx;
                                                                                                var $1837 = self.code;
                                                                                                var self = Kind$Parser$term$($1836, $1837);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1839 = self.idx;
                                                                                                        var $1840 = self.code;
                                                                                                        var $1841 = self.err;
                                                                                                        var $1842 = Parser$Reply$error$($1839, $1840, $1841);
                                                                                                        var $1838 = $1842;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1843 = self.idx;
                                                                                                        var $1844 = self.code;
                                                                                                        var $1845 = self.val;
                                                                                                        var self = Kind$Parser$stop$($1763, $1843, $1844);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1847 = self.idx;
                                                                                                                var $1848 = self.code;
                                                                                                                var $1849 = self.err;
                                                                                                                var $1850 = Parser$Reply$error$($1847, $1848, $1849);
                                                                                                                var $1846 = $1850;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1851 = self.idx;
                                                                                                                var $1852 = self.code;
                                                                                                                var $1853 = self.val;
                                                                                                                var _term$42 = Kind$Term$ref$("List.for");
                                                                                                                var _term$43 = Kind$Term$app$(_term$42, Kind$Term$hol$(Bits$e));
                                                                                                                var _term$44 = Kind$Term$app$(_term$43, $1815);
                                                                                                                var _term$45 = Kind$Term$app$(_term$44, Kind$Term$hol$(Bits$e));
                                                                                                                var _term$46 = Kind$Term$app$(_term$45, Kind$Term$ref$($1778));
                                                                                                                var _lamb$47 = Kind$Term$lam$($1800, (_i$47 => {
                                                                                                                    var $1855 = Kind$Term$lam$($1778, (_x$48 => {
                                                                                                                        var $1856 = $1830;
                                                                                                                        return $1856;
                                                                                                                    }));
                                                                                                                    return $1855;
                                                                                                                }));
                                                                                                                var _term$48 = Kind$Term$app$(_term$46, _lamb$47);
                                                                                                                var _term$49 = Kind$Term$let$($1778, _term$48, (_x$49 => {
                                                                                                                    var $1857 = $1845;
                                                                                                                    return $1857;
                                                                                                                }));
                                                                                                                var $1854 = Parser$Reply$value$($1851, $1852, Kind$Term$ori$($1853, _term$49));
                                                                                                                var $1846 = $1854;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1838 = $1846;
                                                                                                        break;
                                                                                                };
                                                                                                var $1831 = $1838;
                                                                                                break;
                                                                                        };
                                                                                        var $1823 = $1831;
                                                                                        break;
                                                                                };
                                                                                var $1816 = $1823;
                                                                                break;
                                                                        };
                                                                        var $1808 = $1816;
                                                                        break;
                                                                };
                                                                var $1801 = $1808;
                                                                break;
                                                        };
                                                        var $1793 = $1801;
                                                        break;
                                                };
                                                var $1786 = $1793;
                                                break;
                                        };
                                        var $1779 = $1786;
                                        break;
                                };
                                var $1771 = $1779;
                                break;
                        };
                        var $1764 = $1771;
                        break;
                };
                var $1756 = $1764;
                break;
        };
        return $1756;
    };
    const Kind$Parser$letforin = x0 => x1 => Kind$Parser$letforin$(x0, x1);

    function Kind$Parser$letforin$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1859 = self.idx;
                var $1860 = self.code;
                var $1861 = self.err;
                var $1862 = Parser$Reply$error$($1859, $1860, $1861);
                var $1858 = $1862;
                break;
            case 'Parser.Reply.value':
                var $1863 = self.idx;
                var $1864 = self.code;
                var $1865 = self.val;
                var self = Kind$Parser$text$("for ", $1863, $1864);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1867 = self.idx;
                        var $1868 = self.code;
                        var $1869 = self.err;
                        var $1870 = Parser$Reply$error$($1867, $1868, $1869);
                        var $1866 = $1870;
                        break;
                    case 'Parser.Reply.value':
                        var $1871 = self.idx;
                        var $1872 = self.code;
                        var self = Kind$Parser$name1$($1871, $1872);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1874 = self.idx;
                                var $1875 = self.code;
                                var $1876 = self.err;
                                var $1877 = Parser$Reply$error$($1874, $1875, $1876);
                                var $1873 = $1877;
                                break;
                            case 'Parser.Reply.value':
                                var $1878 = self.idx;
                                var $1879 = self.code;
                                var $1880 = self.val;
                                var self = Kind$Parser$text$("in", $1878, $1879);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1882 = self.idx;
                                        var $1883 = self.code;
                                        var $1884 = self.err;
                                        var $1885 = Parser$Reply$error$($1882, $1883, $1884);
                                        var $1881 = $1885;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1886 = self.idx;
                                        var $1887 = self.code;
                                        var self = Kind$Parser$term$($1886, $1887);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1889 = self.idx;
                                                var $1890 = self.code;
                                                var $1891 = self.err;
                                                var $1892 = Parser$Reply$error$($1889, $1890, $1891);
                                                var $1888 = $1892;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1893 = self.idx;
                                                var $1894 = self.code;
                                                var $1895 = self.val;
                                                var self = Kind$Parser$text$("with ", $1893, $1894);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1897 = self.idx;
                                                        var $1898 = self.code;
                                                        var $1899 = self.err;
                                                        var $1900 = Parser$Reply$error$($1897, $1898, $1899);
                                                        var $1896 = $1900;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1901 = self.idx;
                                                        var $1902 = self.code;
                                                        var self = Kind$Parser$name1$($1901, $1902);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1904 = self.idx;
                                                                var $1905 = self.code;
                                                                var $1906 = self.err;
                                                                var $1907 = Parser$Reply$error$($1904, $1905, $1906);
                                                                var $1903 = $1907;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1908 = self.idx;
                                                                var $1909 = self.code;
                                                                var $1910 = self.val;
                                                                var self = Kind$Parser$text$(":", $1908, $1909);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1912 = self.idx;
                                                                        var $1913 = self.code;
                                                                        var $1914 = self.err;
                                                                        var $1915 = Parser$Reply$error$($1912, $1913, $1914);
                                                                        var $1911 = $1915;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1916 = self.idx;
                                                                        var $1917 = self.code;
                                                                        var self = Kind$Parser$term$($1916, $1917);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1919 = self.idx;
                                                                                var $1920 = self.code;
                                                                                var $1921 = self.err;
                                                                                var $1922 = Parser$Reply$error$($1919, $1920, $1921);
                                                                                var $1918 = $1922;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1923 = self.idx;
                                                                                var $1924 = self.code;
                                                                                var $1925 = self.val;
                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1923, $1924);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1927 = self.idx;
                                                                                        var $1928 = self.code;
                                                                                        var $1929 = self.err;
                                                                                        var $1930 = Parser$Reply$error$($1927, $1928, $1929);
                                                                                        var $1926 = $1930;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1931 = self.idx;
                                                                                        var $1932 = self.code;
                                                                                        var self = Kind$Parser$term$($1931, $1932);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1934 = self.idx;
                                                                                                var $1935 = self.code;
                                                                                                var $1936 = self.err;
                                                                                                var $1937 = Parser$Reply$error$($1934, $1935, $1936);
                                                                                                var $1933 = $1937;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1938 = self.idx;
                                                                                                var $1939 = self.code;
                                                                                                var $1940 = self.val;
                                                                                                var self = Kind$Parser$stop$($1865, $1938, $1939);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1942 = self.idx;
                                                                                                        var $1943 = self.code;
                                                                                                        var $1944 = self.err;
                                                                                                        var $1945 = Parser$Reply$error$($1942, $1943, $1944);
                                                                                                        var $1941 = $1945;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1946 = self.idx;
                                                                                                        var $1947 = self.code;
                                                                                                        var $1948 = self.val;
                                                                                                        var _term$39 = Kind$Term$ref$("List.for");
                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$hol$(Bits$e));
                                                                                                        var _term$41 = Kind$Term$app$(_term$40, $1895);
                                                                                                        var _term$42 = Kind$Term$app$(_term$41, Kind$Term$hol$(Bits$e));
                                                                                                        var _term$43 = Kind$Term$app$(_term$42, Kind$Term$ref$($1910));
                                                                                                        var _lamb$44 = Kind$Term$lam$($1880, (_i$44 => {
                                                                                                            var $1950 = Kind$Term$lam$($1910, (_x$45 => {
                                                                                                                var $1951 = $1925;
                                                                                                                return $1951;
                                                                                                            }));
                                                                                                            return $1950;
                                                                                                        }));
                                                                                                        var _term$45 = Kind$Term$app$(_term$43, _lamb$44);
                                                                                                        var _term$46 = Kind$Term$let$($1910, _term$45, (_x$46 => {
                                                                                                            var $1952 = $1940;
                                                                                                            return $1952;
                                                                                                        }));
                                                                                                        var $1949 = Parser$Reply$value$($1946, $1947, Kind$Term$ori$($1948, _term$46));
                                                                                                        var $1941 = $1949;
                                                                                                        break;
                                                                                                };
                                                                                                var $1933 = $1941;
                                                                                                break;
                                                                                        };
                                                                                        var $1926 = $1933;
                                                                                        break;
                                                                                };
                                                                                var $1918 = $1926;
                                                                                break;
                                                                        };
                                                                        var $1911 = $1918;
                                                                        break;
                                                                };
                                                                var $1903 = $1911;
                                                                break;
                                                        };
                                                        var $1896 = $1903;
                                                        break;
                                                };
                                                var $1888 = $1896;
                                                break;
                                        };
                                        var $1881 = $1888;
                                        break;
                                };
                                var $1873 = $1881;
                                break;
                        };
                        var $1866 = $1873;
                        break;
                };
                var $1858 = $1866;
                break;
        };
        return $1858;
    };
    const Kind$Parser$letforin$with = x0 => x1 => Kind$Parser$letforin$with$(x0, x1);

    function Kind$Parser$letwhile$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1954 = self.idx;
                var $1955 = self.code;
                var $1956 = self.err;
                var $1957 = Parser$Reply$error$($1954, $1955, $1956);
                var $1953 = $1957;
                break;
            case 'Parser.Reply.value':
                var $1958 = self.idx;
                var $1959 = self.code;
                var $1960 = self.val;
                var self = Kind$Parser$text$("let ", $1958, $1959);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1962 = self.idx;
                        var $1963 = self.code;
                        var $1964 = self.err;
                        var $1965 = Parser$Reply$error$($1962, $1963, $1964);
                        var $1961 = $1965;
                        break;
                    case 'Parser.Reply.value':
                        var $1966 = self.idx;
                        var $1967 = self.code;
                        var self = Kind$Parser$name1$($1966, $1967);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1969 = self.idx;
                                var $1970 = self.code;
                                var $1971 = self.err;
                                var $1972 = Parser$Reply$error$($1969, $1970, $1971);
                                var $1968 = $1972;
                                break;
                            case 'Parser.Reply.value':
                                var $1973 = self.idx;
                                var $1974 = self.code;
                                var $1975 = self.val;
                                var self = Kind$Parser$text$("=", $1973, $1974);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1977 = self.idx;
                                        var $1978 = self.code;
                                        var $1979 = self.err;
                                        var $1980 = Parser$Reply$error$($1977, $1978, $1979);
                                        var $1976 = $1980;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1981 = self.idx;
                                        var $1982 = self.code;
                                        var self = Kind$Parser$text$("while ", $1981, $1982);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1984 = self.idx;
                                                var $1985 = self.code;
                                                var $1986 = self.err;
                                                var $1987 = Parser$Reply$error$($1984, $1985, $1986);
                                                var $1983 = $1987;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1988 = self.idx;
                                                var $1989 = self.code;
                                                var self = Kind$Parser$term$($1988, $1989);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1991 = self.idx;
                                                        var $1992 = self.code;
                                                        var $1993 = self.err;
                                                        var $1994 = Parser$Reply$error$($1991, $1992, $1993);
                                                        var $1990 = $1994;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1995 = self.idx;
                                                        var $1996 = self.code;
                                                        var $1997 = self.val;
                                                        var self = Kind$Parser$text$(":", $1995, $1996);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1999 = self.idx;
                                                                var $2000 = self.code;
                                                                var $2001 = self.err;
                                                                var $2002 = Parser$Reply$error$($1999, $2000, $2001);
                                                                var $1998 = $2002;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2003 = self.idx;
                                                                var $2004 = self.code;
                                                                var self = Kind$Parser$term$($2003, $2004);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2006 = self.idx;
                                                                        var $2007 = self.code;
                                                                        var $2008 = self.err;
                                                                        var $2009 = Parser$Reply$error$($2006, $2007, $2008);
                                                                        var $2005 = $2009;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2010 = self.idx;
                                                                        var $2011 = self.code;
                                                                        var $2012 = self.val;
                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2010, $2011);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2014 = self.idx;
                                                                                var $2015 = self.code;
                                                                                var $2016 = self.err;
                                                                                var $2017 = Parser$Reply$error$($2014, $2015, $2016);
                                                                                var $2013 = $2017;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2018 = self.idx;
                                                                                var $2019 = self.code;
                                                                                var self = Kind$Parser$term$($2018, $2019);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2021 = self.idx;
                                                                                        var $2022 = self.code;
                                                                                        var $2023 = self.err;
                                                                                        var $2024 = Parser$Reply$error$($2021, $2022, $2023);
                                                                                        var $2020 = $2024;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2025 = self.idx;
                                                                                        var $2026 = self.code;
                                                                                        var $2027 = self.val;
                                                                                        var self = Kind$Parser$stop$($1960, $2025, $2026);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2029 = self.idx;
                                                                                                var $2030 = self.code;
                                                                                                var $2031 = self.err;
                                                                                                var $2032 = Parser$Reply$error$($2029, $2030, $2031);
                                                                                                var $2028 = $2032;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2033 = self.idx;
                                                                                                var $2034 = self.code;
                                                                                                var $2035 = self.val;
                                                                                                var _term$36 = Kind$Term$ref$("Function.while");
                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$hol$(Bits$e));
                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$ref$($1975));
                                                                                                var _term$39 = Kind$Term$app$(_term$38, Kind$Term$lam$($1975, (_s$39 => {
                                                                                                    var $2037 = $1997;
                                                                                                    return $2037;
                                                                                                })));
                                                                                                var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$($1975, (_s$40 => {
                                                                                                    var $2038 = $2012;
                                                                                                    return $2038;
                                                                                                })));
                                                                                                var _term$41 = Kind$Term$let$($1975, _term$40, (_x$41 => {
                                                                                                    var $2039 = $2027;
                                                                                                    return $2039;
                                                                                                }));
                                                                                                var $2036 = Parser$Reply$value$($2033, $2034, Kind$Term$ori$($2035, _term$41));
                                                                                                var $2028 = $2036;
                                                                                                break;
                                                                                        };
                                                                                        var $2020 = $2028;
                                                                                        break;
                                                                                };
                                                                                var $2013 = $2020;
                                                                                break;
                                                                        };
                                                                        var $2005 = $2013;
                                                                        break;
                                                                };
                                                                var $1998 = $2005;
                                                                break;
                                                        };
                                                        var $1990 = $1998;
                                                        break;
                                                };
                                                var $1983 = $1990;
                                                break;
                                        };
                                        var $1976 = $1983;
                                        break;
                                };
                                var $1968 = $1976;
                                break;
                        };
                        var $1961 = $1968;
                        break;
                };
                var $1953 = $1961;
                break;
        };
        return $1953;
    };
    const Kind$Parser$letwhile = x0 => x1 => Kind$Parser$letwhile$(x0, x1);

    function Kind$Parser$letwhile$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2041 = self.idx;
                var $2042 = self.code;
                var $2043 = self.err;
                var $2044 = Parser$Reply$error$($2041, $2042, $2043);
                var $2040 = $2044;
                break;
            case 'Parser.Reply.value':
                var $2045 = self.idx;
                var $2046 = self.code;
                var $2047 = self.val;
                var self = Kind$Parser$text$("while ", $2045, $2046);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2049 = self.idx;
                        var $2050 = self.code;
                        var $2051 = self.err;
                        var $2052 = Parser$Reply$error$($2049, $2050, $2051);
                        var $2048 = $2052;
                        break;
                    case 'Parser.Reply.value':
                        var $2053 = self.idx;
                        var $2054 = self.code;
                        var self = Kind$Parser$term$($2053, $2054);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2056 = self.idx;
                                var $2057 = self.code;
                                var $2058 = self.err;
                                var $2059 = Parser$Reply$error$($2056, $2057, $2058);
                                var $2055 = $2059;
                                break;
                            case 'Parser.Reply.value':
                                var $2060 = self.idx;
                                var $2061 = self.code;
                                var $2062 = self.val;
                                var self = Kind$Parser$text$("with ", $2060, $2061);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2064 = self.idx;
                                        var $2065 = self.code;
                                        var $2066 = self.err;
                                        var $2067 = Parser$Reply$error$($2064, $2065, $2066);
                                        var $2063 = $2067;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2068 = self.idx;
                                        var $2069 = self.code;
                                        var self = Kind$Parser$name1$($2068, $2069);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2071 = self.idx;
                                                var $2072 = self.code;
                                                var $2073 = self.err;
                                                var $2074 = Parser$Reply$error$($2071, $2072, $2073);
                                                var $2070 = $2074;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2075 = self.idx;
                                                var $2076 = self.code;
                                                var $2077 = self.val;
                                                var self = Kind$Parser$text$(":", $2075, $2076);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2079 = self.idx;
                                                        var $2080 = self.code;
                                                        var $2081 = self.err;
                                                        var $2082 = Parser$Reply$error$($2079, $2080, $2081);
                                                        var $2078 = $2082;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2083 = self.idx;
                                                        var $2084 = self.code;
                                                        var self = Kind$Parser$term$($2083, $2084);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2086 = self.idx;
                                                                var $2087 = self.code;
                                                                var $2088 = self.err;
                                                                var $2089 = Parser$Reply$error$($2086, $2087, $2088);
                                                                var $2085 = $2089;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2090 = self.idx;
                                                                var $2091 = self.code;
                                                                var $2092 = self.val;
                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2090, $2091);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2094 = self.idx;
                                                                        var $2095 = self.code;
                                                                        var $2096 = self.err;
                                                                        var $2097 = Parser$Reply$error$($2094, $2095, $2096);
                                                                        var $2093 = $2097;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2098 = self.idx;
                                                                        var $2099 = self.code;
                                                                        var self = Kind$Parser$term$($2098, $2099);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2101 = self.idx;
                                                                                var $2102 = self.code;
                                                                                var $2103 = self.err;
                                                                                var $2104 = Parser$Reply$error$($2101, $2102, $2103);
                                                                                var $2100 = $2104;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2105 = self.idx;
                                                                                var $2106 = self.code;
                                                                                var $2107 = self.val;
                                                                                var self = Kind$Parser$stop$($2047, $2105, $2106);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2109 = self.idx;
                                                                                        var $2110 = self.code;
                                                                                        var $2111 = self.err;
                                                                                        var $2112 = Parser$Reply$error$($2109, $2110, $2111);
                                                                                        var $2108 = $2112;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2113 = self.idx;
                                                                                        var $2114 = self.code;
                                                                                        var $2115 = self.val;
                                                                                        var _term$33 = Kind$Term$ref$("Function.while");
                                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));
                                                                                        var _term$35 = Kind$Term$app$(_term$34, Kind$Term$ref$($2077));
                                                                                        var _term$36 = Kind$Term$app$(_term$35, Kind$Term$lam$($2077, (_s$36 => {
                                                                                            var $2117 = $2062;
                                                                                            return $2117;
                                                                                        })));
                                                                                        var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$($2077, (_s$37 => {
                                                                                            var $2118 = $2092;
                                                                                            return $2118;
                                                                                        })));
                                                                                        var _term$38 = Kind$Term$let$($2077, _term$37, (_x$38 => {
                                                                                            var $2119 = $2107;
                                                                                            return $2119;
                                                                                        }));
                                                                                        var $2116 = Parser$Reply$value$($2113, $2114, Kind$Term$ori$($2115, _term$38));
                                                                                        var $2108 = $2116;
                                                                                        break;
                                                                                };
                                                                                var $2100 = $2108;
                                                                                break;
                                                                        };
                                                                        var $2093 = $2100;
                                                                        break;
                                                                };
                                                                var $2085 = $2093;
                                                                break;
                                                        };
                                                        var $2078 = $2085;
                                                        break;
                                                };
                                                var $2070 = $2078;
                                                break;
                                        };
                                        var $2063 = $2070;
                                        break;
                                };
                                var $2055 = $2063;
                                break;
                        };
                        var $2048 = $2055;
                        break;
                };
                var $2040 = $2048;
                break;
        };
        return $2040;
    };
    const Kind$Parser$letwhile$with = x0 => x1 => Kind$Parser$letwhile$with$(x0, x1);

    function Kind$Parser$let$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2121 = self.idx;
                var $2122 = self.code;
                var $2123 = self.err;
                var $2124 = Parser$Reply$error$($2121, $2122, $2123);
                var $2120 = $2124;
                break;
            case 'Parser.Reply.value':
                var $2125 = self.idx;
                var $2126 = self.code;
                var $2127 = self.val;
                var self = Kind$Parser$text$("let ", $2125, $2126);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2129 = self.idx;
                        var $2130 = self.code;
                        var $2131 = self.err;
                        var $2132 = Parser$Reply$error$($2129, $2130, $2131);
                        var $2128 = $2132;
                        break;
                    case 'Parser.Reply.value':
                        var $2133 = self.idx;
                        var $2134 = self.code;
                        var self = Kind$Parser$name$($2133, $2134);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2136 = self.idx;
                                var $2137 = self.code;
                                var $2138 = self.err;
                                var $2139 = Parser$Reply$error$($2136, $2137, $2138);
                                var $2135 = $2139;
                                break;
                            case 'Parser.Reply.value':
                                var $2140 = self.idx;
                                var $2141 = self.code;
                                var $2142 = self.val;
                                var self = Kind$Parser$text$("=", $2140, $2141);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2144 = self.idx;
                                        var $2145 = self.code;
                                        var $2146 = self.err;
                                        var $2147 = Parser$Reply$error$($2144, $2145, $2146);
                                        var $2143 = $2147;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2148 = self.idx;
                                        var $2149 = self.code;
                                        var self = Kind$Parser$term$($2148, $2149);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2151 = self.idx;
                                                var $2152 = self.code;
                                                var $2153 = self.err;
                                                var $2154 = Parser$Reply$error$($2151, $2152, $2153);
                                                var $2150 = $2154;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2155 = self.idx;
                                                var $2156 = self.code;
                                                var $2157 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2155, $2156);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2159 = self.idx;
                                                        var $2160 = self.code;
                                                        var $2161 = self.err;
                                                        var $2162 = Parser$Reply$error$($2159, $2160, $2161);
                                                        var $2158 = $2162;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2163 = self.idx;
                                                        var $2164 = self.code;
                                                        var self = Kind$Parser$term$($2163, $2164);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2166 = self.idx;
                                                                var $2167 = self.code;
                                                                var $2168 = self.err;
                                                                var $2169 = Parser$Reply$error$($2166, $2167, $2168);
                                                                var $2165 = $2169;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2170 = self.idx;
                                                                var $2171 = self.code;
                                                                var $2172 = self.val;
                                                                var self = Kind$Parser$stop$($2127, $2170, $2171);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2174 = self.idx;
                                                                        var $2175 = self.code;
                                                                        var $2176 = self.err;
                                                                        var $2177 = Parser$Reply$error$($2174, $2175, $2176);
                                                                        var $2173 = $2177;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2178 = self.idx;
                                                                        var $2179 = self.code;
                                                                        var $2180 = self.val;
                                                                        var $2181 = Parser$Reply$value$($2178, $2179, Kind$Term$ori$($2180, Kind$Term$let$($2142, $2157, (_x$27 => {
                                                                            var $2182 = $2172;
                                                                            return $2182;
                                                                        }))));
                                                                        var $2173 = $2181;
                                                                        break;
                                                                };
                                                                var $2165 = $2173;
                                                                break;
                                                        };
                                                        var $2158 = $2165;
                                                        break;
                                                };
                                                var $2150 = $2158;
                                                break;
                                        };
                                        var $2143 = $2150;
                                        break;
                                };
                                var $2135 = $2143;
                                break;
                        };
                        var $2128 = $2135;
                        break;
                };
                var $2120 = $2128;
                break;
        };
        return $2120;
    };
    const Kind$Parser$let = x0 => x1 => Kind$Parser$let$(x0, x1);

    function Kind$Parser$let$omit$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2184 = self.idx;
                var $2185 = self.code;
                var $2186 = self.err;
                var $2187 = Parser$Reply$error$($2184, $2185, $2186);
                var $2183 = $2187;
                break;
            case 'Parser.Reply.value':
                var $2188 = self.idx;
                var $2189 = self.code;
                var $2190 = self.val;
                var self = Kind$Parser$name$($2188, $2189);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2192 = self.idx;
                        var $2193 = self.code;
                        var $2194 = self.err;
                        var $2195 = Parser$Reply$error$($2192, $2193, $2194);
                        var $2191 = $2195;
                        break;
                    case 'Parser.Reply.value':
                        var $2196 = self.idx;
                        var $2197 = self.code;
                        var $2198 = self.val;
                        var self = Kind$Parser$text$("= ", $2196, $2197);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2200 = self.idx;
                                var $2201 = self.code;
                                var $2202 = self.err;
                                var $2203 = Parser$Reply$error$($2200, $2201, $2202);
                                var $2199 = $2203;
                                break;
                            case 'Parser.Reply.value':
                                var $2204 = self.idx;
                                var $2205 = self.code;
                                var self = Kind$Parser$term$($2204, $2205);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2207 = self.idx;
                                        var $2208 = self.code;
                                        var $2209 = self.err;
                                        var $2210 = Parser$Reply$error$($2207, $2208, $2209);
                                        var $2206 = $2210;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2211 = self.idx;
                                        var $2212 = self.code;
                                        var $2213 = self.val;
                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2211, $2212);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2215 = self.idx;
                                                var $2216 = self.code;
                                                var $2217 = self.err;
                                                var $2218 = Parser$Reply$error$($2215, $2216, $2217);
                                                var $2214 = $2218;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2219 = self.idx;
                                                var $2220 = self.code;
                                                var self = Kind$Parser$term$($2219, $2220);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2222 = self.idx;
                                                        var $2223 = self.code;
                                                        var $2224 = self.err;
                                                        var $2225 = Parser$Reply$error$($2222, $2223, $2224);
                                                        var $2221 = $2225;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2226 = self.idx;
                                                        var $2227 = self.code;
                                                        var $2228 = self.val;
                                                        var self = Kind$Parser$stop$($2190, $2226, $2227);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2230 = self.idx;
                                                                var $2231 = self.code;
                                                                var $2232 = self.err;
                                                                var $2233 = Parser$Reply$error$($2230, $2231, $2232);
                                                                var $2229 = $2233;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2234 = self.idx;
                                                                var $2235 = self.code;
                                                                var $2236 = self.val;
                                                                var $2237 = Parser$Reply$value$($2234, $2235, Kind$Term$ori$($2236, Kind$Term$let$($2198, $2213, (_x$24 => {
                                                                    var $2238 = $2228;
                                                                    return $2238;
                                                                }))));
                                                                var $2229 = $2237;
                                                                break;
                                                        };
                                                        var $2221 = $2229;
                                                        break;
                                                };
                                                var $2214 = $2221;
                                                break;
                                        };
                                        var $2206 = $2214;
                                        break;
                                };
                                var $2199 = $2206;
                                break;
                        };
                        var $2191 = $2199;
                        break;
                };
                var $2183 = $2191;
                break;
        };
        return $2183;
    };
    const Kind$Parser$let$omit = x0 => x1 => Kind$Parser$let$omit$(x0, x1);

    function Kind$Parser$getwhile$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2240 = self.idx;
                var $2241 = self.code;
                var $2242 = self.err;
                var $2243 = Parser$Reply$error$($2240, $2241, $2242);
                var $2239 = $2243;
                break;
            case 'Parser.Reply.value':
                var $2244 = self.idx;
                var $2245 = self.code;
                var $2246 = self.val;
                var self = Parser$maybe$(Kind$Parser$text("let "), $2244, $2245);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2248 = self.idx;
                        var $2249 = self.code;
                        var $2250 = self.err;
                        var $2251 = Parser$Reply$error$($2248, $2249, $2250);
                        var $2247 = $2251;
                        break;
                    case 'Parser.Reply.value':
                        var $2252 = self.idx;
                        var $2253 = self.code;
                        var self = Kind$Parser$text$("{", $2252, $2253);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2255 = self.idx;
                                var $2256 = self.code;
                                var $2257 = self.err;
                                var $2258 = Parser$Reply$error$($2255, $2256, $2257);
                                var $2254 = $2258;
                                break;
                            case 'Parser.Reply.value':
                                var $2259 = self.idx;
                                var $2260 = self.code;
                                var self = Kind$Parser$name$($2259, $2260);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2262 = self.idx;
                                        var $2263 = self.code;
                                        var $2264 = self.err;
                                        var $2265 = Parser$Reply$error$($2262, $2263, $2264);
                                        var $2261 = $2265;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2266 = self.idx;
                                        var $2267 = self.code;
                                        var $2268 = self.val;
                                        var self = Kind$Parser$text$(",", $2266, $2267);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2270 = self.idx;
                                                var $2271 = self.code;
                                                var $2272 = self.err;
                                                var $2273 = Parser$Reply$error$($2270, $2271, $2272);
                                                var $2269 = $2273;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2274 = self.idx;
                                                var $2275 = self.code;
                                                var self = Kind$Parser$name$($2274, $2275);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2277 = self.idx;
                                                        var $2278 = self.code;
                                                        var $2279 = self.err;
                                                        var $2280 = Parser$Reply$error$($2277, $2278, $2279);
                                                        var $2276 = $2280;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2281 = self.idx;
                                                        var $2282 = self.code;
                                                        var $2283 = self.val;
                                                        var self = Kind$Parser$text$("}", $2281, $2282);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2285 = self.idx;
                                                                var $2286 = self.code;
                                                                var $2287 = self.err;
                                                                var $2288 = Parser$Reply$error$($2285, $2286, $2287);
                                                                var $2284 = $2288;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2289 = self.idx;
                                                                var $2290 = self.code;
                                                                var self = Kind$Parser$text$("=", $2289, $2290);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2292 = self.idx;
                                                                        var $2293 = self.code;
                                                                        var $2294 = self.err;
                                                                        var $2295 = Parser$Reply$error$($2292, $2293, $2294);
                                                                        var $2291 = $2295;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2296 = self.idx;
                                                                        var $2297 = self.code;
                                                                        var self = Kind$Parser$text$("while ", $2296, $2297);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2299 = self.idx;
                                                                                var $2300 = self.code;
                                                                                var $2301 = self.err;
                                                                                var $2302 = Parser$Reply$error$($2299, $2300, $2301);
                                                                                var $2298 = $2302;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2303 = self.idx;
                                                                                var $2304 = self.code;
                                                                                var self = Kind$Parser$term$($2303, $2304);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2306 = self.idx;
                                                                                        var $2307 = self.code;
                                                                                        var $2308 = self.err;
                                                                                        var $2309 = Parser$Reply$error$($2306, $2307, $2308);
                                                                                        var $2305 = $2309;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2310 = self.idx;
                                                                                        var $2311 = self.code;
                                                                                        var $2312 = self.val;
                                                                                        var self = Kind$Parser$text$(":", $2310, $2311);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2314 = self.idx;
                                                                                                var $2315 = self.code;
                                                                                                var $2316 = self.err;
                                                                                                var $2317 = Parser$Reply$error$($2314, $2315, $2316);
                                                                                                var $2313 = $2317;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2318 = self.idx;
                                                                                                var $2319 = self.code;
                                                                                                var self = Kind$Parser$term$($2318, $2319);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2321 = self.idx;
                                                                                                        var $2322 = self.code;
                                                                                                        var $2323 = self.err;
                                                                                                        var $2324 = Parser$Reply$error$($2321, $2322, $2323);
                                                                                                        var $2320 = $2324;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2325 = self.idx;
                                                                                                        var $2326 = self.code;
                                                                                                        var $2327 = self.val;
                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2325, $2326);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $2329 = self.idx;
                                                                                                                var $2330 = self.code;
                                                                                                                var $2331 = self.err;
                                                                                                                var $2332 = Parser$Reply$error$($2329, $2330, $2331);
                                                                                                                var $2328 = $2332;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $2333 = self.idx;
                                                                                                                var $2334 = self.code;
                                                                                                                var self = Kind$Parser$term$($2333, $2334);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $2336 = self.idx;
                                                                                                                        var $2337 = self.code;
                                                                                                                        var $2338 = self.err;
                                                                                                                        var $2339 = Parser$Reply$error$($2336, $2337, $2338);
                                                                                                                        var $2335 = $2339;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $2340 = self.idx;
                                                                                                                        var $2341 = self.code;
                                                                                                                        var $2342 = self.val;
                                                                                                                        var self = Kind$Parser$stop$($2246, $2340, $2341);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $2344 = self.idx;
                                                                                                                                var $2345 = self.code;
                                                                                                                                var $2346 = self.err;
                                                                                                                                var $2347 = Parser$Reply$error$($2344, $2345, $2346);
                                                                                                                                var $2343 = $2347;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $2348 = self.idx;
                                                                                                                                var $2349 = self.code;
                                                                                                                                var $2350 = self.val;
                                                                                                                                var _moti$48 = Kind$Term$lam$("x", (_x$48 => {
                                                                                                                                    var $2352 = Kind$Term$hol$(Bits$e);
                                                                                                                                    return $2352;
                                                                                                                                }));
                                                                                                                                var _term$49 = Kind$Term$ref$("Function.while");
                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$51 = Kind$Term$ref$("Pair.new");
                                                                                                                                var _init$52 = Kind$Term$app$(_init$51, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$53 = Kind$Term$app$(_init$52, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$54 = Kind$Term$app$(_init$53, Kind$Term$ref$($2268));
                                                                                                                                var _init$55 = Kind$Term$app$(_init$54, Kind$Term$ref$($2283));
                                                                                                                                var _term$56 = Kind$Term$app$(_term$50, _init$55);
                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, Kind$Term$lam$("s", (_s$57 => {
                                                                                                                                    var $2353 = Kind$Term$app$(Kind$Term$app$(_s$57, _moti$48), Kind$Term$lam$($2268, (_x$58 => {
                                                                                                                                        var $2354 = Kind$Term$lam$($2283, (_y$59 => {
                                                                                                                                            var $2355 = $2312;
                                                                                                                                            return $2355;
                                                                                                                                        }));
                                                                                                                                        return $2354;
                                                                                                                                    })));
                                                                                                                                    return $2353;
                                                                                                                                })));
                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, Kind$Term$lam$("s", (_s$58 => {
                                                                                                                                    var $2356 = Kind$Term$app$(Kind$Term$app$(_s$58, _moti$48), Kind$Term$lam$($2268, (_x$59 => {
                                                                                                                                        var $2357 = Kind$Term$lam$($2283, (_y$60 => {
                                                                                                                                            var $2358 = $2327;
                                                                                                                                            return $2358;
                                                                                                                                        }));
                                                                                                                                        return $2357;
                                                                                                                                    })));
                                                                                                                                    return $2356;
                                                                                                                                })));
                                                                                                                                var _term$59 = Kind$Term$app$(Kind$Term$app$(_term$58, _moti$48), Kind$Term$lam$($2268, (_x$59 => {
                                                                                                                                    var $2359 = Kind$Term$lam$($2283, (_y$60 => {
                                                                                                                                        var $2360 = $2342;
                                                                                                                                        return $2360;
                                                                                                                                    }));
                                                                                                                                    return $2359;
                                                                                                                                })));
                                                                                                                                var $2351 = Parser$Reply$value$($2348, $2349, Kind$Term$ori$($2350, _term$59));
                                                                                                                                var $2343 = $2351;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $2335 = $2343;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $2328 = $2335;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $2320 = $2328;
                                                                                                        break;
                                                                                                };
                                                                                                var $2313 = $2320;
                                                                                                break;
                                                                                        };
                                                                                        var $2305 = $2313;
                                                                                        break;
                                                                                };
                                                                                var $2298 = $2305;
                                                                                break;
                                                                        };
                                                                        var $2291 = $2298;
                                                                        break;
                                                                };
                                                                var $2284 = $2291;
                                                                break;
                                                        };
                                                        var $2276 = $2284;
                                                        break;
                                                };
                                                var $2269 = $2276;
                                                break;
                                        };
                                        var $2261 = $2269;
                                        break;
                                };
                                var $2254 = $2261;
                                break;
                        };
                        var $2247 = $2254;
                        break;
                };
                var $2239 = $2247;
                break;
        };
        return $2239;
    };
    const Kind$Parser$getwhile = x0 => x1 => Kind$Parser$getwhile$(x0, x1);

    function Kind$Parser$getwhile$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2362 = self.idx;
                var $2363 = self.code;
                var $2364 = self.err;
                var $2365 = Parser$Reply$error$($2362, $2363, $2364);
                var $2361 = $2365;
                break;
            case 'Parser.Reply.value':
                var $2366 = self.idx;
                var $2367 = self.code;
                var $2368 = self.val;
                var self = Kind$Parser$text$("while ", $2366, $2367);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2370 = self.idx;
                        var $2371 = self.code;
                        var $2372 = self.err;
                        var $2373 = Parser$Reply$error$($2370, $2371, $2372);
                        var $2369 = $2373;
                        break;
                    case 'Parser.Reply.value':
                        var $2374 = self.idx;
                        var $2375 = self.code;
                        var self = Kind$Parser$term$($2374, $2375);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2377 = self.idx;
                                var $2378 = self.code;
                                var $2379 = self.err;
                                var $2380 = Parser$Reply$error$($2377, $2378, $2379);
                                var $2376 = $2380;
                                break;
                            case 'Parser.Reply.value':
                                var $2381 = self.idx;
                                var $2382 = self.code;
                                var $2383 = self.val;
                                var self = Kind$Parser$text$("with ", $2381, $2382);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2385 = self.idx;
                                        var $2386 = self.code;
                                        var $2387 = self.err;
                                        var $2388 = Parser$Reply$error$($2385, $2386, $2387);
                                        var $2384 = $2388;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2389 = self.idx;
                                        var $2390 = self.code;
                                        var self = Kind$Parser$text$("{", $2389, $2390);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2392 = self.idx;
                                                var $2393 = self.code;
                                                var $2394 = self.err;
                                                var $2395 = Parser$Reply$error$($2392, $2393, $2394);
                                                var $2391 = $2395;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2396 = self.idx;
                                                var $2397 = self.code;
                                                var self = Kind$Parser$name$($2396, $2397);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2399 = self.idx;
                                                        var $2400 = self.code;
                                                        var $2401 = self.err;
                                                        var $2402 = Parser$Reply$error$($2399, $2400, $2401);
                                                        var $2398 = $2402;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2403 = self.idx;
                                                        var $2404 = self.code;
                                                        var $2405 = self.val;
                                                        var self = Kind$Parser$text$(",", $2403, $2404);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2407 = self.idx;
                                                                var $2408 = self.code;
                                                                var $2409 = self.err;
                                                                var $2410 = Parser$Reply$error$($2407, $2408, $2409);
                                                                var $2406 = $2410;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2411 = self.idx;
                                                                var $2412 = self.code;
                                                                var self = Kind$Parser$name$($2411, $2412);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2414 = self.idx;
                                                                        var $2415 = self.code;
                                                                        var $2416 = self.err;
                                                                        var $2417 = Parser$Reply$error$($2414, $2415, $2416);
                                                                        var $2413 = $2417;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2418 = self.idx;
                                                                        var $2419 = self.code;
                                                                        var $2420 = self.val;
                                                                        var self = Kind$Parser$text$("}", $2418, $2419);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2422 = self.idx;
                                                                                var $2423 = self.code;
                                                                                var $2424 = self.err;
                                                                                var $2425 = Parser$Reply$error$($2422, $2423, $2424);
                                                                                var $2421 = $2425;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2426 = self.idx;
                                                                                var $2427 = self.code;
                                                                                var self = Kind$Parser$text$(":", $2426, $2427);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2429 = self.idx;
                                                                                        var $2430 = self.code;
                                                                                        var $2431 = self.err;
                                                                                        var $2432 = Parser$Reply$error$($2429, $2430, $2431);
                                                                                        var $2428 = $2432;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2433 = self.idx;
                                                                                        var $2434 = self.code;
                                                                                        var self = Kind$Parser$term$($2433, $2434);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2436 = self.idx;
                                                                                                var $2437 = self.code;
                                                                                                var $2438 = self.err;
                                                                                                var $2439 = Parser$Reply$error$($2436, $2437, $2438);
                                                                                                var $2435 = $2439;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2440 = self.idx;
                                                                                                var $2441 = self.code;
                                                                                                var $2442 = self.val;
                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2440, $2441);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2444 = self.idx;
                                                                                                        var $2445 = self.code;
                                                                                                        var $2446 = self.err;
                                                                                                        var $2447 = Parser$Reply$error$($2444, $2445, $2446);
                                                                                                        var $2443 = $2447;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2448 = self.idx;
                                                                                                        var $2449 = self.code;
                                                                                                        var self = Kind$Parser$term$($2448, $2449);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $2451 = self.idx;
                                                                                                                var $2452 = self.code;
                                                                                                                var $2453 = self.err;
                                                                                                                var $2454 = Parser$Reply$error$($2451, $2452, $2453);
                                                                                                                var $2450 = $2454;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $2455 = self.idx;
                                                                                                                var $2456 = self.code;
                                                                                                                var $2457 = self.val;
                                                                                                                var self = Kind$Parser$stop$($2368, $2455, $2456);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $2459 = self.idx;
                                                                                                                        var $2460 = self.code;
                                                                                                                        var $2461 = self.err;
                                                                                                                        var $2462 = Parser$Reply$error$($2459, $2460, $2461);
                                                                                                                        var $2458 = $2462;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $2463 = self.idx;
                                                                                                                        var $2464 = self.code;
                                                                                                                        var $2465 = self.val;
                                                                                                                        var _moti$45 = Kind$Term$lam$("x", (_x$45 => {
                                                                                                                            var $2467 = Kind$Term$hol$(Bits$e);
                                                                                                                            return $2467;
                                                                                                                        }));
                                                                                                                        var _term$46 = Kind$Term$ref$("Function.while");
                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$48 = Kind$Term$ref$("Pair.new");
                                                                                                                        var _init$49 = Kind$Term$app$(_init$48, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$50 = Kind$Term$app$(_init$49, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$51 = Kind$Term$app$(_init$50, Kind$Term$ref$($2405));
                                                                                                                        var _init$52 = Kind$Term$app$(_init$51, Kind$Term$ref$($2420));
                                                                                                                        var _term$53 = Kind$Term$app$(_term$47, _init$52);
                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, Kind$Term$lam$("s", (_s$54 => {
                                                                                                                            var $2468 = Kind$Term$app$(Kind$Term$app$(_s$54, _moti$45), Kind$Term$lam$($2405, (_x$55 => {
                                                                                                                                var $2469 = Kind$Term$lam$($2420, (_y$56 => {
                                                                                                                                    var $2470 = $2383;
                                                                                                                                    return $2470;
                                                                                                                                }));
                                                                                                                                return $2469;
                                                                                                                            })));
                                                                                                                            return $2468;
                                                                                                                        })));
                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, Kind$Term$lam$("s", (_s$55 => {
                                                                                                                            var $2471 = Kind$Term$app$(Kind$Term$app$(_s$55, _moti$45), Kind$Term$lam$($2405, (_x$56 => {
                                                                                                                                var $2472 = Kind$Term$lam$($2420, (_y$57 => {
                                                                                                                                    var $2473 = $2442;
                                                                                                                                    return $2473;
                                                                                                                                }));
                                                                                                                                return $2472;
                                                                                                                            })));
                                                                                                                            return $2471;
                                                                                                                        })));
                                                                                                                        var _term$56 = Kind$Term$app$(Kind$Term$app$(_term$55, _moti$45), Kind$Term$lam$($2405, (_x$56 => {
                                                                                                                            var $2474 = Kind$Term$lam$($2420, (_y$57 => {
                                                                                                                                var $2475 = $2457;
                                                                                                                                return $2475;
                                                                                                                            }));
                                                                                                                            return $2474;
                                                                                                                        })));
                                                                                                                        var $2466 = Parser$Reply$value$($2463, $2464, Kind$Term$ori$($2465, _term$56));
                                                                                                                        var $2458 = $2466;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $2450 = $2458;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $2443 = $2450;
                                                                                                        break;
                                                                                                };
                                                                                                var $2435 = $2443;
                                                                                                break;
                                                                                        };
                                                                                        var $2428 = $2435;
                                                                                        break;
                                                                                };
                                                                                var $2421 = $2428;
                                                                                break;
                                                                        };
                                                                        var $2413 = $2421;
                                                                        break;
                                                                };
                                                                var $2406 = $2413;
                                                                break;
                                                        };
                                                        var $2398 = $2406;
                                                        break;
                                                };
                                                var $2391 = $2398;
                                                break;
                                        };
                                        var $2384 = $2391;
                                        break;
                                };
                                var $2376 = $2384;
                                break;
                        };
                        var $2369 = $2376;
                        break;
                };
                var $2361 = $2369;
                break;
        };
        return $2361;
    };
    const Kind$Parser$getwhile$with = x0 => x1 => Kind$Parser$getwhile$with$(x0, x1);

    function Kind$Parser$get$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2477 = self.idx;
                var $2478 = self.code;
                var $2479 = self.err;
                var $2480 = Parser$Reply$error$($2477, $2478, $2479);
                var $2476 = $2480;
                break;
            case 'Parser.Reply.value':
                var $2481 = self.idx;
                var $2482 = self.code;
                var $2483 = self.val;
                var self = Kind$Parser$text$("let ", $2481, $2482);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2485 = self.idx;
                        var $2486 = self.code;
                        var $2487 = self.err;
                        var $2488 = Parser$Reply$error$($2485, $2486, $2487);
                        var $2484 = $2488;
                        break;
                    case 'Parser.Reply.value':
                        var $2489 = self.idx;
                        var $2490 = self.code;
                        var self = Kind$Parser$text$("{", $2489, $2490);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2492 = self.idx;
                                var $2493 = self.code;
                                var $2494 = self.err;
                                var $2495 = Parser$Reply$error$($2492, $2493, $2494);
                                var $2491 = $2495;
                                break;
                            case 'Parser.Reply.value':
                                var $2496 = self.idx;
                                var $2497 = self.code;
                                var self = Kind$Parser$name$($2496, $2497);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2499 = self.idx;
                                        var $2500 = self.code;
                                        var $2501 = self.err;
                                        var $2502 = Parser$Reply$error$($2499, $2500, $2501);
                                        var $2498 = $2502;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2503 = self.idx;
                                        var $2504 = self.code;
                                        var $2505 = self.val;
                                        var self = Kind$Parser$text$(",", $2503, $2504);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2507 = self.idx;
                                                var $2508 = self.code;
                                                var $2509 = self.err;
                                                var $2510 = Parser$Reply$error$($2507, $2508, $2509);
                                                var $2506 = $2510;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2511 = self.idx;
                                                var $2512 = self.code;
                                                var self = Kind$Parser$name$($2511, $2512);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2514 = self.idx;
                                                        var $2515 = self.code;
                                                        var $2516 = self.err;
                                                        var $2517 = Parser$Reply$error$($2514, $2515, $2516);
                                                        var $2513 = $2517;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2518 = self.idx;
                                                        var $2519 = self.code;
                                                        var $2520 = self.val;
                                                        var self = Kind$Parser$text$("}", $2518, $2519);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2522 = self.idx;
                                                                var $2523 = self.code;
                                                                var $2524 = self.err;
                                                                var $2525 = Parser$Reply$error$($2522, $2523, $2524);
                                                                var $2521 = $2525;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2526 = self.idx;
                                                                var $2527 = self.code;
                                                                var self = Kind$Parser$text$("=", $2526, $2527);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2529 = self.idx;
                                                                        var $2530 = self.code;
                                                                        var $2531 = self.err;
                                                                        var $2532 = Parser$Reply$error$($2529, $2530, $2531);
                                                                        var $2528 = $2532;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2533 = self.idx;
                                                                        var $2534 = self.code;
                                                                        var self = Kind$Parser$term$($2533, $2534);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2536 = self.idx;
                                                                                var $2537 = self.code;
                                                                                var $2538 = self.err;
                                                                                var $2539 = Parser$Reply$error$($2536, $2537, $2538);
                                                                                var $2535 = $2539;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2540 = self.idx;
                                                                                var $2541 = self.code;
                                                                                var $2542 = self.val;
                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2540, $2541);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2544 = self.idx;
                                                                                        var $2545 = self.code;
                                                                                        var $2546 = self.err;
                                                                                        var $2547 = Parser$Reply$error$($2544, $2545, $2546);
                                                                                        var $2543 = $2547;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2548 = self.idx;
                                                                                        var $2549 = self.code;
                                                                                        var self = Kind$Parser$term$($2548, $2549);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2551 = self.idx;
                                                                                                var $2552 = self.code;
                                                                                                var $2553 = self.err;
                                                                                                var $2554 = Parser$Reply$error$($2551, $2552, $2553);
                                                                                                var $2550 = $2554;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2555 = self.idx;
                                                                                                var $2556 = self.code;
                                                                                                var $2557 = self.val;
                                                                                                var self = Kind$Parser$stop$($2483, $2555, $2556);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2559 = self.idx;
                                                                                                        var $2560 = self.code;
                                                                                                        var $2561 = self.err;
                                                                                                        var $2562 = Parser$Reply$error$($2559, $2560, $2561);
                                                                                                        var $2558 = $2562;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2563 = self.idx;
                                                                                                        var $2564 = self.code;
                                                                                                        var $2565 = self.val;
                                                                                                        var _term$39 = $2542;
                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$("x", (_x$40 => {
                                                                                                            var $2567 = Kind$Term$hol$(Bits$e);
                                                                                                            return $2567;
                                                                                                        })));
                                                                                                        var _term$41 = Kind$Term$app$(_term$40, Kind$Term$lam$($2505, (_x$41 => {
                                                                                                            var $2568 = Kind$Term$lam$($2520, (_y$42 => {
                                                                                                                var $2569 = $2557;
                                                                                                                return $2569;
                                                                                                            }));
                                                                                                            return $2568;
                                                                                                        })));
                                                                                                        var $2566 = Parser$Reply$value$($2563, $2564, Kind$Term$ori$($2565, _term$41));
                                                                                                        var $2558 = $2566;
                                                                                                        break;
                                                                                                };
                                                                                                var $2550 = $2558;
                                                                                                break;
                                                                                        };
                                                                                        var $2543 = $2550;
                                                                                        break;
                                                                                };
                                                                                var $2535 = $2543;
                                                                                break;
                                                                        };
                                                                        var $2528 = $2535;
                                                                        break;
                                                                };
                                                                var $2521 = $2528;
                                                                break;
                                                        };
                                                        var $2513 = $2521;
                                                        break;
                                                };
                                                var $2506 = $2513;
                                                break;
                                        };
                                        var $2498 = $2506;
                                        break;
                                };
                                var $2491 = $2498;
                                break;
                        };
                        var $2484 = $2491;
                        break;
                };
                var $2476 = $2484;
                break;
        };
        return $2476;
    };
    const Kind$Parser$get = x0 => x1 => Kind$Parser$get$(x0, x1);

    function Kind$Parser$get$omit$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2571 = self.idx;
                var $2572 = self.code;
                var $2573 = self.err;
                var $2574 = Parser$Reply$error$($2571, $2572, $2573);
                var $2570 = $2574;
                break;
            case 'Parser.Reply.value':
                var $2575 = self.idx;
                var $2576 = self.code;
                var $2577 = self.val;
                var self = Kind$Parser$text$("{", $2575, $2576);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2579 = self.idx;
                        var $2580 = self.code;
                        var $2581 = self.err;
                        var $2582 = Parser$Reply$error$($2579, $2580, $2581);
                        var $2578 = $2582;
                        break;
                    case 'Parser.Reply.value':
                        var $2583 = self.idx;
                        var $2584 = self.code;
                        var self = Kind$Parser$name$($2583, $2584);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2586 = self.idx;
                                var $2587 = self.code;
                                var $2588 = self.err;
                                var $2589 = Parser$Reply$error$($2586, $2587, $2588);
                                var $2585 = $2589;
                                break;
                            case 'Parser.Reply.value':
                                var $2590 = self.idx;
                                var $2591 = self.code;
                                var $2592 = self.val;
                                var self = Kind$Parser$text$(",", $2590, $2591);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2594 = self.idx;
                                        var $2595 = self.code;
                                        var $2596 = self.err;
                                        var $2597 = Parser$Reply$error$($2594, $2595, $2596);
                                        var $2593 = $2597;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2598 = self.idx;
                                        var $2599 = self.code;
                                        var self = Kind$Parser$name$($2598, $2599);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2601 = self.idx;
                                                var $2602 = self.code;
                                                var $2603 = self.err;
                                                var $2604 = Parser$Reply$error$($2601, $2602, $2603);
                                                var $2600 = $2604;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2605 = self.idx;
                                                var $2606 = self.code;
                                                var $2607 = self.val;
                                                var self = Kind$Parser$text$("}", $2605, $2606);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2609 = self.idx;
                                                        var $2610 = self.code;
                                                        var $2611 = self.err;
                                                        var $2612 = Parser$Reply$error$($2609, $2610, $2611);
                                                        var $2608 = $2612;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2613 = self.idx;
                                                        var $2614 = self.code;
                                                        var self = Kind$Parser$text$("= ", $2613, $2614);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2616 = self.idx;
                                                                var $2617 = self.code;
                                                                var $2618 = self.err;
                                                                var $2619 = Parser$Reply$error$($2616, $2617, $2618);
                                                                var $2615 = $2619;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2620 = self.idx;
                                                                var $2621 = self.code;
                                                                var self = Kind$Parser$term$($2620, $2621);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2623 = self.idx;
                                                                        var $2624 = self.code;
                                                                        var $2625 = self.err;
                                                                        var $2626 = Parser$Reply$error$($2623, $2624, $2625);
                                                                        var $2622 = $2626;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2627 = self.idx;
                                                                        var $2628 = self.code;
                                                                        var $2629 = self.val;
                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2627, $2628);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2631 = self.idx;
                                                                                var $2632 = self.code;
                                                                                var $2633 = self.err;
                                                                                var $2634 = Parser$Reply$error$($2631, $2632, $2633);
                                                                                var $2630 = $2634;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2635 = self.idx;
                                                                                var $2636 = self.code;
                                                                                var self = Kind$Parser$term$($2635, $2636);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2638 = self.idx;
                                                                                        var $2639 = self.code;
                                                                                        var $2640 = self.err;
                                                                                        var $2641 = Parser$Reply$error$($2638, $2639, $2640);
                                                                                        var $2637 = $2641;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2642 = self.idx;
                                                                                        var $2643 = self.code;
                                                                                        var $2644 = self.val;
                                                                                        var self = Kind$Parser$stop$($2577, $2642, $2643);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2646 = self.idx;
                                                                                                var $2647 = self.code;
                                                                                                var $2648 = self.err;
                                                                                                var $2649 = Parser$Reply$error$($2646, $2647, $2648);
                                                                                                var $2645 = $2649;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2650 = self.idx;
                                                                                                var $2651 = self.code;
                                                                                                var $2652 = self.val;
                                                                                                var _term$36 = $2629;
                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$("x", (_x$37 => {
                                                                                                    var $2654 = Kind$Term$hol$(Bits$e);
                                                                                                    return $2654;
                                                                                                })));
                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$lam$($2592, (_x$38 => {
                                                                                                    var $2655 = Kind$Term$lam$($2607, (_y$39 => {
                                                                                                        var $2656 = $2644;
                                                                                                        return $2656;
                                                                                                    }));
                                                                                                    return $2655;
                                                                                                })));
                                                                                                var $2653 = Parser$Reply$value$($2650, $2651, Kind$Term$ori$($2652, _term$38));
                                                                                                var $2645 = $2653;
                                                                                                break;
                                                                                        };
                                                                                        var $2637 = $2645;
                                                                                        break;
                                                                                };
                                                                                var $2630 = $2637;
                                                                                break;
                                                                        };
                                                                        var $2622 = $2630;
                                                                        break;
                                                                };
                                                                var $2615 = $2622;
                                                                break;
                                                        };
                                                        var $2608 = $2615;
                                                        break;
                                                };
                                                var $2600 = $2608;
                                                break;
                                        };
                                        var $2593 = $2600;
                                        break;
                                };
                                var $2585 = $2593;
                                break;
                        };
                        var $2578 = $2585;
                        break;
                };
                var $2570 = $2578;
                break;
        };
        return $2570;
    };
    const Kind$Parser$get$omit = x0 => x1 => Kind$Parser$get$omit$(x0, x1);

    function Kind$Parser$def$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2658 = self.idx;
                var $2659 = self.code;
                var $2660 = self.err;
                var $2661 = Parser$Reply$error$($2658, $2659, $2660);
                var $2657 = $2661;
                break;
            case 'Parser.Reply.value':
                var $2662 = self.idx;
                var $2663 = self.code;
                var $2664 = self.val;
                var self = Kind$Parser$text$("def ", $2662, $2663);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2666 = self.idx;
                        var $2667 = self.code;
                        var $2668 = self.err;
                        var $2669 = Parser$Reply$error$($2666, $2667, $2668);
                        var $2665 = $2669;
                        break;
                    case 'Parser.Reply.value':
                        var $2670 = self.idx;
                        var $2671 = self.code;
                        var self = Kind$Parser$name$($2670, $2671);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2673 = self.idx;
                                var $2674 = self.code;
                                var $2675 = self.err;
                                var $2676 = Parser$Reply$error$($2673, $2674, $2675);
                                var $2672 = $2676;
                                break;
                            case 'Parser.Reply.value':
                                var $2677 = self.idx;
                                var $2678 = self.code;
                                var $2679 = self.val;
                                var self = Kind$Parser$text$("=", $2677, $2678);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2681 = self.idx;
                                        var $2682 = self.code;
                                        var $2683 = self.err;
                                        var $2684 = Parser$Reply$error$($2681, $2682, $2683);
                                        var $2680 = $2684;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2685 = self.idx;
                                        var $2686 = self.code;
                                        var self = Kind$Parser$term$($2685, $2686);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2688 = self.idx;
                                                var $2689 = self.code;
                                                var $2690 = self.err;
                                                var $2691 = Parser$Reply$error$($2688, $2689, $2690);
                                                var $2687 = $2691;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2692 = self.idx;
                                                var $2693 = self.code;
                                                var $2694 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2692, $2693);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2696 = self.idx;
                                                        var $2697 = self.code;
                                                        var $2698 = self.err;
                                                        var $2699 = Parser$Reply$error$($2696, $2697, $2698);
                                                        var $2695 = $2699;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2700 = self.idx;
                                                        var $2701 = self.code;
                                                        var self = Kind$Parser$term$($2700, $2701);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2703 = self.idx;
                                                                var $2704 = self.code;
                                                                var $2705 = self.err;
                                                                var $2706 = Parser$Reply$error$($2703, $2704, $2705);
                                                                var $2702 = $2706;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2707 = self.idx;
                                                                var $2708 = self.code;
                                                                var $2709 = self.val;
                                                                var self = Kind$Parser$stop$($2664, $2707, $2708);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2711 = self.idx;
                                                                        var $2712 = self.code;
                                                                        var $2713 = self.err;
                                                                        var $2714 = Parser$Reply$error$($2711, $2712, $2713);
                                                                        var $2710 = $2714;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2715 = self.idx;
                                                                        var $2716 = self.code;
                                                                        var $2717 = self.val;
                                                                        var $2718 = Parser$Reply$value$($2715, $2716, Kind$Term$ori$($2717, Kind$Term$def$($2679, $2694, (_x$27 => {
                                                                            var $2719 = $2709;
                                                                            return $2719;
                                                                        }))));
                                                                        var $2710 = $2718;
                                                                        break;
                                                                };
                                                                var $2702 = $2710;
                                                                break;
                                                        };
                                                        var $2695 = $2702;
                                                        break;
                                                };
                                                var $2687 = $2695;
                                                break;
                                        };
                                        var $2680 = $2687;
                                        break;
                                };
                                var $2672 = $2680;
                                break;
                        };
                        var $2665 = $2672;
                        break;
                };
                var $2657 = $2665;
                break;
        };
        return $2657;
    };
    const Kind$Parser$def = x0 => x1 => Kind$Parser$def$(x0, x1);

    function Kind$Parser$goal_rewrite$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2721 = self.idx;
                var $2722 = self.code;
                var $2723 = self.err;
                var $2724 = Parser$Reply$error$($2721, $2722, $2723);
                var $2720 = $2724;
                break;
            case 'Parser.Reply.value':
                var $2725 = self.idx;
                var $2726 = self.code;
                var $2727 = self.val;
                var self = Kind$Parser$text$("rewrite ", $2725, $2726);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2729 = self.idx;
                        var $2730 = self.code;
                        var $2731 = self.err;
                        var $2732 = Parser$Reply$error$($2729, $2730, $2731);
                        var $2728 = $2732;
                        break;
                    case 'Parser.Reply.value':
                        var $2733 = self.idx;
                        var $2734 = self.code;
                        var self = Kind$Parser$name1$($2733, $2734);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2736 = self.idx;
                                var $2737 = self.code;
                                var $2738 = self.err;
                                var $2739 = Parser$Reply$error$($2736, $2737, $2738);
                                var $2735 = $2739;
                                break;
                            case 'Parser.Reply.value':
                                var $2740 = self.idx;
                                var $2741 = self.code;
                                var $2742 = self.val;
                                var self = Kind$Parser$text$("in", $2740, $2741);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2744 = self.idx;
                                        var $2745 = self.code;
                                        var $2746 = self.err;
                                        var $2747 = Parser$Reply$error$($2744, $2745, $2746);
                                        var $2743 = $2747;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2748 = self.idx;
                                        var $2749 = self.code;
                                        var self = Kind$Parser$term$($2748, $2749);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2751 = self.idx;
                                                var $2752 = self.code;
                                                var $2753 = self.err;
                                                var $2754 = Parser$Reply$error$($2751, $2752, $2753);
                                                var $2750 = $2754;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2755 = self.idx;
                                                var $2756 = self.code;
                                                var $2757 = self.val;
                                                var self = Kind$Parser$text$("with", $2755, $2756);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2759 = self.idx;
                                                        var $2760 = self.code;
                                                        var $2761 = self.err;
                                                        var $2762 = Parser$Reply$error$($2759, $2760, $2761);
                                                        var $2758 = $2762;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2763 = self.idx;
                                                        var $2764 = self.code;
                                                        var self = Kind$Parser$term$($2763, $2764);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2766 = self.idx;
                                                                var $2767 = self.code;
                                                                var $2768 = self.err;
                                                                var $2769 = Parser$Reply$error$($2766, $2767, $2768);
                                                                var $2765 = $2769;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2770 = self.idx;
                                                                var $2771 = self.code;
                                                                var $2772 = self.val;
                                                                var self = Kind$Parser$term$($2770, $2771);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2774 = self.idx;
                                                                        var $2775 = self.code;
                                                                        var $2776 = self.err;
                                                                        var $2777 = Parser$Reply$error$($2774, $2775, $2776);
                                                                        var $2773 = $2777;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2778 = self.idx;
                                                                        var $2779 = self.code;
                                                                        var $2780 = self.val;
                                                                        var self = Kind$Parser$stop$($2727, $2778, $2779);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2782 = self.idx;
                                                                                var $2783 = self.code;
                                                                                var $2784 = self.err;
                                                                                var $2785 = Parser$Reply$error$($2782, $2783, $2784);
                                                                                var $2781 = $2785;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2786 = self.idx;
                                                                                var $2787 = self.code;
                                                                                var $2788 = self.val;
                                                                                var _moti$30 = Kind$Term$lam$($2742, (_s$30 => {
                                                                                    var $2790 = Kind$Term$lam$("", (_x$31 => {
                                                                                        var $2791 = $2757;
                                                                                        return $2791;
                                                                                    }));
                                                                                    return $2790;
                                                                                }));
                                                                                var _term$31 = Kind$Term$ref$("Equal.mirror");
                                                                                var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));
                                                                                var _term$33 = Kind$Term$app$(_term$32, Kind$Term$hol$(Bits$e));
                                                                                var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));
                                                                                var _term$35 = Kind$Term$app$(_term$34, $2772);
                                                                                var _term$36 = Kind$Term$app$(_term$35, _moti$30);
                                                                                var _term$37 = Kind$Term$app$(_term$36, $2780);
                                                                                var $2789 = Parser$Reply$value$($2786, $2787, Kind$Term$ori$($2788, _term$37));
                                                                                var $2781 = $2789;
                                                                                break;
                                                                        };
                                                                        var $2773 = $2781;
                                                                        break;
                                                                };
                                                                var $2765 = $2773;
                                                                break;
                                                        };
                                                        var $2758 = $2765;
                                                        break;
                                                };
                                                var $2750 = $2758;
                                                break;
                                        };
                                        var $2743 = $2750;
                                        break;
                                };
                                var $2735 = $2743;
                                break;
                        };
                        var $2728 = $2735;
                        break;
                };
                var $2720 = $2728;
                break;
        };
        return $2720;
    };
    const Kind$Parser$goal_rewrite = x0 => x1 => Kind$Parser$goal_rewrite$(x0, x1);

    function Kind$Parser$if$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2793 = self.idx;
                var $2794 = self.code;
                var $2795 = self.err;
                var $2796 = Parser$Reply$error$($2793, $2794, $2795);
                var $2792 = $2796;
                break;
            case 'Parser.Reply.value':
                var $2797 = self.idx;
                var $2798 = self.code;
                var $2799 = self.val;
                var self = Kind$Parser$text$("if ", $2797, $2798);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2801 = self.idx;
                        var $2802 = self.code;
                        var $2803 = self.err;
                        var $2804 = Parser$Reply$error$($2801, $2802, $2803);
                        var $2800 = $2804;
                        break;
                    case 'Parser.Reply.value':
                        var $2805 = self.idx;
                        var $2806 = self.code;
                        var self = Kind$Parser$term$($2805, $2806);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2808 = self.idx;
                                var $2809 = self.code;
                                var $2810 = self.err;
                                var $2811 = Parser$Reply$error$($2808, $2809, $2810);
                                var $2807 = $2811;
                                break;
                            case 'Parser.Reply.value':
                                var $2812 = self.idx;
                                var $2813 = self.code;
                                var $2814 = self.val;
                                var self = Kind$Parser$text$("then", $2812, $2813);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2816 = self.idx;
                                        var $2817 = self.code;
                                        var $2818 = self.err;
                                        var $2819 = Parser$Reply$error$($2816, $2817, $2818);
                                        var $2815 = $2819;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2820 = self.idx;
                                        var $2821 = self.code;
                                        var self = Kind$Parser$term$($2820, $2821);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2823 = self.idx;
                                                var $2824 = self.code;
                                                var $2825 = self.err;
                                                var $2826 = Parser$Reply$error$($2823, $2824, $2825);
                                                var $2822 = $2826;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2827 = self.idx;
                                                var $2828 = self.code;
                                                var $2829 = self.val;
                                                var self = Kind$Parser$text$("else", $2827, $2828);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2831 = self.idx;
                                                        var $2832 = self.code;
                                                        var $2833 = self.err;
                                                        var $2834 = Parser$Reply$error$($2831, $2832, $2833);
                                                        var $2830 = $2834;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2835 = self.idx;
                                                        var $2836 = self.code;
                                                        var self = Kind$Parser$term$($2835, $2836);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2838 = self.idx;
                                                                var $2839 = self.code;
                                                                var $2840 = self.err;
                                                                var $2841 = Parser$Reply$error$($2838, $2839, $2840);
                                                                var $2837 = $2841;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2842 = self.idx;
                                                                var $2843 = self.code;
                                                                var $2844 = self.val;
                                                                var self = Kind$Parser$stop$($2799, $2842, $2843);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2846 = self.idx;
                                                                        var $2847 = self.code;
                                                                        var $2848 = self.err;
                                                                        var $2849 = Parser$Reply$error$($2846, $2847, $2848);
                                                                        var $2845 = $2849;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2850 = self.idx;
                                                                        var $2851 = self.code;
                                                                        var $2852 = self.val;
                                                                        var _term$27 = $2814;
                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$lam$("", (_x$28 => {
                                                                            var $2854 = Kind$Term$hol$(Bits$e);
                                                                            return $2854;
                                                                        })));
                                                                        var _term$29 = Kind$Term$app$(_term$28, $2829);
                                                                        var _term$30 = Kind$Term$app$(_term$29, $2844);
                                                                        var $2853 = Parser$Reply$value$($2850, $2851, Kind$Term$ori$($2852, _term$30));
                                                                        var $2845 = $2853;
                                                                        break;
                                                                };
                                                                var $2837 = $2845;
                                                                break;
                                                        };
                                                        var $2830 = $2837;
                                                        break;
                                                };
                                                var $2822 = $2830;
                                                break;
                                        };
                                        var $2815 = $2822;
                                        break;
                                };
                                var $2807 = $2815;
                                break;
                        };
                        var $2800 = $2807;
                        break;
                };
                var $2792 = $2800;
                break;
        };
        return $2792;
    };
    const Kind$Parser$if = x0 => x1 => Kind$Parser$if$(x0, x1);
    const Kind$Code$backslash = 92;
    const Kind$Code$escapes = List$cons$(Pair$new$("\\b", 8), List$cons$(Pair$new$("\\f", 12), List$cons$(Pair$new$("\\n", 10), List$cons$(Pair$new$("\\r", 13), List$cons$(Pair$new$("\\t", 9), List$cons$(Pair$new$("\\v", 11), List$cons$(Pair$new$(String$cons$(Kind$Code$backslash, String$cons$(Kind$Code$backslash, String$nil)), Kind$Code$backslash), List$cons$(Pair$new$("\\\"", 34), List$cons$(Pair$new$("\\0", 0), List$cons$(Pair$new$("\\\'", 39), List$nil))))))))));
    const Kind$Parser$char$single = Parser$first_of$(List$cons$(Parser$first_of$(List$mapped$(Kind$Code$escapes, (_esc$1 => {
        var self = _esc$1;
        switch (self._) {
            case 'Pair.new':
                var $2856 = self.fst;
                var $2857 = self.snd;
                var $2858 = (_idx$4 => _code$5 => {
                    var self = Parser$text$($2856, _idx$4, _code$5);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2860 = self.idx;
                            var $2861 = self.code;
                            var $2862 = self.err;
                            var $2863 = Parser$Reply$error$($2860, $2861, $2862);
                            var $2859 = $2863;
                            break;
                        case 'Parser.Reply.value':
                            var $2864 = self.idx;
                            var $2865 = self.code;
                            var $2866 = Parser$Reply$value$($2864, $2865, $2857);
                            var $2859 = $2866;
                            break;
                    };
                    return $2859;
                });
                var $2855 = $2858;
                break;
        };
        return $2855;
    }))), List$cons$(Parser$one, List$nil)));

    function Kind$Parser$char$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2868 = self.idx;
                var $2869 = self.code;
                var $2870 = self.err;
                var $2871 = Parser$Reply$error$($2868, $2869, $2870);
                var $2867 = $2871;
                break;
            case 'Parser.Reply.value':
                var $2872 = self.idx;
                var $2873 = self.code;
                var $2874 = self.val;
                var self = Kind$Parser$text$("\'", $2872, $2873);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2876 = self.idx;
                        var $2877 = self.code;
                        var $2878 = self.err;
                        var $2879 = Parser$Reply$error$($2876, $2877, $2878);
                        var $2875 = $2879;
                        break;
                    case 'Parser.Reply.value':
                        var $2880 = self.idx;
                        var $2881 = self.code;
                        var self = Kind$Parser$char$single($2880)($2881);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2883 = self.idx;
                                var $2884 = self.code;
                                var $2885 = self.err;
                                var $2886 = Parser$Reply$error$($2883, $2884, $2885);
                                var $2882 = $2886;
                                break;
                            case 'Parser.Reply.value':
                                var $2887 = self.idx;
                                var $2888 = self.code;
                                var $2889 = self.val;
                                var self = Parser$text$("\'", $2887, $2888);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2891 = self.idx;
                                        var $2892 = self.code;
                                        var $2893 = self.err;
                                        var $2894 = Parser$Reply$error$($2891, $2892, $2893);
                                        var $2890 = $2894;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2895 = self.idx;
                                        var $2896 = self.code;
                                        var self = Kind$Parser$stop$($2874, $2895, $2896);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2898 = self.idx;
                                                var $2899 = self.code;
                                                var $2900 = self.err;
                                                var $2901 = Parser$Reply$error$($2898, $2899, $2900);
                                                var $2897 = $2901;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2902 = self.idx;
                                                var $2903 = self.code;
                                                var $2904 = self.val;
                                                var $2905 = Parser$Reply$value$($2902, $2903, Kind$Term$ori$($2904, Kind$Term$chr$($2889)));
                                                var $2897 = $2905;
                                                break;
                                        };
                                        var $2890 = $2897;
                                        break;
                                };
                                var $2882 = $2890;
                                break;
                        };
                        var $2875 = $2882;
                        break;
                };
                var $2867 = $2875;
                break;
        };
        return $2867;
    };
    const Kind$Parser$char = x0 => x1 => Kind$Parser$char$(x0, x1);

    function String$reverse$go$(_xs$1, _res$2) {
        var String$reverse$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$reverse$go = _xs$1 => _res$2 => String$reverse$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $2906 = _res$2;
                    return $2906;
                } else {
                    var $2907 = self.charCodeAt(0);
                    var $2908 = self.slice(1);
                    var $2909 = String$reverse$go$($2908, String$cons$($2907, _res$2));
                    return $2909;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$reverse$go = x0 => x1 => String$reverse$go$(x0, x1);

    function String$reverse$(_xs$1) {
        var $2910 = String$reverse$go$(_xs$1, String$nil);
        return $2910;
    };
    const String$reverse = x0 => String$reverse$(x0);

    function Kind$Parser$string$go$(_str$1, _idx$2, _code$3) {
        var Kind$Parser$string$go$ = (_str$1, _idx$2, _code$3) => ({
            ctr: 'TCO',
            arg: [_str$1, _idx$2, _code$3]
        });
        var Kind$Parser$string$go = _str$1 => _idx$2 => _code$3 => Kind$Parser$string$go$(_str$1, _idx$2, _code$3);
        var arg = [_str$1, _idx$2, _code$3];
        while (true) {
            let [_str$1, _idx$2, _code$3] = arg;
            var R = (() => {
                var self = _code$3;
                if (self.length === 0) {
                    var $2911 = Parser$Reply$error$(_idx$2, _code$3, "Non-terminating string.");
                    return $2911;
                } else {
                    var $2912 = self.charCodeAt(0);
                    var $2913 = self.slice(1);
                    var self = ($2912 === 34);
                    if (self) {
                        var $2915 = Parser$Reply$value$(Nat$succ$(_idx$2), $2913, String$reverse$(_str$1));
                        var $2914 = $2915;
                    } else {
                        var self = Kind$Parser$char$single(_idx$2)(_code$3);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2917 = self.idx;
                                var $2918 = self.code;
                                var $2919 = self.err;
                                var $2920 = Parser$Reply$error$($2917, $2918, $2919);
                                var $2916 = $2920;
                                break;
                            case 'Parser.Reply.value':
                                var $2921 = self.idx;
                                var $2922 = self.code;
                                var $2923 = self.val;
                                var $2924 = Kind$Parser$string$go$(String$cons$($2923, _str$1), $2921, $2922);
                                var $2916 = $2924;
                                break;
                        };
                        var $2914 = $2916;
                    };
                    return $2914;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Parser$string$go = x0 => x1 => x2 => Kind$Parser$string$go$(x0, x1, x2);

    function Kind$Parser$string$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2926 = self.idx;
                var $2927 = self.code;
                var $2928 = self.err;
                var $2929 = Parser$Reply$error$($2926, $2927, $2928);
                var $2925 = $2929;
                break;
            case 'Parser.Reply.value':
                var $2930 = self.idx;
                var $2931 = self.code;
                var $2932 = self.val;
                var self = Kind$Parser$text$(String$cons$(34, String$nil), $2930, $2931);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2934 = self.idx;
                        var $2935 = self.code;
                        var $2936 = self.err;
                        var $2937 = Parser$Reply$error$($2934, $2935, $2936);
                        var $2933 = $2937;
                        break;
                    case 'Parser.Reply.value':
                        var $2938 = self.idx;
                        var $2939 = self.code;
                        var self = Kind$Parser$string$go$("", $2938, $2939);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2941 = self.idx;
                                var $2942 = self.code;
                                var $2943 = self.err;
                                var $2944 = Parser$Reply$error$($2941, $2942, $2943);
                                var $2940 = $2944;
                                break;
                            case 'Parser.Reply.value':
                                var $2945 = self.idx;
                                var $2946 = self.code;
                                var $2947 = self.val;
                                var self = Kind$Parser$stop$($2932, $2945, $2946);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2949 = self.idx;
                                        var $2950 = self.code;
                                        var $2951 = self.err;
                                        var $2952 = Parser$Reply$error$($2949, $2950, $2951);
                                        var $2948 = $2952;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2953 = self.idx;
                                        var $2954 = self.code;
                                        var $2955 = self.val;
                                        var $2956 = Parser$Reply$value$($2953, $2954, Kind$Term$ori$($2955, Kind$Term$str$($2947)));
                                        var $2948 = $2956;
                                        break;
                                };
                                var $2940 = $2948;
                                break;
                        };
                        var $2933 = $2940;
                        break;
                };
                var $2925 = $2933;
                break;
        };
        return $2925;
    };
    const Kind$Parser$string = x0 => x1 => Kind$Parser$string$(x0, x1);

    function Kind$Parser$pair$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2958 = self.idx;
                var $2959 = self.code;
                var $2960 = self.err;
                var $2961 = Parser$Reply$error$($2958, $2959, $2960);
                var $2957 = $2961;
                break;
            case 'Parser.Reply.value':
                var $2962 = self.idx;
                var $2963 = self.code;
                var $2964 = self.val;
                var self = Kind$Parser$text$("{", $2962, $2963);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2966 = self.idx;
                        var $2967 = self.code;
                        var $2968 = self.err;
                        var $2969 = Parser$Reply$error$($2966, $2967, $2968);
                        var $2965 = $2969;
                        break;
                    case 'Parser.Reply.value':
                        var $2970 = self.idx;
                        var $2971 = self.code;
                        var self = Kind$Parser$term$($2970, $2971);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2973 = self.idx;
                                var $2974 = self.code;
                                var $2975 = self.err;
                                var $2976 = Parser$Reply$error$($2973, $2974, $2975);
                                var $2972 = $2976;
                                break;
                            case 'Parser.Reply.value':
                                var $2977 = self.idx;
                                var $2978 = self.code;
                                var $2979 = self.val;
                                var self = Parser$maybe$(Kind$Parser$text(","), $2977, $2978);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2981 = self.idx;
                                        var $2982 = self.code;
                                        var $2983 = self.err;
                                        var $2984 = Parser$Reply$error$($2981, $2982, $2983);
                                        var $2980 = $2984;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2985 = self.idx;
                                        var $2986 = self.code;
                                        var self = Kind$Parser$term$($2985, $2986);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2988 = self.idx;
                                                var $2989 = self.code;
                                                var $2990 = self.err;
                                                var $2991 = Parser$Reply$error$($2988, $2989, $2990);
                                                var $2987 = $2991;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2992 = self.idx;
                                                var $2993 = self.code;
                                                var $2994 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(","), $2992, $2993);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2996 = self.idx;
                                                        var $2997 = self.code;
                                                        var $2998 = self.err;
                                                        var $2999 = Parser$Reply$error$($2996, $2997, $2998);
                                                        var $2995 = $2999;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3000 = self.idx;
                                                        var $3001 = self.code;
                                                        var self = Kind$Parser$text$("}", $3000, $3001);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3003 = self.idx;
                                                                var $3004 = self.code;
                                                                var $3005 = self.err;
                                                                var $3006 = Parser$Reply$error$($3003, $3004, $3005);
                                                                var $3002 = $3006;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3007 = self.idx;
                                                                var $3008 = self.code;
                                                                var self = Kind$Parser$stop$($2964, $3007, $3008);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3010 = self.idx;
                                                                        var $3011 = self.code;
                                                                        var $3012 = self.err;
                                                                        var $3013 = Parser$Reply$error$($3010, $3011, $3012);
                                                                        var $3009 = $3013;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3014 = self.idx;
                                                                        var $3015 = self.code;
                                                                        var $3016 = self.val;
                                                                        var _term$27 = Kind$Term$ref$("Pair.new");
                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$hol$(Bits$e));
                                                                        var _term$30 = Kind$Term$app$(_term$29, $2979);
                                                                        var _term$31 = Kind$Term$app$(_term$30, $2994);
                                                                        var $3017 = Parser$Reply$value$($3014, $3015, Kind$Term$ori$($3016, _term$31));
                                                                        var $3009 = $3017;
                                                                        break;
                                                                };
                                                                var $3002 = $3009;
                                                                break;
                                                        };
                                                        var $2995 = $3002;
                                                        break;
                                                };
                                                var $2987 = $2995;
                                                break;
                                        };
                                        var $2980 = $2987;
                                        break;
                                };
                                var $2972 = $2980;
                                break;
                        };
                        var $2965 = $2972;
                        break;
                };
                var $2957 = $2965;
                break;
        };
        return $2957;
    };
    const Kind$Parser$pair = x0 => x1 => Kind$Parser$pair$(x0, x1);

    function Kind$Parser$sigma$type$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3019 = self.idx;
                var $3020 = self.code;
                var $3021 = self.err;
                var $3022 = Parser$Reply$error$($3019, $3020, $3021);
                var $3018 = $3022;
                break;
            case 'Parser.Reply.value':
                var $3023 = self.idx;
                var $3024 = self.code;
                var $3025 = self.val;
                var self = Kind$Parser$text$("[", $3023, $3024);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3027 = self.idx;
                        var $3028 = self.code;
                        var $3029 = self.err;
                        var $3030 = Parser$Reply$error$($3027, $3028, $3029);
                        var $3026 = $3030;
                        break;
                    case 'Parser.Reply.value':
                        var $3031 = self.idx;
                        var $3032 = self.code;
                        var self = Kind$Parser$name1$($3031, $3032);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3034 = self.idx;
                                var $3035 = self.code;
                                var $3036 = self.err;
                                var $3037 = Parser$Reply$error$($3034, $3035, $3036);
                                var $3033 = $3037;
                                break;
                            case 'Parser.Reply.value':
                                var $3038 = self.idx;
                                var $3039 = self.code;
                                var $3040 = self.val;
                                var self = Kind$Parser$text$(":", $3038, $3039);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3042 = self.idx;
                                        var $3043 = self.code;
                                        var $3044 = self.err;
                                        var $3045 = Parser$Reply$error$($3042, $3043, $3044);
                                        var $3041 = $3045;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3046 = self.idx;
                                        var $3047 = self.code;
                                        var self = Kind$Parser$term$($3046, $3047);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3049 = self.idx;
                                                var $3050 = self.code;
                                                var $3051 = self.err;
                                                var $3052 = Parser$Reply$error$($3049, $3050, $3051);
                                                var $3048 = $3052;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3053 = self.idx;
                                                var $3054 = self.code;
                                                var $3055 = self.val;
                                                var self = Kind$Parser$text$("]", $3053, $3054);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3057 = self.idx;
                                                        var $3058 = self.code;
                                                        var $3059 = self.err;
                                                        var $3060 = Parser$Reply$error$($3057, $3058, $3059);
                                                        var $3056 = $3060;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3061 = self.idx;
                                                        var $3062 = self.code;
                                                        var self = Kind$Parser$term$($3061, $3062);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3064 = self.idx;
                                                                var $3065 = self.code;
                                                                var $3066 = self.err;
                                                                var $3067 = Parser$Reply$error$($3064, $3065, $3066);
                                                                var $3063 = $3067;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3068 = self.idx;
                                                                var $3069 = self.code;
                                                                var $3070 = self.val;
                                                                var self = Kind$Parser$stop$($3025, $3068, $3069);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3072 = self.idx;
                                                                        var $3073 = self.code;
                                                                        var $3074 = self.err;
                                                                        var $3075 = Parser$Reply$error$($3072, $3073, $3074);
                                                                        var $3071 = $3075;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3076 = self.idx;
                                                                        var $3077 = self.code;
                                                                        var $3078 = self.val;
                                                                        var _term$27 = Kind$Term$ref$("Sigma");
                                                                        var _term$28 = Kind$Term$app$(_term$27, $3055);
                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$lam$($3040, (_x$29 => {
                                                                            var $3080 = $3070;
                                                                            return $3080;
                                                                        })));
                                                                        var $3079 = Parser$Reply$value$($3076, $3077, Kind$Term$ori$($3078, _term$29));
                                                                        var $3071 = $3079;
                                                                        break;
                                                                };
                                                                var $3063 = $3071;
                                                                break;
                                                        };
                                                        var $3056 = $3063;
                                                        break;
                                                };
                                                var $3048 = $3056;
                                                break;
                                        };
                                        var $3041 = $3048;
                                        break;
                                };
                                var $3033 = $3041;
                                break;
                        };
                        var $3026 = $3033;
                        break;
                };
                var $3018 = $3026;
                break;
        };
        return $3018;
    };
    const Kind$Parser$sigma$type = x0 => x1 => Kind$Parser$sigma$type$(x0, x1);

    function Kind$Parser$some$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3082 = self.idx;
                var $3083 = self.code;
                var $3084 = self.err;
                var $3085 = Parser$Reply$error$($3082, $3083, $3084);
                var $3081 = $3085;
                break;
            case 'Parser.Reply.value':
                var $3086 = self.idx;
                var $3087 = self.code;
                var $3088 = self.val;
                var self = Kind$Parser$text$("some(", $3086, $3087);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3090 = self.idx;
                        var $3091 = self.code;
                        var $3092 = self.err;
                        var $3093 = Parser$Reply$error$($3090, $3091, $3092);
                        var $3089 = $3093;
                        break;
                    case 'Parser.Reply.value':
                        var $3094 = self.idx;
                        var $3095 = self.code;
                        var self = Kind$Parser$term$($3094, $3095);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3097 = self.idx;
                                var $3098 = self.code;
                                var $3099 = self.err;
                                var $3100 = Parser$Reply$error$($3097, $3098, $3099);
                                var $3096 = $3100;
                                break;
                            case 'Parser.Reply.value':
                                var $3101 = self.idx;
                                var $3102 = self.code;
                                var $3103 = self.val;
                                var self = Kind$Parser$text$(")", $3101, $3102);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3105 = self.idx;
                                        var $3106 = self.code;
                                        var $3107 = self.err;
                                        var $3108 = Parser$Reply$error$($3105, $3106, $3107);
                                        var $3104 = $3108;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3109 = self.idx;
                                        var $3110 = self.code;
                                        var self = Kind$Parser$stop$($3088, $3109, $3110);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3112 = self.idx;
                                                var $3113 = self.code;
                                                var $3114 = self.err;
                                                var $3115 = Parser$Reply$error$($3112, $3113, $3114);
                                                var $3111 = $3115;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3116 = self.idx;
                                                var $3117 = self.code;
                                                var $3118 = self.val;
                                                var _term$18 = Kind$Term$ref$("Maybe.some");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, $3103);
                                                var $3119 = Parser$Reply$value$($3116, $3117, Kind$Term$ori$($3118, _term$20));
                                                var $3111 = $3119;
                                                break;
                                        };
                                        var $3104 = $3111;
                                        break;
                                };
                                var $3096 = $3104;
                                break;
                        };
                        var $3089 = $3096;
                        break;
                };
                var $3081 = $3089;
                break;
        };
        return $3081;
    };
    const Kind$Parser$some = x0 => x1 => Kind$Parser$some$(x0, x1);

    function Kind$Parser$not$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3121 = self.idx;
                var $3122 = self.code;
                var $3123 = self.err;
                var $3124 = Parser$Reply$error$($3121, $3122, $3123);
                var $3120 = $3124;
                break;
            case 'Parser.Reply.value':
                var $3125 = self.idx;
                var $3126 = self.code;
                var $3127 = self.val;
                var self = Kind$Parser$text$("not(", $3125, $3126);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3129 = self.idx;
                        var $3130 = self.code;
                        var $3131 = self.err;
                        var $3132 = Parser$Reply$error$($3129, $3130, $3131);
                        var $3128 = $3132;
                        break;
                    case 'Parser.Reply.value':
                        var $3133 = self.idx;
                        var $3134 = self.code;
                        var self = Kind$Parser$term$($3133, $3134);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3136 = self.idx;
                                var $3137 = self.code;
                                var $3138 = self.err;
                                var $3139 = Parser$Reply$error$($3136, $3137, $3138);
                                var $3135 = $3139;
                                break;
                            case 'Parser.Reply.value':
                                var $3140 = self.idx;
                                var $3141 = self.code;
                                var $3142 = self.val;
                                var self = Kind$Parser$text$(")", $3140, $3141);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3144 = self.idx;
                                        var $3145 = self.code;
                                        var $3146 = self.err;
                                        var $3147 = Parser$Reply$error$($3144, $3145, $3146);
                                        var $3143 = $3147;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3148 = self.idx;
                                        var $3149 = self.code;
                                        var self = Kind$Parser$stop$($3127, $3148, $3149);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3151 = self.idx;
                                                var $3152 = self.code;
                                                var $3153 = self.err;
                                                var $3154 = Parser$Reply$error$($3151, $3152, $3153);
                                                var $3150 = $3154;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3155 = self.idx;
                                                var $3156 = self.code;
                                                var $3157 = self.val;
                                                var _term$18 = Kind$Term$ref$("Bool.not");
                                                var _term$19 = Kind$Term$app$(_term$18, $3142);
                                                var $3158 = Parser$Reply$value$($3155, $3156, Kind$Term$ori$($3157, _term$19));
                                                var $3150 = $3158;
                                                break;
                                        };
                                        var $3143 = $3150;
                                        break;
                                };
                                var $3135 = $3143;
                                break;
                        };
                        var $3128 = $3135;
                        break;
                };
                var $3120 = $3128;
                break;
        };
        return $3120;
    };
    const Kind$Parser$not = x0 => x1 => Kind$Parser$not$(x0, x1);

    function Kind$Parser$left$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3160 = self.idx;
                var $3161 = self.code;
                var $3162 = self.err;
                var $3163 = Parser$Reply$error$($3160, $3161, $3162);
                var $3159 = $3163;
                break;
            case 'Parser.Reply.value':
                var $3164 = self.idx;
                var $3165 = self.code;
                var $3166 = self.val;
                var self = Kind$Parser$text$("left(", $3164, $3165);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3168 = self.idx;
                        var $3169 = self.code;
                        var $3170 = self.err;
                        var $3171 = Parser$Reply$error$($3168, $3169, $3170);
                        var $3167 = $3171;
                        break;
                    case 'Parser.Reply.value':
                        var $3172 = self.idx;
                        var $3173 = self.code;
                        var self = Kind$Parser$term$($3172, $3173);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3175 = self.idx;
                                var $3176 = self.code;
                                var $3177 = self.err;
                                var $3178 = Parser$Reply$error$($3175, $3176, $3177);
                                var $3174 = $3178;
                                break;
                            case 'Parser.Reply.value':
                                var $3179 = self.idx;
                                var $3180 = self.code;
                                var $3181 = self.val;
                                var self = Kind$Parser$text$(")", $3179, $3180);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3183 = self.idx;
                                        var $3184 = self.code;
                                        var $3185 = self.err;
                                        var $3186 = Parser$Reply$error$($3183, $3184, $3185);
                                        var $3182 = $3186;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3187 = self.idx;
                                        var $3188 = self.code;
                                        var self = Kind$Parser$stop$($3166, $3187, $3188);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3190 = self.idx;
                                                var $3191 = self.code;
                                                var $3192 = self.err;
                                                var $3193 = Parser$Reply$error$($3190, $3191, $3192);
                                                var $3189 = $3193;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3194 = self.idx;
                                                var $3195 = self.code;
                                                var $3196 = self.val;
                                                var _term$18 = Kind$Term$ref$("Either.left");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, $3181);
                                                var $3197 = Parser$Reply$value$($3194, $3195, Kind$Term$ori$($3196, _term$21));
                                                var $3189 = $3197;
                                                break;
                                        };
                                        var $3182 = $3189;
                                        break;
                                };
                                var $3174 = $3182;
                                break;
                        };
                        var $3167 = $3174;
                        break;
                };
                var $3159 = $3167;
                break;
        };
        return $3159;
    };
    const Kind$Parser$left = x0 => x1 => Kind$Parser$left$(x0, x1);

    function Kind$Parser$right$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3199 = self.idx;
                var $3200 = self.code;
                var $3201 = self.err;
                var $3202 = Parser$Reply$error$($3199, $3200, $3201);
                var $3198 = $3202;
                break;
            case 'Parser.Reply.value':
                var $3203 = self.idx;
                var $3204 = self.code;
                var $3205 = self.val;
                var self = Kind$Parser$text$("right(", $3203, $3204);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3207 = self.idx;
                        var $3208 = self.code;
                        var $3209 = self.err;
                        var $3210 = Parser$Reply$error$($3207, $3208, $3209);
                        var $3206 = $3210;
                        break;
                    case 'Parser.Reply.value':
                        var $3211 = self.idx;
                        var $3212 = self.code;
                        var self = Kind$Parser$term$($3211, $3212);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3214 = self.idx;
                                var $3215 = self.code;
                                var $3216 = self.err;
                                var $3217 = Parser$Reply$error$($3214, $3215, $3216);
                                var $3213 = $3217;
                                break;
                            case 'Parser.Reply.value':
                                var $3218 = self.idx;
                                var $3219 = self.code;
                                var $3220 = self.val;
                                var self = Kind$Parser$text$(")", $3218, $3219);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3222 = self.idx;
                                        var $3223 = self.code;
                                        var $3224 = self.err;
                                        var $3225 = Parser$Reply$error$($3222, $3223, $3224);
                                        var $3221 = $3225;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3226 = self.idx;
                                        var $3227 = self.code;
                                        var self = Kind$Parser$stop$($3205, $3226, $3227);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3229 = self.idx;
                                                var $3230 = self.code;
                                                var $3231 = self.err;
                                                var $3232 = Parser$Reply$error$($3229, $3230, $3231);
                                                var $3228 = $3232;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3233 = self.idx;
                                                var $3234 = self.code;
                                                var $3235 = self.val;
                                                var _term$18 = Kind$Term$ref$("Either.right");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, $3220);
                                                var $3236 = Parser$Reply$value$($3233, $3234, Kind$Term$ori$($3235, _term$21));
                                                var $3228 = $3236;
                                                break;
                                        };
                                        var $3221 = $3228;
                                        break;
                                };
                                var $3213 = $3221;
                                break;
                        };
                        var $3206 = $3213;
                        break;
                };
                var $3198 = $3206;
                break;
        };
        return $3198;
    };
    const Kind$Parser$right = x0 => x1 => Kind$Parser$right$(x0, x1);

    function Kind$Parser$apply$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3238 = self.idx;
                var $3239 = self.code;
                var $3240 = self.err;
                var $3241 = Parser$Reply$error$($3238, $3239, $3240);
                var $3237 = $3241;
                break;
            case 'Parser.Reply.value':
                var $3242 = self.idx;
                var $3243 = self.code;
                var $3244 = self.val;
                var self = Kind$Parser$text$("apply(", $3242, $3243);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3246 = self.idx;
                        var $3247 = self.code;
                        var $3248 = self.err;
                        var $3249 = Parser$Reply$error$($3246, $3247, $3248);
                        var $3245 = $3249;
                        break;
                    case 'Parser.Reply.value':
                        var $3250 = self.idx;
                        var $3251 = self.code;
                        var self = Kind$Parser$term$($3250, $3251);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3253 = self.idx;
                                var $3254 = self.code;
                                var $3255 = self.err;
                                var $3256 = Parser$Reply$error$($3253, $3254, $3255);
                                var $3252 = $3256;
                                break;
                            case 'Parser.Reply.value':
                                var $3257 = self.idx;
                                var $3258 = self.code;
                                var $3259 = self.val;
                                var self = Kind$Parser$text$(",", $3257, $3258);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3261 = self.idx;
                                        var $3262 = self.code;
                                        var $3263 = self.err;
                                        var $3264 = Parser$Reply$error$($3261, $3262, $3263);
                                        var $3260 = $3264;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3265 = self.idx;
                                        var $3266 = self.code;
                                        var self = Kind$Parser$term$($3265, $3266);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3268 = self.idx;
                                                var $3269 = self.code;
                                                var $3270 = self.err;
                                                var $3271 = Parser$Reply$error$($3268, $3269, $3270);
                                                var $3267 = $3271;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3272 = self.idx;
                                                var $3273 = self.code;
                                                var $3274 = self.val;
                                                var self = Kind$Parser$text$(")", $3272, $3273);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3276 = self.idx;
                                                        var $3277 = self.code;
                                                        var $3278 = self.err;
                                                        var $3279 = Parser$Reply$error$($3276, $3277, $3278);
                                                        var $3275 = $3279;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3280 = self.idx;
                                                        var $3281 = self.code;
                                                        var self = Kind$Parser$stop$($3244, $3280, $3281);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3283 = self.idx;
                                                                var $3284 = self.code;
                                                                var $3285 = self.err;
                                                                var $3286 = Parser$Reply$error$($3283, $3284, $3285);
                                                                var $3282 = $3286;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3287 = self.idx;
                                                                var $3288 = self.code;
                                                                var $3289 = self.val;
                                                                var _term$24 = Kind$Term$ref$("Equal.apply");
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));
                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                var _term$29 = Kind$Term$app$(_term$28, $3259);
                                                                var _term$30 = Kind$Term$app$(_term$29, $3274);
                                                                var $3290 = Parser$Reply$value$($3287, $3288, Kind$Term$ori$($3289, _term$30));
                                                                var $3282 = $3290;
                                                                break;
                                                        };
                                                        var $3275 = $3282;
                                                        break;
                                                };
                                                var $3267 = $3275;
                                                break;
                                        };
                                        var $3260 = $3267;
                                        break;
                                };
                                var $3252 = $3260;
                                break;
                        };
                        var $3245 = $3252;
                        break;
                };
                var $3237 = $3245;
                break;
        };
        return $3237;
    };
    const Kind$Parser$apply = x0 => x1 => Kind$Parser$apply$(x0, x1);

    function Kind$Parser$chain$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3292 = self.idx;
                var $3293 = self.code;
                var $3294 = self.err;
                var $3295 = Parser$Reply$error$($3292, $3293, $3294);
                var $3291 = $3295;
                break;
            case 'Parser.Reply.value':
                var $3296 = self.idx;
                var $3297 = self.code;
                var $3298 = self.val;
                var self = Kind$Parser$text$("chain(", $3296, $3297);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3300 = self.idx;
                        var $3301 = self.code;
                        var $3302 = self.err;
                        var $3303 = Parser$Reply$error$($3300, $3301, $3302);
                        var $3299 = $3303;
                        break;
                    case 'Parser.Reply.value':
                        var $3304 = self.idx;
                        var $3305 = self.code;
                        var self = Kind$Parser$term$($3304, $3305);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3307 = self.idx;
                                var $3308 = self.code;
                                var $3309 = self.err;
                                var $3310 = Parser$Reply$error$($3307, $3308, $3309);
                                var $3306 = $3310;
                                break;
                            case 'Parser.Reply.value':
                                var $3311 = self.idx;
                                var $3312 = self.code;
                                var $3313 = self.val;
                                var self = Kind$Parser$text$(",", $3311, $3312);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3315 = self.idx;
                                        var $3316 = self.code;
                                        var $3317 = self.err;
                                        var $3318 = Parser$Reply$error$($3315, $3316, $3317);
                                        var $3314 = $3318;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3319 = self.idx;
                                        var $3320 = self.code;
                                        var self = Kind$Parser$term$($3319, $3320);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3322 = self.idx;
                                                var $3323 = self.code;
                                                var $3324 = self.err;
                                                var $3325 = Parser$Reply$error$($3322, $3323, $3324);
                                                var $3321 = $3325;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3326 = self.idx;
                                                var $3327 = self.code;
                                                var $3328 = self.val;
                                                var self = Kind$Parser$text$(")", $3326, $3327);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3330 = self.idx;
                                                        var $3331 = self.code;
                                                        var $3332 = self.err;
                                                        var $3333 = Parser$Reply$error$($3330, $3331, $3332);
                                                        var $3329 = $3333;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3334 = self.idx;
                                                        var $3335 = self.code;
                                                        var self = Kind$Parser$stop$($3298, $3334, $3335);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3337 = self.idx;
                                                                var $3338 = self.code;
                                                                var $3339 = self.err;
                                                                var $3340 = Parser$Reply$error$($3337, $3338, $3339);
                                                                var $3336 = $3340;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3341 = self.idx;
                                                                var $3342 = self.code;
                                                                var $3343 = self.val;
                                                                var _term$24 = Kind$Term$ref$("Equal.chain");
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));
                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                var _term$29 = Kind$Term$app$(_term$28, $3313);
                                                                var _term$30 = Kind$Term$app$(_term$29, $3328);
                                                                var $3344 = Parser$Reply$value$($3341, $3342, Kind$Term$ori$($3343, _term$30));
                                                                var $3336 = $3344;
                                                                break;
                                                        };
                                                        var $3329 = $3336;
                                                        break;
                                                };
                                                var $3321 = $3329;
                                                break;
                                        };
                                        var $3314 = $3321;
                                        break;
                                };
                                var $3306 = $3314;
                                break;
                        };
                        var $3299 = $3306;
                        break;
                };
                var $3291 = $3299;
                break;
        };
        return $3291;
    };
    const Kind$Parser$chain = x0 => x1 => Kind$Parser$chain$(x0, x1);

    function Kind$Parser$mirror$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3346 = self.idx;
                var $3347 = self.code;
                var $3348 = self.err;
                var $3349 = Parser$Reply$error$($3346, $3347, $3348);
                var $3345 = $3349;
                break;
            case 'Parser.Reply.value':
                var $3350 = self.idx;
                var $3351 = self.code;
                var $3352 = self.val;
                var self = Kind$Parser$text$("mirror(", $3350, $3351);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3354 = self.idx;
                        var $3355 = self.code;
                        var $3356 = self.err;
                        var $3357 = Parser$Reply$error$($3354, $3355, $3356);
                        var $3353 = $3357;
                        break;
                    case 'Parser.Reply.value':
                        var $3358 = self.idx;
                        var $3359 = self.code;
                        var self = Kind$Parser$term$($3358, $3359);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3361 = self.idx;
                                var $3362 = self.code;
                                var $3363 = self.err;
                                var $3364 = Parser$Reply$error$($3361, $3362, $3363);
                                var $3360 = $3364;
                                break;
                            case 'Parser.Reply.value':
                                var $3365 = self.idx;
                                var $3366 = self.code;
                                var $3367 = self.val;
                                var self = Kind$Parser$text$(")", $3365, $3366);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3369 = self.idx;
                                        var $3370 = self.code;
                                        var $3371 = self.err;
                                        var $3372 = Parser$Reply$error$($3369, $3370, $3371);
                                        var $3368 = $3372;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3373 = self.idx;
                                        var $3374 = self.code;
                                        var self = Kind$Parser$stop$($3352, $3373, $3374);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3376 = self.idx;
                                                var $3377 = self.code;
                                                var $3378 = self.err;
                                                var $3379 = Parser$Reply$error$($3376, $3377, $3378);
                                                var $3375 = $3379;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3380 = self.idx;
                                                var $3381 = self.code;
                                                var $3382 = self.val;
                                                var _term$18 = Kind$Term$ref$("Equal.mirror");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                var _term$22 = Kind$Term$app$(_term$21, $3367);
                                                var $3383 = Parser$Reply$value$($3380, $3381, Kind$Term$ori$($3382, _term$22));
                                                var $3375 = $3383;
                                                break;
                                        };
                                        var $3368 = $3375;
                                        break;
                                };
                                var $3360 = $3368;
                                break;
                        };
                        var $3353 = $3360;
                        break;
                };
                var $3345 = $3353;
                break;
        };
        return $3345;
    };
    const Kind$Parser$mirror = x0 => x1 => Kind$Parser$mirror$(x0, x1);

    function Kind$Name$read$(_str$1) {
        var $3384 = _str$1;
        return $3384;
    };
    const Kind$Name$read = x0 => Kind$Name$read$(x0);

    function Kind$Parser$list$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3386 = self.idx;
                var $3387 = self.code;
                var $3388 = self.err;
                var $3389 = Parser$Reply$error$($3386, $3387, $3388);
                var $3385 = $3389;
                break;
            case 'Parser.Reply.value':
                var $3390 = self.idx;
                var $3391 = self.code;
                var $3392 = self.val;
                var self = Kind$Parser$text$("[", $3390, $3391);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3394 = self.idx;
                        var $3395 = self.code;
                        var $3396 = self.err;
                        var $3397 = Parser$Reply$error$($3394, $3395, $3396);
                        var $3393 = $3397;
                        break;
                    case 'Parser.Reply.value':
                        var $3398 = self.idx;
                        var $3399 = self.code;
                        var self = Parser$until$(Kind$Parser$text("]"), Kind$Parser$item(Kind$Parser$term))($3398)($3399);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3401 = self.idx;
                                var $3402 = self.code;
                                var $3403 = self.err;
                                var $3404 = Parser$Reply$error$($3401, $3402, $3403);
                                var $3400 = $3404;
                                break;
                            case 'Parser.Reply.value':
                                var $3405 = self.idx;
                                var $3406 = self.code;
                                var $3407 = self.val;
                                var self = Kind$Parser$stop$($3392, $3405, $3406);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3409 = self.idx;
                                        var $3410 = self.code;
                                        var $3411 = self.err;
                                        var $3412 = Parser$Reply$error$($3409, $3410, $3411);
                                        var $3408 = $3412;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3413 = self.idx;
                                        var $3414 = self.code;
                                        var $3415 = self.val;
                                        var $3416 = Parser$Reply$value$($3413, $3414, List$fold$($3407, Kind$Term$ori$($3415, Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("List.nil")), Kind$Term$hol$(Bits$e))), (_x$15 => _xs$16 => {
                                            var _term$17 = Kind$Term$ref$(Kind$Name$read$("List.cons"));
                                            var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                            var _term$19 = Kind$Term$app$(_term$18, _x$15);
                                            var _term$20 = Kind$Term$app$(_term$19, _xs$16);
                                            var $3417 = Kind$Term$ori$($3415, _term$20);
                                            return $3417;
                                        })));
                                        var $3408 = $3416;
                                        break;
                                };
                                var $3400 = $3408;
                                break;
                        };
                        var $3393 = $3400;
                        break;
                };
                var $3385 = $3393;
                break;
        };
        return $3385;
    };
    const Kind$Parser$list = x0 => x1 => Kind$Parser$list$(x0, x1);

    function Kind$Parser$map$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3419 = self.idx;
                var $3420 = self.code;
                var $3421 = self.err;
                var $3422 = Parser$Reply$error$($3419, $3420, $3421);
                var $3418 = $3422;
                break;
            case 'Parser.Reply.value':
                var $3423 = self.idx;
                var $3424 = self.code;
                var $3425 = self.val;
                var self = Kind$Parser$text$("{", $3423, $3424);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3427 = self.idx;
                        var $3428 = self.code;
                        var $3429 = self.err;
                        var $3430 = Parser$Reply$error$($3427, $3428, $3429);
                        var $3426 = $3430;
                        break;
                    case 'Parser.Reply.value':
                        var $3431 = self.idx;
                        var $3432 = self.code;
                        var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$item((_idx$9 => _code$10 => {
                            var self = Kind$Parser$term$(_idx$9, _code$10);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3435 = self.idx;
                                    var $3436 = self.code;
                                    var $3437 = self.err;
                                    var $3438 = Parser$Reply$error$($3435, $3436, $3437);
                                    var $3434 = $3438;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3439 = self.idx;
                                    var $3440 = self.code;
                                    var $3441 = self.val;
                                    var self = Kind$Parser$text$(":", $3439, $3440);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3443 = self.idx;
                                            var $3444 = self.code;
                                            var $3445 = self.err;
                                            var $3446 = Parser$Reply$error$($3443, $3444, $3445);
                                            var $3442 = $3446;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3447 = self.idx;
                                            var $3448 = self.code;
                                            var self = Kind$Parser$term$($3447, $3448);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3450 = self.idx;
                                                    var $3451 = self.code;
                                                    var $3452 = self.err;
                                                    var $3453 = Parser$Reply$error$($3450, $3451, $3452);
                                                    var $3449 = $3453;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3454 = self.idx;
                                                    var $3455 = self.code;
                                                    var $3456 = self.val;
                                                    var $3457 = Parser$Reply$value$($3454, $3455, Pair$new$($3441, $3456));
                                                    var $3449 = $3457;
                                                    break;
                                            };
                                            var $3442 = $3449;
                                            break;
                                    };
                                    var $3434 = $3442;
                                    break;
                            };
                            return $3434;
                        })))($3431)($3432);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3458 = self.idx;
                                var $3459 = self.code;
                                var $3460 = self.err;
                                var $3461 = Parser$Reply$error$($3458, $3459, $3460);
                                var $3433 = $3461;
                                break;
                            case 'Parser.Reply.value':
                                var $3462 = self.idx;
                                var $3463 = self.code;
                                var $3464 = self.val;
                                var self = Kind$Parser$stop$($3425, $3462, $3463);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3466 = self.idx;
                                        var $3467 = self.code;
                                        var $3468 = self.err;
                                        var $3469 = Parser$Reply$error$($3466, $3467, $3468);
                                        var $3465 = $3469;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3470 = self.idx;
                                        var $3471 = self.code;
                                        var $3472 = self.val;
                                        var _list$15 = List$fold$($3464, Kind$Term$ori$($3472, Kind$Term$app$(Kind$Term$ref$("List.nil"), Kind$Term$hol$(Bits$e))), (_kv$15 => _xs$16 => {
                                            var self = _kv$15;
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $3475 = self.fst;
                                                    var $3476 = self.snd;
                                                    var _pair$19 = Kind$Term$ref$("Pair.new");
                                                    var _pair$20 = Kind$Term$app$(_pair$19, Kind$Term$hol$(Bits$e));
                                                    var _pair$21 = Kind$Term$app$(_pair$20, Kind$Term$hol$(Bits$e));
                                                    var _pair$22 = Kind$Term$app$(_pair$21, $3475);
                                                    var _pair$23 = Kind$Term$app$(_pair$22, $3476);
                                                    var _term$24 = Kind$Term$ref$("List.cons");
                                                    var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                    var _term$26 = Kind$Term$app$(_term$25, _pair$23);
                                                    var _term$27 = Kind$Term$app$(_term$26, _xs$16);
                                                    var $3477 = Kind$Term$ori$($3472, _term$27);
                                                    var $3474 = $3477;
                                                    break;
                                            };
                                            return $3474;
                                        }));
                                        var _term$16 = Kind$Term$ref$("Map.from_list");
                                        var _term$17 = Kind$Term$app$(_term$16, Kind$Term$hol$(Bits$e));
                                        var _term$18 = Kind$Term$app$(_term$17, _list$15);
                                        var $3473 = Parser$Reply$value$($3470, $3471, Kind$Term$ori$($3472, _term$18));
                                        var $3465 = $3473;
                                        break;
                                };
                                var $3433 = $3465;
                                break;
                        };
                        var $3426 = $3433;
                        break;
                };
                var $3418 = $3426;
                break;
        };
        return $3418;
    };
    const Kind$Parser$map = x0 => x1 => Kind$Parser$map$(x0, x1);

    function Kind$Parser$log$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3479 = self.idx;
                var $3480 = self.code;
                var $3481 = self.err;
                var $3482 = Parser$Reply$error$($3479, $3480, $3481);
                var $3478 = $3482;
                break;
            case 'Parser.Reply.value':
                var $3483 = self.idx;
                var $3484 = self.code;
                var $3485 = self.val;
                var self = Kind$Parser$text$("log(", $3483, $3484);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3487 = self.idx;
                        var $3488 = self.code;
                        var $3489 = self.err;
                        var $3490 = Parser$Reply$error$($3487, $3488, $3489);
                        var $3486 = $3490;
                        break;
                    case 'Parser.Reply.value':
                        var $3491 = self.idx;
                        var $3492 = self.code;
                        var self = Parser$until$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$term))($3491)($3492);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3494 = self.idx;
                                var $3495 = self.code;
                                var $3496 = self.err;
                                var $3497 = Parser$Reply$error$($3494, $3495, $3496);
                                var $3493 = $3497;
                                break;
                            case 'Parser.Reply.value':
                                var $3498 = self.idx;
                                var $3499 = self.code;
                                var $3500 = self.val;
                                var self = Kind$Parser$term$($3498, $3499);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3502 = self.idx;
                                        var $3503 = self.code;
                                        var $3504 = self.err;
                                        var $3505 = Parser$Reply$error$($3502, $3503, $3504);
                                        var $3501 = $3505;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3506 = self.idx;
                                        var $3507 = self.code;
                                        var $3508 = self.val;
                                        var _term$15 = Kind$Term$ref$("Debug.log");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));
                                        var _args$17 = List$fold$($3500, Kind$Term$ref$("String.nil"), (_x$17 => _xs$18 => {
                                            var _arg$19 = Kind$Term$ref$("String.concat");
                                            var _arg$20 = Kind$Term$app$(_arg$19, _x$17);
                                            var _arg$21 = Kind$Term$app$(_arg$20, _xs$18);
                                            var $3510 = _arg$21;
                                            return $3510;
                                        }));
                                        var _term$18 = Kind$Term$app$(_term$16, _args$17);
                                        var _term$19 = Kind$Term$app$(_term$18, Kind$Term$lam$("x", (_x$19 => {
                                            var $3511 = $3508;
                                            return $3511;
                                        })));
                                        var self = Kind$Parser$stop$($3485, $3506, $3507);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3512 = self.idx;
                                                var $3513 = self.code;
                                                var $3514 = self.err;
                                                var $3515 = Parser$Reply$error$($3512, $3513, $3514);
                                                var $3509 = $3515;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3516 = self.idx;
                                                var $3517 = self.code;
                                                var $3518 = self.val;
                                                var $3519 = Parser$Reply$value$($3516, $3517, Kind$Term$ori$($3518, _term$19));
                                                var $3509 = $3519;
                                                break;
                                        };
                                        var $3501 = $3509;
                                        break;
                                };
                                var $3493 = $3501;
                                break;
                        };
                        var $3486 = $3493;
                        break;
                };
                var $3478 = $3486;
                break;
        };
        return $3478;
    };
    const Kind$Parser$log = x0 => x1 => Kind$Parser$log$(x0, x1);

    function Kind$Parser$do$statements$(_monad_name$1) {
        var $3520 = Parser$first_of$(List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3522 = self.idx;
                    var $3523 = self.code;
                    var $3524 = self.err;
                    var $3525 = Parser$Reply$error$($3522, $3523, $3524);
                    var $3521 = $3525;
                    break;
                case 'Parser.Reply.value':
                    var $3526 = self.idx;
                    var $3527 = self.code;
                    var $3528 = self.val;
                    var self = Parser$first_of$(List$cons$(Kind$Parser$text("var "), List$cons$(Kind$Parser$text("get "), List$nil)))($3526)($3527);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3530 = self.idx;
                            var $3531 = self.code;
                            var $3532 = self.err;
                            var $3533 = Parser$Reply$error$($3530, $3531, $3532);
                            var $3529 = $3533;
                            break;
                        case 'Parser.Reply.value':
                            var $3534 = self.idx;
                            var $3535 = self.code;
                            var self = Kind$Parser$name1$($3534, $3535);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3537 = self.idx;
                                    var $3538 = self.code;
                                    var $3539 = self.err;
                                    var $3540 = Parser$Reply$error$($3537, $3538, $3539);
                                    var $3536 = $3540;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3541 = self.idx;
                                    var $3542 = self.code;
                                    var $3543 = self.val;
                                    var self = Kind$Parser$text$("=", $3541, $3542);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3545 = self.idx;
                                            var $3546 = self.code;
                                            var $3547 = self.err;
                                            var $3548 = Parser$Reply$error$($3545, $3546, $3547);
                                            var $3544 = $3548;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3549 = self.idx;
                                            var $3550 = self.code;
                                            var self = Kind$Parser$term$($3549, $3550);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3552 = self.idx;
                                                    var $3553 = self.code;
                                                    var $3554 = self.err;
                                                    var $3555 = Parser$Reply$error$($3552, $3553, $3554);
                                                    var $3551 = $3555;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3556 = self.idx;
                                                    var $3557 = self.code;
                                                    var $3558 = self.val;
                                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3556, $3557);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $3560 = self.idx;
                                                            var $3561 = self.code;
                                                            var $3562 = self.err;
                                                            var $3563 = Parser$Reply$error$($3560, $3561, $3562);
                                                            var $3559 = $3563;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $3564 = self.idx;
                                                            var $3565 = self.code;
                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($3564)($3565);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $3567 = self.idx;
                                                                    var $3568 = self.code;
                                                                    var $3569 = self.err;
                                                                    var $3570 = Parser$Reply$error$($3567, $3568, $3569);
                                                                    var $3566 = $3570;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $3571 = self.idx;
                                                                    var $3572 = self.code;
                                                                    var $3573 = self.val;
                                                                    var self = Kind$Parser$stop$($3528, $3571, $3572);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3575 = self.idx;
                                                                            var $3576 = self.code;
                                                                            var $3577 = self.err;
                                                                            var $3578 = Parser$Reply$error$($3575, $3576, $3577);
                                                                            var $3574 = $3578;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3579 = self.idx;
                                                                            var $3580 = self.code;
                                                                            var $3581 = self.val;
                                                                            var _term$28 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"), Kind$Term$ref$(_monad_name$1));
                                                                            var _term$29 = Kind$Term$app$(_term$28, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                                            var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));
                                                                            var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));
                                                                            var _term$32 = Kind$Term$app$(_term$31, $3558);
                                                                            var _term$33 = Kind$Term$app$(_term$32, Kind$Term$lam$($3543, (_x$33 => {
                                                                                var $3583 = $3573;
                                                                                return $3583;
                                                                            })));
                                                                            var $3582 = Parser$Reply$value$($3579, $3580, Kind$Term$ori$($3581, _term$33));
                                                                            var $3574 = $3582;
                                                                            break;
                                                                    };
                                                                    var $3566 = $3574;
                                                                    break;
                                                            };
                                                            var $3559 = $3566;
                                                            break;
                                                    };
                                                    var $3551 = $3559;
                                                    break;
                                            };
                                            var $3544 = $3551;
                                            break;
                                    };
                                    var $3536 = $3544;
                                    break;
                            };
                            var $3529 = $3536;
                            break;
                    };
                    var $3521 = $3529;
                    break;
            };
            return $3521;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3585 = self.idx;
                    var $3586 = self.code;
                    var $3587 = self.err;
                    var $3588 = Parser$Reply$error$($3585, $3586, $3587);
                    var $3584 = $3588;
                    break;
                case 'Parser.Reply.value':
                    var $3589 = self.idx;
                    var $3590 = self.code;
                    var $3591 = self.val;
                    var self = Kind$Parser$text$("let ", $3589, $3590);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3593 = self.idx;
                            var $3594 = self.code;
                            var $3595 = self.err;
                            var $3596 = Parser$Reply$error$($3593, $3594, $3595);
                            var $3592 = $3596;
                            break;
                        case 'Parser.Reply.value':
                            var $3597 = self.idx;
                            var $3598 = self.code;
                            var self = Kind$Parser$name1$($3597, $3598);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3600 = self.idx;
                                    var $3601 = self.code;
                                    var $3602 = self.err;
                                    var $3603 = Parser$Reply$error$($3600, $3601, $3602);
                                    var $3599 = $3603;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3604 = self.idx;
                                    var $3605 = self.code;
                                    var $3606 = self.val;
                                    var self = Kind$Parser$text$("=", $3604, $3605);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3608 = self.idx;
                                            var $3609 = self.code;
                                            var $3610 = self.err;
                                            var $3611 = Parser$Reply$error$($3608, $3609, $3610);
                                            var $3607 = $3611;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3612 = self.idx;
                                            var $3613 = self.code;
                                            var self = Kind$Parser$term$($3612, $3613);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3615 = self.idx;
                                                    var $3616 = self.code;
                                                    var $3617 = self.err;
                                                    var $3618 = Parser$Reply$error$($3615, $3616, $3617);
                                                    var $3614 = $3618;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3619 = self.idx;
                                                    var $3620 = self.code;
                                                    var $3621 = self.val;
                                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3619, $3620);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $3623 = self.idx;
                                                            var $3624 = self.code;
                                                            var $3625 = self.err;
                                                            var $3626 = Parser$Reply$error$($3623, $3624, $3625);
                                                            var $3622 = $3626;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $3627 = self.idx;
                                                            var $3628 = self.code;
                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($3627)($3628);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $3630 = self.idx;
                                                                    var $3631 = self.code;
                                                                    var $3632 = self.err;
                                                                    var $3633 = Parser$Reply$error$($3630, $3631, $3632);
                                                                    var $3629 = $3633;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $3634 = self.idx;
                                                                    var $3635 = self.code;
                                                                    var $3636 = self.val;
                                                                    var self = Kind$Parser$stop$($3591, $3634, $3635);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3638 = self.idx;
                                                                            var $3639 = self.code;
                                                                            var $3640 = self.err;
                                                                            var $3641 = Parser$Reply$error$($3638, $3639, $3640);
                                                                            var $3637 = $3641;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3642 = self.idx;
                                                                            var $3643 = self.code;
                                                                            var $3644 = self.val;
                                                                            var $3645 = Parser$Reply$value$($3642, $3643, Kind$Term$ori$($3644, Kind$Term$let$($3606, $3621, (_x$28 => {
                                                                                var $3646 = $3636;
                                                                                return $3646;
                                                                            }))));
                                                                            var $3637 = $3645;
                                                                            break;
                                                                    };
                                                                    var $3629 = $3637;
                                                                    break;
                                                            };
                                                            var $3622 = $3629;
                                                            break;
                                                    };
                                                    var $3614 = $3622;
                                                    break;
                                            };
                                            var $3607 = $3614;
                                            break;
                                    };
                                    var $3599 = $3607;
                                    break;
                            };
                            var $3592 = $3599;
                            break;
                    };
                    var $3584 = $3592;
                    break;
            };
            return $3584;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3648 = self.idx;
                    var $3649 = self.code;
                    var $3650 = self.err;
                    var $3651 = Parser$Reply$error$($3648, $3649, $3650);
                    var $3647 = $3651;
                    break;
                case 'Parser.Reply.value':
                    var $3652 = self.idx;
                    var $3653 = self.code;
                    var $3654 = self.val;
                    var self = Kind$Parser$text$("return ", $3652, $3653);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3656 = self.idx;
                            var $3657 = self.code;
                            var $3658 = self.err;
                            var $3659 = Parser$Reply$error$($3656, $3657, $3658);
                            var $3655 = $3659;
                            break;
                        case 'Parser.Reply.value':
                            var $3660 = self.idx;
                            var $3661 = self.code;
                            var self = Kind$Parser$term$($3660, $3661);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3663 = self.idx;
                                    var $3664 = self.code;
                                    var $3665 = self.err;
                                    var $3666 = Parser$Reply$error$($3663, $3664, $3665);
                                    var $3662 = $3666;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3667 = self.idx;
                                    var $3668 = self.code;
                                    var $3669 = self.val;
                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3667, $3668);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3671 = self.idx;
                                            var $3672 = self.code;
                                            var $3673 = self.err;
                                            var $3674 = Parser$Reply$error$($3671, $3672, $3673);
                                            var $3670 = $3674;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3675 = self.idx;
                                            var $3676 = self.code;
                                            var self = Kind$Parser$stop$($3654, $3675, $3676);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3678 = self.idx;
                                                    var $3679 = self.code;
                                                    var $3680 = self.err;
                                                    var $3681 = Parser$Reply$error$($3678, $3679, $3680);
                                                    var $3677 = $3681;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3682 = self.idx;
                                                    var $3683 = self.code;
                                                    var $3684 = self.val;
                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.pure"), Kind$Term$ref$(_monad_name$1));
                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                    var _term$22 = Kind$Term$app$(_term$21, $3669);
                                                    var $3685 = Parser$Reply$value$($3682, $3683, Kind$Term$ori$($3684, _term$22));
                                                    var $3677 = $3685;
                                                    break;
                                            };
                                            var $3670 = $3677;
                                            break;
                                    };
                                    var $3662 = $3670;
                                    break;
                            };
                            var $3655 = $3662;
                            break;
                    };
                    var $3647 = $3655;
                    break;
            };
            return $3647;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3687 = self.idx;
                    var $3688 = self.code;
                    var $3689 = self.err;
                    var $3690 = Parser$Reply$error$($3687, $3688, $3689);
                    var $3686 = $3690;
                    break;
                case 'Parser.Reply.value':
                    var $3691 = self.idx;
                    var $3692 = self.code;
                    var $3693 = self.val;
                    var self = Kind$Parser$term$($3691, $3692);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3695 = self.idx;
                            var $3696 = self.code;
                            var $3697 = self.err;
                            var $3698 = Parser$Reply$error$($3695, $3696, $3697);
                            var $3694 = $3698;
                            break;
                        case 'Parser.Reply.value':
                            var $3699 = self.idx;
                            var $3700 = self.code;
                            var $3701 = self.val;
                            var self = Parser$maybe$(Kind$Parser$text(";"), $3699, $3700);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3703 = self.idx;
                                    var $3704 = self.code;
                                    var $3705 = self.err;
                                    var $3706 = Parser$Reply$error$($3703, $3704, $3705);
                                    var $3702 = $3706;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3707 = self.idx;
                                    var $3708 = self.code;
                                    var self = Kind$Parser$do$statements$(_monad_name$1)($3707)($3708);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3710 = self.idx;
                                            var $3711 = self.code;
                                            var $3712 = self.err;
                                            var $3713 = Parser$Reply$error$($3710, $3711, $3712);
                                            var $3709 = $3713;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3714 = self.idx;
                                            var $3715 = self.code;
                                            var $3716 = self.val;
                                            var self = Kind$Parser$stop$($3693, $3714, $3715);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3718 = self.idx;
                                                    var $3719 = self.code;
                                                    var $3720 = self.err;
                                                    var $3721 = Parser$Reply$error$($3718, $3719, $3720);
                                                    var $3717 = $3721;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3722 = self.idx;
                                                    var $3723 = self.code;
                                                    var $3724 = self.val;
                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"), Kind$Term$ref$(_monad_name$1));
                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                    var _term$22 = Kind$Term$app$(_term$21, Kind$Term$hol$(Bits$e));
                                                    var _term$23 = Kind$Term$app$(_term$22, $3701);
                                                    var _term$24 = Kind$Term$app$(_term$23, Kind$Term$lam$("", (_x$24 => {
                                                        var $3726 = $3716;
                                                        return $3726;
                                                    })));
                                                    var $3725 = Parser$Reply$value$($3722, $3723, Kind$Term$ori$($3724, _term$24));
                                                    var $3717 = $3725;
                                                    break;
                                            };
                                            var $3709 = $3717;
                                            break;
                                    };
                                    var $3702 = $3709;
                                    break;
                            };
                            var $3694 = $3702;
                            break;
                    };
                    var $3686 = $3694;
                    break;
            };
            return $3686;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$term$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3728 = self.idx;
                    var $3729 = self.code;
                    var $3730 = self.err;
                    var $3731 = Parser$Reply$error$($3728, $3729, $3730);
                    var $3727 = $3731;
                    break;
                case 'Parser.Reply.value':
                    var $3732 = self.idx;
                    var $3733 = self.code;
                    var $3734 = self.val;
                    var self = Parser$maybe$(Kind$Parser$text(";"), $3732, $3733);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3736 = self.idx;
                            var $3737 = self.code;
                            var $3738 = self.err;
                            var $3739 = Parser$Reply$error$($3736, $3737, $3738);
                            var $3735 = $3739;
                            break;
                        case 'Parser.Reply.value':
                            var $3740 = self.idx;
                            var $3741 = self.code;
                            var $3742 = Parser$Reply$value$($3740, $3741, $3734);
                            var $3735 = $3742;
                            break;
                    };
                    var $3727 = $3735;
                    break;
            };
            return $3727;
        }), List$nil))))));
        return $3520;
    };
    const Kind$Parser$do$statements = x0 => Kind$Parser$do$statements$(x0);

    function Kind$Parser$do$(_idx$1, _code$2) {
        var self = Parser$maybe$(Kind$Parser$text("do "), _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3744 = self.idx;
                var $3745 = self.code;
                var $3746 = self.err;
                var $3747 = Parser$Reply$error$($3744, $3745, $3746);
                var $3743 = $3747;
                break;
            case 'Parser.Reply.value':
                var $3748 = self.idx;
                var $3749 = self.code;
                var self = Kind$Parser$name1$($3748, $3749);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3751 = self.idx;
                        var $3752 = self.code;
                        var $3753 = self.err;
                        var $3754 = Parser$Reply$error$($3751, $3752, $3753);
                        var $3750 = $3754;
                        break;
                    case 'Parser.Reply.value':
                        var $3755 = self.idx;
                        var $3756 = self.code;
                        var $3757 = self.val;
                        var self = Parser$text$(" {", $3755, $3756);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3759 = self.idx;
                                var $3760 = self.code;
                                var $3761 = self.err;
                                var $3762 = Parser$Reply$error$($3759, $3760, $3761);
                                var $3758 = $3762;
                                break;
                            case 'Parser.Reply.value':
                                var $3763 = self.idx;
                                var $3764 = self.code;
                                var self = Kind$Parser$do$statements$($3757)($3763)($3764);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3766 = self.idx;
                                        var $3767 = self.code;
                                        var $3768 = self.err;
                                        var $3769 = Parser$Reply$error$($3766, $3767, $3768);
                                        var $3765 = $3769;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3770 = self.idx;
                                        var $3771 = self.code;
                                        var $3772 = self.val;
                                        var self = Kind$Parser$text$("}", $3770, $3771);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3774 = self.idx;
                                                var $3775 = self.code;
                                                var $3776 = self.err;
                                                var $3777 = Parser$Reply$error$($3774, $3775, $3776);
                                                var $3773 = $3777;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3778 = self.idx;
                                                var $3779 = self.code;
                                                var $3780 = Parser$Reply$value$($3778, $3779, $3772);
                                                var $3773 = $3780;
                                                break;
                                        };
                                        var $3765 = $3773;
                                        break;
                                };
                                var $3758 = $3765;
                                break;
                        };
                        var $3750 = $3758;
                        break;
                };
                var $3743 = $3750;
                break;
        };
        return $3743;
    };
    const Kind$Parser$do = x0 => x1 => Kind$Parser$do$(x0, x1);

    function Parser$try$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3782 = Parser$Reply$value$(_idx$3, _code$4, Bool$false);
                var $3781 = $3782;
                break;
            case 'Parser.Reply.value':
                var $3783 = Parser$Reply$value$(_idx$3, _code$4, Bool$true);
                var $3781 = $3783;
                break;
        };
        return $3781;
    };
    const Parser$try = x0 => x1 => x2 => Parser$try$(x0, x1, x2);

    function Parser$fail$(_error$2, _idx$3, _code$4) {
        var $3784 = Parser$Reply$error$(_idx$3, _code$4, _error$2);
        return $3784;
    };
    const Parser$fail = x0 => x1 => x2 => Parser$fail$(x0, x1, x2);

    function Parser$avoiding$(_test$2, _parse$3, _idx$4, _code$5) {
        var self = Parser$try$(_test$2, _idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3786 = self.idx;
                var $3787 = self.code;
                var $3788 = self.err;
                var $3789 = Parser$Reply$error$($3786, $3787, $3788);
                var $3785 = $3789;
                break;
            case 'Parser.Reply.value':
                var $3790 = self.idx;
                var $3791 = self.code;
                var $3792 = self.val;
                var self = $3792;
                if (self) {
                    var $3794 = Parser$fail("Avoided.");
                    var $3793 = $3794;
                } else {
                    var $3795 = _parse$3;
                    var $3793 = $3795;
                };
                var $3793 = $3793($3790)($3791);
                var $3785 = $3793;
                break;
        };
        return $3785;
    };
    const Parser$avoiding = x0 => x1 => x2 => x3 => Parser$avoiding$(x0, x1, x2, x3);

    function Maybe$default$(_m$2, _a$3) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $3797 = self.value;
                var $3798 = $3797;
                var $3796 = $3798;
                break;
            case 'Maybe.none':
                var $3799 = _a$3;
                var $3796 = $3799;
                break;
        };
        return $3796;
    };
    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);

    function Kind$Term$unroll_nat$(_natx$1) {
        var self = _natx$1;
        if (self === 0n) {
            var $3801 = Kind$Term$ref$(Kind$Name$read$("Nat.zero"));
            var $3800 = $3801;
        } else {
            var $3802 = (self - 1n);
            var _func$3 = Kind$Term$ref$(Kind$Name$read$("Nat.succ"));
            var _argm$4 = Kind$Term$nat$($3802);
            var $3803 = Kind$Term$app$(_func$3, _argm$4);
            var $3800 = $3803;
        };
        return $3800;
    };
    const Kind$Term$unroll_nat = x0 => Kind$Term$unroll_nat$(x0);
    const U16$to_bits = a0 => (u16_to_bits(a0));

    function Kind$Term$unroll_chr$bits$(_bits$1) {
        var self = _bits$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $3805 = self.slice(0, -1);
                var $3806 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.o")), Kind$Term$unroll_chr$bits$($3805));
                var $3804 = $3806;
                break;
            case 'i':
                var $3807 = self.slice(0, -1);
                var $3808 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.i")), Kind$Term$unroll_chr$bits$($3807));
                var $3804 = $3808;
                break;
            case 'e':
                var $3809 = Kind$Term$ref$(Kind$Name$read$("Bits.e"));
                var $3804 = $3809;
                break;
        };
        return $3804;
    };
    const Kind$Term$unroll_chr$bits = x0 => Kind$Term$unroll_chr$bits$(x0);

    function Kind$Term$unroll_chr$(_chrx$1) {
        var _bits$2 = (u16_to_bits(_chrx$1));
        var _term$3 = Kind$Term$ref$(Kind$Name$read$("Word.from_bits"));
        var _term$4 = Kind$Term$app$(_term$3, Kind$Term$nat$(16n));
        var _term$5 = Kind$Term$app$(_term$4, Kind$Term$unroll_chr$bits$(_bits$2));
        var _term$6 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("U16.new")), _term$5);
        var $3810 = _term$6;
        return $3810;
    };
    const Kind$Term$unroll_chr = x0 => Kind$Term$unroll_chr$(x0);

    function Kind$Term$unroll_str$(_strx$1) {
        var self = _strx$1;
        if (self.length === 0) {
            var $3812 = Kind$Term$ref$(Kind$Name$read$("String.nil"));
            var $3811 = $3812;
        } else {
            var $3813 = self.charCodeAt(0);
            var $3814 = self.slice(1);
            var _char$4 = Kind$Term$chr$($3813);
            var _term$5 = Kind$Term$ref$(Kind$Name$read$("String.cons"));
            var _term$6 = Kind$Term$app$(_term$5, _char$4);
            var _term$7 = Kind$Term$app$(_term$6, Kind$Term$str$($3814));
            var $3815 = _term$7;
            var $3811 = $3815;
        };
        return $3811;
    };
    const Kind$Term$unroll_str = x0 => Kind$Term$unroll_str$(x0);

    function Kind$Term$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $3817 = self.name;
                var self = Kind$Map$get$($3817, _defs$2);
                switch (self._) {
                    case 'Maybe.some':
                        var $3819 = self.value;
                        var self = $3819;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $3821 = self.term;
                                var $3822 = Kind$Term$reduce$($3821, _defs$2);
                                var $3820 = $3822;
                                break;
                        };
                        var $3818 = $3820;
                        break;
                    case 'Maybe.none':
                        var $3823 = Kind$Term$ref$($3817);
                        var $3818 = $3823;
                        break;
                };
                var $3816 = $3818;
                break;
            case 'Kind.Term.app':
                var $3824 = self.func;
                var $3825 = self.argm;
                var _func$5 = Kind$Term$reduce$($3824, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Kind.Term.lam':
                        var $3827 = self.body;
                        var $3828 = Kind$Term$reduce$($3827($3825), _defs$2);
                        var $3826 = $3828;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $3829 = _term$1;
                        var $3826 = $3829;
                        break;
                };
                var $3816 = $3826;
                break;
            case 'Kind.Term.let':
                var $3830 = self.expr;
                var $3831 = self.body;
                var $3832 = Kind$Term$reduce$($3831($3830), _defs$2);
                var $3816 = $3832;
                break;
            case 'Kind.Term.def':
                var $3833 = self.expr;
                var $3834 = self.body;
                var $3835 = Kind$Term$reduce$($3834($3833), _defs$2);
                var $3816 = $3835;
                break;
            case 'Kind.Term.ann':
                var $3836 = self.term;
                var $3837 = Kind$Term$reduce$($3836, _defs$2);
                var $3816 = $3837;
                break;
            case 'Kind.Term.nat':
                var $3838 = self.natx;
                var $3839 = Kind$Term$reduce$(Kind$Term$unroll_nat$($3838), _defs$2);
                var $3816 = $3839;
                break;
            case 'Kind.Term.chr':
                var $3840 = self.chrx;
                var $3841 = Kind$Term$reduce$(Kind$Term$unroll_chr$($3840), _defs$2);
                var $3816 = $3841;
                break;
            case 'Kind.Term.str':
                var $3842 = self.strx;
                var $3843 = Kind$Term$reduce$(Kind$Term$unroll_str$($3842), _defs$2);
                var $3816 = $3843;
                break;
            case 'Kind.Term.ori':
                var $3844 = self.expr;
                var $3845 = Kind$Term$reduce$($3844, _defs$2);
                var $3816 = $3845;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.cse':
                var $3846 = _term$1;
                var $3816 = $3846;
                break;
        };
        return $3816;
    };
    const Kind$Term$reduce = x0 => x1 => Kind$Term$reduce$(x0, x1);

    function Kind$Term$extract_name$(_term$1) {
        var _term$2 = Kind$Term$reduce$(_term$1, Kind$Map$new);
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.var':
                var $3848 = self.name;
                var $3849 = $3848;
                var $3847 = $3849;
                break;
            case 'Kind.Term.ref':
                var $3850 = self.name;
                var $3851 = $3850;
                var $3847 = $3851;
                break;
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $3852 = "self";
                var $3847 = $3852;
                break;
        };
        return $3847;
    };
    const Kind$Term$extract_name = x0 => Kind$Term$extract_name$(x0);

    function Kind$Ann$new$(_name$1, _term$2, _type$3) {
        var $3853 = ({
            _: 'Kind.Ann.new',
            'name': _name$1,
            'term': _term$2,
            'type': _type$3
        });
        return $3853;
    };
    const Kind$Ann$new = x0 => x1 => x2 => Kind$Ann$new$(x0, x1, x2);
    const Kind$Parser$case$with = Parser$first_of$(List$cons$((_idx$1 => _code$2 => {
        var self = Kind$Parser$text$("with ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3855 = self.idx;
                var $3856 = self.code;
                var $3857 = self.err;
                var $3858 = Parser$Reply$error$($3855, $3856, $3857);
                var $3854 = $3858;
                break;
            case 'Parser.Reply.value':
                var $3859 = self.idx;
                var $3860 = self.code;
                var $3861 = Parser$many$((_idx$6 => _code$7 => {
                    var self = Kind$Parser$name1$(_idx$6, _code$7);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3863 = self.idx;
                            var $3864 = self.code;
                            var $3865 = self.err;
                            var $3866 = Parser$Reply$error$($3863, $3864, $3865);
                            var $3862 = $3866;
                            break;
                        case 'Parser.Reply.value':
                            var $3867 = self.idx;
                            var $3868 = self.code;
                            var $3869 = self.val;
                            var self = Parser$maybe$((_idx$11 => _code$12 => {
                                var self = Kind$Parser$text$(":", _idx$11, _code$12);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3872 = self.idx;
                                        var $3873 = self.code;
                                        var $3874 = self.err;
                                        var $3875 = Parser$Reply$error$($3872, $3873, $3874);
                                        var $3871 = $3875;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3876 = self.idx;
                                        var $3877 = self.code;
                                        var self = Kind$Parser$term$($3876, $3877);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3879 = self.idx;
                                                var $3880 = self.code;
                                                var $3881 = self.err;
                                                var $3882 = Parser$Reply$error$($3879, $3880, $3881);
                                                var $3878 = $3882;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3883 = self.idx;
                                                var $3884 = self.code;
                                                var $3885 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $3883, $3884);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3887 = self.idx;
                                                        var $3888 = self.code;
                                                        var $3889 = self.err;
                                                        var $3890 = Parser$Reply$error$($3887, $3888, $3889);
                                                        var $3886 = $3890;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3891 = self.idx;
                                                        var $3892 = self.code;
                                                        var $3893 = Parser$Reply$value$($3891, $3892, $3885);
                                                        var $3886 = $3893;
                                                        break;
                                                };
                                                var $3878 = $3886;
                                                break;
                                        };
                                        var $3871 = $3878;
                                        break;
                                };
                                return $3871;
                            }), $3867, $3868);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3894 = self.idx;
                                    var $3895 = self.code;
                                    var $3896 = self.err;
                                    var $3897 = Parser$Reply$error$($3894, $3895, $3896);
                                    var $3870 = $3897;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3898 = self.idx;
                                    var $3899 = self.code;
                                    var $3900 = self.val;
                                    var $3901 = Parser$Reply$value$($3898, $3899, Kind$Ann$new$($3869, Kind$Term$ref$($3869), $3900));
                                    var $3870 = $3901;
                                    break;
                            };
                            var $3862 = $3870;
                            break;
                    };
                    return $3862;
                }))($3859)($3860);
                var $3854 = $3861;
                break;
        };
        return $3854;
    }), List$cons$((_idx$1 => _code$2 => {
        var $3902 = Parser$Reply$value$(_idx$1, _code$2, List$nil);
        return $3902;
    }), List$nil)));

    function Kind$Parser$case$case$(_idx$1, _code$2) {
        var self = Parser$until$(Kind$Parser$text(":"), Kind$Parser$name1)(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3904 = self.idx;
                var $3905 = self.code;
                var $3906 = self.err;
                var $3907 = Parser$Reply$error$($3904, $3905, $3906);
                var $3903 = $3907;
                break;
            case 'Parser.Reply.value':
                var $3908 = self.idx;
                var $3909 = self.code;
                var $3910 = self.val;
                var self = Kind$Parser$term$($3908, $3909);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3912 = self.idx;
                        var $3913 = self.code;
                        var $3914 = self.err;
                        var $3915 = Parser$Reply$error$($3912, $3913, $3914);
                        var $3911 = $3915;
                        break;
                    case 'Parser.Reply.value':
                        var $3916 = self.idx;
                        var $3917 = self.code;
                        var $3918 = self.val;
                        var self = Parser$maybe$(Kind$Parser$text(","), $3916, $3917);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3920 = self.idx;
                                var $3921 = self.code;
                                var $3922 = self.err;
                                var $3923 = Parser$Reply$error$($3920, $3921, $3922);
                                var $3919 = $3923;
                                break;
                            case 'Parser.Reply.value':
                                var $3924 = self.idx;
                                var $3925 = self.code;
                                var $3926 = Parser$Reply$value$($3924, $3925, Pair$new$($3910, $3918));
                                var $3919 = $3926;
                                break;
                        };
                        var $3911 = $3919;
                        break;
                };
                var $3903 = $3911;
                break;
        };
        return $3903;
    };
    const Kind$Parser$case$case = x0 => x1 => Kind$Parser$case$case$(x0, x1);
    const Debug$log = a0 => a1 => ((console.log(a0), a1()));

    function Kind$Parser$case$group$(_dflt$1, _cses$2) {
        var self = _cses$2;
        switch (self._) {
            case 'List.cons':
                var $3928 = self.head;
                var $3929 = self.tail;
                var _map$5 = Kind$Parser$case$group$(_dflt$1, $3929);
                var self = $3928;
                switch (self._) {
                    case 'Pair.new':
                        var $3931 = self.fst;
                        var $3932 = self.snd;
                        var self = $3931;
                        switch (self._) {
                            case 'List.cons':
                                var $3934 = self.head;
                                var $3935 = self.tail;
                                var _rest$10 = Maybe$default$(Kind$Map$get$($3934, _map$5), List$nil);
                                var $3936 = Kind$Map$set$($3934, List$cons$(Pair$new$($3935, $3932), _rest$10), _map$5);
                                var $3933 = $3936;
                                break;
                            case 'List.nil':
                                var $3937 = _map$5;
                                var $3933 = $3937;
                                break;
                        };
                        var $3930 = $3933;
                        break;
                };
                var $3927 = $3930;
                break;
            case 'List.nil':
                var self = _dflt$1;
                switch (self._) {
                    case 'Maybe.some':
                        var $3939 = self.value;
                        var $3940 = Kind$Map$set$("_", List$cons$(Pair$new$(List$nil, $3939), List$nil), Kind$Map$new);
                        var $3938 = $3940;
                        break;
                    case 'Maybe.none':
                        var $3941 = Kind$Map$new;
                        var $3938 = $3941;
                        break;
                };
                var $3927 = $3938;
                break;
        };
        return $3927;
    };
    const Kind$Parser$case$group = x0 => x1 => Kind$Parser$case$group$(x0, x1);

    function BitsMap$map$(_fn$3, _map$4) {
        var self = _map$4;
        switch (self._) {
            case 'BitsMap.tie':
                var $3943 = self.val;
                var $3944 = self.lft;
                var $3945 = self.rgt;
                var self = $3943;
                switch (self._) {
                    case 'Maybe.some':
                        var $3947 = self.value;
                        var $3948 = Maybe$some$(_fn$3($3947));
                        var _val$8 = $3948;
                        break;
                    case 'Maybe.none':
                        var $3949 = Maybe$none;
                        var _val$8 = $3949;
                        break;
                };
                var _lft$9 = BitsMap$map$(_fn$3, $3944);
                var _rgt$10 = BitsMap$map$(_fn$3, $3945);
                var $3946 = BitsMap$tie$(_val$8, _lft$9, _rgt$10);
                var $3942 = $3946;
                break;
            case 'BitsMap.new':
                var $3950 = BitsMap$new;
                var $3942 = $3950;
                break;
        };
        return $3942;
    };
    const BitsMap$map = x0 => x1 => BitsMap$map$(x0, x1);

    function Kind$Map$map$(_fn$3, _map$4) {
        var $3951 = BitsMap$map$(_fn$3, _map$4);
        return $3951;
    };
    const Kind$Map$map = x0 => x1 => Kind$Map$map$(x0, x1);

    function Kind$Term$cse$(_path$1, _expr$2, _name$3, _with$4, _cses$5, _moti$6) {
        var $3952 = ({
            _: 'Kind.Term.cse',
            'path': _path$1,
            'expr': _expr$2,
            'name': _name$3,
            'with': _with$4,
            'cses': _cses$5,
            'moti': _moti$6
        });
        return $3952;
    };
    const Kind$Term$cse = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$cse$(x0, x1, x2, x3, x4, x5);

    function Kind$Parser$case$build$(_vals$1, _wyth$2, _cses$3, _dflt$4, _moti$5, _orig$6) {
        var self = _vals$1;
        switch (self._) {
            case 'List.cons':
                var $3954 = self.head;
                var $3955 = self.tail;
                var _group$9 = Kind$Parser$case$group$(_dflt$4, _cses$3);
                var _name$10 = Pair$fst$($3954);
                var _expr$11 = Pair$snd$($3954);
                var _cses$12 = Kind$Map$map$((_cses$12 => {
                    var $3957 = Kind$Parser$case$build$($3955, _wyth$2, _cses$12, _dflt$4, _moti$5, _orig$6);
                    return $3957;
                }), _group$9);
                var $3956 = Kind$Term$ori$(_orig$6, Kind$Term$cse$(Bits$e, _expr$11, _name$10, _wyth$2, _cses$12, _moti$5));
                var $3953 = $3956;
                break;
            case 'List.nil':
                var self = _cses$3;
                switch (self._) {
                    case 'List.cons':
                        var $3959 = self.head;
                        var $3960 = Pair$snd$($3959);
                        var $3958 = $3960;
                        break;
                    case 'List.nil':
                        var $3961 = ((console.log(("MISSING CASE" + String$nil)), (_x$7 => {
                            var $3962 = Kind$Term$ref$("missing_case");
                            return $3962;
                        })()));
                        var $3958 = $3961;
                        break;
                };
                var $3953 = $3958;
                break;
        };
        return $3953;
    };
    const Kind$Parser$case$build = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$case$build$(x0, x1, x2, x3, x4, x5);

    function Kind$Parser$case$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3964 = self.idx;
                var $3965 = self.code;
                var $3966 = self.err;
                var $3967 = Parser$Reply$error$($3964, $3965, $3966);
                var $3963 = $3967;
                break;
            case 'Parser.Reply.value':
                var $3968 = self.idx;
                var $3969 = self.code;
                var $3970 = self.val;
                var self = Kind$Parser$text$("case ", $3968, $3969);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3972 = self.idx;
                        var $3973 = self.code;
                        var $3974 = self.err;
                        var $3975 = Parser$Reply$error$($3972, $3973, $3974);
                        var $3971 = $3975;
                        break;
                    case 'Parser.Reply.value':
                        var $3976 = self.idx;
                        var $3977 = self.code;
                        var self = Parser$many1$((_idx$9 => _code$10 => {
                            var self = Parser$avoiding$(Kind$Parser$text("{"), Kind$Parser$term, _idx$9, _code$10);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3980 = self.idx;
                                    var $3981 = self.code;
                                    var $3982 = self.err;
                                    var $3983 = Parser$Reply$error$($3980, $3981, $3982);
                                    var $3979 = $3983;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3984 = self.idx;
                                    var $3985 = self.code;
                                    var $3986 = self.val;
                                    var self = Parser$maybe$((_idx$14 => _code$15 => {
                                        var self = Kind$Parser$text$("as", _idx$14, _code$15);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3989 = self.idx;
                                                var $3990 = self.code;
                                                var $3991 = self.err;
                                                var $3992 = Parser$Reply$error$($3989, $3990, $3991);
                                                var $3988 = $3992;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3993 = self.idx;
                                                var $3994 = self.code;
                                                var self = Kind$Parser$name1$($3993, $3994);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3996 = self.idx;
                                                        var $3997 = self.code;
                                                        var $3998 = self.err;
                                                        var $3999 = Parser$Reply$error$($3996, $3997, $3998);
                                                        var $3995 = $3999;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4000 = self.idx;
                                                        var $4001 = self.code;
                                                        var $4002 = self.val;
                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $4000, $4001);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4004 = self.idx;
                                                                var $4005 = self.code;
                                                                var $4006 = self.err;
                                                                var $4007 = Parser$Reply$error$($4004, $4005, $4006);
                                                                var $4003 = $4007;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4008 = self.idx;
                                                                var $4009 = self.code;
                                                                var $4010 = Parser$Reply$value$($4008, $4009, $4002);
                                                                var $4003 = $4010;
                                                                break;
                                                        };
                                                        var $3995 = $4003;
                                                        break;
                                                };
                                                var $3988 = $3995;
                                                break;
                                        };
                                        return $3988;
                                    }), $3984, $3985);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4011 = self.idx;
                                            var $4012 = self.code;
                                            var $4013 = self.err;
                                            var $4014 = Parser$Reply$error$($4011, $4012, $4013);
                                            var $3987 = $4014;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4015 = self.idx;
                                            var $4016 = self.code;
                                            var $4017 = self.val;
                                            var _name$17 = Maybe$default$($4017, Kind$Term$extract_name$($3986));
                                            var $4018 = Parser$Reply$value$($4015, $4016, Pair$new$(_name$17, $3986));
                                            var $3987 = $4018;
                                            break;
                                    };
                                    var $3979 = $3987;
                                    break;
                            };
                            return $3979;
                        }), $3976, $3977);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4019 = self.idx;
                                var $4020 = self.code;
                                var $4021 = self.err;
                                var $4022 = Parser$Reply$error$($4019, $4020, $4021);
                                var $3978 = $4022;
                                break;
                            case 'Parser.Reply.value':
                                var $4023 = self.idx;
                                var $4024 = self.code;
                                var $4025 = self.val;
                                var self = Kind$Parser$case$with($4023)($4024);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4027 = self.idx;
                                        var $4028 = self.code;
                                        var $4029 = self.err;
                                        var $4030 = Parser$Reply$error$($4027, $4028, $4029);
                                        var $4026 = $4030;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4031 = self.idx;
                                        var $4032 = self.code;
                                        var $4033 = self.val;
                                        var self = Kind$Parser$text$("{", $4031, $4032);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4035 = self.idx;
                                                var $4036 = self.code;
                                                var $4037 = self.err;
                                                var $4038 = Parser$Reply$error$($4035, $4036, $4037);
                                                var $4034 = $4038;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4039 = self.idx;
                                                var $4040 = self.code;
                                                var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$case$case)($4039)($4040);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4042 = self.idx;
                                                        var $4043 = self.code;
                                                        var $4044 = self.err;
                                                        var $4045 = Parser$Reply$error$($4042, $4043, $4044);
                                                        var $4041 = $4045;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4046 = self.idx;
                                                        var $4047 = self.code;
                                                        var $4048 = self.val;
                                                        var self = Parser$maybe$(Kind$Parser$text("!"), $4046, $4047);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4050 = self.idx;
                                                                var $4051 = self.code;
                                                                var $4052 = self.err;
                                                                var $4053 = Parser$Reply$error$($4050, $4051, $4052);
                                                                var $4049 = $4053;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4054 = self.idx;
                                                                var $4055 = self.code;
                                                                var $4056 = self.val;
                                                                var self = Parser$maybe$((_idx$24 => _code$25 => {
                                                                    var self = Kind$Parser$text$("default", _idx$24, _code$25);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $4059 = self.idx;
                                                                            var $4060 = self.code;
                                                                            var $4061 = self.err;
                                                                            var $4062 = Parser$Reply$error$($4059, $4060, $4061);
                                                                            var $4058 = $4062;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $4063 = self.idx;
                                                                            var $4064 = self.code;
                                                                            var self = Kind$Parser$term$($4063, $4064);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $4066 = self.idx;
                                                                                    var $4067 = self.code;
                                                                                    var $4068 = self.err;
                                                                                    var $4069 = Parser$Reply$error$($4066, $4067, $4068);
                                                                                    var $4065 = $4069;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $4070 = self.idx;
                                                                                    var $4071 = self.code;
                                                                                    var $4072 = self.val;
                                                                                    var $4073 = Parser$Reply$value$($4070, $4071, $4072);
                                                                                    var $4065 = $4073;
                                                                                    break;
                                                                            };
                                                                            var $4058 = $4065;
                                                                            break;
                                                                    };
                                                                    return $4058;
                                                                }), $4054, $4055);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $4074 = self.idx;
                                                                        var $4075 = self.code;
                                                                        var $4076 = self.err;
                                                                        var $4077 = Parser$Reply$error$($4074, $4075, $4076);
                                                                        var $4057 = $4077;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $4078 = self.idx;
                                                                        var $4079 = self.code;
                                                                        var $4080 = self.val;
                                                                        var self = Parser$maybe$((_idx$27 => _code$28 => {
                                                                            var self = Kind$Parser$text$(":", _idx$27, _code$28);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $4083 = self.idx;
                                                                                    var $4084 = self.code;
                                                                                    var $4085 = self.err;
                                                                                    var $4086 = Parser$Reply$error$($4083, $4084, $4085);
                                                                                    var $4082 = $4086;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $4087 = self.idx;
                                                                                    var $4088 = self.code;
                                                                                    var $4089 = Kind$Parser$term$($4087, $4088);
                                                                                    var $4082 = $4089;
                                                                                    break;
                                                                            };
                                                                            return $4082;
                                                                        }), $4078, $4079);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $4090 = self.idx;
                                                                                var $4091 = self.code;
                                                                                var $4092 = self.err;
                                                                                var $4093 = Parser$Reply$error$($4090, $4091, $4092);
                                                                                var $4081 = $4093;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $4094 = self.idx;
                                                                                var $4095 = self.code;
                                                                                var $4096 = self.val;
                                                                                var self = $4096;
                                                                                switch (self._) {
                                                                                    case 'Maybe.some':
                                                                                        var $4098 = self.value;
                                                                                        var $4099 = Maybe$some$($4098);
                                                                                        var _moti$30 = $4099;
                                                                                        break;
                                                                                    case 'Maybe.none':
                                                                                        var self = $4056;
                                                                                        switch (self._) {
                                                                                            case 'Maybe.none':
                                                                                                var $4101 = Maybe$some$(Kind$Term$hol$(Bits$e));
                                                                                                var $4100 = $4101;
                                                                                                break;
                                                                                            case 'Maybe.some':
                                                                                                var $4102 = Maybe$none;
                                                                                                var $4100 = $4102;
                                                                                                break;
                                                                                        };
                                                                                        var _moti$30 = $4100;
                                                                                        break;
                                                                                };
                                                                                var self = Kind$Parser$stop$($3970, $4094, $4095);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $4103 = self.idx;
                                                                                        var $4104 = self.code;
                                                                                        var $4105 = self.err;
                                                                                        var $4106 = Parser$Reply$error$($4103, $4104, $4105);
                                                                                        var $4097 = $4106;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $4107 = self.idx;
                                                                                        var $4108 = self.code;
                                                                                        var $4109 = self.val;
                                                                                        var $4110 = Parser$Reply$value$($4107, $4108, Kind$Parser$case$build$($4025, $4033, $4048, $4080, _moti$30, $4109));
                                                                                        var $4097 = $4110;
                                                                                        break;
                                                                                };
                                                                                var $4081 = $4097;
                                                                                break;
                                                                        };
                                                                        var $4057 = $4081;
                                                                        break;
                                                                };
                                                                var $4049 = $4057;
                                                                break;
                                                        };
                                                        var $4041 = $4049;
                                                        break;
                                                };
                                                var $4034 = $4041;
                                                break;
                                        };
                                        var $4026 = $4034;
                                        break;
                                };
                                var $3978 = $4026;
                                break;
                        };
                        var $3971 = $3978;
                        break;
                };
                var $3963 = $3971;
                break;
        };
        return $3963;
    };
    const Kind$Parser$case = x0 => x1 => Kind$Parser$case$(x0, x1);

    function Kind$Parser$open$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4112 = self.idx;
                var $4113 = self.code;
                var $4114 = self.err;
                var $4115 = Parser$Reply$error$($4112, $4113, $4114);
                var $4111 = $4115;
                break;
            case 'Parser.Reply.value':
                var $4116 = self.idx;
                var $4117 = self.code;
                var $4118 = self.val;
                var self = Kind$Parser$text$("open ", $4116, $4117);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4120 = self.idx;
                        var $4121 = self.code;
                        var $4122 = self.err;
                        var $4123 = Parser$Reply$error$($4120, $4121, $4122);
                        var $4119 = $4123;
                        break;
                    case 'Parser.Reply.value':
                        var $4124 = self.idx;
                        var $4125 = self.code;
                        var self = Kind$Parser$spaces($4124)($4125);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4127 = self.idx;
                                var $4128 = self.code;
                                var $4129 = self.err;
                                var $4130 = Parser$Reply$error$($4127, $4128, $4129);
                                var $4126 = $4130;
                                break;
                            case 'Parser.Reply.value':
                                var $4131 = self.idx;
                                var $4132 = self.code;
                                var self = Kind$Parser$term$($4131, $4132);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4134 = self.idx;
                                        var $4135 = self.code;
                                        var $4136 = self.err;
                                        var $4137 = Parser$Reply$error$($4134, $4135, $4136);
                                        var $4133 = $4137;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4138 = self.idx;
                                        var $4139 = self.code;
                                        var $4140 = self.val;
                                        var self = Parser$maybe$((_idx$15 => _code$16 => {
                                            var self = Kind$Parser$text$("as", _idx$15, _code$16);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4143 = self.idx;
                                                    var $4144 = self.code;
                                                    var $4145 = self.err;
                                                    var $4146 = Parser$Reply$error$($4143, $4144, $4145);
                                                    var $4142 = $4146;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4147 = self.idx;
                                                    var $4148 = self.code;
                                                    var $4149 = Kind$Parser$name1$($4147, $4148);
                                                    var $4142 = $4149;
                                                    break;
                                            };
                                            return $4142;
                                        }), $4138, $4139);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4150 = self.idx;
                                                var $4151 = self.code;
                                                var $4152 = self.err;
                                                var $4153 = Parser$Reply$error$($4150, $4151, $4152);
                                                var $4141 = $4153;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4154 = self.idx;
                                                var $4155 = self.code;
                                                var $4156 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $4154, $4155);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4158 = self.idx;
                                                        var $4159 = self.code;
                                                        var $4160 = self.err;
                                                        var $4161 = Parser$Reply$error$($4158, $4159, $4160);
                                                        var $4157 = $4161;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4162 = self.idx;
                                                        var $4163 = self.code;
                                                        var self = $4156;
                                                        switch (self._) {
                                                            case 'Maybe.some':
                                                                var $4165 = self.value;
                                                                var $4166 = $4165;
                                                                var _name$21 = $4166;
                                                                break;
                                                            case 'Maybe.none':
                                                                var self = Kind$Term$reduce$($4140, Kind$Map$new);
                                                                switch (self._) {
                                                                    case 'Kind.Term.var':
                                                                        var $4168 = self.name;
                                                                        var $4169 = $4168;
                                                                        var $4167 = $4169;
                                                                        break;
                                                                    case 'Kind.Term.ref':
                                                                        var $4170 = self.name;
                                                                        var $4171 = $4170;
                                                                        var $4167 = $4171;
                                                                        break;
                                                                    case 'Kind.Term.typ':
                                                                    case 'Kind.Term.all':
                                                                    case 'Kind.Term.lam':
                                                                    case 'Kind.Term.app':
                                                                    case 'Kind.Term.let':
                                                                    case 'Kind.Term.def':
                                                                    case 'Kind.Term.ann':
                                                                    case 'Kind.Term.gol':
                                                                    case 'Kind.Term.hol':
                                                                    case 'Kind.Term.nat':
                                                                    case 'Kind.Term.chr':
                                                                    case 'Kind.Term.str':
                                                                    case 'Kind.Term.cse':
                                                                    case 'Kind.Term.ori':
                                                                        var $4172 = Kind$Name$read$("self");
                                                                        var $4167 = $4172;
                                                                        break;
                                                                };
                                                                var _name$21 = $4167;
                                                                break;
                                                        };
                                                        var _wyth$22 = List$nil;
                                                        var self = Kind$Parser$term$($4162, $4163);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4173 = self.idx;
                                                                var $4174 = self.code;
                                                                var $4175 = self.err;
                                                                var $4176 = Parser$Reply$error$($4173, $4174, $4175);
                                                                var $4164 = $4176;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4177 = self.idx;
                                                                var $4178 = self.code;
                                                                var $4179 = self.val;
                                                                var _cses$26 = Kind$Map$set$("_", $4179, Kind$Map$new);
                                                                var _moti$27 = Maybe$some$(Kind$Term$hol$(Bits$e));
                                                                var self = Kind$Parser$stop$($4118, $4177, $4178);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $4181 = self.idx;
                                                                        var $4182 = self.code;
                                                                        var $4183 = self.err;
                                                                        var $4184 = Parser$Reply$error$($4181, $4182, $4183);
                                                                        var $4180 = $4184;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $4185 = self.idx;
                                                                        var $4186 = self.code;
                                                                        var $4187 = self.val;
                                                                        var $4188 = Parser$Reply$value$($4185, $4186, Kind$Term$ori$($4187, Kind$Term$cse$(Bits$e, $4140, _name$21, _wyth$22, _cses$26, _moti$27)));
                                                                        var $4180 = $4188;
                                                                        break;
                                                                };
                                                                var $4164 = $4180;
                                                                break;
                                                        };
                                                        var $4157 = $4164;
                                                        break;
                                                };
                                                var $4141 = $4157;
                                                break;
                                        };
                                        var $4133 = $4141;
                                        break;
                                };
                                var $4126 = $4133;
                                break;
                        };
                        var $4119 = $4126;
                        break;
                };
                var $4111 = $4119;
                break;
        };
        return $4111;
    };
    const Kind$Parser$open = x0 => x1 => Kind$Parser$open$(x0, x1);

    function Kind$Parser$without$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4190 = self.idx;
                var $4191 = self.code;
                var $4192 = self.err;
                var $4193 = Parser$Reply$error$($4190, $4191, $4192);
                var $4189 = $4193;
                break;
            case 'Parser.Reply.value':
                var $4194 = self.idx;
                var $4195 = self.code;
                var $4196 = self.val;
                var self = Kind$Parser$text$("without ", $4194, $4195);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4198 = self.idx;
                        var $4199 = self.code;
                        var $4200 = self.err;
                        var $4201 = Parser$Reply$error$($4198, $4199, $4200);
                        var $4197 = $4201;
                        break;
                    case 'Parser.Reply.value':
                        var $4202 = self.idx;
                        var $4203 = self.code;
                        var self = Kind$Parser$name1$($4202, $4203);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4205 = self.idx;
                                var $4206 = self.code;
                                var $4207 = self.err;
                                var $4208 = Parser$Reply$error$($4205, $4206, $4207);
                                var $4204 = $4208;
                                break;
                            case 'Parser.Reply.value':
                                var $4209 = self.idx;
                                var $4210 = self.code;
                                var $4211 = self.val;
                                var self = Kind$Parser$text$(":", $4209, $4210);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4213 = self.idx;
                                        var $4214 = self.code;
                                        var $4215 = self.err;
                                        var $4216 = Parser$Reply$error$($4213, $4214, $4215);
                                        var $4212 = $4216;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4217 = self.idx;
                                        var $4218 = self.code;
                                        var self = Kind$Parser$term$($4217, $4218);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4220 = self.idx;
                                                var $4221 = self.code;
                                                var $4222 = self.err;
                                                var $4223 = Parser$Reply$error$($4220, $4221, $4222);
                                                var $4219 = $4223;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4224 = self.idx;
                                                var $4225 = self.code;
                                                var $4226 = self.val;
                                                var self = Kind$Parser$term$($4224, $4225);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4228 = self.idx;
                                                        var $4229 = self.code;
                                                        var $4230 = self.err;
                                                        var $4231 = Parser$Reply$error$($4228, $4229, $4230);
                                                        var $4227 = $4231;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4232 = self.idx;
                                                        var $4233 = self.code;
                                                        var $4234 = self.val;
                                                        var self = Kind$Parser$stop$($4196, $4232, $4233);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4236 = self.idx;
                                                                var $4237 = self.code;
                                                                var $4238 = self.err;
                                                                var $4239 = Parser$Reply$error$($4236, $4237, $4238);
                                                                var $4235 = $4239;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4240 = self.idx;
                                                                var $4241 = self.code;
                                                                var $4242 = self.val;
                                                                var _term$24 = Kind$Term$ref$($4211);
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$lam$("x", (_x$25 => {
                                                                    var $4244 = Kind$Term$hol$(Bits$e);
                                                                    return $4244;
                                                                })));
                                                                var _term$26 = Kind$Term$app$(_term$25, $4226);
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$lam$($4211, (_x$27 => {
                                                                    var $4245 = $4234;
                                                                    return $4245;
                                                                })));
                                                                var $4243 = Parser$Reply$value$($4240, $4241, Kind$Term$ori$($4242, _term$27));
                                                                var $4235 = $4243;
                                                                break;
                                                        };
                                                        var $4227 = $4235;
                                                        break;
                                                };
                                                var $4219 = $4227;
                                                break;
                                        };
                                        var $4212 = $4219;
                                        break;
                                };
                                var $4204 = $4212;
                                break;
                        };
                        var $4197 = $4204;
                        break;
                };
                var $4189 = $4197;
                break;
        };
        return $4189;
    };
    const Kind$Parser$without = x0 => x1 => Kind$Parser$without$(x0, x1);

    function Kind$Parser$switch$case$(_idx$1, _code$2) {
        var self = Kind$Parser$term$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4247 = self.idx;
                var $4248 = self.code;
                var $4249 = self.err;
                var $4250 = Parser$Reply$error$($4247, $4248, $4249);
                var $4246 = $4250;
                break;
            case 'Parser.Reply.value':
                var $4251 = self.idx;
                var $4252 = self.code;
                var $4253 = self.val;
                var self = Kind$Parser$text$(":", $4251, $4252);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4255 = self.idx;
                        var $4256 = self.code;
                        var $4257 = self.err;
                        var $4258 = Parser$Reply$error$($4255, $4256, $4257);
                        var $4254 = $4258;
                        break;
                    case 'Parser.Reply.value':
                        var $4259 = self.idx;
                        var $4260 = self.code;
                        var self = Kind$Parser$term$($4259, $4260);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4262 = self.idx;
                                var $4263 = self.code;
                                var $4264 = self.err;
                                var $4265 = Parser$Reply$error$($4262, $4263, $4264);
                                var $4261 = $4265;
                                break;
                            case 'Parser.Reply.value':
                                var $4266 = self.idx;
                                var $4267 = self.code;
                                var $4268 = self.val;
                                var $4269 = Parser$Reply$value$($4266, $4267, Pair$new$($4253, $4268));
                                var $4261 = $4269;
                                break;
                        };
                        var $4254 = $4261;
                        break;
                };
                var $4246 = $4254;
                break;
        };
        return $4246;
    };
    const Kind$Parser$switch$case = x0 => x1 => Kind$Parser$switch$case$(x0, x1);

    function Kind$Parser$switch$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4271 = self.idx;
                var $4272 = self.code;
                var $4273 = self.err;
                var $4274 = Parser$Reply$error$($4271, $4272, $4273);
                var $4270 = $4274;
                break;
            case 'Parser.Reply.value':
                var $4275 = self.idx;
                var $4276 = self.code;
                var $4277 = self.val;
                var self = Kind$Parser$text$("switch ", $4275, $4276);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4279 = self.idx;
                        var $4280 = self.code;
                        var $4281 = self.err;
                        var $4282 = Parser$Reply$error$($4279, $4280, $4281);
                        var $4278 = $4282;
                        break;
                    case 'Parser.Reply.value':
                        var $4283 = self.idx;
                        var $4284 = self.code;
                        var self = Kind$Parser$term$($4283, $4284);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4286 = self.idx;
                                var $4287 = self.code;
                                var $4288 = self.err;
                                var $4289 = Parser$Reply$error$($4286, $4287, $4288);
                                var $4285 = $4289;
                                break;
                            case 'Parser.Reply.value':
                                var $4290 = self.idx;
                                var $4291 = self.code;
                                var $4292 = self.val;
                                var self = Kind$Parser$text$("{", $4290, $4291);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4294 = self.idx;
                                        var $4295 = self.code;
                                        var $4296 = self.err;
                                        var $4297 = Parser$Reply$error$($4294, $4295, $4296);
                                        var $4293 = $4297;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4298 = self.idx;
                                        var $4299 = self.code;
                                        var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$switch$case)($4298)($4299);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4301 = self.idx;
                                                var $4302 = self.code;
                                                var $4303 = self.err;
                                                var $4304 = Parser$Reply$error$($4301, $4302, $4303);
                                                var $4300 = $4304;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4305 = self.idx;
                                                var $4306 = self.code;
                                                var $4307 = self.val;
                                                var self = Kind$Parser$text$("default ", $4305, $4306);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4309 = self.idx;
                                                        var $4310 = self.code;
                                                        var $4311 = self.err;
                                                        var $4312 = Parser$Reply$error$($4309, $4310, $4311);
                                                        var $4308 = $4312;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4313 = self.idx;
                                                        var $4314 = self.code;
                                                        var self = Kind$Parser$term$($4313, $4314);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4316 = self.idx;
                                                                var $4317 = self.code;
                                                                var $4318 = self.err;
                                                                var $4319 = Parser$Reply$error$($4316, $4317, $4318);
                                                                var $4315 = $4319;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4320 = self.idx;
                                                                var $4321 = self.code;
                                                                var $4322 = self.val;
                                                                var self = Kind$Parser$stop$($4277, $4320, $4321);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $4324 = self.idx;
                                                                        var $4325 = self.code;
                                                                        var $4326 = self.err;
                                                                        var $4327 = Parser$Reply$error$($4324, $4325, $4326);
                                                                        var $4323 = $4327;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $4328 = self.idx;
                                                                        var $4329 = self.code;
                                                                        var $4330 = self.val;
                                                                        var _term$27 = List$fold$($4307, $4322, (_cse$27 => _rest$28 => {
                                                                            var self = _cse$27;
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $4333 = self.fst;
                                                                                    var $4334 = self.snd;
                                                                                    var _term$31 = Kind$Term$app$($4292, $4333);
                                                                                    var _term$32 = Kind$Term$app$(_term$31, Kind$Term$lam$("", (_x$32 => {
                                                                                        var $4336 = Kind$Term$hol$(Bits$e);
                                                                                        return $4336;
                                                                                    })));
                                                                                    var _term$33 = Kind$Term$app$(_term$32, $4334);
                                                                                    var _term$34 = Kind$Term$app$(_term$33, _rest$28);
                                                                                    var $4335 = _term$34;
                                                                                    var $4332 = $4335;
                                                                                    break;
                                                                            };
                                                                            return $4332;
                                                                        }));
                                                                        var $4331 = Parser$Reply$value$($4328, $4329, Kind$Term$ori$($4330, _term$27));
                                                                        var $4323 = $4331;
                                                                        break;
                                                                };
                                                                var $4315 = $4323;
                                                                break;
                                                        };
                                                        var $4308 = $4315;
                                                        break;
                                                };
                                                var $4300 = $4308;
                                                break;
                                        };
                                        var $4293 = $4300;
                                        break;
                                };
                                var $4285 = $4293;
                                break;
                        };
                        var $4278 = $4285;
                        break;
                };
                var $4270 = $4278;
                break;
        };
        return $4270;
    };
    const Kind$Parser$switch = x0 => x1 => Kind$Parser$switch$(x0, x1);

    function Bits$tail$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $4338 = self.slice(0, -1);
                var $4339 = $4338;
                var $4337 = $4339;
                break;
            case 'i':
                var $4340 = self.slice(0, -1);
                var $4341 = $4340;
                var $4337 = $4341;
                break;
            case 'e':
                var $4342 = Bits$e;
                var $4337 = $4342;
                break;
        };
        return $4337;
    };
    const Bits$tail = x0 => Bits$tail$(x0);

    function Bits$inc$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $4344 = self.slice(0, -1);
                var $4345 = ($4344 + '1');
                var $4343 = $4345;
                break;
            case 'i':
                var $4346 = self.slice(0, -1);
                var $4347 = (Bits$inc$($4346) + '0');
                var $4343 = $4347;
                break;
            case 'e':
                var $4348 = (Bits$e + '1');
                var $4343 = $4348;
                break;
        };
        return $4343;
    };
    const Bits$inc = x0 => Bits$inc$(x0);
    const Nat$to_bits = a0 => (nat_to_bits(a0));

    function Maybe$is_some$(_m$2) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $4350 = Bool$false;
                var $4349 = $4350;
                break;
            case 'Maybe.some':
                var $4351 = Bool$true;
                var $4349 = $4351;
                break;
        };
        return $4349;
    };
    const Maybe$is_some = x0 => Maybe$is_some$(x0);

    function Kind$Term$gol$(_name$1, _dref$2, _verb$3) {
        var $4352 = ({
            _: 'Kind.Term.gol',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3
        });
        return $4352;
    };
    const Kind$Term$gol = x0 => x1 => x2 => Kind$Term$gol$(x0, x1, x2);

    function Kind$Parser$goal$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4354 = self.idx;
                var $4355 = self.code;
                var $4356 = self.err;
                var $4357 = Parser$Reply$error$($4354, $4355, $4356);
                var $4353 = $4357;
                break;
            case 'Parser.Reply.value':
                var $4358 = self.idx;
                var $4359 = self.code;
                var $4360 = self.val;
                var self = Kind$Parser$text$("?", $4358, $4359);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4362 = self.idx;
                        var $4363 = self.code;
                        var $4364 = self.err;
                        var $4365 = Parser$Reply$error$($4362, $4363, $4364);
                        var $4361 = $4365;
                        break;
                    case 'Parser.Reply.value':
                        var $4366 = self.idx;
                        var $4367 = self.code;
                        var self = Kind$Parser$name$($4366, $4367);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4369 = self.idx;
                                var $4370 = self.code;
                                var $4371 = self.err;
                                var $4372 = Parser$Reply$error$($4369, $4370, $4371);
                                var $4368 = $4372;
                                break;
                            case 'Parser.Reply.value':
                                var $4373 = self.idx;
                                var $4374 = self.code;
                                var $4375 = self.val;
                                var self = Parser$many$((_idx$12 => _code$13 => {
                                    var self = Kind$Parser$text$("-", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4378 = self.idx;
                                            var $4379 = self.code;
                                            var $4380 = self.err;
                                            var $4381 = Parser$Reply$error$($4378, $4379, $4380);
                                            var $4377 = $4381;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4382 = self.idx;
                                            var $4383 = self.code;
                                            var self = Parser$nat$($4382, $4383);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4385 = self.idx;
                                                    var $4386 = self.code;
                                                    var $4387 = self.err;
                                                    var $4388 = Parser$Reply$error$($4385, $4386, $4387);
                                                    var $4384 = $4388;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4389 = self.idx;
                                                    var $4390 = self.code;
                                                    var $4391 = self.val;
                                                    var _bits$20 = Bits$reverse$(Bits$tail$(Bits$reverse$((nat_to_bits($4391)))));
                                                    var $4392 = Parser$Reply$value$($4389, $4390, _bits$20);
                                                    var $4384 = $4392;
                                                    break;
                                            };
                                            var $4377 = $4384;
                                            break;
                                    };
                                    return $4377;
                                }))($4373)($4374);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4393 = self.idx;
                                        var $4394 = self.code;
                                        var $4395 = self.err;
                                        var $4396 = Parser$Reply$error$($4393, $4394, $4395);
                                        var $4376 = $4396;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4397 = self.idx;
                                        var $4398 = self.code;
                                        var $4399 = self.val;
                                        var self = Parser$maybe$(Parser$text("-"), $4397, $4398);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4401 = self.idx;
                                                var $4402 = self.code;
                                                var $4403 = self.err;
                                                var $4404 = Parser$Reply$error$($4401, $4402, $4403);
                                                var self = $4404;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4405 = self.idx;
                                                var $4406 = self.code;
                                                var $4407 = self.val;
                                                var $4408 = Parser$Reply$value$($4405, $4406, Maybe$is_some$($4407));
                                                var self = $4408;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4409 = self.idx;
                                                var $4410 = self.code;
                                                var $4411 = self.err;
                                                var $4412 = Parser$Reply$error$($4409, $4410, $4411);
                                                var $4400 = $4412;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4413 = self.idx;
                                                var $4414 = self.code;
                                                var $4415 = self.val;
                                                var self = Kind$Parser$stop$($4360, $4413, $4414);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4417 = self.idx;
                                                        var $4418 = self.code;
                                                        var $4419 = self.err;
                                                        var $4420 = Parser$Reply$error$($4417, $4418, $4419);
                                                        var $4416 = $4420;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4421 = self.idx;
                                                        var $4422 = self.code;
                                                        var $4423 = self.val;
                                                        var $4424 = Parser$Reply$value$($4421, $4422, Kind$Term$ori$($4423, Kind$Term$gol$($4375, $4399, $4415)));
                                                        var $4416 = $4424;
                                                        break;
                                                };
                                                var $4400 = $4416;
                                                break;
                                        };
                                        var $4376 = $4400;
                                        break;
                                };
                                var $4368 = $4376;
                                break;
                        };
                        var $4361 = $4368;
                        break;
                };
                var $4353 = $4361;
                break;
        };
        return $4353;
    };
    const Kind$Parser$goal = x0 => x1 => Kind$Parser$goal$(x0, x1);

    function Kind$Parser$hole$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4426 = self.idx;
                var $4427 = self.code;
                var $4428 = self.err;
                var $4429 = Parser$Reply$error$($4426, $4427, $4428);
                var $4425 = $4429;
                break;
            case 'Parser.Reply.value':
                var $4430 = self.idx;
                var $4431 = self.code;
                var $4432 = self.val;
                var self = Kind$Parser$text$("_", $4430, $4431);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4434 = self.idx;
                        var $4435 = self.code;
                        var $4436 = self.err;
                        var $4437 = Parser$Reply$error$($4434, $4435, $4436);
                        var $4433 = $4437;
                        break;
                    case 'Parser.Reply.value':
                        var $4438 = self.idx;
                        var $4439 = self.code;
                        var self = Kind$Parser$stop$($4432, $4438, $4439);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4441 = self.idx;
                                var $4442 = self.code;
                                var $4443 = self.err;
                                var $4444 = Parser$Reply$error$($4441, $4442, $4443);
                                var $4440 = $4444;
                                break;
                            case 'Parser.Reply.value':
                                var $4445 = self.idx;
                                var $4446 = self.code;
                                var $4447 = self.val;
                                var $4448 = Parser$Reply$value$($4445, $4446, Kind$Term$ori$($4447, Kind$Term$hol$(Bits$e)));
                                var $4440 = $4448;
                                break;
                        };
                        var $4433 = $4440;
                        break;
                };
                var $4425 = $4433;
                break;
        };
        return $4425;
    };
    const Kind$Parser$hole = x0 => x1 => Kind$Parser$hole$(x0, x1);

    function Kind$Parser$float$sign$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4450 = Parser$Reply$error$(_idx$1, _code$2, "Expected \'+\' or \'-\'.");
            var $4449 = $4450;
        } else {
            var $4451 = self.charCodeAt(0);
            var $4452 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = (($4451 === 43) || ($4451 === 45));
            if (self) {
                var $4454 = Parser$Reply$value$(_sidx$5, $4452, $4451);
                var $4453 = $4454;
            } else {
                var $4455 = Parser$Reply$error$(_idx$1, _code$2, "Expected \'+\' ou \'-\'.");
                var $4453 = $4455;
            };
            var $4449 = $4453;
        };
        return $4449;
    };
    const Kind$Parser$float$sign = x0 => x1 => Kind$Parser$float$sign$(x0, x1);

    function List$any$(_cond$2, _list$3) {
        var List$any$ = (_cond$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_cond$2, _list$3]
        });
        var List$any = _cond$2 => _list$3 => List$any$(_cond$2, _list$3);
        var arg = [_cond$2, _list$3];
        while (true) {
            let [_cond$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.cons':
                        var $4456 = self.head;
                        var $4457 = self.tail;
                        var self = _cond$2($4456);
                        if (self) {
                            var $4459 = Bool$true;
                            var $4458 = $4459;
                        } else {
                            var $4460 = List$any$(_cond$2, $4457);
                            var $4458 = $4460;
                        };
                        return $4458;
                    case 'List.nil':
                        var $4461 = Bool$false;
                        return $4461;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$any = x0 => x1 => List$any$(x0, x1);

    function Kind$Parser$float$str_digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4463 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $4462 = $4463;
        } else {
            var $4464 = self.charCodeAt(0);
            var $4465 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var _digits$6 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$nil)))))))))));
            var self = List$any$(a1 => ($4464 === a1), _digits$6);
            if (self) {
                var $4467 = Parser$Reply$value$(_sidx$5, $4465, $4464);
                var $4466 = $4467;
            } else {
                var $4468 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                var $4466 = $4468;
            };
            var $4462 = $4466;
        };
        return $4462;
    };
    const Kind$Parser$float$str_digit = x0 => x1 => Kind$Parser$float$str_digit$(x0, x1);

    function String$from_list$(_xs$1) {
        var self = _xs$1;
        switch (self._) {
            case 'List.cons':
                var $4470 = self.head;
                var $4471 = self.tail;
                var $4472 = String$cons$($4470, String$from_list$($4471));
                var $4469 = $4472;
                break;
            case 'List.nil':
                var $4473 = String$nil;
                var $4469 = $4473;
                break;
        };
        return $4469;
    };
    const String$from_list = x0 => String$from_list$(x0);

    function Kind$Parser$float$64$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4475 = self.idx;
                var $4476 = self.code;
                var $4477 = self.err;
                var $4478 = Parser$Reply$error$($4475, $4476, $4477);
                var $4474 = $4478;
                break;
            case 'Parser.Reply.value':
                var $4479 = self.idx;
                var $4480 = self.code;
                var $4481 = self.val;
                var self = Parser$maybe$(Kind$Parser$float$sign, $4479, $4480);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4483 = self.idx;
                        var $4484 = self.code;
                        var $4485 = self.err;
                        var $4486 = Parser$Reply$error$($4483, $4484, $4485);
                        var $4482 = $4486;
                        break;
                    case 'Parser.Reply.value':
                        var $4487 = self.idx;
                        var $4488 = self.code;
                        var $4489 = self.val;
                        var _sign$9 = Maybe$default$($4489, 43);
                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4487, $4488);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4491 = self.idx;
                                var $4492 = self.code;
                                var $4493 = self.err;
                                var $4494 = Parser$Reply$error$($4491, $4492, $4493);
                                var $4490 = $4494;
                                break;
                            case 'Parser.Reply.value':
                                var $4495 = self.idx;
                                var $4496 = self.code;
                                var $4497 = self.val;
                                var self = Parser$text$(".", $4495, $4496);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4499 = self.idx;
                                        var $4500 = self.code;
                                        var $4501 = self.err;
                                        var $4502 = Parser$Reply$error$($4499, $4500, $4501);
                                        var $4498 = $4502;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4503 = self.idx;
                                        var $4504 = self.code;
                                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4503, $4504);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4506 = self.idx;
                                                var $4507 = self.code;
                                                var $4508 = self.err;
                                                var $4509 = Parser$Reply$error$($4506, $4507, $4508);
                                                var $4505 = $4509;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4510 = self.idx;
                                                var $4511 = self.code;
                                                var $4512 = self.val;
                                                var self = Parser$text$("#64", $4510, $4511);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4514 = self.idx;
                                                        var $4515 = self.code;
                                                        var $4516 = self.err;
                                                        var $4517 = Parser$Reply$error$($4514, $4515, $4516);
                                                        var $4513 = $4517;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4518 = self.idx;
                                                        var $4519 = self.code;
                                                        var _float_str$22 = Kind$Term$str$((String$cons$(_sign$9, String$from_list$($4497)) + ("." + String$from_list$($4512))));
                                                        var _conv$23 = Kind$Term$ref$("F64.parse");
                                                        var _term$24 = Kind$Term$app$(_conv$23, _float_str$22);
                                                        var self = Kind$Parser$stop$($4481, $4518, $4519);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4521 = self.idx;
                                                                var $4522 = self.code;
                                                                var $4523 = self.err;
                                                                var $4524 = Parser$Reply$error$($4521, $4522, $4523);
                                                                var $4520 = $4524;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4525 = self.idx;
                                                                var $4526 = self.code;
                                                                var $4527 = self.val;
                                                                var $4528 = Parser$Reply$value$($4525, $4526, Kind$Term$ori$($4527, _term$24));
                                                                var $4520 = $4528;
                                                                break;
                                                        };
                                                        var $4513 = $4520;
                                                        break;
                                                };
                                                var $4505 = $4513;
                                                break;
                                        };
                                        var $4498 = $4505;
                                        break;
                                };
                                var $4490 = $4498;
                                break;
                        };
                        var $4482 = $4490;
                        break;
                };
                var $4474 = $4482;
                break;
        };
        return $4474;
    };
    const Kind$Parser$float$64 = x0 => x1 => Kind$Parser$float$64$(x0, x1);

    function Kind$Parser$float$32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4530 = self.idx;
                var $4531 = self.code;
                var $4532 = self.err;
                var $4533 = Parser$Reply$error$($4530, $4531, $4532);
                var $4529 = $4533;
                break;
            case 'Parser.Reply.value':
                var $4534 = self.idx;
                var $4535 = self.code;
                var $4536 = self.val;
                var self = Parser$maybe$(Kind$Parser$float$sign, $4534, $4535);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4538 = self.idx;
                        var $4539 = self.code;
                        var $4540 = self.err;
                        var $4541 = Parser$Reply$error$($4538, $4539, $4540);
                        var $4537 = $4541;
                        break;
                    case 'Parser.Reply.value':
                        var $4542 = self.idx;
                        var $4543 = self.code;
                        var $4544 = self.val;
                        var _sign$9 = Maybe$default$($4544, 43);
                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4542, $4543);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4546 = self.idx;
                                var $4547 = self.code;
                                var $4548 = self.err;
                                var $4549 = Parser$Reply$error$($4546, $4547, $4548);
                                var $4545 = $4549;
                                break;
                            case 'Parser.Reply.value':
                                var $4550 = self.idx;
                                var $4551 = self.code;
                                var $4552 = self.val;
                                var self = Parser$text$(".", $4550, $4551);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4554 = self.idx;
                                        var $4555 = self.code;
                                        var $4556 = self.err;
                                        var $4557 = Parser$Reply$error$($4554, $4555, $4556);
                                        var $4553 = $4557;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4558 = self.idx;
                                        var $4559 = self.code;
                                        var self = Parser$many1$(Kind$Parser$float$str_digit, $4558, $4559);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4561 = self.idx;
                                                var $4562 = self.code;
                                                var $4563 = self.err;
                                                var $4564 = Parser$Reply$error$($4561, $4562, $4563);
                                                var $4560 = $4564;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4565 = self.idx;
                                                var $4566 = self.code;
                                                var $4567 = self.val;
                                                var self = Parser$text$("#32", $4565, $4566);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4569 = self.idx;
                                                        var $4570 = self.code;
                                                        var $4571 = self.err;
                                                        var $4572 = Parser$Reply$error$($4569, $4570, $4571);
                                                        var $4568 = $4572;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4573 = self.idx;
                                                        var $4574 = self.code;
                                                        var _float_str$22 = Kind$Term$str$((String$cons$(_sign$9, String$from_list$($4552)) + ("." + String$from_list$($4567))));
                                                        var _conv$23 = Kind$Term$ref$("F32.parse");
                                                        var _term$24 = Kind$Term$app$(_conv$23, _float_str$22);
                                                        var self = Kind$Parser$stop$($4536, $4573, $4574);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4576 = self.idx;
                                                                var $4577 = self.code;
                                                                var $4578 = self.err;
                                                                var $4579 = Parser$Reply$error$($4576, $4577, $4578);
                                                                var $4575 = $4579;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4580 = self.idx;
                                                                var $4581 = self.code;
                                                                var $4582 = self.val;
                                                                var $4583 = Parser$Reply$value$($4580, $4581, Kind$Term$ori$($4582, _term$24));
                                                                var $4575 = $4583;
                                                                break;
                                                        };
                                                        var $4568 = $4575;
                                                        break;
                                                };
                                                var $4560 = $4568;
                                                break;
                                        };
                                        var $4553 = $4560;
                                        break;
                                };
                                var $4545 = $4553;
                                break;
                        };
                        var $4537 = $4545;
                        break;
                };
                var $4529 = $4537;
                break;
        };
        return $4529;
    };
    const Kind$Parser$float$32 = x0 => x1 => Kind$Parser$float$32$(x0, x1);

    function Either$(_A$1, _B$2) {
        var $4584 = null;
        return $4584;
    };
    const Either = x0 => x1 => Either$(x0, x1);

    function Either$left$(_value$3) {
        var $4585 = ({
            _: 'Either.left',
            'value': _value$3
        });
        return $4585;
    };
    const Either$left = x0 => Either$left$(x0);

    function Either$right$(_value$3) {
        var $4586 = ({
            _: 'Either.right',
            'value': _value$3
        });
        return $4586;
    };
    const Either$right = x0 => Either$right$(x0);

    function Nat$sub_rem$(_n$1, _m$2) {
        var Nat$sub_rem$ = (_n$1, _m$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2]
        });
        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);
        var arg = [_n$1, _m$2];
        while (true) {
            let [_n$1, _m$2] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4587 = Either$left$(_n$1);
                    return $4587;
                } else {
                    var $4588 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4590 = Either$right$(Nat$succ$($4588));
                        var $4589 = $4590;
                    } else {
                        var $4591 = (self - 1n);
                        var $4592 = Nat$sub_rem$($4591, $4588);
                        var $4589 = $4592;
                    };
                    return $4589;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);

    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {
        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _d$3]
        });
        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);
        var arg = [_n$1, _m$2, _d$3];
        while (true) {
            let [_n$1, _m$2, _d$3] = arg;
            var R = (() => {
                var self = Nat$sub_rem$(_n$1, _m$2);
                switch (self._) {
                    case 'Either.left':
                        var $4593 = self.value;
                        var $4594 = Nat$div_mod$go$($4593, _m$2, Nat$succ$(_d$3));
                        return $4594;
                    case 'Either.right':
                        var $4595 = Pair$new$(_d$3, _n$1);
                        return $4595;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);
    const Nat$div_mod = a0 => a1 => (({
        _: 'Pair.new',
        'fst': a0 / a1,
        'snd': a0 % a1
    }));

    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {
        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_base$1, _nat$2, _res$3]
        });
        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);
        var arg = [_base$1, _nat$2, _res$3];
        while (true) {
            let [_base$1, _nat$2, _res$3] = arg;
            var R = (() => {
                var self = (({
                    _: 'Pair.new',
                    'fst': _nat$2 / _base$1,
                    'snd': _nat$2 % _base$1
                }));
                switch (self._) {
                    case 'Pair.new':
                        var $4596 = self.fst;
                        var $4597 = self.snd;
                        var self = $4596;
                        if (self === 0n) {
                            var $4599 = List$cons$($4597, _res$3);
                            var $4598 = $4599;
                        } else {
                            var $4600 = (self - 1n);
                            var $4601 = Nat$to_base$go$(_base$1, $4596, List$cons$($4597, _res$3));
                            var $4598 = $4601;
                        };
                        return $4598;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);

    function Nat$to_base$(_base$1, _nat$2) {
        var $4602 = Nat$to_base$go$(_base$1, _nat$2, List$nil);
        return $4602;
    };
    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);

    function Nat$mod$go$(_n$1, _m$2, _r$3) {
        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _r$3]
        });
        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);
        var arg = [_n$1, _m$2, _r$3];
        while (true) {
            let [_n$1, _m$2, _r$3] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4603 = Nat$mod$go$(_n$1, _r$3, _m$2);
                    return $4603;
                } else {
                    var $4604 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4606 = _r$3;
                        var $4605 = $4606;
                    } else {
                        var $4607 = (self - 1n);
                        var $4608 = Nat$mod$go$($4607, $4604, Nat$succ$(_r$3));
                        var $4605 = $4608;
                    };
                    return $4605;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);
    const Nat$mod = a0 => a1 => (a0 % a1);
    const Nat$lte = a0 => a1 => (a0 <= a1);

    function List$at$(_index$2, _list$3) {
        var List$at$ = (_index$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_index$2, _list$3]
        });
        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);
        var arg = [_index$2, _list$3];
        while (true) {
            let [_index$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.cons':
                        var $4609 = self.head;
                        var $4610 = self.tail;
                        var self = _index$2;
                        if (self === 0n) {
                            var $4612 = Maybe$some$($4609);
                            var $4611 = $4612;
                        } else {
                            var $4613 = (self - 1n);
                            var $4614 = List$at$($4613, $4610);
                            var $4611 = $4614;
                        };
                        return $4611;
                    case 'List.nil':
                        var $4615 = Maybe$none;
                        return $4615;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$at = x0 => x1 => List$at$(x0, x1);

    function Nat$show_digit$(_base$1, _n$2) {
        var _m$3 = (_n$2 % _base$1);
        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
        var self = ((_base$1 > 0n) && (_base$1 <= 64n));
        if (self) {
            var self = List$at$(_m$3, _base64$4);
            switch (self._) {
                case 'Maybe.some':
                    var $4618 = self.value;
                    var $4619 = $4618;
                    var $4617 = $4619;
                    break;
                case 'Maybe.none':
                    var $4620 = 35;
                    var $4617 = $4620;
                    break;
            };
            var $4616 = $4617;
        } else {
            var $4621 = 35;
            var $4616 = $4621;
        };
        return $4616;
    };
    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);

    function Nat$to_string_base$(_base$1, _nat$2) {
        var $4622 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {
            var $4623 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);
            return $4623;
        }));
        return $4622;
    };
    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);

    function Nat$show$(_n$1) {
        var $4624 = Nat$to_string_base$(10n, _n$1);
        return $4624;
    };
    const Nat$show = x0 => Nat$show$(x0);

    function Kind$Parser$int_pos$(_idx$1, _code$2) {
        var self = Parser$text$("+", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4626 = self.idx;
                var $4627 = self.code;
                var $4628 = self.err;
                var $4629 = Parser$Reply$error$($4626, $4627, $4628);
                var $4625 = $4629;
                break;
            case 'Parser.Reply.value':
                var $4630 = self.idx;
                var $4631 = self.code;
                var self = Parser$many1$(Parser$digit, $4630, $4631);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4633 = self.idx;
                        var $4634 = self.code;
                        var $4635 = self.err;
                        var $4636 = Parser$Reply$error$($4633, $4634, $4635);
                        var $4632 = $4636;
                        break;
                    case 'Parser.Reply.value':
                        var $4637 = self.idx;
                        var $4638 = self.code;
                        var $4639 = self.val;
                        var $4640 = Parser$Reply$value$($4637, $4638, Pair$new$(Bool$true, Nat$from_base$(10n, $4639)));
                        var $4632 = $4640;
                        break;
                };
                var $4625 = $4632;
                break;
        };
        return $4625;
    };
    const Kind$Parser$int_pos = x0 => x1 => Kind$Parser$int_pos$(x0, x1);

    function Kind$Parser$int_neg$(_idx$1, _code$2) {
        var self = Parser$text$("-", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4642 = self.idx;
                var $4643 = self.code;
                var $4644 = self.err;
                var $4645 = Parser$Reply$error$($4642, $4643, $4644);
                var $4641 = $4645;
                break;
            case 'Parser.Reply.value':
                var $4646 = self.idx;
                var $4647 = self.code;
                var self = Parser$many1$(Parser$digit, $4646, $4647);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4649 = self.idx;
                        var $4650 = self.code;
                        var $4651 = self.err;
                        var $4652 = Parser$Reply$error$($4649, $4650, $4651);
                        var $4648 = $4652;
                        break;
                    case 'Parser.Reply.value':
                        var $4653 = self.idx;
                        var $4654 = self.code;
                        var $4655 = self.val;
                        var $4656 = Parser$Reply$value$($4653, $4654, Pair$new$(Bool$false, Nat$from_base$(10n, $4655)));
                        var $4648 = $4656;
                        break;
                };
                var $4641 = $4648;
                break;
        };
        return $4641;
    };
    const Kind$Parser$int_neg = x0 => x1 => Kind$Parser$int_neg$(x0, x1);

    function Kind$Parser$int$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4658 = self.idx;
                var $4659 = self.code;
                var $4660 = self.err;
                var $4661 = Parser$Reply$error$($4658, $4659, $4660);
                var $4657 = $4661;
                break;
            case 'Parser.Reply.value':
                var $4662 = self.idx;
                var $4663 = self.code;
                var $4664 = self.val;
                var self = Kind$Parser$spaces($4662)($4663);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4666 = self.idx;
                        var $4667 = self.code;
                        var $4668 = self.err;
                        var $4669 = Parser$Reply$error$($4666, $4667, $4668);
                        var $4665 = $4669;
                        break;
                    case 'Parser.Reply.value':
                        var $4670 = self.idx;
                        var $4671 = self.code;
                        var self = Parser$first_of$(List$cons$(Kind$Parser$int_pos, List$cons$(Kind$Parser$int_neg, List$nil)))($4670)($4671);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4673 = self.idx;
                                var $4674 = self.code;
                                var $4675 = self.err;
                                var $4676 = Parser$Reply$error$($4673, $4674, $4675);
                                var $4672 = $4676;
                                break;
                            case 'Parser.Reply.value':
                                var $4677 = self.idx;
                                var $4678 = self.code;
                                var $4679 = self.val;
                                var self = $4679;
                                switch (self._) {
                                    case 'Pair.new':
                                        var $4681 = self.fst;
                                        var $4682 = self.snd;
                                        var _ret$14 = Kind$Term$ref$("Int.from_nat");
                                        var _ret$15 = Kind$Term$app$(_ret$14, Kind$Term$nat$($4682));
                                        var self = $4681;
                                        if (self) {
                                            var $4684 = _ret$15;
                                            var $4683 = $4684;
                                        } else {
                                            var _inv$16 = Kind$Term$ref$("Int.neg");
                                            var $4685 = Kind$Term$app$(_inv$16, _ret$15);
                                            var $4683 = $4685;
                                        };
                                        var _term$12 = $4683;
                                        break;
                                };
                                var self = Kind$Parser$stop$($4664, $4677, $4678);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4686 = self.idx;
                                        var $4687 = self.code;
                                        var $4688 = self.err;
                                        var $4689 = Parser$Reply$error$($4686, $4687, $4688);
                                        var $4680 = $4689;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4690 = self.idx;
                                        var $4691 = self.code;
                                        var $4692 = self.val;
                                        var $4693 = Parser$Reply$value$($4690, $4691, Kind$Term$ori$($4692, _term$12));
                                        var $4680 = $4693;
                                        break;
                                };
                                var $4672 = $4680;
                                break;
                        };
                        var $4665 = $4672;
                        break;
                };
                var $4657 = $4665;
                break;
        };
        return $4657;
    };
    const Kind$Parser$int = x0 => x1 => Kind$Parser$int$(x0, x1);

    function Kind$Parser$machine_integer$signed$(_size$1) {
        var _size_str$2 = Nat$show$(_size$1);
        var $4694 = (_idx$3 => _code$4 => {
            var self = Kind$Parser$init$(_idx$3, _code$4);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $4696 = self.idx;
                    var $4697 = self.code;
                    var $4698 = self.err;
                    var $4699 = Parser$Reply$error$($4696, $4697, $4698);
                    var $4695 = $4699;
                    break;
                case 'Parser.Reply.value':
                    var $4700 = self.idx;
                    var $4701 = self.code;
                    var $4702 = self.val;
                    var self = Kind$Parser$spaces($4700)($4701);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $4704 = self.idx;
                            var $4705 = self.code;
                            var $4706 = self.err;
                            var $4707 = Parser$Reply$error$($4704, $4705, $4706);
                            var $4703 = $4707;
                            break;
                        case 'Parser.Reply.value':
                            var $4708 = self.idx;
                            var $4709 = self.code;
                            var self = Kind$Parser$int$($4708, $4709);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4711 = self.idx;
                                    var $4712 = self.code;
                                    var $4713 = self.err;
                                    var $4714 = Parser$Reply$error$($4711, $4712, $4713);
                                    var $4710 = $4714;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4715 = self.idx;
                                    var $4716 = self.code;
                                    var $4717 = self.val;
                                    var self = Parser$text$(("#" + _size_str$2), $4715, $4716);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4719 = self.idx;
                                            var $4720 = self.code;
                                            var $4721 = self.err;
                                            var $4722 = Parser$Reply$error$($4719, $4720, $4721);
                                            var $4718 = $4722;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4723 = self.idx;
                                            var $4724 = self.code;
                                            var _term$17 = Kind$Term$ref$(("Int.to_i" + _size_str$2));
                                            var _term$18 = Kind$Term$app$(_term$17, $4717);
                                            var self = Kind$Parser$stop$($4702, $4723, $4724);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4726 = self.idx;
                                                    var $4727 = self.code;
                                                    var $4728 = self.err;
                                                    var $4729 = Parser$Reply$error$($4726, $4727, $4728);
                                                    var $4725 = $4729;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4730 = self.idx;
                                                    var $4731 = self.code;
                                                    var $4732 = self.val;
                                                    var $4733 = Parser$Reply$value$($4730, $4731, Kind$Term$ori$($4732, _term$18));
                                                    var $4725 = $4733;
                                                    break;
                                            };
                                            var $4718 = $4725;
                                            break;
                                    };
                                    var $4710 = $4718;
                                    break;
                            };
                            var $4703 = $4710;
                            break;
                    };
                    var $4695 = $4703;
                    break;
            };
            return $4695;
        });
        return $4694;
    };
    const Kind$Parser$machine_integer$signed = x0 => Kind$Parser$machine_integer$signed$(x0);

    function Parser$hex_digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4735 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $4734 = $4735;
        } else {
            var $4736 = self.charCodeAt(0);
            var $4737 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($4736 === 48);
            if (self) {
                var $4739 = Parser$Reply$value$(_sidx$5, $4737, 0n);
                var $4738 = $4739;
            } else {
                var self = ($4736 === 49);
                if (self) {
                    var $4741 = Parser$Reply$value$(_sidx$5, $4737, 1n);
                    var $4740 = $4741;
                } else {
                    var self = ($4736 === 50);
                    if (self) {
                        var $4743 = Parser$Reply$value$(_sidx$5, $4737, 2n);
                        var $4742 = $4743;
                    } else {
                        var self = ($4736 === 51);
                        if (self) {
                            var $4745 = Parser$Reply$value$(_sidx$5, $4737, 3n);
                            var $4744 = $4745;
                        } else {
                            var self = ($4736 === 52);
                            if (self) {
                                var $4747 = Parser$Reply$value$(_sidx$5, $4737, 4n);
                                var $4746 = $4747;
                            } else {
                                var self = ($4736 === 53);
                                if (self) {
                                    var $4749 = Parser$Reply$value$(_sidx$5, $4737, 5n);
                                    var $4748 = $4749;
                                } else {
                                    var self = ($4736 === 54);
                                    if (self) {
                                        var $4751 = Parser$Reply$value$(_sidx$5, $4737, 6n);
                                        var $4750 = $4751;
                                    } else {
                                        var self = ($4736 === 55);
                                        if (self) {
                                            var $4753 = Parser$Reply$value$(_sidx$5, $4737, 7n);
                                            var $4752 = $4753;
                                        } else {
                                            var self = ($4736 === 56);
                                            if (self) {
                                                var $4755 = Parser$Reply$value$(_sidx$5, $4737, 8n);
                                                var $4754 = $4755;
                                            } else {
                                                var self = ($4736 === 57);
                                                if (self) {
                                                    var $4757 = Parser$Reply$value$(_sidx$5, $4737, 9n);
                                                    var $4756 = $4757;
                                                } else {
                                                    var self = ($4736 === 97);
                                                    if (self) {
                                                        var $4759 = Parser$Reply$value$(_sidx$5, $4737, 10n);
                                                        var $4758 = $4759;
                                                    } else {
                                                        var self = ($4736 === 98);
                                                        if (self) {
                                                            var $4761 = Parser$Reply$value$(_sidx$5, $4737, 11n);
                                                            var $4760 = $4761;
                                                        } else {
                                                            var self = ($4736 === 99);
                                                            if (self) {
                                                                var $4763 = Parser$Reply$value$(_sidx$5, $4737, 12n);
                                                                var $4762 = $4763;
                                                            } else {
                                                                var self = ($4736 === 100);
                                                                if (self) {
                                                                    var $4765 = Parser$Reply$value$(_sidx$5, $4737, 13n);
                                                                    var $4764 = $4765;
                                                                } else {
                                                                    var self = ($4736 === 101);
                                                                    if (self) {
                                                                        var $4767 = Parser$Reply$value$(_sidx$5, $4737, 14n);
                                                                        var $4766 = $4767;
                                                                    } else {
                                                                        var self = ($4736 === 102);
                                                                        if (self) {
                                                                            var $4769 = Parser$Reply$value$(_sidx$5, $4737, 15n);
                                                                            var $4768 = $4769;
                                                                        } else {
                                                                            var self = ($4736 === 65);
                                                                            if (self) {
                                                                                var $4771 = Parser$Reply$value$(_sidx$5, $4737, 10n);
                                                                                var $4770 = $4771;
                                                                            } else {
                                                                                var self = ($4736 === 66);
                                                                                if (self) {
                                                                                    var $4773 = Parser$Reply$value$(_sidx$5, $4737, 11n);
                                                                                    var $4772 = $4773;
                                                                                } else {
                                                                                    var self = ($4736 === 67);
                                                                                    if (self) {
                                                                                        var $4775 = Parser$Reply$value$(_sidx$5, $4737, 12n);
                                                                                        var $4774 = $4775;
                                                                                    } else {
                                                                                        var self = ($4736 === 68);
                                                                                        if (self) {
                                                                                            var $4777 = Parser$Reply$value$(_sidx$5, $4737, 13n);
                                                                                            var $4776 = $4777;
                                                                                        } else {
                                                                                            var self = ($4736 === 69);
                                                                                            if (self) {
                                                                                                var $4779 = Parser$Reply$value$(_sidx$5, $4737, 14n);
                                                                                                var $4778 = $4779;
                                                                                            } else {
                                                                                                var self = ($4736 === 70);
                                                                                                if (self) {
                                                                                                    var $4781 = Parser$Reply$value$(_sidx$5, $4737, 15n);
                                                                                                    var $4780 = $4781;
                                                                                                } else {
                                                                                                    var $4782 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                                                                    var $4780 = $4782;
                                                                                                };
                                                                                                var $4778 = $4780;
                                                                                            };
                                                                                            var $4776 = $4778;
                                                                                        };
                                                                                        var $4774 = $4776;
                                                                                    };
                                                                                    var $4772 = $4774;
                                                                                };
                                                                                var $4770 = $4772;
                                                                            };
                                                                            var $4768 = $4770;
                                                                        };
                                                                        var $4766 = $4768;
                                                                    };
                                                                    var $4764 = $4766;
                                                                };
                                                                var $4762 = $4764;
                                                            };
                                                            var $4760 = $4762;
                                                        };
                                                        var $4758 = $4760;
                                                    };
                                                    var $4756 = $4758;
                                                };
                                                var $4754 = $4756;
                                            };
                                            var $4752 = $4754;
                                        };
                                        var $4750 = $4752;
                                    };
                                    var $4748 = $4750;
                                };
                                var $4746 = $4748;
                            };
                            var $4744 = $4746;
                        };
                        var $4742 = $4744;
                    };
                    var $4740 = $4742;
                };
                var $4738 = $4740;
            };
            var $4734 = $4738;
        };
        return $4734;
    };
    const Parser$hex_digit = x0 => x1 => Parser$hex_digit$(x0, x1);

    function Parser$hex_nat$(_idx$1, _code$2) {
        var self = Parser$text$("0x", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4784 = self.idx;
                var $4785 = self.code;
                var $4786 = self.err;
                var $4787 = Parser$Reply$error$($4784, $4785, $4786);
                var $4783 = $4787;
                break;
            case 'Parser.Reply.value':
                var $4788 = self.idx;
                var $4789 = self.code;
                var self = Parser$many1$(Parser$hex_digit, $4788, $4789);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4791 = self.idx;
                        var $4792 = self.code;
                        var $4793 = self.err;
                        var $4794 = Parser$Reply$error$($4791, $4792, $4793);
                        var $4790 = $4794;
                        break;
                    case 'Parser.Reply.value':
                        var $4795 = self.idx;
                        var $4796 = self.code;
                        var $4797 = self.val;
                        var $4798 = Parser$Reply$value$($4795, $4796, Nat$from_base$(16n, $4797));
                        var $4790 = $4798;
                        break;
                };
                var $4783 = $4790;
                break;
        };
        return $4783;
    };
    const Parser$hex_nat = x0 => x1 => Parser$hex_nat$(x0, x1);

    function Kind$Parser$nat$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4800 = self.idx;
                var $4801 = self.code;
                var $4802 = self.err;
                var $4803 = Parser$Reply$error$($4800, $4801, $4802);
                var $4799 = $4803;
                break;
            case 'Parser.Reply.value':
                var $4804 = self.idx;
                var $4805 = self.code;
                var $4806 = self.val;
                var self = Kind$Parser$spaces($4804)($4805);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4808 = self.idx;
                        var $4809 = self.code;
                        var $4810 = self.err;
                        var $4811 = Parser$Reply$error$($4808, $4809, $4810);
                        var $4807 = $4811;
                        break;
                    case 'Parser.Reply.value':
                        var $4812 = self.idx;
                        var $4813 = self.code;
                        var self = Parser$first_of$(List$cons$(Parser$hex_nat, List$cons$(Parser$nat, List$nil)))($4812)($4813);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4815 = self.idx;
                                var $4816 = self.code;
                                var $4817 = self.err;
                                var $4818 = Parser$Reply$error$($4815, $4816, $4817);
                                var $4814 = $4818;
                                break;
                            case 'Parser.Reply.value':
                                var $4819 = self.idx;
                                var $4820 = self.code;
                                var $4821 = self.val;
                                var self = Kind$Parser$stop$($4806, $4819, $4820);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4823 = self.idx;
                                        var $4824 = self.code;
                                        var $4825 = self.err;
                                        var $4826 = Parser$Reply$error$($4823, $4824, $4825);
                                        var $4822 = $4826;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4827 = self.idx;
                                        var $4828 = self.code;
                                        var $4829 = self.val;
                                        var $4830 = Parser$Reply$value$($4827, $4828, Kind$Term$ori$($4829, Kind$Term$nat$($4821)));
                                        var $4822 = $4830;
                                        break;
                                };
                                var $4814 = $4822;
                                break;
                        };
                        var $4807 = $4814;
                        break;
                };
                var $4799 = $4807;
                break;
        };
        return $4799;
    };
    const Kind$Parser$nat = x0 => x1 => Kind$Parser$nat$(x0, x1);

    function Kind$Parser$machine_integer$unsigned$(_size$1) {
        var _size_str$2 = Nat$show$(_size$1);
        var $4831 = (_idx$3 => _code$4 => {
            var self = Kind$Parser$init$(_idx$3, _code$4);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $4833 = self.idx;
                    var $4834 = self.code;
                    var $4835 = self.err;
                    var $4836 = Parser$Reply$error$($4833, $4834, $4835);
                    var $4832 = $4836;
                    break;
                case 'Parser.Reply.value':
                    var $4837 = self.idx;
                    var $4838 = self.code;
                    var $4839 = self.val;
                    var self = Kind$Parser$spaces($4837)($4838);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $4841 = self.idx;
                            var $4842 = self.code;
                            var $4843 = self.err;
                            var $4844 = Parser$Reply$error$($4841, $4842, $4843);
                            var $4840 = $4844;
                            break;
                        case 'Parser.Reply.value':
                            var $4845 = self.idx;
                            var $4846 = self.code;
                            var self = Kind$Parser$nat$($4845, $4846);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4848 = self.idx;
                                    var $4849 = self.code;
                                    var $4850 = self.err;
                                    var $4851 = Parser$Reply$error$($4848, $4849, $4850);
                                    var $4847 = $4851;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4852 = self.idx;
                                    var $4853 = self.code;
                                    var $4854 = self.val;
                                    var self = Parser$text$(("#" + Nat$show$(_size$1)), $4852, $4853);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4856 = self.idx;
                                            var $4857 = self.code;
                                            var $4858 = self.err;
                                            var $4859 = Parser$Reply$error$($4856, $4857, $4858);
                                            var $4855 = $4859;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4860 = self.idx;
                                            var $4861 = self.code;
                                            var _term$17 = Kind$Term$ref$(("Nat.to_u" + Nat$show$(_size$1)));
                                            var _term$18 = Kind$Term$app$(_term$17, $4854);
                                            var self = Kind$Parser$stop$($4839, $4860, $4861);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4863 = self.idx;
                                                    var $4864 = self.code;
                                                    var $4865 = self.err;
                                                    var $4866 = Parser$Reply$error$($4863, $4864, $4865);
                                                    var $4862 = $4866;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4867 = self.idx;
                                                    var $4868 = self.code;
                                                    var $4869 = self.val;
                                                    var $4870 = Parser$Reply$value$($4867, $4868, Kind$Term$ori$($4869, _term$18));
                                                    var $4862 = $4870;
                                                    break;
                                            };
                                            var $4855 = $4862;
                                            break;
                                    };
                                    var $4847 = $4855;
                                    break;
                            };
                            var $4840 = $4847;
                            break;
                    };
                    var $4832 = $4840;
                    break;
            };
            return $4832;
        });
        return $4831;
    };
    const Kind$Parser$machine_integer$unsigned = x0 => Kind$Parser$machine_integer$unsigned$(x0);

    function Kind$Parser$u64$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4872 = self.idx;
                var $4873 = self.code;
                var $4874 = self.err;
                var $4875 = Parser$Reply$error$($4872, $4873, $4874);
                var $4871 = $4875;
                break;
            case 'Parser.Reply.value':
                var $4876 = self.idx;
                var $4877 = self.code;
                var $4878 = self.val;
                var self = Kind$Parser$spaces($4876)($4877);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4880 = self.idx;
                        var $4881 = self.code;
                        var $4882 = self.err;
                        var $4883 = Parser$Reply$error$($4880, $4881, $4882);
                        var $4879 = $4883;
                        break;
                    case 'Parser.Reply.value':
                        var $4884 = self.idx;
                        var $4885 = self.code;
                        var self = Parser$nat$($4884, $4885);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4887 = self.idx;
                                var $4888 = self.code;
                                var $4889 = self.err;
                                var $4890 = Parser$Reply$error$($4887, $4888, $4889);
                                var $4886 = $4890;
                                break;
                            case 'Parser.Reply.value':
                                var $4891 = self.idx;
                                var $4892 = self.code;
                                var $4893 = self.val;
                                var self = Parser$text$("l", $4891, $4892);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4895 = self.idx;
                                        var $4896 = self.code;
                                        var $4897 = self.err;
                                        var $4898 = Parser$Reply$error$($4895, $4896, $4897);
                                        var $4894 = $4898;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4899 = self.idx;
                                        var $4900 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u64");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4893));
                                        var self = Kind$Parser$stop$($4878, $4899, $4900);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4902 = self.idx;
                                                var $4903 = self.code;
                                                var $4904 = self.err;
                                                var $4905 = Parser$Reply$error$($4902, $4903, $4904);
                                                var $4901 = $4905;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4906 = self.idx;
                                                var $4907 = self.code;
                                                var $4908 = self.val;
                                                var $4909 = Parser$Reply$value$($4906, $4907, Kind$Term$ori$($4908, _term$16));
                                                var $4901 = $4909;
                                                break;
                                        };
                                        var $4894 = $4901;
                                        break;
                                };
                                var $4886 = $4894;
                                break;
                        };
                        var $4879 = $4886;
                        break;
                };
                var $4871 = $4879;
                break;
        };
        return $4871;
    };
    const Kind$Parser$u64 = x0 => x1 => Kind$Parser$u64$(x0, x1);

    function Kind$Parser$u32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4911 = self.idx;
                var $4912 = self.code;
                var $4913 = self.err;
                var $4914 = Parser$Reply$error$($4911, $4912, $4913);
                var $4910 = $4914;
                break;
            case 'Parser.Reply.value':
                var $4915 = self.idx;
                var $4916 = self.code;
                var $4917 = self.val;
                var self = Kind$Parser$spaces($4915)($4916);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4919 = self.idx;
                        var $4920 = self.code;
                        var $4921 = self.err;
                        var $4922 = Parser$Reply$error$($4919, $4920, $4921);
                        var $4918 = $4922;
                        break;
                    case 'Parser.Reply.value':
                        var $4923 = self.idx;
                        var $4924 = self.code;
                        var self = Parser$nat$($4923, $4924);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4926 = self.idx;
                                var $4927 = self.code;
                                var $4928 = self.err;
                                var $4929 = Parser$Reply$error$($4926, $4927, $4928);
                                var $4925 = $4929;
                                break;
                            case 'Parser.Reply.value':
                                var $4930 = self.idx;
                                var $4931 = self.code;
                                var $4932 = self.val;
                                var self = Parser$text$("u", $4930, $4931);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4934 = self.idx;
                                        var $4935 = self.code;
                                        var $4936 = self.err;
                                        var $4937 = Parser$Reply$error$($4934, $4935, $4936);
                                        var $4933 = $4937;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4938 = self.idx;
                                        var $4939 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u32");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4932));
                                        var self = Kind$Parser$stop$($4917, $4938, $4939);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4941 = self.idx;
                                                var $4942 = self.code;
                                                var $4943 = self.err;
                                                var $4944 = Parser$Reply$error$($4941, $4942, $4943);
                                                var $4940 = $4944;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4945 = self.idx;
                                                var $4946 = self.code;
                                                var $4947 = self.val;
                                                var $4948 = Parser$Reply$value$($4945, $4946, Kind$Term$ori$($4947, _term$16));
                                                var $4940 = $4948;
                                                break;
                                        };
                                        var $4933 = $4940;
                                        break;
                                };
                                var $4925 = $4933;
                                break;
                        };
                        var $4918 = $4925;
                        break;
                };
                var $4910 = $4918;
                break;
        };
        return $4910;
    };
    const Kind$Parser$u32 = x0 => x1 => Kind$Parser$u32$(x0, x1);

    function Kind$Parser$u16$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4950 = self.idx;
                var $4951 = self.code;
                var $4952 = self.err;
                var $4953 = Parser$Reply$error$($4950, $4951, $4952);
                var $4949 = $4953;
                break;
            case 'Parser.Reply.value':
                var $4954 = self.idx;
                var $4955 = self.code;
                var $4956 = self.val;
                var self = Kind$Parser$spaces($4954)($4955);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4958 = self.idx;
                        var $4959 = self.code;
                        var $4960 = self.err;
                        var $4961 = Parser$Reply$error$($4958, $4959, $4960);
                        var $4957 = $4961;
                        break;
                    case 'Parser.Reply.value':
                        var $4962 = self.idx;
                        var $4963 = self.code;
                        var self = Parser$nat$($4962, $4963);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4965 = self.idx;
                                var $4966 = self.code;
                                var $4967 = self.err;
                                var $4968 = Parser$Reply$error$($4965, $4966, $4967);
                                var $4964 = $4968;
                                break;
                            case 'Parser.Reply.value':
                                var $4969 = self.idx;
                                var $4970 = self.code;
                                var $4971 = self.val;
                                var self = Parser$text$("s", $4969, $4970);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4973 = self.idx;
                                        var $4974 = self.code;
                                        var $4975 = self.err;
                                        var $4976 = Parser$Reply$error$($4973, $4974, $4975);
                                        var $4972 = $4976;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4977 = self.idx;
                                        var $4978 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u16");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4971));
                                        var self = Kind$Parser$stop$($4956, $4977, $4978);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4980 = self.idx;
                                                var $4981 = self.code;
                                                var $4982 = self.err;
                                                var $4983 = Parser$Reply$error$($4980, $4981, $4982);
                                                var $4979 = $4983;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4984 = self.idx;
                                                var $4985 = self.code;
                                                var $4986 = self.val;
                                                var $4987 = Parser$Reply$value$($4984, $4985, Kind$Term$ori$($4986, _term$16));
                                                var $4979 = $4987;
                                                break;
                                        };
                                        var $4972 = $4979;
                                        break;
                                };
                                var $4964 = $4972;
                                break;
                        };
                        var $4957 = $4964;
                        break;
                };
                var $4949 = $4957;
                break;
        };
        return $4949;
    };
    const Kind$Parser$u16 = x0 => x1 => Kind$Parser$u16$(x0, x1);

    function Kind$Parser$u8$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4989 = self.idx;
                var $4990 = self.code;
                var $4991 = self.err;
                var $4992 = Parser$Reply$error$($4989, $4990, $4991);
                var $4988 = $4992;
                break;
            case 'Parser.Reply.value':
                var $4993 = self.idx;
                var $4994 = self.code;
                var $4995 = self.val;
                var self = Kind$Parser$spaces($4993)($4994);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4997 = self.idx;
                        var $4998 = self.code;
                        var $4999 = self.err;
                        var $5000 = Parser$Reply$error$($4997, $4998, $4999);
                        var $4996 = $5000;
                        break;
                    case 'Parser.Reply.value':
                        var $5001 = self.idx;
                        var $5002 = self.code;
                        var self = Parser$nat$($5001, $5002);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5004 = self.idx;
                                var $5005 = self.code;
                                var $5006 = self.err;
                                var $5007 = Parser$Reply$error$($5004, $5005, $5006);
                                var $5003 = $5007;
                                break;
                            case 'Parser.Reply.value':
                                var $5008 = self.idx;
                                var $5009 = self.code;
                                var $5010 = self.val;
                                var self = Parser$text$("b", $5008, $5009);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5012 = self.idx;
                                        var $5013 = self.code;
                                        var $5014 = self.err;
                                        var $5015 = Parser$Reply$error$($5012, $5013, $5014);
                                        var $5011 = $5015;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5016 = self.idx;
                                        var $5017 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u8");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($5010));
                                        var self = Kind$Parser$stop$($4995, $5016, $5017);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5019 = self.idx;
                                                var $5020 = self.code;
                                                var $5021 = self.err;
                                                var $5022 = Parser$Reply$error$($5019, $5020, $5021);
                                                var $5018 = $5022;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5023 = self.idx;
                                                var $5024 = self.code;
                                                var $5025 = self.val;
                                                var $5026 = Parser$Reply$value$($5023, $5024, Kind$Term$ori$($5025, _term$16));
                                                var $5018 = $5026;
                                                break;
                                        };
                                        var $5011 = $5018;
                                        break;
                                };
                                var $5003 = $5011;
                                break;
                        };
                        var $4996 = $5003;
                        break;
                };
                var $4988 = $4996;
                break;
        };
        return $4988;
    };
    const Kind$Parser$u8 = x0 => x1 => Kind$Parser$u8$(x0, x1);

    function Kind$Parser$reference$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5028 = self.idx;
                var $5029 = self.code;
                var $5030 = self.err;
                var $5031 = Parser$Reply$error$($5028, $5029, $5030);
                var $5027 = $5031;
                break;
            case 'Parser.Reply.value':
                var $5032 = self.idx;
                var $5033 = self.code;
                var $5034 = self.val;
                var self = Kind$Parser$name1$($5032, $5033);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5036 = self.idx;
                        var $5037 = self.code;
                        var $5038 = self.err;
                        var $5039 = Parser$Reply$error$($5036, $5037, $5038);
                        var $5035 = $5039;
                        break;
                    case 'Parser.Reply.value':
                        var $5040 = self.idx;
                        var $5041 = self.code;
                        var $5042 = self.val;
                        var self = Kind$Parser$stop$($5034, $5040, $5041);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5044 = self.idx;
                                var $5045 = self.code;
                                var $5046 = self.err;
                                var $5047 = Parser$Reply$error$($5044, $5045, $5046);
                                var $5043 = $5047;
                                break;
                            case 'Parser.Reply.value':
                                var $5048 = self.idx;
                                var $5049 = self.code;
                                var $5050 = self.val;
                                var self = ($5042 === "case");
                                if (self) {
                                    var $5052 = Parser$fail("Reserved keyword.");
                                    var $5051 = $5052;
                                } else {
                                    var self = ($5042 === "do");
                                    if (self) {
                                        var $5054 = Parser$fail("Reserved keyword.");
                                        var $5053 = $5054;
                                    } else {
                                        var self = ($5042 === "if");
                                        if (self) {
                                            var $5056 = Parser$fail("Reserved keyword.");
                                            var $5055 = $5056;
                                        } else {
                                            var self = ($5042 === "with");
                                            if (self) {
                                                var $5058 = Parser$fail("Reserved keyword.");
                                                var $5057 = $5058;
                                            } else {
                                                var self = ($5042 === "let");
                                                if (self) {
                                                    var $5060 = Parser$fail("Reserved keyword.");
                                                    var $5059 = $5060;
                                                } else {
                                                    var self = ($5042 === "def");
                                                    if (self) {
                                                        var $5062 = Parser$fail("Reserved keyword.");
                                                        var $5061 = $5062;
                                                    } else {
                                                        var self = ($5042 === "Type");
                                                        if (self) {
                                                            var $5064 = (_idx$12 => _code$13 => {
                                                                var $5065 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5050, Kind$Term$typ));
                                                                return $5065;
                                                            });
                                                            var $5063 = $5064;
                                                        } else {
                                                            var self = ($5042 === "true");
                                                            if (self) {
                                                                var $5067 = (_idx$12 => _code$13 => {
                                                                    var $5068 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5050, Kind$Term$ref$("Bool.true")));
                                                                    return $5068;
                                                                });
                                                                var $5066 = $5067;
                                                            } else {
                                                                var self = ($5042 === "false");
                                                                if (self) {
                                                                    var $5070 = (_idx$12 => _code$13 => {
                                                                        var $5071 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5050, Kind$Term$ref$("Bool.false")));
                                                                        return $5071;
                                                                    });
                                                                    var $5069 = $5070;
                                                                } else {
                                                                    var self = ($5042 === "unit");
                                                                    if (self) {
                                                                        var $5073 = (_idx$12 => _code$13 => {
                                                                            var $5074 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5050, Kind$Term$ref$("Unit.new")));
                                                                            return $5074;
                                                                        });
                                                                        var $5072 = $5073;
                                                                    } else {
                                                                        var self = ($5042 === "none");
                                                                        if (self) {
                                                                            var _term$12 = Kind$Term$ref$("Maybe.none");
                                                                            var _term$13 = Kind$Term$app$(_term$12, Kind$Term$hol$(Bits$e));
                                                                            var $5076 = (_idx$14 => _code$15 => {
                                                                                var $5077 = Parser$Reply$value$(_idx$14, _code$15, Kind$Term$ori$($5050, _term$13));
                                                                                return $5077;
                                                                            });
                                                                            var $5075 = $5076;
                                                                        } else {
                                                                            var self = ($5042 === "refl");
                                                                            if (self) {
                                                                                var _term$12 = Kind$Term$ref$("Equal.refl");
                                                                                var _term$13 = Kind$Term$app$(_term$12, Kind$Term$hol$(Bits$e));
                                                                                var _term$14 = Kind$Term$app$(_term$13, Kind$Term$hol$(Bits$e));
                                                                                var $5079 = (_idx$15 => _code$16 => {
                                                                                    var $5080 = Parser$Reply$value$(_idx$15, _code$16, Kind$Term$ori$($5050, _term$14));
                                                                                    return $5080;
                                                                                });
                                                                                var $5078 = $5079;
                                                                            } else {
                                                                                var $5081 = (_idx$12 => _code$13 => {
                                                                                    var $5082 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($5050, Kind$Term$ref$($5042)));
                                                                                    return $5082;
                                                                                });
                                                                                var $5078 = $5081;
                                                                            };
                                                                            var $5075 = $5078;
                                                                        };
                                                                        var $5072 = $5075;
                                                                    };
                                                                    var $5069 = $5072;
                                                                };
                                                                var $5066 = $5069;
                                                            };
                                                            var $5063 = $5066;
                                                        };
                                                        var $5061 = $5063;
                                                    };
                                                    var $5059 = $5061;
                                                };
                                                var $5057 = $5059;
                                            };
                                            var $5055 = $5057;
                                        };
                                        var $5053 = $5055;
                                    };
                                    var $5051 = $5053;
                                };
                                var $5051 = $5051($5048)($5049);
                                var $5043 = $5051;
                                break;
                        };
                        var $5035 = $5043;
                        break;
                };
                var $5027 = $5035;
                break;
        };
        return $5027;
    };
    const Kind$Parser$reference = x0 => x1 => Kind$Parser$reference$(x0, x1);
    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));

    function Kind$Parser$application$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$text$("(", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5084 = self.idx;
                var $5085 = self.code;
                var $5086 = self.err;
                var $5087 = Parser$Reply$error$($5084, $5085, $5086);
                var $5083 = $5087;
                break;
            case 'Parser.Reply.value':
                var $5088 = self.idx;
                var $5089 = self.code;
                var self = Parser$until1$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$term), $5088, $5089);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5091 = self.idx;
                        var $5092 = self.code;
                        var $5093 = self.err;
                        var $5094 = Parser$Reply$error$($5091, $5092, $5093);
                        var $5090 = $5094;
                        break;
                    case 'Parser.Reply.value':
                        var $5095 = self.idx;
                        var $5096 = self.code;
                        var $5097 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5095, $5096);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5099 = self.idx;
                                var $5100 = self.code;
                                var $5101 = self.err;
                                var $5102 = Parser$Reply$error$($5099, $5100, $5101);
                                var $5098 = $5102;
                                break;
                            case 'Parser.Reply.value':
                                var $5103 = self.idx;
                                var $5104 = self.code;
                                var $5105 = self.val;
                                var _expr$14 = (() => {
                                    var $5108 = _func$2;
                                    var $5109 = $5097;
                                    let _f$15 = $5108;
                                    let _x$14;
                                    while ($5109._ === 'List.cons') {
                                        _x$14 = $5109.head;
                                        var $5108 = Kind$Term$app$(_f$15, _x$14);
                                        _f$15 = $5108;
                                        $5109 = $5109.tail;
                                    }
                                    return _f$15;
                                })();
                                var $5106 = Parser$Reply$value$($5103, $5104, Kind$Term$ori$($5105, _expr$14));
                                var $5098 = $5106;
                                break;
                        };
                        var $5090 = $5098;
                        break;
                };
                var $5083 = $5090;
                break;
        };
        return $5083;
    };
    const Kind$Parser$application = x0 => x1 => x2 => x3 => Kind$Parser$application$(x0, x1, x2, x3);
    const Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{a}"), List$nil))));

    function Parser$spaces_text$(_text$1, _idx$2, _code$3) {
        var self = Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5111 = self.idx;
                var $5112 = self.code;
                var $5113 = self.err;
                var $5114 = Parser$Reply$error$($5111, $5112, $5113);
                var $5110 = $5114;
                break;
            case 'Parser.Reply.value':
                var $5115 = self.idx;
                var $5116 = self.code;
                var $5117 = Parser$text$(_text$1, $5115, $5116);
                var $5110 = $5117;
                break;
        };
        return $5110;
    };
    const Parser$spaces_text = x0 => x1 => x2 => Parser$spaces_text$(x0, x1, x2);

    function Kind$Parser$application$erased$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$get_index$(_idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5119 = self.idx;
                var $5120 = self.code;
                var $5121 = self.err;
                var $5122 = Parser$Reply$error$($5119, $5120, $5121);
                var $5118 = $5122;
                break;
            case 'Parser.Reply.value':
                var $5123 = self.idx;
                var $5124 = self.code;
                var $5125 = self.val;
                var self = Parser$text$("<", $5123, $5124);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5127 = self.idx;
                        var $5128 = self.code;
                        var $5129 = self.err;
                        var $5130 = Parser$Reply$error$($5127, $5128, $5129);
                        var $5126 = $5130;
                        break;
                    case 'Parser.Reply.value':
                        var $5131 = self.idx;
                        var $5132 = self.code;
                        var self = Parser$until1$(Parser$spaces_text(">"), Kind$Parser$item(Kind$Parser$term), $5131, $5132);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5134 = self.idx;
                                var $5135 = self.code;
                                var $5136 = self.err;
                                var $5137 = Parser$Reply$error$($5134, $5135, $5136);
                                var $5133 = $5137;
                                break;
                            case 'Parser.Reply.value':
                                var $5138 = self.idx;
                                var $5139 = self.code;
                                var $5140 = self.val;
                                var self = Kind$Parser$stop$($5125, $5138, $5139);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5142 = self.idx;
                                        var $5143 = self.code;
                                        var $5144 = self.err;
                                        var $5145 = Parser$Reply$error$($5142, $5143, $5144);
                                        var $5141 = $5145;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5146 = self.idx;
                                        var $5147 = self.code;
                                        var $5148 = self.val;
                                        var _expr$17 = (() => {
                                            var $5151 = _func$2;
                                            var $5152 = $5140;
                                            let _f$18 = $5151;
                                            let _x$17;
                                            while ($5152._ === 'List.cons') {
                                                _x$17 = $5152.head;
                                                var $5151 = Kind$Term$app$(_f$18, _x$17);
                                                _f$18 = $5151;
                                                $5152 = $5152.tail;
                                            }
                                            return _f$18;
                                        })();
                                        var $5149 = Parser$Reply$value$($5146, $5147, Kind$Term$ori$($5148, _expr$17));
                                        var $5141 = $5149;
                                        break;
                                };
                                var $5133 = $5141;
                                break;
                        };
                        var $5126 = $5133;
                        break;
                };
                var $5118 = $5126;
                break;
        };
        return $5118;
    };
    const Kind$Parser$application$erased = x0 => x1 => x2 => x3 => Kind$Parser$application$erased$(x0, x1, x2, x3);

    function Kind$Parser$list_set$(_init$1, _list$2, _idx$3, _code$4) {
        var self = Parser$text$("[", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5154 = self.idx;
                var $5155 = self.code;
                var $5156 = self.err;
                var $5157 = Parser$Reply$error$($5154, $5155, $5156);
                var $5153 = $5157;
                break;
            case 'Parser.Reply.value':
                var $5158 = self.idx;
                var $5159 = self.code;
                var self = Kind$Parser$term$($5158, $5159);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5161 = self.idx;
                        var $5162 = self.code;
                        var $5163 = self.err;
                        var $5164 = Parser$Reply$error$($5161, $5162, $5163);
                        var $5160 = $5164;
                        break;
                    case 'Parser.Reply.value':
                        var $5165 = self.idx;
                        var $5166 = self.code;
                        var $5167 = self.val;
                        var self = Kind$Parser$text$("]", $5165, $5166);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5169 = self.idx;
                                var $5170 = self.code;
                                var $5171 = self.err;
                                var $5172 = Parser$Reply$error$($5169, $5170, $5171);
                                var $5168 = $5172;
                                break;
                            case 'Parser.Reply.value':
                                var $5173 = self.idx;
                                var $5174 = self.code;
                                var self = Kind$Parser$text$("<-", $5173, $5174);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5176 = self.idx;
                                        var $5177 = self.code;
                                        var $5178 = self.err;
                                        var $5179 = Parser$Reply$error$($5176, $5177, $5178);
                                        var $5175 = $5179;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5180 = self.idx;
                                        var $5181 = self.code;
                                        var self = Kind$Parser$term$($5180, $5181);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5183 = self.idx;
                                                var $5184 = self.code;
                                                var $5185 = self.err;
                                                var $5186 = Parser$Reply$error$($5183, $5184, $5185);
                                                var $5182 = $5186;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5187 = self.idx;
                                                var $5188 = self.code;
                                                var $5189 = self.val;
                                                var self = Kind$Parser$stop$(_init$1, $5187, $5188);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5191 = self.idx;
                                                        var $5192 = self.code;
                                                        var $5193 = self.err;
                                                        var $5194 = Parser$Reply$error$($5191, $5192, $5193);
                                                        var $5190 = $5194;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5195 = self.idx;
                                                        var $5196 = self.code;
                                                        var $5197 = self.val;
                                                        var _term$23 = Kind$Term$ref$("List.set");
                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));
                                                        var _term$25 = Kind$Term$app$(_term$24, $5167);
                                                        var _term$26 = Kind$Term$app$(_term$25, $5189);
                                                        var _term$27 = Kind$Term$app$(_term$26, _list$2);
                                                        var $5198 = Parser$Reply$value$($5195, $5196, Kind$Term$ori$($5197, _term$27));
                                                        var $5190 = $5198;
                                                        break;
                                                };
                                                var $5182 = $5190;
                                                break;
                                        };
                                        var $5175 = $5182;
                                        break;
                                };
                                var $5168 = $5175;
                                break;
                        };
                        var $5160 = $5168;
                        break;
                };
                var $5153 = $5160;
                break;
        };
        return $5153;
    };
    const Kind$Parser$list_set = x0 => x1 => x2 => x3 => Kind$Parser$list_set$(x0, x1, x2, x3);

    function Kind$Parser$list_get$(_init$1, _list$2, _idx$3, _code$4) {
        var self = Parser$text$("[", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5200 = self.idx;
                var $5201 = self.code;
                var $5202 = self.err;
                var $5203 = Parser$Reply$error$($5200, $5201, $5202);
                var $5199 = $5203;
                break;
            case 'Parser.Reply.value':
                var $5204 = self.idx;
                var $5205 = self.code;
                var self = Kind$Parser$term$($5204, $5205);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5207 = self.idx;
                        var $5208 = self.code;
                        var $5209 = self.err;
                        var $5210 = Parser$Reply$error$($5207, $5208, $5209);
                        var $5206 = $5210;
                        break;
                    case 'Parser.Reply.value':
                        var $5211 = self.idx;
                        var $5212 = self.code;
                        var $5213 = self.val;
                        var self = Kind$Parser$text$("]", $5211, $5212);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5215 = self.idx;
                                var $5216 = self.code;
                                var $5217 = self.err;
                                var $5218 = Parser$Reply$error$($5215, $5216, $5217);
                                var $5214 = $5218;
                                break;
                            case 'Parser.Reply.value':
                                var $5219 = self.idx;
                                var $5220 = self.code;
                                var self = Kind$Parser$stop$(_init$1, $5219, $5220);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5222 = self.idx;
                                        var $5223 = self.code;
                                        var $5224 = self.err;
                                        var $5225 = Parser$Reply$error$($5222, $5223, $5224);
                                        var $5221 = $5225;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5226 = self.idx;
                                        var $5227 = self.code;
                                        var $5228 = self.val;
                                        var _term$17 = Kind$Term$ref$("List.get");
                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                        var _term$19 = Kind$Term$app$(_term$18, $5213);
                                        var _term$20 = Kind$Term$app$(_term$19, _list$2);
                                        var $5229 = Parser$Reply$value$($5226, $5227, Kind$Term$ori$($5228, _term$20));
                                        var $5221 = $5229;
                                        break;
                                };
                                var $5214 = $5221;
                                break;
                        };
                        var $5206 = $5214;
                        break;
                };
                var $5199 = $5206;
                break;
        };
        return $5199;
    };
    const Kind$Parser$list_get = x0 => x1 => x2 => x3 => Kind$Parser$list_get$(x0, x1, x2, x3);

    function Kind$Parser$map_set$(_init$1, _map$2, _idx$3, _code$4) {
        var self = Parser$text$("{", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5231 = self.idx;
                var $5232 = self.code;
                var $5233 = self.err;
                var $5234 = Parser$Reply$error$($5231, $5232, $5233);
                var $5230 = $5234;
                break;
            case 'Parser.Reply.value':
                var $5235 = self.idx;
                var $5236 = self.code;
                var self = Kind$Parser$term$($5235, $5236);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5238 = self.idx;
                        var $5239 = self.code;
                        var $5240 = self.err;
                        var $5241 = Parser$Reply$error$($5238, $5239, $5240);
                        var $5237 = $5241;
                        break;
                    case 'Parser.Reply.value':
                        var $5242 = self.idx;
                        var $5243 = self.code;
                        var $5244 = self.val;
                        var self = Kind$Parser$text$("}", $5242, $5243);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5246 = self.idx;
                                var $5247 = self.code;
                                var $5248 = self.err;
                                var $5249 = Parser$Reply$error$($5246, $5247, $5248);
                                var $5245 = $5249;
                                break;
                            case 'Parser.Reply.value':
                                var $5250 = self.idx;
                                var $5251 = self.code;
                                var self = Kind$Parser$text$("<-", $5250, $5251);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5253 = self.idx;
                                        var $5254 = self.code;
                                        var $5255 = self.err;
                                        var $5256 = Parser$Reply$error$($5253, $5254, $5255);
                                        var $5252 = $5256;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5257 = self.idx;
                                        var $5258 = self.code;
                                        var self = Kind$Parser$term$($5257, $5258);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5260 = self.idx;
                                                var $5261 = self.code;
                                                var $5262 = self.err;
                                                var $5263 = Parser$Reply$error$($5260, $5261, $5262);
                                                var $5259 = $5263;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5264 = self.idx;
                                                var $5265 = self.code;
                                                var $5266 = self.val;
                                                var self = Kind$Parser$stop$(_init$1, $5264, $5265);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5268 = self.idx;
                                                        var $5269 = self.code;
                                                        var $5270 = self.err;
                                                        var $5271 = Parser$Reply$error$($5268, $5269, $5270);
                                                        var $5267 = $5271;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5272 = self.idx;
                                                        var $5273 = self.code;
                                                        var $5274 = self.val;
                                                        var _term$23 = Kind$Term$ref$("Map.set");
                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));
                                                        var _term$25 = Kind$Term$app$(_term$24, $5244);
                                                        var _term$26 = Kind$Term$app$(_term$25, $5266);
                                                        var _term$27 = Kind$Term$app$(_term$26, _map$2);
                                                        var $5275 = Parser$Reply$value$($5272, $5273, Kind$Term$ori$($5274, _term$27));
                                                        var $5267 = $5275;
                                                        break;
                                                };
                                                var $5259 = $5267;
                                                break;
                                        };
                                        var $5252 = $5259;
                                        break;
                                };
                                var $5245 = $5252;
                                break;
                        };
                        var $5237 = $5245;
                        break;
                };
                var $5230 = $5237;
                break;
        };
        return $5230;
    };
    const Kind$Parser$map_set = x0 => x1 => x2 => x3 => Kind$Parser$map_set$(x0, x1, x2, x3);

    function Kind$Parser$map_get$(_init$1, _map$2, _idx$3, _code$4) {
        var self = Parser$text$("{", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5277 = self.idx;
                var $5278 = self.code;
                var $5279 = self.err;
                var $5280 = Parser$Reply$error$($5277, $5278, $5279);
                var $5276 = $5280;
                break;
            case 'Parser.Reply.value':
                var $5281 = self.idx;
                var $5282 = self.code;
                var self = Kind$Parser$term$($5281, $5282);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5284 = self.idx;
                        var $5285 = self.code;
                        var $5286 = self.err;
                        var $5287 = Parser$Reply$error$($5284, $5285, $5286);
                        var $5283 = $5287;
                        break;
                    case 'Parser.Reply.value':
                        var $5288 = self.idx;
                        var $5289 = self.code;
                        var $5290 = self.val;
                        var self = Kind$Parser$text$("}", $5288, $5289);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5292 = self.idx;
                                var $5293 = self.code;
                                var $5294 = self.err;
                                var $5295 = Parser$Reply$error$($5292, $5293, $5294);
                                var $5291 = $5295;
                                break;
                            case 'Parser.Reply.value':
                                var $5296 = self.idx;
                                var $5297 = self.code;
                                var self = Kind$Parser$stop$(_init$1, $5296, $5297);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5299 = self.idx;
                                        var $5300 = self.code;
                                        var $5301 = self.err;
                                        var $5302 = Parser$Reply$error$($5299, $5300, $5301);
                                        var $5298 = $5302;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5303 = self.idx;
                                        var $5304 = self.code;
                                        var $5305 = self.val;
                                        var _term$17 = Kind$Term$ref$("Map.get");
                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                        var _term$19 = Kind$Term$app$(_term$18, $5290);
                                        var _term$20 = Kind$Term$app$(_term$19, _map$2);
                                        var $5306 = Parser$Reply$value$($5303, $5304, Kind$Term$ori$($5305, _term$20));
                                        var $5298 = $5306;
                                        break;
                                };
                                var $5291 = $5298;
                                break;
                        };
                        var $5283 = $5291;
                        break;
                };
                var $5276 = $5283;
                break;
        };
        return $5276;
    };
    const Kind$Parser$map_get = x0 => x1 => x2 => x3 => Kind$Parser$map_get$(x0, x1, x2, x3);

    function Kind$Parser$arrow$(_init$1, _xtyp$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("->", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5308 = self.idx;
                var $5309 = self.code;
                var $5310 = self.err;
                var $5311 = Parser$Reply$error$($5308, $5309, $5310);
                var $5307 = $5311;
                break;
            case 'Parser.Reply.value':
                var $5312 = self.idx;
                var $5313 = self.code;
                var self = Kind$Parser$term$($5312, $5313);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5315 = self.idx;
                        var $5316 = self.code;
                        var $5317 = self.err;
                        var $5318 = Parser$Reply$error$($5315, $5316, $5317);
                        var $5314 = $5318;
                        break;
                    case 'Parser.Reply.value':
                        var $5319 = self.idx;
                        var $5320 = self.code;
                        var $5321 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5319, $5320);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5323 = self.idx;
                                var $5324 = self.code;
                                var $5325 = self.err;
                                var $5326 = Parser$Reply$error$($5323, $5324, $5325);
                                var $5322 = $5326;
                                break;
                            case 'Parser.Reply.value':
                                var $5327 = self.idx;
                                var $5328 = self.code;
                                var $5329 = self.val;
                                var $5330 = Parser$Reply$value$($5327, $5328, Kind$Term$ori$($5329, Kind$Term$all$(Bool$false, "", "", _xtyp$2, (_s$14 => _x$15 => {
                                    var $5331 = $5321;
                                    return $5331;
                                }))));
                                var $5322 = $5330;
                                break;
                        };
                        var $5314 = $5322;
                        break;
                };
                var $5307 = $5314;
                break;
        };
        return $5307;
    };
    const Kind$Parser$arrow = x0 => x1 => x2 => x3 => Kind$Parser$arrow$(x0, x1, x2, x3);

    function Kind$Parser$op$(_sym$1, _ref$2, _init$3, _val0$4, _idx$5, _code$6) {
        var self = Kind$Parser$text$(_sym$1, _idx$5, _code$6);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5333 = self.idx;
                var $5334 = self.code;
                var $5335 = self.err;
                var $5336 = Parser$Reply$error$($5333, $5334, $5335);
                var $5332 = $5336;
                break;
            case 'Parser.Reply.value':
                var $5337 = self.idx;
                var $5338 = self.code;
                var self = Parser$text$(" ", $5337, $5338);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5340 = self.idx;
                        var $5341 = self.code;
                        var $5342 = self.err;
                        var $5343 = Parser$Reply$error$($5340, $5341, $5342);
                        var $5339 = $5343;
                        break;
                    case 'Parser.Reply.value':
                        var $5344 = self.idx;
                        var $5345 = self.code;
                        var self = Kind$Parser$term$($5344, $5345);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5347 = self.idx;
                                var $5348 = self.code;
                                var $5349 = self.err;
                                var $5350 = Parser$Reply$error$($5347, $5348, $5349);
                                var $5346 = $5350;
                                break;
                            case 'Parser.Reply.value':
                                var $5351 = self.idx;
                                var $5352 = self.code;
                                var $5353 = self.val;
                                var self = Kind$Parser$stop$(_init$3, $5351, $5352);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5355 = self.idx;
                                        var $5356 = self.code;
                                        var $5357 = self.err;
                                        var $5358 = Parser$Reply$error$($5355, $5356, $5357);
                                        var $5354 = $5358;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5359 = self.idx;
                                        var $5360 = self.code;
                                        var $5361 = self.val;
                                        var _term$19 = Kind$Term$ref$(_ref$2);
                                        var _term$20 = Kind$Term$app$(_term$19, _val0$4);
                                        var _term$21 = Kind$Term$app$(_term$20, $5353);
                                        var $5362 = Parser$Reply$value$($5359, $5360, Kind$Term$ori$($5361, _term$21));
                                        var $5354 = $5362;
                                        break;
                                };
                                var $5346 = $5354;
                                break;
                        };
                        var $5339 = $5346;
                        break;
                };
                var $5332 = $5339;
                break;
        };
        return $5332;
    };
    const Kind$Parser$op = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$op$(x0, x1, x2, x3, x4, x5);
    const Kind$Parser$add = Kind$Parser$op("+")("Nat.add");
    const Kind$Parser$sub = Kind$Parser$op("-")("Nat.sub");
    const Kind$Parser$mul = Kind$Parser$op("*")("Nat.mul");
    const Kind$Parser$div = Kind$Parser$op("/")("Nat.div");
    const Kind$Parser$mod = Kind$Parser$op("%")("Nat.mod");
    const Kind$Parser$ltn = Kind$Parser$op("<?")("Nat.ltn");
    const Kind$Parser$lte = Kind$Parser$op("<=?")("Nat.lte");
    const Kind$Parser$eql = Kind$Parser$op("=?")("Nat.eql");
    const Kind$Parser$gte = Kind$Parser$op(">=?")("Nat.gte");
    const Kind$Parser$gtn = Kind$Parser$op(">?")("Nat.gtn");
    const Kind$Parser$and = Kind$Parser$op("&&")("Bool.and");
    const Kind$Parser$or = Kind$Parser$op("||")("Bool.or");

    function Kind$Parser$default$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("<>", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5364 = self.idx;
                var $5365 = self.code;
                var $5366 = self.err;
                var $5367 = Parser$Reply$error$($5364, $5365, $5366);
                var $5363 = $5367;
                break;
            case 'Parser.Reply.value':
                var $5368 = self.idx;
                var $5369 = self.code;
                var self = Kind$Parser$term$($5368, $5369);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5371 = self.idx;
                        var $5372 = self.code;
                        var $5373 = self.err;
                        var $5374 = Parser$Reply$error$($5371, $5372, $5373);
                        var $5370 = $5374;
                        break;
                    case 'Parser.Reply.value':
                        var $5375 = self.idx;
                        var $5376 = self.code;
                        var $5377 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5375, $5376);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5379 = self.idx;
                                var $5380 = self.code;
                                var $5381 = self.err;
                                var $5382 = Parser$Reply$error$($5379, $5380, $5381);
                                var $5378 = $5382;
                                break;
                            case 'Parser.Reply.value':
                                var $5383 = self.idx;
                                var $5384 = self.code;
                                var $5385 = self.val;
                                var _term$14 = Kind$Term$ref$("Maybe.default");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5377);
                                var $5386 = Parser$Reply$value$($5383, $5384, Kind$Term$ori$($5385, _term$17));
                                var $5378 = $5386;
                                break;
                        };
                        var $5370 = $5378;
                        break;
                };
                var $5363 = $5370;
                break;
        };
        return $5363;
    };
    const Kind$Parser$default = x0 => x1 => x2 => x3 => Kind$Parser$default$(x0, x1, x2, x3);

    function Kind$Parser$cons$(_init$1, _head$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("&", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5388 = self.idx;
                var $5389 = self.code;
                var $5390 = self.err;
                var $5391 = Parser$Reply$error$($5388, $5389, $5390);
                var $5387 = $5391;
                break;
            case 'Parser.Reply.value':
                var $5392 = self.idx;
                var $5393 = self.code;
                var self = Kind$Parser$term$($5392, $5393);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5395 = self.idx;
                        var $5396 = self.code;
                        var $5397 = self.err;
                        var $5398 = Parser$Reply$error$($5395, $5396, $5397);
                        var $5394 = $5398;
                        break;
                    case 'Parser.Reply.value':
                        var $5399 = self.idx;
                        var $5400 = self.code;
                        var $5401 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5399, $5400);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5403 = self.idx;
                                var $5404 = self.code;
                                var $5405 = self.err;
                                var $5406 = Parser$Reply$error$($5403, $5404, $5405);
                                var $5402 = $5406;
                                break;
                            case 'Parser.Reply.value':
                                var $5407 = self.idx;
                                var $5408 = self.code;
                                var _term$14 = Kind$Term$ref$("List.cons");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _head$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5401);
                                var self = Kind$Parser$stop$(_init$1, $5407, $5408);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5410 = self.idx;
                                        var $5411 = self.code;
                                        var $5412 = self.err;
                                        var $5413 = Parser$Reply$error$($5410, $5411, $5412);
                                        var $5409 = $5413;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5414 = self.idx;
                                        var $5415 = self.code;
                                        var $5416 = self.val;
                                        var $5417 = Parser$Reply$value$($5414, $5415, Kind$Term$ori$($5416, _term$17));
                                        var $5409 = $5417;
                                        break;
                                };
                                var $5402 = $5409;
                                break;
                        };
                        var $5394 = $5402;
                        break;
                };
                var $5387 = $5394;
                break;
        };
        return $5387;
    };
    const Kind$Parser$cons = x0 => x1 => x2 => x3 => Kind$Parser$cons$(x0, x1, x2, x3);

    function Kind$Parser$concat$(_init$1, _lst0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("++", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5419 = self.idx;
                var $5420 = self.code;
                var $5421 = self.err;
                var $5422 = Parser$Reply$error$($5419, $5420, $5421);
                var $5418 = $5422;
                break;
            case 'Parser.Reply.value':
                var $5423 = self.idx;
                var $5424 = self.code;
                var self = Kind$Parser$term$($5423, $5424);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5426 = self.idx;
                        var $5427 = self.code;
                        var $5428 = self.err;
                        var $5429 = Parser$Reply$error$($5426, $5427, $5428);
                        var $5425 = $5429;
                        break;
                    case 'Parser.Reply.value':
                        var $5430 = self.idx;
                        var $5431 = self.code;
                        var $5432 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5430, $5431);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5434 = self.idx;
                                var $5435 = self.code;
                                var $5436 = self.err;
                                var $5437 = Parser$Reply$error$($5434, $5435, $5436);
                                var $5433 = $5437;
                                break;
                            case 'Parser.Reply.value':
                                var $5438 = self.idx;
                                var $5439 = self.code;
                                var _term$14 = Kind$Term$ref$("List.concat");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _lst0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5432);
                                var self = Kind$Parser$stop$(_init$1, $5438, $5439);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5441 = self.idx;
                                        var $5442 = self.code;
                                        var $5443 = self.err;
                                        var $5444 = Parser$Reply$error$($5441, $5442, $5443);
                                        var $5440 = $5444;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5445 = self.idx;
                                        var $5446 = self.code;
                                        var $5447 = self.val;
                                        var $5448 = Parser$Reply$value$($5445, $5446, Kind$Term$ori$($5447, _term$17));
                                        var $5440 = $5448;
                                        break;
                                };
                                var $5433 = $5440;
                                break;
                        };
                        var $5425 = $5433;
                        break;
                };
                var $5418 = $5425;
                break;
        };
        return $5418;
    };
    const Kind$Parser$concat = x0 => x1 => x2 => x3 => Kind$Parser$concat$(x0, x1, x2, x3);

    function Kind$Parser$string_concat$(_init$1, _str0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("|", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5450 = self.idx;
                var $5451 = self.code;
                var $5452 = self.err;
                var $5453 = Parser$Reply$error$($5450, $5451, $5452);
                var $5449 = $5453;
                break;
            case 'Parser.Reply.value':
                var $5454 = self.idx;
                var $5455 = self.code;
                var self = Kind$Parser$term$($5454, $5455);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5457 = self.idx;
                        var $5458 = self.code;
                        var $5459 = self.err;
                        var $5460 = Parser$Reply$error$($5457, $5458, $5459);
                        var $5456 = $5460;
                        break;
                    case 'Parser.Reply.value':
                        var $5461 = self.idx;
                        var $5462 = self.code;
                        var $5463 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5461, $5462);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5465 = self.idx;
                                var $5466 = self.code;
                                var $5467 = self.err;
                                var $5468 = Parser$Reply$error$($5465, $5466, $5467);
                                var $5464 = $5468;
                                break;
                            case 'Parser.Reply.value':
                                var $5469 = self.idx;
                                var $5470 = self.code;
                                var _term$14 = Kind$Term$ref$("String.concat");
                                var _term$15 = Kind$Term$app$(_term$14, _str0$2);
                                var _term$16 = Kind$Term$app$(_term$15, $5463);
                                var self = Kind$Parser$stop$(_init$1, $5469, $5470);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5472 = self.idx;
                                        var $5473 = self.code;
                                        var $5474 = self.err;
                                        var $5475 = Parser$Reply$error$($5472, $5473, $5474);
                                        var $5471 = $5475;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5476 = self.idx;
                                        var $5477 = self.code;
                                        var $5478 = self.val;
                                        var $5479 = Parser$Reply$value$($5476, $5477, Kind$Term$ori$($5478, _term$16));
                                        var $5471 = $5479;
                                        break;
                                };
                                var $5464 = $5471;
                                break;
                        };
                        var $5456 = $5464;
                        break;
                };
                var $5449 = $5456;
                break;
        };
        return $5449;
    };
    const Kind$Parser$string_concat = x0 => x1 => x2 => x3 => Kind$Parser$string_concat$(x0, x1, x2, x3);

    function Kind$Parser$sigma$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("~", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5481 = self.idx;
                var $5482 = self.code;
                var $5483 = self.err;
                var $5484 = Parser$Reply$error$($5481, $5482, $5483);
                var $5480 = $5484;
                break;
            case 'Parser.Reply.value':
                var $5485 = self.idx;
                var $5486 = self.code;
                var self = Kind$Parser$term$($5485, $5486);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5488 = self.idx;
                        var $5489 = self.code;
                        var $5490 = self.err;
                        var $5491 = Parser$Reply$error$($5488, $5489, $5490);
                        var $5487 = $5491;
                        break;
                    case 'Parser.Reply.value':
                        var $5492 = self.idx;
                        var $5493 = self.code;
                        var $5494 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5492, $5493);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5496 = self.idx;
                                var $5497 = self.code;
                                var $5498 = self.err;
                                var $5499 = Parser$Reply$error$($5496, $5497, $5498);
                                var $5495 = $5499;
                                break;
                            case 'Parser.Reply.value':
                                var $5500 = self.idx;
                                var $5501 = self.code;
                                var $5502 = self.val;
                                var _term$14 = Kind$Term$ref$("Sigma.new");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));
                                var _term$17 = Kind$Term$app$(_term$16, _val0$2);
                                var _term$18 = Kind$Term$app$(_term$17, $5494);
                                var $5503 = Parser$Reply$value$($5500, $5501, Kind$Term$ori$($5502, _term$18));
                                var $5495 = $5503;
                                break;
                        };
                        var $5487 = $5495;
                        break;
                };
                var $5480 = $5487;
                break;
        };
        return $5480;
    };
    const Kind$Parser$sigma = x0 => x1 => x2 => x3 => Kind$Parser$sigma$(x0, x1, x2, x3);

    function Kind$Parser$equality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("==", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5505 = self.idx;
                var $5506 = self.code;
                var $5507 = self.err;
                var $5508 = Parser$Reply$error$($5505, $5506, $5507);
                var $5504 = $5508;
                break;
            case 'Parser.Reply.value':
                var $5509 = self.idx;
                var $5510 = self.code;
                var self = Kind$Parser$term$($5509, $5510);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5512 = self.idx;
                        var $5513 = self.code;
                        var $5514 = self.err;
                        var $5515 = Parser$Reply$error$($5512, $5513, $5514);
                        var $5511 = $5515;
                        break;
                    case 'Parser.Reply.value':
                        var $5516 = self.idx;
                        var $5517 = self.code;
                        var $5518 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5516, $5517);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5520 = self.idx;
                                var $5521 = self.code;
                                var $5522 = self.err;
                                var $5523 = Parser$Reply$error$($5520, $5521, $5522);
                                var $5519 = $5523;
                                break;
                            case 'Parser.Reply.value':
                                var $5524 = self.idx;
                                var $5525 = self.code;
                                var $5526 = self.val;
                                var _term$14 = Kind$Term$ref$("Equal");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5518);
                                var $5527 = Parser$Reply$value$($5524, $5525, Kind$Term$ori$($5526, _term$17));
                                var $5519 = $5527;
                                break;
                        };
                        var $5511 = $5519;
                        break;
                };
                var $5504 = $5511;
                break;
        };
        return $5504;
    };
    const Kind$Parser$equality = x0 => x1 => x2 => x3 => Kind$Parser$equality$(x0, x1, x2, x3);

    function Kind$Parser$inequality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("!=", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5529 = self.idx;
                var $5530 = self.code;
                var $5531 = self.err;
                var $5532 = Parser$Reply$error$($5529, $5530, $5531);
                var $5528 = $5532;
                break;
            case 'Parser.Reply.value':
                var $5533 = self.idx;
                var $5534 = self.code;
                var self = Kind$Parser$term$($5533, $5534);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5536 = self.idx;
                        var $5537 = self.code;
                        var $5538 = self.err;
                        var $5539 = Parser$Reply$error$($5536, $5537, $5538);
                        var $5535 = $5539;
                        break;
                    case 'Parser.Reply.value':
                        var $5540 = self.idx;
                        var $5541 = self.code;
                        var $5542 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5540, $5541);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5544 = self.idx;
                                var $5545 = self.code;
                                var $5546 = self.err;
                                var $5547 = Parser$Reply$error$($5544, $5545, $5546);
                                var $5543 = $5547;
                                break;
                            case 'Parser.Reply.value':
                                var $5548 = self.idx;
                                var $5549 = self.code;
                                var $5550 = self.val;
                                var _term$14 = Kind$Term$ref$("Equal");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5542);
                                var _term$18 = Kind$Term$app$(Kind$Term$ref$("Not"), _term$17);
                                var $5551 = Parser$Reply$value$($5548, $5549, Kind$Term$ori$($5550, _term$18));
                                var $5543 = $5551;
                                break;
                        };
                        var $5535 = $5543;
                        break;
                };
                var $5528 = $5535;
                break;
        };
        return $5528;
    };
    const Kind$Parser$inequality = x0 => x1 => x2 => x3 => Kind$Parser$inequality$(x0, x1, x2, x3);

    function Kind$Parser$rewrite$(_init$1, _subt$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5553 = self.idx;
                var $5554 = self.code;
                var $5555 = self.err;
                var $5556 = Parser$Reply$error$($5553, $5554, $5555);
                var $5552 = $5556;
                break;
            case 'Parser.Reply.value':
                var $5557 = self.idx;
                var $5558 = self.code;
                var self = Kind$Parser$text$("rewrite", $5557, $5558);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5560 = self.idx;
                        var $5561 = self.code;
                        var $5562 = self.err;
                        var $5563 = Parser$Reply$error$($5560, $5561, $5562);
                        var $5559 = $5563;
                        break;
                    case 'Parser.Reply.value':
                        var $5564 = self.idx;
                        var $5565 = self.code;
                        var self = Kind$Parser$name1$($5564, $5565);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5567 = self.idx;
                                var $5568 = self.code;
                                var $5569 = self.err;
                                var $5570 = Parser$Reply$error$($5567, $5568, $5569);
                                var $5566 = $5570;
                                break;
                            case 'Parser.Reply.value':
                                var $5571 = self.idx;
                                var $5572 = self.code;
                                var $5573 = self.val;
                                var self = Kind$Parser$text$("in", $5571, $5572);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5575 = self.idx;
                                        var $5576 = self.code;
                                        var $5577 = self.err;
                                        var $5578 = Parser$Reply$error$($5575, $5576, $5577);
                                        var $5574 = $5578;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5579 = self.idx;
                                        var $5580 = self.code;
                                        var self = Kind$Parser$term$($5579, $5580);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5582 = self.idx;
                                                var $5583 = self.code;
                                                var $5584 = self.err;
                                                var $5585 = Parser$Reply$error$($5582, $5583, $5584);
                                                var $5581 = $5585;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5586 = self.idx;
                                                var $5587 = self.code;
                                                var $5588 = self.val;
                                                var self = Kind$Parser$text$("with", $5586, $5587);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5590 = self.idx;
                                                        var $5591 = self.code;
                                                        var $5592 = self.err;
                                                        var $5593 = Parser$Reply$error$($5590, $5591, $5592);
                                                        var $5589 = $5593;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5594 = self.idx;
                                                        var $5595 = self.code;
                                                        var self = Kind$Parser$term$($5594, $5595);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $5597 = self.idx;
                                                                var $5598 = self.code;
                                                                var $5599 = self.err;
                                                                var $5600 = Parser$Reply$error$($5597, $5598, $5599);
                                                                var $5596 = $5600;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $5601 = self.idx;
                                                                var $5602 = self.code;
                                                                var $5603 = self.val;
                                                                var self = Kind$Parser$stop$(_init$1, $5601, $5602);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $5605 = self.idx;
                                                                        var $5606 = self.code;
                                                                        var $5607 = self.err;
                                                                        var $5608 = Parser$Reply$error$($5605, $5606, $5607);
                                                                        var $5604 = $5608;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $5609 = self.idx;
                                                                        var $5610 = self.code;
                                                                        var $5611 = self.val;
                                                                        var _term$29 = Kind$Term$ref$("Equal.rewrite");
                                                                        var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));
                                                                        var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));
                                                                        var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));
                                                                        var _term$33 = Kind$Term$app$(_term$32, $5603);
                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$lam$($5573, (_x$34 => {
                                                                            var $5613 = $5588;
                                                                            return $5613;
                                                                        })));
                                                                        var _term$35 = Kind$Term$app$(_term$34, _subt$2);
                                                                        var $5612 = Parser$Reply$value$($5609, $5610, Kind$Term$ori$($5611, _term$35));
                                                                        var $5604 = $5612;
                                                                        break;
                                                                };
                                                                var $5596 = $5604;
                                                                break;
                                                        };
                                                        var $5589 = $5596;
                                                        break;
                                                };
                                                var $5581 = $5589;
                                                break;
                                        };
                                        var $5574 = $5581;
                                        break;
                                };
                                var $5566 = $5574;
                                break;
                        };
                        var $5559 = $5566;
                        break;
                };
                var $5552 = $5559;
                break;
        };
        return $5552;
    };
    const Kind$Parser$rewrite = x0 => x1 => x2 => x3 => Kind$Parser$rewrite$(x0, x1, x2, x3);

    function Kind$Parser$annotation$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5615 = self.idx;
                var $5616 = self.code;
                var $5617 = self.err;
                var $5618 = Parser$Reply$error$($5615, $5616, $5617);
                var $5614 = $5618;
                break;
            case 'Parser.Reply.value':
                var $5619 = self.idx;
                var $5620 = self.code;
                var self = Kind$Parser$term$($5619, $5620);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5622 = self.idx;
                        var $5623 = self.code;
                        var $5624 = self.err;
                        var $5625 = Parser$Reply$error$($5622, $5623, $5624);
                        var $5621 = $5625;
                        break;
                    case 'Parser.Reply.value':
                        var $5626 = self.idx;
                        var $5627 = self.code;
                        var $5628 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5626, $5627);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5630 = self.idx;
                                var $5631 = self.code;
                                var $5632 = self.err;
                                var $5633 = Parser$Reply$error$($5630, $5631, $5632);
                                var $5629 = $5633;
                                break;
                            case 'Parser.Reply.value':
                                var $5634 = self.idx;
                                var $5635 = self.code;
                                var $5636 = self.val;
                                var $5637 = Parser$Reply$value$($5634, $5635, Kind$Term$ori$($5636, Kind$Term$ann$(Bool$false, _term$2, $5628)));
                                var $5629 = $5637;
                                break;
                        };
                        var $5621 = $5629;
                        break;
                };
                var $5614 = $5621;
                break;
        };
        return $5614;
    };
    const Kind$Parser$annotation = x0 => x1 => x2 => x3 => Kind$Parser$annotation$(x0, x1, x2, x3);

    function Kind$Parser$application$hole$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("!", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5639 = self.idx;
                var $5640 = self.code;
                var $5641 = self.err;
                var $5642 = Parser$Reply$error$($5639, $5640, $5641);
                var $5638 = $5642;
                break;
            case 'Parser.Reply.value':
                var $5643 = self.idx;
                var $5644 = self.code;
                var self = Kind$Parser$stop$(_init$1, $5643, $5644);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5646 = self.idx;
                        var $5647 = self.code;
                        var $5648 = self.err;
                        var $5649 = Parser$Reply$error$($5646, $5647, $5648);
                        var $5645 = $5649;
                        break;
                    case 'Parser.Reply.value':
                        var $5650 = self.idx;
                        var $5651 = self.code;
                        var $5652 = self.val;
                        var $5653 = Parser$Reply$value$($5650, $5651, Kind$Term$ori$($5652, Kind$Term$app$(_term$2, Kind$Term$hol$(Bits$e))));
                        var $5645 = $5653;
                        break;
                };
                var $5638 = $5645;
                break;
        };
        return $5638;
    };
    const Kind$Parser$application$hole = x0 => x1 => x2 => x3 => Kind$Parser$application$hole$(x0, x1, x2, x3);

    function Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4) {
        var Kind$Parser$suffix$ = (_init$1, _term$2, _idx$3, _code$4) => ({
            ctr: 'TCO',
            arg: [_init$1, _term$2, _idx$3, _code$4]
        });
        var Kind$Parser$suffix = _init$1 => _term$2 => _idx$3 => _code$4 => Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4);
        var arg = [_init$1, _term$2, _idx$3, _code$4];
        while (true) {
            let [_init$1, _term$2, _idx$3, _code$4] = arg;
            var R = (() => {
                var _suffix_parser$5 = Parser$first_of$(List$cons$(Kind$Parser$application(_init$1)(_term$2), List$cons$(Kind$Parser$application$erased(_init$1)(_term$2), List$cons$(Kind$Parser$list_set(_init$1)(_term$2), List$cons$(Kind$Parser$list_get(_init$1)(_term$2), List$cons$(Kind$Parser$map_set(_init$1)(_term$2), List$cons$(Kind$Parser$map_get(_init$1)(_term$2), List$cons$(Kind$Parser$arrow(_init$1)(_term$2), List$cons$(Kind$Parser$add(_init$1)(_term$2), List$cons$(Kind$Parser$sub(_init$1)(_term$2), List$cons$(Kind$Parser$mul(_init$1)(_term$2), List$cons$(Kind$Parser$div(_init$1)(_term$2), List$cons$(Kind$Parser$mod(_init$1)(_term$2), List$cons$(Kind$Parser$ltn(_init$1)(_term$2), List$cons$(Kind$Parser$lte(_init$1)(_term$2), List$cons$(Kind$Parser$eql(_init$1)(_term$2), List$cons$(Kind$Parser$gte(_init$1)(_term$2), List$cons$(Kind$Parser$gtn(_init$1)(_term$2), List$cons$(Kind$Parser$and(_init$1)(_term$2), List$cons$(Kind$Parser$or(_init$1)(_term$2), List$cons$(Kind$Parser$default(_init$1)(_term$2), List$cons$(Kind$Parser$cons(_init$1)(_term$2), List$cons$(Kind$Parser$concat(_init$1)(_term$2), List$cons$(Kind$Parser$string_concat(_init$1)(_term$2), List$cons$(Kind$Parser$sigma(_init$1)(_term$2), List$cons$(Kind$Parser$equality(_init$1)(_term$2), List$cons$(Kind$Parser$inequality(_init$1)(_term$2), List$cons$(Kind$Parser$rewrite(_init$1)(_term$2), List$cons$(Kind$Parser$annotation(_init$1)(_term$2), List$cons$(Kind$Parser$application$hole(_init$1)(_term$2), List$nil))))))))))))))))))))))))))))));
                var self = _suffix_parser$5(_idx$3)(_code$4);
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $5655 = self.idx;
                        var $5656 = self.code;
                        var $5657 = self.val;
                        var $5658 = Kind$Parser$suffix$(_init$1, $5657, $5655, $5656);
                        var $5654 = $5658;
                        break;
                    case 'Parser.Reply.error':
                        var $5659 = Parser$Reply$value$(_idx$3, _code$4, _term$2);
                        var $5654 = $5659;
                        break;
                };
                return $5654;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Parser$suffix = x0 => x1 => x2 => x3 => Kind$Parser$suffix$(x0, x1, x2, x3);

    function Kind$Parser$term$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5661 = self.idx;
                var $5662 = self.code;
                var $5663 = self.err;
                var $5664 = Parser$Reply$error$($5661, $5662, $5663);
                var $5660 = $5664;
                break;
            case 'Parser.Reply.value':
                var $5665 = self.idx;
                var $5666 = self.code;
                var $5667 = self.val;
                var self = Parser$first_of$(List$cons$(Kind$Parser$forall, List$cons$(Kind$Parser$lambda, List$cons$(Kind$Parser$lambda$erased, List$cons$(Kind$Parser$lambda$nameless, List$cons$(Kind$Parser$parenthesis, List$cons$(Kind$Parser$letforrange$u32, List$cons$(Kind$Parser$letforrange$u32$with, List$cons$(Kind$Parser$letforrange$nat, List$cons$(Kind$Parser$letforrange$nat$with, List$cons$(Kind$Parser$letforin, List$cons$(Kind$Parser$letforin$with, List$cons$(Kind$Parser$letwhile, List$cons$(Kind$Parser$letwhile$with, List$cons$(Kind$Parser$let, List$cons$(Kind$Parser$let$omit, List$cons$(Kind$Parser$getwhile, List$cons$(Kind$Parser$getwhile$with, List$cons$(Kind$Parser$get, List$cons$(Kind$Parser$get$omit, List$cons$(Kind$Parser$def, List$cons$(Kind$Parser$goal_rewrite, List$cons$(Kind$Parser$if, List$cons$(Kind$Parser$char, List$cons$(Kind$Parser$string, List$cons$(Kind$Parser$pair, List$cons$(Kind$Parser$sigma$type, List$cons$(Kind$Parser$some, List$cons$(Kind$Parser$not, List$cons$(Kind$Parser$left, List$cons$(Kind$Parser$right, List$cons$(Kind$Parser$apply, List$cons$(Kind$Parser$chain, List$cons$(Kind$Parser$mirror, List$cons$(Kind$Parser$list, List$cons$(Kind$Parser$map, List$cons$(Kind$Parser$log, List$cons$(Kind$Parser$do, List$cons$(Kind$Parser$case, List$cons$(Kind$Parser$open, List$cons$(Kind$Parser$without, List$cons$(Kind$Parser$switch, List$cons$(Kind$Parser$goal, List$cons$(Kind$Parser$hole, List$cons$(Kind$Parser$float$64, List$cons$(Kind$Parser$float$32, List$cons$(Kind$Parser$machine_integer$signed$(256n), List$cons$(Kind$Parser$machine_integer$signed$(128n), List$cons$(Kind$Parser$machine_integer$signed$(64n), List$cons$(Kind$Parser$machine_integer$signed$(32n), List$cons$(Kind$Parser$machine_integer$signed$(16n), List$cons$(Kind$Parser$machine_integer$signed$(8n), List$cons$(Kind$Parser$int, List$cons$(Kind$Parser$machine_integer$unsigned$(256n), List$cons$(Kind$Parser$machine_integer$unsigned$(128n), List$cons$(Kind$Parser$machine_integer$unsigned$(64n), List$cons$(Kind$Parser$machine_integer$unsigned$(32n), List$cons$(Kind$Parser$machine_integer$unsigned$(16n), List$cons$(Kind$Parser$machine_integer$unsigned$(8n), List$cons$(Kind$Parser$u64, List$cons$(Kind$Parser$u32, List$cons$(Kind$Parser$u16, List$cons$(Kind$Parser$u8, List$cons$(Kind$Parser$nat, List$cons$(Kind$Parser$reference, List$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))($5665)($5666);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5669 = self.idx;
                        var $5670 = self.code;
                        var $5671 = self.err;
                        var $5672 = Parser$Reply$error$($5669, $5670, $5671);
                        var $5668 = $5672;
                        break;
                    case 'Parser.Reply.value':
                        var $5673 = self.idx;
                        var $5674 = self.code;
                        var $5675 = self.val;
                        var $5676 = Kind$Parser$suffix$($5667, $5675, $5673, $5674);
                        var $5668 = $5676;
                        break;
                };
                var $5660 = $5668;
                break;
        };
        return $5660;
    };
    const Kind$Parser$term = x0 => x1 => Kind$Parser$term$(x0, x1);

    function Kind$Parser$name_term$(_sep$1, _idx$2, _code$3) {
        var self = Kind$Parser$name$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5678 = self.idx;
                var $5679 = self.code;
                var $5680 = self.err;
                var $5681 = Parser$Reply$error$($5678, $5679, $5680);
                var $5677 = $5681;
                break;
            case 'Parser.Reply.value':
                var $5682 = self.idx;
                var $5683 = self.code;
                var $5684 = self.val;
                var self = Kind$Parser$text$(_sep$1, $5682, $5683);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5686 = self.idx;
                        var $5687 = self.code;
                        var $5688 = self.err;
                        var $5689 = Parser$Reply$error$($5686, $5687, $5688);
                        var $5685 = $5689;
                        break;
                    case 'Parser.Reply.value':
                        var $5690 = self.idx;
                        var $5691 = self.code;
                        var self = Kind$Parser$term$($5690, $5691);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5693 = self.idx;
                                var $5694 = self.code;
                                var $5695 = self.err;
                                var $5696 = Parser$Reply$error$($5693, $5694, $5695);
                                var $5692 = $5696;
                                break;
                            case 'Parser.Reply.value':
                                var $5697 = self.idx;
                                var $5698 = self.code;
                                var $5699 = self.val;
                                var $5700 = Parser$Reply$value$($5697, $5698, Pair$new$($5684, $5699));
                                var $5692 = $5700;
                                break;
                        };
                        var $5685 = $5692;
                        break;
                };
                var $5677 = $5685;
                break;
        };
        return $5677;
    };
    const Kind$Parser$name_term = x0 => x1 => x2 => Kind$Parser$name_term$(x0, x1, x2);

    function Kind$Binder$new$(_eras$1, _name$2, _term$3) {
        var $5701 = ({
            _: 'Kind.Binder.new',
            'eras': _eras$1,
            'name': _name$2,
            'term': _term$3
        });
        return $5701;
    };
    const Kind$Binder$new = x0 => x1 => x2 => Kind$Binder$new$(x0, x1, x2);

    function Kind$Parser$binder$homo$(_sep$1, _eras$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$((() => {
            var self = _eras$2;
            if (self) {
                var $5703 = "<";
                return $5703;
            } else {
                var $5704 = "(";
                return $5704;
            };
        })(), _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5705 = self.idx;
                var $5706 = self.code;
                var $5707 = self.err;
                var $5708 = Parser$Reply$error$($5705, $5706, $5707);
                var $5702 = $5708;
                break;
            case 'Parser.Reply.value':
                var $5709 = self.idx;
                var $5710 = self.code;
                var self = Parser$until1$(Kind$Parser$text((() => {
                    var self = _eras$2;
                    if (self) {
                        var $5712 = ">";
                        return $5712;
                    } else {
                        var $5713 = ")";
                        return $5713;
                    };
                })()), Kind$Parser$item(Kind$Parser$name_term(_sep$1)), $5709, $5710);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5714 = self.idx;
                        var $5715 = self.code;
                        var $5716 = self.err;
                        var $5717 = Parser$Reply$error$($5714, $5715, $5716);
                        var $5711 = $5717;
                        break;
                    case 'Parser.Reply.value':
                        var $5718 = self.idx;
                        var $5719 = self.code;
                        var $5720 = self.val;
                        var $5721 = Parser$Reply$value$($5718, $5719, List$mapped$($5720, (_pair$11 => {
                            var self = _pair$11;
                            switch (self._) {
                                case 'Pair.new':
                                    var $5723 = self.fst;
                                    var $5724 = self.snd;
                                    var $5725 = Kind$Binder$new$(_eras$2, $5723, $5724);
                                    var $5722 = $5725;
                                    break;
                            };
                            return $5722;
                        })));
                        var $5711 = $5721;
                        break;
                };
                var $5702 = $5711;
                break;
        };
        return $5702;
    };
    const Kind$Parser$binder$homo = x0 => x1 => x2 => x3 => Kind$Parser$binder$homo$(x0, x1, x2, x3);

    function List$concat$(_as$2, _bs$3) {
        var self = _as$2;
        switch (self._) {
            case 'List.cons':
                var $5727 = self.head;
                var $5728 = self.tail;
                var $5729 = List$cons$($5727, List$concat$($5728, _bs$3));
                var $5726 = $5729;
                break;
            case 'List.nil':
                var $5730 = _bs$3;
                var $5726 = $5730;
                break;
        };
        return $5726;
    };
    const List$concat = x0 => x1 => List$concat$(x0, x1);

    function List$flatten$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $5732 = self.head;
                var $5733 = self.tail;
                var $5734 = List$concat$($5732, List$flatten$($5733));
                var $5731 = $5734;
                break;
            case 'List.nil':
                var $5735 = List$nil;
                var $5731 = $5735;
                break;
        };
        return $5731;
    };
    const List$flatten = x0 => List$flatten$(x0);

    function Kind$Parser$binder$(_sep$1, _idx$2, _code$3) {
        var self = Parser$many1$(Parser$first_of$(List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$true), List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$false), List$nil))), _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5737 = self.idx;
                var $5738 = self.code;
                var $5739 = self.err;
                var $5740 = Parser$Reply$error$($5737, $5738, $5739);
                var $5736 = $5740;
                break;
            case 'Parser.Reply.value':
                var $5741 = self.idx;
                var $5742 = self.code;
                var $5743 = self.val;
                var $5744 = Parser$Reply$value$($5741, $5742, List$flatten$($5743));
                var $5736 = $5744;
                break;
        };
        return $5736;
    };
    const Kind$Parser$binder = x0 => x1 => x2 => Kind$Parser$binder$(x0, x1, x2);
    const List$length = a0 => (list_length(a0));

    function Kind$Parser$make_forall$(_binds$1, _body$2) {
        var self = _binds$1;
        switch (self._) {
            case 'List.cons':
                var $5746 = self.head;
                var $5747 = self.tail;
                var self = $5746;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5749 = self.eras;
                        var $5750 = self.name;
                        var $5751 = self.term;
                        var $5752 = Kind$Term$all$($5749, "", $5750, $5751, (_s$8 => _x$9 => {
                            var $5753 = Kind$Parser$make_forall$($5747, _body$2);
                            return $5753;
                        }));
                        var $5748 = $5752;
                        break;
                };
                var $5745 = $5748;
                break;
            case 'List.nil':
                var $5754 = _body$2;
                var $5745 = $5754;
                break;
        };
        return $5745;
    };
    const Kind$Parser$make_forall = x0 => x1 => Kind$Parser$make_forall$(x0, x1);

    function List$at_last$(_index$2, _list$3) {
        var $5755 = List$at$(_index$2, List$reverse$(_list$3));
        return $5755;
    };
    const List$at_last = x0 => x1 => List$at_last$(x0, x1);

    function Kind$Term$var$(_name$1, _indx$2) {
        var $5756 = ({
            _: 'Kind.Term.var',
            'name': _name$1,
            'indx': _indx$2
        });
        return $5756;
    };
    const Kind$Term$var = x0 => x1 => Kind$Term$var$(x0, x1);

    function Kind$Context$get_name_skips$(_name$1) {
        var self = _name$1;
        if (self.length === 0) {
            var $5758 = Pair$new$("", 0n);
            var $5757 = $5758;
        } else {
            var $5759 = self.charCodeAt(0);
            var $5760 = self.slice(1);
            var _name_skips$4 = Kind$Context$get_name_skips$($5760);
            var self = _name_skips$4;
            switch (self._) {
                case 'Pair.new':
                    var $5762 = self.fst;
                    var $5763 = self.snd;
                    var self = ($5759 === 94);
                    if (self) {
                        var $5765 = Pair$new$($5762, Nat$succ$($5763));
                        var $5764 = $5765;
                    } else {
                        var $5766 = Pair$new$(String$cons$($5759, $5762), $5763);
                        var $5764 = $5766;
                    };
                    var $5761 = $5764;
                    break;
            };
            var $5757 = $5761;
        };
        return $5757;
    };
    const Kind$Context$get_name_skips = x0 => Kind$Context$get_name_skips$(x0);

    function Kind$Name$eql$(_a$1, _b$2) {
        var $5767 = (_a$1 === _b$2);
        return $5767;
    };
    const Kind$Name$eql = x0 => x1 => Kind$Name$eql$(x0, x1);

    function Kind$Context$find$go$(_name$1, _skip$2, _ctx$3) {
        var Kind$Context$find$go$ = (_name$1, _skip$2, _ctx$3) => ({
            ctr: 'TCO',
            arg: [_name$1, _skip$2, _ctx$3]
        });
        var Kind$Context$find$go = _name$1 => _skip$2 => _ctx$3 => Kind$Context$find$go$(_name$1, _skip$2, _ctx$3);
        var arg = [_name$1, _skip$2, _ctx$3];
        while (true) {
            let [_name$1, _skip$2, _ctx$3] = arg;
            var R = (() => {
                var self = _ctx$3;
                switch (self._) {
                    case 'List.cons':
                        var $5768 = self.head;
                        var $5769 = self.tail;
                        var self = $5768;
                        switch (self._) {
                            case 'Pair.new':
                                var $5771 = self.fst;
                                var $5772 = self.snd;
                                var self = Kind$Name$eql$(_name$1, $5771);
                                if (self) {
                                    var self = _skip$2;
                                    if (self === 0n) {
                                        var $5775 = Maybe$some$($5772);
                                        var $5774 = $5775;
                                    } else {
                                        var $5776 = (self - 1n);
                                        var $5777 = Kind$Context$find$go$(_name$1, $5776, $5769);
                                        var $5774 = $5777;
                                    };
                                    var $5773 = $5774;
                                } else {
                                    var $5778 = Kind$Context$find$go$(_name$1, _skip$2, $5769);
                                    var $5773 = $5778;
                                };
                                var $5770 = $5773;
                                break;
                        };
                        return $5770;
                    case 'List.nil':
                        var $5779 = Maybe$none;
                        return $5779;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Context$find$go = x0 => x1 => x2 => Kind$Context$find$go$(x0, x1, x2);

    function Kind$Context$find$(_name$1, _ctx$2) {
        var self = Kind$Context$get_name_skips$(_name$1);
        switch (self._) {
            case 'Pair.new':
                var $5781 = self.fst;
                var $5782 = self.snd;
                var $5783 = Kind$Context$find$go$($5781, $5782, _ctx$2);
                var $5780 = $5783;
                break;
        };
        return $5780;
    };
    const Kind$Context$find = x0 => x1 => Kind$Context$find$(x0, x1);

    function Kind$Path$o$(_path$1, _x$2) {
        var $5784 = _path$1((_x$2 + '0'));
        return $5784;
    };
    const Kind$Path$o = x0 => x1 => Kind$Path$o$(x0, x1);

    function Kind$Path$i$(_path$1, _x$2) {
        var $5785 = _path$1((_x$2 + '1'));
        return $5785;
    };
    const Kind$Path$i = x0 => x1 => Kind$Path$i$(x0, x1);

    function Kind$Path$to_bits$(_path$1) {
        var $5786 = _path$1(Bits$e);
        return $5786;
    };
    const Kind$Path$to_bits = x0 => Kind$Path$to_bits$(x0);

    function Kind$Term$bind$(_vars$1, _path$2, _term$3) {
        var self = _term$3;
        switch (self._) {
            case 'Kind.Term.var':
                var $5788 = self.name;
                var $5789 = self.indx;
                var self = List$at_last$($5789, _vars$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $5791 = self.value;
                        var $5792 = Pair$snd$($5791);
                        var $5790 = $5792;
                        break;
                    case 'Maybe.none':
                        var $5793 = Kind$Term$var$($5788, $5789);
                        var $5790 = $5793;
                        break;
                };
                var $5787 = $5790;
                break;
            case 'Kind.Term.ref':
                var $5794 = self.name;
                var self = Kind$Context$find$($5794, _vars$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $5796 = self.value;
                        var $5797 = $5796;
                        var $5795 = $5797;
                        break;
                    case 'Maybe.none':
                        var $5798 = Kind$Term$ref$($5794);
                        var $5795 = $5798;
                        break;
                };
                var $5787 = $5795;
                break;
            case 'Kind.Term.all':
                var $5799 = self.eras;
                var $5800 = self.self;
                var $5801 = self.name;
                var $5802 = self.xtyp;
                var $5803 = self.body;
                var _vlen$9 = (list_length(_vars$1));
                var $5804 = Kind$Term$all$($5799, $5800, $5801, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5802), (_s$10 => _x$11 => {
                    var $5805 = Kind$Term$bind$(List$cons$(Pair$new$($5801, _x$11), List$cons$(Pair$new$($5800, _s$10), _vars$1)), Kind$Path$i(_path$2), $5803(Kind$Term$var$($5800, _vlen$9))(Kind$Term$var$($5801, Nat$succ$(_vlen$9))));
                    return $5805;
                }));
                var $5787 = $5804;
                break;
            case 'Kind.Term.lam':
                var $5806 = self.name;
                var $5807 = self.body;
                var _vlen$6 = (list_length(_vars$1));
                var $5808 = Kind$Term$lam$($5806, (_x$7 => {
                    var $5809 = Kind$Term$bind$(List$cons$(Pair$new$($5806, _x$7), _vars$1), Kind$Path$o(_path$2), $5807(Kind$Term$var$($5806, _vlen$6)));
                    return $5809;
                }));
                var $5787 = $5808;
                break;
            case 'Kind.Term.app':
                var $5810 = self.func;
                var $5811 = self.argm;
                var $5812 = Kind$Term$app$(Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5810), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $5811));
                var $5787 = $5812;
                break;
            case 'Kind.Term.let':
                var $5813 = self.name;
                var $5814 = self.expr;
                var $5815 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $5816 = Kind$Term$let$($5813, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5814), (_x$8 => {
                    var $5817 = Kind$Term$bind$(List$cons$(Pair$new$($5813, _x$8), _vars$1), Kind$Path$i(_path$2), $5815(Kind$Term$var$($5813, _vlen$7)));
                    return $5817;
                }));
                var $5787 = $5816;
                break;
            case 'Kind.Term.def':
                var $5818 = self.name;
                var $5819 = self.expr;
                var $5820 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $5821 = Kind$Term$def$($5818, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5819), (_x$8 => {
                    var $5822 = Kind$Term$bind$(List$cons$(Pair$new$($5818, _x$8), _vars$1), Kind$Path$i(_path$2), $5820(Kind$Term$var$($5818, _vlen$7)));
                    return $5822;
                }));
                var $5787 = $5821;
                break;
            case 'Kind.Term.ann':
                var $5823 = self.done;
                var $5824 = self.term;
                var $5825 = self.type;
                var $5826 = Kind$Term$ann$($5823, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5824), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $5825));
                var $5787 = $5826;
                break;
            case 'Kind.Term.gol':
                var $5827 = self.name;
                var $5828 = self.dref;
                var $5829 = self.verb;
                var $5830 = Kind$Term$gol$($5827, $5828, $5829);
                var $5787 = $5830;
                break;
            case 'Kind.Term.nat':
                var $5831 = self.natx;
                var $5832 = Kind$Term$nat$($5831);
                var $5787 = $5832;
                break;
            case 'Kind.Term.chr':
                var $5833 = self.chrx;
                var $5834 = Kind$Term$chr$($5833);
                var $5787 = $5834;
                break;
            case 'Kind.Term.str':
                var $5835 = self.strx;
                var $5836 = Kind$Term$str$($5835);
                var $5787 = $5836;
                break;
            case 'Kind.Term.cse':
                var $5837 = self.expr;
                var $5838 = self.name;
                var $5839 = self.with;
                var $5840 = self.cses;
                var $5841 = self.moti;
                var _expr$10 = Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5837);
                var _name$11 = $5838;
                var _wyth$12 = List$mapped$($5839, (_with_var$12 => {
                    var self = _with_var$12;
                    switch (self._) {
                        case 'Kind.Ann.new':
                            var $5844 = self.name;
                            var $5845 = self.term;
                            var $5846 = self.type;
                            var _with_var_term$16 = Kind$Term$bind$(_vars$1, _path$2, $5845);
                            var self = $5846;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $5848 = self.value;
                                    var $5849 = Maybe$some$(Kind$Term$bind$(_vars$1, _path$2, $5848));
                                    var _with_var_type$17 = $5849;
                                    break;
                                case 'Maybe.none':
                                    var $5850 = Maybe$none;
                                    var _with_var_type$17 = $5850;
                                    break;
                            };
                            var $5847 = Kind$Ann$new$($5844, _with_var_term$16, _with_var_type$17);
                            var $5843 = $5847;
                            break;
                    };
                    return $5843;
                }));
                var _cses$13 = $5840;
                var _moti$14 = $5841;
                var $5842 = Kind$Term$cse$(Kind$Path$to_bits$(_path$2), _expr$10, _name$11, _wyth$12, _cses$13, _moti$14);
                var $5787 = $5842;
                break;
            case 'Kind.Term.ori':
                var $5851 = self.orig;
                var $5852 = self.expr;
                var $5853 = Kind$Term$ori$($5851, Kind$Term$bind$(_vars$1, _path$2, $5852));
                var $5787 = $5853;
                break;
            case 'Kind.Term.typ':
                var $5854 = Kind$Term$typ;
                var $5787 = $5854;
                break;
            case 'Kind.Term.hol':
                var $5855 = Kind$Term$hol$(Kind$Path$to_bits$(_path$2));
                var $5787 = $5855;
                break;
        };
        return $5787;
    };
    const Kind$Term$bind = x0 => x1 => x2 => Kind$Term$bind$(x0, x1, x2);

    function BitsMap$set_if_empty$cps$go$(_bits$2, _val$3, _map$4, _cont$5) {
        var BitsMap$set_if_empty$cps$go$ = (_bits$2, _val$3, _map$4, _cont$5) => ({
            ctr: 'TCO',
            arg: [_bits$2, _val$3, _map$4, _cont$5]
        });
        var BitsMap$set_if_empty$cps$go = _bits$2 => _val$3 => _map$4 => _cont$5 => BitsMap$set_if_empty$cps$go$(_bits$2, _val$3, _map$4, _cont$5);
        var arg = [_bits$2, _val$3, _map$4, _cont$5];
        while (true) {
            let [_bits$2, _val$3, _map$4, _cont$5] = arg;
            var R = (() => {
                var self = _bits$2;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $5856 = self.slice(0, -1);
                        var self = _map$4;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $5858 = self.val;
                                var $5859 = self.lft;
                                var $5860 = self.rgt;
                                var $5861 = BitsMap$set_if_empty$cps$go$($5856, _val$3, $5859, (_lft$10 => {
                                    var $5862 = Trampoline$wrap$((_$11 => {
                                        var $5863 = _cont$5(BitsMap$tie$($5858, _lft$10, $5860));
                                        return $5863;
                                    }));
                                    return $5862;
                                }));
                                var $5857 = $5861;
                                break;
                            case 'BitsMap.new':
                                var $5864 = BitsMap$set_if_empty$cps$go$($5856, _val$3, BitsMap$new, (_lft$7 => {
                                    var $5865 = Trampoline$wrap$((_$8 => {
                                        var $5866 = _cont$5(BitsMap$tie$(Maybe$none, _lft$7, BitsMap$new));
                                        return $5866;
                                    }));
                                    return $5865;
                                }));
                                var $5857 = $5864;
                                break;
                        };
                        return $5857;
                    case 'i':
                        var $5867 = self.slice(0, -1);
                        var self = _map$4;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $5869 = self.val;
                                var $5870 = self.lft;
                                var $5871 = self.rgt;
                                var $5872 = BitsMap$set_if_empty$cps$go$($5867, _val$3, $5871, (_rgt$10 => {
                                    var $5873 = Trampoline$wrap$((_$11 => {
                                        var $5874 = _cont$5(BitsMap$tie$($5869, $5870, _rgt$10));
                                        return $5874;
                                    }));
                                    return $5873;
                                }));
                                var $5868 = $5872;
                                break;
                            case 'BitsMap.new':
                                var $5875 = BitsMap$set_if_empty$cps$go$($5867, _val$3, BitsMap$new, (_rgt$7 => {
                                    var $5876 = Trampoline$wrap$((_$8 => {
                                        var $5877 = _cont$5(BitsMap$tie$(Maybe$none, BitsMap$new, _rgt$7));
                                        return $5877;
                                    }));
                                    return $5876;
                                }));
                                var $5868 = $5875;
                                break;
                        };
                        return $5868;
                    case 'e':
                        var self = _map$4;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $5879 = self.val;
                                var $5880 = self.lft;
                                var $5881 = self.rgt;
                                var $5882 = _cont$5(BitsMap$tie$((() => {
                                    var self = $5879;
                                    switch (self._) {
                                        case 'Maybe.some':
                                            var $5883 = self.value;
                                            var $5884 = Maybe$some$($5883);
                                            return $5884;
                                        case 'Maybe.none':
                                            var $5885 = Maybe$some$(_val$3);
                                            return $5885;
                                    };
                                })(), $5880, $5881));
                                var $5878 = $5882;
                                break;
                            case 'BitsMap.new':
                                var $5886 = _cont$5(BitsMap$tie$(Maybe$some$(_val$3), BitsMap$new, BitsMap$new));
                                var $5878 = $5886;
                                break;
                        };
                        return $5878;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const BitsMap$set_if_empty$cps$go = x0 => x1 => x2 => x3 => BitsMap$set_if_empty$cps$go$(x0, x1, x2, x3);

    function BitsMap$set_if_empty$cps$(_bits$2, _val$3, _map$4) {
        var $5887 = Trampoline$call$(BitsMap$set_if_empty$cps$go$(_bits$2, _val$3, _map$4, Trampoline$done));
        return $5887;
    };
    const BitsMap$set_if_empty$cps = x0 => x1 => x2 => BitsMap$set_if_empty$cps$(x0, x1, x2);

    function BitsMap$set_if_empty$(_bits$2, _val$3, _map$4) {
        var $5888 = BitsMap$set_if_empty$cps$(_bits$2, _val$3, _map$4);
        return $5888;
    };
    const BitsMap$set_if_empty = x0 => x1 => x2 => BitsMap$set_if_empty$(x0, x1, x2);

    function Kind$Map$set_if_empty$(_name$2, _val$3, _map$4) {
        var $5889 = BitsMap$set_if_empty$((kind_name_to_bits(_name$2)), _val$3, _map$4);
        return $5889;
    };
    const Kind$Map$set_if_empty = x0 => x1 => x2 => Kind$Map$set_if_empty$(x0, x1, x2);
    const Kind$Status$init = ({
        _: 'Kind.Status.init'
    });

    function Kind$Map$def$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _done$9, _defs$10) {
        var _defn$11 = Kind$Def$new(_file$1)(_code$2)(_orig$3)(_name$4)(_term$5)(_type$6)(_isct$7)(_arit$8);
        var self = _done$9;
        if (self) {
            var $5891 = Kind$Map$set$(_name$4, _defn$11(Kind$Status$done), _defs$10);
            var $5890 = $5891;
        } else {
            var $5892 = Kind$Map$set_if_empty$(_name$4, _defn$11(Kind$Status$init), _defs$10);
            var $5890 = $5892;
        };
        return $5890;
    };
    const Kind$Map$def = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => Kind$Map$def$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);

    function Kind$Parser$file$def$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5894 = self.idx;
                var $5895 = self.code;
                var $5896 = self.err;
                var $5897 = Parser$Reply$error$($5894, $5895, $5896);
                var $5893 = $5897;
                break;
            case 'Parser.Reply.value':
                var $5898 = self.idx;
                var $5899 = self.code;
                var $5900 = self.val;
                var self = Kind$Parser$name1$($5898, $5899);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5902 = self.idx;
                        var $5903 = self.code;
                        var $5904 = self.err;
                        var $5905 = Parser$Reply$error$($5902, $5903, $5904);
                        var $5901 = $5905;
                        break;
                    case 'Parser.Reply.value':
                        var $5906 = self.idx;
                        var $5907 = self.code;
                        var $5908 = self.val;
                        var self = Parser$many$(Kind$Parser$binder(":"))($5906)($5907);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5910 = self.idx;
                                var $5911 = self.code;
                                var $5912 = self.err;
                                var $5913 = Parser$Reply$error$($5910, $5911, $5912);
                                var $5909 = $5913;
                                break;
                            case 'Parser.Reply.value':
                                var $5914 = self.idx;
                                var $5915 = self.code;
                                var $5916 = self.val;
                                var _args$15 = List$flatten$($5916);
                                var self = Kind$Parser$text$(":", $5914, $5915);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5918 = self.idx;
                                        var $5919 = self.code;
                                        var $5920 = self.err;
                                        var $5921 = Parser$Reply$error$($5918, $5919, $5920);
                                        var $5917 = $5921;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5922 = self.idx;
                                        var $5923 = self.code;
                                        var self = Kind$Parser$term$($5922, $5923);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5925 = self.idx;
                                                var $5926 = self.code;
                                                var $5927 = self.err;
                                                var $5928 = Parser$Reply$error$($5925, $5926, $5927);
                                                var $5924 = $5928;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5929 = self.idx;
                                                var $5930 = self.code;
                                                var $5931 = self.val;
                                                var self = Kind$Parser$term$($5929, $5930);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5933 = self.idx;
                                                        var $5934 = self.code;
                                                        var $5935 = self.err;
                                                        var $5936 = Parser$Reply$error$($5933, $5934, $5935);
                                                        var $5932 = $5936;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5937 = self.idx;
                                                        var $5938 = self.code;
                                                        var $5939 = self.val;
                                                        var self = Kind$Parser$stop$($5900, $5937, $5938);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $5941 = self.idx;
                                                                var $5942 = self.code;
                                                                var $5943 = self.err;
                                                                var $5944 = Parser$Reply$error$($5941, $5942, $5943);
                                                                var $5940 = $5944;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $5945 = self.idx;
                                                                var $5946 = self.code;
                                                                var $5947 = self.val;
                                                                var _arit$28 = (list_length(_args$15));
                                                                var _type$29 = Kind$Parser$make_forall$(_args$15, $5931);
                                                                var _term$30 = Kind$Parser$make_lambda$(List$mapped$(_args$15, (_x$30 => {
                                                                    var self = _x$30;
                                                                    switch (self._) {
                                                                        case 'Kind.Binder.new':
                                                                            var $5950 = self.name;
                                                                            var $5951 = $5950;
                                                                            var $5949 = $5951;
                                                                            break;
                                                                    };
                                                                    return $5949;
                                                                })), $5939);
                                                                var _type$31 = Kind$Term$bind$(List$nil, (_x$31 => {
                                                                    var $5952 = (_x$31 + '1');
                                                                    return $5952;
                                                                }), _type$29);
                                                                var _term$32 = Kind$Term$bind$(List$nil, (_x$32 => {
                                                                    var $5953 = (_x$32 + '0');
                                                                    return $5953;
                                                                }), _term$30);
                                                                var _defs$33 = Kind$Map$def$(_file$1, _code$2, $5947, $5908, _term$32, _type$31, Bool$false, _arit$28, Bool$false, _defs$3);
                                                                var $5948 = Parser$Reply$value$($5945, $5946, _defs$33);
                                                                var $5940 = $5948;
                                                                break;
                                                        };
                                                        var $5932 = $5940;
                                                        break;
                                                };
                                                var $5924 = $5932;
                                                break;
                                        };
                                        var $5917 = $5924;
                                        break;
                                };
                                var $5909 = $5917;
                                break;
                        };
                        var $5901 = $5909;
                        break;
                };
                var $5893 = $5901;
                break;
        };
        return $5893;
    };
    const Kind$Parser$file$def = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$def$(x0, x1, x2, x3, x4);

    function Kind$Constructor$new$(_name$1, _args$2, _inds$3) {
        var $5954 = ({
            _: 'Kind.Constructor.new',
            'name': _name$1,
            'args': _args$2,
            'inds': _inds$3
        });
        return $5954;
    };
    const Kind$Constructor$new = x0 => x1 => x2 => Kind$Constructor$new$(x0, x1, x2);

    function Kind$Parser$constructor$(_namespace$1, _idx$2, _code$3) {
        var self = Kind$Parser$name1$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5956 = self.idx;
                var $5957 = self.code;
                var $5958 = self.err;
                var $5959 = Parser$Reply$error$($5956, $5957, $5958);
                var $5955 = $5959;
                break;
            case 'Parser.Reply.value':
                var $5960 = self.idx;
                var $5961 = self.code;
                var $5962 = self.val;
                var self = Parser$maybe$(Kind$Parser$binder(":"), $5960, $5961);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5964 = self.idx;
                        var $5965 = self.code;
                        var $5966 = self.err;
                        var $5967 = Parser$Reply$error$($5964, $5965, $5966);
                        var $5963 = $5967;
                        break;
                    case 'Parser.Reply.value':
                        var $5968 = self.idx;
                        var $5969 = self.code;
                        var $5970 = self.val;
                        var self = Parser$maybe$((_idx$10 => _code$11 => {
                            var self = Kind$Parser$text$("~", _idx$10, _code$11);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $5973 = self.idx;
                                    var $5974 = self.code;
                                    var $5975 = self.err;
                                    var $5976 = Parser$Reply$error$($5973, $5974, $5975);
                                    var $5972 = $5976;
                                    break;
                                case 'Parser.Reply.value':
                                    var $5977 = self.idx;
                                    var $5978 = self.code;
                                    var $5979 = Kind$Parser$binder$("=", $5977, $5978);
                                    var $5972 = $5979;
                                    break;
                            };
                            return $5972;
                        }), $5968, $5969);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5980 = self.idx;
                                var $5981 = self.code;
                                var $5982 = self.err;
                                var $5983 = Parser$Reply$error$($5980, $5981, $5982);
                                var $5971 = $5983;
                                break;
                            case 'Parser.Reply.value':
                                var $5984 = self.idx;
                                var $5985 = self.code;
                                var $5986 = self.val;
                                var _args$13 = Maybe$default$($5970, List$nil);
                                var _inds$14 = Maybe$default$($5986, List$nil);
                                var $5987 = Parser$Reply$value$($5984, $5985, Kind$Constructor$new$($5962, _args$13, _inds$14));
                                var $5971 = $5987;
                                break;
                        };
                        var $5963 = $5971;
                        break;
                };
                var $5955 = $5963;
                break;
        };
        return $5955;
    };
    const Kind$Parser$constructor = x0 => x1 => x2 => Kind$Parser$constructor$(x0, x1, x2);

    function Kind$Datatype$new$(_name$1, _pars$2, _inds$3, _ctrs$4) {
        var $5988 = ({
            _: 'Kind.Datatype.new',
            'name': _name$1,
            'pars': _pars$2,
            'inds': _inds$3,
            'ctrs': _ctrs$4
        });
        return $5988;
    };
    const Kind$Datatype$new = x0 => x1 => x2 => x3 => Kind$Datatype$new$(x0, x1, x2, x3);

    function Kind$Parser$datatype$(_idx$1, _code$2) {
        var self = Kind$Parser$text$("type ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5990 = self.idx;
                var $5991 = self.code;
                var $5992 = self.err;
                var $5993 = Parser$Reply$error$($5990, $5991, $5992);
                var $5989 = $5993;
                break;
            case 'Parser.Reply.value':
                var $5994 = self.idx;
                var $5995 = self.code;
                var self = Kind$Parser$name1$($5994, $5995);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5997 = self.idx;
                        var $5998 = self.code;
                        var $5999 = self.err;
                        var $6000 = Parser$Reply$error$($5997, $5998, $5999);
                        var $5996 = $6000;
                        break;
                    case 'Parser.Reply.value':
                        var $6001 = self.idx;
                        var $6002 = self.code;
                        var $6003 = self.val;
                        var self = Parser$maybe$(Kind$Parser$binder(":"), $6001, $6002);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $6005 = self.idx;
                                var $6006 = self.code;
                                var $6007 = self.err;
                                var $6008 = Parser$Reply$error$($6005, $6006, $6007);
                                var $6004 = $6008;
                                break;
                            case 'Parser.Reply.value':
                                var $6009 = self.idx;
                                var $6010 = self.code;
                                var $6011 = self.val;
                                var self = Parser$maybe$((_idx$12 => _code$13 => {
                                    var self = Kind$Parser$text$("~", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $6014 = self.idx;
                                            var $6015 = self.code;
                                            var $6016 = self.err;
                                            var $6017 = Parser$Reply$error$($6014, $6015, $6016);
                                            var $6013 = $6017;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $6018 = self.idx;
                                            var $6019 = self.code;
                                            var $6020 = Kind$Parser$binder$(":", $6018, $6019);
                                            var $6013 = $6020;
                                            break;
                                    };
                                    return $6013;
                                }), $6009, $6010);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $6021 = self.idx;
                                        var $6022 = self.code;
                                        var $6023 = self.err;
                                        var $6024 = Parser$Reply$error$($6021, $6022, $6023);
                                        var $6012 = $6024;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $6025 = self.idx;
                                        var $6026 = self.code;
                                        var $6027 = self.val;
                                        var _pars$15 = Maybe$default$($6011, List$nil);
                                        var _inds$16 = Maybe$default$($6027, List$nil);
                                        var self = Kind$Parser$text$("{", $6025, $6026);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $6029 = self.idx;
                                                var $6030 = self.code;
                                                var $6031 = self.err;
                                                var $6032 = Parser$Reply$error$($6029, $6030, $6031);
                                                var $6028 = $6032;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $6033 = self.idx;
                                                var $6034 = self.code;
                                                var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$item(Kind$Parser$constructor($6003)))($6033)($6034);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $6036 = self.idx;
                                                        var $6037 = self.code;
                                                        var $6038 = self.err;
                                                        var $6039 = Parser$Reply$error$($6036, $6037, $6038);
                                                        var $6035 = $6039;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $6040 = self.idx;
                                                        var $6041 = self.code;
                                                        var $6042 = self.val;
                                                        var $6043 = Parser$Reply$value$($6040, $6041, Kind$Datatype$new$($6003, _pars$15, _inds$16, $6042));
                                                        var $6035 = $6043;
                                                        break;
                                                };
                                                var $6028 = $6035;
                                                break;
                                        };
                                        var $6012 = $6028;
                                        break;
                                };
                                var $6004 = $6012;
                                break;
                        };
                        var $5996 = $6004;
                        break;
                };
                var $5989 = $5996;
                break;
        };
        return $5989;
    };
    const Kind$Parser$datatype = x0 => x1 => Kind$Parser$datatype$(x0, x1);

    function Kind$Datatype$build_term$motive$go$(_type$1, _name$2, _inds$3) {
        var self = _inds$3;
        switch (self._) {
            case 'List.cons':
                var $6045 = self.head;
                var $6046 = self.tail;
                var self = $6045;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6048 = self.eras;
                        var $6049 = self.name;
                        var $6050 = self.term;
                        var $6051 = Kind$Term$all$($6048, "", $6049, $6050, (_s$9 => _x$10 => {
                            var $6052 = Kind$Datatype$build_term$motive$go$(_type$1, _name$2, $6046);
                            return $6052;
                        }));
                        var $6047 = $6051;
                        break;
                };
                var $6044 = $6047;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $6054 = self.pars;
                        var $6055 = self.inds;
                        var _slf$8 = Kind$Term$ref$(_name$2);
                        var _slf$9 = (() => {
                            var $6058 = _slf$8;
                            var $6059 = $6054;
                            let _slf$10 = $6058;
                            let _v$9;
                            while ($6059._ === 'List.cons') {
                                _v$9 = $6059.head;
                                var $6058 = Kind$Term$app$(_slf$10, Kind$Term$ref$((() => {
                                    var self = _v$9;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6060 = self.name;
                                            var $6061 = $6060;
                                            return $6061;
                                    };
                                })()));
                                _slf$10 = $6058;
                                $6059 = $6059.tail;
                            }
                            return _slf$10;
                        })();
                        var _slf$10 = (() => {
                            var $6063 = _slf$9;
                            var $6064 = $6055;
                            let _slf$11 = $6063;
                            let _v$10;
                            while ($6064._ === 'List.cons') {
                                _v$10 = $6064.head;
                                var $6063 = Kind$Term$app$(_slf$11, Kind$Term$ref$((() => {
                                    var self = _v$10;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6065 = self.name;
                                            var $6066 = $6065;
                                            return $6066;
                                    };
                                })()));
                                _slf$11 = $6063;
                                $6064 = $6064.tail;
                            }
                            return _slf$11;
                        })();
                        var $6056 = Kind$Term$all$(Bool$false, "", "", _slf$10, (_s$11 => _x$12 => {
                            var $6067 = Kind$Term$typ;
                            return $6067;
                        }));
                        var $6053 = $6056;
                        break;
                };
                var $6044 = $6053;
                break;
        };
        return $6044;
    };
    const Kind$Datatype$build_term$motive$go = x0 => x1 => x2 => Kind$Datatype$build_term$motive$go$(x0, x1, x2);

    function Kind$Datatype$build_term$motive$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6069 = self.name;
                var $6070 = self.inds;
                var $6071 = Kind$Datatype$build_term$motive$go$(_type$1, $6069, $6070);
                var $6068 = $6071;
                break;
        };
        return $6068;
    };
    const Kind$Datatype$build_term$motive = x0 => Kind$Datatype$build_term$motive$(x0);

    function Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, _args$3) {
        var self = _args$3;
        switch (self._) {
            case 'List.cons':
                var $6073 = self.head;
                var $6074 = self.tail;
                var self = $6073;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6076 = self.eras;
                        var $6077 = self.name;
                        var $6078 = self.term;
                        var _eras$9 = $6076;
                        var _name$10 = $6077;
                        var _xtyp$11 = $6078;
                        var _body$12 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $6074);
                        var $6079 = Kind$Term$all$(_eras$9, "", _name$10, _xtyp$11, (_s$13 => _x$14 => {
                            var $6080 = _body$12;
                            return $6080;
                        }));
                        var $6075 = $6079;
                        break;
                };
                var $6072 = $6075;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $6082 = self.name;
                        var $6083 = self.pars;
                        var self = _ctor$2;
                        switch (self._) {
                            case 'Kind.Constructor.new':
                                var $6085 = self.name;
                                var $6086 = self.args;
                                var $6087 = self.inds;
                                var _ret$11 = Kind$Term$ref$(Kind$Name$read$("P"));
                                var _ret$12 = (() => {
                                    var $6090 = _ret$11;
                                    var $6091 = $6087;
                                    let _ret$13 = $6090;
                                    let _v$12;
                                    while ($6091._ === 'List.cons') {
                                        _v$12 = $6091.head;
                                        var $6090 = Kind$Term$app$(_ret$13, (() => {
                                            var self = _v$12;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $6092 = self.term;
                                                    var $6093 = $6092;
                                                    return $6093;
                                            };
                                        })());
                                        _ret$13 = $6090;
                                        $6091 = $6091.tail;
                                    }
                                    return _ret$13;
                                })();
                                var _ctr$13 = String$flatten$(List$cons$($6082, List$cons$(Kind$Name$read$("."), List$cons$($6085, List$nil))));
                                var _slf$14 = Kind$Term$ref$(_ctr$13);
                                var _slf$15 = (() => {
                                    var $6095 = _slf$14;
                                    var $6096 = $6083;
                                    let _slf$16 = $6095;
                                    let _v$15;
                                    while ($6096._ === 'List.cons') {
                                        _v$15 = $6096.head;
                                        var $6095 = Kind$Term$app$(_slf$16, Kind$Term$ref$((() => {
                                            var self = _v$15;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $6097 = self.name;
                                                    var $6098 = $6097;
                                                    return $6098;
                                            };
                                        })()));
                                        _slf$16 = $6095;
                                        $6096 = $6096.tail;
                                    }
                                    return _slf$16;
                                })();
                                var _slf$16 = (() => {
                                    var $6100 = _slf$15;
                                    var $6101 = $6086;
                                    let _slf$17 = $6100;
                                    let _v$16;
                                    while ($6101._ === 'List.cons') {
                                        _v$16 = $6101.head;
                                        var $6100 = Kind$Term$app$(_slf$17, Kind$Term$ref$((() => {
                                            var self = _v$16;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $6102 = self.name;
                                                    var $6103 = $6102;
                                                    return $6103;
                                            };
                                        })()));
                                        _slf$17 = $6100;
                                        $6101 = $6101.tail;
                                    }
                                    return _slf$17;
                                })();
                                var $6088 = Kind$Term$app$(_ret$12, _slf$16);
                                var $6084 = $6088;
                                break;
                        };
                        var $6081 = $6084;
                        break;
                };
                var $6072 = $6081;
                break;
        };
        return $6072;
    };
    const Kind$Datatype$build_term$constructor$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructor$go$(x0, x1, x2);

    function Kind$Datatype$build_term$constructor$(_type$1, _ctor$2) {
        var self = _ctor$2;
        switch (self._) {
            case 'Kind.Constructor.new':
                var $6105 = self.args;
                var $6106 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $6105);
                var $6104 = $6106;
                break;
        };
        return $6104;
    };
    const Kind$Datatype$build_term$constructor = x0 => x1 => Kind$Datatype$build_term$constructor$(x0, x1);

    function Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.cons':
                var $6108 = self.head;
                var $6109 = self.tail;
                var self = $6108;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6111 = self.name;
                        var $6112 = Kind$Term$all$(Bool$false, "", $6111, Kind$Datatype$build_term$constructor$(_type$1, $6108), (_s$9 => _x$10 => {
                            var $6113 = Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, $6109);
                            return $6113;
                        }));
                        var $6110 = $6112;
                        break;
                };
                var $6107 = $6110;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $6115 = self.inds;
                        var _ret$8 = Kind$Term$ref$(Kind$Name$read$("P"));
                        var _ret$9 = (() => {
                            var $6118 = _ret$8;
                            var $6119 = $6115;
                            let _ret$10 = $6118;
                            let _v$9;
                            while ($6119._ === 'List.cons') {
                                _v$9 = $6119.head;
                                var $6118 = Kind$Term$app$(_ret$10, Kind$Term$ref$((() => {
                                    var self = _v$9;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6120 = self.name;
                                            var $6121 = $6120;
                                            return $6121;
                                    };
                                })()));
                                _ret$10 = $6118;
                                $6119 = $6119.tail;
                            }
                            return _ret$10;
                        })();
                        var $6116 = Kind$Term$app$(_ret$9, Kind$Term$ref$((_name$2 + ".Self")));
                        var $6114 = $6116;
                        break;
                };
                var $6107 = $6114;
                break;
        };
        return $6107;
    };
    const Kind$Datatype$build_term$constructors$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructors$go$(x0, x1, x2);

    function Kind$Datatype$build_term$constructors$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6123 = self.name;
                var $6124 = self.ctrs;
                var $6125 = Kind$Datatype$build_term$constructors$go$(_type$1, $6123, $6124);
                var $6122 = $6125;
                break;
        };
        return $6122;
    };
    const Kind$Datatype$build_term$constructors = x0 => Kind$Datatype$build_term$constructors$(x0);

    function Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.cons':
                var $6127 = self.head;
                var $6128 = self.tail;
                var self = $6127;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6130 = self.name;
                        var $6131 = Kind$Term$lam$($6130, (_x$10 => {
                            var $6132 = Kind$Datatype$build_term$go$(_type$1, _name$2, $6128, _inds$4);
                            return $6132;
                        }));
                        var $6129 = $6131;
                        break;
                };
                var $6126 = $6129;
                break;
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.cons':
                        var $6134 = self.head;
                        var $6135 = self.tail;
                        var self = $6134;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6137 = self.name;
                                var $6138 = Kind$Term$lam$($6137, (_x$10 => {
                                    var $6139 = Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, $6135);
                                    return $6139;
                                }));
                                var $6136 = $6138;
                                break;
                        };
                        var $6133 = $6136;
                        break;
                    case 'List.nil':
                        var $6140 = Kind$Term$all$(Bool$true, (_name$2 + ".Self"), Kind$Name$read$("P"), Kind$Datatype$build_term$motive$(_type$1), (_s$5 => _x$6 => {
                            var $6141 = Kind$Datatype$build_term$constructors$(_type$1);
                            return $6141;
                        }));
                        var $6133 = $6140;
                        break;
                };
                var $6126 = $6133;
                break;
        };
        return $6126;
    };
    const Kind$Datatype$build_term$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_term$go$(x0, x1, x2, x3);

    function Kind$Datatype$build_term$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6143 = self.name;
                var $6144 = self.pars;
                var $6145 = self.inds;
                var $6146 = Kind$Datatype$build_term$go$(_type$1, $6143, $6144, $6145);
                var $6142 = $6146;
                break;
        };
        return $6142;
    };
    const Kind$Datatype$build_term = x0 => Kind$Datatype$build_term$(x0);

    function Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.cons':
                var $6148 = self.head;
                var $6149 = self.tail;
                var self = $6148;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6151 = self.name;
                        var $6152 = self.term;
                        var $6153 = Kind$Term$all$(Bool$false, "", $6151, $6152, (_s$10 => _x$11 => {
                            var $6154 = Kind$Datatype$build_type$go$(_type$1, _name$2, $6149, _inds$4);
                            return $6154;
                        }));
                        var $6150 = $6153;
                        break;
                };
                var $6147 = $6150;
                break;
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.cons':
                        var $6156 = self.head;
                        var $6157 = self.tail;
                        var self = $6156;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6159 = self.name;
                                var $6160 = self.term;
                                var $6161 = Kind$Term$all$(Bool$false, "", $6159, $6160, (_s$10 => _x$11 => {
                                    var $6162 = Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, $6157);
                                    return $6162;
                                }));
                                var $6158 = $6161;
                                break;
                        };
                        var $6155 = $6158;
                        break;
                    case 'List.nil':
                        var $6163 = Kind$Term$typ;
                        var $6155 = $6163;
                        break;
                };
                var $6147 = $6155;
                break;
        };
        return $6147;
    };
    const Kind$Datatype$build_type$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_type$go$(x0, x1, x2, x3);

    function Kind$Datatype$build_type$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6165 = self.name;
                var $6166 = self.pars;
                var $6167 = self.inds;
                var $6168 = Kind$Datatype$build_type$go$(_type$1, $6165, $6166, $6167);
                var $6164 = $6168;
                break;
        };
        return $6164;
    };
    const Kind$Datatype$build_type = x0 => Kind$Datatype$build_type$(x0);

    function Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.cons':
                var $6170 = self.head;
                var $6171 = self.tail;
                var self = $6170;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6173 = self.name;
                        var $6174 = Kind$Term$lam$($6173, (_x$9 => {
                            var $6175 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $6171);
                            return $6175;
                        }));
                        var $6172 = $6174;
                        break;
                };
                var $6169 = $6172;
                break;
            case 'List.nil':
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6177 = self.name;
                        var $6178 = self.args;
                        var _ret$7 = Kind$Term$ref$($6177);
                        var _ret$8 = (() => {
                            var $6181 = _ret$7;
                            var $6182 = $6178;
                            let _ret$9 = $6181;
                            let _arg$8;
                            while ($6182._ === 'List.cons') {
                                _arg$8 = $6182.head;
                                var $6181 = Kind$Term$app$(_ret$9, Kind$Term$ref$((() => {
                                    var self = _arg$8;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $6183 = self.name;
                                            var $6184 = $6183;
                                            return $6184;
                                    };
                                })()));
                                _ret$9 = $6181;
                                $6182 = $6182.tail;
                            }
                            return _ret$9;
                        })();
                        var $6179 = _ret$8;
                        var $6176 = $6179;
                        break;
                };
                var $6169 = $6176;
                break;
        };
        return $6169;
    };
    const Kind$Constructor$build_term$opt$go = x0 => x1 => x2 => Kind$Constructor$build_term$opt$go$(x0, x1, x2);

    function Kind$Constructor$build_term$opt$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6186 = self.ctrs;
                var $6187 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $6186);
                var $6185 = $6187;
                break;
        };
        return $6185;
    };
    const Kind$Constructor$build_term$opt = x0 => x1 => Kind$Constructor$build_term$opt$(x0, x1);

    function Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.cons':
                var $6189 = self.head;
                var $6190 = self.tail;
                var self = $6189;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6192 = self.name;
                        var $6193 = Kind$Term$lam$($6192, (_x$11 => {
                            var $6194 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, $6190, _args$5);
                            return $6194;
                        }));
                        var $6191 = $6193;
                        break;
                };
                var $6188 = $6191;
                break;
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.cons':
                        var $6196 = self.head;
                        var $6197 = self.tail;
                        var self = $6196;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6199 = self.name;
                                var $6200 = Kind$Term$lam$($6199, (_x$11 => {
                                    var $6201 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, $6197);
                                    return $6201;
                                }));
                                var $6198 = $6200;
                                break;
                        };
                        var $6195 = $6198;
                        break;
                    case 'List.nil':
                        var $6202 = Kind$Term$lam$(Kind$Name$read$("P"), (_x$6 => {
                            var $6203 = Kind$Constructor$build_term$opt$(_type$1, _ctor$2);
                            return $6203;
                        }));
                        var $6195 = $6202;
                        break;
                };
                var $6188 = $6195;
                break;
        };
        return $6188;
    };
    const Kind$Constructor$build_term$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_term$go$(x0, x1, x2, x3, x4);

    function Kind$Constructor$build_term$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6205 = self.name;
                var $6206 = self.pars;
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6208 = self.args;
                        var $6209 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, $6205, $6206, $6208);
                        var $6207 = $6209;
                        break;
                };
                var $6204 = $6207;
                break;
        };
        return $6204;
    };
    const Kind$Constructor$build_term = x0 => x1 => Kind$Constructor$build_term$(x0, x1);

    function Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.cons':
                var $6211 = self.head;
                var $6212 = self.tail;
                var self = $6211;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $6214 = self.eras;
                        var $6215 = self.name;
                        var $6216 = self.term;
                        var $6217 = Kind$Term$all$($6214, "", $6215, $6216, (_s$11 => _x$12 => {
                            var $6218 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, $6212, _args$5);
                            return $6218;
                        }));
                        var $6213 = $6217;
                        break;
                };
                var $6210 = $6213;
                break;
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.cons':
                        var $6220 = self.head;
                        var $6221 = self.tail;
                        var self = $6220;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $6223 = self.eras;
                                var $6224 = self.name;
                                var $6225 = self.term;
                                var $6226 = Kind$Term$all$($6223, "", $6224, $6225, (_s$11 => _x$12 => {
                                    var $6227 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, $6221);
                                    return $6227;
                                }));
                                var $6222 = $6226;
                                break;
                        };
                        var $6219 = $6222;
                        break;
                    case 'List.nil':
                        var self = _type$1;
                        switch (self._) {
                            case 'Kind.Datatype.new':
                                var $6229 = self.pars;
                                var self = _ctor$2;
                                switch (self._) {
                                    case 'Kind.Constructor.new':
                                        var $6231 = self.inds;
                                        var _type$13 = Kind$Term$ref$(_name$3);
                                        var _type$14 = (() => {
                                            var $6234 = _type$13;
                                            var $6235 = $6229;
                                            let _type$15 = $6234;
                                            let _v$14;
                                            while ($6235._ === 'List.cons') {
                                                _v$14 = $6235.head;
                                                var $6234 = Kind$Term$app$(_type$15, Kind$Term$ref$((() => {
                                                    var self = _v$14;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $6236 = self.name;
                                                            var $6237 = $6236;
                                                            return $6237;
                                                    };
                                                })()));
                                                _type$15 = $6234;
                                                $6235 = $6235.tail;
                                            }
                                            return _type$15;
                                        })();
                                        var _type$15 = (() => {
                                            var $6239 = _type$14;
                                            var $6240 = $6231;
                                            let _type$16 = $6239;
                                            let _v$15;
                                            while ($6240._ === 'List.cons') {
                                                _v$15 = $6240.head;
                                                var $6239 = Kind$Term$app$(_type$16, (() => {
                                                    var self = _v$15;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $6241 = self.term;
                                                            var $6242 = $6241;
                                                            return $6242;
                                                    };
                                                })());
                                                _type$16 = $6239;
                                                $6240 = $6240.tail;
                                            }
                                            return _type$16;
                                        })();
                                        var $6232 = _type$15;
                                        var $6230 = $6232;
                                        break;
                                };
                                var $6228 = $6230;
                                break;
                        };
                        var $6219 = $6228;
                        break;
                };
                var $6210 = $6219;
                break;
        };
        return $6210;
    };
    const Kind$Constructor$build_type$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_type$go$(x0, x1, x2, x3, x4);

    function Kind$Constructor$build_type$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $6244 = self.name;
                var $6245 = self.pars;
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $6247 = self.args;
                        var $6248 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, $6244, $6245, $6247);
                        var $6246 = $6248;
                        break;
                };
                var $6243 = $6246;
                break;
        };
        return $6243;
    };
    const Kind$Constructor$build_type = x0 => x1 => Kind$Constructor$build_type$(x0, x1);

    function Kind$Parser$file$adt$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6250 = self.idx;
                var $6251 = self.code;
                var $6252 = self.err;
                var $6253 = Parser$Reply$error$($6250, $6251, $6252);
                var $6249 = $6253;
                break;
            case 'Parser.Reply.value':
                var $6254 = self.idx;
                var $6255 = self.code;
                var $6256 = self.val;
                var self = Kind$Parser$datatype$($6254, $6255);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $6258 = self.idx;
                        var $6259 = self.code;
                        var $6260 = self.err;
                        var $6261 = Parser$Reply$error$($6258, $6259, $6260);
                        var $6257 = $6261;
                        break;
                    case 'Parser.Reply.value':
                        var $6262 = self.idx;
                        var $6263 = self.code;
                        var $6264 = self.val;
                        var self = Kind$Parser$stop$($6256, $6262, $6263);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $6266 = self.idx;
                                var $6267 = self.code;
                                var $6268 = self.err;
                                var $6269 = Parser$Reply$error$($6266, $6267, $6268);
                                var $6265 = $6269;
                                break;
                            case 'Parser.Reply.value':
                                var $6270 = self.idx;
                                var $6271 = self.code;
                                var $6272 = self.val;
                                var self = $6264;
                                switch (self._) {
                                    case 'Kind.Datatype.new':
                                        var $6274 = self.name;
                                        var $6275 = self.pars;
                                        var $6276 = self.inds;
                                        var $6277 = self.ctrs;
                                        var _term$19 = Kind$Datatype$build_term$($6264);
                                        var _term$20 = Kind$Term$bind$(List$nil, (_x$20 => {
                                            var $6279 = (_x$20 + '1');
                                            return $6279;
                                        }), _term$19);
                                        var _type$21 = Kind$Datatype$build_type$($6264);
                                        var _type$22 = Kind$Term$bind$(List$nil, (_x$22 => {
                                            var $6280 = (_x$22 + '0');
                                            return $6280;
                                        }), _type$21);
                                        var _arit$23 = ((list_length($6275)) + (list_length($6276)));
                                        var _defs$24 = Kind$Map$def$(_file$1, _code$2, $6272, $6274, _term$20, _type$22, Bool$false, _arit$23, Bool$false, _defs$3);
                                        var _defs$25 = List$fold$($6277, _defs$24, (_ctr$25 => _defs$26 => {
                                            var _typ_name$27 = $6274;
                                            var _ctr_arit$28 = (_arit$23 + (list_length((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Kind.Constructor.new':
                                                        var $6282 = self.args;
                                                        var $6283 = $6282;
                                                        return $6283;
                                                };
                                            })())));
                                            var _ctr_name$29 = String$flatten$(List$cons$(_typ_name$27, List$cons$(Kind$Name$read$("."), List$cons$((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Kind.Constructor.new':
                                                        var $6284 = self.name;
                                                        var $6285 = $6284;
                                                        return $6285;
                                                };
                                            })(), List$nil))));
                                            var _ctr_term$30 = Kind$Constructor$build_term$($6264, _ctr$25);
                                            var _ctr_term$31 = Kind$Term$bind$(List$nil, (_x$31 => {
                                                var $6286 = (_x$31 + '1');
                                                return $6286;
                                            }), _ctr_term$30);
                                            var _ctr_type$32 = Kind$Constructor$build_type$($6264, _ctr$25);
                                            var _ctr_type$33 = Kind$Term$bind$(List$nil, (_x$33 => {
                                                var $6287 = (_x$33 + '0');
                                                return $6287;
                                            }), _ctr_type$32);
                                            var $6281 = Kind$Map$def$(_file$1, _code$2, $6272, _ctr_name$29, _ctr_term$31, _ctr_type$33, Bool$true, _ctr_arit$28, Bool$false, _defs$26);
                                            return $6281;
                                        }));
                                        var $6278 = (_idx$26 => _code$27 => {
                                            var $6288 = Parser$Reply$value$(_idx$26, _code$27, _defs$25);
                                            return $6288;
                                        });
                                        var $6273 = $6278;
                                        break;
                                };
                                var $6273 = $6273($6270)($6271);
                                var $6265 = $6273;
                                break;
                        };
                        var $6257 = $6265;
                        break;
                };
                var $6249 = $6257;
                break;
        };
        return $6249;
    };
    const Kind$Parser$file$adt = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$adt$(x0, x1, x2, x3, x4);

    function Kind$Parser$file$end$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$spaces(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6290 = self.idx;
                var $6291 = self.code;
                var $6292 = self.err;
                var $6293 = Parser$Reply$error$($6290, $6291, $6292);
                var $6289 = $6293;
                break;
            case 'Parser.Reply.value':
                var $6294 = self.idx;
                var $6295 = self.code;
                var self = Parser$eof$($6294, $6295);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $6297 = self.idx;
                        var $6298 = self.code;
                        var $6299 = self.err;
                        var $6300 = Parser$Reply$error$($6297, $6298, $6299);
                        var $6296 = $6300;
                        break;
                    case 'Parser.Reply.value':
                        var $6301 = self.idx;
                        var $6302 = self.code;
                        var $6303 = Parser$Reply$value$($6301, $6302, _defs$3);
                        var $6296 = $6303;
                        break;
                };
                var $6289 = $6296;
                break;
        };
        return $6289;
    };
    const Kind$Parser$file$end = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$end$(x0, x1, x2, x3, x4);

    function Kind$Parser$file$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Parser$is_eof$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6305 = self.idx;
                var $6306 = self.code;
                var $6307 = self.err;
                var $6308 = Parser$Reply$error$($6305, $6306, $6307);
                var $6304 = $6308;
                break;
            case 'Parser.Reply.value':
                var $6309 = self.idx;
                var $6310 = self.code;
                var $6311 = self.val;
                var self = $6311;
                if (self) {
                    var $6313 = (_idx$9 => _code$10 => {
                        var $6314 = Parser$Reply$value$(_idx$9, _code$10, _defs$3);
                        return $6314;
                    });
                    var $6312 = $6313;
                } else {
                    var $6315 = (_idx$9 => _code$10 => {
                        var self = Parser$first_of$(List$cons$(Kind$Parser$file$def(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$adt(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$end(_file$1)(_code$2)(_defs$3), List$nil))))(_idx$9)(_code$10);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $6317 = self.idx;
                                var $6318 = self.code;
                                var $6319 = self.err;
                                var $6320 = Parser$Reply$error$($6317, $6318, $6319);
                                var $6316 = $6320;
                                break;
                            case 'Parser.Reply.value':
                                var $6321 = self.idx;
                                var $6322 = self.code;
                                var $6323 = self.val;
                                var $6324 = Kind$Parser$file$(_file$1, _code$2, $6323, $6321, $6322);
                                var $6316 = $6324;
                                break;
                        };
                        return $6316;
                    });
                    var $6312 = $6315;
                };
                var $6312 = $6312($6309)($6310);
                var $6304 = $6312;
                break;
        };
        return $6304;
    };
    const Kind$Parser$file = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$(x0, x1, x2, x3, x4);

    function String$join$go$(_sep$1, _list$2, _fst$3) {
        var self = _list$2;
        switch (self._) {
            case 'List.cons':
                var $6326 = self.head;
                var $6327 = self.tail;
                var $6328 = String$flatten$(List$cons$((() => {
                    var self = _fst$3;
                    if (self) {
                        var $6329 = "";
                        return $6329;
                    } else {
                        var $6330 = _sep$1;
                        return $6330;
                    };
                })(), List$cons$($6326, List$cons$(String$join$go$(_sep$1, $6327, Bool$false), List$nil))));
                var $6325 = $6328;
                break;
            case 'List.nil':
                var $6331 = "";
                var $6325 = $6331;
                break;
        };
        return $6325;
    };
    const String$join$go = x0 => x1 => x2 => String$join$go$(x0, x1, x2);

    function String$join$(_sep$1, _list$2) {
        var $6332 = String$join$go$(_sep$1, _list$2, Bool$true);
        return $6332;
    };
    const String$join = x0 => x1 => String$join$(x0, x1);

    function Kind$Code$highlight$end$(_col$1, _row$2, _res$3) {
        var $6333 = String$join$("\u{a}", _res$3);
        return $6333;
    };
    const Kind$Code$highlight$end = x0 => x1 => x2 => Kind$Code$highlight$end$(x0, x1, x2);

    function Maybe$extract$(_m$2, _a$4, _f$5) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $6335 = self.value;
                var $6336 = _f$5($6335);
                var $6334 = $6336;
                break;
            case 'Maybe.none':
                var $6337 = _a$4;
                var $6334 = $6337;
                break;
        };
        return $6334;
    };
    const Maybe$extract = x0 => x1 => x2 => Maybe$extract$(x0, x1, x2);

    function Nat$is_zero$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $6339 = Bool$true;
            var $6338 = $6339;
        } else {
            var $6340 = (self - 1n);
            var $6341 = Bool$false;
            var $6338 = $6341;
        };
        return $6338;
    };
    const Nat$is_zero = x0 => Nat$is_zero$(x0);

    function Nat$double$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $6343 = Nat$zero;
            var $6342 = $6343;
        } else {
            var $6344 = (self - 1n);
            var $6345 = Nat$succ$(Nat$succ$(Nat$double$($6344)));
            var $6342 = $6345;
        };
        return $6342;
    };
    const Nat$double = x0 => Nat$double$(x0);

    function String$pad_right$(_size$1, _chr$2, _str$3) {
        var self = _size$1;
        if (self === 0n) {
            var $6347 = _str$3;
            var $6346 = $6347;
        } else {
            var $6348 = (self - 1n);
            var self = _str$3;
            if (self.length === 0) {
                var $6350 = String$cons$(_chr$2, String$pad_right$($6348, _chr$2, ""));
                var $6349 = $6350;
            } else {
                var $6351 = self.charCodeAt(0);
                var $6352 = self.slice(1);
                var $6353 = String$cons$($6351, String$pad_right$($6348, _chr$2, $6352));
                var $6349 = $6353;
            };
            var $6346 = $6349;
        };
        return $6346;
    };
    const String$pad_right = x0 => x1 => x2 => String$pad_right$(x0, x1, x2);

    function String$pad_left$(_size$1, _chr$2, _str$3) {
        var $6354 = String$reverse$(String$pad_right$(_size$1, _chr$2, String$reverse$(_str$3)));
        return $6354;
    };
    const String$pad_left = x0 => x1 => x2 => String$pad_left$(x0, x1, x2);

    function Kind$Code$color$(_col$1, _str$2) {
        var $6355 = String$cons$(27, String$cons$(91, (_col$1 + String$cons$(109, (_str$2 + String$cons$(27, String$cons$(91, String$cons$(48, String$cons$(109, String$nil)))))))));
        return $6355;
    };
    const Kind$Code$color = x0 => x1 => Kind$Code$color$(x0, x1);

    function List$take$(_n$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.cons':
                var $6357 = self.head;
                var $6358 = self.tail;
                var self = _n$2;
                if (self === 0n) {
                    var $6360 = List$nil;
                    var $6359 = $6360;
                } else {
                    var $6361 = (self - 1n);
                    var $6362 = List$cons$($6357, List$take$($6361, $6358));
                    var $6359 = $6362;
                };
                var $6356 = $6359;
                break;
            case 'List.nil':
                var $6363 = List$nil;
                var $6356 = $6363;
                break;
        };
        return $6356;
    };
    const List$take = x0 => x1 => List$take$(x0, x1);

    function Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) {
        var Kind$Code$highlight$go$ = (_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) => ({
            ctr: 'TCO',
            arg: [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8]
        });
        var Kind$Code$highlight$go = _code$1 => _ix0$2 => _ix1$3 => _col$4 => _row$5 => _lft$6 => _lin$7 => _res$8 => Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8);
        var arg = [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8];
        while (true) {
            let [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8] = arg;
            var R = (() => {
                var _spa$9 = 3n;
                var self = _code$1;
                if (self.length === 0) {
                    var $6365 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                    var $6364 = $6365;
                } else {
                    var $6366 = self.charCodeAt(0);
                    var $6367 = self.slice(1);
                    var self = ($6366 === 10);
                    if (self) {
                        var _stp$12 = Maybe$extract$(_lft$6, Bool$false, Nat$is_zero);
                        var self = _stp$12;
                        if (self) {
                            var $6370 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                            var $6369 = $6370;
                        } else {
                            var _siz$13 = Nat$succ$(Nat$double$(_spa$9));
                            var self = _ix1$3;
                            if (self === 0n) {
                                var self = _lft$6;
                                switch (self._) {
                                    case 'Maybe.some':
                                        var $6373 = self.value;
                                        var $6374 = Maybe$some$(Nat$pred$($6373));
                                        var $6372 = $6374;
                                        break;
                                    case 'Maybe.none':
                                        var $6375 = Maybe$some$(_spa$9);
                                        var $6372 = $6375;
                                        break;
                                };
                                var _lft$14 = $6372;
                            } else {
                                var $6376 = (self - 1n);
                                var $6377 = _lft$6;
                                var _lft$14 = $6377;
                            };
                            var _ix0$15 = Nat$pred$(_ix0$2);
                            var _ix1$16 = Nat$pred$(_ix1$3);
                            var _col$17 = 0n;
                            var _row$18 = Nat$succ$(_row$5);
                            var _res$19 = List$cons$(String$reverse$(_lin$7), _res$8);
                            var _lin$20 = String$reverse$(String$flatten$(List$cons$(String$pad_left$(4n, 32, Nat$show$(_row$18)), List$cons$(" | ", List$nil))));
                            var $6371 = Kind$Code$highlight$go$($6367, _ix0$15, _ix1$16, _col$17, _row$18, _lft$14, _lin$20, _res$19);
                            var $6369 = $6371;
                        };
                        var $6368 = $6369;
                    } else {
                        var _chr$12 = String$cons$($6366, String$nil);
                        var self = (Nat$is_zero$(_ix0$2) && (!Nat$is_zero$(_ix1$3)));
                        if (self) {
                            var $6379 = String$reverse$(Kind$Code$color$("31", Kind$Code$color$("4", _chr$12)));
                            var _chr$13 = $6379;
                        } else {
                            var $6380 = _chr$12;
                            var _chr$13 = $6380;
                        };
                        var self = (_ix0$2 === 1n);
                        if (self) {
                            var $6381 = List$take$(_spa$9, _res$8);
                            var _res$14 = $6381;
                        } else {
                            var $6382 = _res$8;
                            var _res$14 = $6382;
                        };
                        var _ix0$15 = Nat$pred$(_ix0$2);
                        var _ix1$16 = Nat$pred$(_ix1$3);
                        var _col$17 = Nat$succ$(_col$4);
                        var _lin$18 = String$flatten$(List$cons$(_chr$13, List$cons$(_lin$7, List$nil)));
                        var $6378 = Kind$Code$highlight$go$($6367, _ix0$15, _ix1$16, _col$17, _row$5, _lft$6, _lin$18, _res$14);
                        var $6368 = $6378;
                    };
                    var $6364 = $6368;
                };
                return $6364;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Code$highlight$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Code$highlight$go$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Kind$Code$highlight$(_code$1, _idx0$2, _idx1$3) {
        var $6383 = Kind$Code$highlight$go$(_code$1, _idx0$2, _idx1$3, 0n, 1n, Maybe$none, String$reverse$("   1 | "), List$nil);
        return $6383;
    };
    const Kind$Code$highlight = x0 => x1 => x2 => Kind$Code$highlight$(x0, x1, x2);

    function Kind$Defs$read$(_file$1, _code$2, _defs$3) {
        var self = Kind$Parser$file$(_file$1, _code$2, _defs$3, 0n, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $6385 = self.idx;
                var $6386 = self.err;
                var _err$7 = $6386;
                var _hig$8 = Kind$Code$highlight$(_code$2, $6385, Nat$succ$($6385));
                var _str$9 = String$flatten$(List$cons$(_err$7, List$cons$("\u{a}", List$cons$(_hig$8, List$nil))));
                var $6387 = Either$left$(_str$9);
                var $6384 = $6387;
                break;
            case 'Parser.Reply.value':
                var $6388 = self.val;
                var $6389 = Either$right$($6388);
                var $6384 = $6389;
                break;
        };
        return $6384;
    };
    const Kind$Defs$read = x0 => x1 => x2 => Kind$Defs$read$(x0, x1, x2);

    function Kind$Synth$load$go$(_name$1, _files$2, _defs$3) {
        var self = _files$2;
        switch (self._) {
            case 'List.cons':
                var $6391 = self.head;
                var $6392 = self.tail;
                var $6393 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                    var $6394 = _m$bind$6;
                    return $6394;
                }))(IO$get_file$($6391))((_code$6 => {
                    var _read$7 = Kind$Defs$read$($6391, _code$6, _defs$3);
                    var self = _read$7;
                    switch (self._) {
                        case 'Either.right':
                            var $6396 = self.value;
                            var _defs$9 = $6396;
                            var self = Kind$Map$get$(_name$1, _defs$9);
                            switch (self._) {
                                case 'Maybe.none':
                                    var $6398 = Kind$Synth$load$go$(_name$1, $6392, _defs$9);
                                    var $6397 = $6398;
                                    break;
                                case 'Maybe.some':
                                    var $6399 = IO$monad$((_m$bind$11 => _m$pure$12 => {
                                        var $6400 = _m$pure$12;
                                        return $6400;
                                    }))(Maybe$some$(_defs$9));
                                    var $6397 = $6399;
                                    break;
                            };
                            var $6395 = $6397;
                            break;
                        case 'Either.left':
                            var $6401 = Kind$Synth$load$go$(_name$1, $6392, _defs$3);
                            var $6395 = $6401;
                            break;
                    };
                    return $6395;
                }));
                var $6390 = $6393;
                break;
            case 'List.nil':
                var $6402 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                    var $6403 = _m$pure$5;
                    return $6403;
                }))(Maybe$none);
                var $6390 = $6402;
                break;
        };
        return $6390;
    };
    const Kind$Synth$load$go = x0 => x1 => x2 => Kind$Synth$load$go$(x0, x1, x2);

    function Kind$Synth$files_of$make$(_names$1, _last$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $6405 = self.head;
                var $6406 = self.tail;
                var _head$5 = (_last$2 + ($6405 + ".kind"));
                var _tail$6 = Kind$Synth$files_of$make$($6406, (_last$2 + ($6405 + "/")));
                var $6407 = List$cons$(_head$5, _tail$6);
                var $6404 = $6407;
                break;
            case 'List.nil':
                var $6408 = List$nil;
                var $6404 = $6408;
                break;
        };
        return $6404;
    };
    const Kind$Synth$files_of$make = x0 => x1 => Kind$Synth$files_of$make$(x0, x1);

    function String$length$go$(_xs$1, _n$2) {
        var String$length$go$ = (_xs$1, _n$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _n$2]
        });
        var String$length$go = _xs$1 => _n$2 => String$length$go$(_xs$1, _n$2);
        var arg = [_xs$1, _n$2];
        while (true) {
            let [_xs$1, _n$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $6409 = _n$2;
                    return $6409;
                } else {
                    var $6410 = self.charCodeAt(0);
                    var $6411 = self.slice(1);
                    var $6412 = String$length$go$($6411, Nat$succ$(_n$2));
                    return $6412;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$length$go = x0 => x1 => String$length$go$(x0, x1);

    function String$length$(_xs$1) {
        var $6413 = String$length$go$(_xs$1, 0n);
        return $6413;
    };
    const String$length = x0 => String$length$(x0);

    function String$split$go$(_xs$1, _match$2, _last$3) {
        var self = _xs$1;
        if (self.length === 0) {
            var $6415 = List$cons$(_last$3, List$nil);
            var $6414 = $6415;
        } else {
            var $6416 = self.charCodeAt(0);
            var $6417 = self.slice(1);
            var self = String$starts_with$(_xs$1, _match$2);
            if (self) {
                var _rest$6 = String$drop$(String$length$(_match$2), _xs$1);
                var $6419 = List$cons$(_last$3, String$split$go$(_rest$6, _match$2, ""));
                var $6418 = $6419;
            } else {
                var _next$6 = String$cons$($6416, String$nil);
                var $6420 = String$split$go$($6417, _match$2, (_last$3 + _next$6));
                var $6418 = $6420;
            };
            var $6414 = $6418;
        };
        return $6414;
    };
    const String$split$go = x0 => x1 => x2 => String$split$go$(x0, x1, x2);

    function String$split$(_xs$1, _match$2) {
        var $6421 = String$split$go$(_xs$1, _match$2, "");
        return $6421;
    };
    const String$split = x0 => x1 => String$split$(x0, x1);

    function Kind$Synth$files_of$(_name$1) {
        var $6422 = List$reverse$(Kind$Synth$files_of$make$(String$split$(_name$1, "."), ""));
        return $6422;
    };
    const Kind$Synth$files_of = x0 => Kind$Synth$files_of$(x0);

    function Kind$Synth$load$(_name$1, _defs$2) {
        var $6423 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $6424 = _m$bind$3;
            return $6424;
        }))(Kind$Synth$load$cached$(List$cons$(_name$1, List$nil), _defs$2))((_cached_defs$3 => {
            var self = _cached_defs$3;
            switch (self._) {
                case 'Maybe.some':
                    var $6426 = self.value;
                    var $6427 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                        var $6428 = _m$pure$6;
                        return $6428;
                    }))(Maybe$some$($6426));
                    var $6425 = $6427;
                    break;
                case 'Maybe.none':
                    var $6429 = Kind$Synth$load$go$(_name$1, Kind$Synth$files_of$(_name$1), _defs$2);
                    var $6425 = $6429;
                    break;
            };
            return $6425;
        }));
        return $6423;
    };
    const Kind$Synth$load = x0 => x1 => Kind$Synth$load$(x0, x1);
    const Kind$Status$wait = ({
        _: 'Kind.Status.wait'
    });

    function Kind$Check$(_V$1) {
        var $6430 = null;
        return $6430;
    };
    const Kind$Check = x0 => Kind$Check$(x0);

    function Kind$Check$result$(_value$2, _errors$3) {
        var $6431 = ({
            _: 'Kind.Check.result',
            'value': _value$2,
            'errors': _errors$3
        });
        return $6431;
    };
    const Kind$Check$result = x0 => x1 => Kind$Check$result$(x0, x1);

    function Kind$Error$undefined_reference$(_origin$1, _name$2) {
        var $6432 = ({
            _: 'Kind.Error.undefined_reference',
            'origin': _origin$1,
            'name': _name$2
        });
        return $6432;
    };
    const Kind$Error$undefined_reference = x0 => x1 => Kind$Error$undefined_reference$(x0, x1);

    function Kind$Error$waiting$(_name$1) {
        var $6433 = ({
            _: 'Kind.Error.waiting',
            'name': _name$1
        });
        return $6433;
    };
    const Kind$Error$waiting = x0 => Kind$Error$waiting$(x0);

    function Kind$Error$indirect$(_name$1) {
        var $6434 = ({
            _: 'Kind.Error.indirect',
            'name': _name$1
        });
        return $6434;
    };
    const Kind$Error$indirect = x0 => Kind$Error$indirect$(x0);

    function Maybe$mapped$(_m$2, _f$4) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $6436 = self.value;
                var $6437 = Maybe$some$(_f$4($6436));
                var $6435 = $6437;
                break;
            case 'Maybe.none':
                var $6438 = Maybe$none;
                var $6435 = $6438;
                break;
        };
        return $6435;
    };
    const Maybe$mapped = x0 => x1 => Maybe$mapped$(x0, x1);

    function Kind$MPath$o$(_path$1) {
        var $6439 = Maybe$mapped$(_path$1, Kind$Path$o);
        return $6439;
    };
    const Kind$MPath$o = x0 => Kind$MPath$o$(x0);

    function Kind$MPath$i$(_path$1) {
        var $6440 = Maybe$mapped$(_path$1, Kind$Path$i);
        return $6440;
    };
    const Kind$MPath$i = x0 => Kind$MPath$i$(x0);

    function Kind$Error$patch$(_path$1, _term$2) {
        var $6441 = ({
            _: 'Kind.Error.patch',
            'path': _path$1,
            'term': _term$2
        });
        return $6441;
    };
    const Kind$Error$patch = x0 => x1 => Kind$Error$patch$(x0, x1);

    function Kind$MPath$to_bits$(_path$1) {
        var self = _path$1;
        switch (self._) {
            case 'Maybe.some':
                var $6443 = self.value;
                var $6444 = $6443(Bits$e);
                var $6442 = $6444;
                break;
            case 'Maybe.none':
                var $6445 = Bits$e;
                var $6442 = $6445;
                break;
        };
        return $6442;
    };
    const Kind$MPath$to_bits = x0 => Kind$MPath$to_bits$(x0);

    function Kind$Error$type_mismatch$(_origin$1, _expected$2, _detected$3, _context$4) {
        var $6446 = ({
            _: 'Kind.Error.type_mismatch',
            'origin': _origin$1,
            'expected': _expected$2,
            'detected': _detected$3,
            'context': _context$4
        });
        return $6446;
    };
    const Kind$Error$type_mismatch = x0 => x1 => x2 => x3 => Kind$Error$type_mismatch$(x0, x1, x2, x3);

    function Kind$Error$show_goal$(_name$1, _dref$2, _verb$3, _goal$4, _context$5) {
        var $6447 = ({
            _: 'Kind.Error.show_goal',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3,
            'goal': _goal$4,
            'context': _context$5
        });
        return $6447;
    };
    const Kind$Error$show_goal = x0 => x1 => x2 => x3 => x4 => Kind$Error$show_goal$(x0, x1, x2, x3, x4);

    function Kind$Term$check$infer_with_types$(_vars$1, _defs$2, _ctx$3, _path$4, _orig$5) {
        var self = _vars$1;
        switch (self._) {
            case 'List.cons':
                var $6449 = self.head;
                var $6450 = self.tail;
                var self = $6449;
                switch (self._) {
                    case 'Kind.Ann.new':
                        var $6452 = self.name;
                        var $6453 = self.term;
                        var $6454 = self.type;
                        var self = $6454;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6456 = self.value;
                                var $6457 = Kind$Check$result$(Maybe$some$(Maybe$some$($6456)), List$nil);
                                var self = $6457;
                                break;
                            case 'Maybe.none':
                                var self = Kind$Term$check$($6453, Maybe$none, _defs$2, _ctx$3, _path$4, _orig$5);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6459 = self.value;
                                        var $6460 = self.errors;
                                        var self = $6459;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6462 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$(Maybe$some$($6462)), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6464 = self.value;
                                                        var $6465 = self.errors;
                                                        var $6466 = Kind$Check$result$($6464, List$concat$($6460, $6465));
                                                        var $6463 = $6466;
                                                        break;
                                                };
                                                var $6461 = $6463;
                                                break;
                                            case 'Maybe.none':
                                                var $6467 = Kind$Check$result$(Maybe$none, $6460);
                                                var $6461 = $6467;
                                                break;
                                        };
                                        var $6458 = $6461;
                                        break;
                                };
                                var self = $6458;
                                break;
                        };
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6468 = self.value;
                                var $6469 = self.errors;
                                var self = $6468;
                                switch (self._) {
                                    case 'Maybe.some':
                                        var $6471 = self.value;
                                        var self = Kind$Term$check$infer_with_types$($6450, _defs$2, _ctx$3, _path$4, _orig$5);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6473 = self.value;
                                                var $6474 = self.errors;
                                                var self = $6473;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $6476 = self.value;
                                                        var self = Kind$Check$result$(Maybe$some$(List$cons$(Kind$Ann$new$($6452, $6453, $6471), $6476)), List$nil);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6478 = self.value;
                                                                var $6479 = self.errors;
                                                                var $6480 = Kind$Check$result$($6478, List$concat$($6474, $6479));
                                                                var $6477 = $6480;
                                                                break;
                                                        };
                                                        var $6475 = $6477;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $6481 = Kind$Check$result$(Maybe$none, $6474);
                                                        var $6475 = $6481;
                                                        break;
                                                };
                                                var self = $6475;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6482 = self.value;
                                                var $6483 = self.errors;
                                                var $6484 = Kind$Check$result$($6482, List$concat$($6469, $6483));
                                                var $6472 = $6484;
                                                break;
                                        };
                                        var $6470 = $6472;
                                        break;
                                    case 'Maybe.none':
                                        var $6485 = Kind$Check$result$(Maybe$none, $6469);
                                        var $6470 = $6485;
                                        break;
                                };
                                var $6455 = $6470;
                                break;
                        };
                        var $6451 = $6455;
                        break;
                };
                var $6448 = $6451;
                break;
            case 'List.nil':
                var $6486 = Kind$Check$result$(Maybe$some$(List$nil), List$nil);
                var $6448 = $6486;
                break;
        };
        return $6448;
    };
    const Kind$Term$check$infer_with_types = x0 => x1 => x2 => x3 => x4 => Kind$Term$check$infer_with_types$(x0, x1, x2, x3, x4);

    function Kind$Term$normalize$(_term$1, _defs$2) {
        var self = Kind$Term$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Kind.Term.var':
                var $6488 = self.name;
                var $6489 = self.indx;
                var $6490 = Kind$Term$var$($6488, $6489);
                var $6487 = $6490;
                break;
            case 'Kind.Term.ref':
                var $6491 = self.name;
                var $6492 = Kind$Term$ref$($6491);
                var $6487 = $6492;
                break;
            case 'Kind.Term.all':
                var $6493 = self.eras;
                var $6494 = self.self;
                var $6495 = self.name;
                var $6496 = self.xtyp;
                var $6497 = self.body;
                var $6498 = Kind$Term$all$($6493, $6494, $6495, Kind$Term$normalize$($6496, _defs$2), (_s$8 => _x$9 => {
                    var $6499 = Kind$Term$normalize$($6497(_s$8)(_x$9), _defs$2);
                    return $6499;
                }));
                var $6487 = $6498;
                break;
            case 'Kind.Term.lam':
                var $6500 = self.name;
                var $6501 = self.body;
                var $6502 = Kind$Term$lam$($6500, (_x$5 => {
                    var $6503 = Kind$Term$normalize$($6501(_x$5), _defs$2);
                    return $6503;
                }));
                var $6487 = $6502;
                break;
            case 'Kind.Term.app':
                var $6504 = self.func;
                var $6505 = self.argm;
                var $6506 = Kind$Term$app$(Kind$Term$normalize$($6504, _defs$2), Kind$Term$normalize$($6505, _defs$2));
                var $6487 = $6506;
                break;
            case 'Kind.Term.let':
                var $6507 = self.name;
                var $6508 = self.expr;
                var $6509 = self.body;
                var $6510 = Kind$Term$let$($6507, Kind$Term$normalize$($6508, _defs$2), (_x$6 => {
                    var $6511 = Kind$Term$normalize$($6509(_x$6), _defs$2);
                    return $6511;
                }));
                var $6487 = $6510;
                break;
            case 'Kind.Term.def':
                var $6512 = self.name;
                var $6513 = self.expr;
                var $6514 = self.body;
                var $6515 = Kind$Term$def$($6512, Kind$Term$normalize$($6513, _defs$2), (_x$6 => {
                    var $6516 = Kind$Term$normalize$($6514(_x$6), _defs$2);
                    return $6516;
                }));
                var $6487 = $6515;
                break;
            case 'Kind.Term.ann':
                var $6517 = self.done;
                var $6518 = self.term;
                var $6519 = self.type;
                var $6520 = Kind$Term$ann$($6517, Kind$Term$normalize$($6518, _defs$2), Kind$Term$normalize$($6519, _defs$2));
                var $6487 = $6520;
                break;
            case 'Kind.Term.gol':
                var $6521 = self.name;
                var $6522 = self.dref;
                var $6523 = self.verb;
                var $6524 = Kind$Term$gol$($6521, $6522, $6523);
                var $6487 = $6524;
                break;
            case 'Kind.Term.hol':
                var $6525 = self.path;
                var $6526 = Kind$Term$hol$($6525);
                var $6487 = $6526;
                break;
            case 'Kind.Term.nat':
                var $6527 = self.natx;
                var $6528 = Kind$Term$nat$($6527);
                var $6487 = $6528;
                break;
            case 'Kind.Term.chr':
                var $6529 = self.chrx;
                var $6530 = Kind$Term$chr$($6529);
                var $6487 = $6530;
                break;
            case 'Kind.Term.str':
                var $6531 = self.strx;
                var $6532 = Kind$Term$str$($6531);
                var $6487 = $6532;
                break;
            case 'Kind.Term.ori':
                var $6533 = self.expr;
                var $6534 = Kind$Term$normalize$($6533, _defs$2);
                var $6487 = $6534;
                break;
            case 'Kind.Term.typ':
                var $6535 = Kind$Term$typ;
                var $6487 = $6535;
                break;
            case 'Kind.Term.cse':
                var $6536 = _term$1;
                var $6487 = $6536;
                break;
        };
        return $6487;
    };
    const Kind$Term$normalize = x0 => x1 => Kind$Term$normalize$(x0, x1);

    function Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {
        var self = _wyth$1;
        switch (self._) {
            case 'List.cons':
                var $6538 = self.head;
                var $6539 = self.tail;
                var self = $6538;
                switch (self._) {
                    case 'Kind.Ann.new':
                        var $6541 = self.name;
                        var $6542 = self.type;
                        var $6543 = Kind$Term$all$(Bool$false, "", $6541, Maybe$default$($6542, Kind$Term$hol$(Bits$e)), (_s$14 => _x$15 => {
                            var $6544 = Kind$Term$desugar_cse$motive$($6539, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, Nat$succ$(Nat$succ$(_size$8)));
                            return $6544;
                        }));
                        var $6540 = $6543;
                        break;
                };
                var $6537 = $6540;
                break;
            case 'List.nil':
                var self = _moti$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $6546 = self.value;
                        var $6547 = $6546;
                        var $6545 = $6547;
                        break;
                    case 'Maybe.none':
                        var self = _rtyp$6;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6549 = self.value;
                                var $6550 = Kind$Term$normalize$($6549, Kind$Map$new);
                                var $6548 = $6550;
                                break;
                            case 'Maybe.none':
                                var $6551 = Kind$Term$hol$(Bits$e);
                                var $6548 = $6551;
                                break;
                        };
                        var $6545 = $6548;
                        break;
                };
                var $6537 = $6545;
                break;
        };
        return $6537;
    };
    const Kind$Term$desugar_cse$motive$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$go$(x0, x1, x2, x3, x4, x5, x6, x7);

    function List$tail$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $6553 = self.tail;
                var $6554 = $6553;
                var $6552 = $6554;
                break;
            case 'List.nil':
                var $6555 = List$nil;
                var $6552 = $6555;
                break;
        };
        return $6552;
    };
    const List$tail = x0 => List$tail$(x0);

    function Kind$Term$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4) {
        var Kind$Term$SmartMotive$vals$cont$ = (_expr$1, _term$2, _args$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_expr$1, _term$2, _args$3, _defs$4]
        });
        var Kind$Term$SmartMotive$vals$cont = _expr$1 => _term$2 => _args$3 => _defs$4 => Kind$Term$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4);
        var arg = [_expr$1, _term$2, _args$3, _defs$4];
        while (true) {
            let [_expr$1, _term$2, _args$3, _defs$4] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Kind.Term.app':
                        var $6556 = self.func;
                        var $6557 = self.argm;
                        var $6558 = Kind$Term$SmartMotive$vals$cont$(_expr$1, $6556, List$cons$($6557, _args$3), _defs$4);
                        return $6558;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6559 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $6559;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$vals$cont = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$vals$cont$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$vals$(_expr$1, _type$2, _defs$3) {
        var Kind$Term$SmartMotive$vals$ = (_expr$1, _type$2, _defs$3) => ({
            ctr: 'TCO',
            arg: [_expr$1, _type$2, _defs$3]
        });
        var Kind$Term$SmartMotive$vals = _expr$1 => _type$2 => _defs$3 => Kind$Term$SmartMotive$vals$(_expr$1, _type$2, _defs$3);
        var arg = [_expr$1, _type$2, _defs$3];
        while (true) {
            let [_expr$1, _type$2, _defs$3] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_type$2, _defs$3);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6560 = self.body;
                        var $6561 = Kind$Term$SmartMotive$vals$(_expr$1, $6560(Kind$Term$typ)(Kind$Term$typ), _defs$3);
                        return $6561;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6562 = Kind$Term$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $6562;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$vals = x0 => x1 => x2 => Kind$Term$SmartMotive$vals$(x0, x1, x2);

    function Kind$Term$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4) {
        var Kind$Term$SmartMotive$nams$cont$ = (_name$1, _term$2, _binds$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_name$1, _term$2, _binds$3, _defs$4]
        });
        var Kind$Term$SmartMotive$nams$cont = _name$1 => _term$2 => _binds$3 => _defs$4 => Kind$Term$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4);
        var arg = [_name$1, _term$2, _binds$3, _defs$4];
        while (true) {
            let [_name$1, _term$2, _binds$3, _defs$4] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6563 = self.self;
                        var $6564 = self.name;
                        var $6565 = self.body;
                        var $6566 = Kind$Term$SmartMotive$nams$cont$(_name$1, $6565(Kind$Term$ref$($6563))(Kind$Term$ref$($6564)), List$cons$(String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($6564, List$nil)))), _binds$3), _defs$4);
                        return $6566;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6567 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $6567;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$nams$cont = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$nams$cont$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$nams$(_name$1, _type$2, _defs$3) {
        var self = Kind$Term$reduce$(_type$2, _defs$3);
        switch (self._) {
            case 'Kind.Term.all':
                var $6569 = self.xtyp;
                var $6570 = Kind$Term$SmartMotive$nams$cont$(_name$1, $6569, List$nil, _defs$3);
                var $6568 = $6570;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $6571 = List$nil;
                var $6568 = $6571;
                break;
        };
        return $6568;
    };
    const Kind$Term$SmartMotive$nams = x0 => x1 => x2 => Kind$Term$SmartMotive$nams$(x0, x1, x2);

    function List$zip$(_as$3, _bs$4) {
        var self = _as$3;
        switch (self._) {
            case 'List.cons':
                var $6573 = self.head;
                var $6574 = self.tail;
                var self = _bs$4;
                switch (self._) {
                    case 'List.cons':
                        var $6576 = self.head;
                        var $6577 = self.tail;
                        var $6578 = List$cons$(Pair$new$($6573, $6576), List$zip$($6574, $6577));
                        var $6575 = $6578;
                        break;
                    case 'List.nil':
                        var $6579 = List$nil;
                        var $6575 = $6579;
                        break;
                };
                var $6572 = $6575;
                break;
            case 'List.nil':
                var $6580 = List$nil;
                var $6572 = $6580;
                break;
        };
        return $6572;
    };
    const List$zip = x0 => x1 => List$zip$(x0, x1);
    const Nat$gte = a0 => a1 => (a0 >= a1);
    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);

    function Kind$Term$serialize$go$(_term$1, _depth$2, _init$3, _diff$4, _x$5) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $6582 = self.indx;
                var self = ($6582 >= _init$3);
                if (self) {
                    var _name$8 = a1 => (a1 + (nat_to_bits(Nat$pred$((_depth$2 - $6582 <= 0n ? 0n : _depth$2 - $6582)))));
                    var $6584 = (((_name$8(_x$5) + '1') + '0') + '0');
                    var $6583 = $6584;
                } else {
                    var _name$8 = a1 => (a1 + (nat_to_bits($6582)));
                    var $6585 = (((_name$8(_x$5) + '0') + '1') + '0');
                    var $6583 = $6585;
                };
                var $6581 = $6583;
                break;
            case 'Kind.Term.ref':
                var $6586 = self.name;
                var _name$7 = a1 => (a1 + (kind_name_to_bits($6586)));
                var $6587 = (((_name$7(_x$5) + '0') + '0') + '0');
                var $6581 = $6587;
                break;
            case 'Kind.Term.all':
                var $6588 = self.eras;
                var $6589 = self.self;
                var $6590 = self.name;
                var $6591 = self.xtyp;
                var $6592 = self.body;
                var self = $6588;
                if (self) {
                    var $6594 = Bits$i;
                    var _eras$11 = $6594;
                } else {
                    var $6595 = Bits$o;
                    var _eras$11 = $6595;
                };
                var _self$12 = a1 => (a1 + (kind_name_to_bits($6589)));
                var _xtyp$13 = Kind$Term$serialize$go($6591)(_depth$2)(_init$3)(_diff$4);
                var _body$14 = Kind$Term$serialize$go($6592(Kind$Term$var$($6589, _depth$2))(Kind$Term$var$($6590, Nat$succ$(_depth$2))))(Nat$succ$(Nat$succ$(_depth$2)))(_init$3)(_diff$4);
                var $6593 = (((_eras$11(_self$12(_xtyp$13(_body$14(_x$5)))) + '0') + '0') + '1');
                var $6581 = $6593;
                break;
            case 'Kind.Term.lam':
                var $6596 = self.name;
                var $6597 = self.body;
                var _body$8 = Kind$Term$serialize$go($6597(Kind$Term$var$($6596, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $6598 = (((_body$8(_x$5) + '1') + '0') + '1');
                var $6581 = $6598;
                break;
            case 'Kind.Term.app':
                var $6599 = self.func;
                var $6600 = self.argm;
                var _func$8 = Kind$Term$serialize$go($6599)(_depth$2)(_init$3)(_diff$4);
                var _argm$9 = Kind$Term$serialize$go($6600)(_depth$2)(_init$3)(_diff$4);
                var $6601 = (((_func$8(_argm$9(_x$5)) + '0') + '1') + '1');
                var $6581 = $6601;
                break;
            case 'Kind.Term.let':
                var $6602 = self.name;
                var $6603 = self.expr;
                var $6604 = self.body;
                var _expr$9 = Kind$Term$serialize$go($6603)(_depth$2)(_init$3)(_diff$4);
                var _body$10 = Kind$Term$serialize$go($6604(Kind$Term$var$($6602, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $6605 = (((_expr$9(_body$10(_x$5)) + '1') + '1') + '1');
                var $6581 = $6605;
                break;
            case 'Kind.Term.def':
                var $6606 = self.expr;
                var $6607 = self.body;
                var $6608 = Kind$Term$serialize$go$($6607($6606), _depth$2, _init$3, _diff$4, _x$5);
                var $6581 = $6608;
                break;
            case 'Kind.Term.ann':
                var $6609 = self.term;
                var $6610 = Kind$Term$serialize$go$($6609, _depth$2, _init$3, _diff$4, _x$5);
                var $6581 = $6610;
                break;
            case 'Kind.Term.gol':
                var $6611 = self.name;
                var _name$9 = a1 => (a1 + (kind_name_to_bits($6611)));
                var $6612 = (((_name$9(_x$5) + '0') + '0') + '0');
                var $6581 = $6612;
                break;
            case 'Kind.Term.nat':
                var $6613 = self.natx;
                var $6614 = Kind$Term$serialize$go$(Kind$Term$unroll_nat$($6613), _depth$2, _init$3, _diff$4, _x$5);
                var $6581 = $6614;
                break;
            case 'Kind.Term.chr':
                var $6615 = self.chrx;
                var $6616 = Kind$Term$serialize$go$(Kind$Term$unroll_chr$($6615), _depth$2, _init$3, _diff$4, _x$5);
                var $6581 = $6616;
                break;
            case 'Kind.Term.str':
                var $6617 = self.strx;
                var $6618 = Kind$Term$serialize$go$(Kind$Term$unroll_str$($6617), _depth$2, _init$3, _diff$4, _x$5);
                var $6581 = $6618;
                break;
            case 'Kind.Term.ori':
                var $6619 = self.expr;
                var $6620 = Kind$Term$serialize$go$($6619, _depth$2, _init$3, _diff$4, _x$5);
                var $6581 = $6620;
                break;
            case 'Kind.Term.typ':
                var $6621 = (((_x$5 + '1') + '1') + '0');
                var $6581 = $6621;
                break;
            case 'Kind.Term.hol':
                var $6622 = _x$5;
                var $6581 = $6622;
                break;
            case 'Kind.Term.cse':
                var $6623 = _diff$4(_x$5);
                var $6581 = $6623;
                break;
        };
        return $6581;
    };
    const Kind$Term$serialize$go = x0 => x1 => x2 => x3 => x4 => Kind$Term$serialize$go$(x0, x1, x2, x3, x4);

    function Kind$Term$serialize$(_term$1, _depth$2, _side$3) {
        var self = _side$3;
        if (self) {
            var $6625 = Bits$o;
            var _diff$4 = $6625;
        } else {
            var $6626 = Bits$i;
            var _diff$4 = $6626;
        };
        var $6624 = Kind$Term$serialize$go$(_term$1, _depth$2, _depth$2, _diff$4, Bits$e);
        return $6624;
    };
    const Kind$Term$serialize = x0 => x1 => x2 => Kind$Term$serialize$(x0, x1, x2);
    const Bits$eql = a0 => a1 => (a1 === a0);

    function Kind$Term$identical$(_a$1, _b$2, _lv$3) {
        var _ah$4 = Kind$Term$serialize$(_a$1, _lv$3, Bool$false);
        var _bh$5 = Kind$Term$serialize$(_b$2, _lv$3, Bool$true);
        var $6627 = (_bh$5 === _ah$4);
        return $6627;
    };
    const Kind$Term$identical = x0 => x1 => x2 => Kind$Term$identical$(x0, x1, x2);

    function Kind$Term$SmartMotive$replace$(_term$1, _from$2, _to$3, _lv$4) {
        var self = Kind$Term$identical$(_term$1, _from$2, _lv$4);
        if (self) {
            var $6629 = _to$3;
            var $6628 = $6629;
        } else {
            var self = _term$1;
            switch (self._) {
                case 'Kind.Term.var':
                    var $6631 = self.name;
                    var $6632 = self.indx;
                    var $6633 = Kind$Term$var$($6631, $6632);
                    var $6630 = $6633;
                    break;
                case 'Kind.Term.ref':
                    var $6634 = self.name;
                    var $6635 = Kind$Term$ref$($6634);
                    var $6630 = $6635;
                    break;
                case 'Kind.Term.all':
                    var $6636 = self.eras;
                    var $6637 = self.self;
                    var $6638 = self.name;
                    var $6639 = self.xtyp;
                    var $6640 = self.body;
                    var _xtyp$10 = Kind$Term$SmartMotive$replace$($6639, _from$2, _to$3, _lv$4);
                    var _body$11 = $6640(Kind$Term$ref$($6637))(Kind$Term$ref$($6638));
                    var _body$12 = Kind$Term$SmartMotive$replace$(_body$11, _from$2, _to$3, Nat$succ$(Nat$succ$(_lv$4)));
                    var $6641 = Kind$Term$all$($6636, $6637, $6638, _xtyp$10, (_s$13 => _x$14 => {
                        var $6642 = _body$12;
                        return $6642;
                    }));
                    var $6630 = $6641;
                    break;
                case 'Kind.Term.lam':
                    var $6643 = self.name;
                    var $6644 = self.body;
                    var _body$7 = $6644(Kind$Term$ref$($6643));
                    var _body$8 = Kind$Term$SmartMotive$replace$(_body$7, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6645 = Kind$Term$lam$($6643, (_x$9 => {
                        var $6646 = _body$8;
                        return $6646;
                    }));
                    var $6630 = $6645;
                    break;
                case 'Kind.Term.app':
                    var $6647 = self.func;
                    var $6648 = self.argm;
                    var _func$7 = Kind$Term$SmartMotive$replace$($6647, _from$2, _to$3, _lv$4);
                    var _argm$8 = Kind$Term$SmartMotive$replace$($6648, _from$2, _to$3, _lv$4);
                    var $6649 = Kind$Term$app$(_func$7, _argm$8);
                    var $6630 = $6649;
                    break;
                case 'Kind.Term.let':
                    var $6650 = self.name;
                    var $6651 = self.expr;
                    var $6652 = self.body;
                    var _expr$8 = Kind$Term$SmartMotive$replace$($6651, _from$2, _to$3, _lv$4);
                    var _body$9 = $6652(Kind$Term$ref$($6650));
                    var _body$10 = Kind$Term$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6653 = Kind$Term$let$($6650, _expr$8, (_x$11 => {
                        var $6654 = _body$10;
                        return $6654;
                    }));
                    var $6630 = $6653;
                    break;
                case 'Kind.Term.def':
                    var $6655 = self.name;
                    var $6656 = self.expr;
                    var $6657 = self.body;
                    var _expr$8 = Kind$Term$SmartMotive$replace$($6656, _from$2, _to$3, _lv$4);
                    var _body$9 = $6657(Kind$Term$ref$($6655));
                    var _body$10 = Kind$Term$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6658 = Kind$Term$def$($6655, _expr$8, (_x$11 => {
                        var $6659 = _body$10;
                        return $6659;
                    }));
                    var $6630 = $6658;
                    break;
                case 'Kind.Term.ann':
                    var $6660 = self.done;
                    var $6661 = self.term;
                    var $6662 = self.type;
                    var _term$8 = Kind$Term$SmartMotive$replace$($6661, _from$2, _to$3, _lv$4);
                    var _type$9 = Kind$Term$SmartMotive$replace$($6662, _from$2, _to$3, _lv$4);
                    var $6663 = Kind$Term$ann$($6660, _term$8, _type$9);
                    var $6630 = $6663;
                    break;
                case 'Kind.Term.ori':
                    var $6664 = self.expr;
                    var $6665 = Kind$Term$SmartMotive$replace$($6664, _from$2, _to$3, _lv$4);
                    var $6630 = $6665;
                    break;
                case 'Kind.Term.typ':
                    var $6666 = Kind$Term$typ;
                    var $6630 = $6666;
                    break;
                case 'Kind.Term.gol':
                case 'Kind.Term.hol':
                case 'Kind.Term.nat':
                case 'Kind.Term.chr':
                case 'Kind.Term.str':
                case 'Kind.Term.cse':
                    var $6667 = _term$1;
                    var $6630 = $6667;
                    break;
            };
            var $6628 = $6630;
        };
        return $6628;
    };
    const Kind$Term$SmartMotive$replace = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$replace$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$make$(_name$1, _expr$2, _type$3, _moti$4, _size$5, _defs$6) {
        var _vals$7 = Kind$Term$SmartMotive$vals$(_expr$2, _type$3, _defs$6);
        var _nams$8 = Kind$Term$SmartMotive$nams$(_name$1, _type$3, _defs$6);
        var _subs$9 = List$zip$(_nams$8, _vals$7);
        var $6668 = List$fold$(_subs$9, _moti$4, (_sub$10 => _moti$11 => {
            var self = _sub$10;
            switch (self._) {
                case 'Pair.new':
                    var $6670 = self.fst;
                    var $6671 = self.snd;
                    var $6672 = Kind$Term$SmartMotive$replace$(_moti$11, $6671, Kind$Term$ref$($6670), _size$5);
                    var $6669 = $6672;
                    break;
            };
            return $6669;
        }));
        return $6668;
    };
    const Kind$Term$SmartMotive$make = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$SmartMotive$make$(x0, x1, x2, x3, x4, x5);

    function Kind$Term$desugar_cse$motive$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {
        var _done$9 = Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8);
        var self = _moti$2;
        switch (self._) {
            case 'Maybe.none':
                var $6674 = Kind$Term$SmartMotive$make$(_name$3, _expr$4, _etyp$5, _done$9, _size$8, _defs$7);
                var $6673 = $6674;
                break;
            case 'Maybe.some':
                var $6675 = _done$9;
                var $6673 = $6675;
                break;
        };
        return $6673;
    };
    const Kind$Term$desugar_cse$motive = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, _type$3, _body$4, _defs$5) {
        var self = Kind$Term$reduce$(_type$3, _defs$5);
        switch (self._) {
            case 'Kind.Term.all':
                var $6677 = self.self;
                var $6678 = self.name;
                var $6679 = self.body;
                var $6680 = Kind$Term$lam$((() => {
                    var self = String$is_empty$($6678);
                    if (self) {
                        var $6681 = _name$1;
                        return $6681;
                    } else {
                        var $6682 = String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($6678, List$nil))));
                        return $6682;
                    };
                })(), (_x$11 => {
                    var $6683 = Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, $6679(Kind$Term$var$($6677, 0n))(Kind$Term$var$($6678, 0n)), _body$4, _defs$5);
                    return $6683;
                }));
                var $6676 = $6680;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.ori':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6685 = self.head;
                        var $6686 = self.tail;
                        var self = $6685;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6688 = self.name;
                                var $6689 = Kind$Term$lam$($6688, (_x$13 => {
                                    var $6690 = Kind$Term$desugar_cse$argument$(_name$1, $6686, _type$3, _body$4, _defs$5);
                                    return $6690;
                                }));
                                var $6687 = $6689;
                                break;
                        };
                        var $6684 = $6687;
                        break;
                    case 'List.nil':
                        var $6691 = _body$4;
                        var $6684 = $6691;
                        break;
                };
                var $6676 = $6684;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6693 = self.head;
                        var $6694 = self.tail;
                        var self = $6693;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6696 = self.name;
                                var $6697 = Kind$Term$lam$($6696, (_x$12 => {
                                    var $6698 = Kind$Term$desugar_cse$argument$(_name$1, $6694, _type$3, _body$4, _defs$5);
                                    return $6698;
                                }));
                                var $6695 = $6697;
                                break;
                        };
                        var $6692 = $6695;
                        break;
                    case 'List.nil':
                        var $6699 = _body$4;
                        var $6692 = $6699;
                        break;
                };
                var $6676 = $6692;
                break;
            case 'Kind.Term.typ':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6701 = self.head;
                        var $6702 = self.tail;
                        var self = $6701;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6704 = self.name;
                                var $6705 = Kind$Term$lam$($6704, (_x$11 => {
                                    var $6706 = Kind$Term$desugar_cse$argument$(_name$1, $6702, _type$3, _body$4, _defs$5);
                                    return $6706;
                                }));
                                var $6703 = $6705;
                                break;
                        };
                        var $6700 = $6703;
                        break;
                    case 'List.nil':
                        var $6707 = _body$4;
                        var $6700 = $6707;
                        break;
                };
                var $6676 = $6700;
                break;
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6709 = self.head;
                        var $6710 = self.tail;
                        var self = $6709;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6712 = self.name;
                                var $6713 = Kind$Term$lam$($6712, (_x$14 => {
                                    var $6714 = Kind$Term$desugar_cse$argument$(_name$1, $6710, _type$3, _body$4, _defs$5);
                                    return $6714;
                                }));
                                var $6711 = $6713;
                                break;
                        };
                        var $6708 = $6711;
                        break;
                    case 'List.nil':
                        var $6715 = _body$4;
                        var $6708 = $6715;
                        break;
                };
                var $6676 = $6708;
                break;
            case 'Kind.Term.cse':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6717 = self.head;
                        var $6718 = self.tail;
                        var self = $6717;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6720 = self.name;
                                var $6721 = Kind$Term$lam$($6720, (_x$17 => {
                                    var $6722 = Kind$Term$desugar_cse$argument$(_name$1, $6718, _type$3, _body$4, _defs$5);
                                    return $6722;
                                }));
                                var $6719 = $6721;
                                break;
                        };
                        var $6716 = $6719;
                        break;
                    case 'List.nil':
                        var $6723 = _body$4;
                        var $6716 = $6723;
                        break;
                };
                var $6676 = $6716;
                break;
        };
        return $6676;
    };
    const Kind$Term$desugar_cse$argument = x0 => x1 => x2 => x3 => x4 => Kind$Term$desugar_cse$argument$(x0, x1, x2, x3, x4);

    function Maybe$or$(_a$2, _b$3) {
        var self = _a$2;
        switch (self._) {
            case 'Maybe.some':
                var $6725 = self.value;
                var $6726 = Maybe$some$($6725);
                var $6724 = $6726;
                break;
            case 'Maybe.none':
                var $6727 = _b$3;
                var $6724 = $6727;
                break;
        };
        return $6724;
    };
    const Maybe$or = x0 => x1 => Maybe$or$(x0, x1);

    function Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) {
        var Kind$Term$desugar_cse$cases$ = (_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) => ({
            ctr: 'TCO',
            arg: [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7]
        });
        var Kind$Term$desugar_cse$cases = _expr$1 => _name$2 => _wyth$3 => _cses$4 => _type$5 => _defs$6 => _ctxt$7 => Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7);
        var arg = [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7];
        while (true) {
            let [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_type$5, _defs$6);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6728 = self.self;
                        var $6729 = self.name;
                        var $6730 = self.xtyp;
                        var $6731 = self.body;
                        var _argm$13 = Maybe$or$(Kind$Map$get$($6729, _cses$4), Kind$Map$get$("_", _cses$4));
                        var _argm$14 = Maybe$default$(_argm$13, Kind$Term$ref$((_name$2 + ("_" + ($6729 + "_case")))));
                        var _argm$15 = Kind$Term$desugar_cse$argument$(_name$2, _wyth$3, $6730, _argm$14, _defs$6);
                        var _expr$16 = Kind$Term$app$(_expr$1, _argm$15);
                        var _type$17 = $6731(Kind$Term$var$($6728, 0n))(Kind$Term$var$($6729, 0n));
                        var $6732 = Kind$Term$desugar_cse$cases$(_expr$16, _name$2, _wyth$3, _cses$4, _type$17, _defs$6, _ctxt$7);
                        return $6732;
                    case 'Kind.Term.var':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.ori':
                        var _expr$10 = (() => {
                            var $6735 = _expr$1;
                            var $6736 = _wyth$3;
                            let _expr$11 = $6735;
                            let _defn$10;
                            while ($6736._ === 'List.cons') {
                                _defn$10 = $6736.head;
                                var $6735 = Kind$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6737 = self.term;
                                            var $6738 = $6737;
                                            return $6738;
                                    };
                                })());
                                _expr$11 = $6735;
                                $6736 = $6736.tail;
                            }
                            return _expr$11;
                        })();
                        var $6733 = _expr$10;
                        return $6733;
                    case 'Kind.Term.ref':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                        var _expr$9 = (() => {
                            var $6741 = _expr$1;
                            var $6742 = _wyth$3;
                            let _expr$10 = $6741;
                            let _defn$9;
                            while ($6742._ === 'List.cons') {
                                _defn$9 = $6742.head;
                                var $6741 = Kind$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6743 = self.term;
                                            var $6744 = $6743;
                                            return $6744;
                                    };
                                })());
                                _expr$10 = $6741;
                                $6742 = $6742.tail;
                            }
                            return _expr$10;
                        })();
                        var $6739 = _expr$9;
                        return $6739;
                    case 'Kind.Term.typ':
                        var _expr$8 = (() => {
                            var $6747 = _expr$1;
                            var $6748 = _wyth$3;
                            let _expr$9 = $6747;
                            let _defn$8;
                            while ($6748._ === 'List.cons') {
                                _defn$8 = $6748.head;
                                var $6747 = Kind$Term$app$(_expr$9, (() => {
                                    var self = _defn$8;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6749 = self.term;
                                            var $6750 = $6749;
                                            return $6750;
                                    };
                                })());
                                _expr$9 = $6747;
                                $6748 = $6748.tail;
                            }
                            return _expr$9;
                        })();
                        var $6745 = _expr$8;
                        return $6745;
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                        var _expr$11 = (() => {
                            var $6753 = _expr$1;
                            var $6754 = _wyth$3;
                            let _expr$12 = $6753;
                            let _defn$11;
                            while ($6754._ === 'List.cons') {
                                _defn$11 = $6754.head;
                                var $6753 = Kind$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6755 = self.term;
                                            var $6756 = $6755;
                                            return $6756;
                                    };
                                })());
                                _expr$12 = $6753;
                                $6754 = $6754.tail;
                            }
                            return _expr$12;
                        })();
                        var $6751 = _expr$11;
                        return $6751;
                    case 'Kind.Term.cse':
                        var _expr$14 = (() => {
                            var $6759 = _expr$1;
                            var $6760 = _wyth$3;
                            let _expr$15 = $6759;
                            let _defn$14;
                            while ($6760._ === 'List.cons') {
                                _defn$14 = $6760.head;
                                var $6759 = Kind$Term$app$(_expr$15, (() => {
                                    var self = _defn$14;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6761 = self.term;
                                            var $6762 = $6761;
                                            return $6762;
                                    };
                                })());
                                _expr$15 = $6759;
                                $6760 = $6760.tail;
                            }
                            return _expr$15;
                        })();
                        var $6757 = _expr$14;
                        return $6757;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$desugar_cse$cases = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Kind$Term$desugar_cse$cases$(x0, x1, x2, x3, x4, x5, x6);

    function Kind$Term$desugar_cse$(_expr$1, _name$2, _wyth$3, _cses$4, _moti$5, _etyp$6, _rtyp$7, _defs$8, _ctxt$9) {
        var self = Kind$Term$reduce$(_etyp$6, _defs$8);
        switch (self._) {
            case 'Kind.Term.all':
                var $6764 = self.self;
                var $6765 = self.name;
                var $6766 = self.xtyp;
                var $6767 = self.body;
                var _moti$15 = Kind$Term$desugar_cse$motive$(_wyth$3, _moti$5, _name$2, _expr$1, _etyp$6, _rtyp$7, _defs$8, (list_length(_ctxt$9)));
                var _argm$16 = Kind$Term$desugar_cse$argument$(_name$2, List$nil, $6766, _moti$15, _defs$8);
                var _expr$17 = Kind$Term$app$(_expr$1, _argm$16);
                var _type$18 = $6767(Kind$Term$var$($6764, 0n))(Kind$Term$var$($6765, 0n));
                var $6768 = Maybe$some$(Kind$Term$desugar_cse$cases$(_expr$17, _name$2, _wyth$3, _cses$4, _type$18, _defs$8, _ctxt$9));
                var $6763 = $6768;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $6769 = Maybe$none;
                var $6763 = $6769;
                break;
        };
        return $6763;
    };
    const Kind$Term$desugar_cse = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Term$desugar_cse$(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    function Kind$Error$cant_infer$(_origin$1, _term$2, _context$3) {
        var $6770 = ({
            _: 'Kind.Error.cant_infer',
            'origin': _origin$1,
            'term': _term$2,
            'context': _context$3
        });
        return $6770;
    };
    const Kind$Error$cant_infer = x0 => x1 => x2 => Kind$Error$cant_infer$(x0, x1, x2);

    function BitsSet$has$(_bits$1, _set$2) {
        var self = BitsMap$get$(_bits$1, _set$2);
        switch (self._) {
            case 'Maybe.none':
                var $6772 = Bool$false;
                var $6771 = $6772;
                break;
            case 'Maybe.some':
                var $6773 = Bool$true;
                var $6771 = $6773;
                break;
        };
        return $6771;
    };
    const BitsSet$has = x0 => x1 => BitsSet$has$(x0, x1);

    function BitsSet$mut$has$(_bits$1, _set$2) {
        var $6774 = BitsSet$has$(_bits$1, _set$2);
        return $6774;
    };
    const BitsSet$mut$has = x0 => x1 => BitsSet$mut$has$(x0, x1);

    function Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2) {
        var Kind$Term$equal$extra_holes$funari$ = (_term$1, _arity$2) => ({
            ctr: 'TCO',
            arg: [_term$1, _arity$2]
        });
        var Kind$Term$equal$extra_holes$funari = _term$1 => _arity$2 => Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2);
        var arg = [_term$1, _arity$2];
        while (true) {
            let [_term$1, _arity$2] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.var':
                        var $6775 = self.name;
                        var $6776 = Maybe$some$(Pair$new$($6775, _arity$2));
                        return $6776;
                    case 'Kind.Term.ref':
                        var $6777 = self.name;
                        var $6778 = Maybe$some$(Pair$new$($6777, _arity$2));
                        return $6778;
                    case 'Kind.Term.app':
                        var $6779 = self.func;
                        var $6780 = Kind$Term$equal$extra_holes$funari$($6779, Nat$succ$(_arity$2));
                        return $6780;
                    case 'Kind.Term.ori':
                        var $6781 = self.expr;
                        var $6782 = Kind$Term$equal$extra_holes$funari$($6781, _arity$2);
                        return $6782;
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6783 = Maybe$none;
                        return $6783;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$equal$extra_holes$funari = x0 => x1 => Kind$Term$equal$extra_holes$funari$(x0, x1);

    function Kind$Term$has_holes$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.all':
                var $6785 = self.xtyp;
                var $6786 = self.body;
                var $6787 = (Kind$Term$has_holes$($6785) || Kind$Term$has_holes$($6786(Kind$Term$typ)(Kind$Term$typ)));
                var $6784 = $6787;
                break;
            case 'Kind.Term.lam':
                var $6788 = self.body;
                var $6789 = Kind$Term$has_holes$($6788(Kind$Term$typ));
                var $6784 = $6789;
                break;
            case 'Kind.Term.app':
                var $6790 = self.func;
                var $6791 = self.argm;
                var $6792 = (Kind$Term$has_holes$($6790) || Kind$Term$has_holes$($6791));
                var $6784 = $6792;
                break;
            case 'Kind.Term.let':
                var $6793 = self.expr;
                var $6794 = self.body;
                var $6795 = (Kind$Term$has_holes$($6793) || Kind$Term$has_holes$($6794(Kind$Term$typ)));
                var $6784 = $6795;
                break;
            case 'Kind.Term.def':
                var $6796 = self.expr;
                var $6797 = self.body;
                var $6798 = (Kind$Term$has_holes$($6796) || Kind$Term$has_holes$($6797(Kind$Term$typ)));
                var $6784 = $6798;
                break;
            case 'Kind.Term.ann':
                var $6799 = self.term;
                var $6800 = self.type;
                var $6801 = (Kind$Term$has_holes$($6799) || Kind$Term$has_holes$($6800));
                var $6784 = $6801;
                break;
            case 'Kind.Term.ori':
                var $6802 = self.expr;
                var $6803 = Kind$Term$has_holes$($6802);
                var $6784 = $6803;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.gol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
                var $6804 = Bool$false;
                var $6784 = $6804;
                break;
            case 'Kind.Term.hol':
                var $6805 = Bool$true;
                var $6784 = $6805;
                break;
        };
        return $6784;
    };
    const Kind$Term$has_holes = x0 => Kind$Term$has_holes$(x0);

    function Kind$Term$equal$hole$(_path$1, _term$2) {
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var self = Kind$Term$has_holes$(_term$2);
                if (self) {
                    var $6808 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                    var $6807 = $6808;
                } else {
                    var $6809 = Kind$Check$result$(Maybe$some$(Bool$true), List$cons$(Kind$Error$patch$(_path$1, Kind$Term$normalize$(_term$2, Kind$Map$new)), List$nil));
                    var $6807 = $6809;
                };
                var $6806 = $6807;
                break;
            case 'Kind.Term.hol':
                var $6810 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $6806 = $6810;
                break;
        };
        return $6806;
    };
    const Kind$Term$equal$hole = x0 => x1 => Kind$Term$equal$hole$(x0, x1);

    function Kind$Term$equal$extra_holes$filler$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Kind.Term.app':
                var $6812 = self.func;
                var $6813 = self.argm;
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.app':
                        var $6815 = self.func;
                        var $6816 = self.argm;
                        var self = Kind$Term$equal$extra_holes$filler$($6812, $6815);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6818 = self.value;
                                var $6819 = self.errors;
                                var self = $6818;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6821 = Kind$Check$result$(Maybe$none, $6819);
                                        var $6820 = $6821;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Term$equal$extra_holes$filler$($6813, $6816);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6823 = self.value;
                                                var $6824 = self.errors;
                                                var $6825 = Kind$Check$result$($6823, List$concat$($6819, $6824));
                                                var $6822 = $6825;
                                                break;
                                        };
                                        var $6820 = $6822;
                                        break;
                                };
                                var $6817 = $6820;
                                break;
                        };
                        var $6814 = $6817;
                        break;
                    case 'Kind.Term.hol':
                        var $6826 = self.path;
                        var self = Kind$Term$equal$hole$($6826, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6828 = self.value;
                                var $6829 = self.errors;
                                var self = $6828;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6831 = Kind$Check$result$(Maybe$none, $6829);
                                        var $6830 = $6831;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6833 = self.value;
                                                var $6834 = self.errors;
                                                var $6835 = Kind$Check$result$($6833, List$concat$($6829, $6834));
                                                var $6832 = $6835;
                                                break;
                                        };
                                        var $6830 = $6832;
                                        break;
                                };
                                var $6827 = $6830;
                                break;
                        };
                        var $6814 = $6827;
                        break;
                    case 'Kind.Term.ori':
                        var $6836 = self.expr;
                        var $6837 = Kind$Term$equal$extra_holes$filler$(_a$1, $6836);
                        var $6814 = $6837;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6838 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6814 = $6838;
                        break;
                };
                var $6811 = $6814;
                break;
            case 'Kind.Term.hol':
                var $6839 = self.path;
                var self = Kind$Term$equal$hole$($6839, _b$2);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6841 = self.value;
                        var $6842 = self.errors;
                        var self = $6841;
                        switch (self._) {
                            case 'Maybe.none':
                                var $6844 = Kind$Check$result$(Maybe$none, $6842);
                                var $6843 = $6844;
                                break;
                            case 'Maybe.some':
                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6846 = self.value;
                                        var $6847 = self.errors;
                                        var $6848 = Kind$Check$result$($6846, List$concat$($6842, $6847));
                                        var $6845 = $6848;
                                        break;
                                };
                                var $6843 = $6845;
                                break;
                        };
                        var $6840 = $6843;
                        break;
                };
                var $6811 = $6840;
                break;
            case 'Kind.Term.ori':
                var $6849 = self.expr;
                var $6850 = Kind$Term$equal$extra_holes$filler$($6849, _b$2);
                var $6811 = $6850;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.lam':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6852 = self.path;
                        var self = Kind$Term$equal$hole$($6852, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6854 = self.value;
                                var $6855 = self.errors;
                                var self = $6854;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6857 = Kind$Check$result$(Maybe$none, $6855);
                                        var $6856 = $6857;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6859 = self.value;
                                                var $6860 = self.errors;
                                                var $6861 = Kind$Check$result$($6859, List$concat$($6855, $6860));
                                                var $6858 = $6861;
                                                break;
                                        };
                                        var $6856 = $6858;
                                        break;
                                };
                                var $6853 = $6856;
                                break;
                        };
                        var $6851 = $6853;
                        break;
                    case 'Kind.Term.ori':
                        var $6862 = self.expr;
                        var $6863 = Kind$Term$equal$extra_holes$filler$(_a$1, $6862);
                        var $6851 = $6863;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6864 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6851 = $6864;
                        break;
                };
                var $6811 = $6851;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6866 = self.path;
                        var self = Kind$Term$equal$hole$($6866, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6868 = self.value;
                                var $6869 = self.errors;
                                var self = $6868;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6871 = Kind$Check$result$(Maybe$none, $6869);
                                        var $6870 = $6871;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6873 = self.value;
                                                var $6874 = self.errors;
                                                var $6875 = Kind$Check$result$($6873, List$concat$($6869, $6874));
                                                var $6872 = $6875;
                                                break;
                                        };
                                        var $6870 = $6872;
                                        break;
                                };
                                var $6867 = $6870;
                                break;
                        };
                        var $6865 = $6867;
                        break;
                    case 'Kind.Term.ori':
                        var $6876 = self.expr;
                        var $6877 = Kind$Term$equal$extra_holes$filler$(_a$1, $6876);
                        var $6865 = $6877;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6878 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6865 = $6878;
                        break;
                };
                var $6811 = $6865;
                break;
            case 'Kind.Term.typ':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6880 = self.path;
                        var self = Kind$Term$equal$hole$($6880, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6882 = self.value;
                                var $6883 = self.errors;
                                var self = $6882;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6885 = Kind$Check$result$(Maybe$none, $6883);
                                        var $6884 = $6885;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6887 = self.value;
                                                var $6888 = self.errors;
                                                var $6889 = Kind$Check$result$($6887, List$concat$($6883, $6888));
                                                var $6886 = $6889;
                                                break;
                                        };
                                        var $6884 = $6886;
                                        break;
                                };
                                var $6881 = $6884;
                                break;
                        };
                        var $6879 = $6881;
                        break;
                    case 'Kind.Term.ori':
                        var $6890 = self.expr;
                        var $6891 = Kind$Term$equal$extra_holes$filler$(_a$1, $6890);
                        var $6879 = $6891;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6892 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6879 = $6892;
                        break;
                };
                var $6811 = $6879;
                break;
            case 'Kind.Term.all':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6894 = self.path;
                        var self = Kind$Term$equal$hole$($6894, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6896 = self.value;
                                var $6897 = self.errors;
                                var self = $6896;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6899 = Kind$Check$result$(Maybe$none, $6897);
                                        var $6898 = $6899;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6901 = self.value;
                                                var $6902 = self.errors;
                                                var $6903 = Kind$Check$result$($6901, List$concat$($6897, $6902));
                                                var $6900 = $6903;
                                                break;
                                        };
                                        var $6898 = $6900;
                                        break;
                                };
                                var $6895 = $6898;
                                break;
                        };
                        var $6893 = $6895;
                        break;
                    case 'Kind.Term.ori':
                        var $6904 = self.expr;
                        var $6905 = Kind$Term$equal$extra_holes$filler$(_a$1, $6904);
                        var $6893 = $6905;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6906 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6893 = $6906;
                        break;
                };
                var $6811 = $6893;
                break;
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6908 = self.path;
                        var self = Kind$Term$equal$hole$($6908, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6910 = self.value;
                                var $6911 = self.errors;
                                var self = $6910;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6913 = Kind$Check$result$(Maybe$none, $6911);
                                        var $6912 = $6913;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6915 = self.value;
                                                var $6916 = self.errors;
                                                var $6917 = Kind$Check$result$($6915, List$concat$($6911, $6916));
                                                var $6914 = $6917;
                                                break;
                                        };
                                        var $6912 = $6914;
                                        break;
                                };
                                var $6909 = $6912;
                                break;
                        };
                        var $6907 = $6909;
                        break;
                    case 'Kind.Term.ori':
                        var $6918 = self.expr;
                        var $6919 = Kind$Term$equal$extra_holes$filler$(_a$1, $6918);
                        var $6907 = $6919;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6920 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6907 = $6920;
                        break;
                };
                var $6811 = $6907;
                break;
            case 'Kind.Term.cse':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6922 = self.path;
                        var self = Kind$Term$equal$hole$($6922, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6924 = self.value;
                                var $6925 = self.errors;
                                var self = $6924;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6927 = Kind$Check$result$(Maybe$none, $6925);
                                        var $6926 = $6927;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6929 = self.value;
                                                var $6930 = self.errors;
                                                var $6931 = Kind$Check$result$($6929, List$concat$($6925, $6930));
                                                var $6928 = $6931;
                                                break;
                                        };
                                        var $6926 = $6928;
                                        break;
                                };
                                var $6923 = $6926;
                                break;
                        };
                        var $6921 = $6923;
                        break;
                    case 'Kind.Term.ori':
                        var $6932 = self.expr;
                        var $6933 = Kind$Term$equal$extra_holes$filler$(_a$1, $6932);
                        var $6921 = $6933;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6934 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6921 = $6934;
                        break;
                };
                var $6811 = $6921;
                break;
        };
        return $6811;
    };
    const Kind$Term$equal$extra_holes$filler = x0 => x1 => Kind$Term$equal$extra_holes$filler$(x0, x1);

    function Kind$Term$equal$extra_holes$(_a$1, _b$2) {
        var self = Kind$Term$equal$extra_holes$funari$(_a$1, 0n);
        switch (self._) {
            case 'Maybe.some':
                var $6936 = self.value;
                var self = Kind$Term$equal$extra_holes$funari$(_b$2, 0n);
                switch (self._) {
                    case 'Maybe.some':
                        var $6938 = self.value;
                        var self = $6936;
                        switch (self._) {
                            case 'Pair.new':
                                var $6940 = self.fst;
                                var $6941 = self.snd;
                                var self = $6938;
                                switch (self._) {
                                    case 'Pair.new':
                                        var $6943 = self.fst;
                                        var $6944 = self.snd;
                                        var _same_fun$9 = ($6940 === $6943);
                                        var _same_ari$10 = ($6941 === $6944);
                                        var self = (_same_fun$9 && _same_ari$10);
                                        if (self) {
                                            var $6946 = Kind$Term$equal$extra_holes$filler$(_a$1, _b$2);
                                            var $6945 = $6946;
                                        } else {
                                            var $6947 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                            var $6945 = $6947;
                                        };
                                        var $6942 = $6945;
                                        break;
                                };
                                var $6939 = $6942;
                                break;
                        };
                        var $6937 = $6939;
                        break;
                    case 'Maybe.none':
                        var $6948 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6937 = $6948;
                        break;
                };
                var $6935 = $6937;
                break;
            case 'Maybe.none':
                var $6949 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                var $6935 = $6949;
                break;
        };
        return $6935;
    };
    const Kind$Term$equal$extra_holes = x0 => x1 => Kind$Term$equal$extra_holes$(x0, x1);

    function BitsSet$set$(_bits$1, _set$2) {
        var $6950 = BitsMap$set$(_bits$1, Unit$new, _set$2);
        return $6950;
    };
    const BitsSet$set = x0 => x1 => BitsSet$set$(x0, x1);

    function BitsSet$mut$set$(_bits$1, _set$2) {
        var $6951 = BitsSet$set$(_bits$1, _set$2);
        return $6951;
    };
    const BitsSet$mut$set = x0 => x1 => BitsSet$mut$set$(x0, x1);

    function Bool$eql$(_a$1, _b$2) {
        var self = _a$1;
        if (self) {
            var $6953 = _b$2;
            var $6952 = $6953;
        } else {
            var $6954 = (!_b$2);
            var $6952 = $6954;
        };
        return $6952;
    };
    const Bool$eql = x0 => x1 => Bool$eql$(x0, x1);

    function Kind$Term$equal$go$(_a$1, _b$2, _defs$3, _lv$4, _seen$5) {
        var _ah$6 = Kind$Term$serialize$(Kind$Term$reduce$(_a$1, Kind$Map$new), _lv$4, Bool$false);
        var _bh$7 = Kind$Term$serialize$(Kind$Term$reduce$(_b$2, Kind$Map$new), _lv$4, Bool$true);
        var self = (_bh$7 === _ah$6);
        if (self) {
            var $6956 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
            var $6955 = $6956;
        } else {
            var _a1$8 = Kind$Term$reduce$(_a$1, _defs$3);
            var _b1$9 = Kind$Term$reduce$(_b$2, _defs$3);
            var _ah$10 = Kind$Term$serialize$(_a1$8, _lv$4, Bool$false);
            var _bh$11 = Kind$Term$serialize$(_b1$9, _lv$4, Bool$true);
            var self = (_bh$11 === _ah$10);
            if (self) {
                var $6958 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $6957 = $6958;
            } else {
                var _id$12 = (_bh$11 + _ah$10);
                var self = BitsSet$mut$has$(_id$12, _seen$5);
                if (self) {
                    var self = Kind$Term$equal$extra_holes$(_a$1, _b$2);
                    switch (self._) {
                        case 'Kind.Check.result':
                            var $6961 = self.value;
                            var $6962 = self.errors;
                            var self = $6961;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $6964 = Kind$Check$result$(Maybe$none, $6962);
                                    var $6963 = $6964;
                                    break;
                                case 'Maybe.some':
                                    var self = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6966 = self.value;
                                            var $6967 = self.errors;
                                            var $6968 = Kind$Check$result$($6966, List$concat$($6962, $6967));
                                            var $6965 = $6968;
                                            break;
                                    };
                                    var $6963 = $6965;
                                    break;
                            };
                            var $6960 = $6963;
                            break;
                    };
                    var $6959 = $6960;
                } else {
                    var self = _a1$8;
                    switch (self._) {
                        case 'Kind.Term.all':
                            var $6970 = self.eras;
                            var $6971 = self.self;
                            var $6972 = self.name;
                            var $6973 = self.xtyp;
                            var $6974 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.all':
                                    var $6976 = self.eras;
                                    var $6977 = self.self;
                                    var $6978 = self.name;
                                    var $6979 = self.xtyp;
                                    var $6980 = self.body;
                                    var _seen$23 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$24 = $6974(Kind$Term$var$($6971, _lv$4))(Kind$Term$var$($6972, Nat$succ$(_lv$4)));
                                    var _b1_body$25 = $6980(Kind$Term$var$($6977, _lv$4))(Kind$Term$var$($6978, Nat$succ$(_lv$4)));
                                    var _eq_self$26 = ($6971 === $6977);
                                    var _eq_eras$27 = Bool$eql$($6970, $6976);
                                    var self = (_eq_self$26 && _eq_eras$27);
                                    if (self) {
                                        var self = Kind$Term$equal$go$($6973, $6979, _defs$3, _lv$4, _seen$23);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6983 = self.value;
                                                var $6984 = self.errors;
                                                var self = $6983;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $6986 = self.value;
                                                        var self = Kind$Term$equal$go$(_a1_body$24, _b1_body$25, _defs$3, Nat$succ$(Nat$succ$(_lv$4)), _seen$23);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6988 = self.value;
                                                                var $6989 = self.errors;
                                                                var self = $6988;
                                                                switch (self._) {
                                                                    case 'Maybe.some':
                                                                        var $6991 = self.value;
                                                                        var self = Kind$Check$result$(Maybe$some$(($6986 && $6991)), List$nil);
                                                                        switch (self._) {
                                                                            case 'Kind.Check.result':
                                                                                var $6993 = self.value;
                                                                                var $6994 = self.errors;
                                                                                var $6995 = Kind$Check$result$($6993, List$concat$($6989, $6994));
                                                                                var $6992 = $6995;
                                                                                break;
                                                                        };
                                                                        var $6990 = $6992;
                                                                        break;
                                                                    case 'Maybe.none':
                                                                        var $6996 = Kind$Check$result$(Maybe$none, $6989);
                                                                        var $6990 = $6996;
                                                                        break;
                                                                };
                                                                var self = $6990;
                                                                break;
                                                        };
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6997 = self.value;
                                                                var $6998 = self.errors;
                                                                var $6999 = Kind$Check$result$($6997, List$concat$($6984, $6998));
                                                                var $6987 = $6999;
                                                                break;
                                                        };
                                                        var $6985 = $6987;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $7000 = Kind$Check$result$(Maybe$none, $6984);
                                                        var $6985 = $7000;
                                                        break;
                                                };
                                                var $6982 = $6985;
                                                break;
                                        };
                                        var $6981 = $6982;
                                    } else {
                                        var $7001 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6981 = $7001;
                                    };
                                    var $6975 = $6981;
                                    break;
                                case 'Kind.Term.hol':
                                    var $7002 = self.path;
                                    var $7003 = Kind$Term$equal$hole$($7002, _a$1);
                                    var $6975 = $7003;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7004 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6975 = $7004;
                                    break;
                            };
                            var $6969 = $6975;
                            break;
                        case 'Kind.Term.lam':
                            var $7005 = self.name;
                            var $7006 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.lam':
                                    var $7008 = self.name;
                                    var $7009 = self.body;
                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$18 = $7006(Kind$Term$var$($7005, _lv$4));
                                    var _b1_body$19 = $7009(Kind$Term$var$($7008, _lv$4));
                                    var self = Kind$Term$equal$go$(_a1_body$18, _b1_body$19, _defs$3, Nat$succ$(_lv$4), _seen$17);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7011 = self.value;
                                            var $7012 = self.errors;
                                            var self = $7011;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $7014 = self.value;
                                                    var self = Kind$Check$result$(Maybe$some$($7014), List$nil);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7016 = self.value;
                                                            var $7017 = self.errors;
                                                            var $7018 = Kind$Check$result$($7016, List$concat$($7012, $7017));
                                                            var $7015 = $7018;
                                                            break;
                                                    };
                                                    var $7013 = $7015;
                                                    break;
                                                case 'Maybe.none':
                                                    var $7019 = Kind$Check$result$(Maybe$none, $7012);
                                                    var $7013 = $7019;
                                                    break;
                                            };
                                            var $7010 = $7013;
                                            break;
                                    };
                                    var $7007 = $7010;
                                    break;
                                case 'Kind.Term.hol':
                                    var $7020 = self.path;
                                    var $7021 = Kind$Term$equal$hole$($7020, _a$1);
                                    var $7007 = $7021;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7022 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7007 = $7022;
                                    break;
                            };
                            var $6969 = $7007;
                            break;
                        case 'Kind.Term.app':
                            var $7023 = self.func;
                            var $7024 = self.argm;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.app':
                                    var $7026 = self.func;
                                    var $7027 = self.argm;
                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var self = Kind$Term$equal$go$($7023, $7026, _defs$3, _lv$4, _seen$17);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7029 = self.value;
                                            var $7030 = self.errors;
                                            var self = $7029;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $7032 = self.value;
                                                    var self = Kind$Term$equal$go$($7024, $7027, _defs$3, _lv$4, _seen$17);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7034 = self.value;
                                                            var $7035 = self.errors;
                                                            var self = $7034;
                                                            switch (self._) {
                                                                case 'Maybe.some':
                                                                    var $7037 = self.value;
                                                                    var self = Kind$Check$result$(Maybe$some$(($7032 && $7037)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Kind.Check.result':
                                                                            var $7039 = self.value;
                                                                            var $7040 = self.errors;
                                                                            var $7041 = Kind$Check$result$($7039, List$concat$($7035, $7040));
                                                                            var $7038 = $7041;
                                                                            break;
                                                                    };
                                                                    var $7036 = $7038;
                                                                    break;
                                                                case 'Maybe.none':
                                                                    var $7042 = Kind$Check$result$(Maybe$none, $7035);
                                                                    var $7036 = $7042;
                                                                    break;
                                                            };
                                                            var self = $7036;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7043 = self.value;
                                                            var $7044 = self.errors;
                                                            var $7045 = Kind$Check$result$($7043, List$concat$($7030, $7044));
                                                            var $7033 = $7045;
                                                            break;
                                                    };
                                                    var $7031 = $7033;
                                                    break;
                                                case 'Maybe.none':
                                                    var $7046 = Kind$Check$result$(Maybe$none, $7030);
                                                    var $7031 = $7046;
                                                    break;
                                            };
                                            var $7028 = $7031;
                                            break;
                                    };
                                    var $7025 = $7028;
                                    break;
                                case 'Kind.Term.hol':
                                    var $7047 = self.path;
                                    var $7048 = Kind$Term$equal$hole$($7047, _a$1);
                                    var $7025 = $7048;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7049 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7025 = $7049;
                                    break;
                            };
                            var $6969 = $7025;
                            break;
                        case 'Kind.Term.let':
                            var $7050 = self.name;
                            var $7051 = self.expr;
                            var $7052 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.let':
                                    var $7054 = self.name;
                                    var $7055 = self.expr;
                                    var $7056 = self.body;
                                    var _seen$19 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$20 = $7052(Kind$Term$var$($7050, _lv$4));
                                    var _b1_body$21 = $7056(Kind$Term$var$($7054, _lv$4));
                                    var self = Kind$Term$equal$go$($7051, $7055, _defs$3, _lv$4, _seen$19);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7058 = self.value;
                                            var $7059 = self.errors;
                                            var self = $7058;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $7061 = self.value;
                                                    var self = Kind$Term$equal$go$(_a1_body$20, _b1_body$21, _defs$3, Nat$succ$(_lv$4), _seen$19);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7063 = self.value;
                                                            var $7064 = self.errors;
                                                            var self = $7063;
                                                            switch (self._) {
                                                                case 'Maybe.some':
                                                                    var $7066 = self.value;
                                                                    var self = Kind$Check$result$(Maybe$some$(($7061 && $7066)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Kind.Check.result':
                                                                            var $7068 = self.value;
                                                                            var $7069 = self.errors;
                                                                            var $7070 = Kind$Check$result$($7068, List$concat$($7064, $7069));
                                                                            var $7067 = $7070;
                                                                            break;
                                                                    };
                                                                    var $7065 = $7067;
                                                                    break;
                                                                case 'Maybe.none':
                                                                    var $7071 = Kind$Check$result$(Maybe$none, $7064);
                                                                    var $7065 = $7071;
                                                                    break;
                                                            };
                                                            var self = $7065;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7072 = self.value;
                                                            var $7073 = self.errors;
                                                            var $7074 = Kind$Check$result$($7072, List$concat$($7059, $7073));
                                                            var $7062 = $7074;
                                                            break;
                                                    };
                                                    var $7060 = $7062;
                                                    break;
                                                case 'Maybe.none':
                                                    var $7075 = Kind$Check$result$(Maybe$none, $7059);
                                                    var $7060 = $7075;
                                                    break;
                                            };
                                            var $7057 = $7060;
                                            break;
                                    };
                                    var $7053 = $7057;
                                    break;
                                case 'Kind.Term.hol':
                                    var $7076 = self.path;
                                    var $7077 = Kind$Term$equal$hole$($7076, _a$1);
                                    var $7053 = $7077;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7078 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7053 = $7078;
                                    break;
                            };
                            var $6969 = $7053;
                            break;
                        case 'Kind.Term.hol':
                            var $7079 = self.path;
                            var $7080 = Kind$Term$equal$hole$($7079, _b$2);
                            var $6969 = $7080;
                            break;
                        case 'Kind.Term.var':
                        case 'Kind.Term.ori':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7082 = self.path;
                                    var $7083 = Kind$Term$equal$hole$($7082, _a$1);
                                    var $7081 = $7083;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7084 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7081 = $7084;
                                    break;
                            };
                            var $6969 = $7081;
                            break;
                        case 'Kind.Term.ref':
                        case 'Kind.Term.nat':
                        case 'Kind.Term.chr':
                        case 'Kind.Term.str':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7086 = self.path;
                                    var $7087 = Kind$Term$equal$hole$($7086, _a$1);
                                    var $7085 = $7087;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7088 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7085 = $7088;
                                    break;
                            };
                            var $6969 = $7085;
                            break;
                        case 'Kind.Term.typ':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7090 = self.path;
                                    var $7091 = Kind$Term$equal$hole$($7090, _a$1);
                                    var $7089 = $7091;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7092 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7089 = $7092;
                                    break;
                            };
                            var $6969 = $7089;
                            break;
                        case 'Kind.Term.def':
                        case 'Kind.Term.ann':
                        case 'Kind.Term.gol':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7094 = self.path;
                                    var $7095 = Kind$Term$equal$hole$($7094, _a$1);
                                    var $7093 = $7095;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7096 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7093 = $7096;
                                    break;
                            };
                            var $6969 = $7093;
                            break;
                        case 'Kind.Term.cse':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $7098 = self.path;
                                    var $7099 = Kind$Term$equal$hole$($7098, _a$1);
                                    var $7097 = $7099;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $7100 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7097 = $7100;
                                    break;
                            };
                            var $6969 = $7097;
                            break;
                    };
                    var $6959 = $6969;
                };
                var $6957 = $6959;
            };
            var $6955 = $6957;
        };
        return $6955;
    };
    const Kind$Term$equal$go = x0 => x1 => x2 => x3 => x4 => Kind$Term$equal$go$(x0, x1, x2, x3, x4);
    const BitsSet$new = BitsMap$new;

    function BitsSet$mut$new$(_a$1) {
        var $7101 = BitsSet$new;
        return $7101;
    };
    const BitsSet$mut$new = x0 => BitsSet$mut$new$(x0);

    function Kind$Term$check$(_term$1, _type$2, _defs$3, _ctx$4, _path$5, _orig$6) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $7103 = self.name;
                var $7104 = self.indx;
                var self = List$at_last$($7104, _ctx$4);
                switch (self._) {
                    case 'Maybe.some':
                        var $7106 = self.value;
                        var $7107 = Kind$Check$result$(Maybe$some$((() => {
                            var self = $7106;
                            switch (self._) {
                                case 'Pair.new':
                                    var $7108 = self.snd;
                                    var $7109 = $7108;
                                    return $7109;
                            };
                        })()), List$nil);
                        var $7105 = $7107;
                        break;
                    case 'Maybe.none':
                        var $7110 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $7103), List$nil));
                        var $7105 = $7110;
                        break;
                };
                var self = $7105;
                break;
            case 'Kind.Term.ref':
                var $7111 = self.name;
                var self = Kind$Map$get$($7111, _defs$3);
                switch (self._) {
                    case 'Maybe.some':
                        var $7113 = self.value;
                        var self = $7113;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7115 = self.name;
                                var $7116 = self.term;
                                var $7117 = self.type;
                                var $7118 = self.stat;
                                var _ref_name$18 = $7115;
                                var _ref_type$19 = $7117;
                                var _ref_term$20 = $7116;
                                var _ref_stat$21 = $7118;
                                var self = _ref_stat$21;
                                switch (self._) {
                                    case 'Kind.Status.init':
                                        var $7120 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$waiting$(_ref_name$18), List$nil));
                                        var $7119 = $7120;
                                        break;
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.done':
                                        var $7121 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$nil);
                                        var $7119 = $7121;
                                        break;
                                    case 'Kind.Status.fail':
                                        var $7122 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$indirect$(_ref_name$18), List$nil));
                                        var $7119 = $7122;
                                        break;
                                };
                                var $7114 = $7119;
                                break;
                        };
                        var $7112 = $7114;
                        break;
                    case 'Maybe.none':
                        var $7123 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $7111), List$nil));
                        var $7112 = $7123;
                        break;
                };
                var self = $7112;
                break;
            case 'Kind.Term.all':
                var $7124 = self.self;
                var $7125 = self.name;
                var $7126 = self.xtyp;
                var $7127 = self.body;
                var _ctx_size$12 = (list_length(_ctx$4));
                var _self_var$13 = Kind$Term$var$($7124, _ctx_size$12);
                var _body_var$14 = Kind$Term$var$($7125, Nat$succ$(_ctx_size$12));
                var _body_ctx$15 = List$cons$(Pair$new$($7125, $7126), List$cons$(Pair$new$($7124, _term$1), _ctx$4));
                var self = Kind$Term$check$($7126, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7129 = self.value;
                        var $7130 = self.errors;
                        var self = $7129;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7132 = Kind$Check$result$(Maybe$none, $7130);
                                var $7131 = $7132;
                                break;
                            case 'Maybe.some':
                                var self = Kind$Term$check$($7127(_self_var$13)(_body_var$14), Maybe$some$(Kind$Term$typ), _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7134 = self.value;
                                        var $7135 = self.errors;
                                        var self = $7134;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7137 = Kind$Check$result$(Maybe$none, $7135);
                                                var $7136 = $7137;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7139 = self.value;
                                                        var $7140 = self.errors;
                                                        var $7141 = Kind$Check$result$($7139, List$concat$($7135, $7140));
                                                        var $7138 = $7141;
                                                        break;
                                                };
                                                var $7136 = $7138;
                                                break;
                                        };
                                        var self = $7136;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7142 = self.value;
                                        var $7143 = self.errors;
                                        var $7144 = Kind$Check$result$($7142, List$concat$($7130, $7143));
                                        var $7133 = $7144;
                                        break;
                                };
                                var $7131 = $7133;
                                break;
                        };
                        var $7128 = $7131;
                        break;
                };
                var self = $7128;
                break;
            case 'Kind.Term.lam':
                var $7145 = self.name;
                var $7146 = self.body;
                var self = _type$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $7148 = self.value;
                        var _typv$10 = Kind$Term$reduce$($7148, _defs$3);
                        var self = _typv$10;
                        switch (self._) {
                            case 'Kind.Term.all':
                                var $7150 = self.xtyp;
                                var $7151 = self.body;
                                var _ctx_size$16 = (list_length(_ctx$4));
                                var _self_var$17 = _term$1;
                                var _body_var$18 = Kind$Term$var$($7145, _ctx_size$16);
                                var _body_typ$19 = $7151(_self_var$17)(_body_var$18);
                                var _body_ctx$20 = List$cons$(Pair$new$($7145, $7150), _ctx$4);
                                var self = Kind$Term$check$($7146(_body_var$18), Maybe$some$(_body_typ$19), _defs$3, _body_ctx$20, Kind$MPath$o$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7153 = self.value;
                                        var $7154 = self.errors;
                                        var self = $7153;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7156 = Kind$Check$result$(Maybe$none, $7154);
                                                var $7155 = $7156;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Check$result$(Maybe$some$($7148), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7158 = self.value;
                                                        var $7159 = self.errors;
                                                        var $7160 = Kind$Check$result$($7158, List$concat$($7154, $7159));
                                                        var $7157 = $7160;
                                                        break;
                                                };
                                                var $7155 = $7157;
                                                break;
                                        };
                                        var $7152 = $7155;
                                        break;
                                };
                                var $7149 = $7152;
                                break;
                            case 'Kind.Term.var':
                            case 'Kind.Term.lam':
                            case 'Kind.Term.app':
                            case 'Kind.Term.ori':
                                var _expected$13 = Either$left$("function");
                                var _detected$14 = Either$right$($7148);
                                var $7161 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7149 = $7161;
                                break;
                            case 'Kind.Term.ref':
                            case 'Kind.Term.hol':
                            case 'Kind.Term.nat':
                            case 'Kind.Term.chr':
                            case 'Kind.Term.str':
                                var _expected$12 = Either$left$("function");
                                var _detected$13 = Either$right$($7148);
                                var $7162 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7149 = $7162;
                                break;
                            case 'Kind.Term.typ':
                                var _expected$11 = Either$left$("function");
                                var _detected$12 = Either$right$($7148);
                                var $7163 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$11, _detected$12, _ctx$4), List$nil));
                                var $7149 = $7163;
                                break;
                            case 'Kind.Term.let':
                            case 'Kind.Term.def':
                            case 'Kind.Term.ann':
                            case 'Kind.Term.gol':
                                var _expected$14 = Either$left$("function");
                                var _detected$15 = Either$right$($7148);
                                var $7164 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7149 = $7164;
                                break;
                            case 'Kind.Term.cse':
                                var _expected$17 = Either$left$("function");
                                var _detected$18 = Either$right$($7148);
                                var $7165 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$17, _detected$18, _ctx$4), List$nil));
                                var $7149 = $7165;
                                break;
                        };
                        var $7147 = $7149;
                        break;
                    case 'Maybe.none':
                        var _lam_type$9 = Kind$Term$hol$(Bits$e);
                        var _lam_term$10 = Kind$Term$ann$(Bool$false, _term$1, _lam_type$9);
                        var $7166 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), _lam_term$10), List$nil));
                        var $7147 = $7166;
                        break;
                };
                var self = $7147;
                break;
            case 'Kind.Term.app':
                var $7167 = self.func;
                var $7168 = self.argm;
                var self = Kind$Term$check$($7167, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7170 = self.value;
                        var $7171 = self.errors;
                        var self = $7170;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7173 = self.value;
                                var _func_typ$12 = Kind$Term$reduce$($7173, _defs$3);
                                var self = _func_typ$12;
                                switch (self._) {
                                    case 'Kind.Term.all':
                                        var $7175 = self.xtyp;
                                        var $7176 = self.body;
                                        var self = Kind$Term$check$($7168, Maybe$some$($7175), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $7178 = self.value;
                                                var $7179 = self.errors;
                                                var self = $7178;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $7181 = Kind$Check$result$(Maybe$none, $7179);
                                                        var $7180 = $7181;
                                                        break;
                                                    case 'Maybe.some':
                                                        var self = Kind$Check$result$(Maybe$some$($7176($7167)($7168)), List$nil);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $7183 = self.value;
                                                                var $7184 = self.errors;
                                                                var $7185 = Kind$Check$result$($7183, List$concat$($7179, $7184));
                                                                var $7182 = $7185;
                                                                break;
                                                        };
                                                        var $7180 = $7182;
                                                        break;
                                                };
                                                var $7177 = $7180;
                                                break;
                                        };
                                        var self = $7177;
                                        break;
                                    case 'Kind.Term.var':
                                    case 'Kind.Term.lam':
                                    case 'Kind.Term.app':
                                    case 'Kind.Term.ori':
                                        var _expected$15 = Either$left$("function");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var self = $7167;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7187 = self.orig;
                                                var $7188 = Maybe$some$($7187);
                                                var _orig$17 = $7188;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7189 = _orig$6;
                                                var _orig$17 = $7189;
                                                break;
                                        };
                                        var $7186 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$17, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7186;
                                        break;
                                    case 'Kind.Term.ref':
                                    case 'Kind.Term.hol':
                                    case 'Kind.Term.nat':
                                    case 'Kind.Term.chr':
                                    case 'Kind.Term.str':
                                        var _expected$14 = Either$left$("function");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var self = $7167;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7191 = self.orig;
                                                var $7192 = Maybe$some$($7191);
                                                var _orig$16 = $7192;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7193 = _orig$6;
                                                var _orig$16 = $7193;
                                                break;
                                        };
                                        var $7190 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$16, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7190;
                                        break;
                                    case 'Kind.Term.typ':
                                        var _expected$13 = Either$left$("function");
                                        var _detected$14 = Either$right$(_func_typ$12);
                                        var self = $7167;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7195 = self.orig;
                                                var $7196 = Maybe$some$($7195);
                                                var _orig$15 = $7196;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7197 = _orig$6;
                                                var _orig$15 = $7197;
                                                break;
                                        };
                                        var $7194 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$15, _expected$13, _detected$14, _ctx$4), List$nil));
                                        var self = $7194;
                                        break;
                                    case 'Kind.Term.let':
                                    case 'Kind.Term.def':
                                    case 'Kind.Term.ann':
                                    case 'Kind.Term.gol':
                                        var _expected$16 = Either$left$("function");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var self = $7167;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7199 = self.orig;
                                                var $7200 = Maybe$some$($7199);
                                                var _orig$18 = $7200;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7201 = _orig$6;
                                                var _orig$18 = $7201;
                                                break;
                                        };
                                        var $7198 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$18, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7198;
                                        break;
                                    case 'Kind.Term.cse':
                                        var _expected$19 = Either$left$("function");
                                        var _detected$20 = Either$right$(_func_typ$12);
                                        var self = $7167;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $7203 = self.orig;
                                                var $7204 = Maybe$some$($7203);
                                                var _orig$21 = $7204;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $7205 = _orig$6;
                                                var _orig$21 = $7205;
                                                break;
                                        };
                                        var $7202 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$21, _expected$19, _detected$20, _ctx$4), List$nil));
                                        var self = $7202;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7206 = self.value;
                                        var $7207 = self.errors;
                                        var $7208 = Kind$Check$result$($7206, List$concat$($7171, $7207));
                                        var $7174 = $7208;
                                        break;
                                };
                                var $7172 = $7174;
                                break;
                            case 'Maybe.none':
                                var $7209 = Kind$Check$result$(Maybe$none, $7171);
                                var $7172 = $7209;
                                break;
                        };
                        var $7169 = $7172;
                        break;
                };
                var self = $7169;
                break;
            case 'Kind.Term.let':
                var $7210 = self.name;
                var $7211 = self.expr;
                var $7212 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Kind$Term$check$($7211, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7214 = self.value;
                        var $7215 = self.errors;
                        var self = $7214;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7217 = self.value;
                                var _body_val$14 = $7212(Kind$Term$var$($7210, _ctx_size$10));
                                var _body_ctx$15 = List$cons$(Pair$new$($7210, $7217), _ctx$4);
                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7219 = self.value;
                                        var $7220 = self.errors;
                                        var self = $7219;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7222 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$($7222), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7224 = self.value;
                                                        var $7225 = self.errors;
                                                        var $7226 = Kind$Check$result$($7224, List$concat$($7220, $7225));
                                                        var $7223 = $7226;
                                                        break;
                                                };
                                                var $7221 = $7223;
                                                break;
                                            case 'Maybe.none':
                                                var $7227 = Kind$Check$result$(Maybe$none, $7220);
                                                var $7221 = $7227;
                                                break;
                                        };
                                        var self = $7221;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7228 = self.value;
                                        var $7229 = self.errors;
                                        var $7230 = Kind$Check$result$($7228, List$concat$($7215, $7229));
                                        var $7218 = $7230;
                                        break;
                                };
                                var $7216 = $7218;
                                break;
                            case 'Maybe.none':
                                var $7231 = Kind$Check$result$(Maybe$none, $7215);
                                var $7216 = $7231;
                                break;
                        };
                        var $7213 = $7216;
                        break;
                };
                var self = $7213;
                break;
            case 'Kind.Term.def':
                var $7232 = self.name;
                var $7233 = self.expr;
                var $7234 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Kind$Term$check$($7233, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7236 = self.value;
                        var $7237 = self.errors;
                        var self = $7236;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7239 = self.value;
                                var _body_val$14 = $7234(Kind$Term$ann$(Bool$true, $7233, $7239));
                                var _body_ctx$15 = List$cons$(Pair$new$($7232, $7239), _ctx$4);
                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7241 = self.value;
                                        var $7242 = self.errors;
                                        var self = $7241;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7244 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$($7244), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7246 = self.value;
                                                        var $7247 = self.errors;
                                                        var $7248 = Kind$Check$result$($7246, List$concat$($7242, $7247));
                                                        var $7245 = $7248;
                                                        break;
                                                };
                                                var $7243 = $7245;
                                                break;
                                            case 'Maybe.none':
                                                var $7249 = Kind$Check$result$(Maybe$none, $7242);
                                                var $7243 = $7249;
                                                break;
                                        };
                                        var self = $7243;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7250 = self.value;
                                        var $7251 = self.errors;
                                        var $7252 = Kind$Check$result$($7250, List$concat$($7237, $7251));
                                        var $7240 = $7252;
                                        break;
                                };
                                var $7238 = $7240;
                                break;
                            case 'Maybe.none':
                                var $7253 = Kind$Check$result$(Maybe$none, $7237);
                                var $7238 = $7253;
                                break;
                        };
                        var $7235 = $7238;
                        break;
                };
                var self = $7235;
                break;
            case 'Kind.Term.ann':
                var $7254 = self.done;
                var $7255 = self.term;
                var $7256 = self.type;
                var self = $7254;
                if (self) {
                    var $7258 = Kind$Check$result$(Maybe$some$($7256), List$nil);
                    var $7257 = $7258;
                } else {
                    var self = Kind$Term$check$($7255, Maybe$some$($7256), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                    switch (self._) {
                        case 'Kind.Check.result':
                            var $7260 = self.value;
                            var $7261 = self.errors;
                            var self = $7260;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $7263 = Kind$Check$result$(Maybe$none, $7261);
                                    var $7262 = $7263;
                                    break;
                                case 'Maybe.some':
                                    var self = Kind$Term$check$($7256, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7265 = self.value;
                                            var $7266 = self.errors;
                                            var self = $7265;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $7268 = Kind$Check$result$(Maybe$none, $7266);
                                                    var $7267 = $7268;
                                                    break;
                                                case 'Maybe.some':
                                                    var self = Kind$Check$result$(Maybe$some$($7256), List$nil);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $7270 = self.value;
                                                            var $7271 = self.errors;
                                                            var $7272 = Kind$Check$result$($7270, List$concat$($7266, $7271));
                                                            var $7269 = $7272;
                                                            break;
                                                    };
                                                    var $7267 = $7269;
                                                    break;
                                            };
                                            var self = $7267;
                                            break;
                                    };
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $7273 = self.value;
                                            var $7274 = self.errors;
                                            var $7275 = Kind$Check$result$($7273, List$concat$($7261, $7274));
                                            var $7264 = $7275;
                                            break;
                                    };
                                    var $7262 = $7264;
                                    break;
                            };
                            var $7259 = $7262;
                            break;
                    };
                    var $7257 = $7259;
                };
                var self = $7257;
                break;
            case 'Kind.Term.gol':
                var $7276 = self.name;
                var $7277 = self.dref;
                var $7278 = self.verb;
                var $7279 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$show_goal$($7276, $7277, $7278, _type$2, _ctx$4), List$nil));
                var self = $7279;
                break;
            case 'Kind.Term.cse':
                var $7280 = self.expr;
                var $7281 = self.name;
                var $7282 = self.with;
                var $7283 = self.cses;
                var $7284 = self.moti;
                var _expr$13 = $7280;
                var self = Kind$Term$check$(_expr$13, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $7286 = self.value;
                        var $7287 = self.errors;
                        var self = $7286;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7289 = self.value;
                                var self = Kind$Term$check$infer_with_types$($7282, _defs$3, _ctx$4, _path$5, _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7291 = self.value;
                                        var $7292 = self.errors;
                                        var self = $7291;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7294 = self.value;
                                                var _dsug$20 = Kind$Term$desugar_cse$($7280, $7281, $7294, $7283, $7284, $7289, _type$2, _defs$3, _ctx$4);
                                                var self = _dsug$20;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $7296 = self.value;
                                                        var $7297 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), $7296), List$nil));
                                                        var self = $7297;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $7298 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$cant_infer$(_orig$6, _term$1, _ctx$4), List$nil));
                                                        var self = $7298;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7299 = self.value;
                                                        var $7300 = self.errors;
                                                        var $7301 = Kind$Check$result$($7299, List$concat$($7292, $7300));
                                                        var $7295 = $7301;
                                                        break;
                                                };
                                                var $7293 = $7295;
                                                break;
                                            case 'Maybe.none':
                                                var $7302 = Kind$Check$result$(Maybe$none, $7292);
                                                var $7293 = $7302;
                                                break;
                                        };
                                        var self = $7293;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7303 = self.value;
                                        var $7304 = self.errors;
                                        var $7305 = Kind$Check$result$($7303, List$concat$($7287, $7304));
                                        var $7290 = $7305;
                                        break;
                                };
                                var $7288 = $7290;
                                break;
                            case 'Maybe.none':
                                var $7306 = Kind$Check$result$(Maybe$none, $7287);
                                var $7288 = $7306;
                                break;
                        };
                        var $7285 = $7288;
                        break;
                };
                var self = $7285;
                break;
            case 'Kind.Term.ori':
                var $7307 = self.orig;
                var $7308 = self.expr;
                var $7309 = Kind$Term$check$($7308, _type$2, _defs$3, _ctx$4, _path$5, Maybe$some$($7307));
                var self = $7309;
                break;
            case 'Kind.Term.typ':
                var $7310 = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);
                var self = $7310;
                break;
            case 'Kind.Term.hol':
                var $7311 = Kind$Check$result$(_type$2, List$nil);
                var self = $7311;
                break;
            case 'Kind.Term.nat':
                var $7312 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Nat")), List$nil);
                var self = $7312;
                break;
            case 'Kind.Term.chr':
                var $7313 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Char")), List$nil);
                var self = $7313;
                break;
            case 'Kind.Term.str':
                var $7314 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("String")), List$nil);
                var self = $7314;
                break;
        };
        switch (self._) {
            case 'Kind.Check.result':
                var $7315 = self.value;
                var $7316 = self.errors;
                var self = $7315;
                switch (self._) {
                    case 'Maybe.some':
                        var $7318 = self.value;
                        var self = _type$2;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7320 = self.value;
                                var self = Kind$Term$equal$go$($7320, $7318, _defs$3, (list_length(_ctx$4)), BitsSet$mut$new$(Unit$new));
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7322 = self.value;
                                        var $7323 = self.errors;
                                        var self = $7322;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $7325 = self.value;
                                                var self = $7325;
                                                if (self) {
                                                    var $7327 = Kind$Check$result$(Maybe$some$($7320), List$nil);
                                                    var self = $7327;
                                                } else {
                                                    var $7328 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, Either$right$($7320), Either$right$($7318), _ctx$4), List$nil));
                                                    var self = $7328;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7329 = self.value;
                                                        var $7330 = self.errors;
                                                        var $7331 = Kind$Check$result$($7329, List$concat$($7323, $7330));
                                                        var $7326 = $7331;
                                                        break;
                                                };
                                                var $7324 = $7326;
                                                break;
                                            case 'Maybe.none':
                                                var $7332 = Kind$Check$result$(Maybe$none, $7323);
                                                var $7324 = $7332;
                                                break;
                                        };
                                        var $7321 = $7324;
                                        break;
                                };
                                var self = $7321;
                                break;
                            case 'Maybe.none':
                                var $7333 = Kind$Check$result$(Maybe$some$($7318), List$nil);
                                var self = $7333;
                                break;
                        };
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $7334 = self.value;
                                var $7335 = self.errors;
                                var $7336 = Kind$Check$result$($7334, List$concat$($7316, $7335));
                                var $7319 = $7336;
                                break;
                        };
                        var $7317 = $7319;
                        break;
                    case 'Maybe.none':
                        var $7337 = Kind$Check$result$(Maybe$none, $7316);
                        var $7317 = $7337;
                        break;
                };
                var $7102 = $7317;
                break;
        };
        return $7102;
    };
    const Kind$Term$check = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$check$(x0, x1, x2, x3, x4, x5);

    function Kind$Path$nil$(_x$1) {
        var $7338 = _x$1;
        return $7338;
    };
    const Kind$Path$nil = x0 => Kind$Path$nil$(x0);
    const Kind$MPath$nil = Maybe$some$(Kind$Path$nil);

    function List$is_empty$(_list$2) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $7340 = Bool$true;
                var $7339 = $7340;
                break;
            case 'List.cons':
                var $7341 = Bool$false;
                var $7339 = $7341;
                break;
        };
        return $7339;
    };
    const List$is_empty = x0 => List$is_empty$(x0);

    function IO$set_file$(_name$1, _content$2) {
        var $7342 = IO$ask$("set_file", (_name$1 + ("=" + _content$2)), (_ok$3 => {
            var $7343 = IO$end$(Unit$new);
            return $7343;
        }));
        return $7342;
    };
    const IO$set_file = x0 => x1 => IO$set_file$(x0, x1);

    function Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4) {
        var Kind$Core$var_name$ = (_indx$1, _name$2, _brui$3, _vars$4) => ({
            ctr: 'TCO',
            arg: [_indx$1, _name$2, _brui$3, _vars$4]
        });
        var Kind$Core$var_name = _indx$1 => _name$2 => _brui$3 => _vars$4 => Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4);
        var arg = [_indx$1, _name$2, _brui$3, _vars$4];
        while (true) {
            let [_indx$1, _name$2, _brui$3, _vars$4] = arg;
            var R = (() => {
                var self = _indx$1;
                if (self === 0n) {
                    var self = _brui$3;
                    if (self === 0n) {
                        var $7345 = _name$2;
                        var $7344 = $7345;
                    } else {
                        var $7346 = (self - 1n);
                        var $7347 = (_name$2 + ("^" + Nat$show$(_brui$3)));
                        var $7344 = $7347;
                    };
                    return $7344;
                } else {
                    var $7348 = (self - 1n);
                    var self = _vars$4;
                    switch (self._) {
                        case 'List.cons':
                            var $7350 = self.head;
                            var $7351 = self.tail;
                            var self = (_name$2 === $7350);
                            if (self) {
                                var $7353 = Nat$succ$(_brui$3);
                                var _brui$8 = $7353;
                            } else {
                                var $7354 = _brui$3;
                                var _brui$8 = $7354;
                            };
                            var $7352 = Kind$Core$var_name$($7348, _name$2, _brui$8, $7351);
                            var $7349 = $7352;
                            break;
                        case 'List.nil':
                            var $7355 = "unbound";
                            var $7349 = $7355;
                            break;
                    };
                    return $7349;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$var_name = x0 => x1 => x2 => x3 => Kind$Core$var_name$(x0, x1, x2, x3);

    function Kind$Name$show$(_name$1) {
        var $7356 = _name$1;
        return $7356;
    };
    const Kind$Name$show = x0 => Kind$Name$show$(x0);

    function Bits$to_nat$(_b$1) {
        var self = _b$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $7358 = self.slice(0, -1);
                var $7359 = (2n * Bits$to_nat$($7358));
                var $7357 = $7359;
                break;
            case 'i':
                var $7360 = self.slice(0, -1);
                var $7361 = Nat$succ$((2n * Bits$to_nat$($7360)));
                var $7357 = $7361;
                break;
            case 'e':
                var $7362 = 0n;
                var $7357 = $7362;
                break;
        };
        return $7357;
    };
    const Bits$to_nat = x0 => Bits$to_nat$(x0);

    function U16$show_hex$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $7364 = u16_to_word(self);
                var $7365 = Nat$to_string_base$(16n, Bits$to_nat$(Word$to_bits$($7364)));
                var $7363 = $7365;
                break;
        };
        return $7363;
    };
    const U16$show_hex = x0 => U16$show_hex$(x0);

    function Kind$Code$escape$char$(_chr$1) {
        var self = (_chr$1 === Kind$Code$backslash);
        if (self) {
            var $7367 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
            var $7366 = $7367;
        } else {
            var self = (_chr$1 === 34);
            if (self) {
                var $7369 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
                var $7368 = $7369;
            } else {
                var self = (_chr$1 === 39);
                if (self) {
                    var $7371 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
                    var $7370 = $7371;
                } else {
                    var self = U16$btw$(32, _chr$1, 126);
                    if (self) {
                        var $7373 = String$cons$(_chr$1, String$nil);
                        var $7372 = $7373;
                    } else {
                        var $7374 = (String$cons$(Kind$Code$backslash, String$nil) + ("u{" + (U16$show_hex$(_chr$1) + "}")));
                        var $7372 = $7374;
                    };
                    var $7370 = $7372;
                };
                var $7368 = $7370;
            };
            var $7366 = $7368;
        };
        return $7366;
    };
    const Kind$Code$escape$char = x0 => Kind$Code$escape$char$(x0);

    function Kind$Code$escape$go$(_str$1, _result$2) {
        var Kind$Code$escape$go$ = (_str$1, _result$2) => ({
            ctr: 'TCO',
            arg: [_str$1, _result$2]
        });
        var Kind$Code$escape$go = _str$1 => _result$2 => Kind$Code$escape$go$(_str$1, _result$2);
        var arg = [_str$1, _result$2];
        while (true) {
            let [_str$1, _result$2] = arg;
            var R = (() => {
                var self = _str$1;
                if (self.length === 0) {
                    var $7375 = String$reverse$(_result$2);
                    return $7375;
                } else {
                    var $7376 = self.charCodeAt(0);
                    var $7377 = self.slice(1);
                    var $7378 = Kind$Code$escape$go$($7377, (String$reverse$(Kind$Code$escape$char$($7376)) + _result$2));
                    return $7378;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Code$escape$go = x0 => x1 => Kind$Code$escape$go$(x0, x1);

    function Kind$Code$escape$(_str$1) {
        var $7379 = Kind$Code$escape$go$(_str$1, "");
        return $7379;
    };
    const Kind$Code$escape = x0 => Kind$Code$escape$(x0);

    function Kind$Core$show$go$(_term$1, _indx$2, _vars$3) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $7381 = self.name;
                var $7382 = self.indx;
                var $7383 = Kind$Core$var_name$(Nat$pred$((_indx$2 - $7382 <= 0n ? 0n : _indx$2 - $7382)), $7381, 0n, _vars$3);
                var $7380 = $7383;
                break;
            case 'Kind.Term.ref':
                var $7384 = self.name;
                var $7385 = Kind$Name$show$($7384);
                var $7380 = $7385;
                break;
            case 'Kind.Term.all':
                var $7386 = self.eras;
                var $7387 = self.self;
                var $7388 = self.name;
                var $7389 = self.xtyp;
                var $7390 = self.body;
                var _eras$9 = $7386;
                var self = _eras$9;
                if (self) {
                    var $7392 = "%";
                    var _init$10 = $7392;
                } else {
                    var $7393 = "@";
                    var _init$10 = $7393;
                };
                var _self$11 = Kind$Name$show$($7387);
                var _name$12 = Kind$Name$show$($7388);
                var _xtyp$13 = Kind$Core$show$go$($7389, _indx$2, _vars$3);
                var _body$14 = Kind$Core$show$go$($7390(Kind$Term$var$($7387, _indx$2))(Kind$Term$var$($7388, Nat$succ$(_indx$2))), Nat$succ$(Nat$succ$(_indx$2)), List$cons$($7388, List$cons$($7387, _vars$3)));
                var $7391 = String$flatten$(List$cons$(_init$10, List$cons$(_self$11, List$cons$("(", List$cons$(_name$12, List$cons$(":", List$cons$(_xtyp$13, List$cons$(") ", List$cons$(_body$14, List$nil)))))))));
                var $7380 = $7391;
                break;
            case 'Kind.Term.lam':
                var $7394 = self.name;
                var $7395 = self.body;
                var _name$6 = Kind$Name$show$($7394);
                var _body$7 = Kind$Core$show$go$($7395(Kind$Term$var$($7394, _indx$2)), Nat$succ$(_indx$2), List$cons$($7394, _vars$3));
                var $7396 = String$flatten$(List$cons$("#", List$cons$(_name$6, List$cons$(" ", List$cons$(_body$7, List$nil)))));
                var $7380 = $7396;
                break;
            case 'Kind.Term.app':
                var $7397 = self.func;
                var $7398 = self.argm;
                var _func$6 = Kind$Core$show$go$($7397, _indx$2, _vars$3);
                var _argm$7 = Kind$Core$show$go$($7398, _indx$2, _vars$3);
                var $7399 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(" ", List$cons$(_argm$7, List$cons$(")", List$nil))))));
                var $7380 = $7399;
                break;
            case 'Kind.Term.let':
                var $7400 = self.name;
                var $7401 = self.expr;
                var $7402 = self.body;
                var _name$7 = Kind$Name$show$($7400);
                var _expr$8 = Kind$Core$show$go$($7401, _indx$2, _vars$3);
                var _body$9 = Kind$Core$show$go$($7402(Kind$Term$var$($7400, _indx$2)), Nat$succ$(_indx$2), List$cons$($7400, _vars$3));
                var $7403 = String$flatten$(List$cons$("!", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $7380 = $7403;
                break;
            case 'Kind.Term.def':
                var $7404 = self.name;
                var $7405 = self.expr;
                var $7406 = self.body;
                var _name$7 = Kind$Name$show$($7404);
                var _expr$8 = Kind$Core$show$go$($7405, _indx$2, _vars$3);
                var _body$9 = Kind$Core$show$go$($7406(Kind$Term$var$($7404, _indx$2)), Nat$succ$(_indx$2), List$cons$($7404, _vars$3));
                var $7407 = String$flatten$(List$cons$("$", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $7380 = $7407;
                break;
            case 'Kind.Term.ann':
                var $7408 = self.term;
                var $7409 = self.type;
                var _term$7 = Kind$Core$show$go$($7408, _indx$2, _vars$3);
                var _type$8 = Kind$Core$show$go$($7409, _indx$2, _vars$3);
                var $7410 = String$flatten$(List$cons$("{", List$cons$(_term$7, List$cons$(":", List$cons$(_type$8, List$cons$("}", List$nil))))));
                var $7380 = $7410;
                break;
            case 'Kind.Term.nat':
                var $7411 = self.natx;
                var $7412 = String$flatten$(List$cons$("+", List$cons$(Nat$show$($7411), List$nil)));
                var $7380 = $7412;
                break;
            case 'Kind.Term.chr':
                var $7413 = self.chrx;
                var $7414 = String$flatten$(List$cons$("\'", List$cons$(Kind$Code$escape$char$($7413), List$cons$("\'", List$nil))));
                var $7380 = $7414;
                break;
            case 'Kind.Term.str':
                var $7415 = self.strx;
                var $7416 = String$flatten$(List$cons$("\"", List$cons$(Kind$Code$escape$($7415), List$cons$("\"", List$nil))));
                var $7380 = $7416;
                break;
            case 'Kind.Term.ori':
                var $7417 = self.expr;
                var $7418 = Kind$Core$show$go$($7417, _indx$2, _vars$3);
                var $7380 = $7418;
                break;
            case 'Kind.Term.typ':
                var $7419 = "*";
                var $7380 = $7419;
                break;
            case 'Kind.Term.gol':
                var $7420 = "<GOL>";
                var $7380 = $7420;
                break;
            case 'Kind.Term.hol':
                var $7421 = "<HOL>";
                var $7380 = $7421;
                break;
            case 'Kind.Term.cse':
                var $7422 = "<CSE>";
                var $7380 = $7422;
                break;
        };
        return $7380;
    };
    const Kind$Core$show$go = x0 => x1 => x2 => Kind$Core$show$go$(x0, x1, x2);

    function Kind$Core$show$(_term$1) {
        var $7423 = Kind$Core$show$go$(_term$1, 0n, List$nil);
        return $7423;
    };
    const Kind$Core$show = x0 => Kind$Core$show$(x0);

    function Bool$show$(_b$1) {
        var self = _b$1;
        if (self) {
            var $7425 = "Bool.true";
            var $7424 = $7425;
        } else {
            var $7426 = "Bool.false";
            var $7424 = $7426;
        };
        return $7424;
    };
    const Bool$show = x0 => Bool$show$(x0);

    function Kind$Term$patch_at$(_path$1, _term$2, _fn$3) {
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.all':
                var $7428 = self.eras;
                var $7429 = self.self;
                var $7430 = self.name;
                var $7431 = self.xtyp;
                var $7432 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7434 = self.slice(0, -1);
                        var $7435 = Kind$Term$all$($7428, $7429, $7430, Kind$Term$patch_at$($7434, $7431, _fn$3), $7432);
                        var $7433 = $7435;
                        break;
                    case 'i':
                        var $7436 = self.slice(0, -1);
                        var $7437 = Kind$Term$all$($7428, $7429, $7430, $7431, (_s$10 => _x$11 => {
                            var $7438 = Kind$Term$patch_at$($7436, $7432(_s$10)(_x$11), _fn$3);
                            return $7438;
                        }));
                        var $7433 = $7437;
                        break;
                    case 'e':
                        var $7439 = _fn$3(_term$2);
                        var $7433 = $7439;
                        break;
                };
                var $7427 = $7433;
                break;
            case 'Kind.Term.lam':
                var $7440 = self.name;
                var $7441 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7443 = _fn$3(_term$2);
                        var $7442 = $7443;
                        break;
                    case 'o':
                    case 'i':
                        var $7444 = Kind$Term$lam$($7440, (_x$7 => {
                            var $7445 = Kind$Term$patch_at$(Bits$tail$(_path$1), $7441(_x$7), _fn$3);
                            return $7445;
                        }));
                        var $7442 = $7444;
                        break;
                };
                var $7427 = $7442;
                break;
            case 'Kind.Term.app':
                var $7446 = self.func;
                var $7447 = self.argm;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7449 = self.slice(0, -1);
                        var $7450 = Kind$Term$app$(Kind$Term$patch_at$($7449, $7446, _fn$3), $7447);
                        var $7448 = $7450;
                        break;
                    case 'i':
                        var $7451 = self.slice(0, -1);
                        var $7452 = Kind$Term$app$($7446, Kind$Term$patch_at$($7451, $7447, _fn$3));
                        var $7448 = $7452;
                        break;
                    case 'e':
                        var $7453 = _fn$3(_term$2);
                        var $7448 = $7453;
                        break;
                };
                var $7427 = $7448;
                break;
            case 'Kind.Term.let':
                var $7454 = self.name;
                var $7455 = self.expr;
                var $7456 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7458 = self.slice(0, -1);
                        var $7459 = Kind$Term$let$($7454, Kind$Term$patch_at$($7458, $7455, _fn$3), $7456);
                        var $7457 = $7459;
                        break;
                    case 'i':
                        var $7460 = self.slice(0, -1);
                        var $7461 = Kind$Term$let$($7454, $7455, (_x$8 => {
                            var $7462 = Kind$Term$patch_at$($7460, $7456(_x$8), _fn$3);
                            return $7462;
                        }));
                        var $7457 = $7461;
                        break;
                    case 'e':
                        var $7463 = _fn$3(_term$2);
                        var $7457 = $7463;
                        break;
                };
                var $7427 = $7457;
                break;
            case 'Kind.Term.def':
                var $7464 = self.name;
                var $7465 = self.expr;
                var $7466 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7468 = self.slice(0, -1);
                        var $7469 = Kind$Term$def$($7464, Kind$Term$patch_at$($7468, $7465, _fn$3), $7466);
                        var $7467 = $7469;
                        break;
                    case 'i':
                        var $7470 = self.slice(0, -1);
                        var $7471 = Kind$Term$def$($7464, $7465, (_x$8 => {
                            var $7472 = Kind$Term$patch_at$($7470, $7466(_x$8), _fn$3);
                            return $7472;
                        }));
                        var $7467 = $7471;
                        break;
                    case 'e':
                        var $7473 = _fn$3(_term$2);
                        var $7467 = $7473;
                        break;
                };
                var $7427 = $7467;
                break;
            case 'Kind.Term.ann':
                var $7474 = self.done;
                var $7475 = self.term;
                var $7476 = self.type;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $7478 = self.slice(0, -1);
                        var $7479 = Kind$Term$ann$($7474, Kind$Term$patch_at$($7478, $7475, _fn$3), $7476);
                        var $7477 = $7479;
                        break;
                    case 'i':
                        var $7480 = self.slice(0, -1);
                        var $7481 = Kind$Term$ann$($7474, $7475, Kind$Term$patch_at$($7480, $7476, _fn$3));
                        var $7477 = $7481;
                        break;
                    case 'e':
                        var $7482 = _fn$3(_term$2);
                        var $7477 = $7482;
                        break;
                };
                var $7427 = $7477;
                break;
            case 'Kind.Term.ori':
                var $7483 = self.orig;
                var $7484 = self.expr;
                var $7485 = Kind$Term$ori$($7483, Kind$Term$patch_at$(_path$1, $7484, _fn$3));
                var $7427 = $7485;
                break;
            case 'Kind.Term.var':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7487 = _fn$3(_term$2);
                        var $7486 = $7487;
                        break;
                    case 'o':
                    case 'i':
                        var $7488 = _term$2;
                        var $7486 = $7488;
                        break;
                };
                var $7427 = $7486;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7490 = _fn$3(_term$2);
                        var $7489 = $7490;
                        break;
                    case 'o':
                    case 'i':
                        var $7491 = _term$2;
                        var $7489 = $7491;
                        break;
                };
                var $7427 = $7489;
                break;
            case 'Kind.Term.typ':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7493 = _fn$3(_term$2);
                        var $7492 = $7493;
                        break;
                    case 'o':
                    case 'i':
                        var $7494 = _term$2;
                        var $7492 = $7494;
                        break;
                };
                var $7427 = $7492;
                break;
            case 'Kind.Term.gol':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7496 = _fn$3(_term$2);
                        var $7495 = $7496;
                        break;
                    case 'o':
                    case 'i':
                        var $7497 = _term$2;
                        var $7495 = $7497;
                        break;
                };
                var $7427 = $7495;
                break;
            case 'Kind.Term.cse':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7499 = _fn$3(_term$2);
                        var $7498 = $7499;
                        break;
                    case 'o':
                    case 'i':
                        var $7500 = _term$2;
                        var $7498 = $7500;
                        break;
                };
                var $7427 = $7498;
                break;
        };
        return $7427;
    };
    const Kind$Term$patch_at = x0 => x1 => x2 => Kind$Term$patch_at$(x0, x1, x2);

    function Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, _errs$10, _fixd$11) {
        var self = _errs$10;
        switch (self._) {
            case 'List.cons':
                var $7502 = self.head;
                var $7503 = self.tail;
                var self = $7502;
                switch (self._) {
                    case 'Kind.Error.waiting':
                        var $7505 = self.name;
                        var $7506 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                            var $7507 = _m$bind$15;
                            return $7507;
                        }))(Kind$Synth$one$($7505, _defs$9))((_new_defs$15 => {
                            var self = _new_defs$15;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $7509 = self.value;
                                    var $7510 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $7509, $7503, Bool$true);
                                    var $7508 = $7510;
                                    break;
                                case 'Maybe.none':
                                    var $7511 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $7503, _fixd$11);
                                    var $7508 = $7511;
                                    break;
                            };
                            return $7508;
                        }));
                        var $7504 = $7506;
                        break;
                    case 'Kind.Error.patch':
                        var $7512 = self.path;
                        var $7513 = self.term;
                        var self = $7512;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'o':
                                var $7515 = self.slice(0, -1);
                                var _term$17 = Kind$Term$patch_at$($7515, _term$5, (_x$17 => {
                                    var $7517 = $7513;
                                    return $7517;
                                }));
                                var $7516 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$17, _type$6, _isct$7, _arit$8, _defs$9, $7503, Bool$true);
                                var $7514 = $7516;
                                break;
                            case 'i':
                                var $7518 = self.slice(0, -1);
                                var _type$17 = Kind$Term$patch_at$($7518, _type$6, (_x$17 => {
                                    var $7520 = $7513;
                                    return $7520;
                                }));
                                var $7519 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$17, _isct$7, _arit$8, _defs$9, $7503, Bool$true);
                                var $7514 = $7519;
                                break;
                            case 'e':
                                var $7521 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                    var $7522 = _m$pure$17;
                                    return $7522;
                                }))(Maybe$none);
                                var $7514 = $7521;
                                break;
                        };
                        var $7504 = $7514;
                        break;
                    case 'Kind.Error.undefined_reference':
                        var $7523 = self.name;
                        var $7524 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                            var $7525 = _m$bind$16;
                            return $7525;
                        }))(Kind$Synth$one$($7523, _defs$9))((_new_defs$16 => {
                            var self = _new_defs$16;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $7527 = self.value;
                                    var $7528 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $7527, $7503, Bool$true);
                                    var $7526 = $7528;
                                    break;
                                case 'Maybe.none':
                                    var $7529 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $7503, _fixd$11);
                                    var $7526 = $7529;
                                    break;
                            };
                            return $7526;
                        }));
                        var $7504 = $7524;
                        break;
                    case 'Kind.Error.type_mismatch':
                    case 'Kind.Error.show_goal':
                    case 'Kind.Error.indirect':
                    case 'Kind.Error.cant_infer':
                        var $7530 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $7503, _fixd$11);
                        var $7504 = $7530;
                        break;
                };
                var $7501 = $7504;
                break;
            case 'List.nil':
                var self = _fixd$11;
                if (self) {
                    var _type$12 = Kind$Term$bind$(List$nil, (_x$12 => {
                        var $7533 = (_x$12 + '1');
                        return $7533;
                    }), _type$6);
                    var _term$13 = Kind$Term$bind$(List$nil, (_x$13 => {
                        var $7534 = (_x$13 + '0');
                        return $7534;
                    }), _term$5);
                    var _defs$14 = Kind$Map$set$(_name$4, Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$13, _type$12, _isct$7, _arit$8, Kind$Status$init), _defs$9);
                    var $7532 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                        var $7535 = _m$pure$16;
                        return $7535;
                    }))(Maybe$some$(_defs$14));
                    var $7531 = $7532;
                } else {
                    var $7536 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                        var $7537 = _m$pure$13;
                        return $7537;
                    }))(Maybe$none);
                    var $7531 = $7536;
                };
                var $7501 = $7531;
                break;
        };
        return $7501;
    };
    const Kind$Synth$fix = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => x10 => Kind$Synth$fix$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);

    function Kind$Status$fail$(_errors$1) {
        var $7538 = ({
            _: 'Kind.Status.fail',
            'errors': _errors$1
        });
        return $7538;
    };
    const Kind$Status$fail = x0 => Kind$Status$fail$(x0);

    function Kind$Synth$one$(_name$1, _defs$2) {
        var self = Kind$Map$get$(_name$1, _defs$2);
        switch (self._) {
            case 'Maybe.some':
                var $7540 = self.value;
                var self = $7540;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $7542 = self.file;
                        var $7543 = self.code;
                        var $7544 = self.orig;
                        var $7545 = self.name;
                        var $7546 = self.term;
                        var $7547 = self.type;
                        var $7548 = self.isct;
                        var $7549 = self.arit;
                        var $7550 = self.stat;
                        var _file$13 = $7542;
                        var _code$14 = $7543;
                        var _orig$15 = $7544;
                        var _name$16 = $7545;
                        var _term$17 = $7546;
                        var _type$18 = $7547;
                        var _isct$19 = $7548;
                        var _arit$20 = $7549;
                        var _stat$21 = $7550;
                        var self = _stat$21;
                        switch (self._) {
                            case 'Kind.Status.init':
                                var _defs$22 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Kind$Status$wait), _defs$2);
                                var self = Kind$Term$check$(_type$18, Maybe$some$(Kind$Term$typ), _defs$22, List$nil, Kind$MPath$i$(Kind$MPath$nil), Maybe$none);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7553 = self.value;
                                        var $7554 = self.errors;
                                        var self = $7553;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7556 = Kind$Check$result$(Maybe$none, $7554);
                                                var $7555 = $7556;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Term$check$(_term$17, Maybe$some$(_type$18), _defs$22, List$nil, Kind$MPath$o$(Kind$MPath$nil), Maybe$none);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7558 = self.value;
                                                        var $7559 = self.errors;
                                                        var self = $7558;
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var $7561 = Kind$Check$result$(Maybe$none, $7559);
                                                                var $7560 = $7561;
                                                                break;
                                                            case 'Maybe.some':
                                                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                                                switch (self._) {
                                                                    case 'Kind.Check.result':
                                                                        var $7563 = self.value;
                                                                        var $7564 = self.errors;
                                                                        var $7565 = Kind$Check$result$($7563, List$concat$($7559, $7564));
                                                                        var $7562 = $7565;
                                                                        break;
                                                                };
                                                                var $7560 = $7562;
                                                                break;
                                                        };
                                                        var self = $7560;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $7566 = self.value;
                                                        var $7567 = self.errors;
                                                        var $7568 = Kind$Check$result$($7566, List$concat$($7554, $7567));
                                                        var $7557 = $7568;
                                                        break;
                                                };
                                                var $7555 = $7557;
                                                break;
                                        };
                                        var _checked$23 = $7555;
                                        break;
                                };
                                var self = _checked$23;
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $7569 = self.errors;
                                        var self = List$is_empty$($7569);
                                        if (self) {
                                            var _defs$26 = Kind$Map$def$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Bool$true, _defs$22);
                                            var $7571 = IO$monad$((_m$bind$27 => _m$pure$28 => {
                                                var $7572 = _m$bind$27;
                                                return $7572;
                                            }))(IO$get_file_mtime$(_file$13))((_time$27 => {
                                                var $7573 = IO$monad$((_m$bind$28 => _m$pure$29 => {
                                                    var $7574 = _m$bind$28;
                                                    return $7574;
                                                }))(IO$set_file$((".cache/" + (_name$16 + ".term")), Kind$Core$show$(_term$17)))((_$28 => {
                                                    var $7575 = IO$monad$((_m$bind$29 => _m$pure$30 => {
                                                        var $7576 = _m$bind$29;
                                                        return $7576;
                                                    }))(IO$set_file$((".cache/" + (_name$16 + ".type")), Kind$Core$show$(_type$18)))((_$29 => {
                                                        var $7577 = IO$monad$((_m$bind$30 => _m$pure$31 => {
                                                            var $7578 = _m$bind$30;
                                                            return $7578;
                                                        }))(IO$set_file$((".cache/" + (_name$16 + ".isct")), Bool$show$(_isct$19)))((_$30 => {
                                                            var $7579 = IO$monad$((_m$bind$31 => _m$pure$32 => {
                                                                var $7580 = _m$bind$31;
                                                                return $7580;
                                                            }))(IO$set_file$((".cache/" + (_name$16 + ".arit")), Nat$show$(_arit$20)))((_$31 => {
                                                                var $7581 = IO$monad$((_m$bind$32 => _m$pure$33 => {
                                                                    var $7582 = _m$bind$32;
                                                                    return $7582;
                                                                }))(IO$set_file$((".cache/" + (_name$16 + ".time")), _time$27))((_$32 => {
                                                                    var $7583 = IO$monad$((_m$bind$33 => _m$pure$34 => {
                                                                        var $7584 = _m$bind$33;
                                                                        return $7584;
                                                                    }))(IO$set_file$((".cache/" + (_name$16 + ".file")), _file$13))((_$33 => {
                                                                        var $7585 = IO$monad$((_m$bind$34 => _m$pure$35 => {
                                                                            var $7586 = _m$pure$35;
                                                                            return $7586;
                                                                        }))(Maybe$some$(_defs$26));
                                                                        return $7585;
                                                                    }));
                                                                    return $7583;
                                                                }));
                                                                return $7581;
                                                            }));
                                                            return $7579;
                                                        }));
                                                        return $7577;
                                                    }));
                                                    return $7575;
                                                }));
                                                return $7573;
                                            }));
                                            var $7570 = $7571;
                                        } else {
                                            var $7587 = IO$monad$((_m$bind$26 => _m$pure$27 => {
                                                var $7588 = _m$bind$26;
                                                return $7588;
                                            }))(Kind$Synth$fix$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _defs$22, $7569, Bool$false))((_fixed$26 => {
                                                var self = _fixed$26;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $7590 = self.value;
                                                        var $7591 = Kind$Synth$one$(_name$16, $7590);
                                                        var $7589 = $7591;
                                                        break;
                                                    case 'Maybe.none':
                                                        var _stat$27 = Kind$Status$fail$($7569);
                                                        var _defs$28 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _stat$27), _defs$22);
                                                        var $7592 = IO$monad$((_m$bind$29 => _m$pure$30 => {
                                                            var $7593 = _m$pure$30;
                                                            return $7593;
                                                        }))(Maybe$some$(_defs$28));
                                                        var $7589 = $7592;
                                                        break;
                                                };
                                                return $7589;
                                            }));
                                            var $7570 = $7587;
                                        };
                                        var $7552 = $7570;
                                        break;
                                };
                                var $7551 = $7552;
                                break;
                            case 'Kind.Status.wait':
                            case 'Kind.Status.done':
                                var $7594 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                    var $7595 = _m$pure$23;
                                    return $7595;
                                }))(Maybe$some$(_defs$2));
                                var $7551 = $7594;
                                break;
                            case 'Kind.Status.fail':
                                var $7596 = IO$monad$((_m$bind$23 => _m$pure$24 => {
                                    var $7597 = _m$pure$24;
                                    return $7597;
                                }))(Maybe$some$(_defs$2));
                                var $7551 = $7596;
                                break;
                        };
                        var $7541 = $7551;
                        break;
                };
                var $7539 = $7541;
                break;
            case 'Maybe.none':
                var $7598 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $7599 = _m$bind$3;
                    return $7599;
                }))(IO$get_time)((_time_a$3 => {
                    var $7600 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $7601 = _m$bind$4;
                        return $7601;
                    }))(Kind$Synth$load$(_name$1, _defs$2))((_loaded$4 => {
                        var self = _loaded$4;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7603 = self.value;
                                var $7604 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $7605 = _m$bind$6;
                                    return $7605;
                                }))(IO$get_time)((_time_b$6 => {
                                    var $7606 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                                        var $7607 = _m$bind$7;
                                        return $7607;
                                    }))(Kind$Synth$one$(_name$1, $7603))((_result$7 => {
                                        var $7608 = IO$monad$((_m$bind$8 => _m$pure$9 => {
                                            var $7609 = _m$bind$8;
                                            return $7609;
                                        }))(IO$get_time)((_time_c$8 => {
                                            var $7610 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                                var $7611 = _m$pure$10;
                                                return $7611;
                                            }))(_result$7);
                                            return $7610;
                                        }));
                                        return $7608;
                                    }));
                                    return $7606;
                                }));
                                var $7602 = $7604;
                                break;
                            case 'Maybe.none':
                                var $7612 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                                    var $7613 = _m$pure$6;
                                    return $7613;
                                }))(Maybe$none);
                                var $7602 = $7612;
                                break;
                        };
                        return $7602;
                    }));
                    return $7600;
                }));
                var $7539 = $7598;
                break;
        };
        return $7539;
    };
    const Kind$Synth$one = x0 => x1 => Kind$Synth$one$(x0, x1);

    function BitsMap$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $7615 = self.head;
                var $7616 = self.tail;
                var self = $7615;
                switch (self._) {
                    case 'Pair.new':
                        var $7618 = self.fst;
                        var $7619 = self.snd;
                        var $7620 = BitsMap$set$($7618, $7619, BitsMap$from_list$($7616));
                        var $7617 = $7620;
                        break;
                };
                var $7614 = $7617;
                break;
            case 'List.nil':
                var $7621 = BitsMap$new;
                var $7614 = $7621;
                break;
        };
        return $7614;
    };
    const BitsMap$from_list = x0 => BitsMap$from_list$(x0);
    const Kind$Term$inline$names = (() => {
        var _inl$1 = List$cons$("Monad.pure", List$cons$("Monad.bind", List$cons$("Monad.new", List$cons$("Parser.monad", List$cons$("Parser.bind", List$cons$("Parser.pure", List$cons$("Kind.Check.pure", List$cons$("Kind.Check.bind", List$cons$("Kind.Check.monad", List$cons$("Kind.Check.value", List$cons$("Kind.Check.none", List$nil)))))))))));
        var _kvs$2 = List$mapped$(_inl$1, (_x$2 => {
            var $7623 = Pair$new$((kind_name_to_bits(_x$2)), Unit$new);
            return $7623;
        }));
        var $7622 = BitsMap$from_list$(_kvs$2);
        return $7622;
    })();

    function Kind$Term$inline$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $7625 = self.name;
                var _inli$4 = BitsSet$has$((kind_name_to_bits($7625)), Kind$Term$inline$names);
                var self = _inli$4;
                if (self) {
                    var self = Kind$Map$get$($7625, _defs$2);
                    switch (self._) {
                        case 'Maybe.some':
                            var $7628 = self.value;
                            var self = $7628;
                            switch (self._) {
                                case 'Kind.Def.new':
                                    var $7630 = self.term;
                                    var $7631 = Kind$Term$inline$reduce$($7630, _defs$2);
                                    var $7629 = $7631;
                                    break;
                            };
                            var $7627 = $7629;
                            break;
                        case 'Maybe.none':
                            var $7632 = Kind$Term$ref$($7625);
                            var $7627 = $7632;
                            break;
                    };
                    var $7626 = $7627;
                } else {
                    var $7633 = _term$1;
                    var $7626 = $7633;
                };
                var $7624 = $7626;
                break;
            case 'Kind.Term.app':
                var $7634 = self.func;
                var $7635 = self.argm;
                var _func$5 = Kind$Term$inline$reduce$($7634, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Kind.Term.lam':
                        var $7637 = self.body;
                        var $7638 = Kind$Term$inline$reduce$($7637($7635), _defs$2);
                        var $7636 = $7638;
                        break;
                    case 'Kind.Term.let':
                        var $7639 = self.name;
                        var $7640 = self.expr;
                        var $7641 = self.body;
                        var $7642 = Kind$Term$let$($7639, $7640, (_x$9 => {
                            var $7643 = Kind$Term$inline$reduce$(Kind$Term$app$($7641(_x$9), $7635), _defs$2);
                            return $7643;
                        }));
                        var $7636 = $7642;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.app':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $7644 = _term$1;
                        var $7636 = $7644;
                        break;
                };
                var $7624 = $7636;
                break;
            case 'Kind.Term.ori':
                var $7645 = self.expr;
                var $7646 = Kind$Term$inline$reduce$($7645, _defs$2);
                var $7624 = $7646;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
                var $7647 = _term$1;
                var $7624 = $7647;
                break;
        };
        return $7624;
    };
    const Kind$Term$inline$reduce = x0 => x1 => Kind$Term$inline$reduce$(x0, x1);

    function Kind$Term$inline$(_term$1, _defs$2) {
        var self = Kind$Term$inline$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Kind.Term.var':
                var $7649 = self.name;
                var $7650 = self.indx;
                var $7651 = Kind$Term$var$($7649, $7650);
                var $7648 = $7651;
                break;
            case 'Kind.Term.ref':
                var $7652 = self.name;
                var $7653 = Kind$Term$ref$($7652);
                var $7648 = $7653;
                break;
            case 'Kind.Term.all':
                var $7654 = self.eras;
                var $7655 = self.self;
                var $7656 = self.name;
                var $7657 = self.xtyp;
                var $7658 = self.body;
                var $7659 = Kind$Term$all$($7654, $7655, $7656, Kind$Term$inline$($7657, _defs$2), (_s$8 => _x$9 => {
                    var $7660 = Kind$Term$inline$($7658(_s$8)(_x$9), _defs$2);
                    return $7660;
                }));
                var $7648 = $7659;
                break;
            case 'Kind.Term.lam':
                var $7661 = self.name;
                var $7662 = self.body;
                var $7663 = Kind$Term$lam$($7661, (_x$5 => {
                    var $7664 = Kind$Term$inline$($7662(_x$5), _defs$2);
                    return $7664;
                }));
                var $7648 = $7663;
                break;
            case 'Kind.Term.app':
                var $7665 = self.func;
                var $7666 = self.argm;
                var $7667 = Kind$Term$app$(Kind$Term$inline$($7665, _defs$2), Kind$Term$inline$($7666, _defs$2));
                var $7648 = $7667;
                break;
            case 'Kind.Term.let':
                var $7668 = self.name;
                var $7669 = self.expr;
                var $7670 = self.body;
                var $7671 = Kind$Term$let$($7668, Kind$Term$inline$($7669, _defs$2), (_x$6 => {
                    var $7672 = Kind$Term$inline$($7670(_x$6), _defs$2);
                    return $7672;
                }));
                var $7648 = $7671;
                break;
            case 'Kind.Term.def':
                var $7673 = self.name;
                var $7674 = self.expr;
                var $7675 = self.body;
                var $7676 = Kind$Term$def$($7673, Kind$Term$inline$($7674, _defs$2), (_x$6 => {
                    var $7677 = Kind$Term$inline$($7675(_x$6), _defs$2);
                    return $7677;
                }));
                var $7648 = $7676;
                break;
            case 'Kind.Term.ann':
                var $7678 = self.done;
                var $7679 = self.term;
                var $7680 = self.type;
                var $7681 = Kind$Term$ann$($7678, Kind$Term$inline$($7679, _defs$2), Kind$Term$inline$($7680, _defs$2));
                var $7648 = $7681;
                break;
            case 'Kind.Term.gol':
                var $7682 = self.name;
                var $7683 = self.dref;
                var $7684 = self.verb;
                var $7685 = Kind$Term$gol$($7682, $7683, $7684);
                var $7648 = $7685;
                break;
            case 'Kind.Term.hol':
                var $7686 = self.path;
                var $7687 = Kind$Term$hol$($7686);
                var $7648 = $7687;
                break;
            case 'Kind.Term.nat':
                var $7688 = self.natx;
                var $7689 = Kind$Term$nat$($7688);
                var $7648 = $7689;
                break;
            case 'Kind.Term.chr':
                var $7690 = self.chrx;
                var $7691 = Kind$Term$chr$($7690);
                var $7648 = $7691;
                break;
            case 'Kind.Term.str':
                var $7692 = self.strx;
                var $7693 = Kind$Term$str$($7692);
                var $7648 = $7693;
                break;
            case 'Kind.Term.ori':
                var $7694 = self.expr;
                var $7695 = Kind$Term$inline$($7694, _defs$2);
                var $7648 = $7695;
                break;
            case 'Kind.Term.typ':
                var $7696 = Kind$Term$typ;
                var $7648 = $7696;
                break;
            case 'Kind.Term.cse':
                var $7697 = _term$1;
                var $7648 = $7697;
                break;
        };
        return $7648;
    };
    const Kind$Term$inline = x0 => x1 => Kind$Term$inline$(x0, x1);

    function BitsMap$values$go$(_xs$2, _list$3) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $7699 = self.val;
                var $7700 = self.lft;
                var $7701 = self.rgt;
                var self = $7699;
                switch (self._) {
                    case 'Maybe.some':
                        var $7703 = self.value;
                        var $7704 = List$cons$($7703, _list$3);
                        var _list0$7 = $7704;
                        break;
                    case 'Maybe.none':
                        var $7705 = _list$3;
                        var _list0$7 = $7705;
                        break;
                };
                var _list1$8 = BitsMap$values$go$($7700, _list0$7);
                var _list2$9 = BitsMap$values$go$($7701, _list1$8);
                var $7702 = _list2$9;
                var $7698 = $7702;
                break;
            case 'BitsMap.new':
                var $7706 = _list$3;
                var $7698 = $7706;
                break;
        };
        return $7698;
    };
    const BitsMap$values$go = x0 => x1 => BitsMap$values$go$(x0, x1);

    function BitsMap$values$(_xs$2) {
        var $7707 = BitsMap$values$go$(_xs$2, List$nil);
        return $7707;
    };
    const BitsMap$values = x0 => BitsMap$values$(x0);

    function Kind$Defs$core$(_defs$1) {
        var _result$2 = "";
        var _result$3 = (() => {
            var $7710 = _result$2;
            var $7711 = BitsMap$values$(_defs$1);
            let _result$4 = $7710;
            let _defn$3;
            while ($7711._ === 'List.cons') {
                _defn$3 = $7711.head;
                var self = _defn$3;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $7712 = self.name;
                        var $7713 = self.term;
                        var $7714 = self.type;
                        var $7715 = self.stat;
                        var self = $7715;
                        switch (self._) {
                            case 'Kind.Status.init':
                            case 'Kind.Status.wait':
                            case 'Kind.Status.fail':
                                var $7717 = _result$4;
                                var $7716 = $7717;
                                break;
                            case 'Kind.Status.done':
                                var _name$14 = $7712;
                                var _term$15 = Kind$Core$show$($7713);
                                var _type$16 = Kind$Core$show$($7714);
                                var $7718 = String$flatten$(List$cons$(_result$4, List$cons$(_name$14, List$cons$(" : ", List$cons$(_type$16, List$cons$(" = ", List$cons$(_term$15, List$cons$(";\u{a}", List$nil))))))));
                                var $7716 = $7718;
                                break;
                        };
                        var $7710 = $7716;
                        break;
                };
                _result$4 = $7710;
                $7711 = $7711.tail;
            }
            return _result$4;
        })();
        var $7708 = _result$3;
        return $7708;
    };
    const Kind$Defs$core = x0 => Kind$Defs$core$(x0);

    function Kind$api$io$term_to_core$(_name$1) {
        var $7719 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7720 = _m$bind$2;
            return $7720;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.some':
                    var $7722 = self.value;
                    var $7723 = $7722;
                    var _defs$3 = $7723;
                    break;
                case 'Maybe.none':
                    var $7724 = Kind$Map$new;
                    var _defs$3 = $7724;
                    break;
            };
            var _defs$4 = BitsMap$map$((_defn$4 => {
                var self = _defn$4;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $7726 = self.file;
                        var $7727 = self.code;
                        var $7728 = self.orig;
                        var $7729 = self.name;
                        var $7730 = self.term;
                        var $7731 = self.type;
                        var $7732 = self.isct;
                        var $7733 = self.arit;
                        var $7734 = self.stat;
                        var _term$14 = Kind$Term$inline$($7730, _defs$3);
                        var _type$15 = Kind$Term$inline$($7731, _defs$3);
                        var $7735 = Kind$Def$new$($7726, $7727, $7728, $7729, _term$14, _type$15, $7732, $7733, $7734);
                        var $7725 = $7735;
                        break;
                };
                return $7725;
            }), _defs$3);
            var $7721 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                var $7736 = _m$pure$6;
                return $7736;
            }))(Kind$Defs$core$(_defs$4));
            return $7721;
        }));
        return $7719;
    };
    const Kind$api$io$term_to_core = x0 => Kind$api$io$term_to_core$(x0);

    function BitsMap$keys$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $7738 = self.val;
                var $7739 = self.lft;
                var $7740 = self.rgt;
                var self = $7738;
                switch (self._) {
                    case 'Maybe.none':
                        var $7742 = _list$4;
                        var _list0$8 = $7742;
                        break;
                    case 'Maybe.some':
                        var $7743 = List$cons$(Bits$reverse$(_key$3), _list$4);
                        var _list0$8 = $7743;
                        break;
                };
                var _list1$9 = BitsMap$keys$go$($7739, (_key$3 + '0'), _list0$8);
                var _list2$10 = BitsMap$keys$go$($7740, (_key$3 + '1'), _list1$9);
                var $7741 = _list2$10;
                var $7737 = $7741;
                break;
            case 'BitsMap.new':
                var $7744 = _list$4;
                var $7737 = $7744;
                break;
        };
        return $7737;
    };
    const BitsMap$keys$go = x0 => x1 => x2 => BitsMap$keys$go$(x0, x1, x2);

    function BitsMap$keys$(_xs$2) {
        var $7745 = List$reverse$(BitsMap$keys$go$(_xs$2, Bits$e, List$nil));
        return $7745;
    };
    const BitsMap$keys = x0 => BitsMap$keys$(x0);

    function Kind$Synth$many$(_names$1, _defs$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $7747 = self.head;
                var $7748 = self.tail;
                var $7749 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $7750 = _m$bind$5;
                    return $7750;
                }))(Kind$Synth$one$($7747, _defs$2))((_new_defs$5 => {
                    var self = _new_defs$5;
                    switch (self._) {
                        case 'Maybe.some':
                            var $7752 = self.value;
                            var $7753 = Kind$Synth$many$($7748, $7752);
                            var $7751 = $7753;
                            break;
                        case 'Maybe.none':
                            var $7754 = Kind$Synth$many$($7748, _defs$2);
                            var $7751 = $7754;
                            break;
                    };
                    return $7751;
                }));
                var $7746 = $7749;
                break;
            case 'List.nil':
                var $7755 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $7756 = _m$pure$4;
                    return $7756;
                }))(_defs$2);
                var $7746 = $7755;
                break;
        };
        return $7746;
    };
    const Kind$Synth$many = x0 => x1 => Kind$Synth$many$(x0, x1);

    function Kind$Synth$file$(_file$1, _defs$2) {
        var $7757 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $7758 = _m$bind$3;
            return $7758;
        }))(IO$get_file$(_file$1))((_code$3 => {
            var _read$4 = Kind$Defs$read$(_file$1, _code$3, _defs$2);
            var self = _read$4;
            switch (self._) {
                case 'Either.left':
                    var $7760 = self.value;
                    var $7761 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                        var $7762 = _m$pure$7;
                        return $7762;
                    }))(Either$left$($7760));
                    var $7759 = $7761;
                    break;
                case 'Either.right':
                    var $7763 = self.value;
                    var _file_defs$6 = $7763;
                    var _file_keys$7 = BitsMap$keys$(_file_defs$6);
                    var _file_nams$8 = List$mapped$(_file_keys$7, Kind$Name$from_bits);
                    var $7764 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                        var $7765 = _m$bind$9;
                        return $7765;
                    }))(Kind$Synth$many$(_file_nams$8, _file_defs$6))((_defs$9 => {
                        var $7766 = IO$monad$((_m$bind$10 => _m$pure$11 => {
                            var $7767 = _m$pure$11;
                            return $7767;
                        }))(Either$right$(Pair$new$(_file_nams$8, _defs$9)));
                        return $7766;
                    }));
                    var $7759 = $7764;
                    break;
            };
            return $7759;
        }));
        return $7757;
    };
    const Kind$Synth$file = x0 => x1 => Kind$Synth$file$(x0, x1);

    function IO$put_string$(_text$1) {
        var $7768 = IO$ask$("put_string", _text$1, (_skip$2 => {
            var $7769 = IO$end$(Unit$new);
            return $7769;
        }));
        return $7768;
    };
    const IO$put_string = x0 => IO$put_string$(x0);

    function IO$print$(_text$1) {
        var $7770 = IO$put_string$((_text$1 + "\u{a}"));
        return $7770;
    };
    const IO$print = x0 => IO$print$(x0);

    function Kind$Term$show$as_nat$go$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $7772 = self.name;
                var self = ($7772 === "Nat.zero");
                if (self) {
                    var $7774 = Maybe$some$(0n);
                    var $7773 = $7774;
                } else {
                    var $7775 = Maybe$none;
                    var $7773 = $7775;
                };
                var $7771 = $7773;
                break;
            case 'Kind.Term.app':
                var $7776 = self.func;
                var $7777 = self.argm;
                var self = $7776;
                switch (self._) {
                    case 'Kind.Term.ref':
                        var $7779 = self.name;
                        var self = ($7779 === "Nat.succ");
                        if (self) {
                            var $7781 = Maybe$monad$((_m$bind$5 => _m$pure$6 => {
                                var $7782 = _m$bind$5;
                                return $7782;
                            }))(Kind$Term$show$as_nat$go$($7777))((_pred$5 => {
                                var $7783 = Maybe$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $7784 = _m$pure$7;
                                    return $7784;
                                }))(Nat$succ$(_pred$5));
                                return $7783;
                            }));
                            var $7780 = $7781;
                        } else {
                            var $7785 = Maybe$none;
                            var $7780 = $7785;
                        };
                        var $7778 = $7780;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $7786 = Maybe$none;
                        var $7778 = $7786;
                        break;
                };
                var $7771 = $7778;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $7787 = Maybe$none;
                var $7771 = $7787;
                break;
        };
        return $7771;
    };
    const Kind$Term$show$as_nat$go = x0 => Kind$Term$show$as_nat$go$(x0);

    function Kind$Term$show$as_nat$(_term$1) {
        var $7788 = Maybe$mapped$(Kind$Term$show$as_nat$go$(_term$1), Nat$show);
        return $7788;
    };
    const Kind$Term$show$as_nat = x0 => Kind$Term$show$as_nat$(x0);

    function Kind$Term$show$is_ref$(_term$1, _name$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $7790 = self.name;
                var $7791 = (_name$2 === $7790);
                var $7789 = $7791;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $7792 = Bool$false;
                var $7789 = $7792;
                break;
        };
        return $7789;
    };
    const Kind$Term$show$is_ref = x0 => x1 => Kind$Term$show$is_ref$(x0, x1);

    function Kind$Term$show$app$done$(_term$1, _path$2, _args$3) {
        var _arity$4 = (list_length(_args$3));
        var self = (Kind$Term$show$is_ref$(_term$1, "Equal") && (_arity$4 === 3n));
        if (self) {
            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);
            var _eq_lft$6 = Maybe$default$(List$at$(1n, _args$3), "?");
            var _eq_rgt$7 = Maybe$default$(List$at$(2n, _args$3), "?");
            var $7794 = String$flatten$(List$cons$(_eq_lft$6, List$cons$(" == ", List$cons$(_eq_rgt$7, List$nil))));
            var $7793 = $7794;
        } else {
            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);
            var self = _func$5;
            if (self.length === 0) {
                var $7796 = Bool$false;
                var _wrap$6 = $7796;
            } else {
                var $7797 = self.charCodeAt(0);
                var $7798 = self.slice(1);
                var $7799 = ($7797 === 40);
                var _wrap$6 = $7799;
            };
            var _args$7 = String$join$(",", _args$3);
            var self = _wrap$6;
            if (self) {
                var $7800 = String$flatten$(List$cons$("(", List$cons$(_func$5, List$cons$(")", List$nil))));
                var _func$8 = $7800;
            } else {
                var $7801 = _func$5;
                var _func$8 = $7801;
            };
            var $7795 = String$flatten$(List$cons$(_func$8, List$cons$("(", List$cons$(_args$7, List$cons$(")", List$nil)))));
            var $7793 = $7795;
        };
        return $7793;
    };
    const Kind$Term$show$app$done = x0 => x1 => x2 => Kind$Term$show$app$done$(x0, x1, x2);

    function Kind$Term$show$app$(_term$1, _path$2, _args$3) {
        var Kind$Term$show$app$ = (_term$1, _path$2, _args$3) => ({
            ctr: 'TCO',
            arg: [_term$1, _path$2, _args$3]
        });
        var Kind$Term$show$app = _term$1 => _path$2 => _args$3 => Kind$Term$show$app$(_term$1, _path$2, _args$3);
        var arg = [_term$1, _path$2, _args$3];
        while (true) {
            let [_term$1, _path$2, _args$3] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.app':
                        var $7802 = self.func;
                        var $7803 = self.argm;
                        var $7804 = Kind$Term$show$app$($7802, Kind$MPath$o$(_path$2), List$cons$(Kind$Term$show$go$($7803, Kind$MPath$i$(_path$2)), _args$3));
                        return $7804;
                    case 'Kind.Term.ori':
                        var $7805 = self.expr;
                        var $7806 = Kind$Term$show$app$($7805, _path$2, _args$3);
                        return $7806;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7807 = Kind$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $7807;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$show$app = x0 => x1 => x2 => Kind$Term$show$app$(x0, x1, x2);

    function BitsMap$to_list$(_xs$2) {
        var $7808 = List$reverse$(BitsMap$to_list$go$(_xs$2, Bits$e, List$nil));
        return $7808;
    };
    const BitsMap$to_list = x0 => BitsMap$to_list$(x0);

    function Kind$Term$show$go$(_term$1, _path$2) {
        var self = Kind$Term$show$as_nat$(_term$1);
        switch (self._) {
            case 'Maybe.some':
                var $7810 = self.value;
                var $7811 = $7810;
                var $7809 = $7811;
                break;
            case 'Maybe.none':
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.var':
                        var $7813 = self.name;
                        var $7814 = Kind$Name$show$($7813);
                        var $7812 = $7814;
                        break;
                    case 'Kind.Term.ref':
                        var $7815 = self.name;
                        var _name$4 = Kind$Name$show$($7815);
                        var self = _path$2;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7817 = self.value;
                                var _path_val$6 = ((Bits$e + '1') + Kind$Path$to_bits$($7817));
                                var _path_str$7 = Nat$show$(Bits$to_nat$(_path_val$6));
                                var $7818 = String$flatten$(List$cons$(_name$4, List$cons$(Kind$Code$color$("2", ("-" + _path_str$7)), List$nil)));
                                var $7816 = $7818;
                                break;
                            case 'Maybe.none':
                                var $7819 = _name$4;
                                var $7816 = $7819;
                                break;
                        };
                        var $7812 = $7816;
                        break;
                    case 'Kind.Term.all':
                        var $7820 = self.eras;
                        var $7821 = self.self;
                        var $7822 = self.name;
                        var $7823 = self.xtyp;
                        var $7824 = self.body;
                        var _eras$8 = $7820;
                        var _self$9 = Kind$Name$show$($7821);
                        var _name$10 = Kind$Name$show$($7822);
                        var _type$11 = Kind$Term$show$go$($7823, Kind$MPath$o$(_path$2));
                        var self = _eras$8;
                        if (self) {
                            var $7826 = "<";
                            var _open$12 = $7826;
                        } else {
                            var $7827 = "(";
                            var _open$12 = $7827;
                        };
                        var self = _eras$8;
                        if (self) {
                            var $7828 = ">";
                            var _clos$13 = $7828;
                        } else {
                            var $7829 = ")";
                            var _clos$13 = $7829;
                        };
                        var _body$14 = Kind$Term$show$go$($7824(Kind$Term$var$($7821, 0n))(Kind$Term$var$($7822, 0n)), Kind$MPath$i$(_path$2));
                        var $7825 = String$flatten$(List$cons$(_self$9, List$cons$(_open$12, List$cons$(_name$10, List$cons$(":", List$cons$(_type$11, List$cons$(_clos$13, List$cons$(" ", List$cons$(_body$14, List$nil)))))))));
                        var $7812 = $7825;
                        break;
                    case 'Kind.Term.lam':
                        var $7830 = self.name;
                        var $7831 = self.body;
                        var _name$5 = Kind$Name$show$($7830);
                        var _body$6 = Kind$Term$show$go$($7831(Kind$Term$var$($7830, 0n)), Kind$MPath$o$(_path$2));
                        var $7832 = String$flatten$(List$cons$("(", List$cons$(_name$5, List$cons$(") ", List$cons$(_body$6, List$nil)))));
                        var $7812 = $7832;
                        break;
                    case 'Kind.Term.let':
                        var $7833 = self.name;
                        var $7834 = self.expr;
                        var $7835 = self.body;
                        var _name$6 = Kind$Name$show$($7833);
                        var _expr$7 = Kind$Term$show$go$($7834, Kind$MPath$o$(_path$2));
                        var _body$8 = Kind$Term$show$go$($7835(Kind$Term$var$($7833, 0n)), Kind$MPath$i$(_path$2));
                        var $7836 = String$flatten$(List$cons$("let ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $7812 = $7836;
                        break;
                    case 'Kind.Term.def':
                        var $7837 = self.name;
                        var $7838 = self.expr;
                        var $7839 = self.body;
                        var _name$6 = Kind$Name$show$($7837);
                        var _expr$7 = Kind$Term$show$go$($7838, Kind$MPath$o$(_path$2));
                        var _body$8 = Kind$Term$show$go$($7839(Kind$Term$var$($7837, 0n)), Kind$MPath$i$(_path$2));
                        var $7840 = String$flatten$(List$cons$("def ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $7812 = $7840;
                        break;
                    case 'Kind.Term.ann':
                        var $7841 = self.term;
                        var $7842 = self.type;
                        var _term$6 = Kind$Term$show$go$($7841, Kind$MPath$o$(_path$2));
                        var _type$7 = Kind$Term$show$go$($7842, Kind$MPath$i$(_path$2));
                        var $7843 = String$flatten$(List$cons$(_term$6, List$cons$("::", List$cons$(_type$7, List$nil))));
                        var $7812 = $7843;
                        break;
                    case 'Kind.Term.gol':
                        var $7844 = self.name;
                        var _name$6 = Kind$Name$show$($7844);
                        var $7845 = String$flatten$(List$cons$("?", List$cons$(_name$6, List$nil)));
                        var $7812 = $7845;
                        break;
                    case 'Kind.Term.nat':
                        var $7846 = self.natx;
                        var $7847 = String$flatten$(List$cons$(Nat$show$($7846), List$nil));
                        var $7812 = $7847;
                        break;
                    case 'Kind.Term.chr':
                        var $7848 = self.chrx;
                        var $7849 = String$flatten$(List$cons$("\'", List$cons$(Kind$Code$escape$char$($7848), List$cons$("\'", List$nil))));
                        var $7812 = $7849;
                        break;
                    case 'Kind.Term.str':
                        var $7850 = self.strx;
                        var $7851 = String$flatten$(List$cons$("\"", List$cons$(Kind$Code$escape$($7850), List$cons$("\"", List$nil))));
                        var $7812 = $7851;
                        break;
                    case 'Kind.Term.cse':
                        var $7852 = self.expr;
                        var $7853 = self.name;
                        var $7854 = self.with;
                        var $7855 = self.cses;
                        var $7856 = self.moti;
                        var _expr$9 = Kind$Term$show$go$($7852, Kind$MPath$o$(_path$2));
                        var _name$10 = Kind$Name$show$($7853);
                        var _wyth$11 = String$join$("; ", List$mapped$($7854, (_with_var$11 => {
                            var self = _with_var$11;
                            switch (self._) {
                                case 'Kind.Ann.new':
                                    var $7859 = self.name;
                                    var $7860 = self.type;
                                    var self = $7860;
                                    switch (self._) {
                                        case 'Maybe.some':
                                            var $7862 = self.value;
                                            var $7863 = ($7859 + (": " + Kind$Term$show$go$($7862, Maybe$none)));
                                            var $7861 = $7863;
                                            break;
                                        case 'Maybe.none':
                                            var $7864 = $7859;
                                            var $7861 = $7864;
                                            break;
                                    };
                                    var $7858 = $7861;
                                    break;
                            };
                            return $7858;
                        })));
                        var _cses$12 = BitsMap$to_list$($7855);
                        var _cses$13 = String$join$("", List$mapped$(_cses$12, (_x$13 => {
                            var _name$14 = Kind$Name$from_bits$(Pair$fst$(_x$13));
                            var _term$15 = Kind$Term$show$go$(Pair$snd$(_x$13), Maybe$none);
                            var $7865 = String$flatten$(List$cons$(_name$14, List$cons$(": ", List$cons$(_term$15, List$cons$("; ", List$nil)))));
                            return $7865;
                        })));
                        var self = $7856;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7866 = self.value;
                                var $7867 = String$flatten$(List$cons$(": ", List$cons$(Kind$Term$show$go$($7866, Maybe$none), List$nil)));
                                var _moti$14 = $7867;
                                break;
                            case 'Maybe.none':
                                var $7868 = "";
                                var _moti$14 = $7868;
                                break;
                        };
                        var $7857 = String$flatten$(List$cons$("case ", List$cons$(_expr$9, List$cons$(" as ", List$cons$(_name$10, List$cons$(_wyth$11, List$cons$(" { ", List$cons$(_cses$13, List$cons$("}", List$cons$(_moti$14, List$nil))))))))));
                        var $7812 = $7857;
                        break;
                    case 'Kind.Term.ori':
                        var $7869 = self.expr;
                        var $7870 = Kind$Term$show$go$($7869, _path$2);
                        var $7812 = $7870;
                        break;
                    case 'Kind.Term.typ':
                        var $7871 = "Type";
                        var $7812 = $7871;
                        break;
                    case 'Kind.Term.app':
                        var $7872 = Kind$Term$show$app$(_term$1, _path$2, List$nil);
                        var $7812 = $7872;
                        break;
                    case 'Kind.Term.hol':
                        var $7873 = "_";
                        var $7812 = $7873;
                        break;
                };
                var $7809 = $7812;
                break;
        };
        return $7809;
    };
    const Kind$Term$show$go = x0 => x1 => Kind$Term$show$go$(x0, x1);

    function Kind$Term$show$(_term$1) {
        var $7874 = Kind$Term$show$go$(_term$1, Maybe$none);
        return $7874;
    };
    const Kind$Term$show = x0 => Kind$Term$show$(x0);

    function Kind$Defs$report$types$(_defs$1, _names$2) {
        var _types$3 = "";
        var _types$4 = (() => {
            var $7877 = _types$3;
            var $7878 = _names$2;
            let _types$5 = $7877;
            let _name$4;
            while ($7878._ === 'List.cons') {
                _name$4 = $7878.head;
                var self = Kind$Map$get$(_name$4, _defs$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $7879 = self.value;
                        var self = $7879;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7881 = self.type;
                                var $7882 = (_types$5 + (_name$4 + (": " + (Kind$Term$show$($7881) + "\u{a}"))));
                                var $7880 = $7882;
                                break;
                        };
                        var $7877 = $7880;
                        break;
                    case 'Maybe.none':
                        var $7883 = _types$5;
                        var $7877 = $7883;
                        break;
                };
                _types$5 = $7877;
                $7878 = $7878.tail;
            }
            return _types$5;
        })();
        var $7875 = _types$4;
        return $7875;
    };
    const Kind$Defs$report$types = x0 => x1 => Kind$Defs$report$types$(x0, x1);

    function List$filter$(_f$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.cons':
                var $7885 = self.head;
                var $7886 = self.tail;
                var self = _f$2($7885);
                if (self) {
                    var $7888 = List$cons$($7885, List$filter$(_f$2, $7886));
                    var $7887 = $7888;
                } else {
                    var $7889 = List$filter$(_f$2, $7886);
                    var $7887 = $7889;
                };
                var $7884 = $7887;
                break;
            case 'List.nil':
                var $7890 = List$nil;
                var $7884 = $7890;
                break;
        };
        return $7884;
    };
    const List$filter = x0 => x1 => List$filter$(x0, x1);

    function Kind$Error$is_undef$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.cant_infer':
                var $7892 = Bool$false;
                var $7891 = $7892;
                break;
            case 'Kind.Error.undefined_reference':
                var $7893 = Bool$true;
                var $7891 = $7893;
                break;
        };
        return $7891;
    };
    const Kind$Error$is_undef = x0 => Kind$Error$is_undef$(x0);

    function Kind$Error$is_mistake$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.cant_infer':
                var $7895 = Bool$true;
                var $7894 = $7895;
                break;
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.undefined_reference':
                var $7896 = Bool$false;
                var $7894 = $7896;
                break;
        };
        return $7894;
    };
    const Kind$Error$is_mistake = x0 => Kind$Error$is_mistake$(x0);

    function Kind$Error$is_goal$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.undefined_reference':
            case 'Kind.Error.cant_infer':
                var $7898 = Bool$false;
                var $7897 = $7898;
                break;
            case 'Kind.Error.show_goal':
                var $7899 = Bool$true;
                var $7897 = $7899;
                break;
        };
        return $7897;
    };
    const Kind$Error$is_goal = x0 => Kind$Error$is_goal$(x0);

    function Kind$Error$relevant$(_errors$1) {
        var _undefs$2 = List$filter$(Kind$Error$is_undef, _errors$1);
        var _mistakes$3 = List$filter$(Kind$Error$is_mistake, _errors$1);
        var _goals$4 = List$filter$(Kind$Error$is_goal, _errors$1);
        var self = _undefs$2;
        switch (self._) {
            case 'List.nil':
                var self = _mistakes$3;
                switch (self._) {
                    case 'List.cons':
                        var $7902 = self.head;
                        var $7903 = List$concat$(List$cons$($7902, List$nil), _goals$4);
                        var $7901 = $7903;
                        break;
                    case 'List.nil':
                        var $7904 = _goals$4;
                        var $7901 = $7904;
                        break;
                };
                var $7900 = $7901;
                break;
            case 'List.cons':
                var $7905 = List$concat$(_undefs$2, _goals$4);
                var $7900 = $7905;
                break;
        };
        return $7900;
    };
    const Kind$Error$relevant = x0 => Kind$Error$relevant$(x0);

    function Map$(_V$1) {
        var $7906 = null;
        return $7906;
    };
    const Map = x0 => Map$(x0);

    function String$to_bits$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $7908 = Bits$e;
            var $7907 = $7908;
        } else {
            var $7909 = self.charCodeAt(0);
            var $7910 = self.slice(1);
            var $7911 = (String$to_bits$($7910) + (u16_to_bits($7909)));
            var $7907 = $7911;
        };
        return $7907;
    };
    const String$to_bits = x0 => String$to_bits$(x0);

    function Map$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $7913 = self.head;
                var $7914 = self.tail;
                var self = $7913;
                switch (self._) {
                    case 'Pair.new':
                        var $7916 = self.fst;
                        var $7917 = self.snd;
                        var $7918 = BitsMap$set$(String$to_bits$($7916), $7917, Map$from_list$($7914));
                        var $7915 = $7918;
                        break;
                };
                var $7912 = $7915;
                break;
            case 'List.nil':
                var $7919 = BitsMap$new;
                var $7912 = $7919;
                break;
        };
        return $7912;
    };
    const Map$from_list = x0 => Map$from_list$(x0);

    function Kind$Context$show$(_context$1) {
        var self = _context$1;
        switch (self._) {
            case 'List.cons':
                var $7921 = self.head;
                var $7922 = self.tail;
                var self = $7921;
                switch (self._) {
                    case 'Pair.new':
                        var $7924 = self.fst;
                        var $7925 = self.snd;
                        var _name$6 = Kind$Name$show$($7924);
                        var _type$7 = Kind$Term$show$(Kind$Term$normalize$($7925, Kind$Map$new));
                        var _rest$8 = Kind$Context$show$($7922);
                        var $7926 = (_rest$8 + ("- " + (_name$6 + (": " + (_type$7 + "\u{a}")))));
                        var $7923 = $7926;
                        break;
                };
                var $7920 = $7923;
                break;
            case 'List.nil':
                var $7927 = "";
                var $7920 = $7927;
                break;
        };
        return $7920;
    };
    const Kind$Context$show = x0 => Kind$Context$show$(x0);

    function Kind$Term$expand_at$(_path$1, _term$2, _defs$3) {
        var $7928 = Kind$Term$patch_at$(_path$1, _term$2, (_term$4 => {
            var self = _term$4;
            switch (self._) {
                case 'Kind.Term.ref':
                    var $7930 = self.name;
                    var self = Kind$Map$get$($7930, _defs$3);
                    switch (self._) {
                        case 'Maybe.some':
                            var $7932 = self.value;
                            var self = $7932;
                            switch (self._) {
                                case 'Kind.Def.new':
                                    var $7934 = self.term;
                                    var $7935 = $7934;
                                    var $7933 = $7935;
                                    break;
                            };
                            var $7931 = $7933;
                            break;
                        case 'Maybe.none':
                            var $7936 = Kind$Term$ref$($7930);
                            var $7931 = $7936;
                            break;
                    };
                    var $7929 = $7931;
                    break;
                case 'Kind.Term.var':
                case 'Kind.Term.typ':
                case 'Kind.Term.all':
                case 'Kind.Term.lam':
                case 'Kind.Term.app':
                case 'Kind.Term.let':
                case 'Kind.Term.def':
                case 'Kind.Term.ann':
                case 'Kind.Term.gol':
                case 'Kind.Term.hol':
                case 'Kind.Term.nat':
                case 'Kind.Term.chr':
                case 'Kind.Term.str':
                case 'Kind.Term.cse':
                case 'Kind.Term.ori':
                    var $7937 = _term$4;
                    var $7929 = $7937;
                    break;
            };
            return $7929;
        }));
        return $7928;
    };
    const Kind$Term$expand_at = x0 => x1 => x2 => Kind$Term$expand_at$(x0, x1, x2);

    function Kind$Term$expand_ct$(_term$1, _defs$2, _arity$3) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $7939 = self.name;
                var $7940 = self.indx;
                var $7941 = Kind$Term$var$($7939, $7940);
                var $7938 = $7941;
                break;
            case 'Kind.Term.ref':
                var $7942 = self.name;
                var self = Kind$Map$get$($7942, _defs$2);
                switch (self._) {
                    case 'Maybe.some':
                        var $7944 = self.value;
                        var self = $7944;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7946 = self.term;
                                var $7947 = self.isct;
                                var $7948 = self.arit;
                                var self = ($7947 && (_arity$3 > $7948));
                                if (self) {
                                    var $7950 = $7946;
                                    var $7949 = $7950;
                                } else {
                                    var $7951 = Kind$Term$ref$($7942);
                                    var $7949 = $7951;
                                };
                                var $7945 = $7949;
                                break;
                        };
                        var $7943 = $7945;
                        break;
                    case 'Maybe.none':
                        var $7952 = Kind$Term$ref$($7942);
                        var $7943 = $7952;
                        break;
                };
                var $7938 = $7943;
                break;
            case 'Kind.Term.all':
                var $7953 = self.eras;
                var $7954 = self.self;
                var $7955 = self.name;
                var $7956 = self.xtyp;
                var $7957 = self.body;
                var $7958 = Kind$Term$all$($7953, $7954, $7955, Kind$Term$expand_ct$($7956, _defs$2, 0n), (_s$9 => _x$10 => {
                    var $7959 = Kind$Term$expand_ct$($7957(_s$9)(_x$10), _defs$2, 0n);
                    return $7959;
                }));
                var $7938 = $7958;
                break;
            case 'Kind.Term.lam':
                var $7960 = self.name;
                var $7961 = self.body;
                var $7962 = Kind$Term$lam$($7960, (_x$6 => {
                    var $7963 = Kind$Term$expand_ct$($7961(_x$6), _defs$2, 0n);
                    return $7963;
                }));
                var $7938 = $7962;
                break;
            case 'Kind.Term.app':
                var $7964 = self.func;
                var $7965 = self.argm;
                var $7966 = Kind$Term$app$(Kind$Term$expand_ct$($7964, _defs$2, Nat$succ$(_arity$3)), Kind$Term$expand_ct$($7965, _defs$2, 0n));
                var $7938 = $7966;
                break;
            case 'Kind.Term.let':
                var $7967 = self.name;
                var $7968 = self.expr;
                var $7969 = self.body;
                var $7970 = Kind$Term$let$($7967, Kind$Term$expand_ct$($7968, _defs$2, 0n), (_x$7 => {
                    var $7971 = Kind$Term$expand_ct$($7969(_x$7), _defs$2, 0n);
                    return $7971;
                }));
                var $7938 = $7970;
                break;
            case 'Kind.Term.def':
                var $7972 = self.name;
                var $7973 = self.expr;
                var $7974 = self.body;
                var $7975 = Kind$Term$def$($7972, Kind$Term$expand_ct$($7973, _defs$2, 0n), (_x$7 => {
                    var $7976 = Kind$Term$expand_ct$($7974(_x$7), _defs$2, 0n);
                    return $7976;
                }));
                var $7938 = $7975;
                break;
            case 'Kind.Term.ann':
                var $7977 = self.done;
                var $7978 = self.term;
                var $7979 = self.type;
                var $7980 = Kind$Term$ann$($7977, Kind$Term$expand_ct$($7978, _defs$2, 0n), Kind$Term$expand_ct$($7979, _defs$2, 0n));
                var $7938 = $7980;
                break;
            case 'Kind.Term.gol':
                var $7981 = self.name;
                var $7982 = self.dref;
                var $7983 = self.verb;
                var $7984 = Kind$Term$gol$($7981, $7982, $7983);
                var $7938 = $7984;
                break;
            case 'Kind.Term.hol':
                var $7985 = self.path;
                var $7986 = Kind$Term$hol$($7985);
                var $7938 = $7986;
                break;
            case 'Kind.Term.nat':
                var $7987 = self.natx;
                var $7988 = Kind$Term$nat$($7987);
                var $7938 = $7988;
                break;
            case 'Kind.Term.chr':
                var $7989 = self.chrx;
                var $7990 = Kind$Term$chr$($7989);
                var $7938 = $7990;
                break;
            case 'Kind.Term.str':
                var $7991 = self.strx;
                var $7992 = Kind$Term$str$($7991);
                var $7938 = $7992;
                break;
            case 'Kind.Term.ori':
                var $7993 = self.orig;
                var $7994 = self.expr;
                var $7995 = Kind$Term$ori$($7993, $7994);
                var $7938 = $7995;
                break;
            case 'Kind.Term.typ':
                var $7996 = Kind$Term$typ;
                var $7938 = $7996;
                break;
            case 'Kind.Term.cse':
                var $7997 = _term$1;
                var $7938 = $7997;
                break;
        };
        return $7938;
    };
    const Kind$Term$expand_ct = x0 => x1 => x2 => Kind$Term$expand_ct$(x0, x1, x2);

    function Kind$Term$expand$(_dref$1, _term$2, _defs$3) {
        var _term$4 = Kind$Term$normalize$(_term$2, Kind$Map$new);
        var _term$5 = (() => {
            var $8000 = _term$4;
            var $8001 = _dref$1;
            let _term$6 = $8000;
            let _path$5;
            while ($8001._ === 'List.cons') {
                _path$5 = $8001.head;
                var _term$7 = Kind$Term$expand_at$(_path$5, _term$6, _defs$3);
                var _term$8 = Kind$Term$normalize$(_term$7, Kind$Map$new);
                var _term$9 = Kind$Term$expand_ct$(_term$8, _defs$3, 0n);
                var _term$10 = Kind$Term$normalize$(_term$9, Kind$Map$new);
                var $8000 = _term$10;
                _term$6 = $8000;
                $8001 = $8001.tail;
            }
            return _term$6;
        })();
        var $7998 = _term$5;
        return $7998;
    };
    const Kind$Term$expand = x0 => x1 => x2 => Kind$Term$expand$(x0, x1, x2);

    function Kind$Error$show$(_error$1, _defs$2) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
                var $8003 = self.expected;
                var $8004 = self.detected;
                var $8005 = self.context;
                var self = $8003;
                switch (self._) {
                    case 'Either.left':
                        var $8007 = self.value;
                        var $8008 = $8007;
                        var _expected$7 = $8008;
                        break;
                    case 'Either.right':
                        var $8009 = self.value;
                        var $8010 = Kind$Term$show$(Kind$Term$normalize$($8009, Map$from_list$(List$nil)));
                        var _expected$7 = $8010;
                        break;
                };
                var self = $8004;
                switch (self._) {
                    case 'Either.left':
                        var $8011 = self.value;
                        var $8012 = $8011;
                        var _detected$8 = $8012;
                        break;
                    case 'Either.right':
                        var $8013 = self.value;
                        var $8014 = Kind$Term$show$(Kind$Term$normalize$($8013, Map$from_list$(List$nil)));
                        var _detected$8 = $8014;
                        break;
                };
                var $8006 = ("Type mismatch.\u{a}" + ("- Expected: " + (_expected$7 + ("\u{a}" + ("- Detected: " + (_detected$8 + ("\u{a}" + (() => {
                    var self = $8005;
                    switch (self._) {
                        case 'List.nil':
                            var $8015 = "";
                            return $8015;
                        case 'List.cons':
                            var $8016 = ("With context:\u{a}" + Kind$Context$show$($8005));
                            return $8016;
                    };
                })())))))));
                var $8002 = $8006;
                break;
            case 'Kind.Error.show_goal':
                var $8017 = self.name;
                var $8018 = self.dref;
                var $8019 = self.verb;
                var $8020 = self.goal;
                var $8021 = self.context;
                var _goal_name$8 = ("Goal ?" + (Kind$Name$show$($8017) + ":\u{a}"));
                var self = $8020;
                switch (self._) {
                    case 'Maybe.some':
                        var $8023 = self.value;
                        var _goal$10 = Kind$Term$expand$($8018, $8023, _defs$2);
                        var $8024 = ("With type: " + ((() => {
                            var self = $8019;
                            if (self) {
                                var $8025 = Kind$Term$show$go$(_goal$10, Maybe$some$((_x$11 => {
                                    var $8026 = _x$11;
                                    return $8026;
                                })));
                                return $8025;
                            } else {
                                var $8027 = Kind$Term$show$(_goal$10);
                                return $8027;
                            };
                        })() + "\u{a}"));
                        var _with_type$9 = $8024;
                        break;
                    case 'Maybe.none':
                        var $8028 = "";
                        var _with_type$9 = $8028;
                        break;
                };
                var self = $8021;
                switch (self._) {
                    case 'List.nil':
                        var $8029 = "";
                        var _with_ctxt$10 = $8029;
                        break;
                    case 'List.cons':
                        var $8030 = ("With context:\u{a}" + Kind$Context$show$($8021));
                        var _with_ctxt$10 = $8030;
                        break;
                };
                var $8022 = String$flatten$(List$cons$(_goal_name$8, List$cons$(_with_type$9, List$cons$(_with_ctxt$10, List$nil))));
                var $8002 = $8022;
                break;
            case 'Kind.Error.waiting':
                var $8031 = self.name;
                var $8032 = ("Waiting for \'" + ($8031 + "\'."));
                var $8002 = $8032;
                break;
            case 'Kind.Error.indirect':
                var $8033 = self.name;
                var $8034 = ("Error on dependency \'" + ($8033 + "\'."));
                var $8002 = $8034;
                break;
            case 'Kind.Error.patch':
                var $8035 = self.term;
                var $8036 = ("Patching: " + Kind$Term$show$($8035));
                var $8002 = $8036;
                break;
            case 'Kind.Error.undefined_reference':
                var $8037 = self.name;
                var $8038 = ("Undefined reference: " + (Kind$Name$show$($8037) + "\u{a}"));
                var $8002 = $8038;
                break;
            case 'Kind.Error.cant_infer':
                var $8039 = self.term;
                var $8040 = self.context;
                var _term$6 = Kind$Term$show$($8039);
                var _context$7 = Kind$Context$show$($8040);
                var $8041 = ("Can\'t infer type of: " + (_term$6 + ("\u{a}" + ("With context:\u{a}" + _context$7))));
                var $8002 = $8041;
                break;
        };
        return $8002;
    };
    const Kind$Error$show = x0 => x1 => Kind$Error$show$(x0, x1);

    function Kind$Error$origin$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
                var $8043 = self.origin;
                var $8044 = $8043;
                var $8042 = $8044;
                break;
            case 'Kind.Error.undefined_reference':
                var $8045 = self.origin;
                var $8046 = $8045;
                var $8042 = $8046;
                break;
            case 'Kind.Error.cant_infer':
                var $8047 = self.origin;
                var $8048 = $8047;
                var $8042 = $8048;
                break;
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
                var $8049 = Maybe$none;
                var $8042 = $8049;
                break;
        };
        return $8042;
    };
    const Kind$Error$origin = x0 => Kind$Error$origin$(x0);

    function Kind$Defs$report$errors$(_defs$1) {
        var _errors$2 = "";
        var _errors$3 = (() => {
            var $8052 = _errors$2;
            var $8053 = BitsMap$keys$(_defs$1);
            let _errors$4 = $8052;
            let _key$3;
            while ($8053._ === 'List.cons') {
                _key$3 = $8053.head;
                var _name$5 = Kind$Name$from_bits$(_key$3);
                var _defn$6 = Kind$Map$get$(_name$5, _defs$1);
                var self = _defn$6;
                switch (self._) {
                    case 'Maybe.some':
                        var $8054 = self.value;
                        var self = $8054;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $8056 = self.file;
                                var $8057 = self.code;
                                var $8058 = self.name;
                                var $8059 = self.stat;
                                var self = $8059;
                                switch (self._) {
                                    case 'Kind.Status.fail':
                                        var $8061 = self.errors;
                                        var self = $8061;
                                        switch (self._) {
                                            case 'List.nil':
                                                var $8063 = _errors$4;
                                                var $8062 = $8063;
                                                break;
                                            case 'List.cons':
                                                var _name_str$20 = $8058;
                                                var _rel_errs$21 = Kind$Error$relevant$($8061);
                                                var _errors$22 = (() => {
                                                    var $8066 = _errors$4;
                                                    var $8067 = _rel_errs$21;
                                                    let _errors$23 = $8066;
                                                    let _err$22;
                                                    while ($8067._ === 'List.cons') {
                                                        _err$22 = $8067.head;
                                                        var _err_msg$24 = Kind$Error$show$(_err$22, _defs$1);
                                                        var _ori_val$25 = Kind$Error$origin$(_err$22);
                                                        var self = _ori_val$25;
                                                        switch (self._) {
                                                            case 'Maybe.some':
                                                                var $8068 = self.value;
                                                                var self = $8068;
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $8070 = self.fst;
                                                                        var $8071 = self.snd;
                                                                        var _inside$29 = ("Inside \'" + ($8056 + "\':\u{a}"));
                                                                        var _source$30 = Kind$Code$highlight$($8057, $8070, $8071);
                                                                        var $8072 = (_errors$23 + (_err_msg$24 + (_inside$29 + (_source$30 + ("\u{a}" + "\u{a}")))));
                                                                        var $8069 = $8072;
                                                                        break;
                                                                };
                                                                var $8066 = $8069;
                                                                break;
                                                            case 'Maybe.none':
                                                                var $8073 = (_errors$23 + (_err_msg$24 + "\u{a}"));
                                                                var $8066 = $8073;
                                                                break;
                                                        };
                                                        _errors$23 = $8066;
                                                        $8067 = $8067.tail;
                                                    }
                                                    return _errors$23;
                                                })();
                                                var $8064 = _errors$22;
                                                var $8062 = $8064;
                                                break;
                                        };
                                        var $8060 = $8062;
                                        break;
                                    case 'Kind.Status.init':
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.done':
                                        var $8074 = _errors$4;
                                        var $8060 = $8074;
                                        break;
                                };
                                var $8055 = $8060;
                                break;
                        };
                        var $8052 = $8055;
                        break;
                    case 'Maybe.none':
                        var $8075 = _errors$4;
                        var $8052 = $8075;
                        break;
                };
                _errors$4 = $8052;
                $8053 = $8053.tail;
            }
            return _errors$4;
        })();
        var $8050 = _errors$3;
        return $8050;
    };
    const Kind$Defs$report$errors = x0 => Kind$Defs$report$errors$(x0);

    function Kind$Defs$report$(_defs$1, _names$2) {
        var _types$3 = Kind$Defs$report$types$(_defs$1, _names$2);
        var _errors$4 = Kind$Defs$report$errors$(_defs$1);
        var self = _errors$4;
        if (self.length === 0) {
            var $8077 = "All terms check.";
            var _errors$5 = $8077;
        } else {
            var $8078 = self.charCodeAt(0);
            var $8079 = self.slice(1);
            var $8080 = _errors$4;
            var _errors$5 = $8080;
        };
        var $8076 = (_types$3 + ("\u{a}" + _errors$5));
        return $8076;
    };
    const Kind$Defs$report = x0 => x1 => Kind$Defs$report$(x0, x1);

    function Kind$api$io$check_file$(_file$1) {
        var $8081 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8082 = _m$bind$2;
            return $8082;
        }))(Kind$Synth$file$(_file$1, Kind$Map$new))((_loaded$2 => {
            var self = _loaded$2;
            switch (self._) {
                case 'Either.left':
                    var $8084 = self.value;
                    var $8085 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $8086 = _m$bind$4;
                        return $8086;
                    }))(IO$print$(String$flatten$(List$cons$("On \'", List$cons$(_file$1, List$cons$("\':", List$nil))))))((_$4 => {
                        var $8087 = IO$print$($8084);
                        return $8087;
                    }));
                    var $8083 = $8085;
                    break;
                case 'Either.right':
                    var $8088 = self.value;
                    var self = $8088;
                    switch (self._) {
                        case 'Pair.new':
                            var $8090 = self.fst;
                            var $8091 = self.snd;
                            var _nams$6 = $8090;
                            var _defs$7 = $8091;
                            var self = _nams$6;
                            switch (self._) {
                                case 'List.nil':
                                    var $8093 = IO$print$(("File not found or empty: \'" + (_file$1 + "\'.")));
                                    var $8092 = $8093;
                                    break;
                                case 'List.cons':
                                    var $8094 = IO$print$(Kind$Defs$report$(_defs$7, _nams$6));
                                    var $8092 = $8094;
                                    break;
                            };
                            var $8089 = $8092;
                            break;
                    };
                    var $8083 = $8089;
                    break;
            };
            return $8083;
        }));
        return $8081;
    };
    const Kind$api$io$check_file = x0 => Kind$api$io$check_file$(x0);

    function Kind$Synth$files$go$(_files$1, _defs$2) {
        var self = _files$1;
        switch (self._) {
            case 'List.cons':
                var $8096 = self.head;
                var $8097 = self.tail;
                var $8098 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $8099 = _m$bind$5;
                    return $8099;
                }))(Kind$Synth$file$($8096, _defs$2))((_file_synth$5 => {
                    var self = _file_synth$5;
                    switch (self._) {
                        case 'Either.right':
                            var $8101 = self.value;
                            var _nams$7 = Pair$fst$($8101);
                            var _defs$8 = Pair$snd$($8101);
                            var $8102 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                var $8103 = _m$bind$9;
                                return $8103;
                            }))(Kind$Synth$files$go$($8097, _defs$8))((_rest$9 => {
                                var _nams$10 = List$concat$(_nams$7, Pair$fst$(_rest$9));
                                var _defs$11 = Pair$snd$(_rest$9);
                                var $8104 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                                    var $8105 = _m$pure$13;
                                    return $8105;
                                }))(Pair$new$(_nams$10, _defs$11));
                                return $8104;
                            }));
                            var $8100 = $8102;
                            break;
                        case 'Either.left':
                            var $8106 = Kind$Synth$files$go$($8097, _defs$2);
                            var $8100 = $8106;
                            break;
                    };
                    return $8100;
                }));
                var $8095 = $8098;
                break;
            case 'List.nil':
                var $8107 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $8108 = _m$pure$4;
                    return $8108;
                }))(Pair$new$(List$nil, _defs$2));
                var $8095 = $8107;
                break;
        };
        return $8095;
    };
    const Kind$Synth$files$go = x0 => x1 => Kind$Synth$files$go$(x0, x1);

    function Kind$Synth$remove_duplicate_names$(_names$1) {
        var _map$2 = List$fold$(_names$1, Kind$Map$new, (_name$2 => {
            var $8110 = Kind$Map$set(_name$2)(Unit$new);
            return $8110;
        }));
        var $8109 = List$mapped$(BitsMap$keys$(_map$2), Kind$Name$from_bits);
        return $8109;
    };
    const Kind$Synth$remove_duplicate_names = x0 => Kind$Synth$remove_duplicate_names$(x0);

    function Kind$Synth$files$(_files$1, _defs$2) {
        var $8111 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $8112 = _m$bind$3;
            return $8112;
        }))(Kind$Synth$files$go$(_files$1, _defs$2))((_got$3 => {
            var _nams$4 = Kind$Synth$remove_duplicate_names$(Pair$fst$(_got$3));
            var _defs$5 = Pair$snd$(_got$3);
            var $8113 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                var $8114 = _m$pure$7;
                return $8114;
            }))(Pair$new$(_nams$4, _defs$5));
            return $8113;
        }));
        return $8111;
    };
    const Kind$Synth$files = x0 => x1 => Kind$Synth$files$(x0, x1);

    function Kind$api$io$check_files$(_files$1) {
        var $8115 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8116 = _m$bind$2;
            return $8116;
        }))(Kind$Synth$files$(_files$1, Kind$Map$new))((_loaded$2 => {
            var _nams$3 = Pair$fst$(_loaded$2);
            var _defs$4 = Pair$snd$(_loaded$2);
            var self = _nams$3;
            switch (self._) {
                case 'List.nil':
                    var $8118 = IO$print$("No valid Kind file found.");
                    var $8117 = $8118;
                    break;
                case 'List.cons':
                    var $8119 = IO$print$(Kind$Defs$report$(_defs$4, _nams$3));
                    var $8117 = $8119;
                    break;
            };
            return $8117;
        }));
        return $8115;
    };
    const Kind$api$io$check_files = x0 => Kind$api$io$check_files$(x0);

    function Kind$api$io$check_term$(_name$1) {
        var $8120 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8121 = _m$bind$2;
            return $8121;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.some':
                    var $8123 = self.value;
                    var $8124 = IO$print$(Kind$Defs$report$($8123, List$cons$(_name$1, List$nil)));
                    var $8122 = $8124;
                    break;
                case 'Maybe.none':
                    var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                    var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                        var $8126 = ("\'" + (_x$4 + "\'"));
                        return $8126;
                    }));
                    var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                    var $8125 = IO$print$((_notfound$3 + ("\u{a}" + _searched$5)));
                    var $8122 = $8125;
                    break;
            };
            return $8122;
        }));
        return $8120;
    };
    const Kind$api$io$check_term = x0 => Kind$api$io$check_term$(x0);

    function Kind$api$io$show_term$(_name$1) {
        var $8127 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8128 = _m$bind$2;
            return $8128;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var $8129 = IO$print$((() => {
                var self = _new_defs$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $8130 = self.value;
                        var _defs$4 = $8130;
                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);
                        var self = _defn$5;
                        switch (self._) {
                            case 'Maybe.some':
                                var $8132 = self.value;
                                var self = $8132;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $8134 = self.term;
                                        var _term$16 = $8134;
                                        var $8135 = Kind$Term$show$(_term$16);
                                        var $8133 = $8135;
                                        break;
                                };
                                var $8131 = $8133;
                                break;
                            case 'Maybe.none':
                                var $8136 = ("Term not found: \'" + (_name$1 + "\'."));
                                var $8131 = $8136;
                                break;
                        };
                        return $8131;
                    case 'Maybe.none':
                        var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                            var $8138 = ("\'" + (_x$4 + "\'"));
                            return $8138;
                        }));
                        var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                        var $8137 = (_notfound$3 + ("\u{a}" + _searched$5));
                        return $8137;
                };
            })());
            return $8129;
        }));
        return $8127;
    };
    const Kind$api$io$show_term = x0 => Kind$api$io$show_term$(x0);

    function Kind$api$io$show_term_normal$(_name$1) {
        var $8139 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8140 = _m$bind$2;
            return $8140;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var $8141 = IO$print$((() => {
                var self = _new_defs$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $8142 = self.value;
                        var _defs$4 = $8142;
                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);
                        var self = _defn$5;
                        switch (self._) {
                            case 'Maybe.some':
                                var $8144 = self.value;
                                var self = $8144;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $8146 = self.term;
                                        var _term$16 = $8146;
                                        var _norm$17 = Kind$Term$normalize$(_term$16, _defs$4);
                                        var $8147 = Kind$Term$show$(_norm$17);
                                        var $8145 = $8147;
                                        break;
                                };
                                var $8143 = $8145;
                                break;
                            case 'Maybe.none':
                                var $8148 = ("Term not found: \'" + (_name$1 + "\'."));
                                var $8143 = $8148;
                                break;
                        };
                        return $8143;
                    case 'Maybe.none':
                        var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                            var $8150 = ("\'" + (_x$4 + "\'"));
                            return $8150;
                        }));
                        var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                        var $8149 = (_notfound$3 + ("\u{a}" + _searched$5));
                        return $8149;
                };
            })());
            return $8141;
        }));
        return $8139;
    };
    const Kind$api$io$show_term_normal = x0 => Kind$api$io$show_term_normal$(x0);

    function IO$purify$(_io$2) {
        var IO$purify$ = (_io$2) => ({
            ctr: 'TCO',
            arg: [_io$2]
        });
        var IO$purify = _io$2 => IO$purify$(_io$2);
        var arg = [_io$2];
        while (true) {
            let [_io$2] = arg;
            var R = (() => {
                var self = _io$2;
                switch (self._) {
                    case 'IO.end':
                        var $8151 = self.value;
                        var $8152 = $8151;
                        return $8152;
                    case 'IO.ask':
                        var $8153 = self.then;
                        var $8154 = IO$purify$($8153(""));
                        return $8154;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const IO$purify = x0 => IO$purify$(x0);

    function Kind$api$check_code$(_code$1) {
        var self = Kind$Defs$read$("Main.kind", _code$1, Kind$Map$new);
        switch (self._) {
            case 'Either.left':
                var $8156 = self.value;
                var $8157 = $8156;
                var $8155 = $8157;
                break;
            case 'Either.right':
                var $8158 = self.value;
                var $8159 = IO$purify$((() => {
                    var _defs$3 = $8158;
                    var _nams$4 = List$mapped$(BitsMap$keys$(_defs$3), Kind$Name$from_bits);
                    var $8160 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                        var $8161 = _m$bind$5;
                        return $8161;
                    }))(Kind$Synth$many$(_nams$4, _defs$3))((_defs$5 => {
                        var $8162 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                            var $8163 = _m$pure$7;
                            return $8163;
                        }))(Kind$Defs$report$(_defs$5, _nams$4));
                        return $8162;
                    }));
                    return $8160;
                })());
                var $8155 = $8159;
                break;
        };
        return $8155;
    };
    const Kind$api$check_code = x0 => Kind$api$check_code$(x0);

    function Kind$Term$read$(_code$1) {
        var self = Kind$Parser$term$(0n, _code$1);
        switch (self._) {
            case 'Parser.Reply.value':
                var $8165 = self.val;
                var $8166 = Maybe$some$($8165);
                var $8164 = $8166;
                break;
            case 'Parser.Reply.error':
                var $8167 = Maybe$none;
                var $8164 = $8167;
                break;
        };
        return $8164;
    };
    const Kind$Term$read = x0 => Kind$Term$read$(x0);
    const Kind$api$export = (() => {
        var _e$1 = Kind$api$io$term_to_core;
        var _e$2 = Kind$api$io$check_file;
        var _e$3 = Kind$api$io$check_files;
        var _e$4 = Kind$api$io$check_term;
        var _e$5 = Kind$api$io$show_term;
        var _e$6 = Kind$api$io$show_term_normal;
        var _e$7 = Kind$api$check_code;
        var _e$8 = Kind$Term$read;
        var $8168 = IO$monad$((_m$bind$9 => _m$pure$10 => {
            var $8169 = _m$pure$10;
            return $8169;
        }))(Unit$new);
        return $8168;
    })();
    return {
        '$main$': () => run(Kind$api$export),
        'run': run,
        'IO': IO,
        'IO.ask': IO$ask,
        'IO.bind': IO$bind,
        'IO.end': IO$end,
        'IO.monad': IO$monad,
        'Maybe': Maybe,
        'BitsMap': BitsMap,
        'Maybe.none': Maybe$none,
        'BitsMap.get': BitsMap$get,
        'Bits.e': Bits$e,
        'Bool.false': Bool$false,
        'Bool.and': Bool$and,
        'Bool.true': Bool$true,
        'Cmp.as_lte': Cmp$as_lte,
        'Cmp.ltn': Cmp$ltn,
        'Cmp.gtn': Cmp$gtn,
        'Word.cmp.go': Word$cmp$go,
        'Cmp.eql': Cmp$eql,
        'Word.cmp': Word$cmp,
        'Word.lte': Word$lte,
        'Nat.succ': Nat$succ,
        'Nat.zero': Nat$zero,
        'U16.lte': U16$lte,
        'U16.btw': U16$btw,
        'U16.new': U16$new,
        'Word.e': Word$e,
        'Word': Word,
        'Word.i': Word$i,
        'Word.o': Word$o,
        'Word.subber': Word$subber,
        'Word.sub': Word$sub,
        'U16.sub': U16$sub,
        'Nat.apply': Nat$apply,
        'Word.inc': Word$inc,
        'Word.zero': Word$zero,
        'Nat.to_word': Nat$to_word,
        'Nat.to_u16': Nat$to_u16,
        'Word.adder': Word$adder,
        'Word.add': Word$add,
        'U16.add': U16$add,
        'Cmp.as_eql': Cmp$as_eql,
        'Word.eql': Word$eql,
        'U16.eql': U16$eql,
        'Bits.o': Bits$o,
        'Bits.i': Bits$i,
        'Word.to_bits': Word$to_bits,
        'Word.trim': Word$trim,
        'Bits.concat': Bits$concat,
        'Bits.reverse.tco': Bits$reverse$tco,
        'Bits.reverse': Bits$reverse,
        'Kind.Name.to_bits': Kind$Name$to_bits,
        'Kind.Map.get': Kind$Map$get,
        'Parser.Reply': Parser$Reply,
        'List': List,
        'Parser.Reply.error': Parser$Reply$error,
        'Parser.Reply.value': Parser$Reply$value,
        'List.nil': List$nil,
        'List.cons': List$cons,
        'Parser.many.go': Parser$many$go,
        'Parser.many': Parser$many,
        'Parser.many1': Parser$many1,
        'Parser.digit': Parser$digit,
        'Nat.add': Nat$add,
        'Nat.mul': Nat$mul,
        'Nat.from_base.go': Nat$from_base$go,
        'List.reverse.go': List$reverse$go,
        'List.reverse': List$reverse,
        'Nat.from_base': Nat$from_base,
        'Parser.nat': Parser$nat,
        'Nat.read': Nat$read,
        'IO.get_time': IO$get_time,
        'Maybe.some': Maybe$some,
        'IO.get_file': IO$get_file,
        'String.cons': String$cons,
        'String.concat': String$concat,
        'Bool.not': Bool$not,
        'String.is_empty': String$is_empty,
        'IO.get_file_mtime': IO$get_file_mtime,
        'String.eql': String$eql,
        'Pair.new': Pair$new,
        'Maybe.bind': Maybe$bind,
        'Maybe.monad': Maybe$monad,
        'Pair': Pair,
        'Unit.new': Unit$new,
        'Bool.or': Bool$or,
        'Kind.Core.read.spaces': Kind$Core$read$spaces,
        'Kind.Term.ref': Kind$Term$ref,
        'Char.eql': Char$eql,
        'Kind.Term.typ': Kind$Term$typ,
        'Cmp.as_gte': Cmp$as_gte,
        'Word.gte': Word$gte,
        'U16.gte': U16$gte,
        'Cmp.as_ltn': Cmp$as_ltn,
        'Word.ltn': Word$ltn,
        'U16.ltn': U16$ltn,
        'Kind.Core.read.is_name': Kind$Core$read$is_name,
        'Kind.Core.read.name': Kind$Core$read$name,
        'Kind.Core.read.char': Kind$Core$read$char,
        'Kind.Term.all': Kind$Term$all,
        'Kind.Term.lam': Kind$Term$lam,
        'Kind.Term.app': Kind$Term$app,
        'Kind.Term.let': Kind$Term$let,
        'Kind.Term.def': Kind$Term$def,
        'Kind.Term.ann': Kind$Term$ann,
        'String.starts_with': String$starts_with,
        'String.nil': String$nil,
        'String.drop': String$drop,
        'Char.is_hex': Char$is_hex,
        'Word.shift_left1.aux': Word$shift_left1$aux,
        'Word.shift_left1': Word$shift_left1,
        'Word.mul.go': Word$mul$go,
        'Word.to_zero': Word$to_zero,
        'Word.mul': Word$mul,
        'U16.mul': U16$mul,
        'U16.inc': U16$inc,
        'U16.zero': U16$zero,
        'Char.hex_value16': Char$hex_value16,
        'Kind.Core.read.u16': Kind$Core$read$u16,
        'Kind.Core.read.chrx': Kind$Core$read$chrx,
        'Kind.Term.chr': Kind$Term$chr,
        'Kind.Core.read.strx': Kind$Core$read$strx,
        'Kind.Term.str': Kind$Term$str,
        'Char.dec_value': Char$dec_value,
        'Kind.Core.read.natx': Kind$Core$read$natx,
        'Kind.Term.nat': Kind$Term$nat,
        'Pair.fst': Pair$fst,
        'Nat.eql': Nat$eql,
        'Nat.pred': Nat$pred,
        'Kind.Core.read.find': Kind$Core$read$find,
        'Pair.snd': Pair$snd,
        'Kind.Core.read.term': Kind$Core$read$term,
        'Kind.Core.read': Kind$Core$read,
        'Bool.read': Bool$read,
        'Kind.Status.done': Kind$Status$done,
        'Kind.Def.new': Kind$Def$new,
        'Kind.Synth.load.cached.def': Kind$Synth$load$cached$def,
        'Trampoline.call': Trampoline$call,
        'Trampoline': Trampoline,
        'BitsMap.tie': BitsMap$tie,
        'BitsMap.new': BitsMap$new,
        'Trampoline.wrap': Trampoline$wrap,
        'BitsMap.set.cps.go': BitsMap$set$cps$go,
        'Trampoline.done': Trampoline$done,
        'BitsMap.set.cps': BitsMap$set$cps,
        'BitsMap.set': BitsMap$set,
        'Kind.Map.set': Kind$Map$set,
        'Kind.Map.new': Kind$Map$new,
        'Kind.Map': Kind$Map,
        'Kind.Core.dependencies.go': Kind$Core$dependencies$go,
        'List.mapped': List$mapped,
        'BitsMap.to_list.go': BitsMap$to_list$go,
        'Bits.chunks_of.go': Bits$chunks_of$go,
        'Bits.chunks_of': Bits$chunks_of,
        'List.fold': List$fold,
        'Word.from_bits': Word$from_bits,
        'Kind.Name.from_bits': Kind$Name$from_bits,
        'Kind.Map.to_list': Kind$Map$to_list,
        'Kind.Map.keys': Kind$Map$keys,
        'Kind.Synth.load.cached': Kind$Synth$load$cached,
        'Parser.is_eof': Parser$is_eof,
        'Parser': Parser,
        'Parser.ErrorAt.new': Parser$ErrorAt$new,
        'Nat.gtn': Nat$gtn,
        'Parser.ErrorAt.combine': Parser$ErrorAt$combine,
        'Parser.first_of.go': Parser$first_of$go,
        'Parser.first_of': Parser$first_of,
        'String.flatten.go': String$flatten$go,
        'String.flatten': String$flatten,
        'Parser.text.go': Parser$text$go,
        'Parser.text': Parser$text,
        'Parser.eof': Parser$eof,
        'Parser.until.go': Parser$until$go,
        'Parser.until': Parser$until,
        'Parser.one': Parser$one,
        'Kind.Parser.spaces': Kind$Parser$spaces,
        'Parser.get_index': Parser$get_index,
        'Kind.Parser.init': Kind$Parser$init,
        'Kind.Name.is_letter': Kind$Name$is_letter,
        'Kind.Parser.letter': Kind$Parser$letter,
        'Kind.Parser.name1': Kind$Parser$name1,
        'Kind.Parser.text': Kind$Parser$text,
        'Parser.until1': Parser$until1,
        'Parser.maybe': Parser$maybe,
        'Kind.Parser.item': Kind$Parser$item,
        'Kind.Parser.name': Kind$Parser$name,
        'Kind.Parser.stop': Kind$Parser$stop,
        'Kind.Term.ori': Kind$Term$ori,
        'Kind.Parser.forall': Kind$Parser$forall,
        'Kind.Parser.make_lambda': Kind$Parser$make_lambda,
        'Kind.Parser.lambda': Kind$Parser$lambda,
        'Kind.Parser.lambda.erased': Kind$Parser$lambda$erased,
        'Kind.Parser.lambda.nameless': Kind$Parser$lambda$nameless,
        'Kind.Parser.parenthesis': Kind$Parser$parenthesis,
        'Kind.Term.hol': Kind$Term$hol,
        'Kind.Parser.letforrange.u32': Kind$Parser$letforrange$u32,
        'Kind.Parser.letforrange.u32.with': Kind$Parser$letforrange$u32$with,
        'Kind.Parser.letforrange.nat': Kind$Parser$letforrange$nat,
        'Kind.Parser.letforrange.nat.with': Kind$Parser$letforrange$nat$with,
        'Kind.Parser.letforin': Kind$Parser$letforin,
        'Kind.Parser.letforin.with': Kind$Parser$letforin$with,
        'Kind.Parser.letwhile': Kind$Parser$letwhile,
        'Kind.Parser.letwhile.with': Kind$Parser$letwhile$with,
        'Kind.Parser.let': Kind$Parser$let,
        'Kind.Parser.let.omit': Kind$Parser$let$omit,
        'Kind.Parser.getwhile': Kind$Parser$getwhile,
        'Kind.Parser.getwhile.with': Kind$Parser$getwhile$with,
        'Kind.Parser.get': Kind$Parser$get,
        'Kind.Parser.get.omit': Kind$Parser$get$omit,
        'Kind.Parser.def': Kind$Parser$def,
        'Kind.Parser.goal_rewrite': Kind$Parser$goal_rewrite,
        'Kind.Parser.if': Kind$Parser$if,
        'Kind.Code.backslash': Kind$Code$backslash,
        'Kind.Code.escapes': Kind$Code$escapes,
        'Kind.Parser.char.single': Kind$Parser$char$single,
        'Kind.Parser.char': Kind$Parser$char,
        'String.reverse.go': String$reverse$go,
        'String.reverse': String$reverse,
        'Kind.Parser.string.go': Kind$Parser$string$go,
        'Kind.Parser.string': Kind$Parser$string,
        'Kind.Parser.pair': Kind$Parser$pair,
        'Kind.Parser.sigma.type': Kind$Parser$sigma$type,
        'Kind.Parser.some': Kind$Parser$some,
        'Kind.Parser.not': Kind$Parser$not,
        'Kind.Parser.left': Kind$Parser$left,
        'Kind.Parser.right': Kind$Parser$right,
        'Kind.Parser.apply': Kind$Parser$apply,
        'Kind.Parser.chain': Kind$Parser$chain,
        'Kind.Parser.mirror': Kind$Parser$mirror,
        'Kind.Name.read': Kind$Name$read,
        'Kind.Parser.list': Kind$Parser$list,
        'Kind.Parser.map': Kind$Parser$map,
        'Kind.Parser.log': Kind$Parser$log,
        'Kind.Parser.do.statements': Kind$Parser$do$statements,
        'Kind.Parser.do': Kind$Parser$do,
        'Parser.try': Parser$try,
        'Parser.fail': Parser$fail,
        'Parser.avoiding': Parser$avoiding,
        'Maybe.default': Maybe$default,
        'Kind.Term.unroll_nat': Kind$Term$unroll_nat,
        'U16.to_bits': U16$to_bits,
        'Kind.Term.unroll_chr.bits': Kind$Term$unroll_chr$bits,
        'Kind.Term.unroll_chr': Kind$Term$unroll_chr,
        'Kind.Term.unroll_str': Kind$Term$unroll_str,
        'Kind.Term.reduce': Kind$Term$reduce,
        'Kind.Term.extract_name': Kind$Term$extract_name,
        'Kind.Ann.new': Kind$Ann$new,
        'Kind.Parser.case.with': Kind$Parser$case$with,
        'Kind.Parser.case.case': Kind$Parser$case$case,
        'Debug.log': Debug$log,
        'Kind.Parser.case.group': Kind$Parser$case$group,
        'BitsMap.map': BitsMap$map,
        'Kind.Map.map': Kind$Map$map,
        'Kind.Term.cse': Kind$Term$cse,
        'Kind.Parser.case.build': Kind$Parser$case$build,
        'Kind.Parser.case': Kind$Parser$case,
        'Kind.Parser.open': Kind$Parser$open,
        'Kind.Parser.without': Kind$Parser$without,
        'Kind.Parser.switch.case': Kind$Parser$switch$case,
        'Kind.Parser.switch': Kind$Parser$switch,
        'Bits.tail': Bits$tail,
        'Bits.inc': Bits$inc,
        'Nat.to_bits': Nat$to_bits,
        'Maybe.is_some': Maybe$is_some,
        'Kind.Term.gol': Kind$Term$gol,
        'Kind.Parser.goal': Kind$Parser$goal,
        'Kind.Parser.hole': Kind$Parser$hole,
        'Kind.Parser.float.sign': Kind$Parser$float$sign,
        'List.any': List$any,
        'Kind.Parser.float.str_digit': Kind$Parser$float$str_digit,
        'String.from_list': String$from_list,
        'Kind.Parser.float.64': Kind$Parser$float$64,
        'Kind.Parser.float.32': Kind$Parser$float$32,
        'Either': Either,
        'Either.left': Either$left,
        'Either.right': Either$right,
        'Nat.sub_rem': Nat$sub_rem,
        'Nat.div_mod.go': Nat$div_mod$go,
        'Nat.div_mod': Nat$div_mod,
        'Nat.to_base.go': Nat$to_base$go,
        'Nat.to_base': Nat$to_base,
        'Nat.mod.go': Nat$mod$go,
        'Nat.mod': Nat$mod,
        'Nat.lte': Nat$lte,
        'List.at': List$at,
        'Nat.show_digit': Nat$show_digit,
        'Nat.to_string_base': Nat$to_string_base,
        'Nat.show': Nat$show,
        'Kind.Parser.int_pos': Kind$Parser$int_pos,
        'Kind.Parser.int_neg': Kind$Parser$int_neg,
        'Kind.Parser.int': Kind$Parser$int,
        'Kind.Parser.machine_integer.signed': Kind$Parser$machine_integer$signed,
        'Parser.hex_digit': Parser$hex_digit,
        'Parser.hex_nat': Parser$hex_nat,
        'Kind.Parser.nat': Kind$Parser$nat,
        'Kind.Parser.machine_integer.unsigned': Kind$Parser$machine_integer$unsigned,
        'Kind.Parser.u64': Kind$Parser$u64,
        'Kind.Parser.u32': Kind$Parser$u32,
        'Kind.Parser.u16': Kind$Parser$u16,
        'Kind.Parser.u8': Kind$Parser$u8,
        'Kind.Parser.reference': Kind$Parser$reference,
        'List.for': List$for,
        'Kind.Parser.application': Kind$Parser$application,
        'Parser.spaces': Parser$spaces,
        'Parser.spaces_text': Parser$spaces_text,
        'Kind.Parser.application.erased': Kind$Parser$application$erased,
        'Kind.Parser.list_set': Kind$Parser$list_set,
        'Kind.Parser.list_get': Kind$Parser$list_get,
        'Kind.Parser.map_set': Kind$Parser$map_set,
        'Kind.Parser.map_get': Kind$Parser$map_get,
        'Kind.Parser.arrow': Kind$Parser$arrow,
        'Kind.Parser.op': Kind$Parser$op,
        'Kind.Parser.add': Kind$Parser$add,
        'Kind.Parser.sub': Kind$Parser$sub,
        'Kind.Parser.mul': Kind$Parser$mul,
        'Kind.Parser.div': Kind$Parser$div,
        'Kind.Parser.mod': Kind$Parser$mod,
        'Kind.Parser.ltn': Kind$Parser$ltn,
        'Kind.Parser.lte': Kind$Parser$lte,
        'Kind.Parser.eql': Kind$Parser$eql,
        'Kind.Parser.gte': Kind$Parser$gte,
        'Kind.Parser.gtn': Kind$Parser$gtn,
        'Kind.Parser.and': Kind$Parser$and,
        'Kind.Parser.or': Kind$Parser$or,
        'Kind.Parser.default': Kind$Parser$default,
        'Kind.Parser.cons': Kind$Parser$cons,
        'Kind.Parser.concat': Kind$Parser$concat,
        'Kind.Parser.string_concat': Kind$Parser$string_concat,
        'Kind.Parser.sigma': Kind$Parser$sigma,
        'Kind.Parser.equality': Kind$Parser$equality,
        'Kind.Parser.inequality': Kind$Parser$inequality,
        'Kind.Parser.rewrite': Kind$Parser$rewrite,
        'Kind.Parser.annotation': Kind$Parser$annotation,
        'Kind.Parser.application.hole': Kind$Parser$application$hole,
        'Kind.Parser.suffix': Kind$Parser$suffix,
        'Kind.Parser.term': Kind$Parser$term,
        'Kind.Parser.name_term': Kind$Parser$name_term,
        'Kind.Binder.new': Kind$Binder$new,
        'Kind.Parser.binder.homo': Kind$Parser$binder$homo,
        'List.concat': List$concat,
        'List.flatten': List$flatten,
        'Kind.Parser.binder': Kind$Parser$binder,
        'List.length': List$length,
        'Kind.Parser.make_forall': Kind$Parser$make_forall,
        'List.at_last': List$at_last,
        'Kind.Term.var': Kind$Term$var,
        'Kind.Context.get_name_skips': Kind$Context$get_name_skips,
        'Kind.Name.eql': Kind$Name$eql,
        'Kind.Context.find.go': Kind$Context$find$go,
        'Kind.Context.find': Kind$Context$find,
        'Kind.Path.o': Kind$Path$o,
        'Kind.Path.i': Kind$Path$i,
        'Kind.Path.to_bits': Kind$Path$to_bits,
        'Kind.Term.bind': Kind$Term$bind,
        'BitsMap.set_if_empty.cps.go': BitsMap$set_if_empty$cps$go,
        'BitsMap.set_if_empty.cps': BitsMap$set_if_empty$cps,
        'BitsMap.set_if_empty': BitsMap$set_if_empty,
        'Kind.Map.set_if_empty': Kind$Map$set_if_empty,
        'Kind.Status.init': Kind$Status$init,
        'Kind.Map.def': Kind$Map$def,
        'Kind.Parser.file.def': Kind$Parser$file$def,
        'Kind.Constructor.new': Kind$Constructor$new,
        'Kind.Parser.constructor': Kind$Parser$constructor,
        'Kind.Datatype.new': Kind$Datatype$new,
        'Kind.Parser.datatype': Kind$Parser$datatype,
        'Kind.Datatype.build_term.motive.go': Kind$Datatype$build_term$motive$go,
        'Kind.Datatype.build_term.motive': Kind$Datatype$build_term$motive,
        'Kind.Datatype.build_term.constructor.go': Kind$Datatype$build_term$constructor$go,
        'Kind.Datatype.build_term.constructor': Kind$Datatype$build_term$constructor,
        'Kind.Datatype.build_term.constructors.go': Kind$Datatype$build_term$constructors$go,
        'Kind.Datatype.build_term.constructors': Kind$Datatype$build_term$constructors,
        'Kind.Datatype.build_term.go': Kind$Datatype$build_term$go,
        'Kind.Datatype.build_term': Kind$Datatype$build_term,
        'Kind.Datatype.build_type.go': Kind$Datatype$build_type$go,
        'Kind.Datatype.build_type': Kind$Datatype$build_type,
        'Kind.Constructor.build_term.opt.go': Kind$Constructor$build_term$opt$go,
        'Kind.Constructor.build_term.opt': Kind$Constructor$build_term$opt,
        'Kind.Constructor.build_term.go': Kind$Constructor$build_term$go,
        'Kind.Constructor.build_term': Kind$Constructor$build_term,
        'Kind.Constructor.build_type.go': Kind$Constructor$build_type$go,
        'Kind.Constructor.build_type': Kind$Constructor$build_type,
        'Kind.Parser.file.adt': Kind$Parser$file$adt,
        'Kind.Parser.file.end': Kind$Parser$file$end,
        'Kind.Parser.file': Kind$Parser$file,
        'String.join.go': String$join$go,
        'String.join': String$join,
        'Kind.Code.highlight.end': Kind$Code$highlight$end,
        'Maybe.extract': Maybe$extract,
        'Nat.is_zero': Nat$is_zero,
        'Nat.double': Nat$double,
        'String.pad_right': String$pad_right,
        'String.pad_left': String$pad_left,
        'Kind.Code.color': Kind$Code$color,
        'List.take': List$take,
        'Kind.Code.highlight.go': Kind$Code$highlight$go,
        'Kind.Code.highlight': Kind$Code$highlight,
        'Kind.Defs.read': Kind$Defs$read,
        'Kind.Synth.load.go': Kind$Synth$load$go,
        'Kind.Synth.files_of.make': Kind$Synth$files_of$make,
        'String.length.go': String$length$go,
        'String.length': String$length,
        'String.split.go': String$split$go,
        'String.split': String$split,
        'Kind.Synth.files_of': Kind$Synth$files_of,
        'Kind.Synth.load': Kind$Synth$load,
        'Kind.Status.wait': Kind$Status$wait,
        'Kind.Check': Kind$Check,
        'Kind.Check.result': Kind$Check$result,
        'Kind.Error.undefined_reference': Kind$Error$undefined_reference,
        'Kind.Error.waiting': Kind$Error$waiting,
        'Kind.Error.indirect': Kind$Error$indirect,
        'Maybe.mapped': Maybe$mapped,
        'Kind.MPath.o': Kind$MPath$o,
        'Kind.MPath.i': Kind$MPath$i,
        'Kind.Error.patch': Kind$Error$patch,
        'Kind.MPath.to_bits': Kind$MPath$to_bits,
        'Kind.Error.type_mismatch': Kind$Error$type_mismatch,
        'Kind.Error.show_goal': Kind$Error$show_goal,
        'Kind.Term.check.infer_with_types': Kind$Term$check$infer_with_types,
        'Kind.Term.normalize': Kind$Term$normalize,
        'Kind.Term.desugar_cse.motive.go': Kind$Term$desugar_cse$motive$go,
        'List.tail': List$tail,
        'Kind.Term.SmartMotive.vals.cont': Kind$Term$SmartMotive$vals$cont,
        'Kind.Term.SmartMotive.vals': Kind$Term$SmartMotive$vals,
        'Kind.Term.SmartMotive.nams.cont': Kind$Term$SmartMotive$nams$cont,
        'Kind.Term.SmartMotive.nams': Kind$Term$SmartMotive$nams,
        'List.zip': List$zip,
        'Nat.gte': Nat$gte,
        'Nat.sub': Nat$sub,
        'Kind.Term.serialize.go': Kind$Term$serialize$go,
        'Kind.Term.serialize': Kind$Term$serialize,
        'Bits.eql': Bits$eql,
        'Kind.Term.identical': Kind$Term$identical,
        'Kind.Term.SmartMotive.replace': Kind$Term$SmartMotive$replace,
        'Kind.Term.SmartMotive.make': Kind$Term$SmartMotive$make,
        'Kind.Term.desugar_cse.motive': Kind$Term$desugar_cse$motive,
        'Kind.Term.desugar_cse.argument': Kind$Term$desugar_cse$argument,
        'Maybe.or': Maybe$or,
        'Kind.Term.desugar_cse.cases': Kind$Term$desugar_cse$cases,
        'Kind.Term.desugar_cse': Kind$Term$desugar_cse,
        'Kind.Error.cant_infer': Kind$Error$cant_infer,
        'BitsSet.has': BitsSet$has,
        'BitsSet.mut.has': BitsSet$mut$has,
        'Kind.Term.equal.extra_holes.funari': Kind$Term$equal$extra_holes$funari,
        'Kind.Term.has_holes': Kind$Term$has_holes,
        'Kind.Term.equal.hole': Kind$Term$equal$hole,
        'Kind.Term.equal.extra_holes.filler': Kind$Term$equal$extra_holes$filler,
        'Kind.Term.equal.extra_holes': Kind$Term$equal$extra_holes,
        'BitsSet.set': BitsSet$set,
        'BitsSet.mut.set': BitsSet$mut$set,
        'Bool.eql': Bool$eql,
        'Kind.Term.equal.go': Kind$Term$equal$go,
        'BitsSet.new': BitsSet$new,
        'BitsSet.mut.new': BitsSet$mut$new,
        'Kind.Term.check': Kind$Term$check,
        'Kind.Path.nil': Kind$Path$nil,
        'Kind.MPath.nil': Kind$MPath$nil,
        'List.is_empty': List$is_empty,
        'IO.set_file': IO$set_file,
        'Kind.Core.var_name': Kind$Core$var_name,
        'Kind.Name.show': Kind$Name$show,
        'Bits.to_nat': Bits$to_nat,
        'U16.show_hex': U16$show_hex,
        'Kind.Code.escape.char': Kind$Code$escape$char,
        'Kind.Code.escape.go': Kind$Code$escape$go,
        'Kind.Code.escape': Kind$Code$escape,
        'Kind.Core.show.go': Kind$Core$show$go,
        'Kind.Core.show': Kind$Core$show,
        'Bool.show': Bool$show,
        'Kind.Term.patch_at': Kind$Term$patch_at,
        'Kind.Synth.fix': Kind$Synth$fix,
        'Kind.Status.fail': Kind$Status$fail,
        'Kind.Synth.one': Kind$Synth$one,
        'BitsMap.from_list': BitsMap$from_list,
        'Kind.Term.inline.names': Kind$Term$inline$names,
        'Kind.Term.inline.reduce': Kind$Term$inline$reduce,
        'Kind.Term.inline': Kind$Term$inline,
        'BitsMap.values.go': BitsMap$values$go,
        'BitsMap.values': BitsMap$values,
        'Kind.Defs.core': Kind$Defs$core,
        'Kind.api.io.term_to_core': Kind$api$io$term_to_core,
        'BitsMap.keys.go': BitsMap$keys$go,
        'BitsMap.keys': BitsMap$keys,
        'Kind.Synth.many': Kind$Synth$many,
        'Kind.Synth.file': Kind$Synth$file,
        'IO.put_string': IO$put_string,
        'IO.print': IO$print,
        'Kind.Term.show.as_nat.go': Kind$Term$show$as_nat$go,
        'Kind.Term.show.as_nat': Kind$Term$show$as_nat,
        'Kind.Term.show.is_ref': Kind$Term$show$is_ref,
        'Kind.Term.show.app.done': Kind$Term$show$app$done,
        'Kind.Term.show.app': Kind$Term$show$app,
        'BitsMap.to_list': BitsMap$to_list,
        'Kind.Term.show.go': Kind$Term$show$go,
        'Kind.Term.show': Kind$Term$show,
        'Kind.Defs.report.types': Kind$Defs$report$types,
        'List.filter': List$filter,
        'Kind.Error.is_undef': Kind$Error$is_undef,
        'Kind.Error.is_mistake': Kind$Error$is_mistake,
        'Kind.Error.is_goal': Kind$Error$is_goal,
        'Kind.Error.relevant': Kind$Error$relevant,
        'Map': Map,
        'String.to_bits': String$to_bits,
        'Map.from_list': Map$from_list,
        'Kind.Context.show': Kind$Context$show,
        'Kind.Term.expand_at': Kind$Term$expand_at,
        'Kind.Term.expand_ct': Kind$Term$expand_ct,
        'Kind.Term.expand': Kind$Term$expand,
        'Kind.Error.show': Kind$Error$show,
        'Kind.Error.origin': Kind$Error$origin,
        'Kind.Defs.report.errors': Kind$Defs$report$errors,
        'Kind.Defs.report': Kind$Defs$report,
        'Kind.api.io.check_file': Kind$api$io$check_file,
        'Kind.Synth.files.go': Kind$Synth$files$go,
        'Kind.Synth.remove_duplicate_names': Kind$Synth$remove_duplicate_names,
        'Kind.Synth.files': Kind$Synth$files,
        'Kind.api.io.check_files': Kind$api$io$check_files,
        'Kind.api.io.check_term': Kind$api$io$check_term,
        'Kind.api.io.show_term': Kind$api$io$show_term,
        'Kind.api.io.show_term_normal': Kind$api$io$show_term_normal,
        'IO.purify': IO$purify,
        'Kind.api.check_code': Kind$api$check_code,
        'Kind.Term.read': Kind$Term$read,
        'Kind.api.export': Kind$api$export,
    };
})();