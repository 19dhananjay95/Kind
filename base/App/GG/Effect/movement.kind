App.GG.Effect.movement(
  destination: App.GG.Coord
  move_frame: U64
  final_frame: U64
): App.GG.Effect<Unit>

  App.GG.Effect {
    get frame =  App.GG.Effect.frame.get
    get center = App.GG.Effect.coord.get_center
    get grid = App.GG.Effect.grid.get
    App.GG.Effect.frame.inc 
    without frame: App.GG.Effect.pass
    //log("frame: " | U64.show(frame) )
    switch U64.eql(frame) {
      0: 
        if App.GG.Coord.can_walk(center, destination, grid) then
          App.GG.Effect.animation.update(App.GG.Animation.movement)
        else
          App.GG.Effect.actions.reset
      move_frame: 
        App.GG.Effect.movement.move(destination)
      final_frame: 
        App.GG.Effect.actions.reset
    } default App.GG.Effect.pass
  }

App.GG.Effect.movement.arrow(
  arrow: App.GG.Arrow
  move_frame: U64
  final_frame: U64
): App.GG.Effect<Unit>
  App.GG.Effect {
    get center = App.GG.Effect.coord.get_center
    let destination = App.GG.Arrow.direction(center, arrow)
    App.GG.Effect.movement(destination, move_frame, final_frame)
  }

App.GG.Effect.movement.move_at(from: App.GG.Coord, destination: App.GG.Coord): App.GG.Effect<Unit>
  App.GG.Effect {
    get grid = App.GG.Effect.grid.get
    let can_walk = App.GG.Coord.can_walk(from, destination, grid)
    let new_grid =
      if can_walk then
        App.GG.Grid.move_creature(from, destination, grid)
      else
        grid
    App.GG.Effect.grid.set(new_grid)
  }  

App.GG.Effect.movement.move(new_pos: App.GG.Coord): App.GG.Effect<Unit>
  (center, origin, grid) 
  let new_grid = App.GG.Grid.move_creature(center, new_pos, grid)
  App.GG.Effect.Result.new!(unit, center, origin, new_grid, (enemy, img) img, 0, "")

App.GG.Effect.movement.player_movement(arrow: App.GG.Arrow): App.GG.Effect<Unit>
  App.GG.Effect.movement.arrow(arrow, 12, 24)

    
