#defs #list #errs #typs (((list #list String) (String.flatten (((List.cons String) typs) (((List.cons String) "\u{A}") (((List.cons String) (((errs #errs String) "All terms check.") #errs.head #errs.tail errs)) (List.nil String)))))) #list.head #list.tail !name = list.head; ((((((Fm.get Fm.Def) name) defs) #got String) ((((Fm.Defs.report.go defs) list.tail) errs) typs)) #got.value ((got.value #got.value String) #got.value.file #got.value.code #got.value.orig #got.value.name #got.value.term #got.value.type #got.value.isct #got.value.stat !typs = (String.flatten (((List.cons String) typs) (((List.cons Fm.Name) name) (((List.cons String) ": ") (((List.cons String) (Fm.Term.show got.value.type)) (((List.cons String) "\u{A}") (List.nil String))))))); (((((got.value.stat #got.value.stat String) ((((Fm.Defs.report.go defs) list.tail) errs) typs)) ((((Fm.Defs.report.go defs) list.tail) errs) typs)) ((((Fm.Defs.report.go defs) list.tail) errs) typs)) #got.value.stat.errors (((got.value.stat.errors #got.value.stat.errors String) ((((Fm.Defs.report.go defs) list.tail) errs) typs)) #got.value.stat.errors.head #got.value.stat.errors.tail !name_str = (Fm.Name.show got.value.name); !rel_errs = ((Fm.Error.relevant got.value.stat.errors) Bool.false); (((rel_errs #rel_errs String) ((((Fm.Defs.report.go defs) list.tail) errs) typs)) #rel_errs.head #rel_errs.tail !rel_msgs = ((((List.mapped Fm.Error) rel_errs) String) #err (String.flatten (((List.cons String) ((Fm.Error.show err) defs)) (((List.cons String) ((((Fm.Error.origin err) #origin String) "") #origin.value ((origin.value #origin.value String) #origin.value.fst #origin.value.snd (String.flatten (((List.cons String) "Inside \'") (((List.cons String) got.value.file) (((List.cons String) "\':\u{A}") (((List.cons String) (((Fm.highlight got.value.code) origin.value.fst) origin.value.snd)) (((List.cons String) "\u{A}") (List.nil String)))))))))) (List.nil String))))); !errs = (String.flatten (((List.cons String) errs) (((List.cons String) ((String.join "\u{A}") rel_msgs)) (((List.cons String) "\u{A}") (List.nil String))))); ((((Fm.Defs.report.go defs) list.tail) errs) typs)))))))