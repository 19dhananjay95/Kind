BBL.delete<K: Type, V: Type>(
  cmp : K -> K -> Cmp
  key: K, 
  map: BBL<K, V>, 
) : BBL<K, V>
  case map {
    tip: BBL.tip!!
    bin: 
      case cmp(key, map.key) {
        // when recursion comes back rebalance the node
        ltn: BBL.balance!!(map.key, map.val, BBL.delete!!(cmp, key, map.left), map.right)
        // when recursion comes back rebalance the node
        gtn: BBL.balance!!(map.key, map.val, map.left, BBL.delete!!(cmp, key, map.right))
        eql: 
          // get min value from right subtree
          let min = BBL.min!!(map.right)
          case min {
            //no nodes on right, return left; if left is empty then will return empty anyway
            none: map.left
            some:
                open min.value
                let right_without_min = BBL.delete_min!!(map.right) // deletes right's min, rebalancing this subtree
                BBL.balance!!(min.value.fst, min.value.snd, map.left, right_without_min) // rebalance his own node with the new right tree
          }!
      }!
  }!