Parser.text.go(text: String): Parser(Unit)
  (long, idx, code)
    case text {
      nil:
        Parser.Reply.value<Unit>(long, idx, code, Unit.new),
      cons: case code {
        nil:
          error_msg = String.flatten(["Expected '", text, "', found end of file."]);
          Parser.Reply.error_long<Unit>(idx, code, error_msg)
        cons:
          if U16.eql(text.head, code.head) then
            Parser.text.go(text.tail, long, Nat.succ(idx), code.tail)
          else
            let error = String.flatten(["Expected '", text, "', found '", String.cons(code.head, String.nil), "'."]);
            Parser.Reply.error_long<Unit>(idx, code, error)
      }
    }
