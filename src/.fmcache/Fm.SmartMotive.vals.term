#expr #type #defs (((((((((((((((((((Fm.Term.reduce type) defs) #type (List Fm.Term)) #type.name #type.indx ((((Fm.SmartMotive.vals.cont expr) type) (List.nil Fm.Term)) defs)) #type.name ((((Fm.SmartMotive.vals.cont expr) type) (List.nil Fm.Term)) defs)) ((((Fm.SmartMotive.vals.cont expr) type) (List.nil Fm.Term)) defs)) #type.eras #type.self #type.name #type.xtyp #type.body (((Fm.SmartMotive.vals expr) ((type.body Fm.Term.typ) Fm.Term.typ)) defs)) #type.name #type.body ((((Fm.SmartMotive.vals.cont expr) type) (List.nil Fm.Term)) defs)) #type.func #type.argm ((((Fm.SmartMotive.vals.cont expr) type) (List.nil Fm.Term)) defs)) #type.name #type.expr #type.body ((((Fm.SmartMotive.vals.cont expr) type) (List.nil Fm.Term)) defs)) #type.name #type.expr #type.body ((((Fm.SmartMotive.vals.cont expr) type) (List.nil Fm.Term)) defs)) #type.done #type.term #type.type ((((Fm.SmartMotive.vals.cont expr) type) (List.nil Fm.Term)) defs)) #type.name #type.dref #type.verb ((((Fm.SmartMotive.vals.cont expr) type) (List.nil Fm.Term)) defs)) #type.path ((((Fm.SmartMotive.vals.cont expr) type) (List.nil Fm.Term)) defs)) #type.natx ((((Fm.SmartMotive.vals.cont expr) type) (List.nil Fm.Term)) defs)) #type.chrx ((((Fm.SmartMotive.vals.cont expr) type) (List.nil Fm.Term)) defs)) #type.strx ((((Fm.SmartMotive.vals.cont expr) type) (List.nil Fm.Term)) defs)) #type.path #type.expr #type.name #type.with #type.cses #type.moti ((((Fm.SmartMotive.vals.cont expr) type) (List.nil Fm.Term)) defs)) #type.orig #type.expr ((((Fm.SmartMotive.vals.cont expr) type) (List.nil Fm.Term)) defs))