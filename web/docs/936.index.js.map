{"version":3,"sources":["webpack://kind-web/./src/apps/Web.Senhas.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iDAAiD,EAAE;AACnD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS,kBAAkB,EAAE,MAAM,GAAG;AACtC;AACA;AACA;AACA,aAAa,4BAA4B,GAAG;AAC5C;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iCAAiC,GAAG;AAC7D;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,kEAAkE,GAAG,UAAU,GAAG;AAClF;AACA,iCAAiC;AACjC;AACA;AACA,kFAAkF,GAAG;AACrF;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB,4BAA4B,GAAG,UAAU,GAAG;AACrE;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,6OAA6O,GAAG,GAAG,GAAG,gSAAgS,GAAG;AACzhB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrfile":"936.index.js","sourcesContent":["module.exports = (function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    const inst_unit = x => x(null);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c2;\n                return $2;\n            } else {\n                var $3 = c2;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c2;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c2($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');\n    const elim_bits = (x => {\n        var $14 = (() => c0 => c1 => c2 => {\n            var self = x;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'o':\n                    var $9 = self.slice(0, -1);\n                    var $10 = c1($9);\n                    return $10;\n                case 'i':\n                    var $11 = self.slice(0, -1);\n                    var $12 = c2($11);\n                    return $12;\n                case 'e':\n                    var $13 = c0;\n                    return $13;\n            };\n        })();\n        return $14;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $15 = u16_to_word(self);\n                    var $16 = c0($15);\n                    return $16;\n            };\n        })();\n        return $17;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $20 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $18 = u32_to_word(self);\n                    var $19 = c0($18);\n                    return $19;\n            };\n        })();\n        return $20;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $23 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $21 = u64_to_word(self);\n                    var $22 = c0($21);\n                    return $22;\n            };\n        })();\n        return $23;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $28 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $24 = c2;\n                return $24;\n            } else {\n                var $25 = self.charCodeAt(0);\n                var $26 = self.slice(1);\n                var $27 = c2($25)($26);\n                return $27;\n            };\n        })();\n        return $28;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $32 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $29 = buffer32_to_depth(self);\n                    var $30 = buffer32_to_u32array(self);\n                    var $31 = c0($29)($30);\n                    return $31;\n            };\n        })();\n        return $32;\n    });\n\n    function DOM$node$(_tag$1, _props$2, _style$3, _children$4) {\n        var $33 = ({\n            _: 'DOM.node',\n            'tag': _tag$1,\n            'props': _props$2,\n            'style': _style$3,\n            'children': _children$4\n        });\n        return $33;\n    };\n    const DOM$node = x0 => x1 => x2 => x3 => DOM$node$(x0, x1, x2, x3);\n\n    function BitsMap$(_A$1) {\n        var $34 = null;\n        return $34;\n    };\n    const BitsMap = x0 => BitsMap$(x0);\n\n    function Map$(_V$1) {\n        var $35 = null;\n        return $35;\n    };\n    const Map = x0 => Map$(x0);\n    const BitsMap$new = ({\n        _: 'BitsMap.new'\n    });\n\n    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {\n        var $36 = ({\n            _: 'BitsMap.tie',\n            'val': _val$2,\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $36;\n    };\n    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);\n\n    function Maybe$some$(_value$2) {\n        var $37 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $37;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n\n    function BitsMap$set$(_bits$2, _val$3, _map$4) {\n        var self = _bits$2;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $39 = self.slice(0, -1);\n                var self = _map$4;\n                switch (self._) {\n                    case 'BitsMap.tie':\n                        var $41 = self.val;\n                        var $42 = self.lft;\n                        var $43 = self.rgt;\n                        var $44 = BitsMap$tie$($41, BitsMap$set$($39, _val$3, $42), $43);\n                        var $40 = $44;\n                        break;\n                    case 'BitsMap.new':\n                        var $45 = BitsMap$tie$(Maybe$none, BitsMap$set$($39, _val$3, BitsMap$new), BitsMap$new);\n                        var $40 = $45;\n                        break;\n                };\n                var $38 = $40;\n                break;\n            case 'i':\n                var $46 = self.slice(0, -1);\n                var self = _map$4;\n                switch (self._) {\n                    case 'BitsMap.tie':\n                        var $48 = self.val;\n                        var $49 = self.lft;\n                        var $50 = self.rgt;\n                        var $51 = BitsMap$tie$($48, $49, BitsMap$set$($46, _val$3, $50));\n                        var $47 = $51;\n                        break;\n                    case 'BitsMap.new':\n                        var $52 = BitsMap$tie$(Maybe$none, BitsMap$new, BitsMap$set$($46, _val$3, BitsMap$new));\n                        var $47 = $52;\n                        break;\n                };\n                var $38 = $47;\n                break;\n            case 'e':\n                var self = _map$4;\n                switch (self._) {\n                    case 'BitsMap.tie':\n                        var $54 = self.lft;\n                        var $55 = self.rgt;\n                        var $56 = BitsMap$tie$(Maybe$some$(_val$3), $54, $55);\n                        var $53 = $56;\n                        break;\n                    case 'BitsMap.new':\n                        var $57 = BitsMap$tie$(Maybe$some$(_val$3), BitsMap$new, BitsMap$new);\n                        var $53 = $57;\n                        break;\n                };\n                var $38 = $53;\n                break;\n        };\n        return $38;\n    };\n    const BitsMap$set = x0 => x1 => x2 => BitsMap$set$(x0, x1, x2);\n    const Bits$e = '';\n    const Bits$o = a0 => (a0 + '0');\n    const Bits$i = a0 => (a0 + '1');\n    const Bits$concat = a0 => a1 => (a1 + a0);\n\n    function Word$to_bits$(_a$2) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $59 = self.pred;\n                var $60 = (Word$to_bits$($59) + '0');\n                var $58 = $60;\n                break;\n            case 'Word.i':\n                var $61 = self.pred;\n                var $62 = (Word$to_bits$($61) + '1');\n                var $58 = $62;\n                break;\n            case 'Word.e':\n                var $63 = Bits$e;\n                var $58 = $63;\n                break;\n        };\n        return $58;\n    };\n    const Word$to_bits = x0 => Word$to_bits$(x0);\n    const U16$to_bits = a0 => (u16_to_bits(a0));\n\n    function String$to_bits$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $65 = Bits$e;\n            var $64 = $65;\n        } else {\n            var $66 = self.charCodeAt(0);\n            var $67 = self.slice(1);\n            var $68 = (String$to_bits$($67) + (u16_to_bits($66)));\n            var $64 = $68;\n        };\n        return $64;\n    };\n    const String$to_bits = x0 => String$to_bits$(x0);\n\n    function Map$from_list$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $70 = self.head;\n                var $71 = self.tail;\n                var self = $70;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $73 = self.fst;\n                        var $74 = self.snd;\n                        var $75 = BitsMap$set$(String$to_bits$($73), $74, Map$from_list$($71));\n                        var $72 = $75;\n                        break;\n                };\n                var $69 = $72;\n                break;\n            case 'List.nil':\n                var $76 = BitsMap$new;\n                var $69 = $76;\n                break;\n        };\n        return $69;\n    };\n    const Map$from_list = x0 => Map$from_list$(x0);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function Pair$(_A$1, _B$2) {\n        var $77 = null;\n        return $77;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n\n    function List$cons$(_head$2, _tail$3) {\n        var $78 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $78;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function DOM$text$(_value$1) {\n        var $79 = ({\n            _: 'DOM.text',\n            'value': _value$1\n        });\n        return $79;\n    };\n    const DOM$text = x0 => DOM$text$(x0);\n\n    function IO$(_A$1) {\n        var $80 = null;\n        return $80;\n    };\n    const IO = x0 => IO$(x0);\n\n    function IO$ask$(_query$2, _param$3, _then$4) {\n        var $81 = ({\n            _: 'IO.ask',\n            'query': _query$2,\n            'param': _param$3,\n            'then': _then$4\n        });\n        return $81;\n    };\n    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);\n\n    function IO$bind$(_a$3, _f$4) {\n        var self = _a$3;\n        switch (self._) {\n            case 'IO.end':\n                var $83 = self.value;\n                var $84 = _f$4($83);\n                var $82 = $84;\n                break;\n            case 'IO.ask':\n                var $85 = self.query;\n                var $86 = self.param;\n                var $87 = self.then;\n                var $88 = IO$ask$($85, $86, (_x$8 => {\n                    var $89 = IO$bind$($87(_x$8), _f$4);\n                    return $89;\n                }));\n                var $82 = $88;\n                break;\n        };\n        return $82;\n    };\n    const IO$bind = x0 => x1 => IO$bind$(x0, x1);\n\n    function IO$end$(_value$2) {\n        var $90 = ({\n            _: 'IO.end',\n            'value': _value$2\n        });\n        return $90;\n    };\n    const IO$end = x0 => IO$end$(x0);\n\n    function IO$monad$(_new$2) {\n        var $91 = _new$2(IO$bind)(IO$end);\n        return $91;\n    };\n    const IO$monad = x0 => IO$monad$(x0);\n\n    function Dynamic$new$(_value$2) {\n        var $92 = ({\n            _: 'Dynamic.new',\n            'value': _value$2\n        });\n        return $92;\n    };\n    const Dynamic$new = x0 => Dynamic$new$(x0);\n    const Unit$new = null;\n    const App$pass = IO$monad$((_m$bind$1 => _m$pure$2 => {\n        var $93 = _m$pure$2;\n        return $93;\n    }))(Dynamic$new$(Unit$new));\n\n    function Parser$Reply$(_V$1) {\n        var $94 = null;\n        return $94;\n    };\n    const Parser$Reply = x0 => Parser$Reply$(x0);\n\n    function List$(_A$1) {\n        var $95 = null;\n        return $95;\n    };\n    const List = x0 => List$(x0);\n\n    function Parser$Reply$error$(_idx$2, _code$3, _err$4) {\n        var $96 = ({\n            _: 'Parser.Reply.error',\n            'idx': _idx$2,\n            'code': _code$3,\n            'err': _err$4\n        });\n        return $96;\n    };\n    const Parser$Reply$error = x0 => x1 => x2 => Parser$Reply$error$(x0, x1, x2);\n\n    function Parser$Reply$value$(_idx$2, _code$3, _val$4) {\n        var $97 = ({\n            _: 'Parser.Reply.value',\n            'idx': _idx$2,\n            'code': _code$3,\n            'val': _val$4\n        });\n        return $97;\n    };\n    const Parser$Reply$value = x0 => x1 => x2 => Parser$Reply$value$(x0, x1, x2);\n\n    function Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5) {\n        var Parser$many$go$ = (_parse$2, _values$3, _idx$4, _code$5) => ({\n            ctr: 'TCO',\n            arg: [_parse$2, _values$3, _idx$4, _code$5]\n        });\n        var Parser$many$go = _parse$2 => _values$3 => _idx$4 => _code$5 => Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5);\n        var arg = [_parse$2, _values$3, _idx$4, _code$5];\n        while (true) {\n            let [_parse$2, _values$3, _idx$4, _code$5] = arg;\n            var R = (() => {\n                var self = _parse$2(_idx$4)(_code$5);\n                switch (self._) {\n                    case 'Parser.Reply.value':\n                        var $98 = self.idx;\n                        var $99 = self.code;\n                        var $100 = self.val;\n                        var $101 = Parser$many$go$(_parse$2, (_xs$9 => {\n                            var $102 = _values$3(List$cons$($100, _xs$9));\n                            return $102;\n                        }), $98, $99);\n                        return $101;\n                    case 'Parser.Reply.error':\n                        var $103 = Parser$Reply$value$(_idx$4, _code$5, _values$3(List$nil));\n                        return $103;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Parser$many$go = x0 => x1 => x2 => x3 => Parser$many$go$(x0, x1, x2, x3);\n\n    function Parser$many$(_parser$2) {\n        var $104 = Parser$many$go(_parser$2)((_x$3 => {\n            var $105 = _x$3;\n            return $105;\n        }));\n        return $104;\n    };\n    const Parser$many = x0 => Parser$many$(x0);\n\n    function Parser$many1$(_parser$2, _idx$3, _code$4) {\n        var self = _parser$2(_idx$3)(_code$4);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $107 = self.idx;\n                var $108 = self.code;\n                var $109 = self.err;\n                var $110 = Parser$Reply$error$($107, $108, $109);\n                var $106 = $110;\n                break;\n            case 'Parser.Reply.value':\n                var $111 = self.idx;\n                var $112 = self.code;\n                var $113 = self.val;\n                var self = Parser$many$(_parser$2)($111)($112);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $115 = self.idx;\n                        var $116 = self.code;\n                        var $117 = self.err;\n                        var $118 = Parser$Reply$error$($115, $116, $117);\n                        var $114 = $118;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $119 = self.idx;\n                        var $120 = self.code;\n                        var $121 = self.val;\n                        var $122 = Parser$Reply$value$($119, $120, List$cons$($113, $121));\n                        var $114 = $122;\n                        break;\n                };\n                var $106 = $114;\n                break;\n        };\n        return $106;\n    };\n    const Parser$many1 = x0 => x1 => x2 => Parser$many1$(x0, x1, x2);\n\n    function Nat$succ$(_pred$1) {\n        var $123 = 1n + _pred$1;\n        return $123;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Bool$false = false;\n    const Bool$true = true;\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $125 = Bool$false;\n                var $124 = $125;\n                break;\n            case 'Cmp.eql':\n                var $126 = Bool$true;\n                var $124 = $126;\n                break;\n        };\n        return $124;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $128 = self.pred;\n                var $129 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $131 = self.pred;\n                            var $132 = (_a$pred$10 => {\n                                var $133 = Word$cmp$go$(_a$pred$10, $131, _c$4);\n                                return $133;\n                            });\n                            var $130 = $132;\n                            break;\n                        case 'Word.i':\n                            var $134 = self.pred;\n                            var $135 = (_a$pred$10 => {\n                                var $136 = Word$cmp$go$(_a$pred$10, $134, Cmp$ltn);\n                                return $136;\n                            });\n                            var $130 = $135;\n                            break;\n                        case 'Word.e':\n                            var $137 = (_a$pred$8 => {\n                                var $138 = _c$4;\n                                return $138;\n                            });\n                            var $130 = $137;\n                            break;\n                    };\n                    var $130 = $130($128);\n                    return $130;\n                });\n                var $127 = $129;\n                break;\n            case 'Word.i':\n                var $139 = self.pred;\n                var $140 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $142 = self.pred;\n                            var $143 = (_a$pred$10 => {\n                                var $144 = Word$cmp$go$(_a$pred$10, $142, Cmp$gtn);\n                                return $144;\n                            });\n                            var $141 = $143;\n                            break;\n                        case 'Word.i':\n                            var $145 = self.pred;\n                            var $146 = (_a$pred$10 => {\n                                var $147 = Word$cmp$go$(_a$pred$10, $145, _c$4);\n                                return $147;\n                            });\n                            var $141 = $146;\n                            break;\n                        case 'Word.e':\n                            var $148 = (_a$pred$8 => {\n                                var $149 = _c$4;\n                                return $149;\n                            });\n                            var $141 = $148;\n                            break;\n                    };\n                    var $141 = $141($139);\n                    return $141;\n                });\n                var $127 = $140;\n                break;\n            case 'Word.e':\n                var $150 = (_b$5 => {\n                    var $151 = _c$4;\n                    return $151;\n                });\n                var $127 = $150;\n                break;\n        };\n        var $127 = $127(_b$3);\n        return $127;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $152 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $152;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $153 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $153;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n    const Nat$zero = 0n;\n    const U16$eql = a0 => a1 => (a0 === a1);\n\n    function Parser$digit$(_idx$1, _code$2) {\n        var self = _code$2;\n        if (self.length === 0) {\n            var $155 = Parser$Reply$error$(_idx$1, _code$2, \"Not a digit.\");\n            var $154 = $155;\n        } else {\n            var $156 = self.charCodeAt(0);\n            var $157 = self.slice(1);\n            var _sidx$5 = Nat$succ$(_idx$1);\n            var self = ($156 === 48);\n            if (self) {\n                var $159 = Parser$Reply$value$(_sidx$5, $157, 0n);\n                var $158 = $159;\n            } else {\n                var self = ($156 === 49);\n                if (self) {\n                    var $161 = Parser$Reply$value$(_sidx$5, $157, 1n);\n                    var $160 = $161;\n                } else {\n                    var self = ($156 === 50);\n                    if (self) {\n                        var $163 = Parser$Reply$value$(_sidx$5, $157, 2n);\n                        var $162 = $163;\n                    } else {\n                        var self = ($156 === 51);\n                        if (self) {\n                            var $165 = Parser$Reply$value$(_sidx$5, $157, 3n);\n                            var $164 = $165;\n                        } else {\n                            var self = ($156 === 52);\n                            if (self) {\n                                var $167 = Parser$Reply$value$(_sidx$5, $157, 4n);\n                                var $166 = $167;\n                            } else {\n                                var self = ($156 === 53);\n                                if (self) {\n                                    var $169 = Parser$Reply$value$(_sidx$5, $157, 5n);\n                                    var $168 = $169;\n                                } else {\n                                    var self = ($156 === 54);\n                                    if (self) {\n                                        var $171 = Parser$Reply$value$(_sidx$5, $157, 6n);\n                                        var $170 = $171;\n                                    } else {\n                                        var self = ($156 === 55);\n                                        if (self) {\n                                            var $173 = Parser$Reply$value$(_sidx$5, $157, 7n);\n                                            var $172 = $173;\n                                        } else {\n                                            var self = ($156 === 56);\n                                            if (self) {\n                                                var $175 = Parser$Reply$value$(_sidx$5, $157, 8n);\n                                                var $174 = $175;\n                                            } else {\n                                                var self = ($156 === 57);\n                                                if (self) {\n                                                    var $177 = Parser$Reply$value$(_sidx$5, $157, 9n);\n                                                    var $176 = $177;\n                                                } else {\n                                                    var $178 = Parser$Reply$error$(_idx$1, _code$2, \"Not a digit.\");\n                                                    var $176 = $178;\n                                                };\n                                                var $174 = $176;\n                                            };\n                                            var $172 = $174;\n                                        };\n                                        var $170 = $172;\n                                    };\n                                    var $168 = $170;\n                                };\n                                var $166 = $168;\n                            };\n                            var $164 = $166;\n                        };\n                        var $162 = $164;\n                    };\n                    var $160 = $162;\n                };\n                var $158 = $160;\n            };\n            var $154 = $158;\n        };\n        return $154;\n    };\n    const Parser$digit = x0 => x1 => Parser$digit$(x0, x1);\n    const Nat$add = a0 => a1 => (a0 + a1);\n    const Nat$mul = a0 => a1 => (a0 * a1);\n\n    function Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4) {\n        var Nat$from_base$go$ = (_b$1, _ds$2, _p$3, _res$4) => ({\n            ctr: 'TCO',\n            arg: [_b$1, _ds$2, _p$3, _res$4]\n        });\n        var Nat$from_base$go = _b$1 => _ds$2 => _p$3 => _res$4 => Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4);\n        var arg = [_b$1, _ds$2, _p$3, _res$4];\n        while (true) {\n            let [_b$1, _ds$2, _p$3, _res$4] = arg;\n            var R = (() => {\n                var self = _ds$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $179 = self.head;\n                        var $180 = self.tail;\n                        var $181 = Nat$from_base$go$(_b$1, $180, (_b$1 * _p$3), (($179 * _p$3) + _res$4));\n                        return $181;\n                    case 'List.nil':\n                        var $182 = _res$4;\n                        return $182;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$from_base$go = x0 => x1 => x2 => x3 => Nat$from_base$go$(x0, x1, x2, x3);\n\n    function List$reverse$go$(_xs$2, _res$3) {\n        var List$reverse$go$ = (_xs$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_xs$2, _res$3]\n        });\n        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);\n        var arg = [_xs$2, _res$3];\n        while (true) {\n            let [_xs$2, _res$3] = arg;\n            var R = (() => {\n                var self = _xs$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $183 = self.head;\n                        var $184 = self.tail;\n                        var $185 = List$reverse$go$($184, List$cons$($183, _res$3));\n                        return $185;\n                    case 'List.nil':\n                        var $186 = _res$3;\n                        return $186;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);\n\n    function List$reverse$(_xs$2) {\n        var $187 = List$reverse$go$(_xs$2, List$nil);\n        return $187;\n    };\n    const List$reverse = x0 => List$reverse$(x0);\n\n    function Nat$from_base$(_base$1, _ds$2) {\n        var $188 = Nat$from_base$go$(_base$1, List$reverse$(_ds$2), 1n, 0n);\n        return $188;\n    };\n    const Nat$from_base = x0 => x1 => Nat$from_base$(x0, x1);\n\n    function Parser$nat$(_idx$1, _code$2) {\n        var self = Parser$many1$(Parser$digit, _idx$1, _code$2);\n        switch (self._) {\n            case 'Parser.Reply.error':\n                var $190 = self.idx;\n                var $191 = self.code;\n                var $192 = self.err;\n                var $193 = Parser$Reply$error$($190, $191, $192);\n                var $189 = $193;\n                break;\n            case 'Parser.Reply.value':\n                var $194 = self.idx;\n                var $195 = self.code;\n                var $196 = self.val;\n                var $197 = Parser$Reply$value$($194, $195, Nat$from_base$(10n, $196));\n                var $189 = $197;\n                break;\n        };\n        return $189;\n    };\n    const Parser$nat = x0 => x1 => Parser$nat$(x0, x1);\n\n    function Nat$read$(_str$1) {\n        var _p$2 = Parser$nat$(0n, _str$1);\n        var self = _p$2;\n        switch (self._) {\n            case 'Parser.Reply.value':\n                var $199 = self.val;\n                var $200 = $199;\n                var $198 = $200;\n                break;\n            case 'Parser.Reply.error':\n                var $201 = 0n;\n                var $198 = $201;\n                break;\n        };\n        return $198;\n    };\n    const Nat$read = x0 => Nat$read$(x0);\n    const IO$get_time = IO$ask$(\"get_time\", \"\", (_time$1 => {\n        var $202 = IO$end$(Nat$read$(_time$1));\n        return $202;\n    }));\n\n    function Nat$mod$go$(_n$1, _m$2, _r$3) {\n        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _r$3]\n        });\n        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);\n        var arg = [_n$1, _m$2, _r$3];\n        while (true) {\n            let [_n$1, _m$2, _r$3] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $203 = Nat$mod$go$(_n$1, _r$3, _m$2);\n                    return $203;\n                } else {\n                    var $204 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $206 = _r$3;\n                        var $205 = $206;\n                    } else {\n                        var $207 = (self - 1n);\n                        var $208 = Nat$mod$go$($207, $204, Nat$succ$(_r$3));\n                        var $205 = $208;\n                    };\n                    return $205;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);\n    const Nat$mod = a0 => a1 => (a0 % a1);\n\n    function Nat$random$(_seed$1) {\n        var _m$2 = 1664525n;\n        var _i$3 = 1013904223n;\n        var _q$4 = 4294967296n;\n        var $209 = (((_seed$1 * _m$2) + _i$3) % _q$4);\n        return $209;\n    };\n    const Nat$random = x0 => Nat$random$(x0);\n\n    function IO$random$(_a$1) {\n        var $210 = IO$monad$((_m$bind$2 => _m$pure$3 => {\n            var $211 = _m$bind$2;\n            return $211;\n        }))(IO$get_time)((_seed$2 => {\n            var _seed$3 = Nat$random$(_seed$2);\n            var $212 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n                var $213 = _m$pure$5;\n                return $213;\n            }))((_seed$3 % _a$1));\n            return $212;\n        }));\n        return $210;\n    };\n    const IO$random = x0 => IO$random$(x0);\n\n    function Nat$randoms$(_len$1, _seed$2, _max$3) {\n        var self = _len$1;\n        if (self === 0n) {\n            var $215 = List$nil;\n            var $214 = $215;\n        } else {\n            var $216 = (self - 1n);\n            var _new_seed$5 = Nat$random$(_seed$2);\n            var $217 = List$cons$((_new_seed$5 % _max$3), Nat$randoms$($216, _new_seed$5, _max$3));\n            var $214 = $217;\n        };\n        return $214;\n    };\n    const Nat$randoms = x0 => x1 => x2 => Nat$randoms$(x0, x1, x2);\n\n    function IO$randoms$(_len$1, _max$2) {\n        var $218 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n            var $219 = _m$bind$3;\n            return $219;\n        }))(IO$get_time)((_seed$3 => {\n            var $220 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n                var $221 = _m$pure$5;\n                return $221;\n            }))(Nat$randoms$(_len$1, _seed$3, _max$2));\n            return $220;\n        }));\n        return $218;\n    };\n    const IO$randoms = x0 => x1 => IO$randoms$(x0, x1);\n\n    function Maybe$(_A$1) {\n        var $222 = null;\n        return $222;\n    };\n    const Maybe = x0 => Maybe$(x0);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $223 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $223;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n\n    function List$concat$(_as$2, _bs$3) {\n        var self = _as$2;\n        switch (self._) {\n            case 'List.cons':\n                var $225 = self.head;\n                var $226 = self.tail;\n                var $227 = List$cons$($225, List$concat$($226, _bs$3));\n                var $224 = $227;\n                break;\n            case 'List.nil':\n                var $228 = _bs$3;\n                var $224 = $228;\n                break;\n        };\n        return $224;\n    };\n    const List$concat = x0 => x1 => List$concat$(x0, x1);\n\n    function List$pop_at$go$(_idx$2, _list$3, _searched_list$4) {\n        var List$pop_at$go$ = (_idx$2, _list$3, _searched_list$4) => ({\n            ctr: 'TCO',\n            arg: [_idx$2, _list$3, _searched_list$4]\n        });\n        var List$pop_at$go = _idx$2 => _list$3 => _searched_list$4 => List$pop_at$go$(_idx$2, _list$3, _searched_list$4);\n        var arg = [_idx$2, _list$3, _searched_list$4];\n        while (true) {\n            let [_idx$2, _list$3, _searched_list$4] = arg;\n            var R = (() => {\n                var self = _idx$2;\n                if (self === 0n) {\n                    var self = _list$3;\n                    switch (self._) {\n                        case 'List.cons':\n                            var $230 = self.head;\n                            var $231 = self.tail;\n                            var $232 = Pair$new$(Maybe$some$($230), List$concat$(_searched_list$4, $231));\n                            var $229 = $232;\n                            break;\n                        case 'List.nil':\n                            var $233 = Pair$new$(Maybe$none, _searched_list$4);\n                            var $229 = $233;\n                            break;\n                    };\n                    return $229;\n                } else {\n                    var $234 = (self - 1n);\n                    var self = _list$3;\n                    switch (self._) {\n                        case 'List.cons':\n                            var $236 = self.head;\n                            var $237 = self.tail;\n                            var $238 = List$pop_at$go$($234, $237, List$concat$(_searched_list$4, List$cons$($236, List$nil)));\n                            var $235 = $238;\n                            break;\n                        case 'List.nil':\n                            var $239 = Pair$new$(Maybe$none, _searched_list$4);\n                            var $235 = $239;\n                            break;\n                    };\n                    return $235;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$pop_at$go = x0 => x1 => x2 => List$pop_at$go$(x0, x1, x2);\n\n    function List$pop_at$(_idx$2, _list$3) {\n        var $240 = List$pop_at$go$(_idx$2, _list$3, List$nil);\n        return $240;\n    };\n    const List$pop_at = x0 => x1 => List$pop_at$(x0, x1);\n\n    function List$random$(_xs$1, _ys$2, _zs$3) {\n        var List$random$ = (_xs$1, _ys$2, _zs$3) => ({\n            ctr: 'TCO',\n            arg: [_xs$1, _ys$2, _zs$3]\n        });\n        var List$random = _xs$1 => _ys$2 => _zs$3 => List$random$(_xs$1, _ys$2, _zs$3);\n        var arg = [_xs$1, _ys$2, _zs$3];\n        while (true) {\n            let [_xs$1, _ys$2, _zs$3] = arg;\n            var R = (() => {\n                var self = _xs$1;\n                switch (self._) {\n                    case 'List.cons':\n                        var $241 = self.head;\n                        var $242 = self.tail;\n                        var self = _ys$2;\n                        switch (self._) {\n                            case 'List.nil':\n                                var $244 = List$nil;\n                                var $243 = $244;\n                                break;\n                            case 'List.cons':\n                                var _a$8 = List$pop_at$($241, _ys$2);\n                                var self = _a$8;\n                                switch (self._) {\n                                    case 'Pair.new':\n                                        var $246 = self.fst;\n                                        var $247 = self.snd;\n                                        var self = $246;\n                                        switch (self._) {\n                                            case 'Maybe.some':\n                                                var $249 = self.value;\n                                                var $250 = List$random$($242, $247, List$cons$($249, _zs$3));\n                                                var $248 = $250;\n                                                break;\n                                            case 'Maybe.none':\n                                                var $251 = List$random$(List$cons$((Nat$random$($241) % 10n), $242), _ys$2, _zs$3);\n                                                var $248 = $251;\n                                                break;\n                                        };\n                                        var $245 = $248;\n                                        break;\n                                };\n                                var $243 = $245;\n                                break;\n                        };\n                        return $243;\n                    case 'List.nil':\n                        var $252 = _zs$3;\n                        return $252;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$random = x0 => x1 => x2 => List$random$(x0, x1, x2);\n\n    function IO$put_string$(_text$1) {\n        var $253 = IO$ask$(\"put_string\", _text$1, (_skip$2 => {\n            var $254 = IO$end$(Unit$new);\n            return $254;\n        }));\n        return $253;\n    };\n    const IO$put_string = x0 => IO$put_string$(x0);\n\n    function String$cons$(_head$1, _tail$2) {\n        var $255 = (String.fromCharCode(_head$1) + _tail$2);\n        return $255;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function IO$print$(_text$1) {\n        var $256 = IO$put_string$((_text$1 + \"\\u{a}\"));\n        return $256;\n    };\n    const IO$print = x0 => IO$print$(x0);\n\n    function List$fold$(_list$2, _nil$4, _cons$5) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.cons':\n                var $258 = self.head;\n                var $259 = self.tail;\n                var $260 = _cons$5($258)(List$fold$($259, _nil$4, _cons$5));\n                var $257 = $260;\n                break;\n            case 'List.nil':\n                var $261 = _nil$4;\n                var $257 = $261;\n                break;\n        };\n        return $257;\n    };\n    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);\n\n    function Either$(_A$1, _B$2) {\n        var $262 = null;\n        return $262;\n    };\n    const Either = x0 => x1 => Either$(x0, x1);\n\n    function Either$left$(_value$3) {\n        var $263 = ({\n            _: 'Either.left',\n            'value': _value$3\n        });\n        return $263;\n    };\n    const Either$left = x0 => Either$left$(x0);\n\n    function Either$right$(_value$3) {\n        var $264 = ({\n            _: 'Either.right',\n            'value': _value$3\n        });\n        return $264;\n    };\n    const Either$right = x0 => Either$right$(x0);\n\n    function Nat$sub_rem$(_n$1, _m$2) {\n        var Nat$sub_rem$ = (_n$1, _m$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2]\n        });\n        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);\n        var arg = [_n$1, _m$2];\n        while (true) {\n            let [_n$1, _m$2] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $265 = Either$left$(_n$1);\n                    return $265;\n                } else {\n                    var $266 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $268 = Either$right$(Nat$succ$($266));\n                        var $267 = $268;\n                    } else {\n                        var $269 = (self - 1n);\n                        var $270 = Nat$sub_rem$($269, $266);\n                        var $267 = $270;\n                    };\n                    return $267;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);\n\n    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {\n        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _d$3]\n        });\n        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);\n        var arg = [_n$1, _m$2, _d$3];\n        while (true) {\n            let [_n$1, _m$2, _d$3] = arg;\n            var R = (() => {\n                var self = Nat$sub_rem$(_n$1, _m$2);\n                switch (self._) {\n                    case 'Either.left':\n                        var $271 = self.value;\n                        var $272 = Nat$div_mod$go$($271, _m$2, Nat$succ$(_d$3));\n                        return $272;\n                    case 'Either.right':\n                        var $273 = Pair$new$(_d$3, _n$1);\n                        return $273;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);\n    const Nat$div_mod = a0 => a1 => (({\n        _: 'Pair.new',\n        'fst': a0 / a1,\n        'snd': a0 % a1\n    }));\n\n    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {\n        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_base$1, _nat$2, _res$3]\n        });\n        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);\n        var arg = [_base$1, _nat$2, _res$3];\n        while (true) {\n            let [_base$1, _nat$2, _res$3] = arg;\n            var R = (() => {\n                var self = (({\n                    _: 'Pair.new',\n                    'fst': _nat$2 / _base$1,\n                    'snd': _nat$2 % _base$1\n                }));\n                switch (self._) {\n                    case 'Pair.new':\n                        var $274 = self.fst;\n                        var $275 = self.snd;\n                        var self = $274;\n                        if (self === 0n) {\n                            var $277 = List$cons$($275, _res$3);\n                            var $276 = $277;\n                        } else {\n                            var $278 = (self - 1n);\n                            var $279 = Nat$to_base$go$(_base$1, $274, List$cons$($275, _res$3));\n                            var $276 = $279;\n                        };\n                        return $276;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);\n\n    function Nat$to_base$(_base$1, _nat$2) {\n        var $280 = Nat$to_base$go$(_base$1, _nat$2, List$nil);\n        return $280;\n    };\n    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);\n    const String$nil = '';\n    const Bool$and = a0 => a1 => (a0 && a1);\n    const Nat$gtn = a0 => a1 => (a0 > a1);\n    const Nat$lte = a0 => a1 => (a0 <= a1);\n\n    function List$at$(_index$2, _list$3) {\n        var List$at$ = (_index$2, _list$3) => ({\n            ctr: 'TCO',\n            arg: [_index$2, _list$3]\n        });\n        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);\n        var arg = [_index$2, _list$3];\n        while (true) {\n            let [_index$2, _list$3] = arg;\n            var R = (() => {\n                var self = _list$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $281 = self.head;\n                        var $282 = self.tail;\n                        var self = _index$2;\n                        if (self === 0n) {\n                            var $284 = Maybe$some$($281);\n                            var $283 = $284;\n                        } else {\n                            var $285 = (self - 1n);\n                            var $286 = List$at$($285, $282);\n                            var $283 = $286;\n                        };\n                        return $283;\n                    case 'List.nil':\n                        var $287 = Maybe$none;\n                        return $287;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$at = x0 => x1 => List$at$(x0, x1);\n\n    function Nat$show_digit$(_base$1, _n$2) {\n        var _m$3 = (_n$2 % _base$1);\n        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n        var self = ((_base$1 > 0n) && (_base$1 <= 64n));\n        if (self) {\n            var self = List$at$(_m$3, _base64$4);\n            switch (self._) {\n                case 'Maybe.some':\n                    var $290 = self.value;\n                    var $291 = $290;\n                    var $289 = $291;\n                    break;\n                case 'Maybe.none':\n                    var $292 = 35;\n                    var $289 = $292;\n                    break;\n            };\n            var $288 = $289;\n        } else {\n            var $293 = 35;\n            var $288 = $293;\n        };\n        return $288;\n    };\n    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);\n\n    function Nat$to_string_base$(_base$1, _nat$2) {\n        var $294 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {\n            var $295 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);\n            return $295;\n        }));\n        return $294;\n    };\n    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);\n\n    function Nat$show$(_n$1) {\n        var $296 = Nat$to_string_base$(10n, _n$1);\n        return $296;\n    };\n    const Nat$show = x0 => Nat$show$(x0);\n    const IO$get_line = IO$ask$(\"get_line\", \"\", (_line$1 => {\n        var $297 = IO$end$(_line$1);\n        return $297;\n    }));\n\n    function Char$eql$(_a$1, _b$2) {\n        var $298 = (_a$1 === _b$2);\n        return $298;\n    };\n    const Char$eql = x0 => x1 => Char$eql$(x0, x1);\n\n    function String$starts_with$(_xs$1, _match$2) {\n        var String$starts_with$ = (_xs$1, _match$2) => ({\n            ctr: 'TCO',\n            arg: [_xs$1, _match$2]\n        });\n        var String$starts_with = _xs$1 => _match$2 => String$starts_with$(_xs$1, _match$2);\n        var arg = [_xs$1, _match$2];\n        while (true) {\n            let [_xs$1, _match$2] = arg;\n            var R = (() => {\n                var self = _match$2;\n                if (self.length === 0) {\n                    var $299 = Bool$true;\n                    return $299;\n                } else {\n                    var $300 = self.charCodeAt(0);\n                    var $301 = self.slice(1);\n                    var self = _xs$1;\n                    if (self.length === 0) {\n                        var $303 = Bool$false;\n                        var $302 = $303;\n                    } else {\n                        var $304 = self.charCodeAt(0);\n                        var $305 = self.slice(1);\n                        var self = Char$eql$($300, $304);\n                        if (self) {\n                            var $307 = String$starts_with$($305, $301);\n                            var $306 = $307;\n                        } else {\n                            var $308 = Bool$false;\n                            var $306 = $308;\n                        };\n                        var $302 = $306;\n                    };\n                    return $302;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$starts_with = x0 => x1 => String$starts_with$(x0, x1);\n\n    function String$drop$(_n$1, _xs$2) {\n        var String$drop$ = (_n$1, _xs$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _xs$2]\n        });\n        var String$drop = _n$1 => _xs$2 => String$drop$(_n$1, _xs$2);\n        var arg = [_n$1, _xs$2];\n        while (true) {\n            let [_n$1, _xs$2] = arg;\n            var R = (() => {\n                var self = _n$1;\n                if (self === 0n) {\n                    var $309 = _xs$2;\n                    return $309;\n                } else {\n                    var $310 = (self - 1n);\n                    var self = _xs$2;\n                    if (self.length === 0) {\n                        var $312 = String$nil;\n                        var $311 = $312;\n                    } else {\n                        var $313 = self.charCodeAt(0);\n                        var $314 = self.slice(1);\n                        var $315 = String$drop$($310, $314);\n                        var $311 = $315;\n                    };\n                    return $311;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$drop = x0 => x1 => String$drop$(x0, x1);\n\n    function String$length$go$(_xs$1, _n$2) {\n        var String$length$go$ = (_xs$1, _n$2) => ({\n            ctr: 'TCO',\n            arg: [_xs$1, _n$2]\n        });\n        var String$length$go = _xs$1 => _n$2 => String$length$go$(_xs$1, _n$2);\n        var arg = [_xs$1, _n$2];\n        while (true) {\n            let [_xs$1, _n$2] = arg;\n            var R = (() => {\n                var self = _xs$1;\n                if (self.length === 0) {\n                    var $316 = _n$2;\n                    return $316;\n                } else {\n                    var $317 = self.charCodeAt(0);\n                    var $318 = self.slice(1);\n                    var $319 = String$length$go$($318, Nat$succ$(_n$2));\n                    return $319;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$length$go = x0 => x1 => String$length$go$(x0, x1);\n\n    function String$length$(_xs$1) {\n        var $320 = String$length$go$(_xs$1, 0n);\n        return $320;\n    };\n    const String$length = x0 => String$length$(x0);\n\n    function String$split$go$(_xs$1, _match$2, _last$3) {\n        var self = _xs$1;\n        if (self.length === 0) {\n            var $322 = List$cons$(_last$3, List$nil);\n            var $321 = $322;\n        } else {\n            var $323 = self.charCodeAt(0);\n            var $324 = self.slice(1);\n            var self = String$starts_with$(_xs$1, _match$2);\n            if (self) {\n                var _rest$6 = String$drop$(String$length$(_match$2), _xs$1);\n                var $326 = List$cons$(_last$3, String$split$go$(_rest$6, _match$2, \"\"));\n                var $325 = $326;\n            } else {\n                var _next$6 = String$cons$($323, String$nil);\n                var $327 = String$split$go$($324, _match$2, (_last$3 + _next$6));\n                var $325 = $327;\n            };\n            var $321 = $325;\n        };\n        return $321;\n    };\n    const String$split$go = x0 => x1 => x2 => String$split$go$(x0, x1, x2);\n\n    function String$split$(_xs$1, _match$2) {\n        var $328 = String$split$go$(_xs$1, _match$2, \"\");\n        return $328;\n    };\n    const String$split = x0 => x1 => String$split$(x0, x1);\n\n    function List$map$(_f$3, _as$4) {\n        var self = _as$4;\n        switch (self._) {\n            case 'List.cons':\n                var $330 = self.head;\n                var $331 = self.tail;\n                var $332 = List$cons$(_f$3($330), List$map$(_f$3, $331));\n                var $329 = $332;\n                break;\n            case 'List.nil':\n                var $333 = List$nil;\n                var $329 = $333;\n                break;\n        };\n        return $329;\n    };\n    const List$map = x0 => x1 => List$map$(x0, x1);\n\n    function List$take$(_n$2, _xs$3) {\n        var self = _xs$3;\n        switch (self._) {\n            case 'List.cons':\n                var $335 = self.head;\n                var $336 = self.tail;\n                var self = _n$2;\n                if (self === 0n) {\n                    var $338 = List$nil;\n                    var $337 = $338;\n                } else {\n                    var $339 = (self - 1n);\n                    var $340 = List$cons$($335, List$take$($339, $336));\n                    var $337 = $340;\n                };\n                var $334 = $337;\n                break;\n            case 'List.nil':\n                var $341 = List$nil;\n                var $334 = $341;\n                break;\n        };\n        return $334;\n    };\n    const List$take = x0 => x1 => List$take$(x0, x1);\n\n    function Senhas$read_input$(_line$1) {\n        var _split$2 = String$split$(_line$1, \" \");\n        var _map$3 = List$map$(Nat$read, _split$2);\n        var _list$4 = List$take$(4n, _map$3);\n        var $342 = _list$4;\n        return $342;\n    };\n    const Senhas$read_input = x0 => Senhas$read_input$(x0);\n    const Nat$eql = a0 => a1 => (a0 === a1);\n    const Bool$or = a0 => a1 => (a0 || a1);\n\n    function Senha$tem_numero$(_num$1, _senha$2) {\n        var _tmp$3 = List$map$(a1 => (_num$1 === a1), _senha$2);\n        var _tmp$4 = List$fold$(_tmp$3, Bool$false, Bool$or);\n        var $343 = _tmp$4;\n        return $343;\n    };\n    const Senha$tem_numero = x0 => x1 => Senha$tem_numero$(x0, x1);\n\n    function Senha$verifica$(_senha$1, _a$2, _b$3) {\n        var self = _senha$1;\n        switch (self._) {\n            case 'List.nil':\n                var $345 = \"\";\n                var $344 = $345;\n                break;\n            case 'List.cons':\n                var self = (_a$2 === _b$3);\n                if (self) {\n                    var $347 = \"V \";\n                    var $346 = $347;\n                } else {\n                    var self = Senha$tem_numero$(_b$3, _senha$1);\n                    if (self) {\n                        var $349 = \"O \";\n                        var $348 = $349;\n                    } else {\n                        var $350 = \"X \";\n                        var $348 = $350;\n                    };\n                    var $346 = $348;\n                };\n                var $344 = $346;\n                break;\n        };\n        return $344;\n    };\n    const Senha$verifica = x0 => x1 => x2 => Senha$verifica$(x0, x1, x2);\n\n    function Senhas$resposta$(_suporte$1, _senha$2, _tentativa$3) {\n        var self = _tentativa$3;\n        switch (self._) {\n            case 'List.cons':\n                var $352 = self.head;\n                var $353 = self.tail;\n                var self = _senha$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $355 = self.head;\n                        var $356 = self.tail;\n                        var $357 = List$cons$(Senha$verifica$(_suporte$1, $352, $355), Senhas$resposta$(_suporte$1, $356, $353));\n                        var $354 = $357;\n                        break;\n                    case 'List.nil':\n                        var $358 = List$nil;\n                        var $354 = $358;\n                        break;\n                };\n                var $351 = $354;\n                break;\n            case 'List.nil':\n                var $359 = List$nil;\n                var $351 = $359;\n                break;\n        };\n        return $351;\n    };\n    const Senhas$resposta = x0 => x1 => x2 => Senhas$resposta$(x0, x1, x2);\n\n    function Senha$confirma$(_xs$1) {\n        var _chck$2 = List$map$(a1 => (10n > a1), _xs$1);\n        var _chck$3 = List$fold$(_chck$2, Bool$true, Bool$and);\n        var $360 = _chck$3;\n        return $360;\n    };\n    const Senha$confirma = x0 => Senha$confirma$(x0);\n\n    function String$flatten$go$(_xs$1, _res$2) {\n        var String$flatten$go$ = (_xs$1, _res$2) => ({\n            ctr: 'TCO',\n            arg: [_xs$1, _res$2]\n        });\n        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);\n        var arg = [_xs$1, _res$2];\n        while (true) {\n            let [_xs$1, _res$2] = arg;\n            var R = (() => {\n                var self = _xs$1;\n                switch (self._) {\n                    case 'List.cons':\n                        var $361 = self.head;\n                        var $362 = self.tail;\n                        var $363 = String$flatten$go$($362, (_res$2 + $361));\n                        return $363;\n                    case 'List.nil':\n                        var $364 = _res$2;\n                        return $364;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);\n\n    function String$flatten$(_xs$1) {\n        var $365 = String$flatten$go$(_xs$1, \"\");\n        return $365;\n    };\n    const String$flatten = x0 => String$flatten$(x0);\n\n    function String$join$go$(_sep$1, _list$2, _fst$3) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.cons':\n                var $367 = self.head;\n                var $368 = self.tail;\n                var $369 = String$flatten$(List$cons$((() => {\n                    var self = _fst$3;\n                    if (self) {\n                        var $370 = \"\";\n                        return $370;\n                    } else {\n                        var $371 = _sep$1;\n                        return $371;\n                    };\n                })(), List$cons$($367, List$cons$(String$join$go$(_sep$1, $368, Bool$false), List$nil))));\n                var $366 = $369;\n                break;\n            case 'List.nil':\n                var $372 = \"\";\n                var $366 = $372;\n                break;\n        };\n        return $366;\n    };\n    const String$join$go = x0 => x1 => x2 => String$join$go$(x0, x1, x2);\n\n    function String$join$(_sep$1, _list$2) {\n        var $373 = String$join$go$(_sep$1, _list$2, Bool$true);\n        return $373;\n    };\n    const String$join = x0 => x1 => String$join$(x0, x1);\n\n    function List$eql$(_eql$2, _a$3, _b$4) {\n        var self = _a$3;\n        switch (self._) {\n            case 'List.cons':\n                var $375 = self.head;\n                var $376 = self.tail;\n                var self = _b$4;\n                switch (self._) {\n                    case 'List.cons':\n                        var $378 = self.head;\n                        var $379 = self.tail;\n                        var $380 = (_eql$2($375)($378) && List$eql$(_eql$2, $376, $379));\n                        var $377 = $380;\n                        break;\n                    case 'List.nil':\n                        var $381 = Bool$false;\n                        var $377 = $381;\n                        break;\n                };\n                var $374 = $377;\n                break;\n            case 'List.nil':\n                var self = _b$4;\n                switch (self._) {\n                    case 'List.nil':\n                        var $383 = Bool$true;\n                        var $382 = $383;\n                        break;\n                    case 'List.cons':\n                        var $384 = Bool$false;\n                        var $382 = $384;\n                        break;\n                };\n                var $374 = $382;\n                break;\n        };\n        return $374;\n    };\n    const List$eql = x0 => x1 => x2 => List$eql$(x0, x1, x2);\n    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);\n\n    function Senhas$loope$(_senha$1, _tentativas$2) {\n        var $385 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n            var $386 = _m$bind$3;\n            return $386;\n        }))(IO$print$((\"\\u{a}Voc\\u{ea} tem: \" + (Nat$show$((_tentativas$2 + 1n)) + \" Tentativas\"))))((_$3 => {\n            var $387 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n                var $388 = _m$bind$4;\n                return $388;\n            }))(IO$print$(\"Escolha 4 n\\u{fa}meros:\"))((_$4 => {\n                var $389 = IO$monad$((_m$bind$5 => _m$pure$6 => {\n                    var $390 = _m$bind$5;\n                    return $390;\n                }))(IO$get_line)((_line$5 => {\n                    var _user_nums$6 = Senhas$read_input$(_line$5);\n                    var _user_try$7 = Senhas$resposta$(_senha$1, _user_nums$6, _senha$1);\n                    var self = Senha$confirma$(_user_nums$6);\n                    if (self) {\n                        var $392 = IO$monad$((_m$bind$8 => _m$pure$9 => {\n                            var $393 = _m$bind$8;\n                            return $393;\n                        }))(IO$print$(\"Sua resposta est\\u{e1}:\"))((_$8 => {\n                            var $394 = IO$monad$((_m$bind$9 => _m$pure$10 => {\n                                var $395 = _m$bind$9;\n                                return $395;\n                            }))(IO$print$(String$join$(\"\", _user_try$7)))((_$9 => {\n                                var self = List$eql$(Nat$eql, _user_nums$6, _senha$1);\n                                if (self) {\n                                    var $397 = IO$print$(\"Parab\\u{e9}ns, voc\\u{ea} venceu!\");\n                                    var $396 = $397;\n                                } else {\n                                    var self = (_tentativas$2 === 0n);\n                                    if (self) {\n                                        var $399 = IO$print$(\"Infelizmente, voc\\u{ea} perdeu\");\n                                        var $398 = $399;\n                                    } else {\n                                        var $400 = Senhas$loope$(_senha$1, (_tentativas$2 - 1n <= 0n ? 0n : _tentativas$2 - 1n));\n                                        var $398 = $400;\n                                    };\n                                    var $396 = $398;\n                                };\n                                return $396;\n                            }));\n                            return $394;\n                        }));\n                        var $391 = $392;\n                    } else {\n                        var $401 = IO$monad$((_m$bind$8 => _m$pure$9 => {\n                            var $402 = _m$bind$8;\n                            return $402;\n                        }))(IO$print$(\"Seu input n\\u{e3}o foi v\\u{e1}lido, tente novamente\"))((_$8 => {\n                            var $403 = Senhas$loope$(_senha$1, _tentativas$2);\n                            return $403;\n                        }));\n                        var $391 = $401;\n                    };\n                    return $391;\n                }));\n                return $389;\n            }));\n            return $387;\n        }));\n        return $385;\n    };\n    const Senhas$loope = x0 => x1 => Senhas$loope$(x0, x1);\n    const Senhas = IO$monad$((_m$bind$1 => _m$pure$2 => {\n        var $404 = _m$bind$1;\n        return $404;\n    }))(IO$random$(10n))((_num$1 => {\n        var $405 = IO$monad$((_m$bind$2 => _m$pure$3 => {\n            var $406 = _m$bind$2;\n            return $406;\n        }))(IO$randoms$(4n, 10n))((_num_1$2 => {\n            var _lista$3 = List$cons$(1n, List$cons$(2n, List$cons$(3n, List$cons$(4n, List$cons$(5n, List$cons$(6n, List$cons$(7n, List$cons$(8n, List$cons$(9n, List$cons$(0n, List$nil))))))))));\n            var $407 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n                var $408 = _m$bind$4;\n                return $408;\n            }))(IO$randoms$(6n, 10n))((_lista1$4 => {\n                var _senha$5 = List$random$(_num_1$2, _lista$3, List$nil);\n                var $409 = Senhas$loope$(_senha$5, 4n);\n                return $409;\n            }));\n            return $407;\n        }));\n        return $405;\n    }));\n    const User$Sipher$Senhas = Senhas;\n\n    function App$new$(_init$2, _draw$3, _when$4) {\n        var $410 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4\n        });\n        return $410;\n    };\n    const App$new = x0 => x1 => x2 => App$new$(x0, x1, x2);\n    const Web$Senhas = (() => {\n        var _draw$1 = (_state$1 => {\n            var $412 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$text$(\"Bem-vindo ao joguinho das senhas! Instru\\u{e7}\\u{f5}es:\"), List$nil)), List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$text$(\"... TODO :) ...\"), List$nil)), List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$text$(\"Aperte qualquer tecla para come\\u{e7}ar.\"), List$nil)), List$nil))));\n            return $412;\n        });\n        var _when$2 = (_event$2 => _state$3 => {\n            var self = _event$2;\n            switch (self._) {\n                case 'App.Event.init':\n                case 'App.Event.tick':\n                case 'App.Event.dom':\n                case 'App.Event.mouse_down':\n                case 'App.Event.mouse_up':\n                case 'App.Event.key_up':\n                case 'App.Event.post':\n                    var $414 = App$pass;\n                    var $413 = $414;\n                    break;\n                case 'App.Event.key_down':\n                    var $415 = IO$monad$((_m$bind$6 => _m$pure$7 => {\n                        var $416 = _m$bind$6;\n                        return $416;\n                    }))(User$Sipher$Senhas)((_$6 => {\n                        var $417 = App$pass;\n                        return $417;\n                    }));\n                    var $413 = $415;\n                    break;\n            };\n            return $413;\n        });\n        var $411 = App$new$(Unit$new, _draw$1, _when$2);\n        return $411;\n    })();\n    return {\n        'DOM.node': DOM$node,\n        'BitsMap': BitsMap,\n        'Map': Map,\n        'BitsMap.new': BitsMap$new,\n        'BitsMap.tie': BitsMap$tie,\n        'Maybe.some': Maybe$some,\n        'Maybe.none': Maybe$none,\n        'BitsMap.set': BitsMap$set,\n        'Bits.e': Bits$e,\n        'Bits.o': Bits$o,\n        'Bits.i': Bits$i,\n        'Bits.concat': Bits$concat,\n        'Word.to_bits': Word$to_bits,\n        'U16.to_bits': U16$to_bits,\n        'String.to_bits': String$to_bits,\n        'Map.from_list': Map$from_list,\n        'List.nil': List$nil,\n        'Pair': Pair,\n        'List.cons': List$cons,\n        'DOM.text': DOM$text,\n        'IO': IO,\n        'IO.ask': IO$ask,\n        'IO.bind': IO$bind,\n        'IO.end': IO$end,\n        'IO.monad': IO$monad,\n        'Dynamic.new': Dynamic$new,\n        'Unit.new': Unit$new,\n        'App.pass': App$pass,\n        'Parser.Reply': Parser$Reply,\n        'List': List,\n        'Parser.Reply.error': Parser$Reply$error,\n        'Parser.Reply.value': Parser$Reply$value,\n        'Parser.many.go': Parser$many$go,\n        'Parser.many': Parser$many,\n        'Parser.many1': Parser$many1,\n        'Nat.succ': Nat$succ,\n        'Bool.false': Bool$false,\n        'Bool.true': Bool$true,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.eql': Word$eql,\n        'Nat.zero': Nat$zero,\n        'U16.eql': U16$eql,\n        'Parser.digit': Parser$digit,\n        'Nat.add': Nat$add,\n        'Nat.mul': Nat$mul,\n        'Nat.from_base.go': Nat$from_base$go,\n        'List.reverse.go': List$reverse$go,\n        'List.reverse': List$reverse,\n        'Nat.from_base': Nat$from_base,\n        'Parser.nat': Parser$nat,\n        'Nat.read': Nat$read,\n        'IO.get_time': IO$get_time,\n        'Nat.mod.go': Nat$mod$go,\n        'Nat.mod': Nat$mod,\n        'Nat.random': Nat$random,\n        'IO.random': IO$random,\n        'Nat.randoms': Nat$randoms,\n        'IO.randoms': IO$randoms,\n        'Maybe': Maybe,\n        'Pair.new': Pair$new,\n        'List.concat': List$concat,\n        'List.pop_at.go': List$pop_at$go,\n        'List.pop_at': List$pop_at,\n        'List.random': List$random,\n        'IO.put_string': IO$put_string,\n        'String.cons': String$cons,\n        'String.concat': String$concat,\n        'IO.print': IO$print,\n        'List.fold': List$fold,\n        'Either': Either,\n        'Either.left': Either$left,\n        'Either.right': Either$right,\n        'Nat.sub_rem': Nat$sub_rem,\n        'Nat.div_mod.go': Nat$div_mod$go,\n        'Nat.div_mod': Nat$div_mod,\n        'Nat.to_base.go': Nat$to_base$go,\n        'Nat.to_base': Nat$to_base,\n        'String.nil': String$nil,\n        'Bool.and': Bool$and,\n        'Nat.gtn': Nat$gtn,\n        'Nat.lte': Nat$lte,\n        'List.at': List$at,\n        'Nat.show_digit': Nat$show_digit,\n        'Nat.to_string_base': Nat$to_string_base,\n        'Nat.show': Nat$show,\n        'IO.get_line': IO$get_line,\n        'Char.eql': Char$eql,\n        'String.starts_with': String$starts_with,\n        'String.drop': String$drop,\n        'String.length.go': String$length$go,\n        'String.length': String$length,\n        'String.split.go': String$split$go,\n        'String.split': String$split,\n        'List.map': List$map,\n        'List.take': List$take,\n        'Senhas.read_input': Senhas$read_input,\n        'Nat.eql': Nat$eql,\n        'Bool.or': Bool$or,\n        'Senha.tem_numero': Senha$tem_numero,\n        'Senha.verifica': Senha$verifica,\n        'Senhas.resposta': Senhas$resposta,\n        'Senha.confirma': Senha$confirma,\n        'String.flatten.go': String$flatten$go,\n        'String.flatten': String$flatten,\n        'String.join.go': String$join$go,\n        'String.join': String$join,\n        'List.eql': List$eql,\n        'Nat.sub': Nat$sub,\n        'Senhas.loope': Senhas$loope,\n        'Senhas': Senhas,\n        'User.Sipher.Senhas': User$Sipher$Senhas,\n        'App.new': App$new,\n        'Web.Senhas': Web$Senhas,\n    };\n})();"],"sourceRoot":""}