module.exports = (function() {
    function word_to_u16(w) {
        var u = 0;
        for (var i = 0; i < 16; ++i) {
            u = u | (w._ === 'Word.i' ? 1 << i : 0);
            w = w.pred;
        };
        return u;
    };

    function u16_to_word(u) {
        var w = {
            _: 'Word.e'
        };
        for (var i = 0; i < 16; ++i) {
            w = {
                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',
                pred: w
            };
        };
        return w;
    };

    function u16_to_bits(x) {
        var s = '';
        for (var i = 0; i < 16; ++i) {
            s = (x & 1 ? '1' : '0') + s;
            x = x >>> 1;
        }
        return s;
    };
    var list_for = list => nil => cons => {
        while (list._ !== 'List.nil') {
            nil = cons(list.head)(nil);
            list = list.tail;
        }
        return nil;
    };
    var list_length = list => {
        var len = 0;
        while (list._ === 'List.cons') {
            len += 1;
            list = list.tail;
        };
        return BigInt(len);
    };
    var nat_to_bits = n => {
        return n === 0n ? '' : n.toString(2);
    };
    var fm_name_to_bits = name => {
        const TABLE = {
            'A': '000000',
            'B': '100000',
            'C': '010000',
            'D': '110000',
            'E': '001000',
            'F': '101000',
            'G': '011000',
            'H': '111000',
            'I': '000100',
            'J': '100100',
            'K': '010100',
            'L': '110100',
            'M': '001100',
            'N': '101100',
            'O': '011100',
            'P': '111100',
            'Q': '000010',
            'R': '100010',
            'S': '010010',
            'T': '110010',
            'U': '001010',
            'V': '101010',
            'W': '011010',
            'X': '111010',
            'Y': '000110',
            'Z': '100110',
            'a': '010110',
            'b': '110110',
            'c': '001110',
            'd': '101110',
            'e': '011110',
            'f': '111110',
            'g': '000001',
            'h': '100001',
            'i': '010001',
            'j': '110001',
            'k': '001001',
            'l': '101001',
            'm': '011001',
            'n': '111001',
            'o': '000101',
            'p': '100101',
            'q': '010101',
            'r': '110101',
            's': '001101',
            't': '101101',
            'u': '011101',
            'v': '111101',
            'w': '000011',
            'x': '100011',
            'y': '010011',
            'z': '110011',
            '0': '001011',
            '1': '101011',
            '2': '011011',
            '3': '111011',
            '4': '000111',
            '5': '100111',
            '6': '010111',
            '7': '110111',
            '8': '001111',
            '9': '101111',
            '.': '011111',
            '_': '111111',
        }
        var a = '';
        for (var i = name.length - 1; i >= 0; --i) {
            a += TABLE[name[i]];
        }
        return a;
    };
    const inst_unit = x => x(1);
    const elim_unit = (x => {
        var $1 = (() => c0 => {
            var self = x;
            switch ("unit") {
                case 'unit':
                    var $0 = c0;
                    return $0;
            };
        })();
        return $1;
    });
    const inst_bool = x => x(true)(false);
    const elim_bool = (x => {
        var $4 = (() => c0 => c1 => {
            var self = x;
            if (self) {
                var $2 = c2;
                return $2;
            } else {
                var $3 = c2;
                return $3;
            };
        })();
        return $4;
    });
    const inst_nat = x => x(0n)(x0 => 1n + x0);
    const elim_nat = (x => {
        var $8 = (() => c0 => c1 => {
            var self = x;
            if (self === 0n) {
                var $5 = c2;
                return $5;
            } else {
                var $6 = (self - 1n);
                var $7 = c2($6);
                return $7;
            };
        })();
        return $8;
    });
    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');
    const elim_bits = (x => {
        var $14 = (() => c0 => c1 => c2 => {
            var self = x;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'e':
                    var $9 = c0;
                    return $9;
                case 'o':
                    var $10 = self.slice(0, -1);
                    var $11 = c1($10);
                    return $11;
                case 'i':
                    var $12 = self.slice(0, -1);
                    var $13 = c2($12);
                    return $13;
            };
        })();
        return $14;
    });
    const inst_u16 = x => x(x0 => word_to_u16(x0));
    const elim_u16 = (x => {
        var $17 = (() => c0 => {
            var self = x;
            switch ('u16') {
                case 'u16':
                    var $15 = u16_to_word(self);
                    var $16 = c0($15);
                    return $16;
            };
        })();
        return $17;
    });
    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));
    const elim_string = (x => {
        var $22 = (() => c0 => c1 => {
            var self = x;
            if (self.length === 0) {
                var $18 = c2;
                return $18;
            } else {
                var $19 = self.charCodeAt(0);
                var $20 = self.slice(1);
                var $21 = c2($19)($20);
                return $21;
            };
        })();
        return $22;
    });
    var run = (p) => {
        if (typeof window === 'undefined') {
            var rl = eval("require('readline')").createInterface({
                input: process.stdin,
                output: process.stdout,
                terminal: false
            });
            var fs = eval("require('fs')");
            var pc = eval("process");
        } else {
            var rl = {
                question: (x, f) => f(''),
                close: () => {}
            };
            var fs = {
                readFileSync: () => ''
            };
            var pc = {
                exit: () => {},
                argv: []
            };
        };
        return run_io({
            rl,
            fs,
            pc
        }, p).then((x) => {
            rl.close();
            return x;
        }).catch((e) => {
            rl.close();
            throw e;
        });
    };
    var run_io = (lib, p) => {
        switch (p._) {
            case 'IO.end':
                return Promise.resolve(p.value);
            case 'IO.ask':
                return new Promise((res, err) => {
                    switch (p.query) {
                        case 'print':
                            console.log(p.param);
                            run_io(lib, p.then(1)).then(res).catch(err);
                            break;
                        case 'exit':
                            lib.pc.exit();
                            break;
                        case 'get_line':
                            lib.rl.question('', (line) => run_io(lib, p.then(line)).then(res).catch(err));
                            break;
                        case 'get_file':
                            try {
                                run_io(lib, p.then(lib.fs.readFileSync(p.param, 'utf8'))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'get_args':
                            run_io(lib, p.then(lib.pc.argv[2] || '')).then(res).catch(err);
                            break;
                    }
                });
        }
    };

    function IO$(_A$1) {
        var $23 = null;
        return $23;
    };
    const IO = x0 => IO$(x0);

    function IO$ask$(_query$2, _param$3, _then$4) {
        var $24 = ({
            _: 'IO.ask',
            'query': _query$2,
            'param': _param$3,
            'then': _then$4
        });
        return $24;
    };
    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);

    function IO$bind$(_a$3, _f$4) {
        var self = _a$3;
        switch (self._) {
            case 'IO.end':
                var $26 = self.value;
                var $27 = _f$4($26);
                var $25 = $27;
                break;
            case 'IO.ask':
                var $28 = self.query;
                var $29 = self.param;
                var $30 = self.then;
                var $31 = IO$ask$($28, $29, (_x$8 => {
                    var $32 = IO$bind$($30(_x$8), _f$4);
                    return $32;
                }));
                var $25 = $31;
                break;
        };
        return $25;
    };
    const IO$bind = x0 => x1 => IO$bind$(x0, x1);

    function IO$end$(_value$2) {
        var $33 = ({
            _: 'IO.end',
            'value': _value$2
        });
        return $33;
    };
    const IO$end = x0 => IO$end$(x0);

    function IO$monad$(_new$2) {
        var $34 = _new$2(IO$bind)(IO$end);
        return $34;
    };
    const IO$monad = x0 => IO$monad$(x0);

    function Maybe$(_A$1) {
        var $35 = null;
        return $35;
    };
    const Maybe = x0 => Maybe$(x0);

    function Map$(_A$1) {
        var $36 = null;
        return $36;
    };
    const Map = x0 => Map$(x0);
    const Maybe$none = ({
        _: 'Maybe.none'
    });

    function Map$get$(_bits$2, _map$3) {
        var Map$get$ = (_bits$2, _map$3) => ({
            ctr: 'TCO',
            arg: [_bits$2, _map$3]
        });
        var Map$get = _bits$2 => _map$3 => Map$get$(_bits$2, _map$3);
        var arg = [_bits$2, _map$3];
        while (true) {
            let [_bits$2, _map$3] = arg;
            var R = (() => {
                var self = _bits$2;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var self = _map$3;
                        switch (self._) {
                            case 'Map.new':
                                var $38 = Maybe$none;
                                var $37 = $38;
                                break;
                            case 'Map.tie':
                                var $39 = self.val;
                                var $40 = self.lft;
                                var $41 = self.rgt;
                                var $42 = $39;
                                var $37 = $42;
                                break;
                        };
                        return $37;
                    case 'o':
                        var $43 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'Map.new':
                                var $45 = Maybe$none;
                                var $44 = $45;
                                break;
                            case 'Map.tie':
                                var $46 = self.val;
                                var $47 = self.lft;
                                var $48 = self.rgt;
                                var $49 = Map$get$($43, $47);
                                var $44 = $49;
                                break;
                        };
                        return $44;
                    case 'i':
                        var $50 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'Map.new':
                                var $52 = Maybe$none;
                                var $51 = $52;
                                break;
                            case 'Map.tie':
                                var $53 = self.val;
                                var $54 = self.lft;
                                var $55 = self.rgt;
                                var $56 = Map$get$($50, $55);
                                var $51 = $56;
                                break;
                        };
                        return $51;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Map$get = x0 => x1 => Map$get$(x0, x1);
    const Bits$e = '';
    const Bool$false = false;
    const Bool$and = a0 => a1 => (a0 && a1);
    const Bool$true = true;

    function Cmp$as_lte$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $58 = Bool$true;
                var $57 = $58;
                break;
            case 'Cmp.eql':
                var $59 = Bool$true;
                var $57 = $59;
                break;
            case 'Cmp.gtn':
                var $60 = Bool$false;
                var $57 = $60;
                break;
        };
        return $57;
    };
    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);
    const Cmp$ltn = ({
        _: 'Cmp.ltn'
    });
    const Cmp$gtn = ({
        _: 'Cmp.gtn'
    });

    function Word$cmp$go$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $62 = (_b$5 => {
                    var $63 = _c$4;
                    return $63;
                });
                var $61 = $62;
                break;
            case 'Word.o':
                var $64 = self.pred;
                var $65 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $67 = (_a$pred$8 => {
                                var $68 = _c$4;
                                return $68;
                            });
                            var $66 = $67;
                            break;
                        case 'Word.o':
                            var $69 = self.pred;
                            var $70 = (_a$pred$10 => {
                                var $71 = Word$cmp$go$(_a$pred$10, $69, _c$4);
                                return $71;
                            });
                            var $66 = $70;
                            break;
                        case 'Word.i':
                            var $72 = self.pred;
                            var $73 = (_a$pred$10 => {
                                var $74 = Word$cmp$go$(_a$pred$10, $72, Cmp$ltn);
                                return $74;
                            });
                            var $66 = $73;
                            break;
                    };
                    var $66 = $66($64);
                    return $66;
                });
                var $61 = $65;
                break;
            case 'Word.i':
                var $75 = self.pred;
                var $76 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $78 = (_a$pred$8 => {
                                var $79 = _c$4;
                                return $79;
                            });
                            var $77 = $78;
                            break;
                        case 'Word.o':
                            var $80 = self.pred;
                            var $81 = (_a$pred$10 => {
                                var $82 = Word$cmp$go$(_a$pred$10, $80, Cmp$gtn);
                                return $82;
                            });
                            var $77 = $81;
                            break;
                        case 'Word.i':
                            var $83 = self.pred;
                            var $84 = (_a$pred$10 => {
                                var $85 = Word$cmp$go$(_a$pred$10, $83, _c$4);
                                return $85;
                            });
                            var $77 = $84;
                            break;
                    };
                    var $77 = $77($75);
                    return $77;
                });
                var $61 = $76;
                break;
        };
        var $61 = $61(_b$3);
        return $61;
    };
    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);
    const Cmp$eql = ({
        _: 'Cmp.eql'
    });

    function Word$cmp$(_a$2, _b$3) {
        var $86 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);
        return $86;
    };
    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);

    function Word$lte$(_a$2, _b$3) {
        var $87 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));
        return $87;
    };
    const Word$lte = x0 => x1 => Word$lte$(x0, x1);

    function Nat$succ$(_pred$1) {
        var $88 = 1n + _pred$1;
        return $88;
    };
    const Nat$succ = x0 => Nat$succ$(x0);
    const Nat$zero = 0n;
    const U16$lte = a0 => a1 => (a0 <= a1);

    function U16$btw$(_a$1, _b$2, _c$3) {
        var $89 = ((_a$1 <= _b$2) && (_b$2 <= _c$3));
        return $89;
    };
    const U16$btw = x0 => x1 => x2 => U16$btw$(x0, x1, x2);

    function U16$new$(_value$1) {
        var $90 = word_to_u16(_value$1);
        return $90;
    };
    const U16$new = x0 => U16$new$(x0);
    const Word$e = ({
        _: 'Word.e'
    });

    function Word$(_size$1) {
        var $91 = null;
        return $91;
    };
    const Word = x0 => Word$(x0);

    function Word$i$(_pred$2) {
        var $92 = ({
            _: 'Word.i',
            'pred': _pred$2
        });
        return $92;
    };
    const Word$i = x0 => Word$i$(x0);

    function Word$o$(_pred$2) {
        var $93 = ({
            _: 'Word.o',
            'pred': _pred$2
        });
        return $93;
    };
    const Word$o = x0 => Word$o$(x0);

    function Word$subber$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $95 = (_b$5 => {
                    var $96 = Word$e;
                    return $96;
                });
                var $94 = $95;
                break;
            case 'Word.o':
                var $97 = self.pred;
                var $98 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $100 = (_a$pred$8 => {
                                var $101 = Word$e;
                                return $101;
                            });
                            var $99 = $100;
                            break;
                        case 'Word.o':
                            var $102 = self.pred;
                            var $103 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $105 = Word$i$(Word$subber$(_a$pred$10, $102, Bool$true));
                                    var $104 = $105;
                                } else {
                                    var $106 = Word$o$(Word$subber$(_a$pred$10, $102, Bool$false));
                                    var $104 = $106;
                                };
                                return $104;
                            });
                            var $99 = $103;
                            break;
                        case 'Word.i':
                            var $107 = self.pred;
                            var $108 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $110 = Word$o$(Word$subber$(_a$pred$10, $107, Bool$true));
                                    var $109 = $110;
                                } else {
                                    var $111 = Word$i$(Word$subber$(_a$pred$10, $107, Bool$true));
                                    var $109 = $111;
                                };
                                return $109;
                            });
                            var $99 = $108;
                            break;
                    };
                    var $99 = $99($97);
                    return $99;
                });
                var $94 = $98;
                break;
            case 'Word.i':
                var $112 = self.pred;
                var $113 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $115 = (_a$pred$8 => {
                                var $116 = Word$e;
                                return $116;
                            });
                            var $114 = $115;
                            break;
                        case 'Word.o':
                            var $117 = self.pred;
                            var $118 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $120 = Word$o$(Word$subber$(_a$pred$10, $117, Bool$false));
                                    var $119 = $120;
                                } else {
                                    var $121 = Word$i$(Word$subber$(_a$pred$10, $117, Bool$false));
                                    var $119 = $121;
                                };
                                return $119;
                            });
                            var $114 = $118;
                            break;
                        case 'Word.i':
                            var $122 = self.pred;
                            var $123 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $125 = Word$i$(Word$subber$(_a$pred$10, $122, Bool$true));
                                    var $124 = $125;
                                } else {
                                    var $126 = Word$o$(Word$subber$(_a$pred$10, $122, Bool$false));
                                    var $124 = $126;
                                };
                                return $124;
                            });
                            var $114 = $123;
                            break;
                    };
                    var $114 = $114($112);
                    return $114;
                });
                var $94 = $113;
                break;
        };
        var $94 = $94(_b$3);
        return $94;
    };
    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);

    function Word$sub$(_a$2, _b$3) {
        var $127 = Word$subber$(_a$2, _b$3, Bool$false);
        return $127;
    };
    const Word$sub = x0 => x1 => Word$sub$(x0, x1);
    const U16$sub = a0 => a1 => (Math.max(a0 - a1, 0));

    function Nat$apply$(_n$2, _f$3, _x$4) {
        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({
            ctr: 'TCO',
            arg: [_n$2, _f$3, _x$4]
        });
        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);
        var arg = [_n$2, _f$3, _x$4];
        while (true) {
            let [_n$2, _f$3, _x$4] = arg;
            var R = (() => {
                var self = _n$2;
                if (self === 0n) {
                    var $128 = _x$4;
                    return $128;
                } else {
                    var $129 = (self - 1n);
                    var $130 = Nat$apply$($129, _f$3, _f$3(_x$4));
                    return $130;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);

    function Word$inc$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.e':
                var $132 = Word$e;
                var $131 = $132;
                break;
            case 'Word.o':
                var $133 = self.pred;
                var $134 = Word$i$($133);
                var $131 = $134;
                break;
            case 'Word.i':
                var $135 = self.pred;
                var $136 = Word$o$(Word$inc$($135));
                var $131 = $136;
                break;
        };
        return $131;
    };
    const Word$inc = x0 => Word$inc$(x0);

    function U16$inc$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $138 = u16_to_word(self);
                var $139 = U16$new$(Word$inc$($138));
                var $137 = $139;
                break;
        };
        return $137;
    };
    const U16$inc = x0 => U16$inc$(x0);

    function Word$zero$(_size$1) {
        var self = _size$1;
        if (self === 0n) {
            var $141 = Word$e;
            var $140 = $141;
        } else {
            var $142 = (self - 1n);
            var $143 = Word$o$(Word$zero$($142));
            var $140 = $143;
        };
        return $140;
    };
    const Word$zero = x0 => Word$zero$(x0);
    const U16$zero = U16$new$(Word$zero$(16n));
    const Nat$to_u16 = a0 => (Number(a0));

    function Word$adder$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $145 = (_b$5 => {
                    var $146 = Word$e;
                    return $146;
                });
                var $144 = $145;
                break;
            case 'Word.o':
                var $147 = self.pred;
                var $148 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $150 = (_a$pred$8 => {
                                var $151 = Word$e;
                                return $151;
                            });
                            var $149 = $150;
                            break;
                        case 'Word.o':
                            var $152 = self.pred;
                            var $153 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $155 = Word$i$(Word$adder$(_a$pred$10, $152, Bool$false));
                                    var $154 = $155;
                                } else {
                                    var $156 = Word$o$(Word$adder$(_a$pred$10, $152, Bool$false));
                                    var $154 = $156;
                                };
                                return $154;
                            });
                            var $149 = $153;
                            break;
                        case 'Word.i':
                            var $157 = self.pred;
                            var $158 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $160 = Word$o$(Word$adder$(_a$pred$10, $157, Bool$true));
                                    var $159 = $160;
                                } else {
                                    var $161 = Word$i$(Word$adder$(_a$pred$10, $157, Bool$false));
                                    var $159 = $161;
                                };
                                return $159;
                            });
                            var $149 = $158;
                            break;
                    };
                    var $149 = $149($147);
                    return $149;
                });
                var $144 = $148;
                break;
            case 'Word.i':
                var $162 = self.pred;
                var $163 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $165 = (_a$pred$8 => {
                                var $166 = Word$e;
                                return $166;
                            });
                            var $164 = $165;
                            break;
                        case 'Word.o':
                            var $167 = self.pred;
                            var $168 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $170 = Word$o$(Word$adder$(_a$pred$10, $167, Bool$true));
                                    var $169 = $170;
                                } else {
                                    var $171 = Word$i$(Word$adder$(_a$pred$10, $167, Bool$false));
                                    var $169 = $171;
                                };
                                return $169;
                            });
                            var $164 = $168;
                            break;
                        case 'Word.i':
                            var $172 = self.pred;
                            var $173 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $175 = Word$i$(Word$adder$(_a$pred$10, $172, Bool$true));
                                    var $174 = $175;
                                } else {
                                    var $176 = Word$o$(Word$adder$(_a$pred$10, $172, Bool$true));
                                    var $174 = $176;
                                };
                                return $174;
                            });
                            var $164 = $173;
                            break;
                    };
                    var $164 = $164($162);
                    return $164;
                });
                var $144 = $163;
                break;
        };
        var $144 = $144(_b$3);
        return $144;
    };
    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);

    function Word$add$(_a$2, _b$3) {
        var $177 = Word$adder$(_a$2, _b$3, Bool$false);
        return $177;
    };
    const Word$add = x0 => x1 => Word$add$(x0, x1);
    const U16$add = a0 => a1 => ((a0 + a1) & 0xFFFF);

    function Cmp$as_eql$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $179 = Bool$false;
                var $178 = $179;
                break;
            case 'Cmp.eql':
                var $180 = Bool$true;
                var $178 = $180;
                break;
            case 'Cmp.gtn':
                var $181 = Bool$false;
                var $178 = $181;
                break;
        };
        return $178;
    };
    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);

    function Word$eql$(_a$2, _b$3) {
        var $182 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));
        return $182;
    };
    const Word$eql = x0 => x1 => Word$eql$(x0, x1);
    const U16$eql = a0 => a1 => (a0 === a1);
    const Bits$o = a0 => (a0 + '0');
    const Bits$i = a0 => (a0 + '1');

    function Word$to_bits$(_a$2) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $184 = Bits$e;
                var $183 = $184;
                break;
            case 'Word.o':
                var $185 = self.pred;
                var $186 = (Word$to_bits$($185) + '0');
                var $183 = $186;
                break;
            case 'Word.i':
                var $187 = self.pred;
                var $188 = (Word$to_bits$($187) + '1');
                var $183 = $188;
                break;
        };
        return $183;
    };
    const Word$to_bits = x0 => Word$to_bits$(x0);

    function Word$trim$(_new_size$2, _word$3) {
        var self = _new_size$2;
        if (self === 0n) {
            var $190 = Word$e;
            var $189 = $190;
        } else {
            var $191 = (self - 1n);
            var self = _word$3;
            switch (self._) {
                case 'Word.e':
                    var $193 = Word$o$(Word$trim$($191, Word$e));
                    var $192 = $193;
                    break;
                case 'Word.o':
                    var $194 = self.pred;
                    var $195 = Word$o$(Word$trim$($191, $194));
                    var $192 = $195;
                    break;
                case 'Word.i':
                    var $196 = self.pred;
                    var $197 = Word$i$(Word$trim$($191, $196));
                    var $192 = $197;
                    break;
            };
            var $189 = $192;
        };
        return $189;
    };
    const Word$trim = x0 => x1 => Word$trim$(x0, x1);
    const Bits$concat = a0 => a1 => (a1 + a0);

    function Bits$reverse$tco$(_a$1, _r$2) {
        var Bits$reverse$tco$ = (_a$1, _r$2) => ({
            ctr: 'TCO',
            arg: [_a$1, _r$2]
        });
        var Bits$reverse$tco = _a$1 => _r$2 => Bits$reverse$tco$(_a$1, _r$2);
        var arg = [_a$1, _r$2];
        while (true) {
            let [_a$1, _r$2] = arg;
            var R = (() => {
                var self = _a$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $198 = _r$2;
                        return $198;
                    case 'o':
                        var $199 = self.slice(0, -1);
                        var $200 = Bits$reverse$tco$($199, (_r$2 + '0'));
                        return $200;
                    case 'i':
                        var $201 = self.slice(0, -1);
                        var $202 = Bits$reverse$tco$($201, (_r$2 + '1'));
                        return $202;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Bits$reverse$tco = x0 => x1 => Bits$reverse$tco$(x0, x1);

    function Bits$reverse$(_a$1) {
        var $203 = Bits$reverse$tco$(_a$1, Bits$e);
        return $203;
    };
    const Bits$reverse = x0 => Bits$reverse$(x0);
    const Fm$Name$to_bits = a0 => (fm_name_to_bits(a0));

    function Fm$get$(_name$2, _map$3) {
        var $204 = Map$get$((fm_name_to_bits(_name$2)), _map$3);
        return $204;
    };
    const Fm$get = x0 => x1 => Fm$get$(x0, x1);

    function String$cons$(_head$1, _tail$2) {
        var $205 = (String.fromCharCode(_head$1) + _tail$2);
        return $205;
    };
    const String$cons = x0 => x1 => String$cons$(x0, x1);

    function Fm$Synth$file_of$(_name$1) {
        var self = _name$1;
        if (self.length === 0) {
            var $207 = ".fm";
            var $206 = $207;
        } else {
            var $208 = self.charCodeAt(0);
            var $209 = self.slice(1);
            var self = ($208 === 46);
            if (self) {
                var $211 = ".fm";
                var $210 = $211;
            } else {
                var $212 = String$cons$($208, Fm$Synth$file_of$($209));
                var $210 = $212;
            };
            var $206 = $210;
        };
        return $206;
    };
    const Fm$Synth$file_of = x0 => Fm$Synth$file_of$(x0);

    function IO$get_file$(_name$1) {
        var $213 = IO$ask$("get_file", _name$1, (_file$2 => {
            var $214 = IO$end$(_file$2);
            return $214;
        }));
        return $213;
    };
    const IO$get_file = x0 => IO$get_file$(x0);

    function Parser$Reply$(_V$1) {
        var $215 = null;
        return $215;
    };
    const Parser$Reply = x0 => Parser$Reply$(x0);

    function Parser$Reply$value$(_idx$2, _code$3, _val$4) {
        var $216 = ({
            _: 'Parser.Reply.value',
            'idx': _idx$2,
            'code': _code$3,
            'val': _val$4
        });
        return $216;
    };
    const Parser$Reply$value = x0 => x1 => x2 => Parser$Reply$value$(x0, x1, x2);

    function Parser$is_eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $218 = Parser$Reply$value$(_idx$1, _code$2, Bool$true);
            var $217 = $218;
        } else {
            var $219 = self.charCodeAt(0);
            var $220 = self.slice(1);
            var $221 = Parser$Reply$value$(_idx$1, _code$2, Bool$false);
            var $217 = $221;
        };
        return $217;
    };
    const Parser$is_eof = x0 => x1 => Parser$is_eof$(x0, x1);

    function Parser$Reply$error$(_idx$2, _code$3, _err$4) {
        var $222 = ({
            _: 'Parser.Reply.error',
            'idx': _idx$2,
            'code': _code$3,
            'err': _err$4
        });
        return $222;
    };
    const Parser$Reply$error = x0 => x1 => x2 => Parser$Reply$error$(x0, x1, x2);

    function Parser$(_V$1) {
        var $223 = null;
        return $223;
    };
    const Parser = x0 => Parser$(x0);

    function Maybe$some$(_value$2) {
        var $224 = ({
            _: 'Maybe.some',
            'value': _value$2
        });
        return $224;
    };
    const Maybe$some = x0 => Maybe$some$(x0);

    function Parser$ErrorAt$new$(_idx$1, _code$2, _err$3) {
        var $225 = ({
            _: 'Parser.ErrorAt.new',
            'idx': _idx$1,
            'code': _code$2,
            'err': _err$3
        });
        return $225;
    };
    const Parser$ErrorAt$new = x0 => x1 => x2 => Parser$ErrorAt$new$(x0, x1, x2);
    const Nat$gtn = a0 => a1 => (a0 > a1);

    function Parser$ErrorAt$combine$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Maybe.none':
                var $227 = _b$2;
                var $226 = $227;
                break;
            case 'Maybe.some':
                var $228 = self.value;
                var self = _b$2;
                switch (self._) {
                    case 'Maybe.none':
                        var $230 = _a$1;
                        var $229 = $230;
                        break;
                    case 'Maybe.some':
                        var $231 = self.value;
                        var self = $228;
                        switch (self._) {
                            case 'Parser.ErrorAt.new':
                                var $233 = self.idx;
                                var $234 = self.code;
                                var $235 = self.err;
                                var self = $231;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $237 = self.idx;
                                        var $238 = self.code;
                                        var $239 = self.err;
                                        var self = ($233 > $237);
                                        if (self) {
                                            var $241 = _a$1;
                                            var $240 = $241;
                                        } else {
                                            var $242 = _b$2;
                                            var $240 = $242;
                                        };
                                        var $236 = $240;
                                        break;
                                };
                                var $232 = $236;
                                break;
                        };
                        var $229 = $232;
                        break;
                };
                var $226 = $229;
                break;
        };
        return $226;
    };
    const Parser$ErrorAt$combine = x0 => x1 => Parser$ErrorAt$combine$(x0, x1);

    function Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5) {
        var Parser$first_of$go$ = (_pars$2, _err$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_pars$2, _err$3, _idx$4, _code$5]
        });
        var Parser$first_of$go = _pars$2 => _err$3 => _idx$4 => _code$5 => Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5);
        var arg = [_pars$2, _err$3, _idx$4, _code$5];
        while (true) {
            let [_pars$2, _err$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _pars$2;
                switch (self._) {
                    case 'List.nil':
                        var self = _err$3;
                        switch (self._) {
                            case 'Maybe.none':
                                var $244 = Parser$Reply$error$(_idx$4, _code$5, "No parse.");
                                var $243 = $244;
                                break;
                            case 'Maybe.some':
                                var $245 = self.value;
                                var self = $245;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $247 = self.idx;
                                        var $248 = self.code;
                                        var $249 = self.err;
                                        var $250 = Parser$Reply$error$($247, $248, $249);
                                        var $246 = $250;
                                        break;
                                };
                                var $243 = $246;
                                break;
                        };
                        return $243;
                    case 'List.cons':
                        var $251 = self.head;
                        var $252 = self.tail;
                        var _parsed$8 = $251(_idx$4)(_code$5);
                        var self = _parsed$8;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $254 = self.idx;
                                var $255 = self.code;
                                var $256 = self.err;
                                var _neo$12 = Maybe$some$(Parser$ErrorAt$new$($254, $255, $256));
                                var _err$13 = Parser$ErrorAt$combine$(_neo$12, _err$3);
                                var $257 = Parser$first_of$go$($252, _err$13, _idx$4, _code$5);
                                var $253 = $257;
                                break;
                            case 'Parser.Reply.value':
                                var $258 = self.idx;
                                var $259 = self.code;
                                var $260 = self.val;
                                var $261 = Parser$Reply$value$($258, $259, $260);
                                var $253 = $261;
                                break;
                        };
                        return $253;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$first_of$go = x0 => x1 => x2 => x3 => Parser$first_of$go$(x0, x1, x2, x3);

    function Parser$first_of$(_pars$2) {
        var $262 = Parser$first_of$go(_pars$2)(Maybe$none);
        return $262;
    };
    const Parser$first_of = x0 => Parser$first_of$(x0);

    function List$cons$(_head$2, _tail$3) {
        var $263 = ({
            _: 'List.cons',
            'head': _head$2,
            'tail': _tail$3
        });
        return $263;
    };
    const List$cons = x0 => x1 => List$cons$(x0, x1);

    function List$(_A$1) {
        var $264 = null;
        return $264;
    };
    const List = x0 => List$(x0);
    const List$nil = ({
        _: 'List.nil'
    });

    function Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5) {
        var Parser$many$go$ = (_parse$2, _values$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_parse$2, _values$3, _idx$4, _code$5]
        });
        var Parser$many$go = _parse$2 => _values$3 => _idx$4 => _code$5 => Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5);
        var arg = [_parse$2, _values$3, _idx$4, _code$5];
        while (true) {
            let [_parse$2, _values$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _parse$2(_idx$4)(_code$5);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $265 = self.idx;
                        var $266 = self.code;
                        var $267 = self.err;
                        var $268 = Parser$Reply$value$(_idx$4, _code$5, _values$3(List$nil));
                        return $268;
                    case 'Parser.Reply.value':
                        var $269 = self.idx;
                        var $270 = self.code;
                        var $271 = self.val;
                        var $272 = Parser$many$go$(_parse$2, (_xs$9 => {
                            var $273 = _values$3(List$cons$($271, _xs$9));
                            return $273;
                        }), $269, $270);
                        return $272;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$many$go = x0 => x1 => x2 => x3 => Parser$many$go$(x0, x1, x2, x3);

    function Parser$many$(_parser$2) {
        var $274 = Parser$many$go(_parser$2)((_x$3 => {
            var $275 = _x$3;
            return $275;
        }));
        return $274;
    };
    const Parser$many = x0 => Parser$many$(x0);
    const Unit$new = 1;
    const String$concat = a0 => a1 => (a0 + a1);

    function String$flatten$go$(_xs$1, _res$2) {
        var String$flatten$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                switch (self._) {
                    case 'List.nil':
                        var $276 = _res$2;
                        return $276;
                    case 'List.cons':
                        var $277 = self.head;
                        var $278 = self.tail;
                        var $279 = String$flatten$go$($278, (_res$2 + $277));
                        return $279;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);

    function String$flatten$(_xs$1) {
        var $280 = String$flatten$go$(_xs$1, "");
        return $280;
    };
    const String$flatten = x0 => String$flatten$(x0);
    const String$nil = '';

    function Parser$text$go$(_text$1, _idx$2, _code$3) {
        var self = _text$1;
        if (self.length === 0) {
            var $282 = Parser$Reply$value$(_idx$2, _code$3, Unit$new);
            var $281 = $282;
        } else {
            var $283 = self.charCodeAt(0);
            var $284 = self.slice(1);
            var self = _code$3;
            if (self.length === 0) {
                var _error$6 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found end of file.", List$nil))));
                var $286 = Parser$Reply$error$(_idx$2, _code$3, _error$6);
                var $285 = $286;
            } else {
                var $287 = self.charCodeAt(0);
                var $288 = self.slice(1);
                var self = ($283 === $287);
                if (self) {
                    var $290 = Parser$text$($284, Nat$succ$(_idx$2), $288);
                    var $289 = $290;
                } else {
                    var _error$8 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found \'", List$cons$(String$cons$($287, String$nil), List$cons$("\'.", List$nil))))));
                    var $291 = Parser$Reply$error$(_idx$2, _code$3, _error$8);
                    var $289 = $291;
                };
                var $285 = $289;
            };
            var $281 = $285;
        };
        return $281;
    };
    const Parser$text$go = x0 => x1 => x2 => Parser$text$go$(x0, x1, x2);

    function Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Parser$text$go$(_text$1, _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $293 = self.idx;
                var $294 = self.code;
                var $295 = self.err;
                var $296 = Parser$Reply$error$(_idx$2, _code$3, $295);
                var $292 = $296;
                break;
            case 'Parser.Reply.value':
                var $297 = self.idx;
                var $298 = self.code;
                var $299 = self.val;
                var $300 = Parser$Reply$value$($297, $298, $299);
                var $292 = $300;
                break;
        };
        return $292;
    };
    const Parser$text = x0 => x1 => x2 => Parser$text$(x0, x1, x2);

    function Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6) {
        var Parser$until$go$ = (_until$2, _parse$3, _values$4, _idx$5, _code$6) => ({
            ctr: 'TCO',
            arg: [_until$2, _parse$3, _values$4, _idx$5, _code$6]
        });
        var Parser$until$go = _until$2 => _parse$3 => _values$4 => _idx$5 => _code$6 => Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6);
        var arg = [_until$2, _parse$3, _values$4, _idx$5, _code$6];
        while (true) {
            let [_until$2, _parse$3, _values$4, _idx$5, _code$6] = arg;
            var R = (() => {
                var _until_reply$7 = _until$2(_idx$5)(_code$6);
                var self = _until_reply$7;
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $302 = self.idx;
                        var $303 = self.code;
                        var $304 = self.err;
                        var _reply$11 = _parse$3(_idx$5)(_code$6);
                        var self = _reply$11;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $306 = self.idx;
                                var $307 = self.code;
                                var $308 = self.err;
                                var $309 = Parser$Reply$error$($306, $307, $308);
                                var $305 = $309;
                                break;
                            case 'Parser.Reply.value':
                                var $310 = self.idx;
                                var $311 = self.code;
                                var $312 = self.val;
                                var $313 = Parser$until$go$(_until$2, _parse$3, (_xs$15 => {
                                    var $314 = _values$4(List$cons$($312, _xs$15));
                                    return $314;
                                }), $310, $311);
                                var $305 = $313;
                                break;
                        };
                        var $301 = $305;
                        break;
                    case 'Parser.Reply.value':
                        var $315 = self.idx;
                        var $316 = self.code;
                        var $317 = self.val;
                        var $318 = Parser$Reply$value$($315, $316, _values$4(List$nil));
                        var $301 = $318;
                        break;
                };
                return $301;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$until$go = x0 => x1 => x2 => x3 => x4 => Parser$until$go$(x0, x1, x2, x3, x4);

    function Parser$until$(_until$2, _parse$3) {
        var $319 = Parser$until$go(_until$2)(_parse$3)((_x$4 => {
            var $320 = _x$4;
            return $320;
        }));
        return $319;
    };
    const Parser$until = x0 => x1 => Parser$until$(x0, x1);

    function Parser$one$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $322 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected end of file.");
            var $321 = $322;
        } else {
            var $323 = self.charCodeAt(0);
            var $324 = self.slice(1);
            var $325 = Parser$Reply$value$(Nat$succ$(_idx$1), $324, $323);
            var $321 = $325;
        };
        return $321;
    };
    const Parser$one = x0 => x1 => Parser$one$(x0, x1);
    const Fm$Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{a}"), List$cons$((_idx$1 => _code$2 => {
        var self = Parser$text$("//", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $327 = self.idx;
                var $328 = self.code;
                var $329 = self.err;
                var $330 = Parser$Reply$error$($327, $328, $329);
                var $326 = $330;
                break;
            case 'Parser.Reply.value':
                var $331 = self.idx;
                var $332 = self.code;
                var $333 = self.val;
                var self = Parser$until$(Parser$text("\u{a}"), Parser$one)($331)($332);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $335 = self.idx;
                        var $336 = self.code;
                        var $337 = self.err;
                        var $338 = Parser$Reply$error$($335, $336, $337);
                        var $334 = $338;
                        break;
                    case 'Parser.Reply.value':
                        var $339 = self.idx;
                        var $340 = self.code;
                        var $341 = self.val;
                        var $342 = Parser$Reply$value$($339, $340, Unit$new);
                        var $334 = $342;
                        break;
                };
                var $326 = $334;
                break;
        };
        return $326;
    }), List$nil)))));

    function Parser$many1$(_parser$2, _idx$3, _code$4) {
        var self = _parser$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $344 = self.idx;
                var $345 = self.code;
                var $346 = self.err;
                var $347 = Parser$Reply$error$($344, $345, $346);
                var $343 = $347;
                break;
            case 'Parser.Reply.value':
                var $348 = self.idx;
                var $349 = self.code;
                var $350 = self.val;
                var self = Parser$many$(_parser$2)($348)($349);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $352 = self.idx;
                        var $353 = self.code;
                        var $354 = self.err;
                        var $355 = Parser$Reply$error$($352, $353, $354);
                        var $351 = $355;
                        break;
                    case 'Parser.Reply.value':
                        var $356 = self.idx;
                        var $357 = self.code;
                        var $358 = self.val;
                        var $359 = Parser$Reply$value$($356, $357, List$cons$($350, $358));
                        var $351 = $359;
                        break;
                };
                var $343 = $351;
                break;
        };
        return $343;
    };
    const Parser$many1 = x0 => x1 => x2 => Parser$many1$(x0, x1, x2);

    function Fm$Name$is_letter$(_chr$1) {
        var self = U16$btw$(65, _chr$1, 90);
        if (self) {
            var $361 = Bool$true;
            var $360 = $361;
        } else {
            var self = U16$btw$(97, _chr$1, 122);
            if (self) {
                var $363 = Bool$true;
                var $362 = $363;
            } else {
                var self = U16$btw$(48, _chr$1, 57);
                if (self) {
                    var $365 = Bool$true;
                    var $364 = $365;
                } else {
                    var self = (46 === _chr$1);
                    if (self) {
                        var $367 = Bool$true;
                        var $366 = $367;
                    } else {
                        var self = (95 === _chr$1);
                        if (self) {
                            var $369 = Bool$true;
                            var $368 = $369;
                        } else {
                            var self = (94 === _chr$1);
                            if (self) {
                                var $371 = Bool$true;
                                var $370 = $371;
                            } else {
                                var $372 = Bool$false;
                                var $370 = $372;
                            };
                            var $368 = $370;
                        };
                        var $366 = $368;
                    };
                    var $364 = $366;
                };
                var $362 = $364;
            };
            var $360 = $362;
        };
        return $360;
    };
    const Fm$Name$is_letter = x0 => Fm$Name$is_letter$(x0);

    function Fm$Parser$letter$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $374 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected eof.");
            var $373 = $374;
        } else {
            var $375 = self.charCodeAt(0);
            var $376 = self.slice(1);
            var self = Fm$Name$is_letter$($375);
            if (self) {
                var $378 = Parser$Reply$value$(Nat$succ$(_idx$1), $376, $375);
                var $377 = $378;
            } else {
                var $379 = Parser$Reply$error$(_idx$1, _code$2, "Expected letter.");
                var $377 = $379;
            };
            var $373 = $377;
        };
        return $373;
    };
    const Fm$Parser$letter = x0 => x1 => Fm$Parser$letter$(x0, x1);

    function List$fold$(_list$2, _nil$4, _cons$5) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $381 = _nil$4;
                var $380 = $381;
                break;
            case 'List.cons':
                var $382 = self.head;
                var $383 = self.tail;
                var $384 = _cons$5($382)(List$fold$($383, _nil$4, _cons$5));
                var $380 = $384;
                break;
        };
        return $380;
    };
    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);

    function Fm$Parser$name1$(_idx$1, _code$2) {
        var self = Fm$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $386 = self.idx;
                var $387 = self.code;
                var $388 = self.err;
                var $389 = Parser$Reply$error$($386, $387, $388);
                var $385 = $389;
                break;
            case 'Parser.Reply.value':
                var $390 = self.idx;
                var $391 = self.code;
                var $392 = self.val;
                var self = Parser$many1$(Fm$Parser$letter, $390, $391);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $394 = self.idx;
                        var $395 = self.code;
                        var $396 = self.err;
                        var $397 = Parser$Reply$error$($394, $395, $396);
                        var $393 = $397;
                        break;
                    case 'Parser.Reply.value':
                        var $398 = self.idx;
                        var $399 = self.code;
                        var $400 = self.val;
                        var $401 = Parser$Reply$value$($398, $399, List$fold$($400, String$nil, String$cons));
                        var $393 = $401;
                        break;
                };
                var $385 = $393;
                break;
        };
        return $385;
    };
    const Fm$Parser$name1 = x0 => x1 => Fm$Parser$name1$(x0, x1);

    function Fm$Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Fm$Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $403 = self.idx;
                var $404 = self.code;
                var $405 = self.err;
                var $406 = Parser$Reply$error$($403, $404, $405);
                var $402 = $406;
                break;
            case 'Parser.Reply.value':
                var $407 = self.idx;
                var $408 = self.code;
                var $409 = self.val;
                var $410 = Parser$text$(_text$1, $407, $408);
                var $402 = $410;
                break;
        };
        return $402;
    };
    const Fm$Parser$text = x0 => x1 => x2 => Fm$Parser$text$(x0, x1, x2);

    function Parser$until1$(_cond$2, _parser$3, _idx$4, _code$5) {
        var self = _parser$3(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $412 = self.idx;
                var $413 = self.code;
                var $414 = self.err;
                var $415 = Parser$Reply$error$($412, $413, $414);
                var $411 = $415;
                break;
            case 'Parser.Reply.value':
                var $416 = self.idx;
                var $417 = self.code;
                var $418 = self.val;
                var self = Parser$until$(_cond$2, _parser$3)($416)($417);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $420 = self.idx;
                        var $421 = self.code;
                        var $422 = self.err;
                        var $423 = Parser$Reply$error$($420, $421, $422);
                        var $419 = $423;
                        break;
                    case 'Parser.Reply.value':
                        var $424 = self.idx;
                        var $425 = self.code;
                        var $426 = self.val;
                        var $427 = Parser$Reply$value$($424, $425, List$cons$($418, $426));
                        var $419 = $427;
                        break;
                };
                var $411 = $419;
                break;
        };
        return $411;
    };
    const Parser$until1 = x0 => x1 => x2 => x3 => Parser$until1$(x0, x1, x2, x3);

    function Pair$(_A$1, _B$2) {
        var $428 = null;
        return $428;
    };
    const Pair = x0 => x1 => Pair$(x0, x1);

    function Parser$maybe$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $430 = self.idx;
                var $431 = self.code;
                var $432 = self.err;
                var $433 = Parser$Reply$value$(_idx$3, _code$4, Maybe$none);
                var $429 = $433;
                break;
            case 'Parser.Reply.value':
                var $434 = self.idx;
                var $435 = self.code;
                var $436 = self.val;
                var $437 = Parser$Reply$value$($434, $435, Maybe$some$($436));
                var $429 = $437;
                break;
        };
        return $429;
    };
    const Parser$maybe = x0 => x1 => x2 => Parser$maybe$(x0, x1, x2);

    function Fm$Parser$item$(_parser$2, _idx$3, _code$4) {
        var self = Fm$Parser$spaces(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $439 = self.idx;
                var $440 = self.code;
                var $441 = self.err;
                var $442 = Parser$Reply$error$($439, $440, $441);
                var $438 = $442;
                break;
            case 'Parser.Reply.value':
                var $443 = self.idx;
                var $444 = self.code;
                var $445 = self.val;
                var self = _parser$2($443)($444);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $447 = self.idx;
                        var $448 = self.code;
                        var $449 = self.err;
                        var $450 = Parser$Reply$error$($447, $448, $449);
                        var $446 = $450;
                        break;
                    case 'Parser.Reply.value':
                        var $451 = self.idx;
                        var $452 = self.code;
                        var $453 = self.val;
                        var self = Parser$maybe$(Fm$Parser$text(","), $451, $452);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $455 = self.idx;
                                var $456 = self.code;
                                var $457 = self.err;
                                var $458 = Parser$Reply$error$($455, $456, $457);
                                var $454 = $458;
                                break;
                            case 'Parser.Reply.value':
                                var $459 = self.idx;
                                var $460 = self.code;
                                var $461 = self.val;
                                var $462 = Parser$Reply$value$($459, $460, $453);
                                var $454 = $462;
                                break;
                        };
                        var $446 = $454;
                        break;
                };
                var $438 = $446;
                break;
        };
        return $438;
    };
    const Fm$Parser$item = x0 => x1 => x2 => Fm$Parser$item$(x0, x1, x2);

    function Fm$Parser$name$(_idx$1, _code$2) {
        var self = Fm$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $464 = self.idx;
                var $465 = self.code;
                var $466 = self.err;
                var $467 = Parser$Reply$error$($464, $465, $466);
                var $463 = $467;
                break;
            case 'Parser.Reply.value':
                var $468 = self.idx;
                var $469 = self.code;
                var $470 = self.val;
                var self = Parser$many$(Fm$Parser$letter)($468)($469);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $472 = self.idx;
                        var $473 = self.code;
                        var $474 = self.err;
                        var $475 = Parser$Reply$error$($472, $473, $474);
                        var $471 = $475;
                        break;
                    case 'Parser.Reply.value':
                        var $476 = self.idx;
                        var $477 = self.code;
                        var $478 = self.val;
                        var $479 = Parser$Reply$value$($476, $477, List$fold$($478, String$nil, String$cons));
                        var $471 = $479;
                        break;
                };
                var $463 = $471;
                break;
        };
        return $463;
    };
    const Fm$Parser$name = x0 => x1 => Fm$Parser$name$(x0, x1);

    function Parser$get_index$(_idx$1, _code$2) {
        var $480 = Parser$Reply$value$(_idx$1, _code$2, _idx$1);
        return $480;
    };
    const Parser$get_index = x0 => x1 => Parser$get_index$(x0, x1);

    function Fm$Parser$init$(_idx$1, _code$2) {
        var self = Fm$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $482 = self.idx;
                var $483 = self.code;
                var $484 = self.err;
                var $485 = Parser$Reply$error$($482, $483, $484);
                var $481 = $485;
                break;
            case 'Parser.Reply.value':
                var $486 = self.idx;
                var $487 = self.code;
                var $488 = self.val;
                var self = Parser$get_index$($486, $487);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $490 = self.idx;
                        var $491 = self.code;
                        var $492 = self.err;
                        var $493 = Parser$Reply$error$($490, $491, $492);
                        var $489 = $493;
                        break;
                    case 'Parser.Reply.value':
                        var $494 = self.idx;
                        var $495 = self.code;
                        var $496 = self.val;
                        var $497 = Parser$Reply$value$($494, $495, $496);
                        var $489 = $497;
                        break;
                };
                var $481 = $489;
                break;
        };
        return $481;
    };
    const Fm$Parser$init = x0 => x1 => Fm$Parser$init$(x0, x1);

    function Fm$Origin$new$(_file$1, _from$2, _upto$3) {
        var $498 = ({
            _: 'Fm.Origin.new',
            'file': _file$1,
            'from': _from$2,
            'upto': _upto$3
        });
        return $498;
    };
    const Fm$Origin$new = x0 => x1 => x2 => Fm$Origin$new$(x0, x1, x2);

    function Fm$Parser$stop$(_from$1, _idx$2, _code$3) {
        var self = Parser$get_index$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $500 = self.idx;
                var $501 = self.code;
                var $502 = self.err;
                var $503 = Parser$Reply$error$($500, $501, $502);
                var $499 = $503;
                break;
            case 'Parser.Reply.value':
                var $504 = self.idx;
                var $505 = self.code;
                var $506 = self.val;
                var _orig$7 = Fm$Origin$new$("", _from$1, $506);
                var $507 = Parser$Reply$value$($504, $505, _orig$7);
                var $499 = $507;
                break;
        };
        return $499;
    };
    const Fm$Parser$stop = x0 => x1 => x2 => Fm$Parser$stop$(x0, x1, x2);

    function Fm$Term$ori$(_orig$1, _expr$2) {
        var $508 = ({
            _: 'Fm.Term.ori',
            'orig': _orig$1,
            'expr': _expr$2
        });
        return $508;
    };
    const Fm$Term$ori = x0 => x1 => Fm$Term$ori$(x0, x1);
    const Fm$Term$typ = ({
        _: 'Fm.Term.typ'
    });

    function Fm$Parser$type$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $510 = self.idx;
                var $511 = self.code;
                var $512 = self.err;
                var $513 = Parser$Reply$error$($510, $511, $512);
                var $509 = $513;
                break;
            case 'Parser.Reply.value':
                var $514 = self.idx;
                var $515 = self.code;
                var $516 = self.val;
                var self = Fm$Parser$text$("Type", $514, $515);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $518 = self.idx;
                        var $519 = self.code;
                        var $520 = self.err;
                        var $521 = Parser$Reply$error$($518, $519, $520);
                        var $517 = $521;
                        break;
                    case 'Parser.Reply.value':
                        var $522 = self.idx;
                        var $523 = self.code;
                        var $524 = self.val;
                        var self = Fm$Parser$stop$($516, $522, $523);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $526 = self.idx;
                                var $527 = self.code;
                                var $528 = self.err;
                                var $529 = Parser$Reply$error$($526, $527, $528);
                                var $525 = $529;
                                break;
                            case 'Parser.Reply.value':
                                var $530 = self.idx;
                                var $531 = self.code;
                                var $532 = self.val;
                                var $533 = Parser$Reply$value$($530, $531, Fm$Term$ori$($532, Fm$Term$typ));
                                var $525 = $533;
                                break;
                        };
                        var $517 = $525;
                        break;
                };
                var $509 = $517;
                break;
        };
        return $509;
    };
    const Fm$Parser$type = x0 => x1 => Fm$Parser$type$(x0, x1);

    function Fm$Term$all$(_eras$1, _self$2, _name$3, _xtyp$4, _body$5) {
        var $534 = ({
            _: 'Fm.Term.all',
            'eras': _eras$1,
            'self': _self$2,
            'name': _name$3,
            'xtyp': _xtyp$4,
            'body': _body$5
        });
        return $534;
    };
    const Fm$Term$all = x0 => x1 => x2 => x3 => x4 => Fm$Term$all$(x0, x1, x2, x3, x4);

    function Fm$Parser$forall$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $536 = self.idx;
                var $537 = self.code;
                var $538 = self.err;
                var $539 = Parser$Reply$error$($536, $537, $538);
                var $535 = $539;
                break;
            case 'Parser.Reply.value':
                var $540 = self.idx;
                var $541 = self.code;
                var $542 = self.val;
                var self = Fm$Parser$name$($540, $541);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $544 = self.idx;
                        var $545 = self.code;
                        var $546 = self.err;
                        var $547 = Parser$Reply$error$($544, $545, $546);
                        var $543 = $547;
                        break;
                    case 'Parser.Reply.value':
                        var $548 = self.idx;
                        var $549 = self.code;
                        var $550 = self.val;
                        var self = Fm$Parser$binder$($548, $549);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $552 = self.idx;
                                var $553 = self.code;
                                var $554 = self.err;
                                var $555 = Parser$Reply$error$($552, $553, $554);
                                var $551 = $555;
                                break;
                            case 'Parser.Reply.value':
                                var $556 = self.idx;
                                var $557 = self.code;
                                var $558 = self.val;
                                var self = Parser$maybe$(Fm$Parser$text("->"), $556, $557);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $560 = self.idx;
                                        var $561 = self.code;
                                        var $562 = self.err;
                                        var $563 = Parser$Reply$error$($560, $561, $562);
                                        var $559 = $563;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $564 = self.idx;
                                        var $565 = self.code;
                                        var $566 = self.val;
                                        var self = Fm$Parser$term$($564, $565);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $568 = self.idx;
                                                var $569 = self.code;
                                                var $570 = self.err;
                                                var $571 = Parser$Reply$error$($568, $569, $570);
                                                var $567 = $571;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $572 = self.idx;
                                                var $573 = self.code;
                                                var $574 = self.val;
                                                var _term$18 = List$fold$($558, $574, (_x$18 => _t$19 => {
                                                    var self = _x$18;
                                                    switch (self._) {
                                                        case 'Fm.Binder.new':
                                                            var $577 = self.eras;
                                                            var $578 = self.name;
                                                            var $579 = self.term;
                                                            var $580 = Fm$Term$all$($577, "", $578, $579, (_s$23 => _x$24 => {
                                                                var $581 = _t$19;
                                                                return $581;
                                                            }));
                                                            var $576 = $580;
                                                            break;
                                                    };
                                                    return $576;
                                                }));
                                                var self = Fm$Parser$stop$($542, $572, $573);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $582 = self.idx;
                                                        var $583 = self.code;
                                                        var $584 = self.err;
                                                        var $585 = Parser$Reply$error$($582, $583, $584);
                                                        var $575 = $585;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $586 = self.idx;
                                                        var $587 = self.code;
                                                        var $588 = self.val;
                                                        var $589 = Parser$Reply$value$($586, $587, (() => {
                                                            var self = _term$18;
                                                            switch (self._) {
                                                                case 'Fm.Term.var':
                                                                    var $590 = self.name;
                                                                    var $591 = self.indx;
                                                                    var $592 = _term$18;
                                                                    return $592;
                                                                case 'Fm.Term.ref':
                                                                    var $593 = self.name;
                                                                    var $594 = _term$18;
                                                                    return $594;
                                                                case 'Fm.Term.typ':
                                                                    var $595 = _term$18;
                                                                    return $595;
                                                                case 'Fm.Term.all':
                                                                    var $596 = self.eras;
                                                                    var $597 = self.self;
                                                                    var $598 = self.name;
                                                                    var $599 = self.xtyp;
                                                                    var $600 = self.body;
                                                                    var $601 = Fm$Term$ori$($588, Fm$Term$all$($596, $550, $598, $599, $600));
                                                                    return $601;
                                                                case 'Fm.Term.lam':
                                                                    var $602 = self.name;
                                                                    var $603 = self.body;
                                                                    var $604 = _term$18;
                                                                    return $604;
                                                                case 'Fm.Term.app':
                                                                    var $605 = self.func;
                                                                    var $606 = self.argm;
                                                                    var $607 = _term$18;
                                                                    return $607;
                                                                case 'Fm.Term.let':
                                                                    var $608 = self.name;
                                                                    var $609 = self.expr;
                                                                    var $610 = self.body;
                                                                    var $611 = _term$18;
                                                                    return $611;
                                                                case 'Fm.Term.def':
                                                                    var $612 = self.name;
                                                                    var $613 = self.expr;
                                                                    var $614 = self.body;
                                                                    var $615 = _term$18;
                                                                    return $615;
                                                                case 'Fm.Term.ann':
                                                                    var $616 = self.done;
                                                                    var $617 = self.term;
                                                                    var $618 = self.type;
                                                                    var $619 = _term$18;
                                                                    return $619;
                                                                case 'Fm.Term.gol':
                                                                    var $620 = self.name;
                                                                    var $621 = self.dref;
                                                                    var $622 = self.verb;
                                                                    var $623 = _term$18;
                                                                    return $623;
                                                                case 'Fm.Term.hol':
                                                                    var $624 = self.path;
                                                                    var $625 = _term$18;
                                                                    return $625;
                                                                case 'Fm.Term.nat':
                                                                    var $626 = self.natx;
                                                                    var $627 = _term$18;
                                                                    return $627;
                                                                case 'Fm.Term.chr':
                                                                    var $628 = self.chrx;
                                                                    var $629 = _term$18;
                                                                    return $629;
                                                                case 'Fm.Term.str':
                                                                    var $630 = self.strx;
                                                                    var $631 = _term$18;
                                                                    return $631;
                                                                case 'Fm.Term.cse':
                                                                    var $632 = self.path;
                                                                    var $633 = self.expr;
                                                                    var $634 = self.name;
                                                                    var $635 = self.with;
                                                                    var $636 = self.cses;
                                                                    var $637 = self.moti;
                                                                    var $638 = _term$18;
                                                                    return $638;
                                                                case 'Fm.Term.ori':
                                                                    var $639 = self.orig;
                                                                    var $640 = self.expr;
                                                                    var $641 = _term$18;
                                                                    return $641;
                                                            };
                                                        })());
                                                        var $575 = $589;
                                                        break;
                                                };
                                                var $567 = $575;
                                                break;
                                        };
                                        var $559 = $567;
                                        break;
                                };
                                var $551 = $559;
                                break;
                        };
                        var $543 = $551;
                        break;
                };
                var $535 = $543;
                break;
        };
        return $535;
    };
    const Fm$Parser$forall = x0 => x1 => Fm$Parser$forall$(x0, x1);

    function Fm$Term$lam$(_name$1, _body$2) {
        var $642 = ({
            _: 'Fm.Term.lam',
            'name': _name$1,
            'body': _body$2
        });
        return $642;
    };
    const Fm$Term$lam = x0 => x1 => Fm$Term$lam$(x0, x1);

    function Fm$Parser$make_lambda$(_names$1, _body$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.nil':
                var $644 = _body$2;
                var $643 = $644;
                break;
            case 'List.cons':
                var $645 = self.head;
                var $646 = self.tail;
                var $647 = Fm$Term$lam$($645, (_x$5 => {
                    var $648 = Fm$Parser$make_lambda$($646, _body$2);
                    return $648;
                }));
                var $643 = $647;
                break;
        };
        return $643;
    };
    const Fm$Parser$make_lambda = x0 => x1 => Fm$Parser$make_lambda$(x0, x1);

    function Fm$Parser$lambda$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $650 = self.idx;
                var $651 = self.code;
                var $652 = self.err;
                var $653 = Parser$Reply$error$($650, $651, $652);
                var $649 = $653;
                break;
            case 'Parser.Reply.value':
                var $654 = self.idx;
                var $655 = self.code;
                var $656 = self.val;
                var self = Fm$Parser$text$("(", $654, $655);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $658 = self.idx;
                        var $659 = self.code;
                        var $660 = self.err;
                        var $661 = Parser$Reply$error$($658, $659, $660);
                        var $657 = $661;
                        break;
                    case 'Parser.Reply.value':
                        var $662 = self.idx;
                        var $663 = self.code;
                        var $664 = self.val;
                        var self = Parser$until1$(Fm$Parser$text(")"), Fm$Parser$item(Fm$Parser$name1), $662, $663);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $666 = self.idx;
                                var $667 = self.code;
                                var $668 = self.err;
                                var $669 = Parser$Reply$error$($666, $667, $668);
                                var $665 = $669;
                                break;
                            case 'Parser.Reply.value':
                                var $670 = self.idx;
                                var $671 = self.code;
                                var $672 = self.val;
                                var self = Fm$Parser$term$($670, $671);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $674 = self.idx;
                                        var $675 = self.code;
                                        var $676 = self.err;
                                        var $677 = Parser$Reply$error$($674, $675, $676);
                                        var $673 = $677;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $678 = self.idx;
                                        var $679 = self.code;
                                        var $680 = self.val;
                                        var self = Fm$Parser$stop$($656, $678, $679);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $682 = self.idx;
                                                var $683 = self.code;
                                                var $684 = self.err;
                                                var $685 = Parser$Reply$error$($682, $683, $684);
                                                var $681 = $685;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $686 = self.idx;
                                                var $687 = self.code;
                                                var $688 = self.val;
                                                var _expr$18 = Fm$Parser$make_lambda$($672, $680);
                                                var $689 = Parser$Reply$value$($686, $687, Fm$Term$ori$($688, _expr$18));
                                                var $681 = $689;
                                                break;
                                        };
                                        var $673 = $681;
                                        break;
                                };
                                var $665 = $673;
                                break;
                        };
                        var $657 = $665;
                        break;
                };
                var $649 = $657;
                break;
        };
        return $649;
    };
    const Fm$Parser$lambda = x0 => x1 => Fm$Parser$lambda$(x0, x1);

    function Fm$Parser$lambda$erased$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $691 = self.idx;
                var $692 = self.code;
                var $693 = self.err;
                var $694 = Parser$Reply$error$($691, $692, $693);
                var $690 = $694;
                break;
            case 'Parser.Reply.value':
                var $695 = self.idx;
                var $696 = self.code;
                var $697 = self.val;
                var self = Fm$Parser$text$("<", $695, $696);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $699 = self.idx;
                        var $700 = self.code;
                        var $701 = self.err;
                        var $702 = Parser$Reply$error$($699, $700, $701);
                        var $698 = $702;
                        break;
                    case 'Parser.Reply.value':
                        var $703 = self.idx;
                        var $704 = self.code;
                        var $705 = self.val;
                        var self = Parser$until1$(Fm$Parser$text(">"), Fm$Parser$item(Fm$Parser$name1), $703, $704);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $707 = self.idx;
                                var $708 = self.code;
                                var $709 = self.err;
                                var $710 = Parser$Reply$error$($707, $708, $709);
                                var $706 = $710;
                                break;
                            case 'Parser.Reply.value':
                                var $711 = self.idx;
                                var $712 = self.code;
                                var $713 = self.val;
                                var self = Fm$Parser$term$($711, $712);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $715 = self.idx;
                                        var $716 = self.code;
                                        var $717 = self.err;
                                        var $718 = Parser$Reply$error$($715, $716, $717);
                                        var $714 = $718;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $719 = self.idx;
                                        var $720 = self.code;
                                        var $721 = self.val;
                                        var self = Fm$Parser$stop$($697, $719, $720);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $723 = self.idx;
                                                var $724 = self.code;
                                                var $725 = self.err;
                                                var $726 = Parser$Reply$error$($723, $724, $725);
                                                var $722 = $726;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $727 = self.idx;
                                                var $728 = self.code;
                                                var $729 = self.val;
                                                var _expr$18 = Fm$Parser$make_lambda$($713, $721);
                                                var $730 = Parser$Reply$value$($727, $728, Fm$Term$ori$($729, _expr$18));
                                                var $722 = $730;
                                                break;
                                        };
                                        var $714 = $722;
                                        break;
                                };
                                var $706 = $714;
                                break;
                        };
                        var $698 = $706;
                        break;
                };
                var $690 = $698;
                break;
        };
        return $690;
    };
    const Fm$Parser$lambda$erased = x0 => x1 => Fm$Parser$lambda$erased$(x0, x1);

    function Fm$Parser$lambda$nameless$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $732 = self.idx;
                var $733 = self.code;
                var $734 = self.err;
                var $735 = Parser$Reply$error$($732, $733, $734);
                var $731 = $735;
                break;
            case 'Parser.Reply.value':
                var $736 = self.idx;
                var $737 = self.code;
                var $738 = self.val;
                var self = Fm$Parser$text$("()", $736, $737);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $740 = self.idx;
                        var $741 = self.code;
                        var $742 = self.err;
                        var $743 = Parser$Reply$error$($740, $741, $742);
                        var $739 = $743;
                        break;
                    case 'Parser.Reply.value':
                        var $744 = self.idx;
                        var $745 = self.code;
                        var $746 = self.val;
                        var self = Fm$Parser$term$($744, $745);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $748 = self.idx;
                                var $749 = self.code;
                                var $750 = self.err;
                                var $751 = Parser$Reply$error$($748, $749, $750);
                                var $747 = $751;
                                break;
                            case 'Parser.Reply.value':
                                var $752 = self.idx;
                                var $753 = self.code;
                                var $754 = self.val;
                                var self = Fm$Parser$stop$($738, $752, $753);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $756 = self.idx;
                                        var $757 = self.code;
                                        var $758 = self.err;
                                        var $759 = Parser$Reply$error$($756, $757, $758);
                                        var $755 = $759;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $760 = self.idx;
                                        var $761 = self.code;
                                        var $762 = self.val;
                                        var _expr$15 = Fm$Term$lam$("", (_x$15 => {
                                            var $764 = $754;
                                            return $764;
                                        }));
                                        var $763 = Parser$Reply$value$($760, $761, Fm$Term$ori$($762, _expr$15));
                                        var $755 = $763;
                                        break;
                                };
                                var $747 = $755;
                                break;
                        };
                        var $739 = $747;
                        break;
                };
                var $731 = $739;
                break;
        };
        return $731;
    };
    const Fm$Parser$lambda$nameless = x0 => x1 => Fm$Parser$lambda$nameless$(x0, x1);

    function Fm$Parser$parenthesis$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("(", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $766 = self.idx;
                var $767 = self.code;
                var $768 = self.err;
                var $769 = Parser$Reply$error$($766, $767, $768);
                var $765 = $769;
                break;
            case 'Parser.Reply.value':
                var $770 = self.idx;
                var $771 = self.code;
                var $772 = self.val;
                var self = Fm$Parser$term$($770, $771);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $774 = self.idx;
                        var $775 = self.code;
                        var $776 = self.err;
                        var $777 = Parser$Reply$error$($774, $775, $776);
                        var $773 = $777;
                        break;
                    case 'Parser.Reply.value':
                        var $778 = self.idx;
                        var $779 = self.code;
                        var $780 = self.val;
                        var self = Fm$Parser$text$(")", $778, $779);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $782 = self.idx;
                                var $783 = self.code;
                                var $784 = self.err;
                                var $785 = Parser$Reply$error$($782, $783, $784);
                                var $781 = $785;
                                break;
                            case 'Parser.Reply.value':
                                var $786 = self.idx;
                                var $787 = self.code;
                                var $788 = self.val;
                                var $789 = Parser$Reply$value$($786, $787, $780);
                                var $781 = $789;
                                break;
                        };
                        var $773 = $781;
                        break;
                };
                var $765 = $773;
                break;
        };
        return $765;
    };
    const Fm$Parser$parenthesis = x0 => x1 => Fm$Parser$parenthesis$(x0, x1);

    function Fm$Term$ref$(_name$1) {
        var $790 = ({
            _: 'Fm.Term.ref',
            'name': _name$1
        });
        return $790;
    };
    const Fm$Term$ref = x0 => Fm$Term$ref$(x0);

    function Fm$Term$app$(_func$1, _argm$2) {
        var $791 = ({
            _: 'Fm.Term.app',
            'func': _func$1,
            'argm': _argm$2
        });
        return $791;
    };
    const Fm$Term$app = x0 => x1 => Fm$Term$app$(x0, x1);

    function Fm$Term$hol$(_path$1) {
        var $792 = ({
            _: 'Fm.Term.hol',
            'path': _path$1
        });
        return $792;
    };
    const Fm$Term$hol = x0 => Fm$Term$hol$(x0);

    function Fm$Term$let$(_name$1, _expr$2, _body$3) {
        var $793 = ({
            _: 'Fm.Term.let',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $793;
    };
    const Fm$Term$let = x0 => x1 => x2 => Fm$Term$let$(x0, x1, x2);

    function Fm$Parser$letforrange$u32$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $795 = self.idx;
                var $796 = self.code;
                var $797 = self.err;
                var $798 = Parser$Reply$error$($795, $796, $797);
                var $794 = $798;
                break;
            case 'Parser.Reply.value':
                var $799 = self.idx;
                var $800 = self.code;
                var $801 = self.val;
                var self = Fm$Parser$text$("let ", $799, $800);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $803 = self.idx;
                        var $804 = self.code;
                        var $805 = self.err;
                        var $806 = Parser$Reply$error$($803, $804, $805);
                        var $802 = $806;
                        break;
                    case 'Parser.Reply.value':
                        var $807 = self.idx;
                        var $808 = self.code;
                        var $809 = self.val;
                        var self = Fm$Parser$name1$($807, $808);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $811 = self.idx;
                                var $812 = self.code;
                                var $813 = self.err;
                                var $814 = Parser$Reply$error$($811, $812, $813);
                                var $810 = $814;
                                break;
                            case 'Parser.Reply.value':
                                var $815 = self.idx;
                                var $816 = self.code;
                                var $817 = self.val;
                                var self = Fm$Parser$text$("=", $815, $816);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $819 = self.idx;
                                        var $820 = self.code;
                                        var $821 = self.err;
                                        var $822 = Parser$Reply$error$($819, $820, $821);
                                        var $818 = $822;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $823 = self.idx;
                                        var $824 = self.code;
                                        var $825 = self.val;
                                        var self = Fm$Parser$text$("for ", $823, $824);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $827 = self.idx;
                                                var $828 = self.code;
                                                var $829 = self.err;
                                                var $830 = Parser$Reply$error$($827, $828, $829);
                                                var $826 = $830;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $831 = self.idx;
                                                var $832 = self.code;
                                                var $833 = self.val;
                                                var self = Fm$Parser$name1$($831, $832);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $835 = self.idx;
                                                        var $836 = self.code;
                                                        var $837 = self.err;
                                                        var $838 = Parser$Reply$error$($835, $836, $837);
                                                        var $834 = $838;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $839 = self.idx;
                                                        var $840 = self.code;
                                                        var $841 = self.val;
                                                        var self = Fm$Parser$text$(":", $839, $840);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $843 = self.idx;
                                                                var $844 = self.code;
                                                                var $845 = self.err;
                                                                var $846 = Parser$Reply$error$($843, $844, $845);
                                                                var $842 = $846;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $847 = self.idx;
                                                                var $848 = self.code;
                                                                var $849 = self.val;
                                                                var self = Fm$Parser$text$("U32", $847, $848);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $851 = self.idx;
                                                                        var $852 = self.code;
                                                                        var $853 = self.err;
                                                                        var $854 = Parser$Reply$error$($851, $852, $853);
                                                                        var $850 = $854;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $855 = self.idx;
                                                                        var $856 = self.code;
                                                                        var $857 = self.val;
                                                                        var self = Fm$Parser$text$("=", $855, $856);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $859 = self.idx;
                                                                                var $860 = self.code;
                                                                                var $861 = self.err;
                                                                                var $862 = Parser$Reply$error$($859, $860, $861);
                                                                                var $858 = $862;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $863 = self.idx;
                                                                                var $864 = self.code;
                                                                                var $865 = self.val;
                                                                                var self = Fm$Parser$term$($863, $864);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $867 = self.idx;
                                                                                        var $868 = self.code;
                                                                                        var $869 = self.err;
                                                                                        var $870 = Parser$Reply$error$($867, $868, $869);
                                                                                        var $866 = $870;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $871 = self.idx;
                                                                                        var $872 = self.code;
                                                                                        var $873 = self.val;
                                                                                        var self = Fm$Parser$text$("..", $871, $872);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $875 = self.idx;
                                                                                                var $876 = self.code;
                                                                                                var $877 = self.err;
                                                                                                var $878 = Parser$Reply$error$($875, $876, $877);
                                                                                                var $874 = $878;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $879 = self.idx;
                                                                                                var $880 = self.code;
                                                                                                var $881 = self.val;
                                                                                                var self = Fm$Parser$term$($879, $880);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $883 = self.idx;
                                                                                                        var $884 = self.code;
                                                                                                        var $885 = self.err;
                                                                                                        var $886 = Parser$Reply$error$($883, $884, $885);
                                                                                                        var $882 = $886;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $887 = self.idx;
                                                                                                        var $888 = self.code;
                                                                                                        var $889 = self.val;
                                                                                                        var self = Fm$Parser$text$(":", $887, $888);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $891 = self.idx;
                                                                                                                var $892 = self.code;
                                                                                                                var $893 = self.err;
                                                                                                                var $894 = Parser$Reply$error$($891, $892, $893);
                                                                                                                var $890 = $894;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $895 = self.idx;
                                                                                                                var $896 = self.code;
                                                                                                                var $897 = self.val;
                                                                                                                var self = Fm$Parser$term$($895, $896);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $899 = self.idx;
                                                                                                                        var $900 = self.code;
                                                                                                                        var $901 = self.err;
                                                                                                                        var $902 = Parser$Reply$error$($899, $900, $901);
                                                                                                                        var $898 = $902;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $903 = self.idx;
                                                                                                                        var $904 = self.code;
                                                                                                                        var $905 = self.val;
                                                                                                                        var self = Parser$maybe$(Fm$Parser$text(";"), $903, $904);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $907 = self.idx;
                                                                                                                                var $908 = self.code;
                                                                                                                                var $909 = self.err;
                                                                                                                                var $910 = Parser$Reply$error$($907, $908, $909);
                                                                                                                                var $906 = $910;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $911 = self.idx;
                                                                                                                                var $912 = self.code;
                                                                                                                                var $913 = self.val;
                                                                                                                                var self = Fm$Parser$term$($911, $912);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $915 = self.idx;
                                                                                                                                        var $916 = self.code;
                                                                                                                                        var $917 = self.err;
                                                                                                                                        var $918 = Parser$Reply$error$($915, $916, $917);
                                                                                                                                        var $914 = $918;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $919 = self.idx;
                                                                                                                                        var $920 = self.code;
                                                                                                                                        var $921 = self.val;
                                                                                                                                        var self = Fm$Parser$stop$($801, $919, $920);
                                                                                                                                        switch (self._) {
                                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                                var $923 = self.idx;
                                                                                                                                                var $924 = self.code;
                                                                                                                                                var $925 = self.err;
                                                                                                                                                var $926 = Parser$Reply$error$($923, $924, $925);
                                                                                                                                                var $922 = $926;
                                                                                                                                                break;
                                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                                var $927 = self.idx;
                                                                                                                                                var $928 = self.code;
                                                                                                                                                var $929 = self.val;
                                                                                                                                                var _term$54 = Fm$Term$ref$("U32.for");
                                                                                                                                                var _term$55 = Fm$Term$app$(_term$54, Fm$Term$hol$(Bits$e));
                                                                                                                                                var _term$56 = Fm$Term$app$(_term$55, Fm$Term$ref$($817));
                                                                                                                                                var _term$57 = Fm$Term$app$(_term$56, $873);
                                                                                                                                                var _term$58 = Fm$Term$app$(_term$57, $889);
                                                                                                                                                var _lamb$59 = Fm$Term$lam$($841, (_e$59 => {
                                                                                                                                                    var $931 = Fm$Term$lam$($817, (_s$60 => {
                                                                                                                                                        var $932 = $905;
                                                                                                                                                        return $932;
                                                                                                                                                    }));
                                                                                                                                                    return $931;
                                                                                                                                                }));
                                                                                                                                                var _term$60 = Fm$Term$app$(_term$58, _lamb$59);
                                                                                                                                                var _term$61 = Fm$Term$let$($817, _term$60, (_x$61 => {
                                                                                                                                                    var $933 = $921;
                                                                                                                                                    return $933;
                                                                                                                                                }));
                                                                                                                                                var $930 = Parser$Reply$value$($927, $928, Fm$Term$ori$($929, _term$61));
                                                                                                                                                var $922 = $930;
                                                                                                                                                break;
                                                                                                                                        };
                                                                                                                                        var $914 = $922;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $906 = $914;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $898 = $906;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $890 = $898;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $882 = $890;
                                                                                                        break;
                                                                                                };
                                                                                                var $874 = $882;
                                                                                                break;
                                                                                        };
                                                                                        var $866 = $874;
                                                                                        break;
                                                                                };
                                                                                var $858 = $866;
                                                                                break;
                                                                        };
                                                                        var $850 = $858;
                                                                        break;
                                                                };
                                                                var $842 = $850;
                                                                break;
                                                        };
                                                        var $834 = $842;
                                                        break;
                                                };
                                                var $826 = $834;
                                                break;
                                        };
                                        var $818 = $826;
                                        break;
                                };
                                var $810 = $818;
                                break;
                        };
                        var $802 = $810;
                        break;
                };
                var $794 = $802;
                break;
        };
        return $794;
    };
    const Fm$Parser$letforrange$u32 = x0 => x1 => Fm$Parser$letforrange$u32$(x0, x1);

    function Fm$Parser$letforin$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $935 = self.idx;
                var $936 = self.code;
                var $937 = self.err;
                var $938 = Parser$Reply$error$($935, $936, $937);
                var $934 = $938;
                break;
            case 'Parser.Reply.value':
                var $939 = self.idx;
                var $940 = self.code;
                var $941 = self.val;
                var self = Fm$Parser$text$("let ", $939, $940);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $943 = self.idx;
                        var $944 = self.code;
                        var $945 = self.err;
                        var $946 = Parser$Reply$error$($943, $944, $945);
                        var $942 = $946;
                        break;
                    case 'Parser.Reply.value':
                        var $947 = self.idx;
                        var $948 = self.code;
                        var $949 = self.val;
                        var self = Fm$Parser$name1$($947, $948);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $951 = self.idx;
                                var $952 = self.code;
                                var $953 = self.err;
                                var $954 = Parser$Reply$error$($951, $952, $953);
                                var $950 = $954;
                                break;
                            case 'Parser.Reply.value':
                                var $955 = self.idx;
                                var $956 = self.code;
                                var $957 = self.val;
                                var self = Fm$Parser$text$("=", $955, $956);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $959 = self.idx;
                                        var $960 = self.code;
                                        var $961 = self.err;
                                        var $962 = Parser$Reply$error$($959, $960, $961);
                                        var $958 = $962;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $963 = self.idx;
                                        var $964 = self.code;
                                        var $965 = self.val;
                                        var self = Fm$Parser$text$("for ", $963, $964);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $967 = self.idx;
                                                var $968 = self.code;
                                                var $969 = self.err;
                                                var $970 = Parser$Reply$error$($967, $968, $969);
                                                var $966 = $970;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $971 = self.idx;
                                                var $972 = self.code;
                                                var $973 = self.val;
                                                var self = Fm$Parser$name1$($971, $972);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $975 = self.idx;
                                                        var $976 = self.code;
                                                        var $977 = self.err;
                                                        var $978 = Parser$Reply$error$($975, $976, $977);
                                                        var $974 = $978;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $979 = self.idx;
                                                        var $980 = self.code;
                                                        var $981 = self.val;
                                                        var self = Fm$Parser$text$("in", $979, $980);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $983 = self.idx;
                                                                var $984 = self.code;
                                                                var $985 = self.err;
                                                                var $986 = Parser$Reply$error$($983, $984, $985);
                                                                var $982 = $986;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $987 = self.idx;
                                                                var $988 = self.code;
                                                                var $989 = self.val;
                                                                var self = Fm$Parser$term$($987, $988);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $991 = self.idx;
                                                                        var $992 = self.code;
                                                                        var $993 = self.err;
                                                                        var $994 = Parser$Reply$error$($991, $992, $993);
                                                                        var $990 = $994;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $995 = self.idx;
                                                                        var $996 = self.code;
                                                                        var $997 = self.val;
                                                                        var self = Fm$Parser$text$(":", $995, $996);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $999 = self.idx;
                                                                                var $1000 = self.code;
                                                                                var $1001 = self.err;
                                                                                var $1002 = Parser$Reply$error$($999, $1000, $1001);
                                                                                var $998 = $1002;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1003 = self.idx;
                                                                                var $1004 = self.code;
                                                                                var $1005 = self.val;
                                                                                var self = Fm$Parser$term$($1003, $1004);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1007 = self.idx;
                                                                                        var $1008 = self.code;
                                                                                        var $1009 = self.err;
                                                                                        var $1010 = Parser$Reply$error$($1007, $1008, $1009);
                                                                                        var $1006 = $1010;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1011 = self.idx;
                                                                                        var $1012 = self.code;
                                                                                        var $1013 = self.val;
                                                                                        var self = Parser$maybe$(Fm$Parser$text(";"), $1011, $1012);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1015 = self.idx;
                                                                                                var $1016 = self.code;
                                                                                                var $1017 = self.err;
                                                                                                var $1018 = Parser$Reply$error$($1015, $1016, $1017);
                                                                                                var $1014 = $1018;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1019 = self.idx;
                                                                                                var $1020 = self.code;
                                                                                                var $1021 = self.val;
                                                                                                var self = Fm$Parser$term$($1019, $1020);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1023 = self.idx;
                                                                                                        var $1024 = self.code;
                                                                                                        var $1025 = self.err;
                                                                                                        var $1026 = Parser$Reply$error$($1023, $1024, $1025);
                                                                                                        var $1022 = $1026;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1027 = self.idx;
                                                                                                        var $1028 = self.code;
                                                                                                        var $1029 = self.val;
                                                                                                        var self = Fm$Parser$stop$($941, $1027, $1028);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1031 = self.idx;
                                                                                                                var $1032 = self.code;
                                                                                                                var $1033 = self.err;
                                                                                                                var $1034 = Parser$Reply$error$($1031, $1032, $1033);
                                                                                                                var $1030 = $1034;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1035 = self.idx;
                                                                                                                var $1036 = self.code;
                                                                                                                var $1037 = self.val;
                                                                                                                var _term$42 = Fm$Term$ref$("List.for");
                                                                                                                var _term$43 = Fm$Term$app$(_term$42, Fm$Term$hol$(Bits$e));
                                                                                                                var _term$44 = Fm$Term$app$(_term$43, $997);
                                                                                                                var _term$45 = Fm$Term$app$(_term$44, Fm$Term$hol$(Bits$e));
                                                                                                                var _term$46 = Fm$Term$app$(_term$45, Fm$Term$ref$($957));
                                                                                                                var _lamb$47 = Fm$Term$lam$($981, (_i$47 => {
                                                                                                                    var $1039 = Fm$Term$lam$($957, (_x$48 => {
                                                                                                                        var $1040 = $1013;
                                                                                                                        return $1040;
                                                                                                                    }));
                                                                                                                    return $1039;
                                                                                                                }));
                                                                                                                var _term$48 = Fm$Term$app$(_term$46, _lamb$47);
                                                                                                                var _term$49 = Fm$Term$let$($957, _term$48, (_x$49 => {
                                                                                                                    var $1041 = $1029;
                                                                                                                    return $1041;
                                                                                                                }));
                                                                                                                var $1038 = Parser$Reply$value$($1035, $1036, Fm$Term$ori$($1037, _term$49));
                                                                                                                var $1030 = $1038;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1022 = $1030;
                                                                                                        break;
                                                                                                };
                                                                                                var $1014 = $1022;
                                                                                                break;
                                                                                        };
                                                                                        var $1006 = $1014;
                                                                                        break;
                                                                                };
                                                                                var $998 = $1006;
                                                                                break;
                                                                        };
                                                                        var $990 = $998;
                                                                        break;
                                                                };
                                                                var $982 = $990;
                                                                break;
                                                        };
                                                        var $974 = $982;
                                                        break;
                                                };
                                                var $966 = $974;
                                                break;
                                        };
                                        var $958 = $966;
                                        break;
                                };
                                var $950 = $958;
                                break;
                        };
                        var $942 = $950;
                        break;
                };
                var $934 = $942;
                break;
        };
        return $934;
    };
    const Fm$Parser$letforin = x0 => x1 => Fm$Parser$letforin$(x0, x1);

    function Fm$Parser$let$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1043 = self.idx;
                var $1044 = self.code;
                var $1045 = self.err;
                var $1046 = Parser$Reply$error$($1043, $1044, $1045);
                var $1042 = $1046;
                break;
            case 'Parser.Reply.value':
                var $1047 = self.idx;
                var $1048 = self.code;
                var $1049 = self.val;
                var self = Fm$Parser$text$("let ", $1047, $1048);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1051 = self.idx;
                        var $1052 = self.code;
                        var $1053 = self.err;
                        var $1054 = Parser$Reply$error$($1051, $1052, $1053);
                        var $1050 = $1054;
                        break;
                    case 'Parser.Reply.value':
                        var $1055 = self.idx;
                        var $1056 = self.code;
                        var $1057 = self.val;
                        var self = Fm$Parser$name$($1055, $1056);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1059 = self.idx;
                                var $1060 = self.code;
                                var $1061 = self.err;
                                var $1062 = Parser$Reply$error$($1059, $1060, $1061);
                                var $1058 = $1062;
                                break;
                            case 'Parser.Reply.value':
                                var $1063 = self.idx;
                                var $1064 = self.code;
                                var $1065 = self.val;
                                var self = Fm$Parser$text$("=", $1063, $1064);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1067 = self.idx;
                                        var $1068 = self.code;
                                        var $1069 = self.err;
                                        var $1070 = Parser$Reply$error$($1067, $1068, $1069);
                                        var $1066 = $1070;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1071 = self.idx;
                                        var $1072 = self.code;
                                        var $1073 = self.val;
                                        var self = Fm$Parser$term$($1071, $1072);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1075 = self.idx;
                                                var $1076 = self.code;
                                                var $1077 = self.err;
                                                var $1078 = Parser$Reply$error$($1075, $1076, $1077);
                                                var $1074 = $1078;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1079 = self.idx;
                                                var $1080 = self.code;
                                                var $1081 = self.val;
                                                var self = Parser$maybe$(Fm$Parser$text(";"), $1079, $1080);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1083 = self.idx;
                                                        var $1084 = self.code;
                                                        var $1085 = self.err;
                                                        var $1086 = Parser$Reply$error$($1083, $1084, $1085);
                                                        var $1082 = $1086;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1087 = self.idx;
                                                        var $1088 = self.code;
                                                        var $1089 = self.val;
                                                        var self = Fm$Parser$term$($1087, $1088);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1091 = self.idx;
                                                                var $1092 = self.code;
                                                                var $1093 = self.err;
                                                                var $1094 = Parser$Reply$error$($1091, $1092, $1093);
                                                                var $1090 = $1094;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1095 = self.idx;
                                                                var $1096 = self.code;
                                                                var $1097 = self.val;
                                                                var self = Fm$Parser$stop$($1049, $1095, $1096);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1099 = self.idx;
                                                                        var $1100 = self.code;
                                                                        var $1101 = self.err;
                                                                        var $1102 = Parser$Reply$error$($1099, $1100, $1101);
                                                                        var $1098 = $1102;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1103 = self.idx;
                                                                        var $1104 = self.code;
                                                                        var $1105 = self.val;
                                                                        var $1106 = Parser$Reply$value$($1103, $1104, Fm$Term$ori$($1105, Fm$Term$let$($1065, $1081, (_x$27 => {
                                                                            var $1107 = $1097;
                                                                            return $1107;
                                                                        }))));
                                                                        var $1098 = $1106;
                                                                        break;
                                                                };
                                                                var $1090 = $1098;
                                                                break;
                                                        };
                                                        var $1082 = $1090;
                                                        break;
                                                };
                                                var $1074 = $1082;
                                                break;
                                        };
                                        var $1066 = $1074;
                                        break;
                                };
                                var $1058 = $1066;
                                break;
                        };
                        var $1050 = $1058;
                        break;
                };
                var $1042 = $1050;
                break;
        };
        return $1042;
    };
    const Fm$Parser$let = x0 => x1 => Fm$Parser$let$(x0, x1);

    function Fm$Parser$get$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1109 = self.idx;
                var $1110 = self.code;
                var $1111 = self.err;
                var $1112 = Parser$Reply$error$($1109, $1110, $1111);
                var $1108 = $1112;
                break;
            case 'Parser.Reply.value':
                var $1113 = self.idx;
                var $1114 = self.code;
                var $1115 = self.val;
                var self = Fm$Parser$text$("let ", $1113, $1114);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1117 = self.idx;
                        var $1118 = self.code;
                        var $1119 = self.err;
                        var $1120 = Parser$Reply$error$($1117, $1118, $1119);
                        var $1116 = $1120;
                        break;
                    case 'Parser.Reply.value':
                        var $1121 = self.idx;
                        var $1122 = self.code;
                        var $1123 = self.val;
                        var self = Fm$Parser$text$("{", $1121, $1122);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1125 = self.idx;
                                var $1126 = self.code;
                                var $1127 = self.err;
                                var $1128 = Parser$Reply$error$($1125, $1126, $1127);
                                var $1124 = $1128;
                                break;
                            case 'Parser.Reply.value':
                                var $1129 = self.idx;
                                var $1130 = self.code;
                                var $1131 = self.val;
                                var self = Fm$Parser$name$($1129, $1130);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1133 = self.idx;
                                        var $1134 = self.code;
                                        var $1135 = self.err;
                                        var $1136 = Parser$Reply$error$($1133, $1134, $1135);
                                        var $1132 = $1136;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1137 = self.idx;
                                        var $1138 = self.code;
                                        var $1139 = self.val;
                                        var self = Fm$Parser$text$(",", $1137, $1138);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1141 = self.idx;
                                                var $1142 = self.code;
                                                var $1143 = self.err;
                                                var $1144 = Parser$Reply$error$($1141, $1142, $1143);
                                                var $1140 = $1144;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1145 = self.idx;
                                                var $1146 = self.code;
                                                var $1147 = self.val;
                                                var self = Fm$Parser$name$($1145, $1146);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1149 = self.idx;
                                                        var $1150 = self.code;
                                                        var $1151 = self.err;
                                                        var $1152 = Parser$Reply$error$($1149, $1150, $1151);
                                                        var $1148 = $1152;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1153 = self.idx;
                                                        var $1154 = self.code;
                                                        var $1155 = self.val;
                                                        var self = Fm$Parser$text$("}", $1153, $1154);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1157 = self.idx;
                                                                var $1158 = self.code;
                                                                var $1159 = self.err;
                                                                var $1160 = Parser$Reply$error$($1157, $1158, $1159);
                                                                var $1156 = $1160;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1161 = self.idx;
                                                                var $1162 = self.code;
                                                                var $1163 = self.val;
                                                                var self = Fm$Parser$text$("=", $1161, $1162);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1165 = self.idx;
                                                                        var $1166 = self.code;
                                                                        var $1167 = self.err;
                                                                        var $1168 = Parser$Reply$error$($1165, $1166, $1167);
                                                                        var $1164 = $1168;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1169 = self.idx;
                                                                        var $1170 = self.code;
                                                                        var $1171 = self.val;
                                                                        var self = Fm$Parser$term$($1169, $1170);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1173 = self.idx;
                                                                                var $1174 = self.code;
                                                                                var $1175 = self.err;
                                                                                var $1176 = Parser$Reply$error$($1173, $1174, $1175);
                                                                                var $1172 = $1176;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1177 = self.idx;
                                                                                var $1178 = self.code;
                                                                                var $1179 = self.val;
                                                                                var self = Parser$maybe$(Fm$Parser$text(";"), $1177, $1178);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1181 = self.idx;
                                                                                        var $1182 = self.code;
                                                                                        var $1183 = self.err;
                                                                                        var $1184 = Parser$Reply$error$($1181, $1182, $1183);
                                                                                        var $1180 = $1184;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1185 = self.idx;
                                                                                        var $1186 = self.code;
                                                                                        var $1187 = self.val;
                                                                                        var self = Fm$Parser$term$($1185, $1186);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1189 = self.idx;
                                                                                                var $1190 = self.code;
                                                                                                var $1191 = self.err;
                                                                                                var $1192 = Parser$Reply$error$($1189, $1190, $1191);
                                                                                                var $1188 = $1192;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1193 = self.idx;
                                                                                                var $1194 = self.code;
                                                                                                var $1195 = self.val;
                                                                                                var self = Fm$Parser$stop$($1115, $1193, $1194);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1197 = self.idx;
                                                                                                        var $1198 = self.code;
                                                                                                        var $1199 = self.err;
                                                                                                        var $1200 = Parser$Reply$error$($1197, $1198, $1199);
                                                                                                        var $1196 = $1200;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1201 = self.idx;
                                                                                                        var $1202 = self.code;
                                                                                                        var $1203 = self.val;
                                                                                                        var _term$39 = $1179;
                                                                                                        var _term$40 = Fm$Term$app$(_term$39, Fm$Term$lam$("x", (_x$40 => {
                                                                                                            var $1205 = Fm$Term$hol$(Bits$e);
                                                                                                            return $1205;
                                                                                                        })));
                                                                                                        var _term$41 = Fm$Term$app$(_term$40, Fm$Term$lam$($1139, (_x$41 => {
                                                                                                            var $1206 = Fm$Term$lam$($1155, (_y$42 => {
                                                                                                                var $1207 = $1195;
                                                                                                                return $1207;
                                                                                                            }));
                                                                                                            return $1206;
                                                                                                        })));
                                                                                                        var $1204 = Parser$Reply$value$($1201, $1202, Fm$Term$ori$($1203, _term$41));
                                                                                                        var $1196 = $1204;
                                                                                                        break;
                                                                                                };
                                                                                                var $1188 = $1196;
                                                                                                break;
                                                                                        };
                                                                                        var $1180 = $1188;
                                                                                        break;
                                                                                };
                                                                                var $1172 = $1180;
                                                                                break;
                                                                        };
                                                                        var $1164 = $1172;
                                                                        break;
                                                                };
                                                                var $1156 = $1164;
                                                                break;
                                                        };
                                                        var $1148 = $1156;
                                                        break;
                                                };
                                                var $1140 = $1148;
                                                break;
                                        };
                                        var $1132 = $1140;
                                        break;
                                };
                                var $1124 = $1132;
                                break;
                        };
                        var $1116 = $1124;
                        break;
                };
                var $1108 = $1116;
                break;
        };
        return $1108;
    };
    const Fm$Parser$get = x0 => x1 => Fm$Parser$get$(x0, x1);

    function Fm$Term$def$(_name$1, _expr$2, _body$3) {
        var $1208 = ({
            _: 'Fm.Term.def',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $1208;
    };
    const Fm$Term$def = x0 => x1 => x2 => Fm$Term$def$(x0, x1, x2);

    function Fm$Parser$def$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1210 = self.idx;
                var $1211 = self.code;
                var $1212 = self.err;
                var $1213 = Parser$Reply$error$($1210, $1211, $1212);
                var $1209 = $1213;
                break;
            case 'Parser.Reply.value':
                var $1214 = self.idx;
                var $1215 = self.code;
                var $1216 = self.val;
                var self = Fm$Parser$text$("def ", $1214, $1215);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1218 = self.idx;
                        var $1219 = self.code;
                        var $1220 = self.err;
                        var $1221 = Parser$Reply$error$($1218, $1219, $1220);
                        var $1217 = $1221;
                        break;
                    case 'Parser.Reply.value':
                        var $1222 = self.idx;
                        var $1223 = self.code;
                        var $1224 = self.val;
                        var self = Fm$Parser$name$($1222, $1223);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1226 = self.idx;
                                var $1227 = self.code;
                                var $1228 = self.err;
                                var $1229 = Parser$Reply$error$($1226, $1227, $1228);
                                var $1225 = $1229;
                                break;
                            case 'Parser.Reply.value':
                                var $1230 = self.idx;
                                var $1231 = self.code;
                                var $1232 = self.val;
                                var self = Fm$Parser$text$("=", $1230, $1231);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1234 = self.idx;
                                        var $1235 = self.code;
                                        var $1236 = self.err;
                                        var $1237 = Parser$Reply$error$($1234, $1235, $1236);
                                        var $1233 = $1237;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1238 = self.idx;
                                        var $1239 = self.code;
                                        var $1240 = self.val;
                                        var self = Fm$Parser$term$($1238, $1239);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1242 = self.idx;
                                                var $1243 = self.code;
                                                var $1244 = self.err;
                                                var $1245 = Parser$Reply$error$($1242, $1243, $1244);
                                                var $1241 = $1245;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1246 = self.idx;
                                                var $1247 = self.code;
                                                var $1248 = self.val;
                                                var self = Parser$maybe$(Fm$Parser$text(";"), $1246, $1247);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1250 = self.idx;
                                                        var $1251 = self.code;
                                                        var $1252 = self.err;
                                                        var $1253 = Parser$Reply$error$($1250, $1251, $1252);
                                                        var $1249 = $1253;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1254 = self.idx;
                                                        var $1255 = self.code;
                                                        var $1256 = self.val;
                                                        var self = Fm$Parser$term$($1254, $1255);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1258 = self.idx;
                                                                var $1259 = self.code;
                                                                var $1260 = self.err;
                                                                var $1261 = Parser$Reply$error$($1258, $1259, $1260);
                                                                var $1257 = $1261;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1262 = self.idx;
                                                                var $1263 = self.code;
                                                                var $1264 = self.val;
                                                                var self = Fm$Parser$stop$($1216, $1262, $1263);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1266 = self.idx;
                                                                        var $1267 = self.code;
                                                                        var $1268 = self.err;
                                                                        var $1269 = Parser$Reply$error$($1266, $1267, $1268);
                                                                        var $1265 = $1269;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1270 = self.idx;
                                                                        var $1271 = self.code;
                                                                        var $1272 = self.val;
                                                                        var $1273 = Parser$Reply$value$($1270, $1271, Fm$Term$ori$($1272, Fm$Term$def$($1232, $1248, (_x$27 => {
                                                                            var $1274 = $1264;
                                                                            return $1274;
                                                                        }))));
                                                                        var $1265 = $1273;
                                                                        break;
                                                                };
                                                                var $1257 = $1265;
                                                                break;
                                                        };
                                                        var $1249 = $1257;
                                                        break;
                                                };
                                                var $1241 = $1249;
                                                break;
                                        };
                                        var $1233 = $1241;
                                        break;
                                };
                                var $1225 = $1233;
                                break;
                        };
                        var $1217 = $1225;
                        break;
                };
                var $1209 = $1217;
                break;
        };
        return $1209;
    };
    const Fm$Parser$def = x0 => x1 => Fm$Parser$def$(x0, x1);

    function Fm$Parser$if$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1276 = self.idx;
                var $1277 = self.code;
                var $1278 = self.err;
                var $1279 = Parser$Reply$error$($1276, $1277, $1278);
                var $1275 = $1279;
                break;
            case 'Parser.Reply.value':
                var $1280 = self.idx;
                var $1281 = self.code;
                var $1282 = self.val;
                var self = Fm$Parser$text$("if ", $1280, $1281);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1284 = self.idx;
                        var $1285 = self.code;
                        var $1286 = self.err;
                        var $1287 = Parser$Reply$error$($1284, $1285, $1286);
                        var $1283 = $1287;
                        break;
                    case 'Parser.Reply.value':
                        var $1288 = self.idx;
                        var $1289 = self.code;
                        var $1290 = self.val;
                        var self = Fm$Parser$term$($1288, $1289);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1292 = self.idx;
                                var $1293 = self.code;
                                var $1294 = self.err;
                                var $1295 = Parser$Reply$error$($1292, $1293, $1294);
                                var $1291 = $1295;
                                break;
                            case 'Parser.Reply.value':
                                var $1296 = self.idx;
                                var $1297 = self.code;
                                var $1298 = self.val;
                                var self = Fm$Parser$text$("then", $1296, $1297);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1300 = self.idx;
                                        var $1301 = self.code;
                                        var $1302 = self.err;
                                        var $1303 = Parser$Reply$error$($1300, $1301, $1302);
                                        var $1299 = $1303;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1304 = self.idx;
                                        var $1305 = self.code;
                                        var $1306 = self.val;
                                        var self = Fm$Parser$term$($1304, $1305);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1308 = self.idx;
                                                var $1309 = self.code;
                                                var $1310 = self.err;
                                                var $1311 = Parser$Reply$error$($1308, $1309, $1310);
                                                var $1307 = $1311;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1312 = self.idx;
                                                var $1313 = self.code;
                                                var $1314 = self.val;
                                                var self = Fm$Parser$text$("else", $1312, $1313);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1316 = self.idx;
                                                        var $1317 = self.code;
                                                        var $1318 = self.err;
                                                        var $1319 = Parser$Reply$error$($1316, $1317, $1318);
                                                        var $1315 = $1319;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1320 = self.idx;
                                                        var $1321 = self.code;
                                                        var $1322 = self.val;
                                                        var self = Fm$Parser$term$($1320, $1321);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1324 = self.idx;
                                                                var $1325 = self.code;
                                                                var $1326 = self.err;
                                                                var $1327 = Parser$Reply$error$($1324, $1325, $1326);
                                                                var $1323 = $1327;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1328 = self.idx;
                                                                var $1329 = self.code;
                                                                var $1330 = self.val;
                                                                var self = Fm$Parser$stop$($1282, $1328, $1329);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1332 = self.idx;
                                                                        var $1333 = self.code;
                                                                        var $1334 = self.err;
                                                                        var $1335 = Parser$Reply$error$($1332, $1333, $1334);
                                                                        var $1331 = $1335;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1336 = self.idx;
                                                                        var $1337 = self.code;
                                                                        var $1338 = self.val;
                                                                        var _term$27 = $1298;
                                                                        var _term$28 = Fm$Term$app$(_term$27, Fm$Term$lam$("", (_x$28 => {
                                                                            var $1340 = Fm$Term$hol$(Bits$e);
                                                                            return $1340;
                                                                        })));
                                                                        var _term$29 = Fm$Term$app$(_term$28, $1314);
                                                                        var _term$30 = Fm$Term$app$(_term$29, $1330);
                                                                        var $1339 = Parser$Reply$value$($1336, $1337, Fm$Term$ori$($1338, _term$30));
                                                                        var $1331 = $1339;
                                                                        break;
                                                                };
                                                                var $1323 = $1331;
                                                                break;
                                                        };
                                                        var $1315 = $1323;
                                                        break;
                                                };
                                                var $1307 = $1315;
                                                break;
                                        };
                                        var $1299 = $1307;
                                        break;
                                };
                                var $1291 = $1299;
                                break;
                        };
                        var $1283 = $1291;
                        break;
                };
                var $1275 = $1283;
                break;
        };
        return $1275;
    };
    const Fm$Parser$if = x0 => x1 => Fm$Parser$if$(x0, x1);

    function List$mapped$(_as$2, _f$4) {
        var self = _as$2;
        switch (self._) {
            case 'List.nil':
                var $1342 = List$nil;
                var $1341 = $1342;
                break;
            case 'List.cons':
                var $1343 = self.head;
                var $1344 = self.tail;
                var $1345 = List$cons$(_f$4($1343), List$mapped$($1344, _f$4));
                var $1341 = $1345;
                break;
        };
        return $1341;
    };
    const List$mapped = x0 => x1 => List$mapped$(x0, x1);

    function Pair$new$(_fst$3, _snd$4) {
        var $1346 = ({
            _: 'Pair.new',
            'fst': _fst$3,
            'snd': _snd$4
        });
        return $1346;
    };
    const Pair$new = x0 => x1 => Pair$new$(x0, x1);
    const Fm$backslash = 92;
    const Fm$escapes = List$cons$(Pair$new$("\\b", 8), List$cons$(Pair$new$("\\f", 12), List$cons$(Pair$new$("\\n", 10), List$cons$(Pair$new$("\\r", 13), List$cons$(Pair$new$("\\t", 9), List$cons$(Pair$new$("\\v", 11), List$cons$(Pair$new$(String$cons$(Fm$backslash, String$cons$(Fm$backslash, String$nil)), Fm$backslash), List$cons$(Pair$new$("\\\"", 34), List$cons$(Pair$new$("\\0", 0), List$cons$(Pair$new$("\\\'", 39), List$nil))))))))));
    const Fm$Parser$char$single = Parser$first_of$(List$cons$(Parser$first_of$(List$mapped$(Fm$escapes, (_esc$1 => {
        var self = _esc$1;
        switch (self._) {
            case 'Pair.new':
                var $1348 = self.fst;
                var $1349 = self.snd;
                var $1350 = (_idx$4 => _code$5 => {
                    var self = Parser$text$($1348, _idx$4, _code$5);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $1352 = self.idx;
                            var $1353 = self.code;
                            var $1354 = self.err;
                            var $1355 = Parser$Reply$error$($1352, $1353, $1354);
                            var $1351 = $1355;
                            break;
                        case 'Parser.Reply.value':
                            var $1356 = self.idx;
                            var $1357 = self.code;
                            var $1358 = self.val;
                            var $1359 = Parser$Reply$value$($1356, $1357, $1349);
                            var $1351 = $1359;
                            break;
                    };
                    return $1351;
                });
                var $1347 = $1350;
                break;
        };
        return $1347;
    }))), List$cons$(Parser$one, List$nil)));

    function Fm$Term$chr$(_chrx$1) {
        var $1360 = ({
            _: 'Fm.Term.chr',
            'chrx': _chrx$1
        });
        return $1360;
    };
    const Fm$Term$chr = x0 => Fm$Term$chr$(x0);

    function Fm$Parser$char$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1362 = self.idx;
                var $1363 = self.code;
                var $1364 = self.err;
                var $1365 = Parser$Reply$error$($1362, $1363, $1364);
                var $1361 = $1365;
                break;
            case 'Parser.Reply.value':
                var $1366 = self.idx;
                var $1367 = self.code;
                var $1368 = self.val;
                var self = Fm$Parser$text$("\'", $1366, $1367);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1370 = self.idx;
                        var $1371 = self.code;
                        var $1372 = self.err;
                        var $1373 = Parser$Reply$error$($1370, $1371, $1372);
                        var $1369 = $1373;
                        break;
                    case 'Parser.Reply.value':
                        var $1374 = self.idx;
                        var $1375 = self.code;
                        var $1376 = self.val;
                        var self = Fm$Parser$char$single($1374)($1375);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1378 = self.idx;
                                var $1379 = self.code;
                                var $1380 = self.err;
                                var $1381 = Parser$Reply$error$($1378, $1379, $1380);
                                var $1377 = $1381;
                                break;
                            case 'Parser.Reply.value':
                                var $1382 = self.idx;
                                var $1383 = self.code;
                                var $1384 = self.val;
                                var self = Parser$text$("\'", $1382, $1383);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1386 = self.idx;
                                        var $1387 = self.code;
                                        var $1388 = self.err;
                                        var $1389 = Parser$Reply$error$($1386, $1387, $1388);
                                        var $1385 = $1389;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1390 = self.idx;
                                        var $1391 = self.code;
                                        var $1392 = self.val;
                                        var self = Fm$Parser$stop$($1368, $1390, $1391);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1394 = self.idx;
                                                var $1395 = self.code;
                                                var $1396 = self.err;
                                                var $1397 = Parser$Reply$error$($1394, $1395, $1396);
                                                var $1393 = $1397;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1398 = self.idx;
                                                var $1399 = self.code;
                                                var $1400 = self.val;
                                                var $1401 = Parser$Reply$value$($1398, $1399, Fm$Term$ori$($1400, Fm$Term$chr$($1384)));
                                                var $1393 = $1401;
                                                break;
                                        };
                                        var $1385 = $1393;
                                        break;
                                };
                                var $1377 = $1385;
                                break;
                        };
                        var $1369 = $1377;
                        break;
                };
                var $1361 = $1369;
                break;
        };
        return $1361;
    };
    const Fm$Parser$char = x0 => x1 => Fm$Parser$char$(x0, x1);

    function Fm$Term$str$(_strx$1) {
        var $1402 = ({
            _: 'Fm.Term.str',
            'strx': _strx$1
        });
        return $1402;
    };
    const Fm$Term$str = x0 => Fm$Term$str$(x0);

    function Fm$Parser$string$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1404 = self.idx;
                var $1405 = self.code;
                var $1406 = self.err;
                var $1407 = Parser$Reply$error$($1404, $1405, $1406);
                var $1403 = $1407;
                break;
            case 'Parser.Reply.value':
                var $1408 = self.idx;
                var $1409 = self.code;
                var $1410 = self.val;
                var _quot$6 = String$cons$(34, String$nil);
                var self = Fm$Parser$text$(_quot$6, $1408, $1409);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1412 = self.idx;
                        var $1413 = self.code;
                        var $1414 = self.err;
                        var $1415 = Parser$Reply$error$($1412, $1413, $1414);
                        var $1411 = $1415;
                        break;
                    case 'Parser.Reply.value':
                        var $1416 = self.idx;
                        var $1417 = self.code;
                        var $1418 = self.val;
                        var self = Parser$until$(Parser$text(_quot$6), Fm$Parser$char$single)($1416)($1417);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1420 = self.idx;
                                var $1421 = self.code;
                                var $1422 = self.err;
                                var $1423 = Parser$Reply$error$($1420, $1421, $1422);
                                var $1419 = $1423;
                                break;
                            case 'Parser.Reply.value':
                                var $1424 = self.idx;
                                var $1425 = self.code;
                                var $1426 = self.val;
                                var _strx$13 = List$fold$($1426, String$nil, String$cons);
                                var self = Fm$Parser$stop$($1410, $1424, $1425);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1428 = self.idx;
                                        var $1429 = self.code;
                                        var $1430 = self.err;
                                        var $1431 = Parser$Reply$error$($1428, $1429, $1430);
                                        var $1427 = $1431;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1432 = self.idx;
                                        var $1433 = self.code;
                                        var $1434 = self.val;
                                        var $1435 = Parser$Reply$value$($1432, $1433, Fm$Term$ori$($1434, Fm$Term$str$(_strx$13)));
                                        var $1427 = $1435;
                                        break;
                                };
                                var $1419 = $1427;
                                break;
                        };
                        var $1411 = $1419;
                        break;
                };
                var $1403 = $1411;
                break;
        };
        return $1403;
    };
    const Fm$Parser$string = x0 => x1 => Fm$Parser$string$(x0, x1);

    function Fm$Parser$pair$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1437 = self.idx;
                var $1438 = self.code;
                var $1439 = self.err;
                var $1440 = Parser$Reply$error$($1437, $1438, $1439);
                var $1436 = $1440;
                break;
            case 'Parser.Reply.value':
                var $1441 = self.idx;
                var $1442 = self.code;
                var $1443 = self.val;
                var self = Fm$Parser$text$("{", $1441, $1442);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1445 = self.idx;
                        var $1446 = self.code;
                        var $1447 = self.err;
                        var $1448 = Parser$Reply$error$($1445, $1446, $1447);
                        var $1444 = $1448;
                        break;
                    case 'Parser.Reply.value':
                        var $1449 = self.idx;
                        var $1450 = self.code;
                        var $1451 = self.val;
                        var self = Fm$Parser$term$($1449, $1450);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1453 = self.idx;
                                var $1454 = self.code;
                                var $1455 = self.err;
                                var $1456 = Parser$Reply$error$($1453, $1454, $1455);
                                var $1452 = $1456;
                                break;
                            case 'Parser.Reply.value':
                                var $1457 = self.idx;
                                var $1458 = self.code;
                                var $1459 = self.val;
                                var self = Fm$Parser$text$(",", $1457, $1458);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1461 = self.idx;
                                        var $1462 = self.code;
                                        var $1463 = self.err;
                                        var $1464 = Parser$Reply$error$($1461, $1462, $1463);
                                        var $1460 = $1464;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1465 = self.idx;
                                        var $1466 = self.code;
                                        var $1467 = self.val;
                                        var self = Fm$Parser$term$($1465, $1466);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1469 = self.idx;
                                                var $1470 = self.code;
                                                var $1471 = self.err;
                                                var $1472 = Parser$Reply$error$($1469, $1470, $1471);
                                                var $1468 = $1472;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1473 = self.idx;
                                                var $1474 = self.code;
                                                var $1475 = self.val;
                                                var self = Fm$Parser$text$("}", $1473, $1474);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1477 = self.idx;
                                                        var $1478 = self.code;
                                                        var $1479 = self.err;
                                                        var $1480 = Parser$Reply$error$($1477, $1478, $1479);
                                                        var $1476 = $1480;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1481 = self.idx;
                                                        var $1482 = self.code;
                                                        var $1483 = self.val;
                                                        var self = Fm$Parser$stop$($1443, $1481, $1482);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1485 = self.idx;
                                                                var $1486 = self.code;
                                                                var $1487 = self.err;
                                                                var $1488 = Parser$Reply$error$($1485, $1486, $1487);
                                                                var $1484 = $1488;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1489 = self.idx;
                                                                var $1490 = self.code;
                                                                var $1491 = self.val;
                                                                var _term$24 = Fm$Term$ref$("Pair.new");
                                                                var _term$25 = Fm$Term$app$(_term$24, Fm$Term$hol$(Bits$e));
                                                                var _term$26 = Fm$Term$app$(_term$25, Fm$Term$hol$(Bits$e));
                                                                var _term$27 = Fm$Term$app$(_term$26, $1459);
                                                                var _term$28 = Fm$Term$app$(_term$27, $1475);
                                                                var $1492 = Parser$Reply$value$($1489, $1490, Fm$Term$ori$($1491, _term$28));
                                                                var $1484 = $1492;
                                                                break;
                                                        };
                                                        var $1476 = $1484;
                                                        break;
                                                };
                                                var $1468 = $1476;
                                                break;
                                        };
                                        var $1460 = $1468;
                                        break;
                                };
                                var $1452 = $1460;
                                break;
                        };
                        var $1444 = $1452;
                        break;
                };
                var $1436 = $1444;
                break;
        };
        return $1436;
    };
    const Fm$Parser$pair = x0 => x1 => Fm$Parser$pair$(x0, x1);

    function Fm$Parser$sigma$type$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1494 = self.idx;
                var $1495 = self.code;
                var $1496 = self.err;
                var $1497 = Parser$Reply$error$($1494, $1495, $1496);
                var $1493 = $1497;
                break;
            case 'Parser.Reply.value':
                var $1498 = self.idx;
                var $1499 = self.code;
                var $1500 = self.val;
                var self = Fm$Parser$text$("{", $1498, $1499);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1502 = self.idx;
                        var $1503 = self.code;
                        var $1504 = self.err;
                        var $1505 = Parser$Reply$error$($1502, $1503, $1504);
                        var $1501 = $1505;
                        break;
                    case 'Parser.Reply.value':
                        var $1506 = self.idx;
                        var $1507 = self.code;
                        var $1508 = self.val;
                        var self = Fm$Parser$name1$($1506, $1507);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1510 = self.idx;
                                var $1511 = self.code;
                                var $1512 = self.err;
                                var $1513 = Parser$Reply$error$($1510, $1511, $1512);
                                var $1509 = $1513;
                                break;
                            case 'Parser.Reply.value':
                                var $1514 = self.idx;
                                var $1515 = self.code;
                                var $1516 = self.val;
                                var self = Fm$Parser$text$(":", $1514, $1515);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1518 = self.idx;
                                        var $1519 = self.code;
                                        var $1520 = self.err;
                                        var $1521 = Parser$Reply$error$($1518, $1519, $1520);
                                        var $1517 = $1521;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1522 = self.idx;
                                        var $1523 = self.code;
                                        var $1524 = self.val;
                                        var self = Fm$Parser$term$($1522, $1523);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1526 = self.idx;
                                                var $1527 = self.code;
                                                var $1528 = self.err;
                                                var $1529 = Parser$Reply$error$($1526, $1527, $1528);
                                                var $1525 = $1529;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1530 = self.idx;
                                                var $1531 = self.code;
                                                var $1532 = self.val;
                                                var self = Fm$Parser$text$("}", $1530, $1531);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1534 = self.idx;
                                                        var $1535 = self.code;
                                                        var $1536 = self.err;
                                                        var $1537 = Parser$Reply$error$($1534, $1535, $1536);
                                                        var $1533 = $1537;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1538 = self.idx;
                                                        var $1539 = self.code;
                                                        var $1540 = self.val;
                                                        var self = Fm$Parser$term$($1538, $1539);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1542 = self.idx;
                                                                var $1543 = self.code;
                                                                var $1544 = self.err;
                                                                var $1545 = Parser$Reply$error$($1542, $1543, $1544);
                                                                var $1541 = $1545;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1546 = self.idx;
                                                                var $1547 = self.code;
                                                                var $1548 = self.val;
                                                                var self = Fm$Parser$stop$($1500, $1546, $1547);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1550 = self.idx;
                                                                        var $1551 = self.code;
                                                                        var $1552 = self.err;
                                                                        var $1553 = Parser$Reply$error$($1550, $1551, $1552);
                                                                        var $1549 = $1553;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1554 = self.idx;
                                                                        var $1555 = self.code;
                                                                        var $1556 = self.val;
                                                                        var _term$27 = Fm$Term$ref$("Sigma");
                                                                        var _term$28 = Fm$Term$app$(_term$27, $1532);
                                                                        var _term$29 = Fm$Term$app$(_term$28, Fm$Term$lam$("x", (_x$29 => {
                                                                            var $1558 = $1548;
                                                                            return $1558;
                                                                        })));
                                                                        var $1557 = Parser$Reply$value$($1554, $1555, Fm$Term$ori$($1556, _term$29));
                                                                        var $1549 = $1557;
                                                                        break;
                                                                };
                                                                var $1541 = $1549;
                                                                break;
                                                        };
                                                        var $1533 = $1541;
                                                        break;
                                                };
                                                var $1525 = $1533;
                                                break;
                                        };
                                        var $1517 = $1525;
                                        break;
                                };
                                var $1509 = $1517;
                                break;
                        };
                        var $1501 = $1509;
                        break;
                };
                var $1493 = $1501;
                break;
        };
        return $1493;
    };
    const Fm$Parser$sigma$type = x0 => x1 => Fm$Parser$sigma$type$(x0, x1);

    function Fm$Parser$some$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1560 = self.idx;
                var $1561 = self.code;
                var $1562 = self.err;
                var $1563 = Parser$Reply$error$($1560, $1561, $1562);
                var $1559 = $1563;
                break;
            case 'Parser.Reply.value':
                var $1564 = self.idx;
                var $1565 = self.code;
                var $1566 = self.val;
                var self = Fm$Parser$text$("some(", $1564, $1565);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1568 = self.idx;
                        var $1569 = self.code;
                        var $1570 = self.err;
                        var $1571 = Parser$Reply$error$($1568, $1569, $1570);
                        var $1567 = $1571;
                        break;
                    case 'Parser.Reply.value':
                        var $1572 = self.idx;
                        var $1573 = self.code;
                        var $1574 = self.val;
                        var self = Fm$Parser$term$($1572, $1573);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1576 = self.idx;
                                var $1577 = self.code;
                                var $1578 = self.err;
                                var $1579 = Parser$Reply$error$($1576, $1577, $1578);
                                var $1575 = $1579;
                                break;
                            case 'Parser.Reply.value':
                                var $1580 = self.idx;
                                var $1581 = self.code;
                                var $1582 = self.val;
                                var self = Fm$Parser$text$(")", $1580, $1581);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1584 = self.idx;
                                        var $1585 = self.code;
                                        var $1586 = self.err;
                                        var $1587 = Parser$Reply$error$($1584, $1585, $1586);
                                        var $1583 = $1587;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1588 = self.idx;
                                        var $1589 = self.code;
                                        var $1590 = self.val;
                                        var self = Fm$Parser$stop$($1566, $1588, $1589);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1592 = self.idx;
                                                var $1593 = self.code;
                                                var $1594 = self.err;
                                                var $1595 = Parser$Reply$error$($1592, $1593, $1594);
                                                var $1591 = $1595;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1596 = self.idx;
                                                var $1597 = self.code;
                                                var $1598 = self.val;
                                                var _term$18 = Fm$Term$ref$("Maybe.some");
                                                var _term$19 = Fm$Term$app$(_term$18, Fm$Term$hol$(Bits$e));
                                                var _term$20 = Fm$Term$app$(_term$19, $1582);
                                                var $1599 = Parser$Reply$value$($1596, $1597, Fm$Term$ori$($1598, _term$20));
                                                var $1591 = $1599;
                                                break;
                                        };
                                        var $1583 = $1591;
                                        break;
                                };
                                var $1575 = $1583;
                                break;
                        };
                        var $1567 = $1575;
                        break;
                };
                var $1559 = $1567;
                break;
        };
        return $1559;
    };
    const Fm$Parser$some = x0 => x1 => Fm$Parser$some$(x0, x1);

    function Fm$Parser$apply$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1601 = self.idx;
                var $1602 = self.code;
                var $1603 = self.err;
                var $1604 = Parser$Reply$error$($1601, $1602, $1603);
                var $1600 = $1604;
                break;
            case 'Parser.Reply.value':
                var $1605 = self.idx;
                var $1606 = self.code;
                var $1607 = self.val;
                var self = Fm$Parser$text$("apply(", $1605, $1606);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1609 = self.idx;
                        var $1610 = self.code;
                        var $1611 = self.err;
                        var $1612 = Parser$Reply$error$($1609, $1610, $1611);
                        var $1608 = $1612;
                        break;
                    case 'Parser.Reply.value':
                        var $1613 = self.idx;
                        var $1614 = self.code;
                        var $1615 = self.val;
                        var self = Fm$Parser$term$($1613, $1614);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1617 = self.idx;
                                var $1618 = self.code;
                                var $1619 = self.err;
                                var $1620 = Parser$Reply$error$($1617, $1618, $1619);
                                var $1616 = $1620;
                                break;
                            case 'Parser.Reply.value':
                                var $1621 = self.idx;
                                var $1622 = self.code;
                                var $1623 = self.val;
                                var self = Fm$Parser$text$(",", $1621, $1622);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1625 = self.idx;
                                        var $1626 = self.code;
                                        var $1627 = self.err;
                                        var $1628 = Parser$Reply$error$($1625, $1626, $1627);
                                        var $1624 = $1628;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1629 = self.idx;
                                        var $1630 = self.code;
                                        var $1631 = self.val;
                                        var self = Fm$Parser$term$($1629, $1630);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1633 = self.idx;
                                                var $1634 = self.code;
                                                var $1635 = self.err;
                                                var $1636 = Parser$Reply$error$($1633, $1634, $1635);
                                                var $1632 = $1636;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1637 = self.idx;
                                                var $1638 = self.code;
                                                var $1639 = self.val;
                                                var self = Fm$Parser$text$(")", $1637, $1638);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1641 = self.idx;
                                                        var $1642 = self.code;
                                                        var $1643 = self.err;
                                                        var $1644 = Parser$Reply$error$($1641, $1642, $1643);
                                                        var $1640 = $1644;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1645 = self.idx;
                                                        var $1646 = self.code;
                                                        var $1647 = self.val;
                                                        var self = Fm$Parser$stop$($1607, $1645, $1646);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1649 = self.idx;
                                                                var $1650 = self.code;
                                                                var $1651 = self.err;
                                                                var $1652 = Parser$Reply$error$($1649, $1650, $1651);
                                                                var $1648 = $1652;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1653 = self.idx;
                                                                var $1654 = self.code;
                                                                var $1655 = self.val;
                                                                var _term$24 = Fm$Term$ref$("Equal.apply");
                                                                var _term$25 = Fm$Term$app$(_term$24, Fm$Term$hol$(Bits$e));
                                                                var _term$26 = Fm$Term$app$(_term$25, Fm$Term$hol$(Bits$e));
                                                                var _term$27 = Fm$Term$app$(_term$26, Fm$Term$hol$(Bits$e));
                                                                var _term$28 = Fm$Term$app$(_term$27, Fm$Term$hol$(Bits$e));
                                                                var _term$29 = Fm$Term$app$(_term$28, $1623);
                                                                var _term$30 = Fm$Term$app$(_term$29, $1639);
                                                                var $1656 = Parser$Reply$value$($1653, $1654, Fm$Term$ori$($1655, _term$30));
                                                                var $1648 = $1656;
                                                                break;
                                                        };
                                                        var $1640 = $1648;
                                                        break;
                                                };
                                                var $1632 = $1640;
                                                break;
                                        };
                                        var $1624 = $1632;
                                        break;
                                };
                                var $1616 = $1624;
                                break;
                        };
                        var $1608 = $1616;
                        break;
                };
                var $1600 = $1608;
                break;
        };
        return $1600;
    };
    const Fm$Parser$apply = x0 => x1 => Fm$Parser$apply$(x0, x1);

    function Fm$Parser$mirror$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1658 = self.idx;
                var $1659 = self.code;
                var $1660 = self.err;
                var $1661 = Parser$Reply$error$($1658, $1659, $1660);
                var $1657 = $1661;
                break;
            case 'Parser.Reply.value':
                var $1662 = self.idx;
                var $1663 = self.code;
                var $1664 = self.val;
                var self = Fm$Parser$text$("mirror(", $1662, $1663);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1666 = self.idx;
                        var $1667 = self.code;
                        var $1668 = self.err;
                        var $1669 = Parser$Reply$error$($1666, $1667, $1668);
                        var $1665 = $1669;
                        break;
                    case 'Parser.Reply.value':
                        var $1670 = self.idx;
                        var $1671 = self.code;
                        var $1672 = self.val;
                        var self = Fm$Parser$term$($1670, $1671);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1674 = self.idx;
                                var $1675 = self.code;
                                var $1676 = self.err;
                                var $1677 = Parser$Reply$error$($1674, $1675, $1676);
                                var $1673 = $1677;
                                break;
                            case 'Parser.Reply.value':
                                var $1678 = self.idx;
                                var $1679 = self.code;
                                var $1680 = self.val;
                                var self = Fm$Parser$text$(")", $1678, $1679);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1682 = self.idx;
                                        var $1683 = self.code;
                                        var $1684 = self.err;
                                        var $1685 = Parser$Reply$error$($1682, $1683, $1684);
                                        var $1681 = $1685;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1686 = self.idx;
                                        var $1687 = self.code;
                                        var $1688 = self.val;
                                        var self = Fm$Parser$stop$($1664, $1686, $1687);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1690 = self.idx;
                                                var $1691 = self.code;
                                                var $1692 = self.err;
                                                var $1693 = Parser$Reply$error$($1690, $1691, $1692);
                                                var $1689 = $1693;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1694 = self.idx;
                                                var $1695 = self.code;
                                                var $1696 = self.val;
                                                var _term$18 = Fm$Term$ref$("Equal.mirror");
                                                var _term$19 = Fm$Term$app$(_term$18, Fm$Term$hol$(Bits$e));
                                                var _term$20 = Fm$Term$app$(_term$19, Fm$Term$hol$(Bits$e));
                                                var _term$21 = Fm$Term$app$(_term$20, Fm$Term$hol$(Bits$e));
                                                var _term$22 = Fm$Term$app$(_term$21, $1680);
                                                var $1697 = Parser$Reply$value$($1694, $1695, Fm$Term$ori$($1696, _term$22));
                                                var $1689 = $1697;
                                                break;
                                        };
                                        var $1681 = $1689;
                                        break;
                                };
                                var $1673 = $1681;
                                break;
                        };
                        var $1665 = $1673;
                        break;
                };
                var $1657 = $1665;
                break;
        };
        return $1657;
    };
    const Fm$Parser$mirror = x0 => x1 => Fm$Parser$mirror$(x0, x1);

    function Fm$Name$read$(_str$1) {
        var $1698 = _str$1;
        return $1698;
    };
    const Fm$Name$read = x0 => Fm$Name$read$(x0);

    function Fm$Parser$list$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1700 = self.idx;
                var $1701 = self.code;
                var $1702 = self.err;
                var $1703 = Parser$Reply$error$($1700, $1701, $1702);
                var $1699 = $1703;
                break;
            case 'Parser.Reply.value':
                var $1704 = self.idx;
                var $1705 = self.code;
                var $1706 = self.val;
                var self = Fm$Parser$text$("[", $1704, $1705);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1708 = self.idx;
                        var $1709 = self.code;
                        var $1710 = self.err;
                        var $1711 = Parser$Reply$error$($1708, $1709, $1710);
                        var $1707 = $1711;
                        break;
                    case 'Parser.Reply.value':
                        var $1712 = self.idx;
                        var $1713 = self.code;
                        var $1714 = self.val;
                        var self = Parser$until$(Fm$Parser$text("]"), Fm$Parser$item(Fm$Parser$term))($1712)($1713);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1716 = self.idx;
                                var $1717 = self.code;
                                var $1718 = self.err;
                                var $1719 = Parser$Reply$error$($1716, $1717, $1718);
                                var $1715 = $1719;
                                break;
                            case 'Parser.Reply.value':
                                var $1720 = self.idx;
                                var $1721 = self.code;
                                var $1722 = self.val;
                                var self = Fm$Parser$stop$($1706, $1720, $1721);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1724 = self.idx;
                                        var $1725 = self.code;
                                        var $1726 = self.err;
                                        var $1727 = Parser$Reply$error$($1724, $1725, $1726);
                                        var $1723 = $1727;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1728 = self.idx;
                                        var $1729 = self.code;
                                        var $1730 = self.val;
                                        var $1731 = Parser$Reply$value$($1728, $1729, List$fold$($1722, Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("List.nil")), Fm$Term$hol$(Bits$e)), (_x$15 => _xs$16 => {
                                            var _term$17 = Fm$Term$ref$(Fm$Name$read$("List.cons"));
                                            var _term$18 = Fm$Term$app$(_term$17, Fm$Term$hol$(Bits$e));
                                            var _term$19 = Fm$Term$app$(_term$18, _x$15);
                                            var _term$20 = Fm$Term$app$(_term$19, _xs$16);
                                            var $1732 = Fm$Term$ori$($1730, _term$20);
                                            return $1732;
                                        })));
                                        var $1723 = $1731;
                                        break;
                                };
                                var $1715 = $1723;
                                break;
                        };
                        var $1707 = $1715;
                        break;
                };
                var $1699 = $1707;
                break;
        };
        return $1699;
    };
    const Fm$Parser$list = x0 => x1 => Fm$Parser$list$(x0, x1);

    function Fm$Parser$log$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1734 = self.idx;
                var $1735 = self.code;
                var $1736 = self.err;
                var $1737 = Parser$Reply$error$($1734, $1735, $1736);
                var $1733 = $1737;
                break;
            case 'Parser.Reply.value':
                var $1738 = self.idx;
                var $1739 = self.code;
                var $1740 = self.val;
                var self = Fm$Parser$text$("log(", $1738, $1739);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1742 = self.idx;
                        var $1743 = self.code;
                        var $1744 = self.err;
                        var $1745 = Parser$Reply$error$($1742, $1743, $1744);
                        var $1741 = $1745;
                        break;
                    case 'Parser.Reply.value':
                        var $1746 = self.idx;
                        var $1747 = self.code;
                        var $1748 = self.val;
                        var self = Parser$until$(Fm$Parser$text(")"), Fm$Parser$item(Fm$Parser$term))($1746)($1747);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1750 = self.idx;
                                var $1751 = self.code;
                                var $1752 = self.err;
                                var $1753 = Parser$Reply$error$($1750, $1751, $1752);
                                var $1749 = $1753;
                                break;
                            case 'Parser.Reply.value':
                                var $1754 = self.idx;
                                var $1755 = self.code;
                                var $1756 = self.val;
                                var self = Fm$Parser$term$($1754, $1755);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1758 = self.idx;
                                        var $1759 = self.code;
                                        var $1760 = self.err;
                                        var $1761 = Parser$Reply$error$($1758, $1759, $1760);
                                        var $1757 = $1761;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1762 = self.idx;
                                        var $1763 = self.code;
                                        var $1764 = self.val;
                                        var _term$15 = Fm$Term$ref$("Debug.log");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$hol$(Bits$e));
                                        var _args$17 = List$fold$($1756, Fm$Term$ref$("String.nil"), (_x$17 => _xs$18 => {
                                            var _arg$19 = Fm$Term$ref$("String.concat");
                                            var _arg$20 = Fm$Term$app$(_arg$19, _x$17);
                                            var _arg$21 = Fm$Term$app$(_arg$20, _xs$18);
                                            var $1766 = _arg$21;
                                            return $1766;
                                        }));
                                        var _term$18 = Fm$Term$app$(_term$16, _args$17);
                                        var _term$19 = Fm$Term$app$(_term$18, Fm$Term$lam$("x", (_x$19 => {
                                            var $1767 = $1764;
                                            return $1767;
                                        })));
                                        var self = Fm$Parser$stop$($1740, $1762, $1763);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1768 = self.idx;
                                                var $1769 = self.code;
                                                var $1770 = self.err;
                                                var $1771 = Parser$Reply$error$($1768, $1769, $1770);
                                                var $1765 = $1771;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1772 = self.idx;
                                                var $1773 = self.code;
                                                var $1774 = self.val;
                                                var $1775 = Parser$Reply$value$($1772, $1773, Fm$Term$ori$($1774, _term$19));
                                                var $1765 = $1775;
                                                break;
                                        };
                                        var $1757 = $1765;
                                        break;
                                };
                                var $1749 = $1757;
                                break;
                        };
                        var $1741 = $1749;
                        break;
                };
                var $1733 = $1741;
                break;
        };
        return $1733;
    };
    const Fm$Parser$log = x0 => x1 => Fm$Parser$log$(x0, x1);

    function Fm$Parser$forrange$u32$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1777 = self.idx;
                var $1778 = self.code;
                var $1779 = self.err;
                var $1780 = Parser$Reply$error$($1777, $1778, $1779);
                var $1776 = $1780;
                break;
            case 'Parser.Reply.value':
                var $1781 = self.idx;
                var $1782 = self.code;
                var $1783 = self.val;
                var self = Fm$Parser$text$("for ", $1781, $1782);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1785 = self.idx;
                        var $1786 = self.code;
                        var $1787 = self.err;
                        var $1788 = Parser$Reply$error$($1785, $1786, $1787);
                        var $1784 = $1788;
                        break;
                    case 'Parser.Reply.value':
                        var $1789 = self.idx;
                        var $1790 = self.code;
                        var $1791 = self.val;
                        var self = Fm$Parser$name1$($1789, $1790);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1793 = self.idx;
                                var $1794 = self.code;
                                var $1795 = self.err;
                                var $1796 = Parser$Reply$error$($1793, $1794, $1795);
                                var $1792 = $1796;
                                break;
                            case 'Parser.Reply.value':
                                var $1797 = self.idx;
                                var $1798 = self.code;
                                var $1799 = self.val;
                                var self = Fm$Parser$text$(":", $1797, $1798);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1801 = self.idx;
                                        var $1802 = self.code;
                                        var $1803 = self.err;
                                        var $1804 = Parser$Reply$error$($1801, $1802, $1803);
                                        var $1800 = $1804;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1805 = self.idx;
                                        var $1806 = self.code;
                                        var $1807 = self.val;
                                        var self = Fm$Parser$text$("U32", $1805, $1806);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1809 = self.idx;
                                                var $1810 = self.code;
                                                var $1811 = self.err;
                                                var $1812 = Parser$Reply$error$($1809, $1810, $1811);
                                                var $1808 = $1812;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1813 = self.idx;
                                                var $1814 = self.code;
                                                var $1815 = self.val;
                                                var self = Fm$Parser$text$("=", $1813, $1814);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1817 = self.idx;
                                                        var $1818 = self.code;
                                                        var $1819 = self.err;
                                                        var $1820 = Parser$Reply$error$($1817, $1818, $1819);
                                                        var $1816 = $1820;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1821 = self.idx;
                                                        var $1822 = self.code;
                                                        var $1823 = self.val;
                                                        var self = Fm$Parser$term$($1821, $1822);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1825 = self.idx;
                                                                var $1826 = self.code;
                                                                var $1827 = self.err;
                                                                var $1828 = Parser$Reply$error$($1825, $1826, $1827);
                                                                var $1824 = $1828;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1829 = self.idx;
                                                                var $1830 = self.code;
                                                                var $1831 = self.val;
                                                                var self = Fm$Parser$text$("..", $1829, $1830);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1833 = self.idx;
                                                                        var $1834 = self.code;
                                                                        var $1835 = self.err;
                                                                        var $1836 = Parser$Reply$error$($1833, $1834, $1835);
                                                                        var $1832 = $1836;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1837 = self.idx;
                                                                        var $1838 = self.code;
                                                                        var $1839 = self.val;
                                                                        var self = Fm$Parser$term$($1837, $1838);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1841 = self.idx;
                                                                                var $1842 = self.code;
                                                                                var $1843 = self.err;
                                                                                var $1844 = Parser$Reply$error$($1841, $1842, $1843);
                                                                                var $1840 = $1844;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1845 = self.idx;
                                                                                var $1846 = self.code;
                                                                                var $1847 = self.val;
                                                                                var self = Fm$Parser$text$("with", $1845, $1846);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1849 = self.idx;
                                                                                        var $1850 = self.code;
                                                                                        var $1851 = self.err;
                                                                                        var $1852 = Parser$Reply$error$($1849, $1850, $1851);
                                                                                        var $1848 = $1852;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1853 = self.idx;
                                                                                        var $1854 = self.code;
                                                                                        var $1855 = self.val;
                                                                                        var self = Fm$Parser$name1$($1853, $1854);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1857 = self.idx;
                                                                                                var $1858 = self.code;
                                                                                                var $1859 = self.err;
                                                                                                var $1860 = Parser$Reply$error$($1857, $1858, $1859);
                                                                                                var $1856 = $1860;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1861 = self.idx;
                                                                                                var $1862 = self.code;
                                                                                                var $1863 = self.val;
                                                                                                var self = Fm$Parser$text$(":", $1861, $1862);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1865 = self.idx;
                                                                                                        var $1866 = self.code;
                                                                                                        var $1867 = self.err;
                                                                                                        var $1868 = Parser$Reply$error$($1865, $1866, $1867);
                                                                                                        var $1864 = $1868;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1869 = self.idx;
                                                                                                        var $1870 = self.code;
                                                                                                        var $1871 = self.val;
                                                                                                        var self = Fm$Parser$term$($1869, $1870);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1873 = self.idx;
                                                                                                                var $1874 = self.code;
                                                                                                                var $1875 = self.err;
                                                                                                                var $1876 = Parser$Reply$error$($1873, $1874, $1875);
                                                                                                                var $1872 = $1876;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1877 = self.idx;
                                                                                                                var $1878 = self.code;
                                                                                                                var $1879 = self.val;
                                                                                                                var self = Fm$Parser$stop$($1783, $1877, $1878);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1881 = self.idx;
                                                                                                                        var $1882 = self.code;
                                                                                                                        var $1883 = self.err;
                                                                                                                        var $1884 = Parser$Reply$error$($1881, $1882, $1883);
                                                                                                                        var $1880 = $1884;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1885 = self.idx;
                                                                                                                        var $1886 = self.code;
                                                                                                                        var $1887 = self.val;
                                                                                                                        var _term$45 = Fm$Term$ref$("U32.for");
                                                                                                                        var _term$46 = Fm$Term$app$(_term$45, Fm$Term$hol$(Bits$e));
                                                                                                                        var _term$47 = Fm$Term$app$(_term$46, Fm$Term$ref$($1863));
                                                                                                                        var _term$48 = Fm$Term$app$(_term$47, $1831);
                                                                                                                        var _term$49 = Fm$Term$app$(_term$48, $1847);
                                                                                                                        var _lamb$50 = Fm$Term$lam$($1799, (_e$50 => {
                                                                                                                            var $1889 = Fm$Term$lam$($1863, (_s$51 => {
                                                                                                                                var $1890 = $1879;
                                                                                                                                return $1890;
                                                                                                                            }));
                                                                                                                            return $1889;
                                                                                                                        }));
                                                                                                                        var _term$51 = Fm$Term$app$(_term$49, _lamb$50);
                                                                                                                        var _term$52 = Fm$Term$let$($1863, _term$51, (_x$52 => {
                                                                                                                            var $1891 = Fm$Term$ref$($1863);
                                                                                                                            return $1891;
                                                                                                                        }));
                                                                                                                        var $1888 = Parser$Reply$value$($1885, $1886, Fm$Term$ori$($1887, _term$52));
                                                                                                                        var $1880 = $1888;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1872 = $1880;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1864 = $1872;
                                                                                                        break;
                                                                                                };
                                                                                                var $1856 = $1864;
                                                                                                break;
                                                                                        };
                                                                                        var $1848 = $1856;
                                                                                        break;
                                                                                };
                                                                                var $1840 = $1848;
                                                                                break;
                                                                        };
                                                                        var $1832 = $1840;
                                                                        break;
                                                                };
                                                                var $1824 = $1832;
                                                                break;
                                                        };
                                                        var $1816 = $1824;
                                                        break;
                                                };
                                                var $1808 = $1816;
                                                break;
                                        };
                                        var $1800 = $1808;
                                        break;
                                };
                                var $1792 = $1800;
                                break;
                        };
                        var $1784 = $1792;
                        break;
                };
                var $1776 = $1784;
                break;
        };
        return $1776;
    };
    const Fm$Parser$forrange$u32 = x0 => x1 => Fm$Parser$forrange$u32$(x0, x1);

    function Fm$Parser$forrange$u32$2$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1893 = self.idx;
                var $1894 = self.code;
                var $1895 = self.err;
                var $1896 = Parser$Reply$error$($1893, $1894, $1895);
                var $1892 = $1896;
                break;
            case 'Parser.Reply.value':
                var $1897 = self.idx;
                var $1898 = self.code;
                var $1899 = self.val;
                var self = Fm$Parser$text$("for ", $1897, $1898);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1901 = self.idx;
                        var $1902 = self.code;
                        var $1903 = self.err;
                        var $1904 = Parser$Reply$error$($1901, $1902, $1903);
                        var $1900 = $1904;
                        break;
                    case 'Parser.Reply.value':
                        var $1905 = self.idx;
                        var $1906 = self.code;
                        var $1907 = self.val;
                        var self = Fm$Parser$name1$($1905, $1906);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1909 = self.idx;
                                var $1910 = self.code;
                                var $1911 = self.err;
                                var $1912 = Parser$Reply$error$($1909, $1910, $1911);
                                var $1908 = $1912;
                                break;
                            case 'Parser.Reply.value':
                                var $1913 = self.idx;
                                var $1914 = self.code;
                                var $1915 = self.val;
                                var self = Fm$Parser$text$(":", $1913, $1914);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1917 = self.idx;
                                        var $1918 = self.code;
                                        var $1919 = self.err;
                                        var $1920 = Parser$Reply$error$($1917, $1918, $1919);
                                        var $1916 = $1920;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1921 = self.idx;
                                        var $1922 = self.code;
                                        var $1923 = self.val;
                                        var self = Fm$Parser$text$("U32", $1921, $1922);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1925 = self.idx;
                                                var $1926 = self.code;
                                                var $1927 = self.err;
                                                var $1928 = Parser$Reply$error$($1925, $1926, $1927);
                                                var $1924 = $1928;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1929 = self.idx;
                                                var $1930 = self.code;
                                                var $1931 = self.val;
                                                var self = Fm$Parser$text$("=", $1929, $1930);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1933 = self.idx;
                                                        var $1934 = self.code;
                                                        var $1935 = self.err;
                                                        var $1936 = Parser$Reply$error$($1933, $1934, $1935);
                                                        var $1932 = $1936;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1937 = self.idx;
                                                        var $1938 = self.code;
                                                        var $1939 = self.val;
                                                        var self = Fm$Parser$term$($1937, $1938);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1941 = self.idx;
                                                                var $1942 = self.code;
                                                                var $1943 = self.err;
                                                                var $1944 = Parser$Reply$error$($1941, $1942, $1943);
                                                                var $1940 = $1944;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1945 = self.idx;
                                                                var $1946 = self.code;
                                                                var $1947 = self.val;
                                                                var self = Fm$Parser$text$("..", $1945, $1946);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1949 = self.idx;
                                                                        var $1950 = self.code;
                                                                        var $1951 = self.err;
                                                                        var $1952 = Parser$Reply$error$($1949, $1950, $1951);
                                                                        var $1948 = $1952;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1953 = self.idx;
                                                                        var $1954 = self.code;
                                                                        var $1955 = self.val;
                                                                        var self = Fm$Parser$term$($1953, $1954);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1957 = self.idx;
                                                                                var $1958 = self.code;
                                                                                var $1959 = self.err;
                                                                                var $1960 = Parser$Reply$error$($1957, $1958, $1959);
                                                                                var $1956 = $1960;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1961 = self.idx;
                                                                                var $1962 = self.code;
                                                                                var $1963 = self.val;
                                                                                var self = Fm$Parser$text$(":", $1961, $1962);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1965 = self.idx;
                                                                                        var $1966 = self.code;
                                                                                        var $1967 = self.err;
                                                                                        var $1968 = Parser$Reply$error$($1965, $1966, $1967);
                                                                                        var $1964 = $1968;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1969 = self.idx;
                                                                                        var $1970 = self.code;
                                                                                        var $1971 = self.val;
                                                                                        var self = Fm$Parser$name1$($1969, $1970);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1973 = self.idx;
                                                                                                var $1974 = self.code;
                                                                                                var $1975 = self.err;
                                                                                                var $1976 = Parser$Reply$error$($1973, $1974, $1975);
                                                                                                var $1972 = $1976;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1977 = self.idx;
                                                                                                var $1978 = self.code;
                                                                                                var $1979 = self.val;
                                                                                                var self = Fm$Parser$text$("=", $1977, $1978);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1981 = self.idx;
                                                                                                        var $1982 = self.code;
                                                                                                        var $1983 = self.err;
                                                                                                        var $1984 = Parser$Reply$error$($1981, $1982, $1983);
                                                                                                        var $1980 = $1984;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1985 = self.idx;
                                                                                                        var $1986 = self.code;
                                                                                                        var $1987 = self.val;
                                                                                                        var self = Fm$Parser$term$($1985, $1986);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1989 = self.idx;
                                                                                                                var $1990 = self.code;
                                                                                                                var $1991 = self.err;
                                                                                                                var $1992 = Parser$Reply$error$($1989, $1990, $1991);
                                                                                                                var $1988 = $1992;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1993 = self.idx;
                                                                                                                var $1994 = self.code;
                                                                                                                var $1995 = self.val;
                                                                                                                var self = Parser$maybe$(Fm$Parser$text(";"), $1993, $1994);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1997 = self.idx;
                                                                                                                        var $1998 = self.code;
                                                                                                                        var $1999 = self.err;
                                                                                                                        var $2000 = Parser$Reply$error$($1997, $1998, $1999);
                                                                                                                        var $1996 = $2000;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $2001 = self.idx;
                                                                                                                        var $2002 = self.code;
                                                                                                                        var $2003 = self.val;
                                                                                                                        var self = Fm$Parser$term$($2001, $2002);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $2005 = self.idx;
                                                                                                                                var $2006 = self.code;
                                                                                                                                var $2007 = self.err;
                                                                                                                                var $2008 = Parser$Reply$error$($2005, $2006, $2007);
                                                                                                                                var $2004 = $2008;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $2009 = self.idx;
                                                                                                                                var $2010 = self.code;
                                                                                                                                var $2011 = self.val;
                                                                                                                                var self = Fm$Parser$stop$($1899, $2009, $2010);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $2013 = self.idx;
                                                                                                                                        var $2014 = self.code;
                                                                                                                                        var $2015 = self.err;
                                                                                                                                        var $2016 = Parser$Reply$error$($2013, $2014, $2015);
                                                                                                                                        var $2012 = $2016;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $2017 = self.idx;
                                                                                                                                        var $2018 = self.code;
                                                                                                                                        var $2019 = self.val;
                                                                                                                                        var _term$51 = Fm$Term$ref$("U32.for");
                                                                                                                                        var _term$52 = Fm$Term$app$(_term$51, Fm$Term$hol$(Bits$e));
                                                                                                                                        var _term$53 = Fm$Term$app$(_term$52, Fm$Term$ref$($1979));
                                                                                                                                        var _term$54 = Fm$Term$app$(_term$53, $1947);
                                                                                                                                        var _term$55 = Fm$Term$app$(_term$54, $1963);
                                                                                                                                        var _lamb$56 = Fm$Term$lam$($1915, (_e$56 => {
                                                                                                                                            var $2021 = Fm$Term$lam$($1979, (_s$57 => {
                                                                                                                                                var $2022 = $1995;
                                                                                                                                                return $2022;
                                                                                                                                            }));
                                                                                                                                            return $2021;
                                                                                                                                        }));
                                                                                                                                        var _term$57 = Fm$Term$app$(_term$55, _lamb$56);
                                                                                                                                        var _term$58 = Fm$Term$let$($1979, _term$57, (_x$58 => {
                                                                                                                                            var $2023 = $2011;
                                                                                                                                            return $2023;
                                                                                                                                        }));
                                                                                                                                        var $2020 = Parser$Reply$value$($2017, $2018, Fm$Term$ori$($2019, _term$58));
                                                                                                                                        var $2012 = $2020;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $2004 = $2012;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1996 = $2004;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1988 = $1996;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1980 = $1988;
                                                                                                        break;
                                                                                                };
                                                                                                var $1972 = $1980;
                                                                                                break;
                                                                                        };
                                                                                        var $1964 = $1972;
                                                                                        break;
                                                                                };
                                                                                var $1956 = $1964;
                                                                                break;
                                                                        };
                                                                        var $1948 = $1956;
                                                                        break;
                                                                };
                                                                var $1940 = $1948;
                                                                break;
                                                        };
                                                        var $1932 = $1940;
                                                        break;
                                                };
                                                var $1924 = $1932;
                                                break;
                                        };
                                        var $1916 = $1924;
                                        break;
                                };
                                var $1908 = $1916;
                                break;
                        };
                        var $1900 = $1908;
                        break;
                };
                var $1892 = $1900;
                break;
        };
        return $1892;
    };
    const Fm$Parser$forrange$u32$2 = x0 => x1 => Fm$Parser$forrange$u32$2$(x0, x1);

    function Fm$Parser$forin$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2025 = self.idx;
                var $2026 = self.code;
                var $2027 = self.err;
                var $2028 = Parser$Reply$error$($2025, $2026, $2027);
                var $2024 = $2028;
                break;
            case 'Parser.Reply.value':
                var $2029 = self.idx;
                var $2030 = self.code;
                var $2031 = self.val;
                var self = Fm$Parser$text$("for ", $2029, $2030);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2033 = self.idx;
                        var $2034 = self.code;
                        var $2035 = self.err;
                        var $2036 = Parser$Reply$error$($2033, $2034, $2035);
                        var $2032 = $2036;
                        break;
                    case 'Parser.Reply.value':
                        var $2037 = self.idx;
                        var $2038 = self.code;
                        var $2039 = self.val;
                        var self = Fm$Parser$name1$($2037, $2038);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2041 = self.idx;
                                var $2042 = self.code;
                                var $2043 = self.err;
                                var $2044 = Parser$Reply$error$($2041, $2042, $2043);
                                var $2040 = $2044;
                                break;
                            case 'Parser.Reply.value':
                                var $2045 = self.idx;
                                var $2046 = self.code;
                                var $2047 = self.val;
                                var self = Fm$Parser$text$("in", $2045, $2046);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2049 = self.idx;
                                        var $2050 = self.code;
                                        var $2051 = self.err;
                                        var $2052 = Parser$Reply$error$($2049, $2050, $2051);
                                        var $2048 = $2052;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2053 = self.idx;
                                        var $2054 = self.code;
                                        var $2055 = self.val;
                                        var self = Fm$Parser$term$($2053, $2054);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2057 = self.idx;
                                                var $2058 = self.code;
                                                var $2059 = self.err;
                                                var $2060 = Parser$Reply$error$($2057, $2058, $2059);
                                                var $2056 = $2060;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2061 = self.idx;
                                                var $2062 = self.code;
                                                var $2063 = self.val;
                                                var self = Fm$Parser$text$("with", $2061, $2062);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2065 = self.idx;
                                                        var $2066 = self.code;
                                                        var $2067 = self.err;
                                                        var $2068 = Parser$Reply$error$($2065, $2066, $2067);
                                                        var $2064 = $2068;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2069 = self.idx;
                                                        var $2070 = self.code;
                                                        var $2071 = self.val;
                                                        var self = Fm$Parser$name1$($2069, $2070);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2073 = self.idx;
                                                                var $2074 = self.code;
                                                                var $2075 = self.err;
                                                                var $2076 = Parser$Reply$error$($2073, $2074, $2075);
                                                                var $2072 = $2076;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2077 = self.idx;
                                                                var $2078 = self.code;
                                                                var $2079 = self.val;
                                                                var self = Fm$Parser$text$(":", $2077, $2078);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2081 = self.idx;
                                                                        var $2082 = self.code;
                                                                        var $2083 = self.err;
                                                                        var $2084 = Parser$Reply$error$($2081, $2082, $2083);
                                                                        var $2080 = $2084;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2085 = self.idx;
                                                                        var $2086 = self.code;
                                                                        var $2087 = self.val;
                                                                        var self = Fm$Parser$term$($2085, $2086);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2089 = self.idx;
                                                                                var $2090 = self.code;
                                                                                var $2091 = self.err;
                                                                                var $2092 = Parser$Reply$error$($2089, $2090, $2091);
                                                                                var $2088 = $2092;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2093 = self.idx;
                                                                                var $2094 = self.code;
                                                                                var $2095 = self.val;
                                                                                var self = Fm$Parser$stop$($2031, $2093, $2094);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2097 = self.idx;
                                                                                        var $2098 = self.code;
                                                                                        var $2099 = self.err;
                                                                                        var $2100 = Parser$Reply$error$($2097, $2098, $2099);
                                                                                        var $2096 = $2100;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2101 = self.idx;
                                                                                        var $2102 = self.code;
                                                                                        var $2103 = self.val;
                                                                                        var _term$33 = Fm$Term$ref$("List.for");
                                                                                        var _term$34 = Fm$Term$app$(_term$33, Fm$Term$hol$(Bits$e));
                                                                                        var _term$35 = Fm$Term$app$(_term$34, $2063);
                                                                                        var _term$36 = Fm$Term$app$(_term$35, Fm$Term$hol$(Bits$e));
                                                                                        var _term$37 = Fm$Term$app$(_term$36, Fm$Term$ref$($2079));
                                                                                        var _lamb$38 = Fm$Term$lam$($2047, (_i$38 => {
                                                                                            var $2105 = Fm$Term$lam$($2079, (_x$39 => {
                                                                                                var $2106 = $2095;
                                                                                                return $2106;
                                                                                            }));
                                                                                            return $2105;
                                                                                        }));
                                                                                        var _term$39 = Fm$Term$app$(_term$37, _lamb$38);
                                                                                        var _term$40 = Fm$Term$let$($2079, _term$39, (_x$40 => {
                                                                                            var $2107 = Fm$Term$ref$($2079);
                                                                                            return $2107;
                                                                                        }));
                                                                                        var $2104 = Parser$Reply$value$($2101, $2102, Fm$Term$ori$($2103, _term$40));
                                                                                        var $2096 = $2104;
                                                                                        break;
                                                                                };
                                                                                var $2088 = $2096;
                                                                                break;
                                                                        };
                                                                        var $2080 = $2088;
                                                                        break;
                                                                };
                                                                var $2072 = $2080;
                                                                break;
                                                        };
                                                        var $2064 = $2072;
                                                        break;
                                                };
                                                var $2056 = $2064;
                                                break;
                                        };
                                        var $2048 = $2056;
                                        break;
                                };
                                var $2040 = $2048;
                                break;
                        };
                        var $2032 = $2040;
                        break;
                };
                var $2024 = $2032;
                break;
        };
        return $2024;
    };
    const Fm$Parser$forin = x0 => x1 => Fm$Parser$forin$(x0, x1);

    function Fm$Parser$forin$2$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2109 = self.idx;
                var $2110 = self.code;
                var $2111 = self.err;
                var $2112 = Parser$Reply$error$($2109, $2110, $2111);
                var $2108 = $2112;
                break;
            case 'Parser.Reply.value':
                var $2113 = self.idx;
                var $2114 = self.code;
                var $2115 = self.val;
                var self = Fm$Parser$text$("for ", $2113, $2114);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2117 = self.idx;
                        var $2118 = self.code;
                        var $2119 = self.err;
                        var $2120 = Parser$Reply$error$($2117, $2118, $2119);
                        var $2116 = $2120;
                        break;
                    case 'Parser.Reply.value':
                        var $2121 = self.idx;
                        var $2122 = self.code;
                        var $2123 = self.val;
                        var self = Fm$Parser$name1$($2121, $2122);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2125 = self.idx;
                                var $2126 = self.code;
                                var $2127 = self.err;
                                var $2128 = Parser$Reply$error$($2125, $2126, $2127);
                                var $2124 = $2128;
                                break;
                            case 'Parser.Reply.value':
                                var $2129 = self.idx;
                                var $2130 = self.code;
                                var $2131 = self.val;
                                var self = Fm$Parser$text$("in", $2129, $2130);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2133 = self.idx;
                                        var $2134 = self.code;
                                        var $2135 = self.err;
                                        var $2136 = Parser$Reply$error$($2133, $2134, $2135);
                                        var $2132 = $2136;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2137 = self.idx;
                                        var $2138 = self.code;
                                        var $2139 = self.val;
                                        var self = Fm$Parser$term$($2137, $2138);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2141 = self.idx;
                                                var $2142 = self.code;
                                                var $2143 = self.err;
                                                var $2144 = Parser$Reply$error$($2141, $2142, $2143);
                                                var $2140 = $2144;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2145 = self.idx;
                                                var $2146 = self.code;
                                                var $2147 = self.val;
                                                var self = Fm$Parser$text$(":", $2145, $2146);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2149 = self.idx;
                                                        var $2150 = self.code;
                                                        var $2151 = self.err;
                                                        var $2152 = Parser$Reply$error$($2149, $2150, $2151);
                                                        var $2148 = $2152;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2153 = self.idx;
                                                        var $2154 = self.code;
                                                        var $2155 = self.val;
                                                        var self = Fm$Parser$name1$($2153, $2154);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2157 = self.idx;
                                                                var $2158 = self.code;
                                                                var $2159 = self.err;
                                                                var $2160 = Parser$Reply$error$($2157, $2158, $2159);
                                                                var $2156 = $2160;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2161 = self.idx;
                                                                var $2162 = self.code;
                                                                var $2163 = self.val;
                                                                var self = Fm$Parser$text$("=", $2161, $2162);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2165 = self.idx;
                                                                        var $2166 = self.code;
                                                                        var $2167 = self.err;
                                                                        var $2168 = Parser$Reply$error$($2165, $2166, $2167);
                                                                        var $2164 = $2168;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2169 = self.idx;
                                                                        var $2170 = self.code;
                                                                        var $2171 = self.val;
                                                                        var self = Fm$Parser$term$($2169, $2170);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2173 = self.idx;
                                                                                var $2174 = self.code;
                                                                                var $2175 = self.err;
                                                                                var $2176 = Parser$Reply$error$($2173, $2174, $2175);
                                                                                var $2172 = $2176;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2177 = self.idx;
                                                                                var $2178 = self.code;
                                                                                var $2179 = self.val;
                                                                                var self = Parser$maybe$(Fm$Parser$text(";"), $2177, $2178);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2181 = self.idx;
                                                                                        var $2182 = self.code;
                                                                                        var $2183 = self.err;
                                                                                        var $2184 = Parser$Reply$error$($2181, $2182, $2183);
                                                                                        var $2180 = $2184;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2185 = self.idx;
                                                                                        var $2186 = self.code;
                                                                                        var $2187 = self.val;
                                                                                        var self = Fm$Parser$term$($2185, $2186);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2189 = self.idx;
                                                                                                var $2190 = self.code;
                                                                                                var $2191 = self.err;
                                                                                                var $2192 = Parser$Reply$error$($2189, $2190, $2191);
                                                                                                var $2188 = $2192;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2193 = self.idx;
                                                                                                var $2194 = self.code;
                                                                                                var $2195 = self.val;
                                                                                                var self = Fm$Parser$stop$($2115, $2193, $2194);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2197 = self.idx;
                                                                                                        var $2198 = self.code;
                                                                                                        var $2199 = self.err;
                                                                                                        var $2200 = Parser$Reply$error$($2197, $2198, $2199);
                                                                                                        var $2196 = $2200;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2201 = self.idx;
                                                                                                        var $2202 = self.code;
                                                                                                        var $2203 = self.val;
                                                                                                        var _term$39 = Fm$Term$ref$("List.for");
                                                                                                        var _term$40 = Fm$Term$app$(_term$39, Fm$Term$hol$(Bits$e));
                                                                                                        var _term$41 = Fm$Term$app$(_term$40, $2147);
                                                                                                        var _term$42 = Fm$Term$app$(_term$41, Fm$Term$hol$(Bits$e));
                                                                                                        var _term$43 = Fm$Term$app$(_term$42, Fm$Term$ref$($2163));
                                                                                                        var _lamb$44 = Fm$Term$lam$($2131, (_i$44 => {
                                                                                                            var $2205 = Fm$Term$lam$($2163, (_x$45 => {
                                                                                                                var $2206 = $2179;
                                                                                                                return $2206;
                                                                                                            }));
                                                                                                            return $2205;
                                                                                                        }));
                                                                                                        var _term$45 = Fm$Term$app$(_term$43, _lamb$44);
                                                                                                        var _term$46 = Fm$Term$let$($2163, _term$45, (_x$46 => {
                                                                                                            var $2207 = $2195;
                                                                                                            return $2207;
                                                                                                        }));
                                                                                                        var $2204 = Parser$Reply$value$($2201, $2202, Fm$Term$ori$($2203, _term$46));
                                                                                                        var $2196 = $2204;
                                                                                                        break;
                                                                                                };
                                                                                                var $2188 = $2196;
                                                                                                break;
                                                                                        };
                                                                                        var $2180 = $2188;
                                                                                        break;
                                                                                };
                                                                                var $2172 = $2180;
                                                                                break;
                                                                        };
                                                                        var $2164 = $2172;
                                                                        break;
                                                                };
                                                                var $2156 = $2164;
                                                                break;
                                                        };
                                                        var $2148 = $2156;
                                                        break;
                                                };
                                                var $2140 = $2148;
                                                break;
                                        };
                                        var $2132 = $2140;
                                        break;
                                };
                                var $2124 = $2132;
                                break;
                        };
                        var $2116 = $2124;
                        break;
                };
                var $2108 = $2116;
                break;
        };
        return $2108;
    };
    const Fm$Parser$forin$2 = x0 => x1 => Fm$Parser$forin$2$(x0, x1);

    function Fm$Parser$do$statements$(_monad_name$1) {
        var $2208 = Parser$first_of$(List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2210 = self.idx;
                    var $2211 = self.code;
                    var $2212 = self.err;
                    var $2213 = Parser$Reply$error$($2210, $2211, $2212);
                    var $2209 = $2213;
                    break;
                case 'Parser.Reply.value':
                    var $2214 = self.idx;
                    var $2215 = self.code;
                    var $2216 = self.val;
                    var self = Fm$Parser$text$("var ", $2214, $2215);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2218 = self.idx;
                            var $2219 = self.code;
                            var $2220 = self.err;
                            var $2221 = Parser$Reply$error$($2218, $2219, $2220);
                            var $2217 = $2221;
                            break;
                        case 'Parser.Reply.value':
                            var $2222 = self.idx;
                            var $2223 = self.code;
                            var $2224 = self.val;
                            var self = Fm$Parser$name1$($2222, $2223);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2226 = self.idx;
                                    var $2227 = self.code;
                                    var $2228 = self.err;
                                    var $2229 = Parser$Reply$error$($2226, $2227, $2228);
                                    var $2225 = $2229;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2230 = self.idx;
                                    var $2231 = self.code;
                                    var $2232 = self.val;
                                    var self = Fm$Parser$text$("=", $2230, $2231);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2234 = self.idx;
                                            var $2235 = self.code;
                                            var $2236 = self.err;
                                            var $2237 = Parser$Reply$error$($2234, $2235, $2236);
                                            var $2233 = $2237;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2238 = self.idx;
                                            var $2239 = self.code;
                                            var $2240 = self.val;
                                            var self = Fm$Parser$term$($2238, $2239);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2242 = self.idx;
                                                    var $2243 = self.code;
                                                    var $2244 = self.err;
                                                    var $2245 = Parser$Reply$error$($2242, $2243, $2244);
                                                    var $2241 = $2245;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2246 = self.idx;
                                                    var $2247 = self.code;
                                                    var $2248 = self.val;
                                                    var self = Parser$maybe$(Fm$Parser$text(";"), $2246, $2247);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $2250 = self.idx;
                                                            var $2251 = self.code;
                                                            var $2252 = self.err;
                                                            var $2253 = Parser$Reply$error$($2250, $2251, $2252);
                                                            var $2249 = $2253;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $2254 = self.idx;
                                                            var $2255 = self.code;
                                                            var $2256 = self.val;
                                                            var self = Fm$Parser$do$statements$(_monad_name$1)($2254)($2255);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $2258 = self.idx;
                                                                    var $2259 = self.code;
                                                                    var $2260 = self.err;
                                                                    var $2261 = Parser$Reply$error$($2258, $2259, $2260);
                                                                    var $2257 = $2261;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $2262 = self.idx;
                                                                    var $2263 = self.code;
                                                                    var $2264 = self.val;
                                                                    var self = Fm$Parser$stop$($2216, $2262, $2263);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $2266 = self.idx;
                                                                            var $2267 = self.code;
                                                                            var $2268 = self.err;
                                                                            var $2269 = Parser$Reply$error$($2266, $2267, $2268);
                                                                            var $2265 = $2269;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $2270 = self.idx;
                                                                            var $2271 = self.code;
                                                                            var $2272 = self.val;
                                                                            var _term$28 = Fm$Term$app$(Fm$Term$ref$("Monad.bind"), Fm$Term$ref$(_monad_name$1));
                                                                            var _term$29 = Fm$Term$app$(_term$28, Fm$Term$ref$((_monad_name$1 + ".monad")));
                                                                            var _term$30 = Fm$Term$app$(_term$29, Fm$Term$hol$(Bits$e));
                                                                            var _term$31 = Fm$Term$app$(_term$30, Fm$Term$hol$(Bits$e));
                                                                            var _term$32 = Fm$Term$app$(_term$31, $2248);
                                                                            var _term$33 = Fm$Term$app$(_term$32, Fm$Term$lam$($2232, (_x$33 => {
                                                                                var $2274 = $2264;
                                                                                return $2274;
                                                                            })));
                                                                            var $2273 = Parser$Reply$value$($2270, $2271, Fm$Term$ori$($2272, _term$33));
                                                                            var $2265 = $2273;
                                                                            break;
                                                                    };
                                                                    var $2257 = $2265;
                                                                    break;
                                                            };
                                                            var $2249 = $2257;
                                                            break;
                                                    };
                                                    var $2241 = $2249;
                                                    break;
                                            };
                                            var $2233 = $2241;
                                            break;
                                    };
                                    var $2225 = $2233;
                                    break;
                            };
                            var $2217 = $2225;
                            break;
                    };
                    var $2209 = $2217;
                    break;
            };
            return $2209;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2276 = self.idx;
                    var $2277 = self.code;
                    var $2278 = self.err;
                    var $2279 = Parser$Reply$error$($2276, $2277, $2278);
                    var $2275 = $2279;
                    break;
                case 'Parser.Reply.value':
                    var $2280 = self.idx;
                    var $2281 = self.code;
                    var $2282 = self.val;
                    var self = Fm$Parser$text$("let ", $2280, $2281);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2284 = self.idx;
                            var $2285 = self.code;
                            var $2286 = self.err;
                            var $2287 = Parser$Reply$error$($2284, $2285, $2286);
                            var $2283 = $2287;
                            break;
                        case 'Parser.Reply.value':
                            var $2288 = self.idx;
                            var $2289 = self.code;
                            var $2290 = self.val;
                            var self = Fm$Parser$name1$($2288, $2289);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2292 = self.idx;
                                    var $2293 = self.code;
                                    var $2294 = self.err;
                                    var $2295 = Parser$Reply$error$($2292, $2293, $2294);
                                    var $2291 = $2295;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2296 = self.idx;
                                    var $2297 = self.code;
                                    var $2298 = self.val;
                                    var self = Fm$Parser$text$("=", $2296, $2297);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2300 = self.idx;
                                            var $2301 = self.code;
                                            var $2302 = self.err;
                                            var $2303 = Parser$Reply$error$($2300, $2301, $2302);
                                            var $2299 = $2303;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2304 = self.idx;
                                            var $2305 = self.code;
                                            var $2306 = self.val;
                                            var self = Fm$Parser$term$($2304, $2305);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2308 = self.idx;
                                                    var $2309 = self.code;
                                                    var $2310 = self.err;
                                                    var $2311 = Parser$Reply$error$($2308, $2309, $2310);
                                                    var $2307 = $2311;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2312 = self.idx;
                                                    var $2313 = self.code;
                                                    var $2314 = self.val;
                                                    var self = Parser$maybe$(Fm$Parser$text(";"), $2312, $2313);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $2316 = self.idx;
                                                            var $2317 = self.code;
                                                            var $2318 = self.err;
                                                            var $2319 = Parser$Reply$error$($2316, $2317, $2318);
                                                            var $2315 = $2319;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $2320 = self.idx;
                                                            var $2321 = self.code;
                                                            var $2322 = self.val;
                                                            var self = Fm$Parser$do$statements$(_monad_name$1)($2320)($2321);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $2324 = self.idx;
                                                                    var $2325 = self.code;
                                                                    var $2326 = self.err;
                                                                    var $2327 = Parser$Reply$error$($2324, $2325, $2326);
                                                                    var $2323 = $2327;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $2328 = self.idx;
                                                                    var $2329 = self.code;
                                                                    var $2330 = self.val;
                                                                    var self = Fm$Parser$stop$($2282, $2328, $2329);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $2332 = self.idx;
                                                                            var $2333 = self.code;
                                                                            var $2334 = self.err;
                                                                            var $2335 = Parser$Reply$error$($2332, $2333, $2334);
                                                                            var $2331 = $2335;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $2336 = self.idx;
                                                                            var $2337 = self.code;
                                                                            var $2338 = self.val;
                                                                            var $2339 = Parser$Reply$value$($2336, $2337, Fm$Term$ori$($2338, Fm$Term$let$($2298, $2314, (_x$28 => {
                                                                                var $2340 = $2330;
                                                                                return $2340;
                                                                            }))));
                                                                            var $2331 = $2339;
                                                                            break;
                                                                    };
                                                                    var $2323 = $2331;
                                                                    break;
                                                            };
                                                            var $2315 = $2323;
                                                            break;
                                                    };
                                                    var $2307 = $2315;
                                                    break;
                                            };
                                            var $2299 = $2307;
                                            break;
                                    };
                                    var $2291 = $2299;
                                    break;
                            };
                            var $2283 = $2291;
                            break;
                    };
                    var $2275 = $2283;
                    break;
            };
            return $2275;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2342 = self.idx;
                    var $2343 = self.code;
                    var $2344 = self.err;
                    var $2345 = Parser$Reply$error$($2342, $2343, $2344);
                    var $2341 = $2345;
                    break;
                case 'Parser.Reply.value':
                    var $2346 = self.idx;
                    var $2347 = self.code;
                    var $2348 = self.val;
                    var self = Fm$Parser$text$("return ", $2346, $2347);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2350 = self.idx;
                            var $2351 = self.code;
                            var $2352 = self.err;
                            var $2353 = Parser$Reply$error$($2350, $2351, $2352);
                            var $2349 = $2353;
                            break;
                        case 'Parser.Reply.value':
                            var $2354 = self.idx;
                            var $2355 = self.code;
                            var $2356 = self.val;
                            var self = Fm$Parser$term$($2354, $2355);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2358 = self.idx;
                                    var $2359 = self.code;
                                    var $2360 = self.err;
                                    var $2361 = Parser$Reply$error$($2358, $2359, $2360);
                                    var $2357 = $2361;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2362 = self.idx;
                                    var $2363 = self.code;
                                    var $2364 = self.val;
                                    var self = Parser$maybe$(Fm$Parser$text(";"), $2362, $2363);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2366 = self.idx;
                                            var $2367 = self.code;
                                            var $2368 = self.err;
                                            var $2369 = Parser$Reply$error$($2366, $2367, $2368);
                                            var $2365 = $2369;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2370 = self.idx;
                                            var $2371 = self.code;
                                            var $2372 = self.val;
                                            var self = Fm$Parser$stop$($2348, $2370, $2371);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2374 = self.idx;
                                                    var $2375 = self.code;
                                                    var $2376 = self.err;
                                                    var $2377 = Parser$Reply$error$($2374, $2375, $2376);
                                                    var $2373 = $2377;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2378 = self.idx;
                                                    var $2379 = self.code;
                                                    var $2380 = self.val;
                                                    var _term$19 = Fm$Term$app$(Fm$Term$ref$("Monad.pure"), Fm$Term$ref$(_monad_name$1));
                                                    var _term$20 = Fm$Term$app$(_term$19, Fm$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Fm$Term$app$(_term$20, Fm$Term$hol$(Bits$e));
                                                    var _term$22 = Fm$Term$app$(_term$21, $2364);
                                                    var $2381 = Parser$Reply$value$($2378, $2379, Fm$Term$ori$($2380, _term$22));
                                                    var $2373 = $2381;
                                                    break;
                                            };
                                            var $2365 = $2373;
                                            break;
                                    };
                                    var $2357 = $2365;
                                    break;
                            };
                            var $2349 = $2357;
                            break;
                    };
                    var $2341 = $2349;
                    break;
            };
            return $2341;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2383 = self.idx;
                    var $2384 = self.code;
                    var $2385 = self.err;
                    var $2386 = Parser$Reply$error$($2383, $2384, $2385);
                    var $2382 = $2386;
                    break;
                case 'Parser.Reply.value':
                    var $2387 = self.idx;
                    var $2388 = self.code;
                    var $2389 = self.val;
                    var self = Fm$Parser$term$($2387, $2388);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2391 = self.idx;
                            var $2392 = self.code;
                            var $2393 = self.err;
                            var $2394 = Parser$Reply$error$($2391, $2392, $2393);
                            var $2390 = $2394;
                            break;
                        case 'Parser.Reply.value':
                            var $2395 = self.idx;
                            var $2396 = self.code;
                            var $2397 = self.val;
                            var self = Parser$maybe$(Fm$Parser$text(";"), $2395, $2396);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2399 = self.idx;
                                    var $2400 = self.code;
                                    var $2401 = self.err;
                                    var $2402 = Parser$Reply$error$($2399, $2400, $2401);
                                    var $2398 = $2402;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2403 = self.idx;
                                    var $2404 = self.code;
                                    var $2405 = self.val;
                                    var self = Fm$Parser$do$statements$(_monad_name$1)($2403)($2404);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2407 = self.idx;
                                            var $2408 = self.code;
                                            var $2409 = self.err;
                                            var $2410 = Parser$Reply$error$($2407, $2408, $2409);
                                            var $2406 = $2410;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2411 = self.idx;
                                            var $2412 = self.code;
                                            var $2413 = self.val;
                                            var self = Fm$Parser$stop$($2389, $2411, $2412);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2415 = self.idx;
                                                    var $2416 = self.code;
                                                    var $2417 = self.err;
                                                    var $2418 = Parser$Reply$error$($2415, $2416, $2417);
                                                    var $2414 = $2418;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2419 = self.idx;
                                                    var $2420 = self.code;
                                                    var $2421 = self.val;
                                                    var _term$19 = Fm$Term$app$(Fm$Term$ref$("Monad.bind"), Fm$Term$ref$(_monad_name$1));
                                                    var _term$20 = Fm$Term$app$(_term$19, Fm$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Fm$Term$app$(_term$20, Fm$Term$hol$(Bits$e));
                                                    var _term$22 = Fm$Term$app$(_term$21, Fm$Term$hol$(Bits$e));
                                                    var _term$23 = Fm$Term$app$(_term$22, $2397);
                                                    var _term$24 = Fm$Term$app$(_term$23, Fm$Term$lam$("", (_x$24 => {
                                                        var $2423 = $2413;
                                                        return $2423;
                                                    })));
                                                    var $2422 = Parser$Reply$value$($2419, $2420, Fm$Term$ori$($2421, _term$24));
                                                    var $2414 = $2422;
                                                    break;
                                            };
                                            var $2406 = $2414;
                                            break;
                                    };
                                    var $2398 = $2406;
                                    break;
                            };
                            var $2390 = $2398;
                            break;
                    };
                    var $2382 = $2390;
                    break;
            };
            return $2382;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$term$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2425 = self.idx;
                    var $2426 = self.code;
                    var $2427 = self.err;
                    var $2428 = Parser$Reply$error$($2425, $2426, $2427);
                    var $2424 = $2428;
                    break;
                case 'Parser.Reply.value':
                    var $2429 = self.idx;
                    var $2430 = self.code;
                    var $2431 = self.val;
                    var self = Parser$maybe$(Fm$Parser$text(";"), $2429, $2430);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2433 = self.idx;
                            var $2434 = self.code;
                            var $2435 = self.err;
                            var $2436 = Parser$Reply$error$($2433, $2434, $2435);
                            var $2432 = $2436;
                            break;
                        case 'Parser.Reply.value':
                            var $2437 = self.idx;
                            var $2438 = self.code;
                            var $2439 = self.val;
                            var $2440 = Parser$Reply$value$($2437, $2438, $2431);
                            var $2432 = $2440;
                            break;
                    };
                    var $2424 = $2432;
                    break;
            };
            return $2424;
        }), List$nil))))));
        return $2208;
    };
    const Fm$Parser$do$statements = x0 => Fm$Parser$do$statements$(x0);

    function Fm$Parser$do$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("do ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2442 = self.idx;
                var $2443 = self.code;
                var $2444 = self.err;
                var $2445 = Parser$Reply$error$($2442, $2443, $2444);
                var $2441 = $2445;
                break;
            case 'Parser.Reply.value':
                var $2446 = self.idx;
                var $2447 = self.code;
                var $2448 = self.val;
                var self = Fm$Parser$name1$($2446, $2447);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2450 = self.idx;
                        var $2451 = self.code;
                        var $2452 = self.err;
                        var $2453 = Parser$Reply$error$($2450, $2451, $2452);
                        var $2449 = $2453;
                        break;
                    case 'Parser.Reply.value':
                        var $2454 = self.idx;
                        var $2455 = self.code;
                        var $2456 = self.val;
                        var self = Fm$Parser$text$("{", $2454, $2455);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2458 = self.idx;
                                var $2459 = self.code;
                                var $2460 = self.err;
                                var $2461 = Parser$Reply$error$($2458, $2459, $2460);
                                var $2457 = $2461;
                                break;
                            case 'Parser.Reply.value':
                                var $2462 = self.idx;
                                var $2463 = self.code;
                                var $2464 = self.val;
                                var self = Fm$Parser$do$statements$($2456)($2462)($2463);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2466 = self.idx;
                                        var $2467 = self.code;
                                        var $2468 = self.err;
                                        var $2469 = Parser$Reply$error$($2466, $2467, $2468);
                                        var $2465 = $2469;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2470 = self.idx;
                                        var $2471 = self.code;
                                        var $2472 = self.val;
                                        var self = Fm$Parser$text$("}", $2470, $2471);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2474 = self.idx;
                                                var $2475 = self.code;
                                                var $2476 = self.err;
                                                var $2477 = Parser$Reply$error$($2474, $2475, $2476);
                                                var $2473 = $2477;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2478 = self.idx;
                                                var $2479 = self.code;
                                                var $2480 = self.val;
                                                var $2481 = Parser$Reply$value$($2478, $2479, $2472);
                                                var $2473 = $2481;
                                                break;
                                        };
                                        var $2465 = $2473;
                                        break;
                                };
                                var $2457 = $2465;
                                break;
                        };
                        var $2449 = $2457;
                        break;
                };
                var $2441 = $2449;
                break;
        };
        return $2441;
    };
    const Fm$Parser$do = x0 => x1 => Fm$Parser$do$(x0, x1);

    function Fm$Term$nat$(_natx$1) {
        var $2482 = ({
            _: 'Fm.Term.nat',
            'natx': _natx$1
        });
        return $2482;
    };
    const Fm$Term$nat = x0 => Fm$Term$nat$(x0);

    function Fm$Term$unroll_nat$(_natx$1) {
        var self = _natx$1;
        if (self === 0n) {
            var $2484 = Fm$Term$ref$(Fm$Name$read$("Nat.zero"));
            var $2483 = $2484;
        } else {
            var $2485 = (self - 1n);
            var _func$3 = Fm$Term$ref$(Fm$Name$read$("Nat.succ"));
            var _argm$4 = Fm$Term$nat$($2485);
            var $2486 = Fm$Term$app$(_func$3, _argm$4);
            var $2483 = $2486;
        };
        return $2483;
    };
    const Fm$Term$unroll_nat = x0 => Fm$Term$unroll_nat$(x0);
    const U16$to_bits = a0 => (u16_to_bits(a0));

    function Fm$Term$unroll_chr$bits$(_bits$1) {
        var self = _bits$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $2488 = Fm$Term$ref$(Fm$Name$read$("Bits.e"));
                var $2487 = $2488;
                break;
            case 'o':
                var $2489 = self.slice(0, -1);
                var $2490 = Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("Bits.o")), Fm$Term$unroll_chr$bits$($2489));
                var $2487 = $2490;
                break;
            case 'i':
                var $2491 = self.slice(0, -1);
                var $2492 = Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("Bits.i")), Fm$Term$unroll_chr$bits$($2491));
                var $2487 = $2492;
                break;
        };
        return $2487;
    };
    const Fm$Term$unroll_chr$bits = x0 => Fm$Term$unroll_chr$bits$(x0);

    function Fm$Term$unroll_chr$(_chrx$1) {
        var _bits$2 = (u16_to_bits(_chrx$1));
        var _term$3 = Fm$Term$ref$(Fm$Name$read$("Word.from_bits"));
        var _term$4 = Fm$Term$app$(_term$3, Fm$Term$nat$(16n));
        var _term$5 = Fm$Term$app$(_term$4, Fm$Term$unroll_chr$bits$(_bits$2));
        var _term$6 = Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("U16.new")), _term$5);
        var $2493 = _term$6;
        return $2493;
    };
    const Fm$Term$unroll_chr = x0 => Fm$Term$unroll_chr$(x0);

    function Fm$Term$unroll_str$(_strx$1) {
        var self = _strx$1;
        if (self.length === 0) {
            var $2495 = Fm$Term$ref$(Fm$Name$read$("String.nil"));
            var $2494 = $2495;
        } else {
            var $2496 = self.charCodeAt(0);
            var $2497 = self.slice(1);
            var _char$4 = Fm$Term$chr$($2496);
            var _term$5 = Fm$Term$ref$(Fm$Name$read$("String.cons"));
            var _term$6 = Fm$Term$app$(_term$5, _char$4);
            var _term$7 = Fm$Term$app$(_term$6, Fm$Term$str$($2497));
            var $2498 = _term$7;
            var $2494 = $2498;
        };
        return $2494;
    };
    const Fm$Term$unroll_str = x0 => Fm$Term$unroll_str$(x0);

    function Fm$Term$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $2500 = self.name;
                var $2501 = self.indx;
                var $2502 = _term$1;
                var $2499 = $2502;
                break;
            case 'Fm.Term.ref':
                var $2503 = self.name;
                var self = Fm$get$($2503, _defs$2);
                switch (self._) {
                    case 'Maybe.none':
                        var $2505 = Fm$Term$ref$($2503);
                        var $2504 = $2505;
                        break;
                    case 'Maybe.some':
                        var $2506 = self.value;
                        var self = $2506;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $2508 = self.file;
                                var $2509 = self.code;
                                var $2510 = self.name;
                                var $2511 = self.term;
                                var $2512 = self.type;
                                var $2513 = self.stat;
                                var $2514 = Fm$Term$reduce$($2511, _defs$2);
                                var $2507 = $2514;
                                break;
                        };
                        var $2504 = $2507;
                        break;
                };
                var $2499 = $2504;
                break;
            case 'Fm.Term.typ':
                var $2515 = _term$1;
                var $2499 = $2515;
                break;
            case 'Fm.Term.all':
                var $2516 = self.eras;
                var $2517 = self.self;
                var $2518 = self.name;
                var $2519 = self.xtyp;
                var $2520 = self.body;
                var $2521 = _term$1;
                var $2499 = $2521;
                break;
            case 'Fm.Term.lam':
                var $2522 = self.name;
                var $2523 = self.body;
                var $2524 = _term$1;
                var $2499 = $2524;
                break;
            case 'Fm.Term.app':
                var $2525 = self.func;
                var $2526 = self.argm;
                var _func$5 = Fm$Term$reduce$($2525, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $2528 = self.name;
                        var $2529 = self.indx;
                        var $2530 = _term$1;
                        var $2527 = $2530;
                        break;
                    case 'Fm.Term.ref':
                        var $2531 = self.name;
                        var $2532 = _term$1;
                        var $2527 = $2532;
                        break;
                    case 'Fm.Term.typ':
                        var $2533 = _term$1;
                        var $2527 = $2533;
                        break;
                    case 'Fm.Term.all':
                        var $2534 = self.eras;
                        var $2535 = self.self;
                        var $2536 = self.name;
                        var $2537 = self.xtyp;
                        var $2538 = self.body;
                        var $2539 = _term$1;
                        var $2527 = $2539;
                        break;
                    case 'Fm.Term.lam':
                        var $2540 = self.name;
                        var $2541 = self.body;
                        var $2542 = Fm$Term$reduce$($2541($2526), _defs$2);
                        var $2527 = $2542;
                        break;
                    case 'Fm.Term.app':
                        var $2543 = self.func;
                        var $2544 = self.argm;
                        var $2545 = _term$1;
                        var $2527 = $2545;
                        break;
                    case 'Fm.Term.let':
                        var $2546 = self.name;
                        var $2547 = self.expr;
                        var $2548 = self.body;
                        var $2549 = _term$1;
                        var $2527 = $2549;
                        break;
                    case 'Fm.Term.def':
                        var $2550 = self.name;
                        var $2551 = self.expr;
                        var $2552 = self.body;
                        var $2553 = _term$1;
                        var $2527 = $2553;
                        break;
                    case 'Fm.Term.ann':
                        var $2554 = self.done;
                        var $2555 = self.term;
                        var $2556 = self.type;
                        var $2557 = _term$1;
                        var $2527 = $2557;
                        break;
                    case 'Fm.Term.gol':
                        var $2558 = self.name;
                        var $2559 = self.dref;
                        var $2560 = self.verb;
                        var $2561 = _term$1;
                        var $2527 = $2561;
                        break;
                    case 'Fm.Term.hol':
                        var $2562 = self.path;
                        var $2563 = _term$1;
                        var $2527 = $2563;
                        break;
                    case 'Fm.Term.nat':
                        var $2564 = self.natx;
                        var $2565 = _term$1;
                        var $2527 = $2565;
                        break;
                    case 'Fm.Term.chr':
                        var $2566 = self.chrx;
                        var $2567 = _term$1;
                        var $2527 = $2567;
                        break;
                    case 'Fm.Term.str':
                        var $2568 = self.strx;
                        var $2569 = _term$1;
                        var $2527 = $2569;
                        break;
                    case 'Fm.Term.cse':
                        var $2570 = self.path;
                        var $2571 = self.expr;
                        var $2572 = self.name;
                        var $2573 = self.with;
                        var $2574 = self.cses;
                        var $2575 = self.moti;
                        var $2576 = _term$1;
                        var $2527 = $2576;
                        break;
                    case 'Fm.Term.ori':
                        var $2577 = self.orig;
                        var $2578 = self.expr;
                        var $2579 = _term$1;
                        var $2527 = $2579;
                        break;
                };
                var $2499 = $2527;
                break;
            case 'Fm.Term.let':
                var $2580 = self.name;
                var $2581 = self.expr;
                var $2582 = self.body;
                var $2583 = Fm$Term$reduce$($2582($2581), _defs$2);
                var $2499 = $2583;
                break;
            case 'Fm.Term.def':
                var $2584 = self.name;
                var $2585 = self.expr;
                var $2586 = self.body;
                var $2587 = Fm$Term$reduce$($2586($2585), _defs$2);
                var $2499 = $2587;
                break;
            case 'Fm.Term.ann':
                var $2588 = self.done;
                var $2589 = self.term;
                var $2590 = self.type;
                var $2591 = Fm$Term$reduce$($2589, _defs$2);
                var $2499 = $2591;
                break;
            case 'Fm.Term.gol':
                var $2592 = self.name;
                var $2593 = self.dref;
                var $2594 = self.verb;
                var $2595 = _term$1;
                var $2499 = $2595;
                break;
            case 'Fm.Term.hol':
                var $2596 = self.path;
                var $2597 = _term$1;
                var $2499 = $2597;
                break;
            case 'Fm.Term.nat':
                var $2598 = self.natx;
                var $2599 = Fm$Term$reduce$(Fm$Term$unroll_nat$($2598), _defs$2);
                var $2499 = $2599;
                break;
            case 'Fm.Term.chr':
                var $2600 = self.chrx;
                var $2601 = Fm$Term$reduce$(Fm$Term$unroll_chr$($2600), _defs$2);
                var $2499 = $2601;
                break;
            case 'Fm.Term.str':
                var $2602 = self.strx;
                var $2603 = Fm$Term$reduce$(Fm$Term$unroll_str$($2602), _defs$2);
                var $2499 = $2603;
                break;
            case 'Fm.Term.cse':
                var $2604 = self.path;
                var $2605 = self.expr;
                var $2606 = self.name;
                var $2607 = self.with;
                var $2608 = self.cses;
                var $2609 = self.moti;
                var $2610 = _term$1;
                var $2499 = $2610;
                break;
            case 'Fm.Term.ori':
                var $2611 = self.orig;
                var $2612 = self.expr;
                var $2613 = Fm$Term$reduce$($2612, _defs$2);
                var $2499 = $2613;
                break;
        };
        return $2499;
    };
    const Fm$Term$reduce = x0 => x1 => Fm$Term$reduce$(x0, x1);
    const Map$new = ({
        _: 'Map.new'
    });

    function Fm$Def$new$(_file$1, _code$2, _name$3, _term$4, _type$5, _stat$6) {
        var $2614 = ({
            _: 'Fm.Def.new',
            'file': _file$1,
            'code': _code$2,
            'name': _name$3,
            'term': _term$4,
            'type': _type$5,
            'stat': _stat$6
        });
        return $2614;
    };
    const Fm$Def$new = x0 => x1 => x2 => x3 => x4 => x5 => Fm$Def$new$(x0, x1, x2, x3, x4, x5);
    const Fm$Status$init = ({
        _: 'Fm.Status.init'
    });

    function Fm$Parser$case$with$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("with", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2616 = self.idx;
                var $2617 = self.code;
                var $2618 = self.err;
                var $2619 = Parser$Reply$error$($2616, $2617, $2618);
                var $2615 = $2619;
                break;
            case 'Parser.Reply.value':
                var $2620 = self.idx;
                var $2621 = self.code;
                var $2622 = self.val;
                var self = Fm$Parser$name1$($2620, $2621);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2624 = self.idx;
                        var $2625 = self.code;
                        var $2626 = self.err;
                        var $2627 = Parser$Reply$error$($2624, $2625, $2626);
                        var $2623 = $2627;
                        break;
                    case 'Parser.Reply.value':
                        var $2628 = self.idx;
                        var $2629 = self.code;
                        var $2630 = self.val;
                        var self = Fm$Parser$text$(":", $2628, $2629);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2632 = self.idx;
                                var $2633 = self.code;
                                var $2634 = self.err;
                                var $2635 = Parser$Reply$error$($2632, $2633, $2634);
                                var $2631 = $2635;
                                break;
                            case 'Parser.Reply.value':
                                var $2636 = self.idx;
                                var $2637 = self.code;
                                var $2638 = self.val;
                                var self = Fm$Parser$term$($2636, $2637);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2640 = self.idx;
                                        var $2641 = self.code;
                                        var $2642 = self.err;
                                        var $2643 = Parser$Reply$error$($2640, $2641, $2642);
                                        var $2639 = $2643;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2644 = self.idx;
                                        var $2645 = self.code;
                                        var $2646 = self.val;
                                        var self = Fm$Parser$text$("=", $2644, $2645);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2648 = self.idx;
                                                var $2649 = self.code;
                                                var $2650 = self.err;
                                                var $2651 = Parser$Reply$error$($2648, $2649, $2650);
                                                var $2647 = $2651;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2652 = self.idx;
                                                var $2653 = self.code;
                                                var $2654 = self.val;
                                                var self = Fm$Parser$term$($2652, $2653);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2656 = self.idx;
                                                        var $2657 = self.code;
                                                        var $2658 = self.err;
                                                        var $2659 = Parser$Reply$error$($2656, $2657, $2658);
                                                        var $2655 = $2659;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2660 = self.idx;
                                                        var $2661 = self.code;
                                                        var $2662 = self.val;
                                                        var $2663 = Parser$Reply$value$($2660, $2661, Fm$Def$new$("", "", $2630, $2662, $2646, Fm$Status$init));
                                                        var $2655 = $2663;
                                                        break;
                                                };
                                                var $2647 = $2655;
                                                break;
                                        };
                                        var $2639 = $2647;
                                        break;
                                };
                                var $2631 = $2639;
                                break;
                        };
                        var $2623 = $2631;
                        break;
                };
                var $2615 = $2623;
                break;
        };
        return $2615;
    };
    const Fm$Parser$case$with = x0 => x1 => Fm$Parser$case$with$(x0, x1);

    function Fm$Parser$case$case$(_idx$1, _code$2) {
        var self = Fm$Parser$name1$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2665 = self.idx;
                var $2666 = self.code;
                var $2667 = self.err;
                var $2668 = Parser$Reply$error$($2665, $2666, $2667);
                var $2664 = $2668;
                break;
            case 'Parser.Reply.value':
                var $2669 = self.idx;
                var $2670 = self.code;
                var $2671 = self.val;
                var self = Fm$Parser$text$(":", $2669, $2670);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2673 = self.idx;
                        var $2674 = self.code;
                        var $2675 = self.err;
                        var $2676 = Parser$Reply$error$($2673, $2674, $2675);
                        var $2672 = $2676;
                        break;
                    case 'Parser.Reply.value':
                        var $2677 = self.idx;
                        var $2678 = self.code;
                        var $2679 = self.val;
                        var self = Fm$Parser$term$($2677, $2678);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2681 = self.idx;
                                var $2682 = self.code;
                                var $2683 = self.err;
                                var $2684 = Parser$Reply$error$($2681, $2682, $2683);
                                var $2680 = $2684;
                                break;
                            case 'Parser.Reply.value':
                                var $2685 = self.idx;
                                var $2686 = self.code;
                                var $2687 = self.val;
                                var self = Parser$maybe$(Fm$Parser$text(","), $2685, $2686);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2689 = self.idx;
                                        var $2690 = self.code;
                                        var $2691 = self.err;
                                        var $2692 = Parser$Reply$error$($2689, $2690, $2691);
                                        var $2688 = $2692;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2693 = self.idx;
                                        var $2694 = self.code;
                                        var $2695 = self.val;
                                        var $2696 = Parser$Reply$value$($2693, $2694, Pair$new$($2671, $2687));
                                        var $2688 = $2696;
                                        break;
                                };
                                var $2680 = $2688;
                                break;
                        };
                        var $2672 = $2680;
                        break;
                };
                var $2664 = $2672;
                break;
        };
        return $2664;
    };
    const Fm$Parser$case$case = x0 => x1 => Fm$Parser$case$case$(x0, x1);

    function Map$tie$(_val$2, _lft$3, _rgt$4) {
        var $2697 = ({
            _: 'Map.tie',
            'val': _val$2,
            'lft': _lft$3,
            'rgt': _rgt$4
        });
        return $2697;
    };
    const Map$tie = x0 => x1 => x2 => Map$tie$(x0, x1, x2);

    function Map$set$(_bits$2, _val$3, _map$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var self = _map$4;
                switch (self._) {
                    case 'Map.new':
                        var $2700 = Map$tie$(Maybe$some$(_val$3), Map$new, Map$new);
                        var $2699 = $2700;
                        break;
                    case 'Map.tie':
                        var $2701 = self.val;
                        var $2702 = self.lft;
                        var $2703 = self.rgt;
                        var $2704 = Map$tie$(Maybe$some$(_val$3), $2702, $2703);
                        var $2699 = $2704;
                        break;
                };
                var $2698 = $2699;
                break;
            case 'o':
                var $2705 = self.slice(0, -1);
                var self = _map$4;
                switch (self._) {
                    case 'Map.new':
                        var $2707 = Map$tie$(Maybe$none, Map$set$($2705, _val$3, Map$new), Map$new);
                        var $2706 = $2707;
                        break;
                    case 'Map.tie':
                        var $2708 = self.val;
                        var $2709 = self.lft;
                        var $2710 = self.rgt;
                        var $2711 = Map$tie$($2708, Map$set$($2705, _val$3, $2709), $2710);
                        var $2706 = $2711;
                        break;
                };
                var $2698 = $2706;
                break;
            case 'i':
                var $2712 = self.slice(0, -1);
                var self = _map$4;
                switch (self._) {
                    case 'Map.new':
                        var $2714 = Map$tie$(Maybe$none, Map$new, Map$set$($2712, _val$3, Map$new));
                        var $2713 = $2714;
                        break;
                    case 'Map.tie':
                        var $2715 = self.val;
                        var $2716 = self.lft;
                        var $2717 = self.rgt;
                        var $2718 = Map$tie$($2715, $2716, Map$set$($2712, _val$3, $2717));
                        var $2713 = $2718;
                        break;
                };
                var $2698 = $2713;
                break;
        };
        return $2698;
    };
    const Map$set = x0 => x1 => x2 => Map$set$(x0, x1, x2);

    function Map$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.nil':
                var $2720 = Map$new;
                var $2719 = $2720;
                break;
            case 'List.cons':
                var $2721 = self.head;
                var $2722 = self.tail;
                var self = $2721;
                switch (self._) {
                    case 'Pair.new':
                        var $2724 = self.fst;
                        var $2725 = self.snd;
                        var $2726 = Map$set$($2724, $2725, Map$from_list$($2722));
                        var $2723 = $2726;
                        break;
                };
                var $2719 = $2723;
                break;
        };
        return $2719;
    };
    const Map$from_list = x0 => Map$from_list$(x0);

    function Pair$fst$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $2728 = self.fst;
                var $2729 = self.snd;
                var $2730 = $2728;
                var $2727 = $2730;
                break;
        };
        return $2727;
    };
    const Pair$fst = x0 => Pair$fst$(x0);

    function Pair$snd$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $2732 = self.fst;
                var $2733 = self.snd;
                var $2734 = $2733;
                var $2731 = $2734;
                break;
        };
        return $2731;
    };
    const Pair$snd = x0 => Pair$snd$(x0);

    function Fm$Term$cse$(_path$1, _expr$2, _name$3, _with$4, _cses$5, _moti$6) {
        var $2735 = ({
            _: 'Fm.Term.cse',
            'path': _path$1,
            'expr': _expr$2,
            'name': _name$3,
            'with': _with$4,
            'cses': _cses$5,
            'moti': _moti$6
        });
        return $2735;
    };
    const Fm$Term$cse = x0 => x1 => x2 => x3 => x4 => x5 => Fm$Term$cse$(x0, x1, x2, x3, x4, x5);

    function Fm$Parser$case$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2737 = self.idx;
                var $2738 = self.code;
                var $2739 = self.err;
                var $2740 = Parser$Reply$error$($2737, $2738, $2739);
                var $2736 = $2740;
                break;
            case 'Parser.Reply.value':
                var $2741 = self.idx;
                var $2742 = self.code;
                var $2743 = self.val;
                var self = Fm$Parser$text$("case ", $2741, $2742);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2745 = self.idx;
                        var $2746 = self.code;
                        var $2747 = self.err;
                        var $2748 = Parser$Reply$error$($2745, $2746, $2747);
                        var $2744 = $2748;
                        break;
                    case 'Parser.Reply.value':
                        var $2749 = self.idx;
                        var $2750 = self.code;
                        var $2751 = self.val;
                        var self = Fm$Parser$spaces($2749)($2750);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2753 = self.idx;
                                var $2754 = self.code;
                                var $2755 = self.err;
                                var $2756 = Parser$Reply$error$($2753, $2754, $2755);
                                var $2752 = $2756;
                                break;
                            case 'Parser.Reply.value':
                                var $2757 = self.idx;
                                var $2758 = self.code;
                                var $2759 = self.val;
                                var self = Fm$Parser$term$($2757, $2758);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2761 = self.idx;
                                        var $2762 = self.code;
                                        var $2763 = self.err;
                                        var $2764 = Parser$Reply$error$($2761, $2762, $2763);
                                        var $2760 = $2764;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2765 = self.idx;
                                        var $2766 = self.code;
                                        var $2767 = self.val;
                                        var self = Parser$maybe$((_idx$15 => _code$16 => {
                                            var self = Fm$Parser$text$("as", _idx$15, _code$16);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2770 = self.idx;
                                                    var $2771 = self.code;
                                                    var $2772 = self.err;
                                                    var $2773 = Parser$Reply$error$($2770, $2771, $2772);
                                                    var $2769 = $2773;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2774 = self.idx;
                                                    var $2775 = self.code;
                                                    var $2776 = self.val;
                                                    var $2777 = Fm$Parser$name1$($2774, $2775);
                                                    var $2769 = $2777;
                                                    break;
                                            };
                                            return $2769;
                                        }), $2765, $2766);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2778 = self.idx;
                                                var $2779 = self.code;
                                                var $2780 = self.err;
                                                var $2781 = Parser$Reply$error$($2778, $2779, $2780);
                                                var $2768 = $2781;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2782 = self.idx;
                                                var $2783 = self.code;
                                                var $2784 = self.val;
                                                var self = $2784;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var self = Fm$Term$reduce$($2767, Map$new);
                                                        switch (self._) {
                                                            case 'Fm.Term.var':
                                                                var $2787 = self.name;
                                                                var $2788 = self.indx;
                                                                var $2789 = $2787;
                                                                var $2786 = $2789;
                                                                break;
                                                            case 'Fm.Term.ref':
                                                                var $2790 = self.name;
                                                                var $2791 = $2790;
                                                                var $2786 = $2791;
                                                                break;
                                                            case 'Fm.Term.typ':
                                                                var $2792 = Fm$Name$read$("self");
                                                                var $2786 = $2792;
                                                                break;
                                                            case 'Fm.Term.all':
                                                                var $2793 = self.eras;
                                                                var $2794 = self.self;
                                                                var $2795 = self.name;
                                                                var $2796 = self.xtyp;
                                                                var $2797 = self.body;
                                                                var $2798 = Fm$Name$read$("self");
                                                                var $2786 = $2798;
                                                                break;
                                                            case 'Fm.Term.lam':
                                                                var $2799 = self.name;
                                                                var $2800 = self.body;
                                                                var $2801 = Fm$Name$read$("self");
                                                                var $2786 = $2801;
                                                                break;
                                                            case 'Fm.Term.app':
                                                                var $2802 = self.func;
                                                                var $2803 = self.argm;
                                                                var $2804 = Fm$Name$read$("self");
                                                                var $2786 = $2804;
                                                                break;
                                                            case 'Fm.Term.let':
                                                                var $2805 = self.name;
                                                                var $2806 = self.expr;
                                                                var $2807 = self.body;
                                                                var $2808 = Fm$Name$read$("self");
                                                                var $2786 = $2808;
                                                                break;
                                                            case 'Fm.Term.def':
                                                                var $2809 = self.name;
                                                                var $2810 = self.expr;
                                                                var $2811 = self.body;
                                                                var $2812 = Fm$Name$read$("self");
                                                                var $2786 = $2812;
                                                                break;
                                                            case 'Fm.Term.ann':
                                                                var $2813 = self.done;
                                                                var $2814 = self.term;
                                                                var $2815 = self.type;
                                                                var $2816 = Fm$Name$read$("self");
                                                                var $2786 = $2816;
                                                                break;
                                                            case 'Fm.Term.gol':
                                                                var $2817 = self.name;
                                                                var $2818 = self.dref;
                                                                var $2819 = self.verb;
                                                                var $2820 = Fm$Name$read$("self");
                                                                var $2786 = $2820;
                                                                break;
                                                            case 'Fm.Term.hol':
                                                                var $2821 = self.path;
                                                                var $2822 = Fm$Name$read$("self");
                                                                var $2786 = $2822;
                                                                break;
                                                            case 'Fm.Term.nat':
                                                                var $2823 = self.natx;
                                                                var $2824 = Fm$Name$read$("self");
                                                                var $2786 = $2824;
                                                                break;
                                                            case 'Fm.Term.chr':
                                                                var $2825 = self.chrx;
                                                                var $2826 = Fm$Name$read$("self");
                                                                var $2786 = $2826;
                                                                break;
                                                            case 'Fm.Term.str':
                                                                var $2827 = self.strx;
                                                                var $2828 = Fm$Name$read$("self");
                                                                var $2786 = $2828;
                                                                break;
                                                            case 'Fm.Term.cse':
                                                                var $2829 = self.path;
                                                                var $2830 = self.expr;
                                                                var $2831 = self.name;
                                                                var $2832 = self.with;
                                                                var $2833 = self.cses;
                                                                var $2834 = self.moti;
                                                                var $2835 = Fm$Name$read$("self");
                                                                var $2786 = $2835;
                                                                break;
                                                            case 'Fm.Term.ori':
                                                                var $2836 = self.orig;
                                                                var $2837 = self.expr;
                                                                var $2838 = Fm$Name$read$("self");
                                                                var $2786 = $2838;
                                                                break;
                                                        };
                                                        var _name$18 = $2786;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $2839 = self.value;
                                                        var $2840 = $2839;
                                                        var _name$18 = $2840;
                                                        break;
                                                };
                                                var self = Parser$many$(Fm$Parser$case$with)($2782)($2783);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2841 = self.idx;
                                                        var $2842 = self.code;
                                                        var $2843 = self.err;
                                                        var $2844 = Parser$Reply$error$($2841, $2842, $2843);
                                                        var $2785 = $2844;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2845 = self.idx;
                                                        var $2846 = self.code;
                                                        var $2847 = self.val;
                                                        var self = Fm$Parser$text$("{", $2845, $2846);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2849 = self.idx;
                                                                var $2850 = self.code;
                                                                var $2851 = self.err;
                                                                var $2852 = Parser$Reply$error$($2849, $2850, $2851);
                                                                var $2848 = $2852;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2853 = self.idx;
                                                                var $2854 = self.code;
                                                                var $2855 = self.val;
                                                                var self = Parser$until$(Fm$Parser$text("}"), Fm$Parser$case$case)($2853)($2854);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2857 = self.idx;
                                                                        var $2858 = self.code;
                                                                        var $2859 = self.err;
                                                                        var $2860 = Parser$Reply$error$($2857, $2858, $2859);
                                                                        var $2856 = $2860;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2861 = self.idx;
                                                                        var $2862 = self.code;
                                                                        var $2863 = self.val;
                                                                        var _cses$28 = Map$from_list$(List$mapped$($2863, (_x$28 => {
                                                                            var $2865 = Pair$new$((fm_name_to_bits(Pair$fst$(_x$28))), Pair$snd$(_x$28));
                                                                            return $2865;
                                                                        })));
                                                                        var self = Parser$first_of$(List$cons$((_idx$29 => _code$30 => {
                                                                            var self = Fm$Parser$text$(":", _idx$29, _code$30);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $2867 = self.idx;
                                                                                    var $2868 = self.code;
                                                                                    var $2869 = self.err;
                                                                                    var $2870 = Parser$Reply$error$($2867, $2868, $2869);
                                                                                    var $2866 = $2870;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $2871 = self.idx;
                                                                                    var $2872 = self.code;
                                                                                    var $2873 = self.val;
                                                                                    var self = Fm$Parser$term$($2871, $2872);
                                                                                    switch (self._) {
                                                                                        case 'Parser.Reply.error':
                                                                                            var $2875 = self.idx;
                                                                                            var $2876 = self.code;
                                                                                            var $2877 = self.err;
                                                                                            var $2878 = Parser$Reply$error$($2875, $2876, $2877);
                                                                                            var $2874 = $2878;
                                                                                            break;
                                                                                        case 'Parser.Reply.value':
                                                                                            var $2879 = self.idx;
                                                                                            var $2880 = self.code;
                                                                                            var $2881 = self.val;
                                                                                            var $2882 = Parser$Reply$value$($2879, $2880, Maybe$some$($2881));
                                                                                            var $2874 = $2882;
                                                                                            break;
                                                                                    };
                                                                                    var $2866 = $2874;
                                                                                    break;
                                                                            };
                                                                            return $2866;
                                                                        }), List$cons$((_idx$29 => _code$30 => {
                                                                            var self = Fm$Parser$text$("!", _idx$29, _code$30);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $2884 = self.idx;
                                                                                    var $2885 = self.code;
                                                                                    var $2886 = self.err;
                                                                                    var $2887 = Parser$Reply$error$($2884, $2885, $2886);
                                                                                    var $2883 = $2887;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $2888 = self.idx;
                                                                                    var $2889 = self.code;
                                                                                    var $2890 = self.val;
                                                                                    var $2891 = Parser$Reply$value$($2888, $2889, Maybe$none);
                                                                                    var $2883 = $2891;
                                                                                    break;
                                                                            };
                                                                            return $2883;
                                                                        }), List$cons$((_idx$29 => _code$30 => {
                                                                            var $2892 = Parser$Reply$value$(_idx$29, _code$30, Maybe$some$(Fm$Term$hol$(Bits$e)));
                                                                            return $2892;
                                                                        }), List$nil))))($2861)($2862);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2893 = self.idx;
                                                                                var $2894 = self.code;
                                                                                var $2895 = self.err;
                                                                                var $2896 = Parser$Reply$error$($2893, $2894, $2895);
                                                                                var $2864 = $2896;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2897 = self.idx;
                                                                                var $2898 = self.code;
                                                                                var $2899 = self.val;
                                                                                var self = Fm$Parser$stop$($2743, $2897, $2898);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2901 = self.idx;
                                                                                        var $2902 = self.code;
                                                                                        var $2903 = self.err;
                                                                                        var $2904 = Parser$Reply$error$($2901, $2902, $2903);
                                                                                        var $2900 = $2904;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2905 = self.idx;
                                                                                        var $2906 = self.code;
                                                                                        var $2907 = self.val;
                                                                                        var $2908 = Parser$Reply$value$($2905, $2906, Fm$Term$ori$($2907, Fm$Term$cse$(Bits$e, $2767, _name$18, $2847, _cses$28, $2899)));
                                                                                        var $2900 = $2908;
                                                                                        break;
                                                                                };
                                                                                var $2864 = $2900;
                                                                                break;
                                                                        };
                                                                        var $2856 = $2864;
                                                                        break;
                                                                };
                                                                var $2848 = $2856;
                                                                break;
                                                        };
                                                        var $2785 = $2848;
                                                        break;
                                                };
                                                var $2768 = $2785;
                                                break;
                                        };
                                        var $2760 = $2768;
                                        break;
                                };
                                var $2752 = $2760;
                                break;
                        };
                        var $2744 = $2752;
                        break;
                };
                var $2736 = $2744;
                break;
        };
        return $2736;
    };
    const Fm$Parser$case = x0 => x1 => Fm$Parser$case$(x0, x1);

    function Fm$set$(_name$2, _val$3, _map$4) {
        var $2909 = Map$set$((fm_name_to_bits(_name$2)), _val$3, _map$4);
        return $2909;
    };
    const Fm$set = x0 => x1 => x2 => Fm$set$(x0, x1, x2);

    function Fm$Parser$open$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2911 = self.idx;
                var $2912 = self.code;
                var $2913 = self.err;
                var $2914 = Parser$Reply$error$($2911, $2912, $2913);
                var $2910 = $2914;
                break;
            case 'Parser.Reply.value':
                var $2915 = self.idx;
                var $2916 = self.code;
                var $2917 = self.val;
                var self = Fm$Parser$text$("open ", $2915, $2916);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2919 = self.idx;
                        var $2920 = self.code;
                        var $2921 = self.err;
                        var $2922 = Parser$Reply$error$($2919, $2920, $2921);
                        var $2918 = $2922;
                        break;
                    case 'Parser.Reply.value':
                        var $2923 = self.idx;
                        var $2924 = self.code;
                        var $2925 = self.val;
                        var self = Fm$Parser$spaces($2923)($2924);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2927 = self.idx;
                                var $2928 = self.code;
                                var $2929 = self.err;
                                var $2930 = Parser$Reply$error$($2927, $2928, $2929);
                                var $2926 = $2930;
                                break;
                            case 'Parser.Reply.value':
                                var $2931 = self.idx;
                                var $2932 = self.code;
                                var $2933 = self.val;
                                var self = Fm$Parser$term$($2931, $2932);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2935 = self.idx;
                                        var $2936 = self.code;
                                        var $2937 = self.err;
                                        var $2938 = Parser$Reply$error$($2935, $2936, $2937);
                                        var $2934 = $2938;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2939 = self.idx;
                                        var $2940 = self.code;
                                        var $2941 = self.val;
                                        var self = Parser$maybe$((_idx$15 => _code$16 => {
                                            var self = Fm$Parser$text$("as", _idx$15, _code$16);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2944 = self.idx;
                                                    var $2945 = self.code;
                                                    var $2946 = self.err;
                                                    var $2947 = Parser$Reply$error$($2944, $2945, $2946);
                                                    var $2943 = $2947;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2948 = self.idx;
                                                    var $2949 = self.code;
                                                    var $2950 = self.val;
                                                    var $2951 = Fm$Parser$name1$($2948, $2949);
                                                    var $2943 = $2951;
                                                    break;
                                            };
                                            return $2943;
                                        }), $2939, $2940);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2952 = self.idx;
                                                var $2953 = self.code;
                                                var $2954 = self.err;
                                                var $2955 = Parser$Reply$error$($2952, $2953, $2954);
                                                var $2942 = $2955;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2956 = self.idx;
                                                var $2957 = self.code;
                                                var $2958 = self.val;
                                                var self = Parser$maybe$(Fm$Parser$text(";"), $2956, $2957);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2960 = self.idx;
                                                        var $2961 = self.code;
                                                        var $2962 = self.err;
                                                        var $2963 = Parser$Reply$error$($2960, $2961, $2962);
                                                        var $2959 = $2963;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2964 = self.idx;
                                                        var $2965 = self.code;
                                                        var $2966 = self.val;
                                                        var self = $2958;
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var self = Fm$Term$reduce$($2941, Map$new);
                                                                switch (self._) {
                                                                    case 'Fm.Term.var':
                                                                        var $2969 = self.name;
                                                                        var $2970 = self.indx;
                                                                        var $2971 = $2969;
                                                                        var $2968 = $2971;
                                                                        break;
                                                                    case 'Fm.Term.ref':
                                                                        var $2972 = self.name;
                                                                        var $2973 = $2972;
                                                                        var $2968 = $2973;
                                                                        break;
                                                                    case 'Fm.Term.typ':
                                                                        var $2974 = Fm$Name$read$("self");
                                                                        var $2968 = $2974;
                                                                        break;
                                                                    case 'Fm.Term.all':
                                                                        var $2975 = self.eras;
                                                                        var $2976 = self.self;
                                                                        var $2977 = self.name;
                                                                        var $2978 = self.xtyp;
                                                                        var $2979 = self.body;
                                                                        var $2980 = Fm$Name$read$("self");
                                                                        var $2968 = $2980;
                                                                        break;
                                                                    case 'Fm.Term.lam':
                                                                        var $2981 = self.name;
                                                                        var $2982 = self.body;
                                                                        var $2983 = Fm$Name$read$("self");
                                                                        var $2968 = $2983;
                                                                        break;
                                                                    case 'Fm.Term.app':
                                                                        var $2984 = self.func;
                                                                        var $2985 = self.argm;
                                                                        var $2986 = Fm$Name$read$("self");
                                                                        var $2968 = $2986;
                                                                        break;
                                                                    case 'Fm.Term.let':
                                                                        var $2987 = self.name;
                                                                        var $2988 = self.expr;
                                                                        var $2989 = self.body;
                                                                        var $2990 = Fm$Name$read$("self");
                                                                        var $2968 = $2990;
                                                                        break;
                                                                    case 'Fm.Term.def':
                                                                        var $2991 = self.name;
                                                                        var $2992 = self.expr;
                                                                        var $2993 = self.body;
                                                                        var $2994 = Fm$Name$read$("self");
                                                                        var $2968 = $2994;
                                                                        break;
                                                                    case 'Fm.Term.ann':
                                                                        var $2995 = self.done;
                                                                        var $2996 = self.term;
                                                                        var $2997 = self.type;
                                                                        var $2998 = Fm$Name$read$("self");
                                                                        var $2968 = $2998;
                                                                        break;
                                                                    case 'Fm.Term.gol':
                                                                        var $2999 = self.name;
                                                                        var $3000 = self.dref;
                                                                        var $3001 = self.verb;
                                                                        var $3002 = Fm$Name$read$("self");
                                                                        var $2968 = $3002;
                                                                        break;
                                                                    case 'Fm.Term.hol':
                                                                        var $3003 = self.path;
                                                                        var $3004 = Fm$Name$read$("self");
                                                                        var $2968 = $3004;
                                                                        break;
                                                                    case 'Fm.Term.nat':
                                                                        var $3005 = self.natx;
                                                                        var $3006 = Fm$Name$read$("self");
                                                                        var $2968 = $3006;
                                                                        break;
                                                                    case 'Fm.Term.chr':
                                                                        var $3007 = self.chrx;
                                                                        var $3008 = Fm$Name$read$("self");
                                                                        var $2968 = $3008;
                                                                        break;
                                                                    case 'Fm.Term.str':
                                                                        var $3009 = self.strx;
                                                                        var $3010 = Fm$Name$read$("self");
                                                                        var $2968 = $3010;
                                                                        break;
                                                                    case 'Fm.Term.cse':
                                                                        var $3011 = self.path;
                                                                        var $3012 = self.expr;
                                                                        var $3013 = self.name;
                                                                        var $3014 = self.with;
                                                                        var $3015 = self.cses;
                                                                        var $3016 = self.moti;
                                                                        var $3017 = Fm$Name$read$("self");
                                                                        var $2968 = $3017;
                                                                        break;
                                                                    case 'Fm.Term.ori':
                                                                        var $3018 = self.orig;
                                                                        var $3019 = self.expr;
                                                                        var $3020 = Fm$Name$read$("self");
                                                                        var $2968 = $3020;
                                                                        break;
                                                                };
                                                                var _name$21 = $2968;
                                                                break;
                                                            case 'Maybe.some':
                                                                var $3021 = self.value;
                                                                var $3022 = $3021;
                                                                var _name$21 = $3022;
                                                                break;
                                                        };
                                                        var _wyth$22 = List$nil;
                                                        var self = Fm$Parser$term$($2964, $2965);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3023 = self.idx;
                                                                var $3024 = self.code;
                                                                var $3025 = self.err;
                                                                var $3026 = Parser$Reply$error$($3023, $3024, $3025);
                                                                var $2967 = $3026;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3027 = self.idx;
                                                                var $3028 = self.code;
                                                                var $3029 = self.val;
                                                                var _cses$26 = Fm$set$("_", $3029, Map$new);
                                                                var _moti$27 = Maybe$some$(Fm$Term$hol$(Bits$e));
                                                                var self = Fm$Parser$stop$($2917, $3027, $3028);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3031 = self.idx;
                                                                        var $3032 = self.code;
                                                                        var $3033 = self.err;
                                                                        var $3034 = Parser$Reply$error$($3031, $3032, $3033);
                                                                        var $3030 = $3034;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3035 = self.idx;
                                                                        var $3036 = self.code;
                                                                        var $3037 = self.val;
                                                                        var $3038 = Parser$Reply$value$($3035, $3036, Fm$Term$ori$($3037, Fm$Term$cse$(Bits$e, $2941, _name$21, _wyth$22, _cses$26, _moti$27)));
                                                                        var $3030 = $3038;
                                                                        break;
                                                                };
                                                                var $2967 = $3030;
                                                                break;
                                                        };
                                                        var $2959 = $2967;
                                                        break;
                                                };
                                                var $2942 = $2959;
                                                break;
                                        };
                                        var $2934 = $2942;
                                        break;
                                };
                                var $2926 = $2934;
                                break;
                        };
                        var $2918 = $2926;
                        break;
                };
                var $2910 = $2918;
                break;
        };
        return $2910;
    };
    const Fm$Parser$open = x0 => x1 => Fm$Parser$open$(x0, x1);

    function Parser$digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $3040 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $3039 = $3040;
        } else {
            var $3041 = self.charCodeAt(0);
            var $3042 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($3041 === 48);
            if (self) {
                var $3044 = Parser$Reply$value$(_sidx$5, $3042, 0n);
                var $3043 = $3044;
            } else {
                var self = ($3041 === 49);
                if (self) {
                    var $3046 = Parser$Reply$value$(_sidx$5, $3042, 1n);
                    var $3045 = $3046;
                } else {
                    var self = ($3041 === 50);
                    if (self) {
                        var $3048 = Parser$Reply$value$(_sidx$5, $3042, 2n);
                        var $3047 = $3048;
                    } else {
                        var self = ($3041 === 51);
                        if (self) {
                            var $3050 = Parser$Reply$value$(_sidx$5, $3042, 3n);
                            var $3049 = $3050;
                        } else {
                            var self = ($3041 === 52);
                            if (self) {
                                var $3052 = Parser$Reply$value$(_sidx$5, $3042, 4n);
                                var $3051 = $3052;
                            } else {
                                var self = ($3041 === 53);
                                if (self) {
                                    var $3054 = Parser$Reply$value$(_sidx$5, $3042, 5n);
                                    var $3053 = $3054;
                                } else {
                                    var self = ($3041 === 54);
                                    if (self) {
                                        var $3056 = Parser$Reply$value$(_sidx$5, $3042, 6n);
                                        var $3055 = $3056;
                                    } else {
                                        var self = ($3041 === 55);
                                        if (self) {
                                            var $3058 = Parser$Reply$value$(_sidx$5, $3042, 7n);
                                            var $3057 = $3058;
                                        } else {
                                            var self = ($3041 === 56);
                                            if (self) {
                                                var $3060 = Parser$Reply$value$(_sidx$5, $3042, 8n);
                                                var $3059 = $3060;
                                            } else {
                                                var self = ($3041 === 57);
                                                if (self) {
                                                    var $3062 = Parser$Reply$value$(_sidx$5, $3042, 9n);
                                                    var $3061 = $3062;
                                                } else {
                                                    var $3063 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                    var $3061 = $3063;
                                                };
                                                var $3059 = $3061;
                                            };
                                            var $3057 = $3059;
                                        };
                                        var $3055 = $3057;
                                    };
                                    var $3053 = $3055;
                                };
                                var $3051 = $3053;
                            };
                            var $3049 = $3051;
                        };
                        var $3047 = $3049;
                    };
                    var $3045 = $3047;
                };
                var $3043 = $3045;
            };
            var $3039 = $3043;
        };
        return $3039;
    };
    const Parser$digit = x0 => x1 => Parser$digit$(x0, x1);
    const Nat$add = a0 => a1 => (a0 + a1);
    const Nat$mul = a0 => a1 => (a0 * a1);

    function Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4) {
        var Nat$from_base$go$ = (_b$1, _ds$2, _p$3, _res$4) => ({
            ctr: 'TCO',
            arg: [_b$1, _ds$2, _p$3, _res$4]
        });
        var Nat$from_base$go = _b$1 => _ds$2 => _p$3 => _res$4 => Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4);
        var arg = [_b$1, _ds$2, _p$3, _res$4];
        while (true) {
            let [_b$1, _ds$2, _p$3, _res$4] = arg;
            var R = (() => {
                var self = _ds$2;
                switch (self._) {
                    case 'List.nil':
                        var $3064 = _res$4;
                        return $3064;
                    case 'List.cons':
                        var $3065 = self.head;
                        var $3066 = self.tail;
                        var $3067 = Nat$from_base$go$(_b$1, $3066, (_b$1 * _p$3), (($3065 * _p$3) + _res$4));
                        return $3067;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$from_base$go = x0 => x1 => x2 => x3 => Nat$from_base$go$(x0, x1, x2, x3);

    function List$reverse$go$(_xs$2, _res$3) {
        var List$reverse$go$ = (_xs$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_xs$2, _res$3]
        });
        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);
        var arg = [_xs$2, _res$3];
        while (true) {
            let [_xs$2, _res$3] = arg;
            var R = (() => {
                var self = _xs$2;
                switch (self._) {
                    case 'List.nil':
                        var $3068 = _res$3;
                        return $3068;
                    case 'List.cons':
                        var $3069 = self.head;
                        var $3070 = self.tail;
                        var $3071 = List$reverse$go$($3070, List$cons$($3069, _res$3));
                        return $3071;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);

    function List$reverse$(_xs$2) {
        var $3072 = List$reverse$go$(_xs$2, List$nil);
        return $3072;
    };
    const List$reverse = x0 => List$reverse$(x0);

    function Nat$from_base$(_base$1, _ds$2) {
        var $3073 = Nat$from_base$go$(_base$1, List$reverse$(_ds$2), 1n, 0n);
        return $3073;
    };
    const Nat$from_base = x0 => x1 => Nat$from_base$(x0, x1);

    function Parser$nat$(_idx$1, _code$2) {
        var self = Parser$many1$(Parser$digit, _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3075 = self.idx;
                var $3076 = self.code;
                var $3077 = self.err;
                var $3078 = Parser$Reply$error$($3075, $3076, $3077);
                var $3074 = $3078;
                break;
            case 'Parser.Reply.value':
                var $3079 = self.idx;
                var $3080 = self.code;
                var $3081 = self.val;
                var $3082 = Parser$Reply$value$($3079, $3080, Nat$from_base$(10n, $3081));
                var $3074 = $3082;
                break;
        };
        return $3074;
    };
    const Parser$nat = x0 => x1 => Parser$nat$(x0, x1);

    function Bits$tail$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $3084 = Bits$e;
                var $3083 = $3084;
                break;
            case 'o':
                var $3085 = self.slice(0, -1);
                var $3086 = $3085;
                var $3083 = $3086;
                break;
            case 'i':
                var $3087 = self.slice(0, -1);
                var $3088 = $3087;
                var $3083 = $3088;
                break;
        };
        return $3083;
    };
    const Bits$tail = x0 => Bits$tail$(x0);

    function Bits$inc$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $3090 = (Bits$e + '1');
                var $3089 = $3090;
                break;
            case 'o':
                var $3091 = self.slice(0, -1);
                var $3092 = ($3091 + '1');
                var $3089 = $3092;
                break;
            case 'i':
                var $3093 = self.slice(0, -1);
                var $3094 = (Bits$inc$($3093) + '0');
                var $3089 = $3094;
                break;
        };
        return $3089;
    };
    const Bits$inc = x0 => Bits$inc$(x0);
    const Nat$to_bits = a0 => (nat_to_bits(a0));

    function Maybe$to_bool$(_m$2) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $3096 = Bool$false;
                var $3095 = $3096;
                break;
            case 'Maybe.some':
                var $3097 = self.value;
                var $3098 = Bool$true;
                var $3095 = $3098;
                break;
        };
        return $3095;
    };
    const Maybe$to_bool = x0 => Maybe$to_bool$(x0);

    function Fm$Term$gol$(_name$1, _dref$2, _verb$3) {
        var $3099 = ({
            _: 'Fm.Term.gol',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3
        });
        return $3099;
    };
    const Fm$Term$gol = x0 => x1 => x2 => Fm$Term$gol$(x0, x1, x2);

    function Fm$Parser$goal$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3101 = self.idx;
                var $3102 = self.code;
                var $3103 = self.err;
                var $3104 = Parser$Reply$error$($3101, $3102, $3103);
                var $3100 = $3104;
                break;
            case 'Parser.Reply.value':
                var $3105 = self.idx;
                var $3106 = self.code;
                var $3107 = self.val;
                var self = Fm$Parser$text$("?", $3105, $3106);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3109 = self.idx;
                        var $3110 = self.code;
                        var $3111 = self.err;
                        var $3112 = Parser$Reply$error$($3109, $3110, $3111);
                        var $3108 = $3112;
                        break;
                    case 'Parser.Reply.value':
                        var $3113 = self.idx;
                        var $3114 = self.code;
                        var $3115 = self.val;
                        var self = Fm$Parser$name$($3113, $3114);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3117 = self.idx;
                                var $3118 = self.code;
                                var $3119 = self.err;
                                var $3120 = Parser$Reply$error$($3117, $3118, $3119);
                                var $3116 = $3120;
                                break;
                            case 'Parser.Reply.value':
                                var $3121 = self.idx;
                                var $3122 = self.code;
                                var $3123 = self.val;
                                var self = Parser$many$((_idx$12 => _code$13 => {
                                    var self = Fm$Parser$text$("-", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3126 = self.idx;
                                            var $3127 = self.code;
                                            var $3128 = self.err;
                                            var $3129 = Parser$Reply$error$($3126, $3127, $3128);
                                            var $3125 = $3129;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3130 = self.idx;
                                            var $3131 = self.code;
                                            var $3132 = self.val;
                                            var self = Parser$nat$($3130, $3131);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3134 = self.idx;
                                                    var $3135 = self.code;
                                                    var $3136 = self.err;
                                                    var $3137 = Parser$Reply$error$($3134, $3135, $3136);
                                                    var $3133 = $3137;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3138 = self.idx;
                                                    var $3139 = self.code;
                                                    var $3140 = self.val;
                                                    var _bits$20 = Bits$reverse$(Bits$tail$(Bits$reverse$((nat_to_bits($3140)))));
                                                    var $3141 = Parser$Reply$value$($3138, $3139, _bits$20);
                                                    var $3133 = $3141;
                                                    break;
                                            };
                                            var $3125 = $3133;
                                            break;
                                    };
                                    return $3125;
                                }))($3121)($3122);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3142 = self.idx;
                                        var $3143 = self.code;
                                        var $3144 = self.err;
                                        var $3145 = Parser$Reply$error$($3142, $3143, $3144);
                                        var $3124 = $3145;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3146 = self.idx;
                                        var $3147 = self.code;
                                        var $3148 = self.val;
                                        var self = Parser$maybe$(Parser$text("-"), $3146, $3147);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3150 = self.idx;
                                                var $3151 = self.code;
                                                var $3152 = self.err;
                                                var $3153 = Parser$Reply$error$($3150, $3151, $3152);
                                                var self = $3153;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3154 = self.idx;
                                                var $3155 = self.code;
                                                var $3156 = self.val;
                                                var $3157 = Parser$Reply$value$($3154, $3155, Maybe$to_bool$($3156));
                                                var self = $3157;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3158 = self.idx;
                                                var $3159 = self.code;
                                                var $3160 = self.err;
                                                var $3161 = Parser$Reply$error$($3158, $3159, $3160);
                                                var $3149 = $3161;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3162 = self.idx;
                                                var $3163 = self.code;
                                                var $3164 = self.val;
                                                var self = Fm$Parser$stop$($3107, $3162, $3163);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3166 = self.idx;
                                                        var $3167 = self.code;
                                                        var $3168 = self.err;
                                                        var $3169 = Parser$Reply$error$($3166, $3167, $3168);
                                                        var $3165 = $3169;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3170 = self.idx;
                                                        var $3171 = self.code;
                                                        var $3172 = self.val;
                                                        var $3173 = Parser$Reply$value$($3170, $3171, Fm$Term$ori$($3172, Fm$Term$gol$($3123, $3148, $3164)));
                                                        var $3165 = $3173;
                                                        break;
                                                };
                                                var $3149 = $3165;
                                                break;
                                        };
                                        var $3124 = $3149;
                                        break;
                                };
                                var $3116 = $3124;
                                break;
                        };
                        var $3108 = $3116;
                        break;
                };
                var $3100 = $3108;
                break;
        };
        return $3100;
    };
    const Fm$Parser$goal = x0 => x1 => Fm$Parser$goal$(x0, x1);

    function Fm$Parser$hole$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3175 = self.idx;
                var $3176 = self.code;
                var $3177 = self.err;
                var $3178 = Parser$Reply$error$($3175, $3176, $3177);
                var $3174 = $3178;
                break;
            case 'Parser.Reply.value':
                var $3179 = self.idx;
                var $3180 = self.code;
                var $3181 = self.val;
                var self = Fm$Parser$text$("_", $3179, $3180);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3183 = self.idx;
                        var $3184 = self.code;
                        var $3185 = self.err;
                        var $3186 = Parser$Reply$error$($3183, $3184, $3185);
                        var $3182 = $3186;
                        break;
                    case 'Parser.Reply.value':
                        var $3187 = self.idx;
                        var $3188 = self.code;
                        var $3189 = self.val;
                        var self = Fm$Parser$stop$($3181, $3187, $3188);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3191 = self.idx;
                                var $3192 = self.code;
                                var $3193 = self.err;
                                var $3194 = Parser$Reply$error$($3191, $3192, $3193);
                                var $3190 = $3194;
                                break;
                            case 'Parser.Reply.value':
                                var $3195 = self.idx;
                                var $3196 = self.code;
                                var $3197 = self.val;
                                var $3198 = Parser$Reply$value$($3195, $3196, Fm$Term$ori$($3197, Fm$Term$hol$(Bits$e)));
                                var $3190 = $3198;
                                break;
                        };
                        var $3182 = $3190;
                        break;
                };
                var $3174 = $3182;
                break;
        };
        return $3174;
    };
    const Fm$Parser$hole = x0 => x1 => Fm$Parser$hole$(x0, x1);

    function Fm$Parser$u8$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3200 = self.idx;
                var $3201 = self.code;
                var $3202 = self.err;
                var $3203 = Parser$Reply$error$($3200, $3201, $3202);
                var $3199 = $3203;
                break;
            case 'Parser.Reply.value':
                var $3204 = self.idx;
                var $3205 = self.code;
                var $3206 = self.val;
                var self = Fm$Parser$spaces($3204)($3205);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3208 = self.idx;
                        var $3209 = self.code;
                        var $3210 = self.err;
                        var $3211 = Parser$Reply$error$($3208, $3209, $3210);
                        var $3207 = $3211;
                        break;
                    case 'Parser.Reply.value':
                        var $3212 = self.idx;
                        var $3213 = self.code;
                        var $3214 = self.val;
                        var self = Parser$nat$($3212, $3213);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3216 = self.idx;
                                var $3217 = self.code;
                                var $3218 = self.err;
                                var $3219 = Parser$Reply$error$($3216, $3217, $3218);
                                var $3215 = $3219;
                                break;
                            case 'Parser.Reply.value':
                                var $3220 = self.idx;
                                var $3221 = self.code;
                                var $3222 = self.val;
                                var self = Parser$text$("b", $3220, $3221);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3224 = self.idx;
                                        var $3225 = self.code;
                                        var $3226 = self.err;
                                        var $3227 = Parser$Reply$error$($3224, $3225, $3226);
                                        var $3223 = $3227;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3228 = self.idx;
                                        var $3229 = self.code;
                                        var $3230 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u8");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3222));
                                        var self = Fm$Parser$stop$($3206, $3228, $3229);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3232 = self.idx;
                                                var $3233 = self.code;
                                                var $3234 = self.err;
                                                var $3235 = Parser$Reply$error$($3232, $3233, $3234);
                                                var $3231 = $3235;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3236 = self.idx;
                                                var $3237 = self.code;
                                                var $3238 = self.val;
                                                var $3239 = Parser$Reply$value$($3236, $3237, Fm$Term$ori$($3238, _term$16));
                                                var $3231 = $3239;
                                                break;
                                        };
                                        var $3223 = $3231;
                                        break;
                                };
                                var $3215 = $3223;
                                break;
                        };
                        var $3207 = $3215;
                        break;
                };
                var $3199 = $3207;
                break;
        };
        return $3199;
    };
    const Fm$Parser$u8 = x0 => x1 => Fm$Parser$u8$(x0, x1);

    function Fm$Parser$u16$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3241 = self.idx;
                var $3242 = self.code;
                var $3243 = self.err;
                var $3244 = Parser$Reply$error$($3241, $3242, $3243);
                var $3240 = $3244;
                break;
            case 'Parser.Reply.value':
                var $3245 = self.idx;
                var $3246 = self.code;
                var $3247 = self.val;
                var self = Fm$Parser$spaces($3245)($3246);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3249 = self.idx;
                        var $3250 = self.code;
                        var $3251 = self.err;
                        var $3252 = Parser$Reply$error$($3249, $3250, $3251);
                        var $3248 = $3252;
                        break;
                    case 'Parser.Reply.value':
                        var $3253 = self.idx;
                        var $3254 = self.code;
                        var $3255 = self.val;
                        var self = Parser$nat$($3253, $3254);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3257 = self.idx;
                                var $3258 = self.code;
                                var $3259 = self.err;
                                var $3260 = Parser$Reply$error$($3257, $3258, $3259);
                                var $3256 = $3260;
                                break;
                            case 'Parser.Reply.value':
                                var $3261 = self.idx;
                                var $3262 = self.code;
                                var $3263 = self.val;
                                var self = Parser$text$("s", $3261, $3262);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3265 = self.idx;
                                        var $3266 = self.code;
                                        var $3267 = self.err;
                                        var $3268 = Parser$Reply$error$($3265, $3266, $3267);
                                        var $3264 = $3268;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3269 = self.idx;
                                        var $3270 = self.code;
                                        var $3271 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u16");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3263));
                                        var self = Fm$Parser$stop$($3247, $3269, $3270);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3273 = self.idx;
                                                var $3274 = self.code;
                                                var $3275 = self.err;
                                                var $3276 = Parser$Reply$error$($3273, $3274, $3275);
                                                var $3272 = $3276;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3277 = self.idx;
                                                var $3278 = self.code;
                                                var $3279 = self.val;
                                                var $3280 = Parser$Reply$value$($3277, $3278, Fm$Term$ori$($3279, _term$16));
                                                var $3272 = $3280;
                                                break;
                                        };
                                        var $3264 = $3272;
                                        break;
                                };
                                var $3256 = $3264;
                                break;
                        };
                        var $3248 = $3256;
                        break;
                };
                var $3240 = $3248;
                break;
        };
        return $3240;
    };
    const Fm$Parser$u16 = x0 => x1 => Fm$Parser$u16$(x0, x1);

    function Fm$Parser$u32$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3282 = self.idx;
                var $3283 = self.code;
                var $3284 = self.err;
                var $3285 = Parser$Reply$error$($3282, $3283, $3284);
                var $3281 = $3285;
                break;
            case 'Parser.Reply.value':
                var $3286 = self.idx;
                var $3287 = self.code;
                var $3288 = self.val;
                var self = Fm$Parser$spaces($3286)($3287);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3290 = self.idx;
                        var $3291 = self.code;
                        var $3292 = self.err;
                        var $3293 = Parser$Reply$error$($3290, $3291, $3292);
                        var $3289 = $3293;
                        break;
                    case 'Parser.Reply.value':
                        var $3294 = self.idx;
                        var $3295 = self.code;
                        var $3296 = self.val;
                        var self = Parser$nat$($3294, $3295);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3298 = self.idx;
                                var $3299 = self.code;
                                var $3300 = self.err;
                                var $3301 = Parser$Reply$error$($3298, $3299, $3300);
                                var $3297 = $3301;
                                break;
                            case 'Parser.Reply.value':
                                var $3302 = self.idx;
                                var $3303 = self.code;
                                var $3304 = self.val;
                                var self = Parser$text$("u", $3302, $3303);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3306 = self.idx;
                                        var $3307 = self.code;
                                        var $3308 = self.err;
                                        var $3309 = Parser$Reply$error$($3306, $3307, $3308);
                                        var $3305 = $3309;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3310 = self.idx;
                                        var $3311 = self.code;
                                        var $3312 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u32");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3304));
                                        var self = Fm$Parser$stop$($3288, $3310, $3311);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3314 = self.idx;
                                                var $3315 = self.code;
                                                var $3316 = self.err;
                                                var $3317 = Parser$Reply$error$($3314, $3315, $3316);
                                                var $3313 = $3317;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3318 = self.idx;
                                                var $3319 = self.code;
                                                var $3320 = self.val;
                                                var $3321 = Parser$Reply$value$($3318, $3319, Fm$Term$ori$($3320, _term$16));
                                                var $3313 = $3321;
                                                break;
                                        };
                                        var $3305 = $3313;
                                        break;
                                };
                                var $3297 = $3305;
                                break;
                        };
                        var $3289 = $3297;
                        break;
                };
                var $3281 = $3289;
                break;
        };
        return $3281;
    };
    const Fm$Parser$u32 = x0 => x1 => Fm$Parser$u32$(x0, x1);

    function Fm$Parser$u64$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3323 = self.idx;
                var $3324 = self.code;
                var $3325 = self.err;
                var $3326 = Parser$Reply$error$($3323, $3324, $3325);
                var $3322 = $3326;
                break;
            case 'Parser.Reply.value':
                var $3327 = self.idx;
                var $3328 = self.code;
                var $3329 = self.val;
                var self = Fm$Parser$spaces($3327)($3328);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3331 = self.idx;
                        var $3332 = self.code;
                        var $3333 = self.err;
                        var $3334 = Parser$Reply$error$($3331, $3332, $3333);
                        var $3330 = $3334;
                        break;
                    case 'Parser.Reply.value':
                        var $3335 = self.idx;
                        var $3336 = self.code;
                        var $3337 = self.val;
                        var self = Parser$nat$($3335, $3336);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3339 = self.idx;
                                var $3340 = self.code;
                                var $3341 = self.err;
                                var $3342 = Parser$Reply$error$($3339, $3340, $3341);
                                var $3338 = $3342;
                                break;
                            case 'Parser.Reply.value':
                                var $3343 = self.idx;
                                var $3344 = self.code;
                                var $3345 = self.val;
                                var self = Parser$text$("l", $3343, $3344);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3347 = self.idx;
                                        var $3348 = self.code;
                                        var $3349 = self.err;
                                        var $3350 = Parser$Reply$error$($3347, $3348, $3349);
                                        var $3346 = $3350;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3351 = self.idx;
                                        var $3352 = self.code;
                                        var $3353 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u64");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3345));
                                        var self = Fm$Parser$stop$($3329, $3351, $3352);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3355 = self.idx;
                                                var $3356 = self.code;
                                                var $3357 = self.err;
                                                var $3358 = Parser$Reply$error$($3355, $3356, $3357);
                                                var $3354 = $3358;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3359 = self.idx;
                                                var $3360 = self.code;
                                                var $3361 = self.val;
                                                var $3362 = Parser$Reply$value$($3359, $3360, Fm$Term$ori$($3361, _term$16));
                                                var $3354 = $3362;
                                                break;
                                        };
                                        var $3346 = $3354;
                                        break;
                                };
                                var $3338 = $3346;
                                break;
                        };
                        var $3330 = $3338;
                        break;
                };
                var $3322 = $3330;
                break;
        };
        return $3322;
    };
    const Fm$Parser$u64 = x0 => x1 => Fm$Parser$u64$(x0, x1);

    function Fm$Parser$nat$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3364 = self.idx;
                var $3365 = self.code;
                var $3366 = self.err;
                var $3367 = Parser$Reply$error$($3364, $3365, $3366);
                var $3363 = $3367;
                break;
            case 'Parser.Reply.value':
                var $3368 = self.idx;
                var $3369 = self.code;
                var $3370 = self.val;
                var self = Fm$Parser$spaces($3368)($3369);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3372 = self.idx;
                        var $3373 = self.code;
                        var $3374 = self.err;
                        var $3375 = Parser$Reply$error$($3372, $3373, $3374);
                        var $3371 = $3375;
                        break;
                    case 'Parser.Reply.value':
                        var $3376 = self.idx;
                        var $3377 = self.code;
                        var $3378 = self.val;
                        var self = Parser$nat$($3376, $3377);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3380 = self.idx;
                                var $3381 = self.code;
                                var $3382 = self.err;
                                var $3383 = Parser$Reply$error$($3380, $3381, $3382);
                                var $3379 = $3383;
                                break;
                            case 'Parser.Reply.value':
                                var $3384 = self.idx;
                                var $3385 = self.code;
                                var $3386 = self.val;
                                var self = Fm$Parser$stop$($3370, $3384, $3385);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3388 = self.idx;
                                        var $3389 = self.code;
                                        var $3390 = self.err;
                                        var $3391 = Parser$Reply$error$($3388, $3389, $3390);
                                        var $3387 = $3391;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3392 = self.idx;
                                        var $3393 = self.code;
                                        var $3394 = self.val;
                                        var $3395 = Parser$Reply$value$($3392, $3393, Fm$Term$ori$($3394, Fm$Term$nat$($3386)));
                                        var $3387 = $3395;
                                        break;
                                };
                                var $3379 = $3387;
                                break;
                        };
                        var $3371 = $3379;
                        break;
                };
                var $3363 = $3371;
                break;
        };
        return $3363;
    };
    const Fm$Parser$nat = x0 => x1 => Fm$Parser$nat$(x0, x1);
    const String$eql = a0 => a1 => (a0 === a1);

    function Parser$fail$(_error$2, _idx$3, _code$4) {
        var $3396 = Parser$Reply$error$(_idx$3, _code$4, _error$2);
        return $3396;
    };
    const Parser$fail = x0 => x1 => x2 => Parser$fail$(x0, x1, x2);

    function Fm$Parser$reference$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3398 = self.idx;
                var $3399 = self.code;
                var $3400 = self.err;
                var $3401 = Parser$Reply$error$($3398, $3399, $3400);
                var $3397 = $3401;
                break;
            case 'Parser.Reply.value':
                var $3402 = self.idx;
                var $3403 = self.code;
                var $3404 = self.val;
                var self = Fm$Parser$name1$($3402, $3403);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3406 = self.idx;
                        var $3407 = self.code;
                        var $3408 = self.err;
                        var $3409 = Parser$Reply$error$($3406, $3407, $3408);
                        var $3405 = $3409;
                        break;
                    case 'Parser.Reply.value':
                        var $3410 = self.idx;
                        var $3411 = self.code;
                        var $3412 = self.val;
                        var self = ($3412 === "case");
                        if (self) {
                            var $3414 = Parser$fail("Reserved keyword.");
                            var $3413 = $3414;
                        } else {
                            var self = ($3412 === "do");
                            if (self) {
                                var $3416 = Parser$fail("Reserved keyword.");
                                var $3415 = $3416;
                            } else {
                                var self = ($3412 === "if");
                                if (self) {
                                    var $3418 = Parser$fail("Reserved keyword.");
                                    var $3417 = $3418;
                                } else {
                                    var self = ($3412 === "with");
                                    if (self) {
                                        var $3420 = Parser$fail("Reserved keyword.");
                                        var $3419 = $3420;
                                    } else {
                                        var self = ($3412 === "let");
                                        if (self) {
                                            var $3422 = Parser$fail("Reserved keyword.");
                                            var $3421 = $3422;
                                        } else {
                                            var self = ($3412 === "def");
                                            if (self) {
                                                var $3424 = Parser$fail("Reserved keyword.");
                                                var $3423 = $3424;
                                            } else {
                                                var self = ($3412 === "true");
                                                if (self) {
                                                    var $3426 = (_idx$9 => _code$10 => {
                                                        var $3427 = Parser$Reply$value$(_idx$9, _code$10, Fm$Term$ref$("Bool.true"));
                                                        return $3427;
                                                    });
                                                    var $3425 = $3426;
                                                } else {
                                                    var self = ($3412 === "false");
                                                    if (self) {
                                                        var $3429 = (_idx$9 => _code$10 => {
                                                            var $3430 = Parser$Reply$value$(_idx$9, _code$10, Fm$Term$ref$("Bool.false"));
                                                            return $3430;
                                                        });
                                                        var $3428 = $3429;
                                                    } else {
                                                        var self = ($3412 === "unit");
                                                        if (self) {
                                                            var $3432 = (_idx$9 => _code$10 => {
                                                                var $3433 = Parser$Reply$value$(_idx$9, _code$10, Fm$Term$ref$("Unit.new"));
                                                                return $3433;
                                                            });
                                                            var $3431 = $3432;
                                                        } else {
                                                            var self = ($3412 === "none");
                                                            if (self) {
                                                                var _term$9 = Fm$Term$ref$("Maybe.none");
                                                                var _term$10 = Fm$Term$app$(_term$9, Fm$Term$hol$(Bits$e));
                                                                var $3435 = (_idx$11 => _code$12 => {
                                                                    var $3436 = Parser$Reply$value$(_idx$11, _code$12, _term$10);
                                                                    return $3436;
                                                                });
                                                                var $3434 = $3435;
                                                            } else {
                                                                var self = ($3412 === "refl");
                                                                if (self) {
                                                                    var _term$9 = Fm$Term$ref$("Equal.refl");
                                                                    var _term$10 = Fm$Term$app$(_term$9, Fm$Term$hol$(Bits$e));
                                                                    var _term$11 = Fm$Term$app$(_term$10, Fm$Term$hol$(Bits$e));
                                                                    var $3438 = (_idx$12 => _code$13 => {
                                                                        var $3439 = Parser$Reply$value$(_idx$12, _code$13, _term$11);
                                                                        return $3439;
                                                                    });
                                                                    var $3437 = $3438;
                                                                } else {
                                                                    var $3440 = (_idx$9 => _code$10 => {
                                                                        var self = Fm$Parser$stop$($3404, _idx$9, _code$10);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $3442 = self.idx;
                                                                                var $3443 = self.code;
                                                                                var $3444 = self.err;
                                                                                var $3445 = Parser$Reply$error$($3442, $3443, $3444);
                                                                                var $3441 = $3445;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $3446 = self.idx;
                                                                                var $3447 = self.code;
                                                                                var $3448 = self.val;
                                                                                var $3449 = Parser$Reply$value$($3446, $3447, Fm$Term$ori$($3448, Fm$Term$ref$($3412)));
                                                                                var $3441 = $3449;
                                                                                break;
                                                                        };
                                                                        return $3441;
                                                                    });
                                                                    var $3437 = $3440;
                                                                };
                                                                var $3434 = $3437;
                                                            };
                                                            var $3431 = $3434;
                                                        };
                                                        var $3428 = $3431;
                                                    };
                                                    var $3425 = $3428;
                                                };
                                                var $3423 = $3425;
                                            };
                                            var $3421 = $3423;
                                        };
                                        var $3419 = $3421;
                                    };
                                    var $3417 = $3419;
                                };
                                var $3415 = $3417;
                            };
                            var $3413 = $3415;
                        };
                        var $3413 = $3413($3410)($3411);
                        var $3405 = $3413;
                        break;
                };
                var $3397 = $3405;
                break;
        };
        return $3397;
    };
    const Fm$Parser$reference = x0 => x1 => Fm$Parser$reference$(x0, x1);
    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));

    function Fm$Parser$application$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$text$("(", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3451 = self.idx;
                var $3452 = self.code;
                var $3453 = self.err;
                var $3454 = Parser$Reply$error$($3451, $3452, $3453);
                var $3450 = $3454;
                break;
            case 'Parser.Reply.value':
                var $3455 = self.idx;
                var $3456 = self.code;
                var $3457 = self.val;
                var self = Parser$until1$(Fm$Parser$text(")"), Fm$Parser$item(Fm$Parser$term), $3455, $3456);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3459 = self.idx;
                        var $3460 = self.code;
                        var $3461 = self.err;
                        var $3462 = Parser$Reply$error$($3459, $3460, $3461);
                        var $3458 = $3462;
                        break;
                    case 'Parser.Reply.value':
                        var $3463 = self.idx;
                        var $3464 = self.code;
                        var $3465 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3463, $3464);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3467 = self.idx;
                                var $3468 = self.code;
                                var $3469 = self.err;
                                var $3470 = Parser$Reply$error$($3467, $3468, $3469);
                                var $3466 = $3470;
                                break;
                            case 'Parser.Reply.value':
                                var $3471 = self.idx;
                                var $3472 = self.code;
                                var $3473 = self.val;
                                var _expr$14 = (() => {
                                    var $3476 = _func$2;
                                    var $3477 = $3465;
                                    let _f$15 = $3476;
                                    let _x$14;
                                    while ($3477._ === 'List.cons') {
                                        _x$14 = $3477.head;
                                        var $3476 = Fm$Term$app$(_f$15, _x$14);
                                        _f$15 = $3476;
                                        $3477 = $3477.tail;
                                    }
                                    return _f$15;
                                })();
                                var $3474 = Parser$Reply$value$($3471, $3472, Fm$Term$ori$($3473, _expr$14));
                                var $3466 = $3474;
                                break;
                        };
                        var $3458 = $3466;
                        break;
                };
                var $3450 = $3458;
                break;
        };
        return $3450;
    };
    const Fm$Parser$application = x0 => x1 => x2 => x3 => Fm$Parser$application$(x0, x1, x2, x3);
    const Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{a}"), List$nil))));

    function Parser$spaces_text$(_text$1, _idx$2, _code$3) {
        var self = Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3479 = self.idx;
                var $3480 = self.code;
                var $3481 = self.err;
                var $3482 = Parser$Reply$error$($3479, $3480, $3481);
                var $3478 = $3482;
                break;
            case 'Parser.Reply.value':
                var $3483 = self.idx;
                var $3484 = self.code;
                var $3485 = self.val;
                var $3486 = Parser$text$(_text$1, $3483, $3484);
                var $3478 = $3486;
                break;
        };
        return $3478;
    };
    const Parser$spaces_text = x0 => x1 => x2 => Parser$spaces_text$(x0, x1, x2);

    function Fm$Parser$application$erased$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$get_index$(_idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3488 = self.idx;
                var $3489 = self.code;
                var $3490 = self.err;
                var $3491 = Parser$Reply$error$($3488, $3489, $3490);
                var $3487 = $3491;
                break;
            case 'Parser.Reply.value':
                var $3492 = self.idx;
                var $3493 = self.code;
                var $3494 = self.val;
                var self = Parser$text$("<", $3492, $3493);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3496 = self.idx;
                        var $3497 = self.code;
                        var $3498 = self.err;
                        var $3499 = Parser$Reply$error$($3496, $3497, $3498);
                        var $3495 = $3499;
                        break;
                    case 'Parser.Reply.value':
                        var $3500 = self.idx;
                        var $3501 = self.code;
                        var $3502 = self.val;
                        var self = Parser$until1$(Parser$spaces_text(">"), Fm$Parser$item(Fm$Parser$term), $3500, $3501);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3504 = self.idx;
                                var $3505 = self.code;
                                var $3506 = self.err;
                                var $3507 = Parser$Reply$error$($3504, $3505, $3506);
                                var $3503 = $3507;
                                break;
                            case 'Parser.Reply.value':
                                var $3508 = self.idx;
                                var $3509 = self.code;
                                var $3510 = self.val;
                                var self = Fm$Parser$stop$($3494, $3508, $3509);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3512 = self.idx;
                                        var $3513 = self.code;
                                        var $3514 = self.err;
                                        var $3515 = Parser$Reply$error$($3512, $3513, $3514);
                                        var $3511 = $3515;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3516 = self.idx;
                                        var $3517 = self.code;
                                        var $3518 = self.val;
                                        var _expr$17 = (() => {
                                            var $3521 = _func$2;
                                            var $3522 = $3510;
                                            let _f$18 = $3521;
                                            let _x$17;
                                            while ($3522._ === 'List.cons') {
                                                _x$17 = $3522.head;
                                                var $3521 = Fm$Term$app$(_f$18, _x$17);
                                                _f$18 = $3521;
                                                $3522 = $3522.tail;
                                            }
                                            return _f$18;
                                        })();
                                        var $3519 = Parser$Reply$value$($3516, $3517, Fm$Term$ori$($3518, _expr$17));
                                        var $3511 = $3519;
                                        break;
                                };
                                var $3503 = $3511;
                                break;
                        };
                        var $3495 = $3503;
                        break;
                };
                var $3487 = $3495;
                break;
        };
        return $3487;
    };
    const Fm$Parser$application$erased = x0 => x1 => x2 => x3 => Fm$Parser$application$erased$(x0, x1, x2, x3);

    function Fm$Parser$arrow$(_init$1, _xtyp$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("->", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3524 = self.idx;
                var $3525 = self.code;
                var $3526 = self.err;
                var $3527 = Parser$Reply$error$($3524, $3525, $3526);
                var $3523 = $3527;
                break;
            case 'Parser.Reply.value':
                var $3528 = self.idx;
                var $3529 = self.code;
                var $3530 = self.val;
                var self = Fm$Parser$term$($3528, $3529);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3532 = self.idx;
                        var $3533 = self.code;
                        var $3534 = self.err;
                        var $3535 = Parser$Reply$error$($3532, $3533, $3534);
                        var $3531 = $3535;
                        break;
                    case 'Parser.Reply.value':
                        var $3536 = self.idx;
                        var $3537 = self.code;
                        var $3538 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3536, $3537);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3540 = self.idx;
                                var $3541 = self.code;
                                var $3542 = self.err;
                                var $3543 = Parser$Reply$error$($3540, $3541, $3542);
                                var $3539 = $3543;
                                break;
                            case 'Parser.Reply.value':
                                var $3544 = self.idx;
                                var $3545 = self.code;
                                var $3546 = self.val;
                                var $3547 = Parser$Reply$value$($3544, $3545, Fm$Term$ori$($3546, Fm$Term$all$(Bool$false, "", "", _xtyp$2, (_s$14 => _x$15 => {
                                    var $3548 = $3538;
                                    return $3548;
                                }))));
                                var $3539 = $3547;
                                break;
                        };
                        var $3531 = $3539;
                        break;
                };
                var $3523 = $3531;
                break;
        };
        return $3523;
    };
    const Fm$Parser$arrow = x0 => x1 => x2 => x3 => Fm$Parser$arrow$(x0, x1, x2, x3);

    function Fm$Parser$op$(_sym$1, _ref$2, _init$3, _val0$4, _idx$5, _code$6) {
        var self = Fm$Parser$text$(_sym$1, _idx$5, _code$6);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3550 = self.idx;
                var $3551 = self.code;
                var $3552 = self.err;
                var $3553 = Parser$Reply$error$($3550, $3551, $3552);
                var $3549 = $3553;
                break;
            case 'Parser.Reply.value':
                var $3554 = self.idx;
                var $3555 = self.code;
                var $3556 = self.val;
                var self = Fm$Parser$term$($3554, $3555);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3558 = self.idx;
                        var $3559 = self.code;
                        var $3560 = self.err;
                        var $3561 = Parser$Reply$error$($3558, $3559, $3560);
                        var $3557 = $3561;
                        break;
                    case 'Parser.Reply.value':
                        var $3562 = self.idx;
                        var $3563 = self.code;
                        var $3564 = self.val;
                        var self = Fm$Parser$stop$(_init$3, $3562, $3563);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3566 = self.idx;
                                var $3567 = self.code;
                                var $3568 = self.err;
                                var $3569 = Parser$Reply$error$($3566, $3567, $3568);
                                var $3565 = $3569;
                                break;
                            case 'Parser.Reply.value':
                                var $3570 = self.idx;
                                var $3571 = self.code;
                                var $3572 = self.val;
                                var _term$16 = Fm$Term$ref$(_ref$2);
                                var _term$17 = Fm$Term$app$(_term$16, _val0$4);
                                var _term$18 = Fm$Term$app$(_term$17, $3564);
                                var $3573 = Parser$Reply$value$($3570, $3571, Fm$Term$ori$($3572, _term$18));
                                var $3565 = $3573;
                                break;
                        };
                        var $3557 = $3565;
                        break;
                };
                var $3549 = $3557;
                break;
        };
        return $3549;
    };
    const Fm$Parser$op = x0 => x1 => x2 => x3 => x4 => x5 => Fm$Parser$op$(x0, x1, x2, x3, x4, x5);
    const Fm$Parser$add = Fm$Parser$op("+")("Nat.add");
    const Fm$Parser$sub = Fm$Parser$op("+")("Nat.add");
    const Fm$Parser$mul = Fm$Parser$op("*")("Nat.mul");
    const Fm$Parser$div = Fm$Parser$op("/")("Nat.div");
    const Fm$Parser$mod = Fm$Parser$op("%")("Nat.mod");

    function Fm$Parser$cons$(_init$1, _head$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("&", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3575 = self.idx;
                var $3576 = self.code;
                var $3577 = self.err;
                var $3578 = Parser$Reply$error$($3575, $3576, $3577);
                var $3574 = $3578;
                break;
            case 'Parser.Reply.value':
                var $3579 = self.idx;
                var $3580 = self.code;
                var $3581 = self.val;
                var self = Fm$Parser$term$($3579, $3580);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3583 = self.idx;
                        var $3584 = self.code;
                        var $3585 = self.err;
                        var $3586 = Parser$Reply$error$($3583, $3584, $3585);
                        var $3582 = $3586;
                        break;
                    case 'Parser.Reply.value':
                        var $3587 = self.idx;
                        var $3588 = self.code;
                        var $3589 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3587, $3588);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3591 = self.idx;
                                var $3592 = self.code;
                                var $3593 = self.err;
                                var $3594 = Parser$Reply$error$($3591, $3592, $3593);
                                var $3590 = $3594;
                                break;
                            case 'Parser.Reply.value':
                                var $3595 = self.idx;
                                var $3596 = self.code;
                                var $3597 = self.val;
                                var _term$14 = Fm$Term$ref$("List.cons");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _head$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3589);
                                var self = Fm$Parser$stop$(_init$1, $3595, $3596);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3599 = self.idx;
                                        var $3600 = self.code;
                                        var $3601 = self.err;
                                        var $3602 = Parser$Reply$error$($3599, $3600, $3601);
                                        var $3598 = $3602;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3603 = self.idx;
                                        var $3604 = self.code;
                                        var $3605 = self.val;
                                        var $3606 = Parser$Reply$value$($3603, $3604, Fm$Term$ori$($3605, _term$17));
                                        var $3598 = $3606;
                                        break;
                                };
                                var $3590 = $3598;
                                break;
                        };
                        var $3582 = $3590;
                        break;
                };
                var $3574 = $3582;
                break;
        };
        return $3574;
    };
    const Fm$Parser$cons = x0 => x1 => x2 => x3 => Fm$Parser$cons$(x0, x1, x2, x3);

    function Fm$Parser$concat$(_init$1, _lst0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("++", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3608 = self.idx;
                var $3609 = self.code;
                var $3610 = self.err;
                var $3611 = Parser$Reply$error$($3608, $3609, $3610);
                var $3607 = $3611;
                break;
            case 'Parser.Reply.value':
                var $3612 = self.idx;
                var $3613 = self.code;
                var $3614 = self.val;
                var self = Fm$Parser$term$($3612, $3613);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3616 = self.idx;
                        var $3617 = self.code;
                        var $3618 = self.err;
                        var $3619 = Parser$Reply$error$($3616, $3617, $3618);
                        var $3615 = $3619;
                        break;
                    case 'Parser.Reply.value':
                        var $3620 = self.idx;
                        var $3621 = self.code;
                        var $3622 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3620, $3621);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3624 = self.idx;
                                var $3625 = self.code;
                                var $3626 = self.err;
                                var $3627 = Parser$Reply$error$($3624, $3625, $3626);
                                var $3623 = $3627;
                                break;
                            case 'Parser.Reply.value':
                                var $3628 = self.idx;
                                var $3629 = self.code;
                                var $3630 = self.val;
                                var _term$14 = Fm$Term$ref$("List.concat");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _lst0$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3622);
                                var self = Fm$Parser$stop$(_init$1, $3628, $3629);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3632 = self.idx;
                                        var $3633 = self.code;
                                        var $3634 = self.err;
                                        var $3635 = Parser$Reply$error$($3632, $3633, $3634);
                                        var $3631 = $3635;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3636 = self.idx;
                                        var $3637 = self.code;
                                        var $3638 = self.val;
                                        var $3639 = Parser$Reply$value$($3636, $3637, Fm$Term$ori$($3638, _term$17));
                                        var $3631 = $3639;
                                        break;
                                };
                                var $3623 = $3631;
                                break;
                        };
                        var $3615 = $3623;
                        break;
                };
                var $3607 = $3615;
                break;
        };
        return $3607;
    };
    const Fm$Parser$concat = x0 => x1 => x2 => x3 => Fm$Parser$concat$(x0, x1, x2, x3);

    function Fm$Parser$string_concat$(_init$1, _str0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("|", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3641 = self.idx;
                var $3642 = self.code;
                var $3643 = self.err;
                var $3644 = Parser$Reply$error$($3641, $3642, $3643);
                var $3640 = $3644;
                break;
            case 'Parser.Reply.value':
                var $3645 = self.idx;
                var $3646 = self.code;
                var $3647 = self.val;
                var self = Fm$Parser$term$($3645, $3646);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3649 = self.idx;
                        var $3650 = self.code;
                        var $3651 = self.err;
                        var $3652 = Parser$Reply$error$($3649, $3650, $3651);
                        var $3648 = $3652;
                        break;
                    case 'Parser.Reply.value':
                        var $3653 = self.idx;
                        var $3654 = self.code;
                        var $3655 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3653, $3654);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3657 = self.idx;
                                var $3658 = self.code;
                                var $3659 = self.err;
                                var $3660 = Parser$Reply$error$($3657, $3658, $3659);
                                var $3656 = $3660;
                                break;
                            case 'Parser.Reply.value':
                                var $3661 = self.idx;
                                var $3662 = self.code;
                                var $3663 = self.val;
                                var _term$14 = Fm$Term$ref$("String.concat");
                                var _term$15 = Fm$Term$app$(_term$14, _str0$2);
                                var _term$16 = Fm$Term$app$(_term$15, $3655);
                                var self = Fm$Parser$stop$(_init$1, $3661, $3662);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3665 = self.idx;
                                        var $3666 = self.code;
                                        var $3667 = self.err;
                                        var $3668 = Parser$Reply$error$($3665, $3666, $3667);
                                        var $3664 = $3668;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3669 = self.idx;
                                        var $3670 = self.code;
                                        var $3671 = self.val;
                                        var $3672 = Parser$Reply$value$($3669, $3670, Fm$Term$ori$($3671, _term$16));
                                        var $3664 = $3672;
                                        break;
                                };
                                var $3656 = $3664;
                                break;
                        };
                        var $3648 = $3656;
                        break;
                };
                var $3640 = $3648;
                break;
        };
        return $3640;
    };
    const Fm$Parser$string_concat = x0 => x1 => x2 => x3 => Fm$Parser$string_concat$(x0, x1, x2, x3);

    function Fm$Parser$sigma$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("~", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3674 = self.idx;
                var $3675 = self.code;
                var $3676 = self.err;
                var $3677 = Parser$Reply$error$($3674, $3675, $3676);
                var $3673 = $3677;
                break;
            case 'Parser.Reply.value':
                var $3678 = self.idx;
                var $3679 = self.code;
                var $3680 = self.val;
                var self = Fm$Parser$term$($3678, $3679);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3682 = self.idx;
                        var $3683 = self.code;
                        var $3684 = self.err;
                        var $3685 = Parser$Reply$error$($3682, $3683, $3684);
                        var $3681 = $3685;
                        break;
                    case 'Parser.Reply.value':
                        var $3686 = self.idx;
                        var $3687 = self.code;
                        var $3688 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3686, $3687);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3690 = self.idx;
                                var $3691 = self.code;
                                var $3692 = self.err;
                                var $3693 = Parser$Reply$error$($3690, $3691, $3692);
                                var $3689 = $3693;
                                break;
                            case 'Parser.Reply.value':
                                var $3694 = self.idx;
                                var $3695 = self.code;
                                var $3696 = self.val;
                                var _term$14 = Fm$Term$ref$("Sigma.new");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, Fm$Term$hol$(Bits$e));
                                var _term$17 = Fm$Term$app$(_term$16, _val0$2);
                                var _term$18 = Fm$Term$app$(_term$17, $3688);
                                var $3697 = Parser$Reply$value$($3694, $3695, Fm$Term$ori$($3696, _term$18));
                                var $3689 = $3697;
                                break;
                        };
                        var $3681 = $3689;
                        break;
                };
                var $3673 = $3681;
                break;
        };
        return $3673;
    };
    const Fm$Parser$sigma = x0 => x1 => x2 => x3 => Fm$Parser$sigma$(x0, x1, x2, x3);

    function Fm$Parser$equality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("==", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3699 = self.idx;
                var $3700 = self.code;
                var $3701 = self.err;
                var $3702 = Parser$Reply$error$($3699, $3700, $3701);
                var $3698 = $3702;
                break;
            case 'Parser.Reply.value':
                var $3703 = self.idx;
                var $3704 = self.code;
                var $3705 = self.val;
                var self = Fm$Parser$term$($3703, $3704);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3707 = self.idx;
                        var $3708 = self.code;
                        var $3709 = self.err;
                        var $3710 = Parser$Reply$error$($3707, $3708, $3709);
                        var $3706 = $3710;
                        break;
                    case 'Parser.Reply.value':
                        var $3711 = self.idx;
                        var $3712 = self.code;
                        var $3713 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3711, $3712);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3715 = self.idx;
                                var $3716 = self.code;
                                var $3717 = self.err;
                                var $3718 = Parser$Reply$error$($3715, $3716, $3717);
                                var $3714 = $3718;
                                break;
                            case 'Parser.Reply.value':
                                var $3719 = self.idx;
                                var $3720 = self.code;
                                var $3721 = self.val;
                                var _term$14 = Fm$Term$ref$("Equal");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _val0$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3713);
                                var $3722 = Parser$Reply$value$($3719, $3720, Fm$Term$ori$($3721, _term$17));
                                var $3714 = $3722;
                                break;
                        };
                        var $3706 = $3714;
                        break;
                };
                var $3698 = $3706;
                break;
        };
        return $3698;
    };
    const Fm$Parser$equality = x0 => x1 => x2 => x3 => Fm$Parser$equality$(x0, x1, x2, x3);

    function Fm$Parser$inequality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("!=", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3724 = self.idx;
                var $3725 = self.code;
                var $3726 = self.err;
                var $3727 = Parser$Reply$error$($3724, $3725, $3726);
                var $3723 = $3727;
                break;
            case 'Parser.Reply.value':
                var $3728 = self.idx;
                var $3729 = self.code;
                var $3730 = self.val;
                var self = Fm$Parser$term$($3728, $3729);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3732 = self.idx;
                        var $3733 = self.code;
                        var $3734 = self.err;
                        var $3735 = Parser$Reply$error$($3732, $3733, $3734);
                        var $3731 = $3735;
                        break;
                    case 'Parser.Reply.value':
                        var $3736 = self.idx;
                        var $3737 = self.code;
                        var $3738 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3736, $3737);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3740 = self.idx;
                                var $3741 = self.code;
                                var $3742 = self.err;
                                var $3743 = Parser$Reply$error$($3740, $3741, $3742);
                                var $3739 = $3743;
                                break;
                            case 'Parser.Reply.value':
                                var $3744 = self.idx;
                                var $3745 = self.code;
                                var $3746 = self.val;
                                var _term$14 = Fm$Term$ref$("Equal");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _val0$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3738);
                                var _term$18 = Fm$Term$app$(Fm$Term$ref$("Not"), _term$17);
                                var $3747 = Parser$Reply$value$($3744, $3745, Fm$Term$ori$($3746, _term$18));
                                var $3739 = $3747;
                                break;
                        };
                        var $3731 = $3739;
                        break;
                };
                var $3723 = $3731;
                break;
        };
        return $3723;
    };
    const Fm$Parser$inequality = x0 => x1 => x2 => x3 => Fm$Parser$inequality$(x0, x1, x2, x3);

    function Fm$Parser$rewrite$(_init$1, _subt$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3749 = self.idx;
                var $3750 = self.code;
                var $3751 = self.err;
                var $3752 = Parser$Reply$error$($3749, $3750, $3751);
                var $3748 = $3752;
                break;
            case 'Parser.Reply.value':
                var $3753 = self.idx;
                var $3754 = self.code;
                var $3755 = self.val;
                var self = Fm$Parser$text$("rewrite", $3753, $3754);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3757 = self.idx;
                        var $3758 = self.code;
                        var $3759 = self.err;
                        var $3760 = Parser$Reply$error$($3757, $3758, $3759);
                        var $3756 = $3760;
                        break;
                    case 'Parser.Reply.value':
                        var $3761 = self.idx;
                        var $3762 = self.code;
                        var $3763 = self.val;
                        var self = Fm$Parser$name1$($3761, $3762);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3765 = self.idx;
                                var $3766 = self.code;
                                var $3767 = self.err;
                                var $3768 = Parser$Reply$error$($3765, $3766, $3767);
                                var $3764 = $3768;
                                break;
                            case 'Parser.Reply.value':
                                var $3769 = self.idx;
                                var $3770 = self.code;
                                var $3771 = self.val;
                                var self = Fm$Parser$text$("in", $3769, $3770);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3773 = self.idx;
                                        var $3774 = self.code;
                                        var $3775 = self.err;
                                        var $3776 = Parser$Reply$error$($3773, $3774, $3775);
                                        var $3772 = $3776;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3777 = self.idx;
                                        var $3778 = self.code;
                                        var $3779 = self.val;
                                        var self = Fm$Parser$term$($3777, $3778);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3781 = self.idx;
                                                var $3782 = self.code;
                                                var $3783 = self.err;
                                                var $3784 = Parser$Reply$error$($3781, $3782, $3783);
                                                var $3780 = $3784;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3785 = self.idx;
                                                var $3786 = self.code;
                                                var $3787 = self.val;
                                                var self = Fm$Parser$text$("with", $3785, $3786);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3789 = self.idx;
                                                        var $3790 = self.code;
                                                        var $3791 = self.err;
                                                        var $3792 = Parser$Reply$error$($3789, $3790, $3791);
                                                        var $3788 = $3792;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3793 = self.idx;
                                                        var $3794 = self.code;
                                                        var $3795 = self.val;
                                                        var self = Fm$Parser$term$($3793, $3794);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3797 = self.idx;
                                                                var $3798 = self.code;
                                                                var $3799 = self.err;
                                                                var $3800 = Parser$Reply$error$($3797, $3798, $3799);
                                                                var $3796 = $3800;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3801 = self.idx;
                                                                var $3802 = self.code;
                                                                var $3803 = self.val;
                                                                var self = Fm$Parser$stop$(_init$1, $3801, $3802);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3805 = self.idx;
                                                                        var $3806 = self.code;
                                                                        var $3807 = self.err;
                                                                        var $3808 = Parser$Reply$error$($3805, $3806, $3807);
                                                                        var $3804 = $3808;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3809 = self.idx;
                                                                        var $3810 = self.code;
                                                                        var $3811 = self.val;
                                                                        var _term$29 = Fm$Term$ref$("Equal.rewrite");
                                                                        var _term$30 = Fm$Term$app$(_term$29, Fm$Term$hol$(Bits$e));
                                                                        var _term$31 = Fm$Term$app$(_term$30, Fm$Term$hol$(Bits$e));
                                                                        var _term$32 = Fm$Term$app$(_term$31, Fm$Term$hol$(Bits$e));
                                                                        var _term$33 = Fm$Term$app$(_term$32, $3803);
                                                                        var _term$34 = Fm$Term$app$(_term$33, Fm$Term$lam$($3771, (_x$34 => {
                                                                            var $3813 = $3787;
                                                                            return $3813;
                                                                        })));
                                                                        var _term$35 = Fm$Term$app$(_term$34, _subt$2);
                                                                        var $3812 = Parser$Reply$value$($3809, $3810, Fm$Term$ori$($3811, _term$35));
                                                                        var $3804 = $3812;
                                                                        break;
                                                                };
                                                                var $3796 = $3804;
                                                                break;
                                                        };
                                                        var $3788 = $3796;
                                                        break;
                                                };
                                                var $3780 = $3788;
                                                break;
                                        };
                                        var $3772 = $3780;
                                        break;
                                };
                                var $3764 = $3772;
                                break;
                        };
                        var $3756 = $3764;
                        break;
                };
                var $3748 = $3756;
                break;
        };
        return $3748;
    };
    const Fm$Parser$rewrite = x0 => x1 => x2 => x3 => Fm$Parser$rewrite$(x0, x1, x2, x3);

    function Fm$Term$ann$(_done$1, _term$2, _type$3) {
        var $3814 = ({
            _: 'Fm.Term.ann',
            'done': _done$1,
            'term': _term$2,
            'type': _type$3
        });
        return $3814;
    };
    const Fm$Term$ann = x0 => x1 => x2 => Fm$Term$ann$(x0, x1, x2);

    function Fm$Parser$annotation$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3816 = self.idx;
                var $3817 = self.code;
                var $3818 = self.err;
                var $3819 = Parser$Reply$error$($3816, $3817, $3818);
                var $3815 = $3819;
                break;
            case 'Parser.Reply.value':
                var $3820 = self.idx;
                var $3821 = self.code;
                var $3822 = self.val;
                var self = Fm$Parser$term$($3820, $3821);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3824 = self.idx;
                        var $3825 = self.code;
                        var $3826 = self.err;
                        var $3827 = Parser$Reply$error$($3824, $3825, $3826);
                        var $3823 = $3827;
                        break;
                    case 'Parser.Reply.value':
                        var $3828 = self.idx;
                        var $3829 = self.code;
                        var $3830 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3828, $3829);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3832 = self.idx;
                                var $3833 = self.code;
                                var $3834 = self.err;
                                var $3835 = Parser$Reply$error$($3832, $3833, $3834);
                                var $3831 = $3835;
                                break;
                            case 'Parser.Reply.value':
                                var $3836 = self.idx;
                                var $3837 = self.code;
                                var $3838 = self.val;
                                var $3839 = Parser$Reply$value$($3836, $3837, Fm$Term$ori$($3838, Fm$Term$ann$(Bool$false, _term$2, $3830)));
                                var $3831 = $3839;
                                break;
                        };
                        var $3823 = $3831;
                        break;
                };
                var $3815 = $3823;
                break;
        };
        return $3815;
    };
    const Fm$Parser$annotation = x0 => x1 => x2 => x3 => Fm$Parser$annotation$(x0, x1, x2, x3);

    function Fm$Parser$application$hole$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("!", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3841 = self.idx;
                var $3842 = self.code;
                var $3843 = self.err;
                var $3844 = Parser$Reply$error$($3841, $3842, $3843);
                var $3840 = $3844;
                break;
            case 'Parser.Reply.value':
                var $3845 = self.idx;
                var $3846 = self.code;
                var $3847 = self.val;
                var self = Fm$Parser$stop$(_init$1, $3845, $3846);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3849 = self.idx;
                        var $3850 = self.code;
                        var $3851 = self.err;
                        var $3852 = Parser$Reply$error$($3849, $3850, $3851);
                        var $3848 = $3852;
                        break;
                    case 'Parser.Reply.value':
                        var $3853 = self.idx;
                        var $3854 = self.code;
                        var $3855 = self.val;
                        var $3856 = Parser$Reply$value$($3853, $3854, Fm$Term$ori$($3855, Fm$Term$app$(_term$2, Fm$Term$hol$(Bits$e))));
                        var $3848 = $3856;
                        break;
                };
                var $3840 = $3848;
                break;
        };
        return $3840;
    };
    const Fm$Parser$application$hole = x0 => x1 => x2 => x3 => Fm$Parser$application$hole$(x0, x1, x2, x3);

    function Fm$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4) {
        var Fm$Parser$suffix$ = (_init$1, _term$2, _idx$3, _code$4) => ({
            ctr: 'TCO',
            arg: [_init$1, _term$2, _idx$3, _code$4]
        });
        var Fm$Parser$suffix = _init$1 => _term$2 => _idx$3 => _code$4 => Fm$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4);
        var arg = [_init$1, _term$2, _idx$3, _code$4];
        while (true) {
            let [_init$1, _term$2, _idx$3, _code$4] = arg;
            var R = (() => {
                var _suffix_parser$5 = Parser$first_of$(List$cons$(Fm$Parser$application(_init$1)(_term$2), List$cons$(Fm$Parser$application$erased(_init$1)(_term$2), List$cons$(Fm$Parser$arrow(_init$1)(_term$2), List$cons$(Fm$Parser$add(_init$1)(_term$2), List$cons$(Fm$Parser$sub(_init$1)(_term$2), List$cons$(Fm$Parser$mul(_init$1)(_term$2), List$cons$(Fm$Parser$div(_init$1)(_term$2), List$cons$(Fm$Parser$mod(_init$1)(_term$2), List$cons$(Fm$Parser$cons(_init$1)(_term$2), List$cons$(Fm$Parser$concat(_init$1)(_term$2), List$cons$(Fm$Parser$string_concat(_init$1)(_term$2), List$cons$(Fm$Parser$sigma(_init$1)(_term$2), List$cons$(Fm$Parser$equality(_init$1)(_term$2), List$cons$(Fm$Parser$inequality(_init$1)(_term$2), List$cons$(Fm$Parser$rewrite(_init$1)(_term$2), List$cons$(Fm$Parser$annotation(_init$1)(_term$2), List$cons$(Fm$Parser$application$hole(_init$1)(_term$2), List$nil))))))))))))))))));
                var self = _suffix_parser$5(_idx$3)(_code$4);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3858 = self.idx;
                        var $3859 = self.code;
                        var $3860 = self.err;
                        var $3861 = Parser$Reply$value$(_idx$3, _code$4, _term$2);
                        var $3857 = $3861;
                        break;
                    case 'Parser.Reply.value':
                        var $3862 = self.idx;
                        var $3863 = self.code;
                        var $3864 = self.val;
                        var $3865 = Fm$Parser$suffix$(_init$1, $3864, $3862, $3863);
                        var $3857 = $3865;
                        break;
                };
                return $3857;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Parser$suffix = x0 => x1 => x2 => x3 => Fm$Parser$suffix$(x0, x1, x2, x3);

    function Fm$Parser$term$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3867 = self.idx;
                var $3868 = self.code;
                var $3869 = self.err;
                var $3870 = Parser$Reply$error$($3867, $3868, $3869);
                var $3866 = $3870;
                break;
            case 'Parser.Reply.value':
                var $3871 = self.idx;
                var $3872 = self.code;
                var $3873 = self.val;
                var self = Parser$first_of$(List$cons$(Fm$Parser$type, List$cons$(Fm$Parser$forall, List$cons$(Fm$Parser$lambda, List$cons$(Fm$Parser$lambda$erased, List$cons$(Fm$Parser$lambda$nameless, List$cons$(Fm$Parser$parenthesis, List$cons$(Fm$Parser$letforrange$u32, List$cons$(Fm$Parser$letforin, List$cons$(Fm$Parser$let, List$cons$(Fm$Parser$get, List$cons$(Fm$Parser$def, List$cons$(Fm$Parser$if, List$cons$(Fm$Parser$char, List$cons$(Fm$Parser$string, List$cons$(Fm$Parser$pair, List$cons$(Fm$Parser$sigma$type, List$cons$(Fm$Parser$some, List$cons$(Fm$Parser$apply, List$cons$(Fm$Parser$mirror, List$cons$(Fm$Parser$list, List$cons$(Fm$Parser$log, List$cons$(Fm$Parser$forrange$u32, List$cons$(Fm$Parser$forrange$u32$2, List$cons$(Fm$Parser$forin, List$cons$(Fm$Parser$forin$2, List$cons$(Fm$Parser$do, List$cons$(Fm$Parser$case, List$cons$(Fm$Parser$open, List$cons$(Fm$Parser$goal, List$cons$(Fm$Parser$hole, List$cons$(Fm$Parser$u8, List$cons$(Fm$Parser$u16, List$cons$(Fm$Parser$u32, List$cons$(Fm$Parser$u64, List$cons$(Fm$Parser$nat, List$cons$(Fm$Parser$reference, List$nil)))))))))))))))))))))))))))))))))))))($3871)($3872);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3875 = self.idx;
                        var $3876 = self.code;
                        var $3877 = self.err;
                        var $3878 = Parser$Reply$error$($3875, $3876, $3877);
                        var $3874 = $3878;
                        break;
                    case 'Parser.Reply.value':
                        var $3879 = self.idx;
                        var $3880 = self.code;
                        var $3881 = self.val;
                        var $3882 = Fm$Parser$suffix$($3873, $3881, $3879, $3880);
                        var $3874 = $3882;
                        break;
                };
                var $3866 = $3874;
                break;
        };
        return $3866;
    };
    const Fm$Parser$term = x0 => x1 => Fm$Parser$term$(x0, x1);

    function Fm$Parser$name_term$(_idx$1, _code$2) {
        var self = Fm$Parser$name$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3884 = self.idx;
                var $3885 = self.code;
                var $3886 = self.err;
                var $3887 = Parser$Reply$error$($3884, $3885, $3886);
                var $3883 = $3887;
                break;
            case 'Parser.Reply.value':
                var $3888 = self.idx;
                var $3889 = self.code;
                var $3890 = self.val;
                var self = Fm$Parser$text$(":", $3888, $3889);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3892 = self.idx;
                        var $3893 = self.code;
                        var $3894 = self.err;
                        var $3895 = Parser$Reply$error$($3892, $3893, $3894);
                        var $3891 = $3895;
                        break;
                    case 'Parser.Reply.value':
                        var $3896 = self.idx;
                        var $3897 = self.code;
                        var $3898 = self.val;
                        var self = Fm$Parser$term$($3896, $3897);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3900 = self.idx;
                                var $3901 = self.code;
                                var $3902 = self.err;
                                var $3903 = Parser$Reply$error$($3900, $3901, $3902);
                                var $3899 = $3903;
                                break;
                            case 'Parser.Reply.value':
                                var $3904 = self.idx;
                                var $3905 = self.code;
                                var $3906 = self.val;
                                var $3907 = Parser$Reply$value$($3904, $3905, Pair$new$($3890, $3906));
                                var $3899 = $3907;
                                break;
                        };
                        var $3891 = $3899;
                        break;
                };
                var $3883 = $3891;
                break;
        };
        return $3883;
    };
    const Fm$Parser$name_term = x0 => x1 => Fm$Parser$name_term$(x0, x1);

    function Fm$Binder$new$(_eras$1, _name$2, _term$3) {
        var $3908 = ({
            _: 'Fm.Binder.new',
            'eras': _eras$1,
            'name': _name$2,
            'term': _term$3
        });
        return $3908;
    };
    const Fm$Binder$new = x0 => x1 => x2 => Fm$Binder$new$(x0, x1, x2);

    function Fm$Parser$binder$homo$(_eras$1, _idx$2, _code$3) {
        var self = Fm$Parser$text$((() => {
            var self = _eras$1;
            if (self) {
                var $3910 = "<";
                return $3910;
            } else {
                var $3911 = "(";
                return $3911;
            };
        })(), _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3912 = self.idx;
                var $3913 = self.code;
                var $3914 = self.err;
                var $3915 = Parser$Reply$error$($3912, $3913, $3914);
                var $3909 = $3915;
                break;
            case 'Parser.Reply.value':
                var $3916 = self.idx;
                var $3917 = self.code;
                var $3918 = self.val;
                var self = Parser$until1$(Fm$Parser$text((() => {
                    var self = _eras$1;
                    if (self) {
                        var $3920 = ">";
                        return $3920;
                    } else {
                        var $3921 = ")";
                        return $3921;
                    };
                })()), Fm$Parser$item(Fm$Parser$name_term), $3916, $3917);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3922 = self.idx;
                        var $3923 = self.code;
                        var $3924 = self.err;
                        var $3925 = Parser$Reply$error$($3922, $3923, $3924);
                        var $3919 = $3925;
                        break;
                    case 'Parser.Reply.value':
                        var $3926 = self.idx;
                        var $3927 = self.code;
                        var $3928 = self.val;
                        var $3929 = Parser$Reply$value$($3926, $3927, List$mapped$($3928, (_pair$10 => {
                            var self = _pair$10;
                            switch (self._) {
                                case 'Pair.new':
                                    var $3931 = self.fst;
                                    var $3932 = self.snd;
                                    var $3933 = Fm$Binder$new$(_eras$1, $3931, $3932);
                                    var $3930 = $3933;
                                    break;
                            };
                            return $3930;
                        })));
                        var $3919 = $3929;
                        break;
                };
                var $3909 = $3919;
                break;
        };
        return $3909;
    };
    const Fm$Parser$binder$homo = x0 => x1 => x2 => Fm$Parser$binder$homo$(x0, x1, x2);

    function List$concat$(_as$2, _bs$3) {
        var self = _as$2;
        switch (self._) {
            case 'List.nil':
                var $3935 = _bs$3;
                var $3934 = $3935;
                break;
            case 'List.cons':
                var $3936 = self.head;
                var $3937 = self.tail;
                var $3938 = List$cons$($3936, List$concat$($3937, _bs$3));
                var $3934 = $3938;
                break;
        };
        return $3934;
    };
    const List$concat = x0 => x1 => List$concat$(x0, x1);

    function List$flatten$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.nil':
                var $3940 = List$nil;
                var $3939 = $3940;
                break;
            case 'List.cons':
                var $3941 = self.head;
                var $3942 = self.tail;
                var $3943 = List$concat$($3941, List$flatten$($3942));
                var $3939 = $3943;
                break;
        };
        return $3939;
    };
    const List$flatten = x0 => List$flatten$(x0);

    function Fm$Parser$binder$(_idx$1, _code$2) {
        var self = Parser$many1$(Parser$first_of$(List$cons$(Fm$Parser$binder$homo(Bool$true), List$cons$(Fm$Parser$binder$homo(Bool$false), List$nil))), _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3945 = self.idx;
                var $3946 = self.code;
                var $3947 = self.err;
                var $3948 = Parser$Reply$error$($3945, $3946, $3947);
                var $3944 = $3948;
                break;
            case 'Parser.Reply.value':
                var $3949 = self.idx;
                var $3950 = self.code;
                var $3951 = self.val;
                var $3952 = Parser$Reply$value$($3949, $3950, List$flatten$($3951));
                var $3944 = $3952;
                break;
        };
        return $3944;
    };
    const Fm$Parser$binder = x0 => x1 => Fm$Parser$binder$(x0, x1);

    function Fm$Parser$make_forall$(_binds$1, _body$2) {
        var self = _binds$1;
        switch (self._) {
            case 'List.nil':
                var $3954 = _body$2;
                var $3953 = $3954;
                break;
            case 'List.cons':
                var $3955 = self.head;
                var $3956 = self.tail;
                var self = $3955;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $3958 = self.eras;
                        var $3959 = self.name;
                        var $3960 = self.term;
                        var $3961 = Fm$Term$all$($3958, "", $3959, $3960, (_s$8 => _x$9 => {
                            var $3962 = Fm$Parser$make_forall$($3956, _body$2);
                            return $3962;
                        }));
                        var $3957 = $3961;
                        break;
                };
                var $3953 = $3957;
                break;
        };
        return $3953;
    };
    const Fm$Parser$make_forall = x0 => x1 => Fm$Parser$make_forall$(x0, x1);

    function List$at$(_index$2, _list$3) {
        var List$at$ = (_index$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_index$2, _list$3]
        });
        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);
        var arg = [_index$2, _list$3];
        while (true) {
            let [_index$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.nil':
                        var $3963 = Maybe$none;
                        return $3963;
                    case 'List.cons':
                        var $3964 = self.head;
                        var $3965 = self.tail;
                        var self = _index$2;
                        if (self === 0n) {
                            var $3967 = Maybe$some$($3964);
                            var $3966 = $3967;
                        } else {
                            var $3968 = (self - 1n);
                            var $3969 = List$at$($3968, $3965);
                            var $3966 = $3969;
                        };
                        return $3966;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$at = x0 => x1 => List$at$(x0, x1);

    function List$at_last$(_index$2, _list$3) {
        var $3970 = List$at$(_index$2, List$reverse$(_list$3));
        return $3970;
    };
    const List$at_last = x0 => x1 => List$at_last$(x0, x1);

    function Fm$Term$var$(_name$1, _indx$2) {
        var $3971 = ({
            _: 'Fm.Term.var',
            'name': _name$1,
            'indx': _indx$2
        });
        return $3971;
    };
    const Fm$Term$var = x0 => x1 => Fm$Term$var$(x0, x1);

    function Fm$Context$get_name_skips$(_name$1) {
        var self = _name$1;
        if (self.length === 0) {
            var $3973 = Pair$new$("", 0n);
            var $3972 = $3973;
        } else {
            var $3974 = self.charCodeAt(0);
            var $3975 = self.slice(1);
            var _name_skips$4 = Fm$Context$get_name_skips$($3975);
            var self = _name_skips$4;
            switch (self._) {
                case 'Pair.new':
                    var $3977 = self.fst;
                    var $3978 = self.snd;
                    var self = ($3974 === 94);
                    if (self) {
                        var $3980 = Pair$new$($3977, Nat$succ$($3978));
                        var $3979 = $3980;
                    } else {
                        var $3981 = Pair$new$(String$cons$($3974, $3977), $3978);
                        var $3979 = $3981;
                    };
                    var $3976 = $3979;
                    break;
            };
            var $3972 = $3976;
        };
        return $3972;
    };
    const Fm$Context$get_name_skips = x0 => Fm$Context$get_name_skips$(x0);

    function Fm$Name$eql$(_a$1, _b$2) {
        var $3982 = (_a$1 === _b$2);
        return $3982;
    };
    const Fm$Name$eql = x0 => x1 => Fm$Name$eql$(x0, x1);

    function Fm$Context$find$go$(_name$1, _skip$2, _ctx$3) {
        var Fm$Context$find$go$ = (_name$1, _skip$2, _ctx$3) => ({
            ctr: 'TCO',
            arg: [_name$1, _skip$2, _ctx$3]
        });
        var Fm$Context$find$go = _name$1 => _skip$2 => _ctx$3 => Fm$Context$find$go$(_name$1, _skip$2, _ctx$3);
        var arg = [_name$1, _skip$2, _ctx$3];
        while (true) {
            let [_name$1, _skip$2, _ctx$3] = arg;
            var R = (() => {
                var self = _ctx$3;
                switch (self._) {
                    case 'List.nil':
                        var $3983 = Maybe$none;
                        return $3983;
                    case 'List.cons':
                        var $3984 = self.head;
                        var $3985 = self.tail;
                        var self = $3984;
                        switch (self._) {
                            case 'Pair.new':
                                var $3987 = self.fst;
                                var $3988 = self.snd;
                                var self = Fm$Name$eql$(_name$1, $3987);
                                if (self) {
                                    var self = _skip$2;
                                    if (self === 0n) {
                                        var $3991 = Maybe$some$($3988);
                                        var $3990 = $3991;
                                    } else {
                                        var $3992 = (self - 1n);
                                        var $3993 = Fm$Context$find$go$(_name$1, $3992, $3985);
                                        var $3990 = $3993;
                                    };
                                    var $3989 = $3990;
                                } else {
                                    var $3994 = Fm$Context$find$go$(_name$1, _skip$2, $3985);
                                    var $3989 = $3994;
                                };
                                var $3986 = $3989;
                                break;
                        };
                        return $3986;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Context$find$go = x0 => x1 => x2 => Fm$Context$find$go$(x0, x1, x2);

    function Fm$Context$find$(_name$1, _ctx$2) {
        var self = Fm$Context$get_name_skips$(_name$1);
        switch (self._) {
            case 'Pair.new':
                var $3996 = self.fst;
                var $3997 = self.snd;
                var $3998 = Fm$Context$find$go$($3996, $3997, _ctx$2);
                var $3995 = $3998;
                break;
        };
        return $3995;
    };
    const Fm$Context$find = x0 => x1 => Fm$Context$find$(x0, x1);
    const List$length = a0 => (list_length(a0));

    function Fm$Path$o$(_path$1, _x$2) {
        var $3999 = _path$1((_x$2 + '0'));
        return $3999;
    };
    const Fm$Path$o = x0 => x1 => Fm$Path$o$(x0, x1);

    function Fm$Path$i$(_path$1, _x$2) {
        var $4000 = _path$1((_x$2 + '1'));
        return $4000;
    };
    const Fm$Path$i = x0 => x1 => Fm$Path$i$(x0, x1);

    function Fm$Path$to_bits$(_path$1) {
        var $4001 = _path$1(Bits$e);
        return $4001;
    };
    const Fm$Path$to_bits = x0 => Fm$Path$to_bits$(x0);

    function Fm$Term$bind$(_vars$1, _path$2, _term$3) {
        var self = _term$3;
        switch (self._) {
            case 'Fm.Term.var':
                var $4003 = self.name;
                var $4004 = self.indx;
                var self = List$at_last$($4004, _vars$1);
                switch (self._) {
                    case 'Maybe.none':
                        var $4006 = Fm$Term$var$($4003, $4004);
                        var $4005 = $4006;
                        break;
                    case 'Maybe.some':
                        var $4007 = self.value;
                        var $4008 = Pair$snd$($4007);
                        var $4005 = $4008;
                        break;
                };
                var $4002 = $4005;
                break;
            case 'Fm.Term.ref':
                var $4009 = self.name;
                var self = Fm$Context$find$($4009, _vars$1);
                switch (self._) {
                    case 'Maybe.none':
                        var $4011 = Fm$Term$ref$($4009);
                        var $4010 = $4011;
                        break;
                    case 'Maybe.some':
                        var $4012 = self.value;
                        var $4013 = $4012;
                        var $4010 = $4013;
                        break;
                };
                var $4002 = $4010;
                break;
            case 'Fm.Term.typ':
                var $4014 = Fm$Term$typ;
                var $4002 = $4014;
                break;
            case 'Fm.Term.all':
                var $4015 = self.eras;
                var $4016 = self.self;
                var $4017 = self.name;
                var $4018 = self.xtyp;
                var $4019 = self.body;
                var _vlen$9 = (list_length(_vars$1));
                var $4020 = Fm$Term$all$($4015, $4016, $4017, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4018), (_s$10 => _x$11 => {
                    var $4021 = Fm$Term$bind$(List$cons$(Pair$new$($4017, _x$11), List$cons$(Pair$new$($4016, _s$10), _vars$1)), Fm$Path$i(_path$2), $4019(Fm$Term$var$($4016, _vlen$9))(Fm$Term$var$($4017, Nat$succ$(_vlen$9))));
                    return $4021;
                }));
                var $4002 = $4020;
                break;
            case 'Fm.Term.lam':
                var $4022 = self.name;
                var $4023 = self.body;
                var _vlen$6 = (list_length(_vars$1));
                var $4024 = Fm$Term$lam$($4022, (_x$7 => {
                    var $4025 = Fm$Term$bind$(List$cons$(Pair$new$($4022, _x$7), _vars$1), Fm$Path$o(_path$2), $4023(Fm$Term$var$($4022, _vlen$6)));
                    return $4025;
                }));
                var $4002 = $4024;
                break;
            case 'Fm.Term.app':
                var $4026 = self.func;
                var $4027 = self.argm;
                var $4028 = Fm$Term$app$(Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4026), Fm$Term$bind$(_vars$1, Fm$Path$i(_path$2), $4027));
                var $4002 = $4028;
                break;
            case 'Fm.Term.let':
                var $4029 = self.name;
                var $4030 = self.expr;
                var $4031 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $4032 = Fm$Term$let$($4029, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4030), (_x$8 => {
                    var $4033 = Fm$Term$bind$(List$cons$(Pair$new$($4029, _x$8), _vars$1), Fm$Path$i(_path$2), $4031(Fm$Term$var$($4029, _vlen$7)));
                    return $4033;
                }));
                var $4002 = $4032;
                break;
            case 'Fm.Term.def':
                var $4034 = self.name;
                var $4035 = self.expr;
                var $4036 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $4037 = Fm$Term$def$($4034, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4035), (_x$8 => {
                    var $4038 = Fm$Term$bind$(List$cons$(Pair$new$($4034, _x$8), _vars$1), Fm$Path$i(_path$2), $4036(Fm$Term$var$($4034, _vlen$7)));
                    return $4038;
                }));
                var $4002 = $4037;
                break;
            case 'Fm.Term.ann':
                var $4039 = self.done;
                var $4040 = self.term;
                var $4041 = self.type;
                var $4042 = Fm$Term$ann$($4039, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4040), Fm$Term$bind$(_vars$1, Fm$Path$i(_path$2), $4041));
                var $4002 = $4042;
                break;
            case 'Fm.Term.gol':
                var $4043 = self.name;
                var $4044 = self.dref;
                var $4045 = self.verb;
                var $4046 = Fm$Term$gol$($4043, $4044, $4045);
                var $4002 = $4046;
                break;
            case 'Fm.Term.hol':
                var $4047 = self.path;
                var $4048 = Fm$Term$hol$(Fm$Path$to_bits$(_path$2));
                var $4002 = $4048;
                break;
            case 'Fm.Term.nat':
                var $4049 = self.natx;
                var $4050 = Fm$Term$nat$($4049);
                var $4002 = $4050;
                break;
            case 'Fm.Term.chr':
                var $4051 = self.chrx;
                var $4052 = Fm$Term$chr$($4051);
                var $4002 = $4052;
                break;
            case 'Fm.Term.str':
                var $4053 = self.strx;
                var $4054 = Fm$Term$str$($4053);
                var $4002 = $4054;
                break;
            case 'Fm.Term.cse':
                var $4055 = self.path;
                var $4056 = self.expr;
                var $4057 = self.name;
                var $4058 = self.with;
                var $4059 = self.cses;
                var $4060 = self.moti;
                var _expr$10 = Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4056);
                var _name$11 = $4057;
                var _wyth$12 = $4058;
                var _cses$13 = $4059;
                var _moti$14 = $4060;
                var $4061 = Fm$Term$cse$(Fm$Path$to_bits$(_path$2), _expr$10, _name$11, _wyth$12, _cses$13, _moti$14);
                var $4002 = $4061;
                break;
            case 'Fm.Term.ori':
                var $4062 = self.orig;
                var $4063 = self.expr;
                var $4064 = Fm$Term$ori$($4062, Fm$Term$bind$(_vars$1, _path$2, $4063));
                var $4002 = $4064;
                break;
        };
        return $4002;
    };
    const Fm$Term$bind = x0 => x1 => x2 => Fm$Term$bind$(x0, x1, x2);
    const Fm$Status$done = ({
        _: 'Fm.Status.done'
    });

    function Fm$define$(_file$1, _code$2, _name$3, _term$4, _type$5, _done$6, _defs$7) {
        var self = _done$6;
        if (self) {
            var $4066 = Fm$Status$done;
            var _stat$8 = $4066;
        } else {
            var $4067 = Fm$Status$init;
            var _stat$8 = $4067;
        };
        var $4065 = Fm$set$(_name$3, Fm$Def$new$(_file$1, _code$2, _name$3, _term$4, _type$5, _stat$8), _defs$7);
        return $4065;
    };
    const Fm$define = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Fm$define$(x0, x1, x2, x3, x4, x5, x6);

    function Fm$Parser$file$def$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Fm$Parser$name1$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4069 = self.idx;
                var $4070 = self.code;
                var $4071 = self.err;
                var $4072 = Parser$Reply$error$($4069, $4070, $4071);
                var $4068 = $4072;
                break;
            case 'Parser.Reply.value':
                var $4073 = self.idx;
                var $4074 = self.code;
                var $4075 = self.val;
                var self = Parser$many$(Fm$Parser$binder)($4073)($4074);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4077 = self.idx;
                        var $4078 = self.code;
                        var $4079 = self.err;
                        var $4080 = Parser$Reply$error$($4077, $4078, $4079);
                        var $4076 = $4080;
                        break;
                    case 'Parser.Reply.value':
                        var $4081 = self.idx;
                        var $4082 = self.code;
                        var $4083 = self.val;
                        var _args$12 = List$flatten$($4083);
                        var self = Fm$Parser$text$(":", $4081, $4082);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4085 = self.idx;
                                var $4086 = self.code;
                                var $4087 = self.err;
                                var $4088 = Parser$Reply$error$($4085, $4086, $4087);
                                var $4084 = $4088;
                                break;
                            case 'Parser.Reply.value':
                                var $4089 = self.idx;
                                var $4090 = self.code;
                                var $4091 = self.val;
                                var self = Fm$Parser$term$($4089, $4090);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4093 = self.idx;
                                        var $4094 = self.code;
                                        var $4095 = self.err;
                                        var $4096 = Parser$Reply$error$($4093, $4094, $4095);
                                        var $4092 = $4096;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4097 = self.idx;
                                        var $4098 = self.code;
                                        var $4099 = self.val;
                                        var self = Fm$Parser$term$($4097, $4098);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4101 = self.idx;
                                                var $4102 = self.code;
                                                var $4103 = self.err;
                                                var $4104 = Parser$Reply$error$($4101, $4102, $4103);
                                                var $4100 = $4104;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4105 = self.idx;
                                                var $4106 = self.code;
                                                var $4107 = self.val;
                                                var _type$22 = Fm$Parser$make_forall$(_args$12, $4099);
                                                var _term$23 = Fm$Parser$make_lambda$(List$mapped$(_args$12, (_x$23 => {
                                                    var self = _x$23;
                                                    switch (self._) {
                                                        case 'Fm.Binder.new':
                                                            var $4110 = self.eras;
                                                            var $4111 = self.name;
                                                            var $4112 = self.term;
                                                            var $4113 = $4111;
                                                            var $4109 = $4113;
                                                            break;
                                                    };
                                                    return $4109;
                                                })), $4107);
                                                var _type$24 = Fm$Term$bind$(List$nil, (_x$24 => {
                                                    var $4114 = (_x$24 + '1');
                                                    return $4114;
                                                }), _type$22);
                                                var _term$25 = Fm$Term$bind$(List$nil, (_x$25 => {
                                                    var $4115 = (_x$25 + '0');
                                                    return $4115;
                                                }), _term$23);
                                                var _defs$26 = Fm$define$(_file$1, _code$2, $4075, _term$25, _type$24, Bool$false, _defs$3);
                                                var $4108 = Parser$Reply$value$($4105, $4106, _defs$26);
                                                var $4100 = $4108;
                                                break;
                                        };
                                        var $4092 = $4100;
                                        break;
                                };
                                var $4084 = $4092;
                                break;
                        };
                        var $4076 = $4084;
                        break;
                };
                var $4068 = $4076;
                break;
        };
        return $4068;
    };
    const Fm$Parser$file$def = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$def$(x0, x1, x2, x3, x4);

    function Maybe$default$(_a$2, _m$3) {
        var self = _m$3;
        switch (self._) {
            case 'Maybe.none':
                var $4117 = _a$2;
                var $4116 = $4117;
                break;
            case 'Maybe.some':
                var $4118 = self.value;
                var $4119 = $4118;
                var $4116 = $4119;
                break;
        };
        return $4116;
    };
    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);

    function Fm$Constructor$new$(_name$1, _args$2, _inds$3) {
        var $4120 = ({
            _: 'Fm.Constructor.new',
            'name': _name$1,
            'args': _args$2,
            'inds': _inds$3
        });
        return $4120;
    };
    const Fm$Constructor$new = x0 => x1 => x2 => Fm$Constructor$new$(x0, x1, x2);

    function Fm$Parser$constructor$(_namespace$1, _idx$2, _code$3) {
        var self = Fm$Parser$name1$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4122 = self.idx;
                var $4123 = self.code;
                var $4124 = self.err;
                var $4125 = Parser$Reply$error$($4122, $4123, $4124);
                var $4121 = $4125;
                break;
            case 'Parser.Reply.value':
                var $4126 = self.idx;
                var $4127 = self.code;
                var $4128 = self.val;
                var self = Parser$maybe$(Fm$Parser$binder, $4126, $4127);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4130 = self.idx;
                        var $4131 = self.code;
                        var $4132 = self.err;
                        var $4133 = Parser$Reply$error$($4130, $4131, $4132);
                        var $4129 = $4133;
                        break;
                    case 'Parser.Reply.value':
                        var $4134 = self.idx;
                        var $4135 = self.code;
                        var $4136 = self.val;
                        var self = Parser$maybe$((_idx$10 => _code$11 => {
                            var self = Fm$Parser$text$("~", _idx$10, _code$11);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4139 = self.idx;
                                    var $4140 = self.code;
                                    var $4141 = self.err;
                                    var $4142 = Parser$Reply$error$($4139, $4140, $4141);
                                    var $4138 = $4142;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4143 = self.idx;
                                    var $4144 = self.code;
                                    var $4145 = self.val;
                                    var $4146 = Fm$Parser$binder$($4143, $4144);
                                    var $4138 = $4146;
                                    break;
                            };
                            return $4138;
                        }), $4134, $4135);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4147 = self.idx;
                                var $4148 = self.code;
                                var $4149 = self.err;
                                var $4150 = Parser$Reply$error$($4147, $4148, $4149);
                                var $4137 = $4150;
                                break;
                            case 'Parser.Reply.value':
                                var $4151 = self.idx;
                                var $4152 = self.code;
                                var $4153 = self.val;
                                var _args$13 = Maybe$default$(List$nil, $4136);
                                var _inds$14 = Maybe$default$(List$nil, $4153);
                                var $4154 = Parser$Reply$value$($4151, $4152, Fm$Constructor$new$($4128, _args$13, _inds$14));
                                var $4137 = $4154;
                                break;
                        };
                        var $4129 = $4137;
                        break;
                };
                var $4121 = $4129;
                break;
        };
        return $4121;
    };
    const Fm$Parser$constructor = x0 => x1 => x2 => Fm$Parser$constructor$(x0, x1, x2);

    function Fm$Datatype$new$(_name$1, _pars$2, _inds$3, _ctrs$4) {
        var $4155 = ({
            _: 'Fm.Datatype.new',
            'name': _name$1,
            'pars': _pars$2,
            'inds': _inds$3,
            'ctrs': _ctrs$4
        });
        return $4155;
    };
    const Fm$Datatype$new = x0 => x1 => x2 => x3 => Fm$Datatype$new$(x0, x1, x2, x3);

    function Fm$Parser$datatype$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("type ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4157 = self.idx;
                var $4158 = self.code;
                var $4159 = self.err;
                var $4160 = Parser$Reply$error$($4157, $4158, $4159);
                var $4156 = $4160;
                break;
            case 'Parser.Reply.value':
                var $4161 = self.idx;
                var $4162 = self.code;
                var $4163 = self.val;
                var self = Fm$Parser$name1$($4161, $4162);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4165 = self.idx;
                        var $4166 = self.code;
                        var $4167 = self.err;
                        var $4168 = Parser$Reply$error$($4165, $4166, $4167);
                        var $4164 = $4168;
                        break;
                    case 'Parser.Reply.value':
                        var $4169 = self.idx;
                        var $4170 = self.code;
                        var $4171 = self.val;
                        var self = Parser$maybe$(Fm$Parser$binder, $4169, $4170);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4173 = self.idx;
                                var $4174 = self.code;
                                var $4175 = self.err;
                                var $4176 = Parser$Reply$error$($4173, $4174, $4175);
                                var $4172 = $4176;
                                break;
                            case 'Parser.Reply.value':
                                var $4177 = self.idx;
                                var $4178 = self.code;
                                var $4179 = self.val;
                                var self = Parser$maybe$((_idx$12 => _code$13 => {
                                    var self = Fm$Parser$text$("~", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4182 = self.idx;
                                            var $4183 = self.code;
                                            var $4184 = self.err;
                                            var $4185 = Parser$Reply$error$($4182, $4183, $4184);
                                            var $4181 = $4185;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4186 = self.idx;
                                            var $4187 = self.code;
                                            var $4188 = self.val;
                                            var $4189 = Fm$Parser$binder$($4186, $4187);
                                            var $4181 = $4189;
                                            break;
                                    };
                                    return $4181;
                                }), $4177, $4178);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4190 = self.idx;
                                        var $4191 = self.code;
                                        var $4192 = self.err;
                                        var $4193 = Parser$Reply$error$($4190, $4191, $4192);
                                        var $4180 = $4193;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4194 = self.idx;
                                        var $4195 = self.code;
                                        var $4196 = self.val;
                                        var _pars$15 = Maybe$default$(List$nil, $4179);
                                        var _inds$16 = Maybe$default$(List$nil, $4196);
                                        var self = Fm$Parser$text$("{", $4194, $4195);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4198 = self.idx;
                                                var $4199 = self.code;
                                                var $4200 = self.err;
                                                var $4201 = Parser$Reply$error$($4198, $4199, $4200);
                                                var $4197 = $4201;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4202 = self.idx;
                                                var $4203 = self.code;
                                                var $4204 = self.val;
                                                var self = Parser$until$(Fm$Parser$text("}"), Fm$Parser$item(Fm$Parser$constructor($4171)))($4202)($4203);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4206 = self.idx;
                                                        var $4207 = self.code;
                                                        var $4208 = self.err;
                                                        var $4209 = Parser$Reply$error$($4206, $4207, $4208);
                                                        var $4205 = $4209;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4210 = self.idx;
                                                        var $4211 = self.code;
                                                        var $4212 = self.val;
                                                        var $4213 = Parser$Reply$value$($4210, $4211, Fm$Datatype$new$($4171, _pars$15, _inds$16, $4212));
                                                        var $4205 = $4213;
                                                        break;
                                                };
                                                var $4197 = $4205;
                                                break;
                                        };
                                        var $4180 = $4197;
                                        break;
                                };
                                var $4172 = $4180;
                                break;
                        };
                        var $4164 = $4172;
                        break;
                };
                var $4156 = $4164;
                break;
        };
        return $4156;
    };
    const Fm$Parser$datatype = x0 => x1 => Fm$Parser$datatype$(x0, x1);

    function Fm$Datatype$build_term$motive$go$(_type$1, _name$2, _inds$3) {
        var self = _inds$3;
        switch (self._) {
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Fm.Datatype.new':
                        var $4216 = self.name;
                        var $4217 = self.pars;
                        var $4218 = self.inds;
                        var $4219 = self.ctrs;
                        var _slf$8 = Fm$Term$ref$(_name$2);
                        var _slf$9 = (() => {
                            var $4222 = _slf$8;
                            var $4223 = $4217;
                            let _slf$10 = $4222;
                            let _var$9;
                            while ($4223._ === 'List.cons') {
                                _var$9 = $4223.head;
                                var $4222 = Fm$Term$app$(_slf$10, Fm$Term$ref$((() => {
                                    var self = _var$9;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4224 = self.eras;
                                            var $4225 = self.name;
                                            var $4226 = self.term;
                                            var $4227 = $4225;
                                            return $4227;
                                    };
                                })()));
                                _slf$10 = $4222;
                                $4223 = $4223.tail;
                            }
                            return _slf$10;
                        })();
                        var _slf$10 = (() => {
                            var $4229 = _slf$9;
                            var $4230 = $4218;
                            let _slf$11 = $4229;
                            let _var$10;
                            while ($4230._ === 'List.cons') {
                                _var$10 = $4230.head;
                                var $4229 = Fm$Term$app$(_slf$11, Fm$Term$ref$((() => {
                                    var self = _var$10;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4231 = self.eras;
                                            var $4232 = self.name;
                                            var $4233 = self.term;
                                            var $4234 = $4232;
                                            return $4234;
                                    };
                                })()));
                                _slf$11 = $4229;
                                $4230 = $4230.tail;
                            }
                            return _slf$11;
                        })();
                        var $4220 = Fm$Term$all$(Bool$false, "", "", _slf$10, (_s$11 => _x$12 => {
                            var $4235 = Fm$Term$typ;
                            return $4235;
                        }));
                        var $4215 = $4220;
                        break;
                };
                var $4214 = $4215;
                break;
            case 'List.cons':
                var $4236 = self.head;
                var $4237 = self.tail;
                var self = $4236;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4239 = self.eras;
                        var $4240 = self.name;
                        var $4241 = self.term;
                        var $4242 = Fm$Term$all$($4239, "", $4240, $4241, (_s$9 => _x$10 => {
                            var $4243 = Fm$Datatype$build_term$motive$go$(_type$1, _name$2, $4237);
                            return $4243;
                        }));
                        var $4238 = $4242;
                        break;
                };
                var $4214 = $4238;
                break;
        };
        return $4214;
    };
    const Fm$Datatype$build_term$motive$go = x0 => x1 => x2 => Fm$Datatype$build_term$motive$go$(x0, x1, x2);

    function Fm$Datatype$build_term$motive$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4245 = self.name;
                var $4246 = self.pars;
                var $4247 = self.inds;
                var $4248 = self.ctrs;
                var $4249 = Fm$Datatype$build_term$motive$go$(_type$1, $4245, $4247);
                var $4244 = $4249;
                break;
        };
        return $4244;
    };
    const Fm$Datatype$build_term$motive = x0 => Fm$Datatype$build_term$motive$(x0);

    function Fm$Datatype$build_term$constructor$go$(_type$1, _ctor$2, _args$3) {
        var self = _args$3;
        switch (self._) {
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Fm.Datatype.new':
                        var $4252 = self.name;
                        var $4253 = self.pars;
                        var $4254 = self.inds;
                        var $4255 = self.ctrs;
                        var self = _ctor$2;
                        switch (self._) {
                            case 'Fm.Constructor.new':
                                var $4257 = self.name;
                                var $4258 = self.args;
                                var $4259 = self.inds;
                                var _ret$11 = Fm$Term$ref$(Fm$Name$read$("P"));
                                var _ret$12 = (() => {
                                    var $4262 = _ret$11;
                                    var $4263 = $4259;
                                    let _ret$13 = $4262;
                                    let _var$12;
                                    while ($4263._ === 'List.cons') {
                                        _var$12 = $4263.head;
                                        var $4262 = Fm$Term$app$(_ret$13, (() => {
                                            var self = _var$12;
                                            switch (self._) {
                                                case 'Fm.Binder.new':
                                                    var $4264 = self.eras;
                                                    var $4265 = self.name;
                                                    var $4266 = self.term;
                                                    var $4267 = $4266;
                                                    return $4267;
                                            };
                                        })());
                                        _ret$13 = $4262;
                                        $4263 = $4263.tail;
                                    }
                                    return _ret$13;
                                })();
                                var _ctr$13 = String$flatten$(List$cons$($4252, List$cons$(Fm$Name$read$("."), List$cons$($4257, List$nil))));
                                var _slf$14 = Fm$Term$ref$(_ctr$13);
                                var _slf$15 = (() => {
                                    var $4269 = _slf$14;
                                    var $4270 = $4253;
                                    let _slf$16 = $4269;
                                    let _var$15;
                                    while ($4270._ === 'List.cons') {
                                        _var$15 = $4270.head;
                                        var $4269 = Fm$Term$app$(_slf$16, Fm$Term$ref$((() => {
                                            var self = _var$15;
                                            switch (self._) {
                                                case 'Fm.Binder.new':
                                                    var $4271 = self.eras;
                                                    var $4272 = self.name;
                                                    var $4273 = self.term;
                                                    var $4274 = $4272;
                                                    return $4274;
                                            };
                                        })()));
                                        _slf$16 = $4269;
                                        $4270 = $4270.tail;
                                    }
                                    return _slf$16;
                                })();
                                var _slf$16 = (() => {
                                    var $4276 = _slf$15;
                                    var $4277 = $4258;
                                    let _slf$17 = $4276;
                                    let _var$16;
                                    while ($4277._ === 'List.cons') {
                                        _var$16 = $4277.head;
                                        var $4276 = Fm$Term$app$(_slf$17, Fm$Term$ref$((() => {
                                            var self = _var$16;
                                            switch (self._) {
                                                case 'Fm.Binder.new':
                                                    var $4278 = self.eras;
                                                    var $4279 = self.name;
                                                    var $4280 = self.term;
                                                    var $4281 = $4279;
                                                    return $4281;
                                            };
                                        })()));
                                        _slf$17 = $4276;
                                        $4277 = $4277.tail;
                                    }
                                    return _slf$17;
                                })();
                                var $4260 = Fm$Term$app$(_ret$12, _slf$16);
                                var $4256 = $4260;
                                break;
                        };
                        var $4251 = $4256;
                        break;
                };
                var $4250 = $4251;
                break;
            case 'List.cons':
                var $4282 = self.head;
                var $4283 = self.tail;
                var self = $4282;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4285 = self.eras;
                        var $4286 = self.name;
                        var $4287 = self.term;
                        var _eras$9 = $4285;
                        var _name$10 = $4286;
                        var _xtyp$11 = $4287;
                        var _body$12 = Fm$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $4283);
                        var $4288 = Fm$Term$all$(_eras$9, "", _name$10, _xtyp$11, (_s$13 => _x$14 => {
                            var $4289 = _body$12;
                            return $4289;
                        }));
                        var $4284 = $4288;
                        break;
                };
                var $4250 = $4284;
                break;
        };
        return $4250;
    };
    const Fm$Datatype$build_term$constructor$go = x0 => x1 => x2 => Fm$Datatype$build_term$constructor$go$(x0, x1, x2);

    function Fm$Datatype$build_term$constructor$(_type$1, _ctor$2) {
        var self = _ctor$2;
        switch (self._) {
            case 'Fm.Constructor.new':
                var $4291 = self.name;
                var $4292 = self.args;
                var $4293 = self.inds;
                var $4294 = Fm$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $4292);
                var $4290 = $4294;
                break;
        };
        return $4290;
    };
    const Fm$Datatype$build_term$constructor = x0 => x1 => Fm$Datatype$build_term$constructor$(x0, x1);

    function Fm$Datatype$build_term$constructors$go$(_type$1, _name$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Fm.Datatype.new':
                        var $4297 = self.name;
                        var $4298 = self.pars;
                        var $4299 = self.inds;
                        var $4300 = self.ctrs;
                        var _ret$8 = Fm$Term$ref$(Fm$Name$read$("P"));
                        var _ret$9 = (() => {
                            var $4303 = _ret$8;
                            var $4304 = $4299;
                            let _ret$10 = $4303;
                            let _var$9;
                            while ($4304._ === 'List.cons') {
                                _var$9 = $4304.head;
                                var $4303 = Fm$Term$app$(_ret$10, Fm$Term$ref$((() => {
                                    var self = _var$9;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4305 = self.eras;
                                            var $4306 = self.name;
                                            var $4307 = self.term;
                                            var $4308 = $4306;
                                            return $4308;
                                    };
                                })()));
                                _ret$10 = $4303;
                                $4304 = $4304.tail;
                            }
                            return _ret$10;
                        })();
                        var $4301 = Fm$Term$app$(_ret$9, Fm$Term$ref$((_name$2 + ".Self")));
                        var $4296 = $4301;
                        break;
                };
                var $4295 = $4296;
                break;
            case 'List.cons':
                var $4309 = self.head;
                var $4310 = self.tail;
                var self = $4309;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4312 = self.name;
                        var $4313 = self.args;
                        var $4314 = self.inds;
                        var $4315 = Fm$Term$all$(Bool$false, "", $4312, Fm$Datatype$build_term$constructor$(_type$1, $4309), (_s$9 => _x$10 => {
                            var $4316 = Fm$Datatype$build_term$constructors$go$(_type$1, _name$2, $4310);
                            return $4316;
                        }));
                        var $4311 = $4315;
                        break;
                };
                var $4295 = $4311;
                break;
        };
        return $4295;
    };
    const Fm$Datatype$build_term$constructors$go = x0 => x1 => x2 => Fm$Datatype$build_term$constructors$go$(x0, x1, x2);

    function Fm$Datatype$build_term$constructors$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4318 = self.name;
                var $4319 = self.pars;
                var $4320 = self.inds;
                var $4321 = self.ctrs;
                var $4322 = Fm$Datatype$build_term$constructors$go$(_type$1, $4318, $4321);
                var $4317 = $4322;
                break;
        };
        return $4317;
    };
    const Fm$Datatype$build_term$constructors = x0 => Fm$Datatype$build_term$constructors$(x0);

    function Fm$Datatype$build_term$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.nil':
                        var $4325 = Fm$Term$all$(Bool$true, (_name$2 + ".Self"), Fm$Name$read$("P"), Fm$Datatype$build_term$motive$(_type$1), (_s$5 => _x$6 => {
                            var $4326 = Fm$Datatype$build_term$constructors$(_type$1);
                            return $4326;
                        }));
                        var $4324 = $4325;
                        break;
                    case 'List.cons':
                        var $4327 = self.head;
                        var $4328 = self.tail;
                        var self = $4327;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4330 = self.eras;
                                var $4331 = self.name;
                                var $4332 = self.term;
                                var $4333 = Fm$Term$lam$($4331, (_x$10 => {
                                    var $4334 = Fm$Datatype$build_term$go$(_type$1, _name$2, _pars$3, $4328);
                                    return $4334;
                                }));
                                var $4329 = $4333;
                                break;
                        };
                        var $4324 = $4329;
                        break;
                };
                var $4323 = $4324;
                break;
            case 'List.cons':
                var $4335 = self.head;
                var $4336 = self.tail;
                var self = $4335;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4338 = self.eras;
                        var $4339 = self.name;
                        var $4340 = self.term;
                        var $4341 = Fm$Term$lam$($4339, (_x$10 => {
                            var $4342 = Fm$Datatype$build_term$go$(_type$1, _name$2, $4336, _inds$4);
                            return $4342;
                        }));
                        var $4337 = $4341;
                        break;
                };
                var $4323 = $4337;
                break;
        };
        return $4323;
    };
    const Fm$Datatype$build_term$go = x0 => x1 => x2 => x3 => Fm$Datatype$build_term$go$(x0, x1, x2, x3);

    function Fm$Datatype$build_term$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4344 = self.name;
                var $4345 = self.pars;
                var $4346 = self.inds;
                var $4347 = self.ctrs;
                var $4348 = Fm$Datatype$build_term$go$(_type$1, $4344, $4345, $4346);
                var $4343 = $4348;
                break;
        };
        return $4343;
    };
    const Fm$Datatype$build_term = x0 => Fm$Datatype$build_term$(x0);

    function Fm$Datatype$build_type$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.nil':
                        var $4351 = Fm$Term$typ;
                        var $4350 = $4351;
                        break;
                    case 'List.cons':
                        var $4352 = self.head;
                        var $4353 = self.tail;
                        var self = $4352;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4355 = self.eras;
                                var $4356 = self.name;
                                var $4357 = self.term;
                                var $4358 = Fm$Term$all$(Bool$false, "", $4356, $4357, (_s$10 => _x$11 => {
                                    var $4359 = Fm$Datatype$build_type$go$(_type$1, _name$2, _pars$3, $4353);
                                    return $4359;
                                }));
                                var $4354 = $4358;
                                break;
                        };
                        var $4350 = $4354;
                        break;
                };
                var $4349 = $4350;
                break;
            case 'List.cons':
                var $4360 = self.head;
                var $4361 = self.tail;
                var self = $4360;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4363 = self.eras;
                        var $4364 = self.name;
                        var $4365 = self.term;
                        var $4366 = Fm$Term$all$(Bool$false, "", $4364, $4365, (_s$10 => _x$11 => {
                            var $4367 = Fm$Datatype$build_type$go$(_type$1, _name$2, $4361, _inds$4);
                            return $4367;
                        }));
                        var $4362 = $4366;
                        break;
                };
                var $4349 = $4362;
                break;
        };
        return $4349;
    };
    const Fm$Datatype$build_type$go = x0 => x1 => x2 => x3 => Fm$Datatype$build_type$go$(x0, x1, x2, x3);

    function Fm$Datatype$build_type$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4369 = self.name;
                var $4370 = self.pars;
                var $4371 = self.inds;
                var $4372 = self.ctrs;
                var $4373 = Fm$Datatype$build_type$go$(_type$1, $4369, $4370, $4371);
                var $4368 = $4373;
                break;
        };
        return $4368;
    };
    const Fm$Datatype$build_type = x0 => Fm$Datatype$build_type$(x0);

    function Fm$Constructor$build_term$opt$go$(_type$1, _ctor$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.nil':
                var self = _ctor$2;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4376 = self.name;
                        var $4377 = self.args;
                        var $4378 = self.inds;
                        var _ret$7 = Fm$Term$ref$($4376);
                        var _ret$8 = (() => {
                            var $4381 = _ret$7;
                            var $4382 = $4377;
                            let _ret$9 = $4381;
                            let _arg$8;
                            while ($4382._ === 'List.cons') {
                                _arg$8 = $4382.head;
                                var $4381 = Fm$Term$app$(_ret$9, Fm$Term$ref$((() => {
                                    var self = _arg$8;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4383 = self.eras;
                                            var $4384 = self.name;
                                            var $4385 = self.term;
                                            var $4386 = $4384;
                                            return $4386;
                                    };
                                })()));
                                _ret$9 = $4381;
                                $4382 = $4382.tail;
                            }
                            return _ret$9;
                        })();
                        var $4379 = _ret$8;
                        var $4375 = $4379;
                        break;
                };
                var $4374 = $4375;
                break;
            case 'List.cons':
                var $4387 = self.head;
                var $4388 = self.tail;
                var self = $4387;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4390 = self.name;
                        var $4391 = self.args;
                        var $4392 = self.inds;
                        var $4393 = Fm$Term$lam$($4390, (_x$9 => {
                            var $4394 = Fm$Constructor$build_term$opt$go$(_type$1, _ctor$2, $4388);
                            return $4394;
                        }));
                        var $4389 = $4393;
                        break;
                };
                var $4374 = $4389;
                break;
        };
        return $4374;
    };
    const Fm$Constructor$build_term$opt$go = x0 => x1 => x2 => Fm$Constructor$build_term$opt$go$(x0, x1, x2);

    function Fm$Constructor$build_term$opt$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4396 = self.name;
                var $4397 = self.pars;
                var $4398 = self.inds;
                var $4399 = self.ctrs;
                var $4400 = Fm$Constructor$build_term$opt$go$(_type$1, _ctor$2, $4399);
                var $4395 = $4400;
                break;
        };
        return $4395;
    };
    const Fm$Constructor$build_term$opt = x0 => x1 => Fm$Constructor$build_term$opt$(x0, x1);

    function Fm$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.nil':
                        var $4403 = Fm$Term$lam$(Fm$Name$read$("P"), (_x$6 => {
                            var $4404 = Fm$Constructor$build_term$opt$(_type$1, _ctor$2);
                            return $4404;
                        }));
                        var $4402 = $4403;
                        break;
                    case 'List.cons':
                        var $4405 = self.head;
                        var $4406 = self.tail;
                        var self = $4405;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4408 = self.eras;
                                var $4409 = self.name;
                                var $4410 = self.term;
                                var $4411 = Fm$Term$lam$($4409, (_x$11 => {
                                    var $4412 = Fm$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, $4406);
                                    return $4412;
                                }));
                                var $4407 = $4411;
                                break;
                        };
                        var $4402 = $4407;
                        break;
                };
                var $4401 = $4402;
                break;
            case 'List.cons':
                var $4413 = self.head;
                var $4414 = self.tail;
                var self = $4413;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4416 = self.eras;
                        var $4417 = self.name;
                        var $4418 = self.term;
                        var $4419 = Fm$Term$lam$($4417, (_x$11 => {
                            var $4420 = Fm$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, $4414, _args$5);
                            return $4420;
                        }));
                        var $4415 = $4419;
                        break;
                };
                var $4401 = $4415;
                break;
        };
        return $4401;
    };
    const Fm$Constructor$build_term$go = x0 => x1 => x2 => x3 => x4 => Fm$Constructor$build_term$go$(x0, x1, x2, x3, x4);

    function Fm$Constructor$build_term$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4422 = self.name;
                var $4423 = self.pars;
                var $4424 = self.inds;
                var $4425 = self.ctrs;
                var self = _ctor$2;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4427 = self.name;
                        var $4428 = self.args;
                        var $4429 = self.inds;
                        var $4430 = Fm$Constructor$build_term$go$(_type$1, _ctor$2, $4422, $4423, $4428);
                        var $4426 = $4430;
                        break;
                };
                var $4421 = $4426;
                break;
        };
        return $4421;
    };
    const Fm$Constructor$build_term = x0 => x1 => Fm$Constructor$build_term$(x0, x1);

    function Fm$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.nil':
                        var self = _type$1;
                        switch (self._) {
                            case 'Fm.Datatype.new':
                                var $4434 = self.name;
                                var $4435 = self.pars;
                                var $4436 = self.inds;
                                var $4437 = self.ctrs;
                                var self = _ctor$2;
                                switch (self._) {
                                    case 'Fm.Constructor.new':
                                        var $4439 = self.name;
                                        var $4440 = self.args;
                                        var $4441 = self.inds;
                                        var _type$13 = Fm$Term$ref$(_name$3);
                                        var _type$14 = (() => {
                                            var $4444 = _type$13;
                                            var $4445 = $4435;
                                            let _type$15 = $4444;
                                            let _var$14;
                                            while ($4445._ === 'List.cons') {
                                                _var$14 = $4445.head;
                                                var $4444 = Fm$Term$app$(_type$15, Fm$Term$ref$((() => {
                                                    var self = _var$14;
                                                    switch (self._) {
                                                        case 'Fm.Binder.new':
                                                            var $4446 = self.eras;
                                                            var $4447 = self.name;
                                                            var $4448 = self.term;
                                                            var $4449 = $4447;
                                                            return $4449;
                                                    };
                                                })()));
                                                _type$15 = $4444;
                                                $4445 = $4445.tail;
                                            }
                                            return _type$15;
                                        })();
                                        var _type$15 = (() => {
                                            var $4451 = _type$14;
                                            var $4452 = $4441;
                                            let _type$16 = $4451;
                                            let _var$15;
                                            while ($4452._ === 'List.cons') {
                                                _var$15 = $4452.head;
                                                var $4451 = Fm$Term$app$(_type$16, (() => {
                                                    var self = _var$15;
                                                    switch (self._) {
                                                        case 'Fm.Binder.new':
                                                            var $4453 = self.eras;
                                                            var $4454 = self.name;
                                                            var $4455 = self.term;
                                                            var $4456 = $4455;
                                                            return $4456;
                                                    };
                                                })());
                                                _type$16 = $4451;
                                                $4452 = $4452.tail;
                                            }
                                            return _type$16;
                                        })();
                                        var $4442 = _type$15;
                                        var $4438 = $4442;
                                        break;
                                };
                                var $4433 = $4438;
                                break;
                        };
                        var $4432 = $4433;
                        break;
                    case 'List.cons':
                        var $4457 = self.head;
                        var $4458 = self.tail;
                        var self = $4457;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4460 = self.eras;
                                var $4461 = self.name;
                                var $4462 = self.term;
                                var $4463 = Fm$Term$all$($4460, "", $4461, $4462, (_s$11 => _x$12 => {
                                    var $4464 = Fm$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, $4458);
                                    return $4464;
                                }));
                                var $4459 = $4463;
                                break;
                        };
                        var $4432 = $4459;
                        break;
                };
                var $4431 = $4432;
                break;
            case 'List.cons':
                var $4465 = self.head;
                var $4466 = self.tail;
                var self = $4465;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4468 = self.eras;
                        var $4469 = self.name;
                        var $4470 = self.term;
                        var $4471 = Fm$Term$all$($4468, "", $4469, $4470, (_s$11 => _x$12 => {
                            var $4472 = Fm$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, $4466, _args$5);
                            return $4472;
                        }));
                        var $4467 = $4471;
                        break;
                };
                var $4431 = $4467;
                break;
        };
        return $4431;
    };
    const Fm$Constructor$build_type$go = x0 => x1 => x2 => x3 => x4 => Fm$Constructor$build_type$go$(x0, x1, x2, x3, x4);

    function Fm$Constructor$build_type$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4474 = self.name;
                var $4475 = self.pars;
                var $4476 = self.inds;
                var $4477 = self.ctrs;
                var self = _ctor$2;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4479 = self.name;
                        var $4480 = self.args;
                        var $4481 = self.inds;
                        var $4482 = Fm$Constructor$build_type$go$(_type$1, _ctor$2, $4474, $4475, $4480);
                        var $4478 = $4482;
                        break;
                };
                var $4473 = $4478;
                break;
        };
        return $4473;
    };
    const Fm$Constructor$build_type = x0 => x1 => Fm$Constructor$build_type$(x0, x1);

    function Fm$Parser$file$adt$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Fm$Parser$datatype$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4484 = self.idx;
                var $4485 = self.code;
                var $4486 = self.err;
                var $4487 = Parser$Reply$error$($4484, $4485, $4486);
                var $4483 = $4487;
                break;
            case 'Parser.Reply.value':
                var $4488 = self.idx;
                var $4489 = self.code;
                var $4490 = self.val;
                var self = $4490;
                switch (self._) {
                    case 'Fm.Datatype.new':
                        var $4492 = self.name;
                        var $4493 = self.pars;
                        var $4494 = self.inds;
                        var $4495 = self.ctrs;
                        var _term$13 = Fm$Datatype$build_term$($4490);
                        var _term$14 = Fm$Term$bind$(List$nil, (_x$14 => {
                            var $4497 = (_x$14 + '1');
                            return $4497;
                        }), _term$13);
                        var _type$15 = Fm$Datatype$build_type$($4490);
                        var _type$16 = Fm$Term$bind$(List$nil, (_x$16 => {
                            var $4498 = (_x$16 + '0');
                            return $4498;
                        }), _type$15);
                        var _defs$17 = Fm$define$(_file$1, _code$2, $4492, _term$14, _type$16, Bool$false, _defs$3);
                        var _defs$18 = List$fold$($4495, _defs$17, (_ctr$18 => _defs$19 => {
                            var _typ_name$20 = $4492;
                            var _ctr_name$21 = String$flatten$(List$cons$(_typ_name$20, List$cons$(Fm$Name$read$("."), List$cons$((() => {
                                var self = _ctr$18;
                                switch (self._) {
                                    case 'Fm.Constructor.new':
                                        var $4500 = self.name;
                                        var $4501 = self.args;
                                        var $4502 = self.inds;
                                        var $4503 = $4500;
                                        return $4503;
                                };
                            })(), List$nil))));
                            var _ctr_term$22 = Fm$Constructor$build_term$($4490, _ctr$18);
                            var _ctr_term$23 = Fm$Term$bind$(List$nil, (_x$23 => {
                                var $4504 = (_x$23 + '1');
                                return $4504;
                            }), _ctr_term$22);
                            var _ctr_type$24 = Fm$Constructor$build_type$($4490, _ctr$18);
                            var _ctr_type$25 = Fm$Term$bind$(List$nil, (_x$25 => {
                                var $4505 = (_x$25 + '0');
                                return $4505;
                            }), _ctr_type$24);
                            var $4499 = Fm$define$(_file$1, _code$2, _ctr_name$21, _ctr_term$23, _ctr_type$25, Bool$false, _defs$19);
                            return $4499;
                        }));
                        var $4496 = (_idx$19 => _code$20 => {
                            var $4506 = Parser$Reply$value$(_idx$19, _code$20, _defs$18);
                            return $4506;
                        });
                        var $4491 = $4496;
                        break;
                };
                var $4491 = $4491($4488)($4489);
                var $4483 = $4491;
                break;
        };
        return $4483;
    };
    const Fm$Parser$file$adt = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$adt$(x0, x1, x2, x3, x4);

    function Parser$eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4508 = Parser$Reply$value$(_idx$1, _code$2, Unit$new);
            var $4507 = $4508;
        } else {
            var $4509 = self.charCodeAt(0);
            var $4510 = self.slice(1);
            var $4511 = Parser$Reply$error$(_idx$1, _code$2, "Expected end-of-file.");
            var $4507 = $4511;
        };
        return $4507;
    };
    const Parser$eof = x0 => x1 => Parser$eof$(x0, x1);

    function Fm$Parser$file$end$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Fm$Parser$spaces(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4513 = self.idx;
                var $4514 = self.code;
                var $4515 = self.err;
                var $4516 = Parser$Reply$error$($4513, $4514, $4515);
                var $4512 = $4516;
                break;
            case 'Parser.Reply.value':
                var $4517 = self.idx;
                var $4518 = self.code;
                var $4519 = self.val;
                var self = Parser$eof$($4517, $4518);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4521 = self.idx;
                        var $4522 = self.code;
                        var $4523 = self.err;
                        var $4524 = Parser$Reply$error$($4521, $4522, $4523);
                        var $4520 = $4524;
                        break;
                    case 'Parser.Reply.value':
                        var $4525 = self.idx;
                        var $4526 = self.code;
                        var $4527 = self.val;
                        var $4528 = Parser$Reply$value$($4525, $4526, _defs$3);
                        var $4520 = $4528;
                        break;
                };
                var $4512 = $4520;
                break;
        };
        return $4512;
    };
    const Fm$Parser$file$end = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$end$(x0, x1, x2, x3, x4);

    function Fm$Parser$file$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Parser$is_eof$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4530 = self.idx;
                var $4531 = self.code;
                var $4532 = self.err;
                var $4533 = Parser$Reply$error$($4530, $4531, $4532);
                var $4529 = $4533;
                break;
            case 'Parser.Reply.value':
                var $4534 = self.idx;
                var $4535 = self.code;
                var $4536 = self.val;
                var self = $4536;
                if (self) {
                    var $4538 = (_idx$9 => _code$10 => {
                        var $4539 = Parser$Reply$value$(_idx$9, _code$10, _defs$3);
                        return $4539;
                    });
                    var $4537 = $4538;
                } else {
                    var $4540 = (_idx$9 => _code$10 => {
                        var self = Parser$first_of$(List$cons$(Fm$Parser$file$def(_file$1)(_code$2)(_defs$3), List$cons$(Fm$Parser$file$adt(_file$1)(_code$2)(_defs$3), List$cons$(Fm$Parser$file$end(_file$1)(_code$2)(_defs$3), List$nil))))(_idx$9)(_code$10);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4542 = self.idx;
                                var $4543 = self.code;
                                var $4544 = self.err;
                                var $4545 = Parser$Reply$error$($4542, $4543, $4544);
                                var $4541 = $4545;
                                break;
                            case 'Parser.Reply.value':
                                var $4546 = self.idx;
                                var $4547 = self.code;
                                var $4548 = self.val;
                                var $4549 = Fm$Parser$file$(_file$1, _code$2, $4548, $4546, $4547);
                                var $4541 = $4549;
                                break;
                        };
                        return $4541;
                    });
                    var $4537 = $4540;
                };
                var $4537 = $4537($4534)($4535);
                var $4529 = $4537;
                break;
        };
        return $4529;
    };
    const Fm$Parser$file = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$(x0, x1, x2, x3, x4);

    function Either$(_A$1, _B$2) {
        var $4550 = null;
        return $4550;
    };
    const Either = x0 => x1 => Either$(x0, x1);

    function String$join$go$(_sep$1, _list$2, _fst$3) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $4552 = "";
                var $4551 = $4552;
                break;
            case 'List.cons':
                var $4553 = self.head;
                var $4554 = self.tail;
                var $4555 = String$flatten$(List$cons$((() => {
                    var self = _fst$3;
                    if (self) {
                        var $4556 = "";
                        return $4556;
                    } else {
                        var $4557 = _sep$1;
                        return $4557;
                    };
                })(), List$cons$($4553, List$cons$(String$join$go$(_sep$1, $4554, Bool$false), List$nil))));
                var $4551 = $4555;
                break;
        };
        return $4551;
    };
    const String$join$go = x0 => x1 => x2 => String$join$go$(x0, x1, x2);

    function String$join$(_sep$1, _list$2) {
        var $4558 = String$join$go$(_sep$1, _list$2, Bool$true);
        return $4558;
    };
    const String$join = x0 => x1 => String$join$(x0, x1);

    function Fm$highlight$end$(_col$1, _row$2, _res$3) {
        var $4559 = String$join$("\u{a}", _res$3);
        return $4559;
    };
    const Fm$highlight$end = x0 => x1 => x2 => Fm$highlight$end$(x0, x1, x2);

    function Maybe$extract$(_m$2, _a$4, _f$5) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $4561 = _a$4;
                var $4560 = $4561;
                break;
            case 'Maybe.some':
                var $4562 = self.value;
                var $4563 = _f$5($4562);
                var $4560 = $4563;
                break;
        };
        return $4560;
    };
    const Maybe$extract = x0 => x1 => x2 => Maybe$extract$(x0, x1, x2);

    function Nat$is_zero$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $4565 = Bool$true;
            var $4564 = $4565;
        } else {
            var $4566 = (self - 1n);
            var $4567 = Bool$false;
            var $4564 = $4567;
        };
        return $4564;
    };
    const Nat$is_zero = x0 => Nat$is_zero$(x0);

    function Nat$double$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $4569 = Nat$zero;
            var $4568 = $4569;
        } else {
            var $4570 = (self - 1n);
            var $4571 = Nat$succ$(Nat$succ$(Nat$double$($4570)));
            var $4568 = $4571;
        };
        return $4568;
    };
    const Nat$double = x0 => Nat$double$(x0);

    function Nat$pred$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $4573 = Nat$zero;
            var $4572 = $4573;
        } else {
            var $4574 = (self - 1n);
            var $4575 = $4574;
            var $4572 = $4575;
        };
        return $4572;
    };
    const Nat$pred = x0 => Nat$pred$(x0);

    function String$reverse$go$(_xs$1, _res$2) {
        var String$reverse$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$reverse$go = _xs$1 => _res$2 => String$reverse$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $4576 = _res$2;
                    return $4576;
                } else {
                    var $4577 = self.charCodeAt(0);
                    var $4578 = self.slice(1);
                    var $4579 = String$reverse$go$($4578, String$cons$($4577, _res$2));
                    return $4579;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$reverse$go = x0 => x1 => String$reverse$go$(x0, x1);

    function String$reverse$(_xs$1) {
        var $4580 = String$reverse$go$(_xs$1, String$nil);
        return $4580;
    };
    const String$reverse = x0 => String$reverse$(x0);

    function String$pad_right$(_size$1, _chr$2, _str$3) {
        var self = _size$1;
        if (self === 0n) {
            var $4582 = _str$3;
            var $4581 = $4582;
        } else {
            var $4583 = (self - 1n);
            var self = _str$3;
            if (self.length === 0) {
                var $4585 = String$cons$(_chr$2, String$pad_right$($4583, _chr$2, ""));
                var $4584 = $4585;
            } else {
                var $4586 = self.charCodeAt(0);
                var $4587 = self.slice(1);
                var $4588 = String$cons$($4586, String$pad_right$($4583, _chr$2, $4587));
                var $4584 = $4588;
            };
            var $4581 = $4584;
        };
        return $4581;
    };
    const String$pad_right = x0 => x1 => x2 => String$pad_right$(x0, x1, x2);

    function String$pad_left$(_size$1, _chr$2, _str$3) {
        var $4589 = String$reverse$(String$pad_right$(_size$1, _chr$2, String$reverse$(_str$3)));
        return $4589;
    };
    const String$pad_left = x0 => x1 => x2 => String$pad_left$(x0, x1, x2);

    function Either$left$(_value$3) {
        var $4590 = ({
            _: 'Either.left',
            'value': _value$3
        });
        return $4590;
    };
    const Either$left = x0 => Either$left$(x0);

    function Either$right$(_value$3) {
        var $4591 = ({
            _: 'Either.right',
            'value': _value$3
        });
        return $4591;
    };
    const Either$right = x0 => Either$right$(x0);

    function Nat$sub_rem$(_n$1, _m$2) {
        var Nat$sub_rem$ = (_n$1, _m$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2]
        });
        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);
        var arg = [_n$1, _m$2];
        while (true) {
            let [_n$1, _m$2] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4592 = Either$left$(_n$1);
                    return $4592;
                } else {
                    var $4593 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4595 = Either$right$(Nat$succ$($4593));
                        var $4594 = $4595;
                    } else {
                        var $4596 = (self - 1n);
                        var $4597 = Nat$sub_rem$($4596, $4593);
                        var $4594 = $4597;
                    };
                    return $4594;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);

    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {
        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _d$3]
        });
        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);
        var arg = [_n$1, _m$2, _d$3];
        while (true) {
            let [_n$1, _m$2, _d$3] = arg;
            var R = (() => {
                var self = Nat$sub_rem$(_n$1, _m$2);
                switch (self._) {
                    case 'Either.left':
                        var $4598 = self.value;
                        var $4599 = Nat$div_mod$go$($4598, _m$2, Nat$succ$(_d$3));
                        return $4599;
                    case 'Either.right':
                        var $4600 = self.value;
                        var $4601 = Pair$new$(_d$3, _n$1);
                        return $4601;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);
    const Nat$div_mod = a0 => a1 => (({
        _: 'Pair.new',
        'fst': a0 / a1,
        'snd': a0 % a1
    }));

    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {
        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_base$1, _nat$2, _res$3]
        });
        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);
        var arg = [_base$1, _nat$2, _res$3];
        while (true) {
            let [_base$1, _nat$2, _res$3] = arg;
            var R = (() => {
                var self = (({
                    _: 'Pair.new',
                    'fst': _nat$2 / _base$1,
                    'snd': _nat$2 % _base$1
                }));
                switch (self._) {
                    case 'Pair.new':
                        var $4602 = self.fst;
                        var $4603 = self.snd;
                        var self = $4602;
                        if (self === 0n) {
                            var $4605 = List$cons$($4603, _res$3);
                            var $4604 = $4605;
                        } else {
                            var $4606 = (self - 1n);
                            var $4607 = Nat$to_base$go$(_base$1, $4602, List$cons$($4603, _res$3));
                            var $4604 = $4607;
                        };
                        return $4604;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);

    function Nat$to_base$(_base$1, _nat$2) {
        var $4608 = Nat$to_base$go$(_base$1, _nat$2, List$nil);
        return $4608;
    };
    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);

    function Nat$mod$go$(_n$1, _m$2, _r$3) {
        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _r$3]
        });
        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);
        var arg = [_n$1, _m$2, _r$3];
        while (true) {
            let [_n$1, _m$2, _r$3] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4609 = Nat$mod$go$(_n$1, _r$3, _m$2);
                    return $4609;
                } else {
                    var $4610 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4612 = _r$3;
                        var $4611 = $4612;
                    } else {
                        var $4613 = (self - 1n);
                        var $4614 = Nat$mod$go$($4613, $4610, Nat$succ$(_r$3));
                        var $4611 = $4614;
                    };
                    return $4611;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);

    function Nat$mod$(_n$1, _m$2) {
        var $4615 = Nat$mod$go$(_n$1, _m$2, 0n);
        return $4615;
    };
    const Nat$mod = x0 => x1 => Nat$mod$(x0, x1);
    const Nat$lte = a0 => a1 => (a0 <= a1);

    function Nat$show_digit$(_base$1, _n$2) {
        var _m$3 = Nat$mod$(_n$2, _base$1);
        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
        var self = ((_base$1 > 0n) && (_base$1 <= 64n));
        if (self) {
            var self = List$at$(_m$3, _base64$4);
            switch (self._) {
                case 'Maybe.none':
                    var $4618 = 35;
                    var $4617 = $4618;
                    break;
                case 'Maybe.some':
                    var $4619 = self.value;
                    var $4620 = $4619;
                    var $4617 = $4620;
                    break;
            };
            var $4616 = $4617;
        } else {
            var $4621 = 35;
            var $4616 = $4621;
        };
        return $4616;
    };
    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);

    function Nat$to_string_base$(_base$1, _nat$2) {
        var $4622 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {
            var $4623 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);
            return $4623;
        }));
        return $4622;
    };
    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);

    function Nat$show$(_n$1) {
        var $4624 = Nat$to_string_base$(10n, _n$1);
        return $4624;
    };
    const Nat$show = x0 => Nat$show$(x0);
    const Bool$not = a0 => (!a0);

    function Fm$color$(_col$1, _str$2) {
        var $4625 = String$cons$(27, String$cons$(91, (_col$1 + String$cons$(109, (_str$2 + String$cons$(27, String$cons$(91, String$cons$(48, String$cons$(109, String$nil)))))))));
        return $4625;
    };
    const Fm$color = x0 => x1 => Fm$color$(x0, x1);
    const Nat$eql = a0 => a1 => (a0 === a1);

    function List$take$(_n$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.nil':
                var $4627 = List$nil;
                var $4626 = $4627;
                break;
            case 'List.cons':
                var $4628 = self.head;
                var $4629 = self.tail;
                var self = _n$2;
                if (self === 0n) {
                    var $4631 = List$nil;
                    var $4630 = $4631;
                } else {
                    var $4632 = (self - 1n);
                    var $4633 = List$cons$($4628, List$take$($4632, $4629));
                    var $4630 = $4633;
                };
                var $4626 = $4630;
                break;
        };
        return $4626;
    };
    const List$take = x0 => x1 => List$take$(x0, x1);

    function Fm$highlight$tc$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) {
        var Fm$highlight$tc$ = (_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) => ({
            ctr: 'TCO',
            arg: [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8]
        });
        var Fm$highlight$tc = _code$1 => _ix0$2 => _ix1$3 => _col$4 => _row$5 => _lft$6 => _lin$7 => _res$8 => Fm$highlight$tc$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8);
        var arg = [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8];
        while (true) {
            let [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8] = arg;
            var R = (() => {
                var _spa$9 = 3n;
                var self = _code$1;
                if (self.length === 0) {
                    var $4635 = Fm$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                    var $4634 = $4635;
                } else {
                    var $4636 = self.charCodeAt(0);
                    var $4637 = self.slice(1);
                    var self = ($4636 === 10);
                    if (self) {
                        var _stp$12 = Maybe$extract$(_lft$6, Bool$false, Nat$is_zero);
                        var self = _stp$12;
                        if (self) {
                            var $4640 = Fm$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                            var $4639 = $4640;
                        } else {
                            var _siz$13 = Nat$succ$(Nat$double$(_spa$9));
                            var self = _ix1$3;
                            if (self === 0n) {
                                var self = _lft$6;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $4643 = Maybe$some$(_spa$9);
                                        var $4642 = $4643;
                                        break;
                                    case 'Maybe.some':
                                        var $4644 = self.value;
                                        var $4645 = Maybe$some$(Nat$pred$($4644));
                                        var $4642 = $4645;
                                        break;
                                };
                                var _lft$14 = $4642;
                            } else {
                                var $4646 = (self - 1n);
                                var $4647 = _lft$6;
                                var _lft$14 = $4647;
                            };
                            var _ix0$15 = Nat$pred$(_ix0$2);
                            var _ix1$16 = Nat$pred$(_ix1$3);
                            var _col$17 = 0n;
                            var _row$18 = Nat$succ$(_row$5);
                            var _res$19 = List$cons$(String$reverse$(_lin$7), _res$8);
                            var _lin$20 = String$reverse$(String$flatten$(List$cons$(String$pad_left$(4n, 32, Nat$show$(_row$18)), List$cons$(" | ", List$nil))));
                            var $4641 = Fm$highlight$tc$($4637, _ix0$15, _ix1$16, _col$17, _row$18, _lft$14, _lin$20, _res$19);
                            var $4639 = $4641;
                        };
                        var $4638 = $4639;
                    } else {
                        var _chr$12 = String$cons$($4636, String$nil);
                        var self = (Nat$is_zero$(_ix0$2) && (!Nat$is_zero$(_ix1$3)));
                        if (self) {
                            var $4649 = String$reverse$(Fm$color$("31", Fm$color$("4", _chr$12)));
                            var _chr$13 = $4649;
                        } else {
                            var $4650 = _chr$12;
                            var _chr$13 = $4650;
                        };
                        var self = (_ix0$2 === 1n);
                        if (self) {
                            var $4651 = List$take$(_spa$9, _res$8);
                            var _res$14 = $4651;
                        } else {
                            var $4652 = _res$8;
                            var _res$14 = $4652;
                        };
                        var _ix0$15 = Nat$pred$(_ix0$2);
                        var _ix1$16 = Nat$pred$(_ix1$3);
                        var _col$17 = Nat$succ$(_col$4);
                        var _lin$18 = String$flatten$(List$cons$(_chr$13, List$cons$(_lin$7, List$nil)));
                        var $4648 = Fm$highlight$tc$($4637, _ix0$15, _ix1$16, _col$17, _row$5, _lft$6, _lin$18, _res$14);
                        var $4638 = $4648;
                    };
                    var $4634 = $4638;
                };
                return $4634;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$highlight$tc = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Fm$highlight$tc$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Fm$highlight$(_code$1, _idx0$2, _idx1$3) {
        var $4653 = Fm$highlight$tc$(_code$1, _idx0$2, _idx1$3, 0n, 1n, Maybe$none, String$reverse$("   1 | "), List$nil);
        return $4653;
    };
    const Fm$highlight = x0 => x1 => x2 => Fm$highlight$(x0, x1, x2);

    function Fm$Defs$read$(_file$1, _code$2, _defs$3) {
        var self = Fm$Parser$file$(_file$1, _code$2, _defs$3, 0n, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4655 = self.idx;
                var $4656 = self.code;
                var $4657 = self.err;
                var _err$7 = $4657;
                var _hig$8 = Fm$highlight$(_code$2, $4655, Nat$succ$($4655));
                var _str$9 = String$flatten$(List$cons$(_err$7, List$cons$("\u{a}", List$cons$(_hig$8, List$nil))));
                var $4658 = Either$left$(_str$9);
                var $4654 = $4658;
                break;
            case 'Parser.Reply.value':
                var $4659 = self.idx;
                var $4660 = self.code;
                var $4661 = self.val;
                var $4662 = Either$right$($4661);
                var $4654 = $4662;
                break;
        };
        return $4654;
    };
    const Fm$Defs$read = x0 => x1 => x2 => Fm$Defs$read$(x0, x1, x2);

    function Fm$Synth$load$(_name$1, _defs$2) {
        var _file$3 = Fm$Synth$file_of$(_name$1);
        var $4663 = IO$monad$((_m$bind$4 => _m$pure$5 => {
            var $4664 = _m$bind$4;
            return $4664;
        }))(IO$get_file$(_file$3))((_code$4 => {
            var _read$5 = Fm$Defs$read$(_file$3, _code$4, _defs$2);
            var self = _read$5;
            switch (self._) {
                case 'Either.left':
                    var $4666 = self.value;
                    var $4667 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                        var $4668 = _m$pure$8;
                        return $4668;
                    }))(Maybe$none);
                    var $4665 = $4667;
                    break;
                case 'Either.right':
                    var $4669 = self.value;
                    var _defs$7 = $4669;
                    var self = Fm$get$(_name$1, _defs$7);
                    switch (self._) {
                        case 'Maybe.none':
                            var $4671 = IO$monad$((_m$bind$8 => _m$pure$9 => {
                                var $4672 = _m$pure$9;
                                return $4672;
                            }))(Maybe$none);
                            var $4670 = $4671;
                            break;
                        case 'Maybe.some':
                            var $4673 = self.value;
                            var $4674 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                var $4675 = _m$pure$10;
                                return $4675;
                            }))(Maybe$some$(_defs$7));
                            var $4670 = $4674;
                            break;
                    };
                    var $4665 = $4670;
                    break;
            };
            return $4665;
        }));
        return $4663;
    };
    const Fm$Synth$load = x0 => x1 => Fm$Synth$load$(x0, x1);
    const Fm$Status$wait = ({
        _: 'Fm.Status.wait'
    });

    function Fm$Check$(_V$1) {
        var $4676 = null;
        return $4676;
    };
    const Fm$Check = x0 => Fm$Check$(x0);

    function Fm$Check$result$(_value$2, _errors$3) {
        var $4677 = ({
            _: 'Fm.Check.result',
            'value': _value$2,
            'errors': _errors$3
        });
        return $4677;
    };
    const Fm$Check$result = x0 => x1 => Fm$Check$result$(x0, x1);

    function Fm$Error$undefined_reference$(_origin$1, _name$2) {
        var $4678 = ({
            _: 'Fm.Error.undefined_reference',
            'origin': _origin$1,
            'name': _name$2
        });
        return $4678;
    };
    const Fm$Error$undefined_reference = x0 => x1 => Fm$Error$undefined_reference$(x0, x1);

    function Fm$Error$waiting$(_name$1) {
        var $4679 = ({
            _: 'Fm.Error.waiting',
            'name': _name$1
        });
        return $4679;
    };
    const Fm$Error$waiting = x0 => Fm$Error$waiting$(x0);

    function Fm$Error$indirect$(_name$1) {
        var $4680 = ({
            _: 'Fm.Error.indirect',
            'name': _name$1
        });
        return $4680;
    };
    const Fm$Error$indirect = x0 => Fm$Error$indirect$(x0);

    function Maybe$mapped$(_m$2, _f$4) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $4682 = Maybe$none;
                var $4681 = $4682;
                break;
            case 'Maybe.some':
                var $4683 = self.value;
                var $4684 = Maybe$some$(_f$4($4683));
                var $4681 = $4684;
                break;
        };
        return $4681;
    };
    const Maybe$mapped = x0 => x1 => Maybe$mapped$(x0, x1);

    function Fm$MPath$o$(_path$1) {
        var $4685 = Maybe$mapped$(_path$1, Fm$Path$o);
        return $4685;
    };
    const Fm$MPath$o = x0 => Fm$MPath$o$(x0);

    function Fm$MPath$i$(_path$1) {
        var $4686 = Maybe$mapped$(_path$1, Fm$Path$i);
        return $4686;
    };
    const Fm$MPath$i = x0 => Fm$MPath$i$(x0);

    function Fm$Error$patch$(_path$1, _term$2) {
        var $4687 = ({
            _: 'Fm.Error.patch',
            'path': _path$1,
            'term': _term$2
        });
        return $4687;
    };
    const Fm$Error$patch = x0 => x1 => Fm$Error$patch$(x0, x1);

    function Fm$MPath$to_bits$(_path$1) {
        var self = _path$1;
        switch (self._) {
            case 'Maybe.none':
                var $4689 = Bits$e;
                var $4688 = $4689;
                break;
            case 'Maybe.some':
                var $4690 = self.value;
                var $4691 = $4690(Bits$e);
                var $4688 = $4691;
                break;
        };
        return $4688;
    };
    const Fm$MPath$to_bits = x0 => Fm$MPath$to_bits$(x0);

    function Fm$Error$type_mismatch$(_origin$1, _expected$2, _detected$3, _context$4) {
        var $4692 = ({
            _: 'Fm.Error.type_mismatch',
            'origin': _origin$1,
            'expected': _expected$2,
            'detected': _detected$3,
            'context': _context$4
        });
        return $4692;
    };
    const Fm$Error$type_mismatch = x0 => x1 => x2 => x3 => Fm$Error$type_mismatch$(x0, x1, x2, x3);

    function Fm$Error$show_goal$(_name$1, _dref$2, _verb$3, _goal$4, _context$5) {
        var $4693 = ({
            _: 'Fm.Error.show_goal',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3,
            'goal': _goal$4,
            'context': _context$5
        });
        return $4693;
    };
    const Fm$Error$show_goal = x0 => x1 => x2 => x3 => x4 => Fm$Error$show_goal$(x0, x1, x2, x3, x4);

    function Fm$Term$normalize$(_term$1, _defs$2) {
        var self = Fm$Term$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Fm.Term.var':
                var $4695 = self.name;
                var $4696 = self.indx;
                var $4697 = Fm$Term$var$($4695, $4696);
                var $4694 = $4697;
                break;
            case 'Fm.Term.ref':
                var $4698 = self.name;
                var $4699 = Fm$Term$ref$($4698);
                var $4694 = $4699;
                break;
            case 'Fm.Term.typ':
                var $4700 = Fm$Term$typ;
                var $4694 = $4700;
                break;
            case 'Fm.Term.all':
                var $4701 = self.eras;
                var $4702 = self.self;
                var $4703 = self.name;
                var $4704 = self.xtyp;
                var $4705 = self.body;
                var $4706 = Fm$Term$all$($4701, $4702, $4703, Fm$Term$normalize$($4704, _defs$2), (_s$8 => _x$9 => {
                    var $4707 = Fm$Term$normalize$($4705(_s$8)(_x$9), _defs$2);
                    return $4707;
                }));
                var $4694 = $4706;
                break;
            case 'Fm.Term.lam':
                var $4708 = self.name;
                var $4709 = self.body;
                var $4710 = Fm$Term$lam$($4708, (_x$5 => {
                    var $4711 = Fm$Term$normalize$($4709(_x$5), _defs$2);
                    return $4711;
                }));
                var $4694 = $4710;
                break;
            case 'Fm.Term.app':
                var $4712 = self.func;
                var $4713 = self.argm;
                var $4714 = Fm$Term$app$(Fm$Term$normalize$($4712, _defs$2), Fm$Term$normalize$($4713, _defs$2));
                var $4694 = $4714;
                break;
            case 'Fm.Term.let':
                var $4715 = self.name;
                var $4716 = self.expr;
                var $4717 = self.body;
                var $4718 = Fm$Term$let$($4715, Fm$Term$normalize$($4716, _defs$2), (_x$6 => {
                    var $4719 = Fm$Term$normalize$($4717(_x$6), _defs$2);
                    return $4719;
                }));
                var $4694 = $4718;
                break;
            case 'Fm.Term.def':
                var $4720 = self.name;
                var $4721 = self.expr;
                var $4722 = self.body;
                var $4723 = Fm$Term$def$($4720, Fm$Term$normalize$($4721, _defs$2), (_x$6 => {
                    var $4724 = Fm$Term$normalize$($4722(_x$6), _defs$2);
                    return $4724;
                }));
                var $4694 = $4723;
                break;
            case 'Fm.Term.ann':
                var $4725 = self.done;
                var $4726 = self.term;
                var $4727 = self.type;
                var $4728 = Fm$Term$ann$($4725, Fm$Term$normalize$($4726, _defs$2), Fm$Term$normalize$($4727, _defs$2));
                var $4694 = $4728;
                break;
            case 'Fm.Term.gol':
                var $4729 = self.name;
                var $4730 = self.dref;
                var $4731 = self.verb;
                var $4732 = Fm$Term$gol$($4729, $4730, $4731);
                var $4694 = $4732;
                break;
            case 'Fm.Term.hol':
                var $4733 = self.path;
                var $4734 = Fm$Term$hol$($4733);
                var $4694 = $4734;
                break;
            case 'Fm.Term.nat':
                var $4735 = self.natx;
                var $4736 = Fm$Term$nat$($4735);
                var $4694 = $4736;
                break;
            case 'Fm.Term.chr':
                var $4737 = self.chrx;
                var $4738 = Fm$Term$chr$($4737);
                var $4694 = $4738;
                break;
            case 'Fm.Term.str':
                var $4739 = self.strx;
                var $4740 = Fm$Term$str$($4739);
                var $4694 = $4740;
                break;
            case 'Fm.Term.cse':
                var $4741 = self.path;
                var $4742 = self.expr;
                var $4743 = self.name;
                var $4744 = self.with;
                var $4745 = self.cses;
                var $4746 = self.moti;
                var $4747 = _term$1;
                var $4694 = $4747;
                break;
            case 'Fm.Term.ori':
                var $4748 = self.orig;
                var $4749 = self.expr;
                var $4750 = Fm$Term$normalize$($4749, _defs$2);
                var $4694 = $4750;
                break;
        };
        return $4694;
    };
    const Fm$Term$normalize = x0 => x1 => Fm$Term$normalize$(x0, x1);

    function List$tail$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.nil':
                var $4752 = List$nil;
                var $4751 = $4752;
                break;
            case 'List.cons':
                var $4753 = self.head;
                var $4754 = self.tail;
                var $4755 = $4754;
                var $4751 = $4755;
                break;
        };
        return $4751;
    };
    const List$tail = x0 => List$tail$(x0);

    function Fm$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4) {
        var Fm$SmartMotive$vals$cont$ = (_expr$1, _term$2, _args$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_expr$1, _term$2, _args$3, _defs$4]
        });
        var Fm$SmartMotive$vals$cont = _expr$1 => _term$2 => _args$3 => _defs$4 => Fm$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4);
        var arg = [_expr$1, _term$2, _args$3, _defs$4];
        while (true) {
            let [_expr$1, _term$2, _args$3, _defs$4] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $4756 = self.name;
                        var $4757 = self.indx;
                        var $4758 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4758;
                    case 'Fm.Term.ref':
                        var $4759 = self.name;
                        var $4760 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4760;
                    case 'Fm.Term.typ':
                        var $4761 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4761;
                    case 'Fm.Term.all':
                        var $4762 = self.eras;
                        var $4763 = self.self;
                        var $4764 = self.name;
                        var $4765 = self.xtyp;
                        var $4766 = self.body;
                        var $4767 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4767;
                    case 'Fm.Term.lam':
                        var $4768 = self.name;
                        var $4769 = self.body;
                        var $4770 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4770;
                    case 'Fm.Term.app':
                        var $4771 = self.func;
                        var $4772 = self.argm;
                        var $4773 = Fm$SmartMotive$vals$cont$(_expr$1, $4771, List$cons$($4772, _args$3), _defs$4);
                        return $4773;
                    case 'Fm.Term.let':
                        var $4774 = self.name;
                        var $4775 = self.expr;
                        var $4776 = self.body;
                        var $4777 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4777;
                    case 'Fm.Term.def':
                        var $4778 = self.name;
                        var $4779 = self.expr;
                        var $4780 = self.body;
                        var $4781 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4781;
                    case 'Fm.Term.ann':
                        var $4782 = self.done;
                        var $4783 = self.term;
                        var $4784 = self.type;
                        var $4785 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4785;
                    case 'Fm.Term.gol':
                        var $4786 = self.name;
                        var $4787 = self.dref;
                        var $4788 = self.verb;
                        var $4789 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4789;
                    case 'Fm.Term.hol':
                        var $4790 = self.path;
                        var $4791 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4791;
                    case 'Fm.Term.nat':
                        var $4792 = self.natx;
                        var $4793 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4793;
                    case 'Fm.Term.chr':
                        var $4794 = self.chrx;
                        var $4795 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4795;
                    case 'Fm.Term.str':
                        var $4796 = self.strx;
                        var $4797 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4797;
                    case 'Fm.Term.cse':
                        var $4798 = self.path;
                        var $4799 = self.expr;
                        var $4800 = self.name;
                        var $4801 = self.with;
                        var $4802 = self.cses;
                        var $4803 = self.moti;
                        var $4804 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4804;
                    case 'Fm.Term.ori':
                        var $4805 = self.orig;
                        var $4806 = self.expr;
                        var $4807 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4807;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$SmartMotive$vals$cont = x0 => x1 => x2 => x3 => Fm$SmartMotive$vals$cont$(x0, x1, x2, x3);

    function Fm$SmartMotive$vals$(_expr$1, _type$2, _defs$3) {
        var Fm$SmartMotive$vals$ = (_expr$1, _type$2, _defs$3) => ({
            ctr: 'TCO',
            arg: [_expr$1, _type$2, _defs$3]
        });
        var Fm$SmartMotive$vals = _expr$1 => _type$2 => _defs$3 => Fm$SmartMotive$vals$(_expr$1, _type$2, _defs$3);
        var arg = [_expr$1, _type$2, _defs$3];
        while (true) {
            let [_expr$1, _type$2, _defs$3] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_type$2, _defs$3);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $4808 = self.name;
                        var $4809 = self.indx;
                        var $4810 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4810;
                    case 'Fm.Term.ref':
                        var $4811 = self.name;
                        var $4812 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4812;
                    case 'Fm.Term.typ':
                        var $4813 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4813;
                    case 'Fm.Term.all':
                        var $4814 = self.eras;
                        var $4815 = self.self;
                        var $4816 = self.name;
                        var $4817 = self.xtyp;
                        var $4818 = self.body;
                        var $4819 = Fm$SmartMotive$vals$(_expr$1, $4818(Fm$Term$typ)(Fm$Term$typ), _defs$3);
                        return $4819;
                    case 'Fm.Term.lam':
                        var $4820 = self.name;
                        var $4821 = self.body;
                        var $4822 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4822;
                    case 'Fm.Term.app':
                        var $4823 = self.func;
                        var $4824 = self.argm;
                        var $4825 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4825;
                    case 'Fm.Term.let':
                        var $4826 = self.name;
                        var $4827 = self.expr;
                        var $4828 = self.body;
                        var $4829 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4829;
                    case 'Fm.Term.def':
                        var $4830 = self.name;
                        var $4831 = self.expr;
                        var $4832 = self.body;
                        var $4833 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4833;
                    case 'Fm.Term.ann':
                        var $4834 = self.done;
                        var $4835 = self.term;
                        var $4836 = self.type;
                        var $4837 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4837;
                    case 'Fm.Term.gol':
                        var $4838 = self.name;
                        var $4839 = self.dref;
                        var $4840 = self.verb;
                        var $4841 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4841;
                    case 'Fm.Term.hol':
                        var $4842 = self.path;
                        var $4843 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4843;
                    case 'Fm.Term.nat':
                        var $4844 = self.natx;
                        var $4845 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4845;
                    case 'Fm.Term.chr':
                        var $4846 = self.chrx;
                        var $4847 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4847;
                    case 'Fm.Term.str':
                        var $4848 = self.strx;
                        var $4849 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4849;
                    case 'Fm.Term.cse':
                        var $4850 = self.path;
                        var $4851 = self.expr;
                        var $4852 = self.name;
                        var $4853 = self.with;
                        var $4854 = self.cses;
                        var $4855 = self.moti;
                        var $4856 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4856;
                    case 'Fm.Term.ori':
                        var $4857 = self.orig;
                        var $4858 = self.expr;
                        var $4859 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4859;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$SmartMotive$vals = x0 => x1 => x2 => Fm$SmartMotive$vals$(x0, x1, x2);

    function Fm$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4) {
        var Fm$SmartMotive$nams$cont$ = (_name$1, _term$2, _binds$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_name$1, _term$2, _binds$3, _defs$4]
        });
        var Fm$SmartMotive$nams$cont = _name$1 => _term$2 => _binds$3 => _defs$4 => Fm$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4);
        var arg = [_name$1, _term$2, _binds$3, _defs$4];
        while (true) {
            let [_name$1, _term$2, _binds$3, _defs$4] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $4860 = self.name;
                        var $4861 = self.indx;
                        var $4862 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4862;
                    case 'Fm.Term.ref':
                        var $4863 = self.name;
                        var $4864 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4864;
                    case 'Fm.Term.typ':
                        var $4865 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4865;
                    case 'Fm.Term.all':
                        var $4866 = self.eras;
                        var $4867 = self.self;
                        var $4868 = self.name;
                        var $4869 = self.xtyp;
                        var $4870 = self.body;
                        var $4871 = Fm$SmartMotive$nams$cont$(_name$1, $4870(Fm$Term$ref$($4867))(Fm$Term$ref$($4868)), List$cons$(String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($4868, List$nil)))), _binds$3), _defs$4);
                        return $4871;
                    case 'Fm.Term.lam':
                        var $4872 = self.name;
                        var $4873 = self.body;
                        var $4874 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4874;
                    case 'Fm.Term.app':
                        var $4875 = self.func;
                        var $4876 = self.argm;
                        var $4877 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4877;
                    case 'Fm.Term.let':
                        var $4878 = self.name;
                        var $4879 = self.expr;
                        var $4880 = self.body;
                        var $4881 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4881;
                    case 'Fm.Term.def':
                        var $4882 = self.name;
                        var $4883 = self.expr;
                        var $4884 = self.body;
                        var $4885 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4885;
                    case 'Fm.Term.ann':
                        var $4886 = self.done;
                        var $4887 = self.term;
                        var $4888 = self.type;
                        var $4889 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4889;
                    case 'Fm.Term.gol':
                        var $4890 = self.name;
                        var $4891 = self.dref;
                        var $4892 = self.verb;
                        var $4893 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4893;
                    case 'Fm.Term.hol':
                        var $4894 = self.path;
                        var $4895 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4895;
                    case 'Fm.Term.nat':
                        var $4896 = self.natx;
                        var $4897 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4897;
                    case 'Fm.Term.chr':
                        var $4898 = self.chrx;
                        var $4899 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4899;
                    case 'Fm.Term.str':
                        var $4900 = self.strx;
                        var $4901 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4901;
                    case 'Fm.Term.cse':
                        var $4902 = self.path;
                        var $4903 = self.expr;
                        var $4904 = self.name;
                        var $4905 = self.with;
                        var $4906 = self.cses;
                        var $4907 = self.moti;
                        var $4908 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4908;
                    case 'Fm.Term.ori':
                        var $4909 = self.orig;
                        var $4910 = self.expr;
                        var $4911 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4911;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$SmartMotive$nams$cont = x0 => x1 => x2 => x3 => Fm$SmartMotive$nams$cont$(x0, x1, x2, x3);

    function Fm$SmartMotive$nams$(_name$1, _type$2, _defs$3) {
        var self = Fm$Term$reduce$(_type$2, _defs$3);
        switch (self._) {
            case 'Fm.Term.var':
                var $4913 = self.name;
                var $4914 = self.indx;
                var $4915 = List$nil;
                var $4912 = $4915;
                break;
            case 'Fm.Term.ref':
                var $4916 = self.name;
                var $4917 = List$nil;
                var $4912 = $4917;
                break;
            case 'Fm.Term.typ':
                var $4918 = List$nil;
                var $4912 = $4918;
                break;
            case 'Fm.Term.all':
                var $4919 = self.eras;
                var $4920 = self.self;
                var $4921 = self.name;
                var $4922 = self.xtyp;
                var $4923 = self.body;
                var $4924 = Fm$SmartMotive$nams$cont$(_name$1, $4922, List$nil, _defs$3);
                var $4912 = $4924;
                break;
            case 'Fm.Term.lam':
                var $4925 = self.name;
                var $4926 = self.body;
                var $4927 = List$nil;
                var $4912 = $4927;
                break;
            case 'Fm.Term.app':
                var $4928 = self.func;
                var $4929 = self.argm;
                var $4930 = List$nil;
                var $4912 = $4930;
                break;
            case 'Fm.Term.let':
                var $4931 = self.name;
                var $4932 = self.expr;
                var $4933 = self.body;
                var $4934 = List$nil;
                var $4912 = $4934;
                break;
            case 'Fm.Term.def':
                var $4935 = self.name;
                var $4936 = self.expr;
                var $4937 = self.body;
                var $4938 = List$nil;
                var $4912 = $4938;
                break;
            case 'Fm.Term.ann':
                var $4939 = self.done;
                var $4940 = self.term;
                var $4941 = self.type;
                var $4942 = List$nil;
                var $4912 = $4942;
                break;
            case 'Fm.Term.gol':
                var $4943 = self.name;
                var $4944 = self.dref;
                var $4945 = self.verb;
                var $4946 = List$nil;
                var $4912 = $4946;
                break;
            case 'Fm.Term.hol':
                var $4947 = self.path;
                var $4948 = List$nil;
                var $4912 = $4948;
                break;
            case 'Fm.Term.nat':
                var $4949 = self.natx;
                var $4950 = List$nil;
                var $4912 = $4950;
                break;
            case 'Fm.Term.chr':
                var $4951 = self.chrx;
                var $4952 = List$nil;
                var $4912 = $4952;
                break;
            case 'Fm.Term.str':
                var $4953 = self.strx;
                var $4954 = List$nil;
                var $4912 = $4954;
                break;
            case 'Fm.Term.cse':
                var $4955 = self.path;
                var $4956 = self.expr;
                var $4957 = self.name;
                var $4958 = self.with;
                var $4959 = self.cses;
                var $4960 = self.moti;
                var $4961 = List$nil;
                var $4912 = $4961;
                break;
            case 'Fm.Term.ori':
                var $4962 = self.orig;
                var $4963 = self.expr;
                var $4964 = List$nil;
                var $4912 = $4964;
                break;
        };
        return $4912;
    };
    const Fm$SmartMotive$nams = x0 => x1 => x2 => Fm$SmartMotive$nams$(x0, x1, x2);

    function List$zip$(_as$3, _bs$4) {
        var self = _as$3;
        switch (self._) {
            case 'List.nil':
                var $4966 = List$nil;
                var $4965 = $4966;
                break;
            case 'List.cons':
                var $4967 = self.head;
                var $4968 = self.tail;
                var self = _bs$4;
                switch (self._) {
                    case 'List.nil':
                        var $4970 = List$nil;
                        var $4969 = $4970;
                        break;
                    case 'List.cons':
                        var $4971 = self.head;
                        var $4972 = self.tail;
                        var $4973 = List$cons$(Pair$new$($4967, $4971), List$zip$($4968, $4972));
                        var $4969 = $4973;
                        break;
                };
                var $4965 = $4969;
                break;
        };
        return $4965;
    };
    const List$zip = x0 => x1 => List$zip$(x0, x1);
    const Nat$gte = a0 => a1 => (a0 >= a1);
    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);

    function Fm$Term$serialize$name$(_name$1) {
        var $4974 = (fm_name_to_bits(_name$1));
        return $4974;
    };
    const Fm$Term$serialize$name = x0 => Fm$Term$serialize$name$(x0);

    function Fm$Term$serialize$(_term$1, _depth$2, _init$3, _diff$4, _x$5) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $4976 = self.name;
                var $4977 = self.indx;
                var self = ($4977 >= _init$3);
                if (self) {
                    var _name$8 = a1 => (a1 + (nat_to_bits(Nat$pred$((_depth$2 - $4977 <= 0n ? 0n : _depth$2 - $4977)))));
                    var $4979 = (((_name$8(_x$5) + '1') + '0') + '0');
                    var $4978 = $4979;
                } else {
                    var _name$8 = a1 => (a1 + (nat_to_bits($4977)));
                    var $4980 = (((_name$8(_x$5) + '0') + '1') + '0');
                    var $4978 = $4980;
                };
                var $4975 = $4978;
                break;
            case 'Fm.Term.ref':
                var $4981 = self.name;
                var _name$7 = a1 => (a1 + Fm$Term$serialize$name$($4981));
                var $4982 = (((_name$7(_x$5) + '0') + '0') + '0');
                var $4975 = $4982;
                break;
            case 'Fm.Term.typ':
                var $4983 = (((_x$5 + '1') + '1') + '0');
                var $4975 = $4983;
                break;
            case 'Fm.Term.all':
                var $4984 = self.eras;
                var $4985 = self.self;
                var $4986 = self.name;
                var $4987 = self.xtyp;
                var $4988 = self.body;
                var self = $4984;
                if (self) {
                    var $4990 = Bits$i;
                    var _eras$11 = $4990;
                } else {
                    var $4991 = Bits$o;
                    var _eras$11 = $4991;
                };
                var _self$12 = a1 => (a1 + (fm_name_to_bits($4985)));
                var _xtyp$13 = Fm$Term$serialize($4987)(_depth$2)(_init$3)(_diff$4);
                var _body$14 = Fm$Term$serialize($4988(Fm$Term$var$($4985, _depth$2))(Fm$Term$var$($4986, Nat$succ$(_depth$2))))(Nat$succ$(Nat$succ$(_depth$2)))(_init$3)(_diff$4);
                var $4989 = (((_eras$11(_self$12(_xtyp$13(_body$14(_x$5)))) + '0') + '0') + '1');
                var $4975 = $4989;
                break;
            case 'Fm.Term.lam':
                var $4992 = self.name;
                var $4993 = self.body;
                var _body$8 = Fm$Term$serialize($4993(Fm$Term$var$($4992, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $4994 = (((_body$8(_x$5) + '1') + '0') + '1');
                var $4975 = $4994;
                break;
            case 'Fm.Term.app':
                var $4995 = self.func;
                var $4996 = self.argm;
                var _func$8 = Fm$Term$serialize($4995)(_depth$2)(_init$3)(_diff$4);
                var _argm$9 = Fm$Term$serialize($4996)(_depth$2)(_init$3)(_diff$4);
                var $4997 = (((_func$8(_argm$9(_x$5)) + '0') + '1') + '1');
                var $4975 = $4997;
                break;
            case 'Fm.Term.let':
                var $4998 = self.name;
                var $4999 = self.expr;
                var $5000 = self.body;
                var _expr$9 = Fm$Term$serialize($4999)(_depth$2)(_init$3)(_diff$4);
                var _body$10 = Fm$Term$serialize($5000(Fm$Term$var$($4998, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $5001 = (((_expr$9(_body$10(_x$5)) + '1') + '1') + '1');
                var $4975 = $5001;
                break;
            case 'Fm.Term.def':
                var $5002 = self.name;
                var $5003 = self.expr;
                var $5004 = self.body;
                var $5005 = Fm$Term$serialize$($5004($5003), _depth$2, _init$3, _diff$4, _x$5);
                var $4975 = $5005;
                break;
            case 'Fm.Term.ann':
                var $5006 = self.done;
                var $5007 = self.term;
                var $5008 = self.type;
                var $5009 = Fm$Term$serialize$($5007, _depth$2, _init$3, _diff$4, _x$5);
                var $4975 = $5009;
                break;
            case 'Fm.Term.gol':
                var $5010 = self.name;
                var $5011 = self.dref;
                var $5012 = self.verb;
                var _name$9 = a1 => (a1 + (fm_name_to_bits($5010)));
                var $5013 = (((_name$9(_x$5) + '0') + '0') + '0');
                var $4975 = $5013;
                break;
            case 'Fm.Term.hol':
                var $5014 = self.path;
                var $5015 = _x$5;
                var $4975 = $5015;
                break;
            case 'Fm.Term.nat':
                var $5016 = self.natx;
                var $5017 = Fm$Term$serialize$(Fm$Term$unroll_nat$($5016), _depth$2, _init$3, _diff$4, _x$5);
                var $4975 = $5017;
                break;
            case 'Fm.Term.chr':
                var $5018 = self.chrx;
                var $5019 = Fm$Term$serialize$(Fm$Term$unroll_chr$($5018), _depth$2, _init$3, _diff$4, _x$5);
                var $4975 = $5019;
                break;
            case 'Fm.Term.str':
                var $5020 = self.strx;
                var $5021 = Fm$Term$serialize$(Fm$Term$unroll_str$($5020), _depth$2, _init$3, _diff$4, _x$5);
                var $4975 = $5021;
                break;
            case 'Fm.Term.cse':
                var $5022 = self.path;
                var $5023 = self.expr;
                var $5024 = self.name;
                var $5025 = self.with;
                var $5026 = self.cses;
                var $5027 = self.moti;
                var $5028 = _diff$4(_x$5);
                var $4975 = $5028;
                break;
            case 'Fm.Term.ori':
                var $5029 = self.orig;
                var $5030 = self.expr;
                var $5031 = Fm$Term$serialize$($5030, _depth$2, _init$3, _diff$4, _x$5);
                var $4975 = $5031;
                break;
        };
        return $4975;
    };
    const Fm$Term$serialize = x0 => x1 => x2 => x3 => x4 => Fm$Term$serialize$(x0, x1, x2, x3, x4);
    const Bits$eql = a0 => a1 => (a1 === a0);

    function Fm$Term$identical$(_a$1, _b$2, _lv$3) {
        var _ah$4 = Fm$Term$serialize$(_a$1, _lv$3, _lv$3, Bits$o, Bits$e);
        var _bh$5 = Fm$Term$serialize$(_b$2, _lv$3, _lv$3, Bits$i, Bits$e);
        var $5032 = (_bh$5 === _ah$4);
        return $5032;
    };
    const Fm$Term$identical = x0 => x1 => x2 => Fm$Term$identical$(x0, x1, x2);

    function Fm$SmartMotive$replace$(_term$1, _from$2, _to$3, _lv$4) {
        var self = Fm$Term$identical$(_term$1, _from$2, _lv$4);
        if (self) {
            var $5034 = _to$3;
            var $5033 = $5034;
        } else {
            var self = _term$1;
            switch (self._) {
                case 'Fm.Term.var':
                    var $5036 = self.name;
                    var $5037 = self.indx;
                    var $5038 = Fm$Term$var$($5036, $5037);
                    var $5035 = $5038;
                    break;
                case 'Fm.Term.ref':
                    var $5039 = self.name;
                    var $5040 = Fm$Term$ref$($5039);
                    var $5035 = $5040;
                    break;
                case 'Fm.Term.typ':
                    var $5041 = Fm$Term$typ;
                    var $5035 = $5041;
                    break;
                case 'Fm.Term.all':
                    var $5042 = self.eras;
                    var $5043 = self.self;
                    var $5044 = self.name;
                    var $5045 = self.xtyp;
                    var $5046 = self.body;
                    var _xtyp$10 = Fm$SmartMotive$replace$($5045, _from$2, _to$3, _lv$4);
                    var _body$11 = $5046(Fm$Term$ref$($5043))(Fm$Term$ref$($5044));
                    var _body$12 = Fm$SmartMotive$replace$(_body$11, _from$2, _to$3, Nat$succ$(Nat$succ$(_lv$4)));
                    var $5047 = Fm$Term$all$($5042, $5043, $5044, _xtyp$10, (_s$13 => _x$14 => {
                        var $5048 = _body$12;
                        return $5048;
                    }));
                    var $5035 = $5047;
                    break;
                case 'Fm.Term.lam':
                    var $5049 = self.name;
                    var $5050 = self.body;
                    var _body$7 = $5050(Fm$Term$ref$($5049));
                    var _body$8 = Fm$SmartMotive$replace$(_body$7, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5051 = Fm$Term$lam$($5049, (_x$9 => {
                        var $5052 = _body$8;
                        return $5052;
                    }));
                    var $5035 = $5051;
                    break;
                case 'Fm.Term.app':
                    var $5053 = self.func;
                    var $5054 = self.argm;
                    var _func$7 = Fm$SmartMotive$replace$($5053, _from$2, _to$3, _lv$4);
                    var _argm$8 = Fm$SmartMotive$replace$($5054, _from$2, _to$3, _lv$4);
                    var $5055 = Fm$Term$app$(_func$7, _argm$8);
                    var $5035 = $5055;
                    break;
                case 'Fm.Term.let':
                    var $5056 = self.name;
                    var $5057 = self.expr;
                    var $5058 = self.body;
                    var _expr$8 = Fm$SmartMotive$replace$($5057, _from$2, _to$3, _lv$4);
                    var _body$9 = $5058(Fm$Term$ref$($5056));
                    var _body$10 = Fm$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5059 = Fm$Term$let$($5056, _expr$8, (_x$11 => {
                        var $5060 = _body$10;
                        return $5060;
                    }));
                    var $5035 = $5059;
                    break;
                case 'Fm.Term.def':
                    var $5061 = self.name;
                    var $5062 = self.expr;
                    var $5063 = self.body;
                    var _expr$8 = Fm$SmartMotive$replace$($5062, _from$2, _to$3, _lv$4);
                    var _body$9 = $5063(Fm$Term$ref$($5061));
                    var _body$10 = Fm$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5064 = Fm$Term$def$($5061, _expr$8, (_x$11 => {
                        var $5065 = _body$10;
                        return $5065;
                    }));
                    var $5035 = $5064;
                    break;
                case 'Fm.Term.ann':
                    var $5066 = self.done;
                    var $5067 = self.term;
                    var $5068 = self.type;
                    var _term$8 = Fm$SmartMotive$replace$($5067, _from$2, _to$3, _lv$4);
                    var _type$9 = Fm$SmartMotive$replace$($5068, _from$2, _to$3, _lv$4);
                    var $5069 = Fm$Term$ann$($5066, _term$8, _type$9);
                    var $5035 = $5069;
                    break;
                case 'Fm.Term.gol':
                    var $5070 = self.name;
                    var $5071 = self.dref;
                    var $5072 = self.verb;
                    var $5073 = _term$1;
                    var $5035 = $5073;
                    break;
                case 'Fm.Term.hol':
                    var $5074 = self.path;
                    var $5075 = _term$1;
                    var $5035 = $5075;
                    break;
                case 'Fm.Term.nat':
                    var $5076 = self.natx;
                    var $5077 = _term$1;
                    var $5035 = $5077;
                    break;
                case 'Fm.Term.chr':
                    var $5078 = self.chrx;
                    var $5079 = _term$1;
                    var $5035 = $5079;
                    break;
                case 'Fm.Term.str':
                    var $5080 = self.strx;
                    var $5081 = _term$1;
                    var $5035 = $5081;
                    break;
                case 'Fm.Term.cse':
                    var $5082 = self.path;
                    var $5083 = self.expr;
                    var $5084 = self.name;
                    var $5085 = self.with;
                    var $5086 = self.cses;
                    var $5087 = self.moti;
                    var $5088 = _term$1;
                    var $5035 = $5088;
                    break;
                case 'Fm.Term.ori':
                    var $5089 = self.orig;
                    var $5090 = self.expr;
                    var $5091 = Fm$SmartMotive$replace$($5090, _from$2, _to$3, _lv$4);
                    var $5035 = $5091;
                    break;
            };
            var $5033 = $5035;
        };
        return $5033;
    };
    const Fm$SmartMotive$replace = x0 => x1 => x2 => x3 => Fm$SmartMotive$replace$(x0, x1, x2, x3);

    function Fm$SmartMotive$make$(_name$1, _expr$2, _type$3, _moti$4, _lv$5, _defs$6) {
        var _vals$7 = Fm$SmartMotive$vals$(_expr$2, _type$3, _defs$6);
        var _nams$8 = Fm$SmartMotive$nams$(_name$1, _type$3, _defs$6);
        var _subs$9 = List$zip$(_nams$8, _vals$7);
        var _moti$10 = List$fold$(_subs$9, _moti$4, (_sub$10 => _moti$11 => {
            var self = _sub$10;
            switch (self._) {
                case 'Pair.new':
                    var $5094 = self.fst;
                    var $5095 = self.snd;
                    var $5096 = Fm$SmartMotive$replace$(_moti$11, $5095, Fm$Term$ref$($5094), _lv$5);
                    var $5093 = $5096;
                    break;
            };
            return $5093;
        }));
        var $5092 = _moti$10;
        return $5092;
    };
    const Fm$SmartMotive$make = x0 => x1 => x2 => x3 => x4 => x5 => Fm$SmartMotive$make$(x0, x1, x2, x3, x4, x5);

    function Fm$Term$desugar_cse$motive$(_wyth$1, _moti$2) {
        var self = _wyth$1;
        switch (self._) {
            case 'List.nil':
                var $5098 = _moti$2;
                var $5097 = $5098;
                break;
            case 'List.cons':
                var $5099 = self.head;
                var $5100 = self.tail;
                var self = $5099;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $5102 = self.file;
                        var $5103 = self.code;
                        var $5104 = self.name;
                        var $5105 = self.term;
                        var $5106 = self.type;
                        var $5107 = self.stat;
                        var $5108 = Fm$Term$all$(Bool$false, "", $5104, $5106, (_s$11 => _x$12 => {
                            var $5109 = Fm$Term$desugar_cse$motive$($5100, _moti$2);
                            return $5109;
                        }));
                        var $5101 = $5108;
                        break;
                };
                var $5097 = $5101;
                break;
        };
        return $5097;
    };
    const Fm$Term$desugar_cse$motive = x0 => x1 => Fm$Term$desugar_cse$motive$(x0, x1);

    function String$is_empty$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $5111 = Bool$true;
            var $5110 = $5111;
        } else {
            var $5112 = self.charCodeAt(0);
            var $5113 = self.slice(1);
            var $5114 = Bool$false;
            var $5110 = $5114;
        };
        return $5110;
    };
    const String$is_empty = x0 => String$is_empty$(x0);

    function Fm$Term$desugar_cse$argument$(_name$1, _wyth$2, _type$3, _body$4, _defs$5) {
        var self = Fm$Term$reduce$(_type$3, _defs$5);
        switch (self._) {
            case 'Fm.Term.var':
                var $5116 = self.name;
                var $5117 = self.indx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5119 = _body$4;
                        var $5118 = $5119;
                        break;
                    case 'List.cons':
                        var $5120 = self.head;
                        var $5121 = self.tail;
                        var self = $5120;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5123 = self.file;
                                var $5124 = self.code;
                                var $5125 = self.name;
                                var $5126 = self.term;
                                var $5127 = self.type;
                                var $5128 = self.stat;
                                var $5129 = Fm$Term$lam$($5125, (_x$16 => {
                                    var $5130 = Fm$Term$desugar_cse$argument$(_name$1, $5121, _type$3, _body$4, _defs$5);
                                    return $5130;
                                }));
                                var $5122 = $5129;
                                break;
                        };
                        var $5118 = $5122;
                        break;
                };
                var $5115 = $5118;
                break;
            case 'Fm.Term.ref':
                var $5131 = self.name;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5133 = _body$4;
                        var $5132 = $5133;
                        break;
                    case 'List.cons':
                        var $5134 = self.head;
                        var $5135 = self.tail;
                        var self = $5134;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5137 = self.file;
                                var $5138 = self.code;
                                var $5139 = self.name;
                                var $5140 = self.term;
                                var $5141 = self.type;
                                var $5142 = self.stat;
                                var $5143 = Fm$Term$lam$($5139, (_x$15 => {
                                    var $5144 = Fm$Term$desugar_cse$argument$(_name$1, $5135, _type$3, _body$4, _defs$5);
                                    return $5144;
                                }));
                                var $5136 = $5143;
                                break;
                        };
                        var $5132 = $5136;
                        break;
                };
                var $5115 = $5132;
                break;
            case 'Fm.Term.typ':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5146 = _body$4;
                        var $5145 = $5146;
                        break;
                    case 'List.cons':
                        var $5147 = self.head;
                        var $5148 = self.tail;
                        var self = $5147;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5150 = self.file;
                                var $5151 = self.code;
                                var $5152 = self.name;
                                var $5153 = self.term;
                                var $5154 = self.type;
                                var $5155 = self.stat;
                                var $5156 = Fm$Term$lam$($5152, (_x$14 => {
                                    var $5157 = Fm$Term$desugar_cse$argument$(_name$1, $5148, _type$3, _body$4, _defs$5);
                                    return $5157;
                                }));
                                var $5149 = $5156;
                                break;
                        };
                        var $5145 = $5149;
                        break;
                };
                var $5115 = $5145;
                break;
            case 'Fm.Term.all':
                var $5158 = self.eras;
                var $5159 = self.self;
                var $5160 = self.name;
                var $5161 = self.xtyp;
                var $5162 = self.body;
                var $5163 = Fm$Term$lam$((() => {
                    var self = String$is_empty$($5160);
                    if (self) {
                        var $5164 = _name$1;
                        return $5164;
                    } else {
                        var $5165 = String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($5160, List$nil))));
                        return $5165;
                    };
                })(), (_x$11 => {
                    var $5166 = Fm$Term$desugar_cse$argument$(_name$1, _wyth$2, $5162(Fm$Term$var$($5159, 0n))(Fm$Term$var$($5160, 0n)), _body$4, _defs$5);
                    return $5166;
                }));
                var $5115 = $5163;
                break;
            case 'Fm.Term.lam':
                var $5167 = self.name;
                var $5168 = self.body;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5170 = _body$4;
                        var $5169 = $5170;
                        break;
                    case 'List.cons':
                        var $5171 = self.head;
                        var $5172 = self.tail;
                        var self = $5171;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5174 = self.file;
                                var $5175 = self.code;
                                var $5176 = self.name;
                                var $5177 = self.term;
                                var $5178 = self.type;
                                var $5179 = self.stat;
                                var $5180 = Fm$Term$lam$($5176, (_x$16 => {
                                    var $5181 = Fm$Term$desugar_cse$argument$(_name$1, $5172, _type$3, _body$4, _defs$5);
                                    return $5181;
                                }));
                                var $5173 = $5180;
                                break;
                        };
                        var $5169 = $5173;
                        break;
                };
                var $5115 = $5169;
                break;
            case 'Fm.Term.app':
                var $5182 = self.func;
                var $5183 = self.argm;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5185 = _body$4;
                        var $5184 = $5185;
                        break;
                    case 'List.cons':
                        var $5186 = self.head;
                        var $5187 = self.tail;
                        var self = $5186;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5189 = self.file;
                                var $5190 = self.code;
                                var $5191 = self.name;
                                var $5192 = self.term;
                                var $5193 = self.type;
                                var $5194 = self.stat;
                                var $5195 = Fm$Term$lam$($5191, (_x$16 => {
                                    var $5196 = Fm$Term$desugar_cse$argument$(_name$1, $5187, _type$3, _body$4, _defs$5);
                                    return $5196;
                                }));
                                var $5188 = $5195;
                                break;
                        };
                        var $5184 = $5188;
                        break;
                };
                var $5115 = $5184;
                break;
            case 'Fm.Term.let':
                var $5197 = self.name;
                var $5198 = self.expr;
                var $5199 = self.body;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5201 = _body$4;
                        var $5200 = $5201;
                        break;
                    case 'List.cons':
                        var $5202 = self.head;
                        var $5203 = self.tail;
                        var self = $5202;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5205 = self.file;
                                var $5206 = self.code;
                                var $5207 = self.name;
                                var $5208 = self.term;
                                var $5209 = self.type;
                                var $5210 = self.stat;
                                var $5211 = Fm$Term$lam$($5207, (_x$17 => {
                                    var $5212 = Fm$Term$desugar_cse$argument$(_name$1, $5203, _type$3, _body$4, _defs$5);
                                    return $5212;
                                }));
                                var $5204 = $5211;
                                break;
                        };
                        var $5200 = $5204;
                        break;
                };
                var $5115 = $5200;
                break;
            case 'Fm.Term.def':
                var $5213 = self.name;
                var $5214 = self.expr;
                var $5215 = self.body;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5217 = _body$4;
                        var $5216 = $5217;
                        break;
                    case 'List.cons':
                        var $5218 = self.head;
                        var $5219 = self.tail;
                        var self = $5218;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5221 = self.file;
                                var $5222 = self.code;
                                var $5223 = self.name;
                                var $5224 = self.term;
                                var $5225 = self.type;
                                var $5226 = self.stat;
                                var $5227 = Fm$Term$lam$($5223, (_x$17 => {
                                    var $5228 = Fm$Term$desugar_cse$argument$(_name$1, $5219, _type$3, _body$4, _defs$5);
                                    return $5228;
                                }));
                                var $5220 = $5227;
                                break;
                        };
                        var $5216 = $5220;
                        break;
                };
                var $5115 = $5216;
                break;
            case 'Fm.Term.ann':
                var $5229 = self.done;
                var $5230 = self.term;
                var $5231 = self.type;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5233 = _body$4;
                        var $5232 = $5233;
                        break;
                    case 'List.cons':
                        var $5234 = self.head;
                        var $5235 = self.tail;
                        var self = $5234;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5237 = self.file;
                                var $5238 = self.code;
                                var $5239 = self.name;
                                var $5240 = self.term;
                                var $5241 = self.type;
                                var $5242 = self.stat;
                                var $5243 = Fm$Term$lam$($5239, (_x$17 => {
                                    var $5244 = Fm$Term$desugar_cse$argument$(_name$1, $5235, _type$3, _body$4, _defs$5);
                                    return $5244;
                                }));
                                var $5236 = $5243;
                                break;
                        };
                        var $5232 = $5236;
                        break;
                };
                var $5115 = $5232;
                break;
            case 'Fm.Term.gol':
                var $5245 = self.name;
                var $5246 = self.dref;
                var $5247 = self.verb;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5249 = _body$4;
                        var $5248 = $5249;
                        break;
                    case 'List.cons':
                        var $5250 = self.head;
                        var $5251 = self.tail;
                        var self = $5250;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5253 = self.file;
                                var $5254 = self.code;
                                var $5255 = self.name;
                                var $5256 = self.term;
                                var $5257 = self.type;
                                var $5258 = self.stat;
                                var $5259 = Fm$Term$lam$($5255, (_x$17 => {
                                    var $5260 = Fm$Term$desugar_cse$argument$(_name$1, $5251, _type$3, _body$4, _defs$5);
                                    return $5260;
                                }));
                                var $5252 = $5259;
                                break;
                        };
                        var $5248 = $5252;
                        break;
                };
                var $5115 = $5248;
                break;
            case 'Fm.Term.hol':
                var $5261 = self.path;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5263 = _body$4;
                        var $5262 = $5263;
                        break;
                    case 'List.cons':
                        var $5264 = self.head;
                        var $5265 = self.tail;
                        var self = $5264;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5267 = self.file;
                                var $5268 = self.code;
                                var $5269 = self.name;
                                var $5270 = self.term;
                                var $5271 = self.type;
                                var $5272 = self.stat;
                                var $5273 = Fm$Term$lam$($5269, (_x$15 => {
                                    var $5274 = Fm$Term$desugar_cse$argument$(_name$1, $5265, _type$3, _body$4, _defs$5);
                                    return $5274;
                                }));
                                var $5266 = $5273;
                                break;
                        };
                        var $5262 = $5266;
                        break;
                };
                var $5115 = $5262;
                break;
            case 'Fm.Term.nat':
                var $5275 = self.natx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5277 = _body$4;
                        var $5276 = $5277;
                        break;
                    case 'List.cons':
                        var $5278 = self.head;
                        var $5279 = self.tail;
                        var self = $5278;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5281 = self.file;
                                var $5282 = self.code;
                                var $5283 = self.name;
                                var $5284 = self.term;
                                var $5285 = self.type;
                                var $5286 = self.stat;
                                var $5287 = Fm$Term$lam$($5283, (_x$15 => {
                                    var $5288 = Fm$Term$desugar_cse$argument$(_name$1, $5279, _type$3, _body$4, _defs$5);
                                    return $5288;
                                }));
                                var $5280 = $5287;
                                break;
                        };
                        var $5276 = $5280;
                        break;
                };
                var $5115 = $5276;
                break;
            case 'Fm.Term.chr':
                var $5289 = self.chrx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5291 = _body$4;
                        var $5290 = $5291;
                        break;
                    case 'List.cons':
                        var $5292 = self.head;
                        var $5293 = self.tail;
                        var self = $5292;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5295 = self.file;
                                var $5296 = self.code;
                                var $5297 = self.name;
                                var $5298 = self.term;
                                var $5299 = self.type;
                                var $5300 = self.stat;
                                var $5301 = Fm$Term$lam$($5297, (_x$15 => {
                                    var $5302 = Fm$Term$desugar_cse$argument$(_name$1, $5293, _type$3, _body$4, _defs$5);
                                    return $5302;
                                }));
                                var $5294 = $5301;
                                break;
                        };
                        var $5290 = $5294;
                        break;
                };
                var $5115 = $5290;
                break;
            case 'Fm.Term.str':
                var $5303 = self.strx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5305 = _body$4;
                        var $5304 = $5305;
                        break;
                    case 'List.cons':
                        var $5306 = self.head;
                        var $5307 = self.tail;
                        var self = $5306;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5309 = self.file;
                                var $5310 = self.code;
                                var $5311 = self.name;
                                var $5312 = self.term;
                                var $5313 = self.type;
                                var $5314 = self.stat;
                                var $5315 = Fm$Term$lam$($5311, (_x$15 => {
                                    var $5316 = Fm$Term$desugar_cse$argument$(_name$1, $5307, _type$3, _body$4, _defs$5);
                                    return $5316;
                                }));
                                var $5308 = $5315;
                                break;
                        };
                        var $5304 = $5308;
                        break;
                };
                var $5115 = $5304;
                break;
            case 'Fm.Term.cse':
                var $5317 = self.path;
                var $5318 = self.expr;
                var $5319 = self.name;
                var $5320 = self.with;
                var $5321 = self.cses;
                var $5322 = self.moti;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5324 = _body$4;
                        var $5323 = $5324;
                        break;
                    case 'List.cons':
                        var $5325 = self.head;
                        var $5326 = self.tail;
                        var self = $5325;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5328 = self.file;
                                var $5329 = self.code;
                                var $5330 = self.name;
                                var $5331 = self.term;
                                var $5332 = self.type;
                                var $5333 = self.stat;
                                var $5334 = Fm$Term$lam$($5330, (_x$20 => {
                                    var $5335 = Fm$Term$desugar_cse$argument$(_name$1, $5326, _type$3, _body$4, _defs$5);
                                    return $5335;
                                }));
                                var $5327 = $5334;
                                break;
                        };
                        var $5323 = $5327;
                        break;
                };
                var $5115 = $5323;
                break;
            case 'Fm.Term.ori':
                var $5336 = self.orig;
                var $5337 = self.expr;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5339 = _body$4;
                        var $5338 = $5339;
                        break;
                    case 'List.cons':
                        var $5340 = self.head;
                        var $5341 = self.tail;
                        var self = $5340;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5343 = self.file;
                                var $5344 = self.code;
                                var $5345 = self.name;
                                var $5346 = self.term;
                                var $5347 = self.type;
                                var $5348 = self.stat;
                                var $5349 = Fm$Term$lam$($5345, (_x$16 => {
                                    var $5350 = Fm$Term$desugar_cse$argument$(_name$1, $5341, _type$3, _body$4, _defs$5);
                                    return $5350;
                                }));
                                var $5342 = $5349;
                                break;
                        };
                        var $5338 = $5342;
                        break;
                };
                var $5115 = $5338;
                break;
        };
        return $5115;
    };
    const Fm$Term$desugar_cse$argument = x0 => x1 => x2 => x3 => x4 => Fm$Term$desugar_cse$argument$(x0, x1, x2, x3, x4);

    function Maybe$or$(_a$2, _b$3) {
        var self = _a$2;
        switch (self._) {
            case 'Maybe.none':
                var $5352 = _b$3;
                var $5351 = $5352;
                break;
            case 'Maybe.some':
                var $5353 = self.value;
                var $5354 = Maybe$some$($5353);
                var $5351 = $5354;
                break;
        };
        return $5351;
    };
    const Maybe$or = x0 => x1 => Maybe$or$(x0, x1);

    function Fm$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) {
        var Fm$Term$desugar_cse$cases$ = (_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) => ({
            ctr: 'TCO',
            arg: [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7]
        });
        var Fm$Term$desugar_cse$cases = _expr$1 => _name$2 => _wyth$3 => _cses$4 => _type$5 => _defs$6 => _ctxt$7 => Fm$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7);
        var arg = [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7];
        while (true) {
            let [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_type$5, _defs$6);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5355 = self.name;
                        var $5356 = self.indx;
                        var _expr$10 = (() => {
                            var $5359 = _expr$1;
                            var $5360 = _wyth$3;
                            let _expr$11 = $5359;
                            let _defn$10;
                            while ($5360._ === 'List.cons') {
                                _defn$10 = $5360.head;
                                var $5359 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5361 = self.file;
                                            var $5362 = self.code;
                                            var $5363 = self.name;
                                            var $5364 = self.term;
                                            var $5365 = self.type;
                                            var $5366 = self.stat;
                                            var $5367 = $5364;
                                            return $5367;
                                    };
                                })());
                                _expr$11 = $5359;
                                $5360 = $5360.tail;
                            }
                            return _expr$11;
                        })();
                        var $5357 = _expr$10;
                        return $5357;
                    case 'Fm.Term.ref':
                        var $5368 = self.name;
                        var _expr$9 = (() => {
                            var $5371 = _expr$1;
                            var $5372 = _wyth$3;
                            let _expr$10 = $5371;
                            let _defn$9;
                            while ($5372._ === 'List.cons') {
                                _defn$9 = $5372.head;
                                var $5371 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5373 = self.file;
                                            var $5374 = self.code;
                                            var $5375 = self.name;
                                            var $5376 = self.term;
                                            var $5377 = self.type;
                                            var $5378 = self.stat;
                                            var $5379 = $5376;
                                            return $5379;
                                    };
                                })());
                                _expr$10 = $5371;
                                $5372 = $5372.tail;
                            }
                            return _expr$10;
                        })();
                        var $5369 = _expr$9;
                        return $5369;
                    case 'Fm.Term.typ':
                        var _expr$8 = (() => {
                            var $5382 = _expr$1;
                            var $5383 = _wyth$3;
                            let _expr$9 = $5382;
                            let _defn$8;
                            while ($5383._ === 'List.cons') {
                                _defn$8 = $5383.head;
                                var $5382 = Fm$Term$app$(_expr$9, (() => {
                                    var self = _defn$8;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5384 = self.file;
                                            var $5385 = self.code;
                                            var $5386 = self.name;
                                            var $5387 = self.term;
                                            var $5388 = self.type;
                                            var $5389 = self.stat;
                                            var $5390 = $5387;
                                            return $5390;
                                    };
                                })());
                                _expr$9 = $5382;
                                $5383 = $5383.tail;
                            }
                            return _expr$9;
                        })();
                        var $5380 = _expr$8;
                        return $5380;
                    case 'Fm.Term.all':
                        var $5391 = self.eras;
                        var $5392 = self.self;
                        var $5393 = self.name;
                        var $5394 = self.xtyp;
                        var $5395 = self.body;
                        var _got$13 = Maybe$or$(Fm$get$($5393, _cses$4), Fm$get$("_", _cses$4));
                        var self = _got$13;
                        switch (self._) {
                            case 'Maybe.none':
                                var _expr$14 = (() => {
                                    var $5399 = _expr$1;
                                    var $5400 = _wyth$3;
                                    let _expr$15 = $5399;
                                    let _defn$14;
                                    while ($5400._ === 'List.cons') {
                                        _defn$14 = $5400.head;
                                        var self = _defn$14;
                                        switch (self._) {
                                            case 'Fm.Def.new':
                                                var $5401 = self.file;
                                                var $5402 = self.code;
                                                var $5403 = self.name;
                                                var $5404 = self.term;
                                                var $5405 = self.type;
                                                var $5406 = self.stat;
                                                var $5407 = Fm$Term$app$(_expr$15, $5404);
                                                var $5399 = $5407;
                                                break;
                                        };
                                        _expr$15 = $5399;
                                        $5400 = $5400.tail;
                                    }
                                    return _expr$15;
                                })();
                                var $5397 = _expr$14;
                                var $5396 = $5397;
                                break;
                            case 'Maybe.some':
                                var $5408 = self.value;
                                var _argm$15 = Fm$Term$desugar_cse$argument$(_name$2, _wyth$3, $5394, $5408, _defs$6);
                                var _expr$16 = Fm$Term$app$(_expr$1, _argm$15);
                                var _type$17 = $5395(Fm$Term$var$($5392, 0n))(Fm$Term$var$($5393, 0n));
                                var $5409 = Fm$Term$desugar_cse$cases$(_expr$16, _name$2, _wyth$3, _cses$4, _type$17, _defs$6, _ctxt$7);
                                var $5396 = $5409;
                                break;
                        };
                        return $5396;
                    case 'Fm.Term.lam':
                        var $5410 = self.name;
                        var $5411 = self.body;
                        var _expr$10 = (() => {
                            var $5414 = _expr$1;
                            var $5415 = _wyth$3;
                            let _expr$11 = $5414;
                            let _defn$10;
                            while ($5415._ === 'List.cons') {
                                _defn$10 = $5415.head;
                                var $5414 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5416 = self.file;
                                            var $5417 = self.code;
                                            var $5418 = self.name;
                                            var $5419 = self.term;
                                            var $5420 = self.type;
                                            var $5421 = self.stat;
                                            var $5422 = $5419;
                                            return $5422;
                                    };
                                })());
                                _expr$11 = $5414;
                                $5415 = $5415.tail;
                            }
                            return _expr$11;
                        })();
                        var $5412 = _expr$10;
                        return $5412;
                    case 'Fm.Term.app':
                        var $5423 = self.func;
                        var $5424 = self.argm;
                        var _expr$10 = (() => {
                            var $5427 = _expr$1;
                            var $5428 = _wyth$3;
                            let _expr$11 = $5427;
                            let _defn$10;
                            while ($5428._ === 'List.cons') {
                                _defn$10 = $5428.head;
                                var $5427 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5429 = self.file;
                                            var $5430 = self.code;
                                            var $5431 = self.name;
                                            var $5432 = self.term;
                                            var $5433 = self.type;
                                            var $5434 = self.stat;
                                            var $5435 = $5432;
                                            return $5435;
                                    };
                                })());
                                _expr$11 = $5427;
                                $5428 = $5428.tail;
                            }
                            return _expr$11;
                        })();
                        var $5425 = _expr$10;
                        return $5425;
                    case 'Fm.Term.let':
                        var $5436 = self.name;
                        var $5437 = self.expr;
                        var $5438 = self.body;
                        var _expr$11 = (() => {
                            var $5441 = _expr$1;
                            var $5442 = _wyth$3;
                            let _expr$12 = $5441;
                            let _defn$11;
                            while ($5442._ === 'List.cons') {
                                _defn$11 = $5442.head;
                                var $5441 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5443 = self.file;
                                            var $5444 = self.code;
                                            var $5445 = self.name;
                                            var $5446 = self.term;
                                            var $5447 = self.type;
                                            var $5448 = self.stat;
                                            var $5449 = $5446;
                                            return $5449;
                                    };
                                })());
                                _expr$12 = $5441;
                                $5442 = $5442.tail;
                            }
                            return _expr$12;
                        })();
                        var $5439 = _expr$11;
                        return $5439;
                    case 'Fm.Term.def':
                        var $5450 = self.name;
                        var $5451 = self.expr;
                        var $5452 = self.body;
                        var _expr$11 = (() => {
                            var $5455 = _expr$1;
                            var $5456 = _wyth$3;
                            let _expr$12 = $5455;
                            let _defn$11;
                            while ($5456._ === 'List.cons') {
                                _defn$11 = $5456.head;
                                var $5455 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5457 = self.file;
                                            var $5458 = self.code;
                                            var $5459 = self.name;
                                            var $5460 = self.term;
                                            var $5461 = self.type;
                                            var $5462 = self.stat;
                                            var $5463 = $5460;
                                            return $5463;
                                    };
                                })());
                                _expr$12 = $5455;
                                $5456 = $5456.tail;
                            }
                            return _expr$12;
                        })();
                        var $5453 = _expr$11;
                        return $5453;
                    case 'Fm.Term.ann':
                        var $5464 = self.done;
                        var $5465 = self.term;
                        var $5466 = self.type;
                        var _expr$11 = (() => {
                            var $5469 = _expr$1;
                            var $5470 = _wyth$3;
                            let _expr$12 = $5469;
                            let _defn$11;
                            while ($5470._ === 'List.cons') {
                                _defn$11 = $5470.head;
                                var $5469 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5471 = self.file;
                                            var $5472 = self.code;
                                            var $5473 = self.name;
                                            var $5474 = self.term;
                                            var $5475 = self.type;
                                            var $5476 = self.stat;
                                            var $5477 = $5474;
                                            return $5477;
                                    };
                                })());
                                _expr$12 = $5469;
                                $5470 = $5470.tail;
                            }
                            return _expr$12;
                        })();
                        var $5467 = _expr$11;
                        return $5467;
                    case 'Fm.Term.gol':
                        var $5478 = self.name;
                        var $5479 = self.dref;
                        var $5480 = self.verb;
                        var _expr$11 = (() => {
                            var $5483 = _expr$1;
                            var $5484 = _wyth$3;
                            let _expr$12 = $5483;
                            let _defn$11;
                            while ($5484._ === 'List.cons') {
                                _defn$11 = $5484.head;
                                var $5483 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5485 = self.file;
                                            var $5486 = self.code;
                                            var $5487 = self.name;
                                            var $5488 = self.term;
                                            var $5489 = self.type;
                                            var $5490 = self.stat;
                                            var $5491 = $5488;
                                            return $5491;
                                    };
                                })());
                                _expr$12 = $5483;
                                $5484 = $5484.tail;
                            }
                            return _expr$12;
                        })();
                        var $5481 = _expr$11;
                        return $5481;
                    case 'Fm.Term.hol':
                        var $5492 = self.path;
                        var _expr$9 = (() => {
                            var $5495 = _expr$1;
                            var $5496 = _wyth$3;
                            let _expr$10 = $5495;
                            let _defn$9;
                            while ($5496._ === 'List.cons') {
                                _defn$9 = $5496.head;
                                var $5495 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5497 = self.file;
                                            var $5498 = self.code;
                                            var $5499 = self.name;
                                            var $5500 = self.term;
                                            var $5501 = self.type;
                                            var $5502 = self.stat;
                                            var $5503 = $5500;
                                            return $5503;
                                    };
                                })());
                                _expr$10 = $5495;
                                $5496 = $5496.tail;
                            }
                            return _expr$10;
                        })();
                        var $5493 = _expr$9;
                        return $5493;
                    case 'Fm.Term.nat':
                        var $5504 = self.natx;
                        var _expr$9 = (() => {
                            var $5507 = _expr$1;
                            var $5508 = _wyth$3;
                            let _expr$10 = $5507;
                            let _defn$9;
                            while ($5508._ === 'List.cons') {
                                _defn$9 = $5508.head;
                                var $5507 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5509 = self.file;
                                            var $5510 = self.code;
                                            var $5511 = self.name;
                                            var $5512 = self.term;
                                            var $5513 = self.type;
                                            var $5514 = self.stat;
                                            var $5515 = $5512;
                                            return $5515;
                                    };
                                })());
                                _expr$10 = $5507;
                                $5508 = $5508.tail;
                            }
                            return _expr$10;
                        })();
                        var $5505 = _expr$9;
                        return $5505;
                    case 'Fm.Term.chr':
                        var $5516 = self.chrx;
                        var _expr$9 = (() => {
                            var $5519 = _expr$1;
                            var $5520 = _wyth$3;
                            let _expr$10 = $5519;
                            let _defn$9;
                            while ($5520._ === 'List.cons') {
                                _defn$9 = $5520.head;
                                var $5519 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5521 = self.file;
                                            var $5522 = self.code;
                                            var $5523 = self.name;
                                            var $5524 = self.term;
                                            var $5525 = self.type;
                                            var $5526 = self.stat;
                                            var $5527 = $5524;
                                            return $5527;
                                    };
                                })());
                                _expr$10 = $5519;
                                $5520 = $5520.tail;
                            }
                            return _expr$10;
                        })();
                        var $5517 = _expr$9;
                        return $5517;
                    case 'Fm.Term.str':
                        var $5528 = self.strx;
                        var _expr$9 = (() => {
                            var $5531 = _expr$1;
                            var $5532 = _wyth$3;
                            let _expr$10 = $5531;
                            let _defn$9;
                            while ($5532._ === 'List.cons') {
                                _defn$9 = $5532.head;
                                var $5531 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5533 = self.file;
                                            var $5534 = self.code;
                                            var $5535 = self.name;
                                            var $5536 = self.term;
                                            var $5537 = self.type;
                                            var $5538 = self.stat;
                                            var $5539 = $5536;
                                            return $5539;
                                    };
                                })());
                                _expr$10 = $5531;
                                $5532 = $5532.tail;
                            }
                            return _expr$10;
                        })();
                        var $5529 = _expr$9;
                        return $5529;
                    case 'Fm.Term.cse':
                        var $5540 = self.path;
                        var $5541 = self.expr;
                        var $5542 = self.name;
                        var $5543 = self.with;
                        var $5544 = self.cses;
                        var $5545 = self.moti;
                        var _expr$14 = (() => {
                            var $5548 = _expr$1;
                            var $5549 = _wyth$3;
                            let _expr$15 = $5548;
                            let _defn$14;
                            while ($5549._ === 'List.cons') {
                                _defn$14 = $5549.head;
                                var $5548 = Fm$Term$app$(_expr$15, (() => {
                                    var self = _defn$14;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5550 = self.file;
                                            var $5551 = self.code;
                                            var $5552 = self.name;
                                            var $5553 = self.term;
                                            var $5554 = self.type;
                                            var $5555 = self.stat;
                                            var $5556 = $5553;
                                            return $5556;
                                    };
                                })());
                                _expr$15 = $5548;
                                $5549 = $5549.tail;
                            }
                            return _expr$15;
                        })();
                        var $5546 = _expr$14;
                        return $5546;
                    case 'Fm.Term.ori':
                        var $5557 = self.orig;
                        var $5558 = self.expr;
                        var _expr$10 = (() => {
                            var $5561 = _expr$1;
                            var $5562 = _wyth$3;
                            let _expr$11 = $5561;
                            let _defn$10;
                            while ($5562._ === 'List.cons') {
                                _defn$10 = $5562.head;
                                var $5561 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5563 = self.file;
                                            var $5564 = self.code;
                                            var $5565 = self.name;
                                            var $5566 = self.term;
                                            var $5567 = self.type;
                                            var $5568 = self.stat;
                                            var $5569 = $5566;
                                            return $5569;
                                    };
                                })());
                                _expr$11 = $5561;
                                $5562 = $5562.tail;
                            }
                            return _expr$11;
                        })();
                        var $5559 = _expr$10;
                        return $5559;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Term$desugar_cse$cases = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Fm$Term$desugar_cse$cases$(x0, x1, x2, x3, x4, x5, x6);

    function Fm$Term$desugar_cse$(_expr$1, _name$2, _wyth$3, _cses$4, _moti$5, _type$6, _defs$7, _ctxt$8) {
        var self = Fm$Term$reduce$(_type$6, _defs$7);
        switch (self._) {
            case 'Fm.Term.var':
                var $5571 = self.name;
                var $5572 = self.indx;
                var $5573 = Maybe$none;
                var $5570 = $5573;
                break;
            case 'Fm.Term.ref':
                var $5574 = self.name;
                var $5575 = Maybe$none;
                var $5570 = $5575;
                break;
            case 'Fm.Term.typ':
                var $5576 = Maybe$none;
                var $5570 = $5576;
                break;
            case 'Fm.Term.all':
                var $5577 = self.eras;
                var $5578 = self.self;
                var $5579 = self.name;
                var $5580 = self.xtyp;
                var $5581 = self.body;
                var _moti$14 = Fm$Term$desugar_cse$motive$(_wyth$3, _moti$5);
                var _argm$15 = Fm$Term$desugar_cse$argument$(_name$2, List$nil, $5580, _moti$14, _defs$7);
                var _expr$16 = Fm$Term$app$(_expr$1, _argm$15);
                var _type$17 = $5581(Fm$Term$var$($5578, 0n))(Fm$Term$var$($5579, 0n));
                var $5582 = Maybe$some$(Fm$Term$desugar_cse$cases$(_expr$16, _name$2, _wyth$3, _cses$4, _type$17, _defs$7, _ctxt$8));
                var $5570 = $5582;
                break;
            case 'Fm.Term.lam':
                var $5583 = self.name;
                var $5584 = self.body;
                var $5585 = Maybe$none;
                var $5570 = $5585;
                break;
            case 'Fm.Term.app':
                var $5586 = self.func;
                var $5587 = self.argm;
                var $5588 = Maybe$none;
                var $5570 = $5588;
                break;
            case 'Fm.Term.let':
                var $5589 = self.name;
                var $5590 = self.expr;
                var $5591 = self.body;
                var $5592 = Maybe$none;
                var $5570 = $5592;
                break;
            case 'Fm.Term.def':
                var $5593 = self.name;
                var $5594 = self.expr;
                var $5595 = self.body;
                var $5596 = Maybe$none;
                var $5570 = $5596;
                break;
            case 'Fm.Term.ann':
                var $5597 = self.done;
                var $5598 = self.term;
                var $5599 = self.type;
                var $5600 = Maybe$none;
                var $5570 = $5600;
                break;
            case 'Fm.Term.gol':
                var $5601 = self.name;
                var $5602 = self.dref;
                var $5603 = self.verb;
                var $5604 = Maybe$none;
                var $5570 = $5604;
                break;
            case 'Fm.Term.hol':
                var $5605 = self.path;
                var $5606 = Maybe$none;
                var $5570 = $5606;
                break;
            case 'Fm.Term.nat':
                var $5607 = self.natx;
                var $5608 = Maybe$none;
                var $5570 = $5608;
                break;
            case 'Fm.Term.chr':
                var $5609 = self.chrx;
                var $5610 = Maybe$none;
                var $5570 = $5610;
                break;
            case 'Fm.Term.str':
                var $5611 = self.strx;
                var $5612 = Maybe$none;
                var $5570 = $5612;
                break;
            case 'Fm.Term.cse':
                var $5613 = self.path;
                var $5614 = self.expr;
                var $5615 = self.name;
                var $5616 = self.with;
                var $5617 = self.cses;
                var $5618 = self.moti;
                var $5619 = Maybe$none;
                var $5570 = $5619;
                break;
            case 'Fm.Term.ori':
                var $5620 = self.orig;
                var $5621 = self.expr;
                var $5622 = Maybe$none;
                var $5570 = $5622;
                break;
        };
        return $5570;
    };
    const Fm$Term$desugar_cse = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Fm$Term$desugar_cse$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Fm$Error$cant_infer$(_origin$1, _term$2, _context$3) {
        var $5623 = ({
            _: 'Fm.Error.cant_infer',
            'origin': _origin$1,
            'term': _term$2,
            'context': _context$3
        });
        return $5623;
    };
    const Fm$Error$cant_infer = x0 => x1 => x2 => Fm$Error$cant_infer$(x0, x1, x2);

    function Set$has$(_bits$1, _set$2) {
        var self = Map$get$(_bits$1, _set$2);
        switch (self._) {
            case 'Maybe.none':
                var $5625 = Bool$false;
                var $5624 = $5625;
                break;
            case 'Maybe.some':
                var $5626 = self.value;
                var $5627 = Bool$true;
                var $5624 = $5627;
                break;
        };
        return $5624;
    };
    const Set$has = x0 => x1 => Set$has$(x0, x1);
    const Bool$or = a0 => a1 => (a0 || a1);

    function Fm$Term$has_holes$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $5629 = self.name;
                var $5630 = self.indx;
                var $5631 = Bool$false;
                var $5628 = $5631;
                break;
            case 'Fm.Term.ref':
                var $5632 = self.name;
                var $5633 = Bool$false;
                var $5628 = $5633;
                break;
            case 'Fm.Term.typ':
                var $5634 = Bool$false;
                var $5628 = $5634;
                break;
            case 'Fm.Term.all':
                var $5635 = self.eras;
                var $5636 = self.self;
                var $5637 = self.name;
                var $5638 = self.xtyp;
                var $5639 = self.body;
                var $5640 = (Fm$Term$has_holes$($5638) || Fm$Term$has_holes$($5639(Fm$Term$typ)(Fm$Term$typ)));
                var $5628 = $5640;
                break;
            case 'Fm.Term.lam':
                var $5641 = self.name;
                var $5642 = self.body;
                var $5643 = Fm$Term$has_holes$($5642(Fm$Term$typ));
                var $5628 = $5643;
                break;
            case 'Fm.Term.app':
                var $5644 = self.func;
                var $5645 = self.argm;
                var $5646 = (Fm$Term$has_holes$($5644) || Fm$Term$has_holes$($5645));
                var $5628 = $5646;
                break;
            case 'Fm.Term.let':
                var $5647 = self.name;
                var $5648 = self.expr;
                var $5649 = self.body;
                var $5650 = (Fm$Term$has_holes$($5648) || Fm$Term$has_holes$($5649(Fm$Term$typ)));
                var $5628 = $5650;
                break;
            case 'Fm.Term.def':
                var $5651 = self.name;
                var $5652 = self.expr;
                var $5653 = self.body;
                var $5654 = (Fm$Term$has_holes$($5652) || Fm$Term$has_holes$($5653(Fm$Term$typ)));
                var $5628 = $5654;
                break;
            case 'Fm.Term.ann':
                var $5655 = self.done;
                var $5656 = self.term;
                var $5657 = self.type;
                var $5658 = (Fm$Term$has_holes$($5656) || Fm$Term$has_holes$($5657));
                var $5628 = $5658;
                break;
            case 'Fm.Term.gol':
                var $5659 = self.name;
                var $5660 = self.dref;
                var $5661 = self.verb;
                var $5662 = Bool$false;
                var $5628 = $5662;
                break;
            case 'Fm.Term.hol':
                var $5663 = self.path;
                var $5664 = Bool$true;
                var $5628 = $5664;
                break;
            case 'Fm.Term.nat':
                var $5665 = self.natx;
                var $5666 = Bool$false;
                var $5628 = $5666;
                break;
            case 'Fm.Term.chr':
                var $5667 = self.chrx;
                var $5668 = Bool$false;
                var $5628 = $5668;
                break;
            case 'Fm.Term.str':
                var $5669 = self.strx;
                var $5670 = Bool$false;
                var $5628 = $5670;
                break;
            case 'Fm.Term.cse':
                var $5671 = self.path;
                var $5672 = self.expr;
                var $5673 = self.name;
                var $5674 = self.with;
                var $5675 = self.cses;
                var $5676 = self.moti;
                var $5677 = Bool$false;
                var $5628 = $5677;
                break;
            case 'Fm.Term.ori':
                var $5678 = self.orig;
                var $5679 = self.expr;
                var $5680 = Fm$Term$has_holes$($5679);
                var $5628 = $5680;
                break;
        };
        return $5628;
    };
    const Fm$Term$has_holes = x0 => Fm$Term$has_holes$(x0);

    function Fm$Term$equal$hole$(_path$1, _term$2) {
        var self = _term$2;
        switch (self._) {
            case 'Fm.Term.var':
                var $5682 = self.name;
                var $5683 = self.indx;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5685 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5684 = $5685;
                } else {
                    var $5686 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5684 = $5686;
                };
                var $5681 = $5684;
                break;
            case 'Fm.Term.ref':
                var $5687 = self.name;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5689 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5688 = $5689;
                } else {
                    var $5690 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5688 = $5690;
                };
                var $5681 = $5688;
                break;
            case 'Fm.Term.typ':
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5692 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5691 = $5692;
                } else {
                    var $5693 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5691 = $5693;
                };
                var $5681 = $5691;
                break;
            case 'Fm.Term.all':
                var $5694 = self.eras;
                var $5695 = self.self;
                var $5696 = self.name;
                var $5697 = self.xtyp;
                var $5698 = self.body;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5700 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5699 = $5700;
                } else {
                    var $5701 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5699 = $5701;
                };
                var $5681 = $5699;
                break;
            case 'Fm.Term.lam':
                var $5702 = self.name;
                var $5703 = self.body;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5705 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5704 = $5705;
                } else {
                    var $5706 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5704 = $5706;
                };
                var $5681 = $5704;
                break;
            case 'Fm.Term.app':
                var $5707 = self.func;
                var $5708 = self.argm;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5710 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5709 = $5710;
                } else {
                    var $5711 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5709 = $5711;
                };
                var $5681 = $5709;
                break;
            case 'Fm.Term.let':
                var $5712 = self.name;
                var $5713 = self.expr;
                var $5714 = self.body;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5716 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5715 = $5716;
                } else {
                    var $5717 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5715 = $5717;
                };
                var $5681 = $5715;
                break;
            case 'Fm.Term.def':
                var $5718 = self.name;
                var $5719 = self.expr;
                var $5720 = self.body;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5722 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5721 = $5722;
                } else {
                    var $5723 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5721 = $5723;
                };
                var $5681 = $5721;
                break;
            case 'Fm.Term.ann':
                var $5724 = self.done;
                var $5725 = self.term;
                var $5726 = self.type;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5728 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5727 = $5728;
                } else {
                    var $5729 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5727 = $5729;
                };
                var $5681 = $5727;
                break;
            case 'Fm.Term.gol':
                var $5730 = self.name;
                var $5731 = self.dref;
                var $5732 = self.verb;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5734 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5733 = $5734;
                } else {
                    var $5735 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5733 = $5735;
                };
                var $5681 = $5733;
                break;
            case 'Fm.Term.hol':
                var $5736 = self.path;
                var $5737 = Fm$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $5681 = $5737;
                break;
            case 'Fm.Term.nat':
                var $5738 = self.natx;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5740 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5739 = $5740;
                } else {
                    var $5741 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5739 = $5741;
                };
                var $5681 = $5739;
                break;
            case 'Fm.Term.chr':
                var $5742 = self.chrx;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5744 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5743 = $5744;
                } else {
                    var $5745 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5743 = $5745;
                };
                var $5681 = $5743;
                break;
            case 'Fm.Term.str':
                var $5746 = self.strx;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5748 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5747 = $5748;
                } else {
                    var $5749 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5747 = $5749;
                };
                var $5681 = $5747;
                break;
            case 'Fm.Term.cse':
                var $5750 = self.path;
                var $5751 = self.expr;
                var $5752 = self.name;
                var $5753 = self.with;
                var $5754 = self.cses;
                var $5755 = self.moti;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5757 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5756 = $5757;
                } else {
                    var $5758 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5756 = $5758;
                };
                var $5681 = $5756;
                break;
            case 'Fm.Term.ori':
                var $5759 = self.orig;
                var $5760 = self.expr;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5762 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5761 = $5762;
                } else {
                    var $5763 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5761 = $5763;
                };
                var $5681 = $5761;
                break;
        };
        return $5681;
    };
    const Fm$Term$equal$hole = x0 => x1 => Fm$Term$equal$hole$(x0, x1);

    function Fm$Term$equal$extra_holes$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $5765 = self.name;
                var $5766 = self.indx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5768 = self.name;
                        var $5769 = self.indx;
                        var $5770 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5767 = $5770;
                        break;
                    case 'Fm.Term.ref':
                        var $5771 = self.name;
                        var $5772 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5767 = $5772;
                        break;
                    case 'Fm.Term.typ':
                        var $5773 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5767 = $5773;
                        break;
                    case 'Fm.Term.all':
                        var $5774 = self.eras;
                        var $5775 = self.self;
                        var $5776 = self.name;
                        var $5777 = self.xtyp;
                        var $5778 = self.body;
                        var $5779 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5767 = $5779;
                        break;
                    case 'Fm.Term.lam':
                        var $5780 = self.name;
                        var $5781 = self.body;
                        var $5782 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5767 = $5782;
                        break;
                    case 'Fm.Term.app':
                        var $5783 = self.func;
                        var $5784 = self.argm;
                        var $5785 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5767 = $5785;
                        break;
                    case 'Fm.Term.let':
                        var $5786 = self.name;
                        var $5787 = self.expr;
                        var $5788 = self.body;
                        var $5789 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5767 = $5789;
                        break;
                    case 'Fm.Term.def':
                        var $5790 = self.name;
                        var $5791 = self.expr;
                        var $5792 = self.body;
                        var $5793 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5767 = $5793;
                        break;
                    case 'Fm.Term.ann':
                        var $5794 = self.done;
                        var $5795 = self.term;
                        var $5796 = self.type;
                        var $5797 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5767 = $5797;
                        break;
                    case 'Fm.Term.gol':
                        var $5798 = self.name;
                        var $5799 = self.dref;
                        var $5800 = self.verb;
                        var $5801 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5767 = $5801;
                        break;
                    case 'Fm.Term.hol':
                        var $5802 = self.path;
                        var self = Fm$Term$equal$hole$($5802, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $5804 = self.value;
                                var $5805 = self.errors;
                                var self = $5804;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5807 = Fm$Check$result$(Maybe$none, $5805);
                                        var $5806 = $5807;
                                        break;
                                    case 'Maybe.some':
                                        var $5808 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $5810 = self.value;
                                                var $5811 = self.errors;
                                                var $5812 = Fm$Check$result$($5810, List$concat$($5805, $5811));
                                                var $5809 = $5812;
                                                break;
                                        };
                                        var $5806 = $5809;
                                        break;
                                };
                                var $5803 = $5806;
                                break;
                        };
                        var $5767 = $5803;
                        break;
                    case 'Fm.Term.nat':
                        var $5813 = self.natx;
                        var $5814 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5767 = $5814;
                        break;
                    case 'Fm.Term.chr':
                        var $5815 = self.chrx;
                        var $5816 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5767 = $5816;
                        break;
                    case 'Fm.Term.str':
                        var $5817 = self.strx;
                        var $5818 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5767 = $5818;
                        break;
                    case 'Fm.Term.cse':
                        var $5819 = self.path;
                        var $5820 = self.expr;
                        var $5821 = self.name;
                        var $5822 = self.with;
                        var $5823 = self.cses;
                        var $5824 = self.moti;
                        var $5825 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5767 = $5825;
                        break;
                    case 'Fm.Term.ori':
                        var $5826 = self.orig;
                        var $5827 = self.expr;
                        var $5828 = Fm$Term$equal$extra_holes$(_a$1, $5827);
                        var $5767 = $5828;
                        break;
                };
                var $5764 = $5767;
                break;
            case 'Fm.Term.ref':
                var $5829 = self.name;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5831 = self.name;
                        var $5832 = self.indx;
                        var $5833 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5830 = $5833;
                        break;
                    case 'Fm.Term.ref':
                        var $5834 = self.name;
                        var $5835 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5830 = $5835;
                        break;
                    case 'Fm.Term.typ':
                        var $5836 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5830 = $5836;
                        break;
                    case 'Fm.Term.all':
                        var $5837 = self.eras;
                        var $5838 = self.self;
                        var $5839 = self.name;
                        var $5840 = self.xtyp;
                        var $5841 = self.body;
                        var $5842 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5830 = $5842;
                        break;
                    case 'Fm.Term.lam':
                        var $5843 = self.name;
                        var $5844 = self.body;
                        var $5845 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5830 = $5845;
                        break;
                    case 'Fm.Term.app':
                        var $5846 = self.func;
                        var $5847 = self.argm;
                        var $5848 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5830 = $5848;
                        break;
                    case 'Fm.Term.let':
                        var $5849 = self.name;
                        var $5850 = self.expr;
                        var $5851 = self.body;
                        var $5852 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5830 = $5852;
                        break;
                    case 'Fm.Term.def':
                        var $5853 = self.name;
                        var $5854 = self.expr;
                        var $5855 = self.body;
                        var $5856 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5830 = $5856;
                        break;
                    case 'Fm.Term.ann':
                        var $5857 = self.done;
                        var $5858 = self.term;
                        var $5859 = self.type;
                        var $5860 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5830 = $5860;
                        break;
                    case 'Fm.Term.gol':
                        var $5861 = self.name;
                        var $5862 = self.dref;
                        var $5863 = self.verb;
                        var $5864 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5830 = $5864;
                        break;
                    case 'Fm.Term.hol':
                        var $5865 = self.path;
                        var self = Fm$Term$equal$hole$($5865, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $5867 = self.value;
                                var $5868 = self.errors;
                                var self = $5867;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5870 = Fm$Check$result$(Maybe$none, $5868);
                                        var $5869 = $5870;
                                        break;
                                    case 'Maybe.some':
                                        var $5871 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $5873 = self.value;
                                                var $5874 = self.errors;
                                                var $5875 = Fm$Check$result$($5873, List$concat$($5868, $5874));
                                                var $5872 = $5875;
                                                break;
                                        };
                                        var $5869 = $5872;
                                        break;
                                };
                                var $5866 = $5869;
                                break;
                        };
                        var $5830 = $5866;
                        break;
                    case 'Fm.Term.nat':
                        var $5876 = self.natx;
                        var $5877 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5830 = $5877;
                        break;
                    case 'Fm.Term.chr':
                        var $5878 = self.chrx;
                        var $5879 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5830 = $5879;
                        break;
                    case 'Fm.Term.str':
                        var $5880 = self.strx;
                        var $5881 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5830 = $5881;
                        break;
                    case 'Fm.Term.cse':
                        var $5882 = self.path;
                        var $5883 = self.expr;
                        var $5884 = self.name;
                        var $5885 = self.with;
                        var $5886 = self.cses;
                        var $5887 = self.moti;
                        var $5888 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5830 = $5888;
                        break;
                    case 'Fm.Term.ori':
                        var $5889 = self.orig;
                        var $5890 = self.expr;
                        var $5891 = Fm$Term$equal$extra_holes$(_a$1, $5890);
                        var $5830 = $5891;
                        break;
                };
                var $5764 = $5830;
                break;
            case 'Fm.Term.typ':
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5893 = self.name;
                        var $5894 = self.indx;
                        var $5895 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5892 = $5895;
                        break;
                    case 'Fm.Term.ref':
                        var $5896 = self.name;
                        var $5897 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5892 = $5897;
                        break;
                    case 'Fm.Term.typ':
                        var $5898 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5892 = $5898;
                        break;
                    case 'Fm.Term.all':
                        var $5899 = self.eras;
                        var $5900 = self.self;
                        var $5901 = self.name;
                        var $5902 = self.xtyp;
                        var $5903 = self.body;
                        var $5904 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5892 = $5904;
                        break;
                    case 'Fm.Term.lam':
                        var $5905 = self.name;
                        var $5906 = self.body;
                        var $5907 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5892 = $5907;
                        break;
                    case 'Fm.Term.app':
                        var $5908 = self.func;
                        var $5909 = self.argm;
                        var $5910 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5892 = $5910;
                        break;
                    case 'Fm.Term.let':
                        var $5911 = self.name;
                        var $5912 = self.expr;
                        var $5913 = self.body;
                        var $5914 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5892 = $5914;
                        break;
                    case 'Fm.Term.def':
                        var $5915 = self.name;
                        var $5916 = self.expr;
                        var $5917 = self.body;
                        var $5918 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5892 = $5918;
                        break;
                    case 'Fm.Term.ann':
                        var $5919 = self.done;
                        var $5920 = self.term;
                        var $5921 = self.type;
                        var $5922 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5892 = $5922;
                        break;
                    case 'Fm.Term.gol':
                        var $5923 = self.name;
                        var $5924 = self.dref;
                        var $5925 = self.verb;
                        var $5926 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5892 = $5926;
                        break;
                    case 'Fm.Term.hol':
                        var $5927 = self.path;
                        var self = Fm$Term$equal$hole$($5927, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $5929 = self.value;
                                var $5930 = self.errors;
                                var self = $5929;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5932 = Fm$Check$result$(Maybe$none, $5930);
                                        var $5931 = $5932;
                                        break;
                                    case 'Maybe.some':
                                        var $5933 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $5935 = self.value;
                                                var $5936 = self.errors;
                                                var $5937 = Fm$Check$result$($5935, List$concat$($5930, $5936));
                                                var $5934 = $5937;
                                                break;
                                        };
                                        var $5931 = $5934;
                                        break;
                                };
                                var $5928 = $5931;
                                break;
                        };
                        var $5892 = $5928;
                        break;
                    case 'Fm.Term.nat':
                        var $5938 = self.natx;
                        var $5939 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5892 = $5939;
                        break;
                    case 'Fm.Term.chr':
                        var $5940 = self.chrx;
                        var $5941 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5892 = $5941;
                        break;
                    case 'Fm.Term.str':
                        var $5942 = self.strx;
                        var $5943 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5892 = $5943;
                        break;
                    case 'Fm.Term.cse':
                        var $5944 = self.path;
                        var $5945 = self.expr;
                        var $5946 = self.name;
                        var $5947 = self.with;
                        var $5948 = self.cses;
                        var $5949 = self.moti;
                        var $5950 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5892 = $5950;
                        break;
                    case 'Fm.Term.ori':
                        var $5951 = self.orig;
                        var $5952 = self.expr;
                        var $5953 = Fm$Term$equal$extra_holes$(_a$1, $5952);
                        var $5892 = $5953;
                        break;
                };
                var $5764 = $5892;
                break;
            case 'Fm.Term.all':
                var $5954 = self.eras;
                var $5955 = self.self;
                var $5956 = self.name;
                var $5957 = self.xtyp;
                var $5958 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5960 = self.name;
                        var $5961 = self.indx;
                        var $5962 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5959 = $5962;
                        break;
                    case 'Fm.Term.ref':
                        var $5963 = self.name;
                        var $5964 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5959 = $5964;
                        break;
                    case 'Fm.Term.typ':
                        var $5965 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5959 = $5965;
                        break;
                    case 'Fm.Term.all':
                        var $5966 = self.eras;
                        var $5967 = self.self;
                        var $5968 = self.name;
                        var $5969 = self.xtyp;
                        var $5970 = self.body;
                        var $5971 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5959 = $5971;
                        break;
                    case 'Fm.Term.lam':
                        var $5972 = self.name;
                        var $5973 = self.body;
                        var $5974 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5959 = $5974;
                        break;
                    case 'Fm.Term.app':
                        var $5975 = self.func;
                        var $5976 = self.argm;
                        var $5977 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5959 = $5977;
                        break;
                    case 'Fm.Term.let':
                        var $5978 = self.name;
                        var $5979 = self.expr;
                        var $5980 = self.body;
                        var $5981 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5959 = $5981;
                        break;
                    case 'Fm.Term.def':
                        var $5982 = self.name;
                        var $5983 = self.expr;
                        var $5984 = self.body;
                        var $5985 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5959 = $5985;
                        break;
                    case 'Fm.Term.ann':
                        var $5986 = self.done;
                        var $5987 = self.term;
                        var $5988 = self.type;
                        var $5989 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5959 = $5989;
                        break;
                    case 'Fm.Term.gol':
                        var $5990 = self.name;
                        var $5991 = self.dref;
                        var $5992 = self.verb;
                        var $5993 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5959 = $5993;
                        break;
                    case 'Fm.Term.hol':
                        var $5994 = self.path;
                        var self = Fm$Term$equal$hole$($5994, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $5996 = self.value;
                                var $5997 = self.errors;
                                var self = $5996;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5999 = Fm$Check$result$(Maybe$none, $5997);
                                        var $5998 = $5999;
                                        break;
                                    case 'Maybe.some':
                                        var $6000 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6002 = self.value;
                                                var $6003 = self.errors;
                                                var $6004 = Fm$Check$result$($6002, List$concat$($5997, $6003));
                                                var $6001 = $6004;
                                                break;
                                        };
                                        var $5998 = $6001;
                                        break;
                                };
                                var $5995 = $5998;
                                break;
                        };
                        var $5959 = $5995;
                        break;
                    case 'Fm.Term.nat':
                        var $6005 = self.natx;
                        var $6006 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5959 = $6006;
                        break;
                    case 'Fm.Term.chr':
                        var $6007 = self.chrx;
                        var $6008 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5959 = $6008;
                        break;
                    case 'Fm.Term.str':
                        var $6009 = self.strx;
                        var $6010 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5959 = $6010;
                        break;
                    case 'Fm.Term.cse':
                        var $6011 = self.path;
                        var $6012 = self.expr;
                        var $6013 = self.name;
                        var $6014 = self.with;
                        var $6015 = self.cses;
                        var $6016 = self.moti;
                        var $6017 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5959 = $6017;
                        break;
                    case 'Fm.Term.ori':
                        var $6018 = self.orig;
                        var $6019 = self.expr;
                        var $6020 = Fm$Term$equal$extra_holes$(_a$1, $6019);
                        var $5959 = $6020;
                        break;
                };
                var $5764 = $5959;
                break;
            case 'Fm.Term.lam':
                var $6021 = self.name;
                var $6022 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6024 = self.name;
                        var $6025 = self.indx;
                        var $6026 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6023 = $6026;
                        break;
                    case 'Fm.Term.ref':
                        var $6027 = self.name;
                        var $6028 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6023 = $6028;
                        break;
                    case 'Fm.Term.typ':
                        var $6029 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6023 = $6029;
                        break;
                    case 'Fm.Term.all':
                        var $6030 = self.eras;
                        var $6031 = self.self;
                        var $6032 = self.name;
                        var $6033 = self.xtyp;
                        var $6034 = self.body;
                        var $6035 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6023 = $6035;
                        break;
                    case 'Fm.Term.lam':
                        var $6036 = self.name;
                        var $6037 = self.body;
                        var $6038 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6023 = $6038;
                        break;
                    case 'Fm.Term.app':
                        var $6039 = self.func;
                        var $6040 = self.argm;
                        var $6041 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6023 = $6041;
                        break;
                    case 'Fm.Term.let':
                        var $6042 = self.name;
                        var $6043 = self.expr;
                        var $6044 = self.body;
                        var $6045 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6023 = $6045;
                        break;
                    case 'Fm.Term.def':
                        var $6046 = self.name;
                        var $6047 = self.expr;
                        var $6048 = self.body;
                        var $6049 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6023 = $6049;
                        break;
                    case 'Fm.Term.ann':
                        var $6050 = self.done;
                        var $6051 = self.term;
                        var $6052 = self.type;
                        var $6053 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6023 = $6053;
                        break;
                    case 'Fm.Term.gol':
                        var $6054 = self.name;
                        var $6055 = self.dref;
                        var $6056 = self.verb;
                        var $6057 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6023 = $6057;
                        break;
                    case 'Fm.Term.hol':
                        var $6058 = self.path;
                        var self = Fm$Term$equal$hole$($6058, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6060 = self.value;
                                var $6061 = self.errors;
                                var self = $6060;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6063 = Fm$Check$result$(Maybe$none, $6061);
                                        var $6062 = $6063;
                                        break;
                                    case 'Maybe.some':
                                        var $6064 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6066 = self.value;
                                                var $6067 = self.errors;
                                                var $6068 = Fm$Check$result$($6066, List$concat$($6061, $6067));
                                                var $6065 = $6068;
                                                break;
                                        };
                                        var $6062 = $6065;
                                        break;
                                };
                                var $6059 = $6062;
                                break;
                        };
                        var $6023 = $6059;
                        break;
                    case 'Fm.Term.nat':
                        var $6069 = self.natx;
                        var $6070 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6023 = $6070;
                        break;
                    case 'Fm.Term.chr':
                        var $6071 = self.chrx;
                        var $6072 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6023 = $6072;
                        break;
                    case 'Fm.Term.str':
                        var $6073 = self.strx;
                        var $6074 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6023 = $6074;
                        break;
                    case 'Fm.Term.cse':
                        var $6075 = self.path;
                        var $6076 = self.expr;
                        var $6077 = self.name;
                        var $6078 = self.with;
                        var $6079 = self.cses;
                        var $6080 = self.moti;
                        var $6081 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6023 = $6081;
                        break;
                    case 'Fm.Term.ori':
                        var $6082 = self.orig;
                        var $6083 = self.expr;
                        var $6084 = Fm$Term$equal$extra_holes$(_a$1, $6083);
                        var $6023 = $6084;
                        break;
                };
                var $5764 = $6023;
                break;
            case 'Fm.Term.app':
                var $6085 = self.func;
                var $6086 = self.argm;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6088 = self.name;
                        var $6089 = self.indx;
                        var $6090 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6087 = $6090;
                        break;
                    case 'Fm.Term.ref':
                        var $6091 = self.name;
                        var $6092 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6087 = $6092;
                        break;
                    case 'Fm.Term.typ':
                        var $6093 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6087 = $6093;
                        break;
                    case 'Fm.Term.all':
                        var $6094 = self.eras;
                        var $6095 = self.self;
                        var $6096 = self.name;
                        var $6097 = self.xtyp;
                        var $6098 = self.body;
                        var $6099 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6087 = $6099;
                        break;
                    case 'Fm.Term.lam':
                        var $6100 = self.name;
                        var $6101 = self.body;
                        var $6102 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6087 = $6102;
                        break;
                    case 'Fm.Term.app':
                        var $6103 = self.func;
                        var $6104 = self.argm;
                        var self = Fm$Term$equal$extra_holes$($6085, $6103);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6106 = self.value;
                                var $6107 = self.errors;
                                var self = $6106;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6109 = Fm$Check$result$(Maybe$none, $6107);
                                        var $6108 = $6109;
                                        break;
                                    case 'Maybe.some':
                                        var $6110 = self.value;
                                        var self = Fm$Term$equal$extra_holes$($6086, $6104);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6112 = self.value;
                                                var $6113 = self.errors;
                                                var $6114 = Fm$Check$result$($6112, List$concat$($6107, $6113));
                                                var $6111 = $6114;
                                                break;
                                        };
                                        var $6108 = $6111;
                                        break;
                                };
                                var $6105 = $6108;
                                break;
                        };
                        var $6087 = $6105;
                        break;
                    case 'Fm.Term.let':
                        var $6115 = self.name;
                        var $6116 = self.expr;
                        var $6117 = self.body;
                        var $6118 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6087 = $6118;
                        break;
                    case 'Fm.Term.def':
                        var $6119 = self.name;
                        var $6120 = self.expr;
                        var $6121 = self.body;
                        var $6122 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6087 = $6122;
                        break;
                    case 'Fm.Term.ann':
                        var $6123 = self.done;
                        var $6124 = self.term;
                        var $6125 = self.type;
                        var $6126 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6087 = $6126;
                        break;
                    case 'Fm.Term.gol':
                        var $6127 = self.name;
                        var $6128 = self.dref;
                        var $6129 = self.verb;
                        var $6130 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6087 = $6130;
                        break;
                    case 'Fm.Term.hol':
                        var $6131 = self.path;
                        var self = Fm$Term$equal$hole$($6131, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6133 = self.value;
                                var $6134 = self.errors;
                                var self = $6133;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6136 = Fm$Check$result$(Maybe$none, $6134);
                                        var $6135 = $6136;
                                        break;
                                    case 'Maybe.some':
                                        var $6137 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6139 = self.value;
                                                var $6140 = self.errors;
                                                var $6141 = Fm$Check$result$($6139, List$concat$($6134, $6140));
                                                var $6138 = $6141;
                                                break;
                                        };
                                        var $6135 = $6138;
                                        break;
                                };
                                var $6132 = $6135;
                                break;
                        };
                        var $6087 = $6132;
                        break;
                    case 'Fm.Term.nat':
                        var $6142 = self.natx;
                        var $6143 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6087 = $6143;
                        break;
                    case 'Fm.Term.chr':
                        var $6144 = self.chrx;
                        var $6145 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6087 = $6145;
                        break;
                    case 'Fm.Term.str':
                        var $6146 = self.strx;
                        var $6147 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6087 = $6147;
                        break;
                    case 'Fm.Term.cse':
                        var $6148 = self.path;
                        var $6149 = self.expr;
                        var $6150 = self.name;
                        var $6151 = self.with;
                        var $6152 = self.cses;
                        var $6153 = self.moti;
                        var $6154 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6087 = $6154;
                        break;
                    case 'Fm.Term.ori':
                        var $6155 = self.orig;
                        var $6156 = self.expr;
                        var $6157 = Fm$Term$equal$extra_holes$(_a$1, $6156);
                        var $6087 = $6157;
                        break;
                };
                var $5764 = $6087;
                break;
            case 'Fm.Term.let':
                var $6158 = self.name;
                var $6159 = self.expr;
                var $6160 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6162 = self.name;
                        var $6163 = self.indx;
                        var $6164 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6161 = $6164;
                        break;
                    case 'Fm.Term.ref':
                        var $6165 = self.name;
                        var $6166 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6161 = $6166;
                        break;
                    case 'Fm.Term.typ':
                        var $6167 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6161 = $6167;
                        break;
                    case 'Fm.Term.all':
                        var $6168 = self.eras;
                        var $6169 = self.self;
                        var $6170 = self.name;
                        var $6171 = self.xtyp;
                        var $6172 = self.body;
                        var $6173 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6161 = $6173;
                        break;
                    case 'Fm.Term.lam':
                        var $6174 = self.name;
                        var $6175 = self.body;
                        var $6176 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6161 = $6176;
                        break;
                    case 'Fm.Term.app':
                        var $6177 = self.func;
                        var $6178 = self.argm;
                        var $6179 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6161 = $6179;
                        break;
                    case 'Fm.Term.let':
                        var $6180 = self.name;
                        var $6181 = self.expr;
                        var $6182 = self.body;
                        var $6183 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6161 = $6183;
                        break;
                    case 'Fm.Term.def':
                        var $6184 = self.name;
                        var $6185 = self.expr;
                        var $6186 = self.body;
                        var $6187 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6161 = $6187;
                        break;
                    case 'Fm.Term.ann':
                        var $6188 = self.done;
                        var $6189 = self.term;
                        var $6190 = self.type;
                        var $6191 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6161 = $6191;
                        break;
                    case 'Fm.Term.gol':
                        var $6192 = self.name;
                        var $6193 = self.dref;
                        var $6194 = self.verb;
                        var $6195 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6161 = $6195;
                        break;
                    case 'Fm.Term.hol':
                        var $6196 = self.path;
                        var self = Fm$Term$equal$hole$($6196, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6198 = self.value;
                                var $6199 = self.errors;
                                var self = $6198;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6201 = Fm$Check$result$(Maybe$none, $6199);
                                        var $6200 = $6201;
                                        break;
                                    case 'Maybe.some':
                                        var $6202 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6204 = self.value;
                                                var $6205 = self.errors;
                                                var $6206 = Fm$Check$result$($6204, List$concat$($6199, $6205));
                                                var $6203 = $6206;
                                                break;
                                        };
                                        var $6200 = $6203;
                                        break;
                                };
                                var $6197 = $6200;
                                break;
                        };
                        var $6161 = $6197;
                        break;
                    case 'Fm.Term.nat':
                        var $6207 = self.natx;
                        var $6208 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6161 = $6208;
                        break;
                    case 'Fm.Term.chr':
                        var $6209 = self.chrx;
                        var $6210 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6161 = $6210;
                        break;
                    case 'Fm.Term.str':
                        var $6211 = self.strx;
                        var $6212 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6161 = $6212;
                        break;
                    case 'Fm.Term.cse':
                        var $6213 = self.path;
                        var $6214 = self.expr;
                        var $6215 = self.name;
                        var $6216 = self.with;
                        var $6217 = self.cses;
                        var $6218 = self.moti;
                        var $6219 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6161 = $6219;
                        break;
                    case 'Fm.Term.ori':
                        var $6220 = self.orig;
                        var $6221 = self.expr;
                        var $6222 = Fm$Term$equal$extra_holes$(_a$1, $6221);
                        var $6161 = $6222;
                        break;
                };
                var $5764 = $6161;
                break;
            case 'Fm.Term.def':
                var $6223 = self.name;
                var $6224 = self.expr;
                var $6225 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6227 = self.name;
                        var $6228 = self.indx;
                        var $6229 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6226 = $6229;
                        break;
                    case 'Fm.Term.ref':
                        var $6230 = self.name;
                        var $6231 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6226 = $6231;
                        break;
                    case 'Fm.Term.typ':
                        var $6232 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6226 = $6232;
                        break;
                    case 'Fm.Term.all':
                        var $6233 = self.eras;
                        var $6234 = self.self;
                        var $6235 = self.name;
                        var $6236 = self.xtyp;
                        var $6237 = self.body;
                        var $6238 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6226 = $6238;
                        break;
                    case 'Fm.Term.lam':
                        var $6239 = self.name;
                        var $6240 = self.body;
                        var $6241 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6226 = $6241;
                        break;
                    case 'Fm.Term.app':
                        var $6242 = self.func;
                        var $6243 = self.argm;
                        var $6244 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6226 = $6244;
                        break;
                    case 'Fm.Term.let':
                        var $6245 = self.name;
                        var $6246 = self.expr;
                        var $6247 = self.body;
                        var $6248 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6226 = $6248;
                        break;
                    case 'Fm.Term.def':
                        var $6249 = self.name;
                        var $6250 = self.expr;
                        var $6251 = self.body;
                        var $6252 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6226 = $6252;
                        break;
                    case 'Fm.Term.ann':
                        var $6253 = self.done;
                        var $6254 = self.term;
                        var $6255 = self.type;
                        var $6256 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6226 = $6256;
                        break;
                    case 'Fm.Term.gol':
                        var $6257 = self.name;
                        var $6258 = self.dref;
                        var $6259 = self.verb;
                        var $6260 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6226 = $6260;
                        break;
                    case 'Fm.Term.hol':
                        var $6261 = self.path;
                        var self = Fm$Term$equal$hole$($6261, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6263 = self.value;
                                var $6264 = self.errors;
                                var self = $6263;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6266 = Fm$Check$result$(Maybe$none, $6264);
                                        var $6265 = $6266;
                                        break;
                                    case 'Maybe.some':
                                        var $6267 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6269 = self.value;
                                                var $6270 = self.errors;
                                                var $6271 = Fm$Check$result$($6269, List$concat$($6264, $6270));
                                                var $6268 = $6271;
                                                break;
                                        };
                                        var $6265 = $6268;
                                        break;
                                };
                                var $6262 = $6265;
                                break;
                        };
                        var $6226 = $6262;
                        break;
                    case 'Fm.Term.nat':
                        var $6272 = self.natx;
                        var $6273 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6226 = $6273;
                        break;
                    case 'Fm.Term.chr':
                        var $6274 = self.chrx;
                        var $6275 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6226 = $6275;
                        break;
                    case 'Fm.Term.str':
                        var $6276 = self.strx;
                        var $6277 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6226 = $6277;
                        break;
                    case 'Fm.Term.cse':
                        var $6278 = self.path;
                        var $6279 = self.expr;
                        var $6280 = self.name;
                        var $6281 = self.with;
                        var $6282 = self.cses;
                        var $6283 = self.moti;
                        var $6284 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6226 = $6284;
                        break;
                    case 'Fm.Term.ori':
                        var $6285 = self.orig;
                        var $6286 = self.expr;
                        var $6287 = Fm$Term$equal$extra_holes$(_a$1, $6286);
                        var $6226 = $6287;
                        break;
                };
                var $5764 = $6226;
                break;
            case 'Fm.Term.ann':
                var $6288 = self.done;
                var $6289 = self.term;
                var $6290 = self.type;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6292 = self.name;
                        var $6293 = self.indx;
                        var $6294 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6291 = $6294;
                        break;
                    case 'Fm.Term.ref':
                        var $6295 = self.name;
                        var $6296 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6291 = $6296;
                        break;
                    case 'Fm.Term.typ':
                        var $6297 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6291 = $6297;
                        break;
                    case 'Fm.Term.all':
                        var $6298 = self.eras;
                        var $6299 = self.self;
                        var $6300 = self.name;
                        var $6301 = self.xtyp;
                        var $6302 = self.body;
                        var $6303 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6291 = $6303;
                        break;
                    case 'Fm.Term.lam':
                        var $6304 = self.name;
                        var $6305 = self.body;
                        var $6306 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6291 = $6306;
                        break;
                    case 'Fm.Term.app':
                        var $6307 = self.func;
                        var $6308 = self.argm;
                        var $6309 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6291 = $6309;
                        break;
                    case 'Fm.Term.let':
                        var $6310 = self.name;
                        var $6311 = self.expr;
                        var $6312 = self.body;
                        var $6313 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6291 = $6313;
                        break;
                    case 'Fm.Term.def':
                        var $6314 = self.name;
                        var $6315 = self.expr;
                        var $6316 = self.body;
                        var $6317 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6291 = $6317;
                        break;
                    case 'Fm.Term.ann':
                        var $6318 = self.done;
                        var $6319 = self.term;
                        var $6320 = self.type;
                        var $6321 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6291 = $6321;
                        break;
                    case 'Fm.Term.gol':
                        var $6322 = self.name;
                        var $6323 = self.dref;
                        var $6324 = self.verb;
                        var $6325 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6291 = $6325;
                        break;
                    case 'Fm.Term.hol':
                        var $6326 = self.path;
                        var self = Fm$Term$equal$hole$($6326, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6328 = self.value;
                                var $6329 = self.errors;
                                var self = $6328;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6331 = Fm$Check$result$(Maybe$none, $6329);
                                        var $6330 = $6331;
                                        break;
                                    case 'Maybe.some':
                                        var $6332 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6334 = self.value;
                                                var $6335 = self.errors;
                                                var $6336 = Fm$Check$result$($6334, List$concat$($6329, $6335));
                                                var $6333 = $6336;
                                                break;
                                        };
                                        var $6330 = $6333;
                                        break;
                                };
                                var $6327 = $6330;
                                break;
                        };
                        var $6291 = $6327;
                        break;
                    case 'Fm.Term.nat':
                        var $6337 = self.natx;
                        var $6338 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6291 = $6338;
                        break;
                    case 'Fm.Term.chr':
                        var $6339 = self.chrx;
                        var $6340 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6291 = $6340;
                        break;
                    case 'Fm.Term.str':
                        var $6341 = self.strx;
                        var $6342 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6291 = $6342;
                        break;
                    case 'Fm.Term.cse':
                        var $6343 = self.path;
                        var $6344 = self.expr;
                        var $6345 = self.name;
                        var $6346 = self.with;
                        var $6347 = self.cses;
                        var $6348 = self.moti;
                        var $6349 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6291 = $6349;
                        break;
                    case 'Fm.Term.ori':
                        var $6350 = self.orig;
                        var $6351 = self.expr;
                        var $6352 = Fm$Term$equal$extra_holes$(_a$1, $6351);
                        var $6291 = $6352;
                        break;
                };
                var $5764 = $6291;
                break;
            case 'Fm.Term.gol':
                var $6353 = self.name;
                var $6354 = self.dref;
                var $6355 = self.verb;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6357 = self.name;
                        var $6358 = self.indx;
                        var $6359 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6356 = $6359;
                        break;
                    case 'Fm.Term.ref':
                        var $6360 = self.name;
                        var $6361 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6356 = $6361;
                        break;
                    case 'Fm.Term.typ':
                        var $6362 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6356 = $6362;
                        break;
                    case 'Fm.Term.all':
                        var $6363 = self.eras;
                        var $6364 = self.self;
                        var $6365 = self.name;
                        var $6366 = self.xtyp;
                        var $6367 = self.body;
                        var $6368 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6356 = $6368;
                        break;
                    case 'Fm.Term.lam':
                        var $6369 = self.name;
                        var $6370 = self.body;
                        var $6371 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6356 = $6371;
                        break;
                    case 'Fm.Term.app':
                        var $6372 = self.func;
                        var $6373 = self.argm;
                        var $6374 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6356 = $6374;
                        break;
                    case 'Fm.Term.let':
                        var $6375 = self.name;
                        var $6376 = self.expr;
                        var $6377 = self.body;
                        var $6378 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6356 = $6378;
                        break;
                    case 'Fm.Term.def':
                        var $6379 = self.name;
                        var $6380 = self.expr;
                        var $6381 = self.body;
                        var $6382 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6356 = $6382;
                        break;
                    case 'Fm.Term.ann':
                        var $6383 = self.done;
                        var $6384 = self.term;
                        var $6385 = self.type;
                        var $6386 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6356 = $6386;
                        break;
                    case 'Fm.Term.gol':
                        var $6387 = self.name;
                        var $6388 = self.dref;
                        var $6389 = self.verb;
                        var $6390 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6356 = $6390;
                        break;
                    case 'Fm.Term.hol':
                        var $6391 = self.path;
                        var self = Fm$Term$equal$hole$($6391, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6393 = self.value;
                                var $6394 = self.errors;
                                var self = $6393;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6396 = Fm$Check$result$(Maybe$none, $6394);
                                        var $6395 = $6396;
                                        break;
                                    case 'Maybe.some':
                                        var $6397 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6399 = self.value;
                                                var $6400 = self.errors;
                                                var $6401 = Fm$Check$result$($6399, List$concat$($6394, $6400));
                                                var $6398 = $6401;
                                                break;
                                        };
                                        var $6395 = $6398;
                                        break;
                                };
                                var $6392 = $6395;
                                break;
                        };
                        var $6356 = $6392;
                        break;
                    case 'Fm.Term.nat':
                        var $6402 = self.natx;
                        var $6403 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6356 = $6403;
                        break;
                    case 'Fm.Term.chr':
                        var $6404 = self.chrx;
                        var $6405 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6356 = $6405;
                        break;
                    case 'Fm.Term.str':
                        var $6406 = self.strx;
                        var $6407 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6356 = $6407;
                        break;
                    case 'Fm.Term.cse':
                        var $6408 = self.path;
                        var $6409 = self.expr;
                        var $6410 = self.name;
                        var $6411 = self.with;
                        var $6412 = self.cses;
                        var $6413 = self.moti;
                        var $6414 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6356 = $6414;
                        break;
                    case 'Fm.Term.ori':
                        var $6415 = self.orig;
                        var $6416 = self.expr;
                        var $6417 = Fm$Term$equal$extra_holes$(_a$1, $6416);
                        var $6356 = $6417;
                        break;
                };
                var $5764 = $6356;
                break;
            case 'Fm.Term.hol':
                var $6418 = self.path;
                var self = Fm$Term$equal$hole$($6418, _b$2);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $6420 = self.value;
                        var $6421 = self.errors;
                        var self = $6420;
                        switch (self._) {
                            case 'Maybe.none':
                                var $6423 = Fm$Check$result$(Maybe$none, $6421);
                                var $6422 = $6423;
                                break;
                            case 'Maybe.some':
                                var $6424 = self.value;
                                var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $6426 = self.value;
                                        var $6427 = self.errors;
                                        var $6428 = Fm$Check$result$($6426, List$concat$($6421, $6427));
                                        var $6425 = $6428;
                                        break;
                                };
                                var $6422 = $6425;
                                break;
                        };
                        var $6419 = $6422;
                        break;
                };
                var $5764 = $6419;
                break;
            case 'Fm.Term.nat':
                var $6429 = self.natx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6431 = self.name;
                        var $6432 = self.indx;
                        var $6433 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6430 = $6433;
                        break;
                    case 'Fm.Term.ref':
                        var $6434 = self.name;
                        var $6435 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6430 = $6435;
                        break;
                    case 'Fm.Term.typ':
                        var $6436 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6430 = $6436;
                        break;
                    case 'Fm.Term.all':
                        var $6437 = self.eras;
                        var $6438 = self.self;
                        var $6439 = self.name;
                        var $6440 = self.xtyp;
                        var $6441 = self.body;
                        var $6442 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6430 = $6442;
                        break;
                    case 'Fm.Term.lam':
                        var $6443 = self.name;
                        var $6444 = self.body;
                        var $6445 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6430 = $6445;
                        break;
                    case 'Fm.Term.app':
                        var $6446 = self.func;
                        var $6447 = self.argm;
                        var $6448 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6430 = $6448;
                        break;
                    case 'Fm.Term.let':
                        var $6449 = self.name;
                        var $6450 = self.expr;
                        var $6451 = self.body;
                        var $6452 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6430 = $6452;
                        break;
                    case 'Fm.Term.def':
                        var $6453 = self.name;
                        var $6454 = self.expr;
                        var $6455 = self.body;
                        var $6456 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6430 = $6456;
                        break;
                    case 'Fm.Term.ann':
                        var $6457 = self.done;
                        var $6458 = self.term;
                        var $6459 = self.type;
                        var $6460 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6430 = $6460;
                        break;
                    case 'Fm.Term.gol':
                        var $6461 = self.name;
                        var $6462 = self.dref;
                        var $6463 = self.verb;
                        var $6464 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6430 = $6464;
                        break;
                    case 'Fm.Term.hol':
                        var $6465 = self.path;
                        var self = Fm$Term$equal$hole$($6465, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6467 = self.value;
                                var $6468 = self.errors;
                                var self = $6467;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6470 = Fm$Check$result$(Maybe$none, $6468);
                                        var $6469 = $6470;
                                        break;
                                    case 'Maybe.some':
                                        var $6471 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6473 = self.value;
                                                var $6474 = self.errors;
                                                var $6475 = Fm$Check$result$($6473, List$concat$($6468, $6474));
                                                var $6472 = $6475;
                                                break;
                                        };
                                        var $6469 = $6472;
                                        break;
                                };
                                var $6466 = $6469;
                                break;
                        };
                        var $6430 = $6466;
                        break;
                    case 'Fm.Term.nat':
                        var $6476 = self.natx;
                        var $6477 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6430 = $6477;
                        break;
                    case 'Fm.Term.chr':
                        var $6478 = self.chrx;
                        var $6479 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6430 = $6479;
                        break;
                    case 'Fm.Term.str':
                        var $6480 = self.strx;
                        var $6481 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6430 = $6481;
                        break;
                    case 'Fm.Term.cse':
                        var $6482 = self.path;
                        var $6483 = self.expr;
                        var $6484 = self.name;
                        var $6485 = self.with;
                        var $6486 = self.cses;
                        var $6487 = self.moti;
                        var $6488 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6430 = $6488;
                        break;
                    case 'Fm.Term.ori':
                        var $6489 = self.orig;
                        var $6490 = self.expr;
                        var $6491 = Fm$Term$equal$extra_holes$(_a$1, $6490);
                        var $6430 = $6491;
                        break;
                };
                var $5764 = $6430;
                break;
            case 'Fm.Term.chr':
                var $6492 = self.chrx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6494 = self.name;
                        var $6495 = self.indx;
                        var $6496 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6493 = $6496;
                        break;
                    case 'Fm.Term.ref':
                        var $6497 = self.name;
                        var $6498 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6493 = $6498;
                        break;
                    case 'Fm.Term.typ':
                        var $6499 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6493 = $6499;
                        break;
                    case 'Fm.Term.all':
                        var $6500 = self.eras;
                        var $6501 = self.self;
                        var $6502 = self.name;
                        var $6503 = self.xtyp;
                        var $6504 = self.body;
                        var $6505 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6493 = $6505;
                        break;
                    case 'Fm.Term.lam':
                        var $6506 = self.name;
                        var $6507 = self.body;
                        var $6508 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6493 = $6508;
                        break;
                    case 'Fm.Term.app':
                        var $6509 = self.func;
                        var $6510 = self.argm;
                        var $6511 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6493 = $6511;
                        break;
                    case 'Fm.Term.let':
                        var $6512 = self.name;
                        var $6513 = self.expr;
                        var $6514 = self.body;
                        var $6515 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6493 = $6515;
                        break;
                    case 'Fm.Term.def':
                        var $6516 = self.name;
                        var $6517 = self.expr;
                        var $6518 = self.body;
                        var $6519 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6493 = $6519;
                        break;
                    case 'Fm.Term.ann':
                        var $6520 = self.done;
                        var $6521 = self.term;
                        var $6522 = self.type;
                        var $6523 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6493 = $6523;
                        break;
                    case 'Fm.Term.gol':
                        var $6524 = self.name;
                        var $6525 = self.dref;
                        var $6526 = self.verb;
                        var $6527 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6493 = $6527;
                        break;
                    case 'Fm.Term.hol':
                        var $6528 = self.path;
                        var self = Fm$Term$equal$hole$($6528, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6530 = self.value;
                                var $6531 = self.errors;
                                var self = $6530;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6533 = Fm$Check$result$(Maybe$none, $6531);
                                        var $6532 = $6533;
                                        break;
                                    case 'Maybe.some':
                                        var $6534 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6536 = self.value;
                                                var $6537 = self.errors;
                                                var $6538 = Fm$Check$result$($6536, List$concat$($6531, $6537));
                                                var $6535 = $6538;
                                                break;
                                        };
                                        var $6532 = $6535;
                                        break;
                                };
                                var $6529 = $6532;
                                break;
                        };
                        var $6493 = $6529;
                        break;
                    case 'Fm.Term.nat':
                        var $6539 = self.natx;
                        var $6540 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6493 = $6540;
                        break;
                    case 'Fm.Term.chr':
                        var $6541 = self.chrx;
                        var $6542 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6493 = $6542;
                        break;
                    case 'Fm.Term.str':
                        var $6543 = self.strx;
                        var $6544 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6493 = $6544;
                        break;
                    case 'Fm.Term.cse':
                        var $6545 = self.path;
                        var $6546 = self.expr;
                        var $6547 = self.name;
                        var $6548 = self.with;
                        var $6549 = self.cses;
                        var $6550 = self.moti;
                        var $6551 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6493 = $6551;
                        break;
                    case 'Fm.Term.ori':
                        var $6552 = self.orig;
                        var $6553 = self.expr;
                        var $6554 = Fm$Term$equal$extra_holes$(_a$1, $6553);
                        var $6493 = $6554;
                        break;
                };
                var $5764 = $6493;
                break;
            case 'Fm.Term.str':
                var $6555 = self.strx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6557 = self.name;
                        var $6558 = self.indx;
                        var $6559 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6556 = $6559;
                        break;
                    case 'Fm.Term.ref':
                        var $6560 = self.name;
                        var $6561 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6556 = $6561;
                        break;
                    case 'Fm.Term.typ':
                        var $6562 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6556 = $6562;
                        break;
                    case 'Fm.Term.all':
                        var $6563 = self.eras;
                        var $6564 = self.self;
                        var $6565 = self.name;
                        var $6566 = self.xtyp;
                        var $6567 = self.body;
                        var $6568 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6556 = $6568;
                        break;
                    case 'Fm.Term.lam':
                        var $6569 = self.name;
                        var $6570 = self.body;
                        var $6571 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6556 = $6571;
                        break;
                    case 'Fm.Term.app':
                        var $6572 = self.func;
                        var $6573 = self.argm;
                        var $6574 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6556 = $6574;
                        break;
                    case 'Fm.Term.let':
                        var $6575 = self.name;
                        var $6576 = self.expr;
                        var $6577 = self.body;
                        var $6578 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6556 = $6578;
                        break;
                    case 'Fm.Term.def':
                        var $6579 = self.name;
                        var $6580 = self.expr;
                        var $6581 = self.body;
                        var $6582 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6556 = $6582;
                        break;
                    case 'Fm.Term.ann':
                        var $6583 = self.done;
                        var $6584 = self.term;
                        var $6585 = self.type;
                        var $6586 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6556 = $6586;
                        break;
                    case 'Fm.Term.gol':
                        var $6587 = self.name;
                        var $6588 = self.dref;
                        var $6589 = self.verb;
                        var $6590 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6556 = $6590;
                        break;
                    case 'Fm.Term.hol':
                        var $6591 = self.path;
                        var self = Fm$Term$equal$hole$($6591, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6593 = self.value;
                                var $6594 = self.errors;
                                var self = $6593;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6596 = Fm$Check$result$(Maybe$none, $6594);
                                        var $6595 = $6596;
                                        break;
                                    case 'Maybe.some':
                                        var $6597 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6599 = self.value;
                                                var $6600 = self.errors;
                                                var $6601 = Fm$Check$result$($6599, List$concat$($6594, $6600));
                                                var $6598 = $6601;
                                                break;
                                        };
                                        var $6595 = $6598;
                                        break;
                                };
                                var $6592 = $6595;
                                break;
                        };
                        var $6556 = $6592;
                        break;
                    case 'Fm.Term.nat':
                        var $6602 = self.natx;
                        var $6603 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6556 = $6603;
                        break;
                    case 'Fm.Term.chr':
                        var $6604 = self.chrx;
                        var $6605 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6556 = $6605;
                        break;
                    case 'Fm.Term.str':
                        var $6606 = self.strx;
                        var $6607 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6556 = $6607;
                        break;
                    case 'Fm.Term.cse':
                        var $6608 = self.path;
                        var $6609 = self.expr;
                        var $6610 = self.name;
                        var $6611 = self.with;
                        var $6612 = self.cses;
                        var $6613 = self.moti;
                        var $6614 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6556 = $6614;
                        break;
                    case 'Fm.Term.ori':
                        var $6615 = self.orig;
                        var $6616 = self.expr;
                        var $6617 = Fm$Term$equal$extra_holes$(_a$1, $6616);
                        var $6556 = $6617;
                        break;
                };
                var $5764 = $6556;
                break;
            case 'Fm.Term.cse':
                var $6618 = self.path;
                var $6619 = self.expr;
                var $6620 = self.name;
                var $6621 = self.with;
                var $6622 = self.cses;
                var $6623 = self.moti;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6625 = self.name;
                        var $6626 = self.indx;
                        var $6627 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6624 = $6627;
                        break;
                    case 'Fm.Term.ref':
                        var $6628 = self.name;
                        var $6629 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6624 = $6629;
                        break;
                    case 'Fm.Term.typ':
                        var $6630 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6624 = $6630;
                        break;
                    case 'Fm.Term.all':
                        var $6631 = self.eras;
                        var $6632 = self.self;
                        var $6633 = self.name;
                        var $6634 = self.xtyp;
                        var $6635 = self.body;
                        var $6636 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6624 = $6636;
                        break;
                    case 'Fm.Term.lam':
                        var $6637 = self.name;
                        var $6638 = self.body;
                        var $6639 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6624 = $6639;
                        break;
                    case 'Fm.Term.app':
                        var $6640 = self.func;
                        var $6641 = self.argm;
                        var $6642 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6624 = $6642;
                        break;
                    case 'Fm.Term.let':
                        var $6643 = self.name;
                        var $6644 = self.expr;
                        var $6645 = self.body;
                        var $6646 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6624 = $6646;
                        break;
                    case 'Fm.Term.def':
                        var $6647 = self.name;
                        var $6648 = self.expr;
                        var $6649 = self.body;
                        var $6650 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6624 = $6650;
                        break;
                    case 'Fm.Term.ann':
                        var $6651 = self.done;
                        var $6652 = self.term;
                        var $6653 = self.type;
                        var $6654 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6624 = $6654;
                        break;
                    case 'Fm.Term.gol':
                        var $6655 = self.name;
                        var $6656 = self.dref;
                        var $6657 = self.verb;
                        var $6658 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6624 = $6658;
                        break;
                    case 'Fm.Term.hol':
                        var $6659 = self.path;
                        var self = Fm$Term$equal$hole$($6659, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6661 = self.value;
                                var $6662 = self.errors;
                                var self = $6661;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6664 = Fm$Check$result$(Maybe$none, $6662);
                                        var $6663 = $6664;
                                        break;
                                    case 'Maybe.some':
                                        var $6665 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6667 = self.value;
                                                var $6668 = self.errors;
                                                var $6669 = Fm$Check$result$($6667, List$concat$($6662, $6668));
                                                var $6666 = $6669;
                                                break;
                                        };
                                        var $6663 = $6666;
                                        break;
                                };
                                var $6660 = $6663;
                                break;
                        };
                        var $6624 = $6660;
                        break;
                    case 'Fm.Term.nat':
                        var $6670 = self.natx;
                        var $6671 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6624 = $6671;
                        break;
                    case 'Fm.Term.chr':
                        var $6672 = self.chrx;
                        var $6673 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6624 = $6673;
                        break;
                    case 'Fm.Term.str':
                        var $6674 = self.strx;
                        var $6675 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6624 = $6675;
                        break;
                    case 'Fm.Term.cse':
                        var $6676 = self.path;
                        var $6677 = self.expr;
                        var $6678 = self.name;
                        var $6679 = self.with;
                        var $6680 = self.cses;
                        var $6681 = self.moti;
                        var $6682 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6624 = $6682;
                        break;
                    case 'Fm.Term.ori':
                        var $6683 = self.orig;
                        var $6684 = self.expr;
                        var $6685 = Fm$Term$equal$extra_holes$(_a$1, $6684);
                        var $6624 = $6685;
                        break;
                };
                var $5764 = $6624;
                break;
            case 'Fm.Term.ori':
                var $6686 = self.orig;
                var $6687 = self.expr;
                var $6688 = Fm$Term$equal$extra_holes$($6687, _b$2);
                var $5764 = $6688;
                break;
        };
        return $5764;
    };
    const Fm$Term$equal$extra_holes = x0 => x1 => Fm$Term$equal$extra_holes$(x0, x1);

    function Set$set$(_bits$1, _set$2) {
        var $6689 = Map$set$(_bits$1, Unit$new, _set$2);
        return $6689;
    };
    const Set$set = x0 => x1 => Set$set$(x0, x1);

    function Bool$eql$(_a$1, _b$2) {
        var self = _a$1;
        if (self) {
            var $6691 = _b$2;
            var $6690 = $6691;
        } else {
            var $6692 = (!_b$2);
            var $6690 = $6692;
        };
        return $6690;
    };
    const Bool$eql = x0 => x1 => Bool$eql$(x0, x1);

    function Fm$Term$equal$(_a$1, _b$2, _defs$3, _lv$4, _dp$5, _seen$6) {
        var self = (_dp$5 >= 64n);
        if (self) {
            var $6694 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
            var $6693 = $6694;
        } else {
            var _ah$7 = Fm$Term$serialize$(Fm$Term$reduce$(_a$1, Map$new), _lv$4, _lv$4, Bits$o, Bits$e);
            var _bh$8 = Fm$Term$serialize$(Fm$Term$reduce$(_b$2, Map$new), _lv$4, _lv$4, Bits$i, Bits$e);
            var self = (_bh$8 === _ah$7);
            if (self) {
                var $6696 = Fm$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $6695 = $6696;
            } else {
                var _a1$9 = Fm$Term$reduce$(_a$1, _defs$3);
                var _b1$10 = Fm$Term$reduce$(_b$2, _defs$3);
                var _ah$11 = Fm$Term$serialize$(_a1$9, _lv$4, _lv$4, Bits$o, Bits$e);
                var _bh$12 = Fm$Term$serialize$(_b1$10, _lv$4, _lv$4, Bits$i, Bits$e);
                var self = (_bh$12 === _ah$11);
                if (self) {
                    var $6698 = Fm$Check$result$(Maybe$some$(Bool$true), List$nil);
                    var $6697 = $6698;
                } else {
                    var _id$13 = (_bh$12 + _ah$11);
                    var self = Set$has$(_id$13, _seen$6);
                    if (self) {
                        var self = Fm$Term$equal$extra_holes$(_a$1, _b$2);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6701 = self.value;
                                var $6702 = self.errors;
                                var self = $6701;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6704 = Fm$Check$result$(Maybe$none, $6702);
                                        var $6703 = $6704;
                                        break;
                                    case 'Maybe.some':
                                        var $6705 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Bool$true), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6707 = self.value;
                                                var $6708 = self.errors;
                                                var $6709 = Fm$Check$result$($6707, List$concat$($6702, $6708));
                                                var $6706 = $6709;
                                                break;
                                        };
                                        var $6703 = $6706;
                                        break;
                                };
                                var $6700 = $6703;
                                break;
                        };
                        var $6699 = $6700;
                    } else {
                        var self = _a1$9;
                        switch (self._) {
                            case 'Fm.Term.var':
                                var $6711 = self.name;
                                var $6712 = self.indx;
                                var self = _b1$10;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $6714 = self.name;
                                        var $6715 = self.indx;
                                        var $6716 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6713 = $6716;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $6717 = self.name;
                                        var $6718 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6713 = $6718;
                                        break;
                                    case 'Fm.Term.typ':
                                        var $6719 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6713 = $6719;
                                        break;
                                    case 'Fm.Term.all':
                                        var $6720 = self.eras;
                                        var $6721 = self.self;
                                        var $6722 = self.name;
                                        var $6723 = self.xtyp;
                                        var $6724 = self.body;
                                        var $6725 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6713 = $6725;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $6726 = self.name;
                                        var $6727 = self.body;
                                        var $6728 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6713 = $6728;
                                        break;
                                    case 'Fm.Term.app':
                                        var $6729 = self.func;
                                        var $6730 = self.argm;
                                        var $6731 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6713 = $6731;
                                        break;
                                    case 'Fm.Term.let':
                                        var $6732 = self.name;
                                        var $6733 = self.expr;
                                        var $6734 = self.body;
                                        var $6735 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6713 = $6735;
                                        break;
                                    case 'Fm.Term.def':
                                        var $6736 = self.name;
                                        var $6737 = self.expr;
                                        var $6738 = self.body;
                                        var $6739 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6713 = $6739;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $6740 = self.done;
                                        var $6741 = self.term;
                                        var $6742 = self.type;
                                        var $6743 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6713 = $6743;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $6744 = self.name;
                                        var $6745 = self.dref;
                                        var $6746 = self.verb;
                                        var $6747 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6713 = $6747;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $6748 = self.path;
                                        var $6749 = Fm$Term$equal$hole$($6748, _a$1);
                                        var $6713 = $6749;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $6750 = self.natx;
                                        var $6751 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6713 = $6751;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $6752 = self.chrx;
                                        var $6753 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6713 = $6753;
                                        break;
                                    case 'Fm.Term.str':
                                        var $6754 = self.strx;
                                        var $6755 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6713 = $6755;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $6756 = self.path;
                                        var $6757 = self.expr;
                                        var $6758 = self.name;
                                        var $6759 = self.with;
                                        var $6760 = self.cses;
                                        var $6761 = self.moti;
                                        var $6762 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6713 = $6762;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $6763 = self.orig;
                                        var $6764 = self.expr;
                                        var $6765 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6713 = $6765;
                                        break;
                                };
                                var $6710 = $6713;
                                break;
                            case 'Fm.Term.ref':
                                var $6766 = self.name;
                                var self = _b1$10;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $6768 = self.name;
                                        var $6769 = self.indx;
                                        var $6770 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6767 = $6770;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $6771 = self.name;
                                        var $6772 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6767 = $6772;
                                        break;
                                    case 'Fm.Term.typ':
                                        var $6773 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6767 = $6773;
                                        break;
                                    case 'Fm.Term.all':
                                        var $6774 = self.eras;
                                        var $6775 = self.self;
                                        var $6776 = self.name;
                                        var $6777 = self.xtyp;
                                        var $6778 = self.body;
                                        var $6779 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6767 = $6779;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $6780 = self.name;
                                        var $6781 = self.body;
                                        var $6782 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6767 = $6782;
                                        break;
                                    case 'Fm.Term.app':
                                        var $6783 = self.func;
                                        var $6784 = self.argm;
                                        var $6785 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6767 = $6785;
                                        break;
                                    case 'Fm.Term.let':
                                        var $6786 = self.name;
                                        var $6787 = self.expr;
                                        var $6788 = self.body;
                                        var $6789 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6767 = $6789;
                                        break;
                                    case 'Fm.Term.def':
                                        var $6790 = self.name;
                                        var $6791 = self.expr;
                                        var $6792 = self.body;
                                        var $6793 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6767 = $6793;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $6794 = self.done;
                                        var $6795 = self.term;
                                        var $6796 = self.type;
                                        var $6797 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6767 = $6797;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $6798 = self.name;
                                        var $6799 = self.dref;
                                        var $6800 = self.verb;
                                        var $6801 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6767 = $6801;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $6802 = self.path;
                                        var $6803 = Fm$Term$equal$hole$($6802, _a$1);
                                        var $6767 = $6803;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $6804 = self.natx;
                                        var $6805 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6767 = $6805;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $6806 = self.chrx;
                                        var $6807 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6767 = $6807;
                                        break;
                                    case 'Fm.Term.str':
                                        var $6808 = self.strx;
                                        var $6809 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6767 = $6809;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $6810 = self.path;
                                        var $6811 = self.expr;
                                        var $6812 = self.name;
                                        var $6813 = self.with;
                                        var $6814 = self.cses;
                                        var $6815 = self.moti;
                                        var $6816 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6767 = $6816;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $6817 = self.orig;
                                        var $6818 = self.expr;
                                        var $6819 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6767 = $6819;
                                        break;
                                };
                                var $6710 = $6767;
                                break;
                            case 'Fm.Term.typ':
                                var self = _b1$10;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $6821 = self.name;
                                        var $6822 = self.indx;
                                        var $6823 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6820 = $6823;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $6824 = self.name;
                                        var $6825 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6820 = $6825;
                                        break;
                                    case 'Fm.Term.typ':
                                        var $6826 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6820 = $6826;
                                        break;
                                    case 'Fm.Term.all':
                                        var $6827 = self.eras;
                                        var $6828 = self.self;
                                        var $6829 = self.name;
                                        var $6830 = self.xtyp;
                                        var $6831 = self.body;
                                        var $6832 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6820 = $6832;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $6833 = self.name;
                                        var $6834 = self.body;
                                        var $6835 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6820 = $6835;
                                        break;
                                    case 'Fm.Term.app':
                                        var $6836 = self.func;
                                        var $6837 = self.argm;
                                        var $6838 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6820 = $6838;
                                        break;
                                    case 'Fm.Term.let':
                                        var $6839 = self.name;
                                        var $6840 = self.expr;
                                        var $6841 = self.body;
                                        var $6842 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6820 = $6842;
                                        break;
                                    case 'Fm.Term.def':
                                        var $6843 = self.name;
                                        var $6844 = self.expr;
                                        var $6845 = self.body;
                                        var $6846 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6820 = $6846;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $6847 = self.done;
                                        var $6848 = self.term;
                                        var $6849 = self.type;
                                        var $6850 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6820 = $6850;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $6851 = self.name;
                                        var $6852 = self.dref;
                                        var $6853 = self.verb;
                                        var $6854 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6820 = $6854;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $6855 = self.path;
                                        var $6856 = Fm$Term$equal$hole$($6855, _a$1);
                                        var $6820 = $6856;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $6857 = self.natx;
                                        var $6858 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6820 = $6858;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $6859 = self.chrx;
                                        var $6860 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6820 = $6860;
                                        break;
                                    case 'Fm.Term.str':
                                        var $6861 = self.strx;
                                        var $6862 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6820 = $6862;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $6863 = self.path;
                                        var $6864 = self.expr;
                                        var $6865 = self.name;
                                        var $6866 = self.with;
                                        var $6867 = self.cses;
                                        var $6868 = self.moti;
                                        var $6869 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6820 = $6869;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $6870 = self.orig;
                                        var $6871 = self.expr;
                                        var $6872 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6820 = $6872;
                                        break;
                                };
                                var $6710 = $6820;
                                break;
                            case 'Fm.Term.all':
                                var $6873 = self.eras;
                                var $6874 = self.self;
                                var $6875 = self.name;
                                var $6876 = self.xtyp;
                                var $6877 = self.body;
                                var self = _b1$10;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $6879 = self.name;
                                        var $6880 = self.indx;
                                        var $6881 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6878 = $6881;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $6882 = self.name;
                                        var $6883 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6878 = $6883;
                                        break;
                                    case 'Fm.Term.typ':
                                        var $6884 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6878 = $6884;
                                        break;
                                    case 'Fm.Term.all':
                                        var $6885 = self.eras;
                                        var $6886 = self.self;
                                        var $6887 = self.name;
                                        var $6888 = self.xtyp;
                                        var $6889 = self.body;
                                        var _seen$24 = Set$set$(_id$13, _seen$6);
                                        var _a1_body$25 = $6877(Fm$Term$var$($6874, _lv$4))(Fm$Term$var$($6875, Nat$succ$(_lv$4)));
                                        var _b1_body$26 = $6889(Fm$Term$var$($6886, _lv$4))(Fm$Term$var$($6887, Nat$succ$(_lv$4)));
                                        var _eq_self$27 = ($6874 === $6886);
                                        var _eq_eras$28 = Bool$eql$($6873, $6885);
                                        var self = (_eq_self$27 && _eq_eras$28);
                                        if (self) {
                                            var self = Fm$Term$equal$($6876, $6888, _defs$3, _lv$4, Nat$succ$(_dp$5), _seen$24);
                                            switch (self._) {
                                                case 'Fm.Check.result':
                                                    var $6892 = self.value;
                                                    var $6893 = self.errors;
                                                    var self = $6892;
                                                    switch (self._) {
                                                        case 'Maybe.none':
                                                            var $6895 = Fm$Check$result$(Maybe$none, $6893);
                                                            var $6894 = $6895;
                                                            break;
                                                        case 'Maybe.some':
                                                            var $6896 = self.value;
                                                            var self = Fm$Term$equal$(_a1_body$25, _b1_body$26, _defs$3, Nat$succ$(Nat$succ$(_lv$4)), Nat$succ$(_dp$5), _seen$24);
                                                            switch (self._) {
                                                                case 'Fm.Check.result':
                                                                    var $6898 = self.value;
                                                                    var $6899 = self.errors;
                                                                    var self = $6898;
                                                                    switch (self._) {
                                                                        case 'Maybe.none':
                                                                            var $6901 = Fm$Check$result$(Maybe$none, $6899);
                                                                            var $6900 = $6901;
                                                                            break;
                                                                        case 'Maybe.some':
                                                                            var $6902 = self.value;
                                                                            var self = Fm$Check$result$(Maybe$some$(($6896 && $6902)), List$nil);
                                                                            switch (self._) {
                                                                                case 'Fm.Check.result':
                                                                                    var $6904 = self.value;
                                                                                    var $6905 = self.errors;
                                                                                    var $6906 = Fm$Check$result$($6904, List$concat$($6899, $6905));
                                                                                    var $6903 = $6906;
                                                                                    break;
                                                                            };
                                                                            var $6900 = $6903;
                                                                            break;
                                                                    };
                                                                    var self = $6900;
                                                                    break;
                                                            };
                                                            switch (self._) {
                                                                case 'Fm.Check.result':
                                                                    var $6907 = self.value;
                                                                    var $6908 = self.errors;
                                                                    var $6909 = Fm$Check$result$($6907, List$concat$($6893, $6908));
                                                                    var $6897 = $6909;
                                                                    break;
                                                            };
                                                            var $6894 = $6897;
                                                            break;
                                                    };
                                                    var $6891 = $6894;
                                                    break;
                                            };
                                            var $6890 = $6891;
                                        } else {
                                            var $6910 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                            var $6890 = $6910;
                                        };
                                        var $6878 = $6890;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $6911 = self.name;
                                        var $6912 = self.body;
                                        var $6913 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6878 = $6913;
                                        break;
                                    case 'Fm.Term.app':
                                        var $6914 = self.func;
                                        var $6915 = self.argm;
                                        var $6916 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6878 = $6916;
                                        break;
                                    case 'Fm.Term.let':
                                        var $6917 = self.name;
                                        var $6918 = self.expr;
                                        var $6919 = self.body;
                                        var $6920 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6878 = $6920;
                                        break;
                                    case 'Fm.Term.def':
                                        var $6921 = self.name;
                                        var $6922 = self.expr;
                                        var $6923 = self.body;
                                        var $6924 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6878 = $6924;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $6925 = self.done;
                                        var $6926 = self.term;
                                        var $6927 = self.type;
                                        var $6928 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6878 = $6928;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $6929 = self.name;
                                        var $6930 = self.dref;
                                        var $6931 = self.verb;
                                        var $6932 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6878 = $6932;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $6933 = self.path;
                                        var $6934 = Fm$Term$equal$hole$($6933, _a$1);
                                        var $6878 = $6934;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $6935 = self.natx;
                                        var $6936 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6878 = $6936;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $6937 = self.chrx;
                                        var $6938 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6878 = $6938;
                                        break;
                                    case 'Fm.Term.str':
                                        var $6939 = self.strx;
                                        var $6940 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6878 = $6940;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $6941 = self.path;
                                        var $6942 = self.expr;
                                        var $6943 = self.name;
                                        var $6944 = self.with;
                                        var $6945 = self.cses;
                                        var $6946 = self.moti;
                                        var $6947 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6878 = $6947;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $6948 = self.orig;
                                        var $6949 = self.expr;
                                        var $6950 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6878 = $6950;
                                        break;
                                };
                                var $6710 = $6878;
                                break;
                            case 'Fm.Term.lam':
                                var $6951 = self.name;
                                var $6952 = self.body;
                                var self = _b1$10;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $6954 = self.name;
                                        var $6955 = self.indx;
                                        var $6956 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6953 = $6956;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $6957 = self.name;
                                        var $6958 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6953 = $6958;
                                        break;
                                    case 'Fm.Term.typ':
                                        var $6959 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6953 = $6959;
                                        break;
                                    case 'Fm.Term.all':
                                        var $6960 = self.eras;
                                        var $6961 = self.self;
                                        var $6962 = self.name;
                                        var $6963 = self.xtyp;
                                        var $6964 = self.body;
                                        var $6965 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6953 = $6965;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $6966 = self.name;
                                        var $6967 = self.body;
                                        var _seen$18 = Set$set$(_id$13, _seen$6);
                                        var _a1_body$19 = $6952(Fm$Term$var$($6951, _lv$4));
                                        var _b1_body$20 = $6967(Fm$Term$var$($6966, _lv$4));
                                        var self = Fm$Term$equal$(_a1_body$19, _b1_body$20, _defs$3, Nat$succ$(_lv$4), Nat$succ$(_dp$5), _seen$18);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6969 = self.value;
                                                var $6970 = self.errors;
                                                var self = $6969;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $6972 = Fm$Check$result$(Maybe$none, $6970);
                                                        var $6971 = $6972;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $6973 = self.value;
                                                        var self = Fm$Check$result$(Maybe$some$($6973), List$nil);
                                                        switch (self._) {
                                                            case 'Fm.Check.result':
                                                                var $6975 = self.value;
                                                                var $6976 = self.errors;
                                                                var $6977 = Fm$Check$result$($6975, List$concat$($6970, $6976));
                                                                var $6974 = $6977;
                                                                break;
                                                        };
                                                        var $6971 = $6974;
                                                        break;
                                                };
                                                var $6968 = $6971;
                                                break;
                                        };
                                        var $6953 = $6968;
                                        break;
                                    case 'Fm.Term.app':
                                        var $6978 = self.func;
                                        var $6979 = self.argm;
                                        var $6980 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6953 = $6980;
                                        break;
                                    case 'Fm.Term.let':
                                        var $6981 = self.name;
                                        var $6982 = self.expr;
                                        var $6983 = self.body;
                                        var $6984 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6953 = $6984;
                                        break;
                                    case 'Fm.Term.def':
                                        var $6985 = self.name;
                                        var $6986 = self.expr;
                                        var $6987 = self.body;
                                        var $6988 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6953 = $6988;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $6989 = self.done;
                                        var $6990 = self.term;
                                        var $6991 = self.type;
                                        var $6992 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6953 = $6992;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $6993 = self.name;
                                        var $6994 = self.dref;
                                        var $6995 = self.verb;
                                        var $6996 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6953 = $6996;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $6997 = self.path;
                                        var $6998 = Fm$Term$equal$hole$($6997, _a$1);
                                        var $6953 = $6998;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $6999 = self.natx;
                                        var $7000 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6953 = $7000;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $7001 = self.chrx;
                                        var $7002 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6953 = $7002;
                                        break;
                                    case 'Fm.Term.str':
                                        var $7003 = self.strx;
                                        var $7004 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6953 = $7004;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $7005 = self.path;
                                        var $7006 = self.expr;
                                        var $7007 = self.name;
                                        var $7008 = self.with;
                                        var $7009 = self.cses;
                                        var $7010 = self.moti;
                                        var $7011 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6953 = $7011;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $7012 = self.orig;
                                        var $7013 = self.expr;
                                        var $7014 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6953 = $7014;
                                        break;
                                };
                                var $6710 = $6953;
                                break;
                            case 'Fm.Term.app':
                                var $7015 = self.func;
                                var $7016 = self.argm;
                                var self = _b1$10;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $7018 = self.name;
                                        var $7019 = self.indx;
                                        var $7020 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7017 = $7020;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $7021 = self.name;
                                        var $7022 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7017 = $7022;
                                        break;
                                    case 'Fm.Term.typ':
                                        var $7023 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7017 = $7023;
                                        break;
                                    case 'Fm.Term.all':
                                        var $7024 = self.eras;
                                        var $7025 = self.self;
                                        var $7026 = self.name;
                                        var $7027 = self.xtyp;
                                        var $7028 = self.body;
                                        var $7029 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7017 = $7029;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $7030 = self.name;
                                        var $7031 = self.body;
                                        var $7032 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7017 = $7032;
                                        break;
                                    case 'Fm.Term.app':
                                        var $7033 = self.func;
                                        var $7034 = self.argm;
                                        var _seen$18 = Set$set$(_id$13, _seen$6);
                                        var self = Fm$Term$equal$($7015, $7033, _defs$3, _lv$4, Nat$succ$(_dp$5), _seen$18);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $7036 = self.value;
                                                var $7037 = self.errors;
                                                var self = $7036;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $7039 = Fm$Check$result$(Maybe$none, $7037);
                                                        var $7038 = $7039;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $7040 = self.value;
                                                        var self = Fm$Term$equal$($7016, $7034, _defs$3, _lv$4, Nat$succ$(_dp$5), _seen$18);
                                                        switch (self._) {
                                                            case 'Fm.Check.result':
                                                                var $7042 = self.value;
                                                                var $7043 = self.errors;
                                                                var self = $7042;
                                                                switch (self._) {
                                                                    case 'Maybe.none':
                                                                        var $7045 = Fm$Check$result$(Maybe$none, $7043);
                                                                        var $7044 = $7045;
                                                                        break;
                                                                    case 'Maybe.some':
                                                                        var $7046 = self.value;
                                                                        var self = Fm$Check$result$(Maybe$some$(($7040 && $7046)), List$nil);
                                                                        switch (self._) {
                                                                            case 'Fm.Check.result':
                                                                                var $7048 = self.value;
                                                                                var $7049 = self.errors;
                                                                                var $7050 = Fm$Check$result$($7048, List$concat$($7043, $7049));
                                                                                var $7047 = $7050;
                                                                                break;
                                                                        };
                                                                        var $7044 = $7047;
                                                                        break;
                                                                };
                                                                var self = $7044;
                                                                break;
                                                        };
                                                        switch (self._) {
                                                            case 'Fm.Check.result':
                                                                var $7051 = self.value;
                                                                var $7052 = self.errors;
                                                                var $7053 = Fm$Check$result$($7051, List$concat$($7037, $7052));
                                                                var $7041 = $7053;
                                                                break;
                                                        };
                                                        var $7038 = $7041;
                                                        break;
                                                };
                                                var $7035 = $7038;
                                                break;
                                        };
                                        var $7017 = $7035;
                                        break;
                                    case 'Fm.Term.let':
                                        var $7054 = self.name;
                                        var $7055 = self.expr;
                                        var $7056 = self.body;
                                        var $7057 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7017 = $7057;
                                        break;
                                    case 'Fm.Term.def':
                                        var $7058 = self.name;
                                        var $7059 = self.expr;
                                        var $7060 = self.body;
                                        var $7061 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7017 = $7061;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $7062 = self.done;
                                        var $7063 = self.term;
                                        var $7064 = self.type;
                                        var $7065 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7017 = $7065;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $7066 = self.name;
                                        var $7067 = self.dref;
                                        var $7068 = self.verb;
                                        var $7069 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7017 = $7069;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $7070 = self.path;
                                        var $7071 = Fm$Term$equal$hole$($7070, _a$1);
                                        var $7017 = $7071;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $7072 = self.natx;
                                        var $7073 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7017 = $7073;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $7074 = self.chrx;
                                        var $7075 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7017 = $7075;
                                        break;
                                    case 'Fm.Term.str':
                                        var $7076 = self.strx;
                                        var $7077 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7017 = $7077;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $7078 = self.path;
                                        var $7079 = self.expr;
                                        var $7080 = self.name;
                                        var $7081 = self.with;
                                        var $7082 = self.cses;
                                        var $7083 = self.moti;
                                        var $7084 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7017 = $7084;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $7085 = self.orig;
                                        var $7086 = self.expr;
                                        var $7087 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7017 = $7087;
                                        break;
                                };
                                var $6710 = $7017;
                                break;
                            case 'Fm.Term.let':
                                var $7088 = self.name;
                                var $7089 = self.expr;
                                var $7090 = self.body;
                                var self = _b1$10;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $7092 = self.name;
                                        var $7093 = self.indx;
                                        var $7094 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7091 = $7094;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $7095 = self.name;
                                        var $7096 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7091 = $7096;
                                        break;
                                    case 'Fm.Term.typ':
                                        var $7097 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7091 = $7097;
                                        break;
                                    case 'Fm.Term.all':
                                        var $7098 = self.eras;
                                        var $7099 = self.self;
                                        var $7100 = self.name;
                                        var $7101 = self.xtyp;
                                        var $7102 = self.body;
                                        var $7103 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7091 = $7103;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $7104 = self.name;
                                        var $7105 = self.body;
                                        var $7106 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7091 = $7106;
                                        break;
                                    case 'Fm.Term.app':
                                        var $7107 = self.func;
                                        var $7108 = self.argm;
                                        var $7109 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7091 = $7109;
                                        break;
                                    case 'Fm.Term.let':
                                        var $7110 = self.name;
                                        var $7111 = self.expr;
                                        var $7112 = self.body;
                                        var _seen$20 = Set$set$(_id$13, _seen$6);
                                        var _a1_body$21 = $7090(Fm$Term$var$($7088, _lv$4));
                                        var _b1_body$22 = $7112(Fm$Term$var$($7110, _lv$4));
                                        var self = Fm$Term$equal$($7089, $7111, _defs$3, _lv$4, Nat$succ$(_dp$5), _seen$20);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $7114 = self.value;
                                                var $7115 = self.errors;
                                                var self = $7114;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $7117 = Fm$Check$result$(Maybe$none, $7115);
                                                        var $7116 = $7117;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $7118 = self.value;
                                                        var self = Fm$Term$equal$(_a1_body$21, _b1_body$22, _defs$3, Nat$succ$(_lv$4), Nat$succ$(_dp$5), _seen$20);
                                                        switch (self._) {
                                                            case 'Fm.Check.result':
                                                                var $7120 = self.value;
                                                                var $7121 = self.errors;
                                                                var self = $7120;
                                                                switch (self._) {
                                                                    case 'Maybe.none':
                                                                        var $7123 = Fm$Check$result$(Maybe$none, $7121);
                                                                        var $7122 = $7123;
                                                                        break;
                                                                    case 'Maybe.some':
                                                                        var $7124 = self.value;
                                                                        var self = Fm$Check$result$(Maybe$some$(($7118 && $7124)), List$nil);
                                                                        switch (self._) {
                                                                            case 'Fm.Check.result':
                                                                                var $7126 = self.value;
                                                                                var $7127 = self.errors;
                                                                                var $7128 = Fm$Check$result$($7126, List$concat$($7121, $7127));
                                                                                var $7125 = $7128;
                                                                                break;
                                                                        };
                                                                        var $7122 = $7125;
                                                                        break;
                                                                };
                                                                var self = $7122;
                                                                break;
                                                        };
                                                        switch (self._) {
                                                            case 'Fm.Check.result':
                                                                var $7129 = self.value;
                                                                var $7130 = self.errors;
                                                                var $7131 = Fm$Check$result$($7129, List$concat$($7115, $7130));
                                                                var $7119 = $7131;
                                                                break;
                                                        };
                                                        var $7116 = $7119;
                                                        break;
                                                };
                                                var $7113 = $7116;
                                                break;
                                        };
                                        var $7091 = $7113;
                                        break;
                                    case 'Fm.Term.def':
                                        var $7132 = self.name;
                                        var $7133 = self.expr;
                                        var $7134 = self.body;
                                        var $7135 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7091 = $7135;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $7136 = self.done;
                                        var $7137 = self.term;
                                        var $7138 = self.type;
                                        var $7139 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7091 = $7139;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $7140 = self.name;
                                        var $7141 = self.dref;
                                        var $7142 = self.verb;
                                        var $7143 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7091 = $7143;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $7144 = self.path;
                                        var $7145 = Fm$Term$equal$hole$($7144, _a$1);
                                        var $7091 = $7145;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $7146 = self.natx;
                                        var $7147 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7091 = $7147;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $7148 = self.chrx;
                                        var $7149 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7091 = $7149;
                                        break;
                                    case 'Fm.Term.str':
                                        var $7150 = self.strx;
                                        var $7151 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7091 = $7151;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $7152 = self.path;
                                        var $7153 = self.expr;
                                        var $7154 = self.name;
                                        var $7155 = self.with;
                                        var $7156 = self.cses;
                                        var $7157 = self.moti;
                                        var $7158 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7091 = $7158;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $7159 = self.orig;
                                        var $7160 = self.expr;
                                        var $7161 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7091 = $7161;
                                        break;
                                };
                                var $6710 = $7091;
                                break;
                            case 'Fm.Term.def':
                                var $7162 = self.name;
                                var $7163 = self.expr;
                                var $7164 = self.body;
                                var self = _b1$10;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $7166 = self.name;
                                        var $7167 = self.indx;
                                        var $7168 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7165 = $7168;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $7169 = self.name;
                                        var $7170 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7165 = $7170;
                                        break;
                                    case 'Fm.Term.typ':
                                        var $7171 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7165 = $7171;
                                        break;
                                    case 'Fm.Term.all':
                                        var $7172 = self.eras;
                                        var $7173 = self.self;
                                        var $7174 = self.name;
                                        var $7175 = self.xtyp;
                                        var $7176 = self.body;
                                        var $7177 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7165 = $7177;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $7178 = self.name;
                                        var $7179 = self.body;
                                        var $7180 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7165 = $7180;
                                        break;
                                    case 'Fm.Term.app':
                                        var $7181 = self.func;
                                        var $7182 = self.argm;
                                        var $7183 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7165 = $7183;
                                        break;
                                    case 'Fm.Term.let':
                                        var $7184 = self.name;
                                        var $7185 = self.expr;
                                        var $7186 = self.body;
                                        var $7187 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7165 = $7187;
                                        break;
                                    case 'Fm.Term.def':
                                        var $7188 = self.name;
                                        var $7189 = self.expr;
                                        var $7190 = self.body;
                                        var $7191 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7165 = $7191;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $7192 = self.done;
                                        var $7193 = self.term;
                                        var $7194 = self.type;
                                        var $7195 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7165 = $7195;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $7196 = self.name;
                                        var $7197 = self.dref;
                                        var $7198 = self.verb;
                                        var $7199 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7165 = $7199;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $7200 = self.path;
                                        var $7201 = Fm$Term$equal$hole$($7200, _a$1);
                                        var $7165 = $7201;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $7202 = self.natx;
                                        var $7203 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7165 = $7203;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $7204 = self.chrx;
                                        var $7205 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7165 = $7205;
                                        break;
                                    case 'Fm.Term.str':
                                        var $7206 = self.strx;
                                        var $7207 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7165 = $7207;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $7208 = self.path;
                                        var $7209 = self.expr;
                                        var $7210 = self.name;
                                        var $7211 = self.with;
                                        var $7212 = self.cses;
                                        var $7213 = self.moti;
                                        var $7214 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7165 = $7214;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $7215 = self.orig;
                                        var $7216 = self.expr;
                                        var $7217 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7165 = $7217;
                                        break;
                                };
                                var $6710 = $7165;
                                break;
                            case 'Fm.Term.ann':
                                var $7218 = self.done;
                                var $7219 = self.term;
                                var $7220 = self.type;
                                var self = _b1$10;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $7222 = self.name;
                                        var $7223 = self.indx;
                                        var $7224 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7221 = $7224;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $7225 = self.name;
                                        var $7226 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7221 = $7226;
                                        break;
                                    case 'Fm.Term.typ':
                                        var $7227 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7221 = $7227;
                                        break;
                                    case 'Fm.Term.all':
                                        var $7228 = self.eras;
                                        var $7229 = self.self;
                                        var $7230 = self.name;
                                        var $7231 = self.xtyp;
                                        var $7232 = self.body;
                                        var $7233 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7221 = $7233;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $7234 = self.name;
                                        var $7235 = self.body;
                                        var $7236 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7221 = $7236;
                                        break;
                                    case 'Fm.Term.app':
                                        var $7237 = self.func;
                                        var $7238 = self.argm;
                                        var $7239 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7221 = $7239;
                                        break;
                                    case 'Fm.Term.let':
                                        var $7240 = self.name;
                                        var $7241 = self.expr;
                                        var $7242 = self.body;
                                        var $7243 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7221 = $7243;
                                        break;
                                    case 'Fm.Term.def':
                                        var $7244 = self.name;
                                        var $7245 = self.expr;
                                        var $7246 = self.body;
                                        var $7247 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7221 = $7247;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $7248 = self.done;
                                        var $7249 = self.term;
                                        var $7250 = self.type;
                                        var $7251 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7221 = $7251;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $7252 = self.name;
                                        var $7253 = self.dref;
                                        var $7254 = self.verb;
                                        var $7255 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7221 = $7255;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $7256 = self.path;
                                        var $7257 = Fm$Term$equal$hole$($7256, _a$1);
                                        var $7221 = $7257;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $7258 = self.natx;
                                        var $7259 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7221 = $7259;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $7260 = self.chrx;
                                        var $7261 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7221 = $7261;
                                        break;
                                    case 'Fm.Term.str':
                                        var $7262 = self.strx;
                                        var $7263 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7221 = $7263;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $7264 = self.path;
                                        var $7265 = self.expr;
                                        var $7266 = self.name;
                                        var $7267 = self.with;
                                        var $7268 = self.cses;
                                        var $7269 = self.moti;
                                        var $7270 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7221 = $7270;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $7271 = self.orig;
                                        var $7272 = self.expr;
                                        var $7273 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7221 = $7273;
                                        break;
                                };
                                var $6710 = $7221;
                                break;
                            case 'Fm.Term.gol':
                                var $7274 = self.name;
                                var $7275 = self.dref;
                                var $7276 = self.verb;
                                var self = _b1$10;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $7278 = self.name;
                                        var $7279 = self.indx;
                                        var $7280 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7277 = $7280;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $7281 = self.name;
                                        var $7282 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7277 = $7282;
                                        break;
                                    case 'Fm.Term.typ':
                                        var $7283 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7277 = $7283;
                                        break;
                                    case 'Fm.Term.all':
                                        var $7284 = self.eras;
                                        var $7285 = self.self;
                                        var $7286 = self.name;
                                        var $7287 = self.xtyp;
                                        var $7288 = self.body;
                                        var $7289 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7277 = $7289;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $7290 = self.name;
                                        var $7291 = self.body;
                                        var $7292 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7277 = $7292;
                                        break;
                                    case 'Fm.Term.app':
                                        var $7293 = self.func;
                                        var $7294 = self.argm;
                                        var $7295 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7277 = $7295;
                                        break;
                                    case 'Fm.Term.let':
                                        var $7296 = self.name;
                                        var $7297 = self.expr;
                                        var $7298 = self.body;
                                        var $7299 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7277 = $7299;
                                        break;
                                    case 'Fm.Term.def':
                                        var $7300 = self.name;
                                        var $7301 = self.expr;
                                        var $7302 = self.body;
                                        var $7303 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7277 = $7303;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $7304 = self.done;
                                        var $7305 = self.term;
                                        var $7306 = self.type;
                                        var $7307 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7277 = $7307;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $7308 = self.name;
                                        var $7309 = self.dref;
                                        var $7310 = self.verb;
                                        var $7311 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7277 = $7311;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $7312 = self.path;
                                        var $7313 = Fm$Term$equal$hole$($7312, _a$1);
                                        var $7277 = $7313;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $7314 = self.natx;
                                        var $7315 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7277 = $7315;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $7316 = self.chrx;
                                        var $7317 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7277 = $7317;
                                        break;
                                    case 'Fm.Term.str':
                                        var $7318 = self.strx;
                                        var $7319 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7277 = $7319;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $7320 = self.path;
                                        var $7321 = self.expr;
                                        var $7322 = self.name;
                                        var $7323 = self.with;
                                        var $7324 = self.cses;
                                        var $7325 = self.moti;
                                        var $7326 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7277 = $7326;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $7327 = self.orig;
                                        var $7328 = self.expr;
                                        var $7329 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7277 = $7329;
                                        break;
                                };
                                var $6710 = $7277;
                                break;
                            case 'Fm.Term.hol':
                                var $7330 = self.path;
                                var $7331 = Fm$Term$equal$hole$($7330, _b$2);
                                var $6710 = $7331;
                                break;
                            case 'Fm.Term.nat':
                                var $7332 = self.natx;
                                var self = _b1$10;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $7334 = self.name;
                                        var $7335 = self.indx;
                                        var $7336 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7333 = $7336;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $7337 = self.name;
                                        var $7338 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7333 = $7338;
                                        break;
                                    case 'Fm.Term.typ':
                                        var $7339 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7333 = $7339;
                                        break;
                                    case 'Fm.Term.all':
                                        var $7340 = self.eras;
                                        var $7341 = self.self;
                                        var $7342 = self.name;
                                        var $7343 = self.xtyp;
                                        var $7344 = self.body;
                                        var $7345 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7333 = $7345;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $7346 = self.name;
                                        var $7347 = self.body;
                                        var $7348 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7333 = $7348;
                                        break;
                                    case 'Fm.Term.app':
                                        var $7349 = self.func;
                                        var $7350 = self.argm;
                                        var $7351 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7333 = $7351;
                                        break;
                                    case 'Fm.Term.let':
                                        var $7352 = self.name;
                                        var $7353 = self.expr;
                                        var $7354 = self.body;
                                        var $7355 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7333 = $7355;
                                        break;
                                    case 'Fm.Term.def':
                                        var $7356 = self.name;
                                        var $7357 = self.expr;
                                        var $7358 = self.body;
                                        var $7359 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7333 = $7359;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $7360 = self.done;
                                        var $7361 = self.term;
                                        var $7362 = self.type;
                                        var $7363 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7333 = $7363;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $7364 = self.name;
                                        var $7365 = self.dref;
                                        var $7366 = self.verb;
                                        var $7367 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7333 = $7367;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $7368 = self.path;
                                        var $7369 = Fm$Term$equal$hole$($7368, _a$1);
                                        var $7333 = $7369;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $7370 = self.natx;
                                        var $7371 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7333 = $7371;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $7372 = self.chrx;
                                        var $7373 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7333 = $7373;
                                        break;
                                    case 'Fm.Term.str':
                                        var $7374 = self.strx;
                                        var $7375 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7333 = $7375;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $7376 = self.path;
                                        var $7377 = self.expr;
                                        var $7378 = self.name;
                                        var $7379 = self.with;
                                        var $7380 = self.cses;
                                        var $7381 = self.moti;
                                        var $7382 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7333 = $7382;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $7383 = self.orig;
                                        var $7384 = self.expr;
                                        var $7385 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7333 = $7385;
                                        break;
                                };
                                var $6710 = $7333;
                                break;
                            case 'Fm.Term.chr':
                                var $7386 = self.chrx;
                                var self = _b1$10;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $7388 = self.name;
                                        var $7389 = self.indx;
                                        var $7390 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7387 = $7390;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $7391 = self.name;
                                        var $7392 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7387 = $7392;
                                        break;
                                    case 'Fm.Term.typ':
                                        var $7393 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7387 = $7393;
                                        break;
                                    case 'Fm.Term.all':
                                        var $7394 = self.eras;
                                        var $7395 = self.self;
                                        var $7396 = self.name;
                                        var $7397 = self.xtyp;
                                        var $7398 = self.body;
                                        var $7399 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7387 = $7399;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $7400 = self.name;
                                        var $7401 = self.body;
                                        var $7402 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7387 = $7402;
                                        break;
                                    case 'Fm.Term.app':
                                        var $7403 = self.func;
                                        var $7404 = self.argm;
                                        var $7405 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7387 = $7405;
                                        break;
                                    case 'Fm.Term.let':
                                        var $7406 = self.name;
                                        var $7407 = self.expr;
                                        var $7408 = self.body;
                                        var $7409 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7387 = $7409;
                                        break;
                                    case 'Fm.Term.def':
                                        var $7410 = self.name;
                                        var $7411 = self.expr;
                                        var $7412 = self.body;
                                        var $7413 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7387 = $7413;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $7414 = self.done;
                                        var $7415 = self.term;
                                        var $7416 = self.type;
                                        var $7417 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7387 = $7417;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $7418 = self.name;
                                        var $7419 = self.dref;
                                        var $7420 = self.verb;
                                        var $7421 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7387 = $7421;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $7422 = self.path;
                                        var $7423 = Fm$Term$equal$hole$($7422, _a$1);
                                        var $7387 = $7423;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $7424 = self.natx;
                                        var $7425 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7387 = $7425;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $7426 = self.chrx;
                                        var $7427 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7387 = $7427;
                                        break;
                                    case 'Fm.Term.str':
                                        var $7428 = self.strx;
                                        var $7429 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7387 = $7429;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $7430 = self.path;
                                        var $7431 = self.expr;
                                        var $7432 = self.name;
                                        var $7433 = self.with;
                                        var $7434 = self.cses;
                                        var $7435 = self.moti;
                                        var $7436 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7387 = $7436;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $7437 = self.orig;
                                        var $7438 = self.expr;
                                        var $7439 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7387 = $7439;
                                        break;
                                };
                                var $6710 = $7387;
                                break;
                            case 'Fm.Term.str':
                                var $7440 = self.strx;
                                var self = _b1$10;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $7442 = self.name;
                                        var $7443 = self.indx;
                                        var $7444 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7441 = $7444;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $7445 = self.name;
                                        var $7446 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7441 = $7446;
                                        break;
                                    case 'Fm.Term.typ':
                                        var $7447 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7441 = $7447;
                                        break;
                                    case 'Fm.Term.all':
                                        var $7448 = self.eras;
                                        var $7449 = self.self;
                                        var $7450 = self.name;
                                        var $7451 = self.xtyp;
                                        var $7452 = self.body;
                                        var $7453 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7441 = $7453;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $7454 = self.name;
                                        var $7455 = self.body;
                                        var $7456 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7441 = $7456;
                                        break;
                                    case 'Fm.Term.app':
                                        var $7457 = self.func;
                                        var $7458 = self.argm;
                                        var $7459 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7441 = $7459;
                                        break;
                                    case 'Fm.Term.let':
                                        var $7460 = self.name;
                                        var $7461 = self.expr;
                                        var $7462 = self.body;
                                        var $7463 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7441 = $7463;
                                        break;
                                    case 'Fm.Term.def':
                                        var $7464 = self.name;
                                        var $7465 = self.expr;
                                        var $7466 = self.body;
                                        var $7467 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7441 = $7467;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $7468 = self.done;
                                        var $7469 = self.term;
                                        var $7470 = self.type;
                                        var $7471 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7441 = $7471;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $7472 = self.name;
                                        var $7473 = self.dref;
                                        var $7474 = self.verb;
                                        var $7475 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7441 = $7475;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $7476 = self.path;
                                        var $7477 = Fm$Term$equal$hole$($7476, _a$1);
                                        var $7441 = $7477;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $7478 = self.natx;
                                        var $7479 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7441 = $7479;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $7480 = self.chrx;
                                        var $7481 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7441 = $7481;
                                        break;
                                    case 'Fm.Term.str':
                                        var $7482 = self.strx;
                                        var $7483 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7441 = $7483;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $7484 = self.path;
                                        var $7485 = self.expr;
                                        var $7486 = self.name;
                                        var $7487 = self.with;
                                        var $7488 = self.cses;
                                        var $7489 = self.moti;
                                        var $7490 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7441 = $7490;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $7491 = self.orig;
                                        var $7492 = self.expr;
                                        var $7493 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7441 = $7493;
                                        break;
                                };
                                var $6710 = $7441;
                                break;
                            case 'Fm.Term.cse':
                                var $7494 = self.path;
                                var $7495 = self.expr;
                                var $7496 = self.name;
                                var $7497 = self.with;
                                var $7498 = self.cses;
                                var $7499 = self.moti;
                                var self = _b1$10;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $7501 = self.name;
                                        var $7502 = self.indx;
                                        var $7503 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7500 = $7503;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $7504 = self.name;
                                        var $7505 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7500 = $7505;
                                        break;
                                    case 'Fm.Term.typ':
                                        var $7506 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7500 = $7506;
                                        break;
                                    case 'Fm.Term.all':
                                        var $7507 = self.eras;
                                        var $7508 = self.self;
                                        var $7509 = self.name;
                                        var $7510 = self.xtyp;
                                        var $7511 = self.body;
                                        var $7512 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7500 = $7512;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $7513 = self.name;
                                        var $7514 = self.body;
                                        var $7515 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7500 = $7515;
                                        break;
                                    case 'Fm.Term.app':
                                        var $7516 = self.func;
                                        var $7517 = self.argm;
                                        var $7518 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7500 = $7518;
                                        break;
                                    case 'Fm.Term.let':
                                        var $7519 = self.name;
                                        var $7520 = self.expr;
                                        var $7521 = self.body;
                                        var $7522 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7500 = $7522;
                                        break;
                                    case 'Fm.Term.def':
                                        var $7523 = self.name;
                                        var $7524 = self.expr;
                                        var $7525 = self.body;
                                        var $7526 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7500 = $7526;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $7527 = self.done;
                                        var $7528 = self.term;
                                        var $7529 = self.type;
                                        var $7530 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7500 = $7530;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $7531 = self.name;
                                        var $7532 = self.dref;
                                        var $7533 = self.verb;
                                        var $7534 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7500 = $7534;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $7535 = self.path;
                                        var $7536 = Fm$Term$equal$hole$($7535, _a$1);
                                        var $7500 = $7536;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $7537 = self.natx;
                                        var $7538 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7500 = $7538;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $7539 = self.chrx;
                                        var $7540 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7500 = $7540;
                                        break;
                                    case 'Fm.Term.str':
                                        var $7541 = self.strx;
                                        var $7542 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7500 = $7542;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $7543 = self.path;
                                        var $7544 = self.expr;
                                        var $7545 = self.name;
                                        var $7546 = self.with;
                                        var $7547 = self.cses;
                                        var $7548 = self.moti;
                                        var $7549 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7500 = $7549;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $7550 = self.orig;
                                        var $7551 = self.expr;
                                        var $7552 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7500 = $7552;
                                        break;
                                };
                                var $6710 = $7500;
                                break;
                            case 'Fm.Term.ori':
                                var $7553 = self.orig;
                                var $7554 = self.expr;
                                var self = _b1$10;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $7556 = self.name;
                                        var $7557 = self.indx;
                                        var $7558 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7555 = $7558;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $7559 = self.name;
                                        var $7560 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7555 = $7560;
                                        break;
                                    case 'Fm.Term.typ':
                                        var $7561 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7555 = $7561;
                                        break;
                                    case 'Fm.Term.all':
                                        var $7562 = self.eras;
                                        var $7563 = self.self;
                                        var $7564 = self.name;
                                        var $7565 = self.xtyp;
                                        var $7566 = self.body;
                                        var $7567 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7555 = $7567;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $7568 = self.name;
                                        var $7569 = self.body;
                                        var $7570 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7555 = $7570;
                                        break;
                                    case 'Fm.Term.app':
                                        var $7571 = self.func;
                                        var $7572 = self.argm;
                                        var $7573 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7555 = $7573;
                                        break;
                                    case 'Fm.Term.let':
                                        var $7574 = self.name;
                                        var $7575 = self.expr;
                                        var $7576 = self.body;
                                        var $7577 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7555 = $7577;
                                        break;
                                    case 'Fm.Term.def':
                                        var $7578 = self.name;
                                        var $7579 = self.expr;
                                        var $7580 = self.body;
                                        var $7581 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7555 = $7581;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $7582 = self.done;
                                        var $7583 = self.term;
                                        var $7584 = self.type;
                                        var $7585 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7555 = $7585;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $7586 = self.name;
                                        var $7587 = self.dref;
                                        var $7588 = self.verb;
                                        var $7589 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7555 = $7589;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $7590 = self.path;
                                        var $7591 = Fm$Term$equal$hole$($7590, _a$1);
                                        var $7555 = $7591;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $7592 = self.natx;
                                        var $7593 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7555 = $7593;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $7594 = self.chrx;
                                        var $7595 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7555 = $7595;
                                        break;
                                    case 'Fm.Term.str':
                                        var $7596 = self.strx;
                                        var $7597 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7555 = $7597;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $7598 = self.path;
                                        var $7599 = self.expr;
                                        var $7600 = self.name;
                                        var $7601 = self.with;
                                        var $7602 = self.cses;
                                        var $7603 = self.moti;
                                        var $7604 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7555 = $7604;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $7605 = self.orig;
                                        var $7606 = self.expr;
                                        var $7607 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7555 = $7607;
                                        break;
                                };
                                var $6710 = $7555;
                                break;
                        };
                        var $6699 = $6710;
                    };
                    var $6697 = $6699;
                };
                var $6695 = $6697;
            };
            var $6693 = $6695;
        };
        return $6693;
    };
    const Fm$Term$equal = x0 => x1 => x2 => x3 => x4 => x5 => Fm$Term$equal$(x0, x1, x2, x3, x4, x5);
    const Set$new = Map$new;

    function Fm$Term$check$(_term$1, _type$2, _defs$3, _ctx$4, _path$5, _orig$6) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $7609 = self.name;
                var $7610 = self.indx;
                var self = List$at_last$($7610, _ctx$4);
                switch (self._) {
                    case 'Maybe.none':
                        var $7612 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$undefined_reference$(_orig$6, $7609), List$nil));
                        var $7611 = $7612;
                        break;
                    case 'Maybe.some':
                        var $7613 = self.value;
                        var $7614 = Fm$Check$result$(Maybe$some$((() => {
                            var self = $7613;
                            switch (self._) {
                                case 'Pair.new':
                                    var $7615 = self.fst;
                                    var $7616 = self.snd;
                                    var $7617 = $7616;
                                    return $7617;
                            };
                        })()), List$nil);
                        var $7611 = $7614;
                        break;
                };
                var self = $7611;
                break;
            case 'Fm.Term.ref':
                var $7618 = self.name;
                var self = Fm$get$($7618, _defs$3);
                switch (self._) {
                    case 'Maybe.none':
                        var $7620 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$undefined_reference$(_orig$6, $7618), List$nil));
                        var $7619 = $7620;
                        break;
                    case 'Maybe.some':
                        var $7621 = self.value;
                        var self = $7621;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $7623 = self.file;
                                var $7624 = self.code;
                                var $7625 = self.name;
                                var $7626 = self.term;
                                var $7627 = self.type;
                                var $7628 = self.stat;
                                var _ref_name$15 = $7625;
                                var _ref_type$16 = $7627;
                                var _ref_term$17 = $7626;
                                var _ref_stat$18 = $7628;
                                var self = _ref_stat$18;
                                switch (self._) {
                                    case 'Fm.Status.init':
                                        var $7630 = Fm$Check$result$(Maybe$some$(_ref_type$16), List$cons$(Fm$Error$waiting$(_ref_name$15), List$nil));
                                        var $7629 = $7630;
                                        break;
                                    case 'Fm.Status.wait':
                                        var $7631 = Fm$Check$result$(Maybe$some$(_ref_type$16), List$nil);
                                        var $7629 = $7631;
                                        break;
                                    case 'Fm.Status.done':
                                        var $7632 = Fm$Check$result$(Maybe$some$(_ref_type$16), List$nil);
                                        var $7629 = $7632;
                                        break;
                                    case 'Fm.Status.fail':
                                        var $7633 = self.errors;
                                        var $7634 = Fm$Check$result$(Maybe$some$(_ref_type$16), List$cons$(Fm$Error$indirect$(_ref_name$15), List$nil));
                                        var $7629 = $7634;
                                        break;
                                };
                                var $7622 = $7629;
                                break;
                        };
                        var $7619 = $7622;
                        break;
                };
                var self = $7619;
                break;
            case 'Fm.Term.typ':
                var $7635 = Fm$Check$result$(Maybe$some$(Fm$Term$typ), List$nil);
                var self = $7635;
                break;
            case 'Fm.Term.all':
                var $7636 = self.eras;
                var $7637 = self.self;
                var $7638 = self.name;
                var $7639 = self.xtyp;
                var $7640 = self.body;
                var _ctx_size$12 = (list_length(_ctx$4));
                var _self_var$13 = Fm$Term$var$($7637, _ctx_size$12);
                var _body_var$14 = Fm$Term$var$($7638, Nat$succ$(_ctx_size$12));
                var _body_ctx$15 = List$cons$(Pair$new$($7638, $7639), List$cons$(Pair$new$($7637, _term$1), _ctx$4));
                var self = Fm$Term$check$($7639, Maybe$some$(Fm$Term$typ), _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7642 = self.value;
                        var $7643 = self.errors;
                        var self = $7642;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7645 = Fm$Check$result$(Maybe$none, $7643);
                                var $7644 = $7645;
                                break;
                            case 'Maybe.some':
                                var $7646 = self.value;
                                var self = Fm$Term$check$($7640(_self_var$13)(_body_var$14), Maybe$some$(Fm$Term$typ), _defs$3, _body_ctx$15, Fm$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7648 = self.value;
                                        var $7649 = self.errors;
                                        var self = $7648;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7651 = Fm$Check$result$(Maybe$none, $7649);
                                                var $7650 = $7651;
                                                break;
                                            case 'Maybe.some':
                                                var $7652 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$(Fm$Term$typ), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7654 = self.value;
                                                        var $7655 = self.errors;
                                                        var $7656 = Fm$Check$result$($7654, List$concat$($7649, $7655));
                                                        var $7653 = $7656;
                                                        break;
                                                };
                                                var $7650 = $7653;
                                                break;
                                        };
                                        var self = $7650;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7657 = self.value;
                                        var $7658 = self.errors;
                                        var $7659 = Fm$Check$result$($7657, List$concat$($7643, $7658));
                                        var $7647 = $7659;
                                        break;
                                };
                                var $7644 = $7647;
                                break;
                        };
                        var $7641 = $7644;
                        break;
                };
                var self = $7641;
                break;
            case 'Fm.Term.lam':
                var $7660 = self.name;
                var $7661 = self.body;
                var self = _type$2;
                switch (self._) {
                    case 'Maybe.none':
                        var _lam_type$9 = Fm$Term$hol$(Bits$e);
                        var _lam_term$10 = Fm$Term$ann$(Bool$false, _term$1, _lam_type$9);
                        var $7663 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$patch$(Fm$MPath$to_bits$(_path$5), _lam_term$10), List$nil));
                        var $7662 = $7663;
                        break;
                    case 'Maybe.some':
                        var $7664 = self.value;
                        var _typv$10 = Fm$Term$reduce$($7664, _defs$3);
                        var self = _typv$10;
                        switch (self._) {
                            case 'Fm.Term.var':
                                var $7666 = self.name;
                                var $7667 = self.indx;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7664);
                                var $7668 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7665 = $7668;
                                break;
                            case 'Fm.Term.ref':
                                var $7669 = self.name;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7664);
                                var $7670 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7665 = $7670;
                                break;
                            case 'Fm.Term.typ':
                                var _expected$11 = Either$left$("(function type)");
                                var _detected$12 = Either$right$($7664);
                                var $7671 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$11, _detected$12, _ctx$4), List$nil));
                                var $7665 = $7671;
                                break;
                            case 'Fm.Term.all':
                                var $7672 = self.eras;
                                var $7673 = self.self;
                                var $7674 = self.name;
                                var $7675 = self.xtyp;
                                var $7676 = self.body;
                                var _ctx_size$16 = (list_length(_ctx$4));
                                var _self_var$17 = _term$1;
                                var _body_var$18 = Fm$Term$var$($7660, _ctx_size$16);
                                var _body_typ$19 = $7676(_self_var$17)(_body_var$18);
                                var _body_ctx$20 = List$cons$(Pair$new$($7660, $7675), _ctx$4);
                                var self = Fm$Term$check$($7661(_body_var$18), Maybe$some$(_body_typ$19), _defs$3, _body_ctx$20, Fm$MPath$o$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7678 = self.value;
                                        var $7679 = self.errors;
                                        var self = $7678;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7681 = Fm$Check$result$(Maybe$none, $7679);
                                                var $7680 = $7681;
                                                break;
                                            case 'Maybe.some':
                                                var $7682 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$($7664), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7684 = self.value;
                                                        var $7685 = self.errors;
                                                        var $7686 = Fm$Check$result$($7684, List$concat$($7679, $7685));
                                                        var $7683 = $7686;
                                                        break;
                                                };
                                                var $7680 = $7683;
                                                break;
                                        };
                                        var $7677 = $7680;
                                        break;
                                };
                                var $7665 = $7677;
                                break;
                            case 'Fm.Term.lam':
                                var $7687 = self.name;
                                var $7688 = self.body;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7664);
                                var $7689 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7665 = $7689;
                                break;
                            case 'Fm.Term.app':
                                var $7690 = self.func;
                                var $7691 = self.argm;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7664);
                                var $7692 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7665 = $7692;
                                break;
                            case 'Fm.Term.let':
                                var $7693 = self.name;
                                var $7694 = self.expr;
                                var $7695 = self.body;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7664);
                                var $7696 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7665 = $7696;
                                break;
                            case 'Fm.Term.def':
                                var $7697 = self.name;
                                var $7698 = self.expr;
                                var $7699 = self.body;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7664);
                                var $7700 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7665 = $7700;
                                break;
                            case 'Fm.Term.ann':
                                var $7701 = self.done;
                                var $7702 = self.term;
                                var $7703 = self.type;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7664);
                                var $7704 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7665 = $7704;
                                break;
                            case 'Fm.Term.gol':
                                var $7705 = self.name;
                                var $7706 = self.dref;
                                var $7707 = self.verb;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7664);
                                var $7708 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7665 = $7708;
                                break;
                            case 'Fm.Term.hol':
                                var $7709 = self.path;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7664);
                                var $7710 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7665 = $7710;
                                break;
                            case 'Fm.Term.nat':
                                var $7711 = self.natx;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7664);
                                var $7712 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7665 = $7712;
                                break;
                            case 'Fm.Term.chr':
                                var $7713 = self.chrx;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7664);
                                var $7714 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7665 = $7714;
                                break;
                            case 'Fm.Term.str':
                                var $7715 = self.strx;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7664);
                                var $7716 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7665 = $7716;
                                break;
                            case 'Fm.Term.cse':
                                var $7717 = self.path;
                                var $7718 = self.expr;
                                var $7719 = self.name;
                                var $7720 = self.with;
                                var $7721 = self.cses;
                                var $7722 = self.moti;
                                var _expected$17 = Either$left$("(function type)");
                                var _detected$18 = Either$right$($7664);
                                var $7723 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$17, _detected$18, _ctx$4), List$nil));
                                var $7665 = $7723;
                                break;
                            case 'Fm.Term.ori':
                                var $7724 = self.orig;
                                var $7725 = self.expr;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7664);
                                var $7726 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7665 = $7726;
                                break;
                        };
                        var $7662 = $7665;
                        break;
                };
                var self = $7662;
                break;
            case 'Fm.Term.app':
                var $7727 = self.func;
                var $7728 = self.argm;
                var self = Fm$Term$check$($7727, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7730 = self.value;
                        var $7731 = self.errors;
                        var self = $7730;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7733 = Fm$Check$result$(Maybe$none, $7731);
                                var $7732 = $7733;
                                break;
                            case 'Maybe.some':
                                var $7734 = self.value;
                                var _func_typ$12 = Fm$Term$reduce$($7734, _defs$3);
                                var self = _func_typ$12;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $7736 = self.name;
                                        var $7737 = self.indx;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7738 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7738;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $7739 = self.name;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7740 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7740;
                                        break;
                                    case 'Fm.Term.typ':
                                        var _expected$13 = Either$left$("(function type)");
                                        var _detected$14 = Either$right$(_func_typ$12);
                                        var $7741 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                        var self = $7741;
                                        break;
                                    case 'Fm.Term.all':
                                        var $7742 = self.eras;
                                        var $7743 = self.self;
                                        var $7744 = self.name;
                                        var $7745 = self.xtyp;
                                        var $7746 = self.body;
                                        var self = Fm$Term$check$($7728, Maybe$some$($7745), _defs$3, _ctx$4, Fm$MPath$i$(_path$5), _orig$6);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $7748 = self.value;
                                                var $7749 = self.errors;
                                                var self = $7748;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $7751 = Fm$Check$result$(Maybe$none, $7749);
                                                        var $7750 = $7751;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $7752 = self.value;
                                                        var self = Fm$Check$result$(Maybe$some$($7746($7727)($7728)), List$nil);
                                                        switch (self._) {
                                                            case 'Fm.Check.result':
                                                                var $7754 = self.value;
                                                                var $7755 = self.errors;
                                                                var $7756 = Fm$Check$result$($7754, List$concat$($7749, $7755));
                                                                var $7753 = $7756;
                                                                break;
                                                        };
                                                        var $7750 = $7753;
                                                        break;
                                                };
                                                var $7747 = $7750;
                                                break;
                                        };
                                        var self = $7747;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $7757 = self.name;
                                        var $7758 = self.body;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7759 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7759;
                                        break;
                                    case 'Fm.Term.app':
                                        var $7760 = self.func;
                                        var $7761 = self.argm;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7762 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7762;
                                        break;
                                    case 'Fm.Term.let':
                                        var $7763 = self.name;
                                        var $7764 = self.expr;
                                        var $7765 = self.body;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7766 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7766;
                                        break;
                                    case 'Fm.Term.def':
                                        var $7767 = self.name;
                                        var $7768 = self.expr;
                                        var $7769 = self.body;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7770 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7770;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $7771 = self.done;
                                        var $7772 = self.term;
                                        var $7773 = self.type;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7774 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7774;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $7775 = self.name;
                                        var $7776 = self.dref;
                                        var $7777 = self.verb;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7778 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7778;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $7779 = self.path;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7780 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7780;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $7781 = self.natx;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7782 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7782;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $7783 = self.chrx;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7784 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7784;
                                        break;
                                    case 'Fm.Term.str':
                                        var $7785 = self.strx;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7786 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7786;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $7787 = self.path;
                                        var $7788 = self.expr;
                                        var $7789 = self.name;
                                        var $7790 = self.with;
                                        var $7791 = self.cses;
                                        var $7792 = self.moti;
                                        var _expected$19 = Either$left$("(function type)");
                                        var _detected$20 = Either$right$(_func_typ$12);
                                        var $7793 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$19, _detected$20, _ctx$4), List$nil));
                                        var self = $7793;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $7794 = self.orig;
                                        var $7795 = self.expr;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7796 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7796;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7797 = self.value;
                                        var $7798 = self.errors;
                                        var $7799 = Fm$Check$result$($7797, List$concat$($7731, $7798));
                                        var $7735 = $7799;
                                        break;
                                };
                                var $7732 = $7735;
                                break;
                        };
                        var $7729 = $7732;
                        break;
                };
                var self = $7729;
                break;
            case 'Fm.Term.let':
                var $7800 = self.name;
                var $7801 = self.expr;
                var $7802 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Fm$Term$check$($7801, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7804 = self.value;
                        var $7805 = self.errors;
                        var self = $7804;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7807 = Fm$Check$result$(Maybe$none, $7805);
                                var $7806 = $7807;
                                break;
                            case 'Maybe.some':
                                var $7808 = self.value;
                                var _body_val$14 = $7802(Fm$Term$var$($7800, _ctx_size$10));
                                var _body_ctx$15 = List$cons$(Pair$new$($7800, $7808), _ctx$4);
                                var self = Fm$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Fm$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7810 = self.value;
                                        var $7811 = self.errors;
                                        var self = $7810;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7813 = Fm$Check$result$(Maybe$none, $7811);
                                                var $7812 = $7813;
                                                break;
                                            case 'Maybe.some':
                                                var $7814 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$($7814), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7816 = self.value;
                                                        var $7817 = self.errors;
                                                        var $7818 = Fm$Check$result$($7816, List$concat$($7811, $7817));
                                                        var $7815 = $7818;
                                                        break;
                                                };
                                                var $7812 = $7815;
                                                break;
                                        };
                                        var self = $7812;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7819 = self.value;
                                        var $7820 = self.errors;
                                        var $7821 = Fm$Check$result$($7819, List$concat$($7805, $7820));
                                        var $7809 = $7821;
                                        break;
                                };
                                var $7806 = $7809;
                                break;
                        };
                        var $7803 = $7806;
                        break;
                };
                var self = $7803;
                break;
            case 'Fm.Term.def':
                var $7822 = self.name;
                var $7823 = self.expr;
                var $7824 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Fm$Term$check$($7823, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7826 = self.value;
                        var $7827 = self.errors;
                        var self = $7826;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7829 = Fm$Check$result$(Maybe$none, $7827);
                                var $7828 = $7829;
                                break;
                            case 'Maybe.some':
                                var $7830 = self.value;
                                var _body_val$14 = $7824(Fm$Term$ann$(Bool$true, $7823, $7830));
                                var _body_ctx$15 = List$cons$(Pair$new$($7822, $7830), _ctx$4);
                                var self = Fm$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Fm$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7832 = self.value;
                                        var $7833 = self.errors;
                                        var self = $7832;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7835 = Fm$Check$result$(Maybe$none, $7833);
                                                var $7834 = $7835;
                                                break;
                                            case 'Maybe.some':
                                                var $7836 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$($7836), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7838 = self.value;
                                                        var $7839 = self.errors;
                                                        var $7840 = Fm$Check$result$($7838, List$concat$($7833, $7839));
                                                        var $7837 = $7840;
                                                        break;
                                                };
                                                var $7834 = $7837;
                                                break;
                                        };
                                        var self = $7834;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7841 = self.value;
                                        var $7842 = self.errors;
                                        var $7843 = Fm$Check$result$($7841, List$concat$($7827, $7842));
                                        var $7831 = $7843;
                                        break;
                                };
                                var $7828 = $7831;
                                break;
                        };
                        var $7825 = $7828;
                        break;
                };
                var self = $7825;
                break;
            case 'Fm.Term.ann':
                var $7844 = self.done;
                var $7845 = self.term;
                var $7846 = self.type;
                var self = $7844;
                if (self) {
                    var $7848 = Fm$Check$result$(Maybe$some$($7846), List$nil);
                    var $7847 = $7848;
                } else {
                    var self = Fm$Term$check$($7845, Maybe$some$($7846), _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                    switch (self._) {
                        case 'Fm.Check.result':
                            var $7850 = self.value;
                            var $7851 = self.errors;
                            var self = $7850;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $7853 = Fm$Check$result$(Maybe$none, $7851);
                                    var $7852 = $7853;
                                    break;
                                case 'Maybe.some':
                                    var $7854 = self.value;
                                    var self = Fm$Term$check$($7846, Maybe$some$(Fm$Term$typ), _defs$3, _ctx$4, Fm$MPath$i$(_path$5), _orig$6);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $7856 = self.value;
                                            var $7857 = self.errors;
                                            var self = $7856;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $7859 = Fm$Check$result$(Maybe$none, $7857);
                                                    var $7858 = $7859;
                                                    break;
                                                case 'Maybe.some':
                                                    var $7860 = self.value;
                                                    var self = Fm$Check$result$(Maybe$some$($7846), List$nil);
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $7862 = self.value;
                                                            var $7863 = self.errors;
                                                            var $7864 = Fm$Check$result$($7862, List$concat$($7857, $7863));
                                                            var $7861 = $7864;
                                                            break;
                                                    };
                                                    var $7858 = $7861;
                                                    break;
                                            };
                                            var self = $7858;
                                            break;
                                    };
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $7865 = self.value;
                                            var $7866 = self.errors;
                                            var $7867 = Fm$Check$result$($7865, List$concat$($7851, $7866));
                                            var $7855 = $7867;
                                            break;
                                    };
                                    var $7852 = $7855;
                                    break;
                            };
                            var $7849 = $7852;
                            break;
                    };
                    var $7847 = $7849;
                };
                var self = $7847;
                break;
            case 'Fm.Term.gol':
                var $7868 = self.name;
                var $7869 = self.dref;
                var $7870 = self.verb;
                var $7871 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$show_goal$($7868, $7869, $7870, _type$2, _ctx$4), List$nil));
                var self = $7871;
                break;
            case 'Fm.Term.hol':
                var $7872 = self.path;
                var $7873 = Fm$Check$result$(_type$2, List$nil);
                var self = $7873;
                break;
            case 'Fm.Term.nat':
                var $7874 = self.natx;
                var $7875 = Fm$Check$result$(Maybe$some$(Fm$Term$ref$("Nat")), List$nil);
                var self = $7875;
                break;
            case 'Fm.Term.chr':
                var $7876 = self.chrx;
                var $7877 = Fm$Check$result$(Maybe$some$(Fm$Term$ref$("Char")), List$nil);
                var self = $7877;
                break;
            case 'Fm.Term.str':
                var $7878 = self.strx;
                var $7879 = Fm$Check$result$(Maybe$some$(Fm$Term$ref$("String")), List$nil);
                var self = $7879;
                break;
            case 'Fm.Term.cse':
                var $7880 = self.path;
                var $7881 = self.expr;
                var $7882 = self.name;
                var $7883 = self.with;
                var $7884 = self.cses;
                var $7885 = self.moti;
                var _expr$13 = $7881;
                var self = Fm$Term$check$(_expr$13, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7887 = self.value;
                        var $7888 = self.errors;
                        var self = $7887;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7890 = Fm$Check$result$(Maybe$none, $7888);
                                var $7889 = $7890;
                                break;
                            case 'Maybe.some':
                                var $7891 = self.value;
                                var self = $7885;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var self = _type$2;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7894 = Fm$Term$hol$(Bits$e);
                                                var _moti$17 = $7894;
                                                break;
                                            case 'Maybe.some':
                                                var $7895 = self.value;
                                                var _size$18 = (list_length(_ctx$4));
                                                var _typv$19 = Fm$Term$normalize$($7895, Map$new);
                                                var _moti$20 = Fm$SmartMotive$make$($7882, $7881, $7891, _typv$19, _size$18, _defs$3);
                                                var $7896 = _moti$20;
                                                var _moti$17 = $7896;
                                                break;
                                        };
                                        var $7893 = Maybe$some$(Fm$Term$cse$($7880, $7881, $7882, $7883, $7884, Maybe$some$(_moti$17)));
                                        var _dsug$17 = $7893;
                                        break;
                                    case 'Maybe.some':
                                        var $7897 = self.value;
                                        var $7898 = Fm$Term$desugar_cse$($7881, $7882, $7883, $7884, $7897, $7891, _defs$3, _ctx$4);
                                        var _dsug$17 = $7898;
                                        break;
                                };
                                var self = _dsug$17;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $7899 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$cant_infer$(_orig$6, _term$1, _ctx$4), List$nil));
                                        var self = $7899;
                                        break;
                                    case 'Maybe.some':
                                        var $7900 = self.value;
                                        var $7901 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$patch$(Fm$MPath$to_bits$(_path$5), $7900), List$nil));
                                        var self = $7901;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7902 = self.value;
                                        var $7903 = self.errors;
                                        var $7904 = Fm$Check$result$($7902, List$concat$($7888, $7903));
                                        var $7892 = $7904;
                                        break;
                                };
                                var $7889 = $7892;
                                break;
                        };
                        var $7886 = $7889;
                        break;
                };
                var self = $7886;
                break;
            case 'Fm.Term.ori':
                var $7905 = self.orig;
                var $7906 = self.expr;
                var $7907 = Fm$Term$check$($7906, _type$2, _defs$3, _ctx$4, _path$5, Maybe$some$($7905));
                var self = $7907;
                break;
        };
        switch (self._) {
            case 'Fm.Check.result':
                var $7908 = self.value;
                var $7909 = self.errors;
                var self = $7908;
                switch (self._) {
                    case 'Maybe.none':
                        var $7911 = Fm$Check$result$(Maybe$none, $7909);
                        var $7910 = $7911;
                        break;
                    case 'Maybe.some':
                        var $7912 = self.value;
                        var self = _type$2;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7914 = Fm$Check$result$(Maybe$some$($7912), List$nil);
                                var self = $7914;
                                break;
                            case 'Maybe.some':
                                var $7915 = self.value;
                                var self = Fm$Term$equal$($7915, $7912, _defs$3, (list_length(_ctx$4)), 0n, Set$new);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7917 = self.value;
                                        var $7918 = self.errors;
                                        var self = $7917;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7920 = Fm$Check$result$(Maybe$none, $7918);
                                                var $7919 = $7920;
                                                break;
                                            case 'Maybe.some':
                                                var $7921 = self.value;
                                                var self = $7921;
                                                if (self) {
                                                    var $7923 = Fm$Check$result$(Maybe$some$($7915), List$nil);
                                                    var self = $7923;
                                                } else {
                                                    var $7924 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, Either$right$($7915), Either$right$($7912), _ctx$4), List$nil));
                                                    var self = $7924;
                                                };
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7925 = self.value;
                                                        var $7926 = self.errors;
                                                        var $7927 = Fm$Check$result$($7925, List$concat$($7918, $7926));
                                                        var $7922 = $7927;
                                                        break;
                                                };
                                                var $7919 = $7922;
                                                break;
                                        };
                                        var $7916 = $7919;
                                        break;
                                };
                                var self = $7916;
                                break;
                        };
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $7928 = self.value;
                                var $7929 = self.errors;
                                var $7930 = Fm$Check$result$($7928, List$concat$($7909, $7929));
                                var $7913 = $7930;
                                break;
                        };
                        var $7910 = $7913;
                        break;
                };
                var $7608 = $7910;
                break;
        };
        return $7608;
    };
    const Fm$Term$check = x0 => x1 => x2 => x3 => x4 => x5 => Fm$Term$check$(x0, x1, x2, x3, x4, x5);

    function Fm$Path$nil$(_x$1) {
        var $7931 = _x$1;
        return $7931;
    };
    const Fm$Path$nil = x0 => Fm$Path$nil$(x0);
    const Fm$MPath$nil = Maybe$some$(Fm$Path$nil);

    function List$is_empty$(_list$2) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $7933 = Bool$true;
                var $7932 = $7933;
                break;
            case 'List.cons':
                var $7934 = self.head;
                var $7935 = self.tail;
                var $7936 = Bool$false;
                var $7932 = $7936;
                break;
        };
        return $7932;
    };
    const List$is_empty = x0 => List$is_empty$(x0);

    function Fm$Term$patch_at$(_path$1, _term$2, _fn$3) {
        var self = _term$2;
        switch (self._) {
            case 'Fm.Term.var':
                var $7938 = self.name;
                var $7939 = self.indx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7941 = _fn$3(_term$2);
                        var $7940 = $7941;
                        break;
                    case 'o':
                        var $7942 = self.slice(0, -1);
                        var $7943 = _term$2;
                        var $7940 = $7943;
                        break;
                    case 'i':
                        var $7944 = self.slice(0, -1);
                        var $7945 = _term$2;
                        var $7940 = $7945;
                        break;
                };
                var $7937 = $7940;
                break;
            case 'Fm.Term.ref':
                var $7946 = self.name;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7948 = _fn$3(_term$2);
                        var $7947 = $7948;
                        break;
                    case 'o':
                        var $7949 = self.slice(0, -1);
                        var $7950 = _term$2;
                        var $7947 = $7950;
                        break;
                    case 'i':
                        var $7951 = self.slice(0, -1);
                        var $7952 = _term$2;
                        var $7947 = $7952;
                        break;
                };
                var $7937 = $7947;
                break;
            case 'Fm.Term.typ':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7954 = _fn$3(_term$2);
                        var $7953 = $7954;
                        break;
                    case 'o':
                        var $7955 = self.slice(0, -1);
                        var $7956 = _term$2;
                        var $7953 = $7956;
                        break;
                    case 'i':
                        var $7957 = self.slice(0, -1);
                        var $7958 = _term$2;
                        var $7953 = $7958;
                        break;
                };
                var $7937 = $7953;
                break;
            case 'Fm.Term.all':
                var $7959 = self.eras;
                var $7960 = self.self;
                var $7961 = self.name;
                var $7962 = self.xtyp;
                var $7963 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7965 = _fn$3(_term$2);
                        var $7964 = $7965;
                        break;
                    case 'o':
                        var $7966 = self.slice(0, -1);
                        var $7967 = Fm$Term$all$($7959, $7960, $7961, Fm$Term$patch_at$($7966, $7962, _fn$3), $7963);
                        var $7964 = $7967;
                        break;
                    case 'i':
                        var $7968 = self.slice(0, -1);
                        var $7969 = Fm$Term$all$($7959, $7960, $7961, $7962, (_s$10 => _x$11 => {
                            var $7970 = Fm$Term$patch_at$($7968, $7963(_s$10)(_x$11), _fn$3);
                            return $7970;
                        }));
                        var $7964 = $7969;
                        break;
                };
                var $7937 = $7964;
                break;
            case 'Fm.Term.lam':
                var $7971 = self.name;
                var $7972 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7974 = _fn$3(_term$2);
                        var $7973 = $7974;
                        break;
                    case 'o':
                        var $7975 = self.slice(0, -1);
                        var $7976 = Fm$Term$lam$($7971, (_x$7 => {
                            var $7977 = Fm$Term$patch_at$(Bits$tail$(_path$1), $7972(_x$7), _fn$3);
                            return $7977;
                        }));
                        var $7973 = $7976;
                        break;
                    case 'i':
                        var $7978 = self.slice(0, -1);
                        var $7979 = Fm$Term$lam$($7971, (_x$7 => {
                            var $7980 = Fm$Term$patch_at$(Bits$tail$(_path$1), $7972(_x$7), _fn$3);
                            return $7980;
                        }));
                        var $7973 = $7979;
                        break;
                };
                var $7937 = $7973;
                break;
            case 'Fm.Term.app':
                var $7981 = self.func;
                var $7982 = self.argm;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7984 = _fn$3(_term$2);
                        var $7983 = $7984;
                        break;
                    case 'o':
                        var $7985 = self.slice(0, -1);
                        var $7986 = Fm$Term$app$(Fm$Term$patch_at$($7985, $7981, _fn$3), $7982);
                        var $7983 = $7986;
                        break;
                    case 'i':
                        var $7987 = self.slice(0, -1);
                        var $7988 = Fm$Term$app$($7981, Fm$Term$patch_at$($7987, $7982, _fn$3));
                        var $7983 = $7988;
                        break;
                };
                var $7937 = $7983;
                break;
            case 'Fm.Term.let':
                var $7989 = self.name;
                var $7990 = self.expr;
                var $7991 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7993 = _fn$3(_term$2);
                        var $7992 = $7993;
                        break;
                    case 'o':
                        var $7994 = self.slice(0, -1);
                        var $7995 = Fm$Term$let$($7989, Fm$Term$patch_at$($7994, $7990, _fn$3), $7991);
                        var $7992 = $7995;
                        break;
                    case 'i':
                        var $7996 = self.slice(0, -1);
                        var $7997 = Fm$Term$let$($7989, $7990, (_x$8 => {
                            var $7998 = Fm$Term$patch_at$($7996, $7991(_x$8), _fn$3);
                            return $7998;
                        }));
                        var $7992 = $7997;
                        break;
                };
                var $7937 = $7992;
                break;
            case 'Fm.Term.def':
                var $7999 = self.name;
                var $8000 = self.expr;
                var $8001 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8003 = _fn$3(_term$2);
                        var $8002 = $8003;
                        break;
                    case 'o':
                        var $8004 = self.slice(0, -1);
                        var $8005 = Fm$Term$def$($7999, Fm$Term$patch_at$($8004, $8000, _fn$3), $8001);
                        var $8002 = $8005;
                        break;
                    case 'i':
                        var $8006 = self.slice(0, -1);
                        var $8007 = Fm$Term$def$($7999, $8000, (_x$8 => {
                            var $8008 = Fm$Term$patch_at$($8006, $8001(_x$8), _fn$3);
                            return $8008;
                        }));
                        var $8002 = $8007;
                        break;
                };
                var $7937 = $8002;
                break;
            case 'Fm.Term.ann':
                var $8009 = self.done;
                var $8010 = self.term;
                var $8011 = self.type;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8013 = _fn$3(_term$2);
                        var $8012 = $8013;
                        break;
                    case 'o':
                        var $8014 = self.slice(0, -1);
                        var $8015 = Fm$Term$ann$($8009, Fm$Term$patch_at$($8014, $8010, _fn$3), $8011);
                        var $8012 = $8015;
                        break;
                    case 'i':
                        var $8016 = self.slice(0, -1);
                        var $8017 = Fm$Term$ann$($8009, $8010, Fm$Term$patch_at$($8016, $8011, _fn$3));
                        var $8012 = $8017;
                        break;
                };
                var $7937 = $8012;
                break;
            case 'Fm.Term.gol':
                var $8018 = self.name;
                var $8019 = self.dref;
                var $8020 = self.verb;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8022 = _fn$3(_term$2);
                        var $8021 = $8022;
                        break;
                    case 'o':
                        var $8023 = self.slice(0, -1);
                        var $8024 = _term$2;
                        var $8021 = $8024;
                        break;
                    case 'i':
                        var $8025 = self.slice(0, -1);
                        var $8026 = _term$2;
                        var $8021 = $8026;
                        break;
                };
                var $7937 = $8021;
                break;
            case 'Fm.Term.hol':
                var $8027 = self.path;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8029 = _fn$3(_term$2);
                        var $8028 = $8029;
                        break;
                    case 'o':
                        var $8030 = self.slice(0, -1);
                        var $8031 = _term$2;
                        var $8028 = $8031;
                        break;
                    case 'i':
                        var $8032 = self.slice(0, -1);
                        var $8033 = _term$2;
                        var $8028 = $8033;
                        break;
                };
                var $7937 = $8028;
                break;
            case 'Fm.Term.nat':
                var $8034 = self.natx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8036 = _fn$3(_term$2);
                        var $8035 = $8036;
                        break;
                    case 'o':
                        var $8037 = self.slice(0, -1);
                        var $8038 = _term$2;
                        var $8035 = $8038;
                        break;
                    case 'i':
                        var $8039 = self.slice(0, -1);
                        var $8040 = _term$2;
                        var $8035 = $8040;
                        break;
                };
                var $7937 = $8035;
                break;
            case 'Fm.Term.chr':
                var $8041 = self.chrx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8043 = _fn$3(_term$2);
                        var $8042 = $8043;
                        break;
                    case 'o':
                        var $8044 = self.slice(0, -1);
                        var $8045 = _term$2;
                        var $8042 = $8045;
                        break;
                    case 'i':
                        var $8046 = self.slice(0, -1);
                        var $8047 = _term$2;
                        var $8042 = $8047;
                        break;
                };
                var $7937 = $8042;
                break;
            case 'Fm.Term.str':
                var $8048 = self.strx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8050 = _fn$3(_term$2);
                        var $8049 = $8050;
                        break;
                    case 'o':
                        var $8051 = self.slice(0, -1);
                        var $8052 = _term$2;
                        var $8049 = $8052;
                        break;
                    case 'i':
                        var $8053 = self.slice(0, -1);
                        var $8054 = _term$2;
                        var $8049 = $8054;
                        break;
                };
                var $7937 = $8049;
                break;
            case 'Fm.Term.cse':
                var $8055 = self.path;
                var $8056 = self.expr;
                var $8057 = self.name;
                var $8058 = self.with;
                var $8059 = self.cses;
                var $8060 = self.moti;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8062 = _fn$3(_term$2);
                        var $8061 = $8062;
                        break;
                    case 'o':
                        var $8063 = self.slice(0, -1);
                        var $8064 = _term$2;
                        var $8061 = $8064;
                        break;
                    case 'i':
                        var $8065 = self.slice(0, -1);
                        var $8066 = _term$2;
                        var $8061 = $8066;
                        break;
                };
                var $7937 = $8061;
                break;
            case 'Fm.Term.ori':
                var $8067 = self.orig;
                var $8068 = self.expr;
                var $8069 = Fm$Term$ori$($8067, Fm$Term$patch_at$(_path$1, $8068, _fn$3));
                var $7937 = $8069;
                break;
        };
        return $7937;
    };
    const Fm$Term$patch_at = x0 => x1 => x2 => Fm$Term$patch_at$(x0, x1, x2);

    function Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$6, _errs$7, _fixd$8) {
        var self = _errs$7;
        switch (self._) {
            case 'List.nil':
                var self = _fixd$8;
                if (self) {
                    var _type$9 = Fm$Term$bind$(List$nil, (_x$9 => {
                        var $8073 = (_x$9 + '1');
                        return $8073;
                    }), _type$5);
                    var _term$10 = Fm$Term$bind$(List$nil, (_x$10 => {
                        var $8074 = (_x$10 + '0');
                        return $8074;
                    }), _term$4);
                    var _defs$11 = Fm$set$(_name$3, Fm$Def$new$(_file$1, _code$2, _name$3, _term$10, _type$9, Fm$Status$init), _defs$6);
                    var $8072 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                        var $8075 = _m$pure$13;
                        return $8075;
                    }))(Maybe$some$(_defs$11));
                    var $8071 = $8072;
                } else {
                    var $8076 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                        var $8077 = _m$pure$10;
                        return $8077;
                    }))(Maybe$none);
                    var $8071 = $8076;
                };
                var $8070 = $8071;
                break;
            case 'List.cons':
                var $8078 = self.head;
                var $8079 = self.tail;
                var self = $8078;
                switch (self._) {
                    case 'Fm.Error.type_mismatch':
                        var $8081 = self.origin;
                        var $8082 = self.expected;
                        var $8083 = self.detected;
                        var $8084 = self.context;
                        var $8085 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$6, $8079, _fixd$8);
                        var $8080 = $8085;
                        break;
                    case 'Fm.Error.show_goal':
                        var $8086 = self.name;
                        var $8087 = self.dref;
                        var $8088 = self.verb;
                        var $8089 = self.goal;
                        var $8090 = self.context;
                        var $8091 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$6, $8079, _fixd$8);
                        var $8080 = $8091;
                        break;
                    case 'Fm.Error.waiting':
                        var $8092 = self.name;
                        var $8093 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                            var $8094 = _m$bind$12;
                            return $8094;
                        }))(Fm$Synth$one$($8092, _defs$6))((_new_defs$12 => {
                            var self = _new_defs$12;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $8096 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$6, $8079, _fixd$8);
                                    var $8095 = $8096;
                                    break;
                                case 'Maybe.some':
                                    var $8097 = self.value;
                                    var $8098 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, $8097, $8079, Bool$true);
                                    var $8095 = $8098;
                                    break;
                            };
                            return $8095;
                        }));
                        var $8080 = $8093;
                        break;
                    case 'Fm.Error.indirect':
                        var $8099 = self.name;
                        var $8100 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$6, $8079, _fixd$8);
                        var $8080 = $8100;
                        break;
                    case 'Fm.Error.patch':
                        var $8101 = self.path;
                        var $8102 = self.term;
                        var self = $8101;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'e':
                                var $8104 = IO$monad$((_m$bind$13 => _m$pure$14 => {
                                    var $8105 = _m$pure$14;
                                    return $8105;
                                }))(Maybe$none);
                                var $8103 = $8104;
                                break;
                            case 'o':
                                var $8106 = self.slice(0, -1);
                                var _term$14 = Fm$Term$patch_at$($8106, _term$4, (_x$14 => {
                                    var $8108 = $8102;
                                    return $8108;
                                }));
                                var $8107 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$14, _type$5, _defs$6, $8079, Bool$true);
                                var $8103 = $8107;
                                break;
                            case 'i':
                                var $8109 = self.slice(0, -1);
                                var _type$14 = Fm$Term$patch_at$($8109, _type$5, (_x$14 => {
                                    var $8111 = $8102;
                                    return $8111;
                                }));
                                var $8110 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$14, _defs$6, $8079, Bool$true);
                                var $8103 = $8110;
                                break;
                        };
                        var $8080 = $8103;
                        break;
                    case 'Fm.Error.undefined_reference':
                        var $8112 = self.origin;
                        var $8113 = self.name;
                        var $8114 = IO$monad$((_m$bind$13 => _m$pure$14 => {
                            var $8115 = _m$bind$13;
                            return $8115;
                        }))(Fm$Synth$one$($8113, _defs$6))((_new_defs$13 => {
                            var self = _new_defs$13;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $8117 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$6, $8079, _fixd$8);
                                    var $8116 = $8117;
                                    break;
                                case 'Maybe.some':
                                    var $8118 = self.value;
                                    var $8119 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, $8118, $8079, Bool$true);
                                    var $8116 = $8119;
                                    break;
                            };
                            return $8116;
                        }));
                        var $8080 = $8114;
                        break;
                    case 'Fm.Error.cant_infer':
                        var $8120 = self.origin;
                        var $8121 = self.term;
                        var $8122 = self.context;
                        var $8123 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$6, $8079, _fixd$8);
                        var $8080 = $8123;
                        break;
                };
                var $8070 = $8080;
                break;
        };
        return $8070;
    };
    const Fm$Synth$fix = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Fm$Synth$fix$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Fm$Status$fail$(_errors$1) {
        var $8124 = ({
            _: 'Fm.Status.fail',
            'errors': _errors$1
        });
        return $8124;
    };
    const Fm$Status$fail = x0 => Fm$Status$fail$(x0);

    function Fm$Synth$one$(_name$1, _defs$2) {
        var self = Fm$get$(_name$1, _defs$2);
        switch (self._) {
            case 'Maybe.none':
                var $8126 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $8127 = _m$bind$3;
                    return $8127;
                }))(Fm$Synth$load$(_name$1, _defs$2))((_loaded$3 => {
                    var self = _loaded$3;
                    switch (self._) {
                        case 'Maybe.none':
                            var $8129 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                                var $8130 = _m$pure$5;
                                return $8130;
                            }))(Maybe$none);
                            var $8128 = $8129;
                            break;
                        case 'Maybe.some':
                            var $8131 = self.value;
                            var $8132 = Fm$Synth$one$(_name$1, $8131);
                            var $8128 = $8132;
                            break;
                    };
                    return $8128;
                }));
                var $8125 = $8126;
                break;
            case 'Maybe.some':
                var $8133 = self.value;
                var self = $8133;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $8135 = self.file;
                        var $8136 = self.code;
                        var $8137 = self.name;
                        var $8138 = self.term;
                        var $8139 = self.type;
                        var $8140 = self.stat;
                        var _file$10 = $8135;
                        var _code$11 = $8136;
                        var _name$12 = $8137;
                        var _term$13 = $8138;
                        var _type$14 = $8139;
                        var _stat$15 = $8140;
                        var self = _stat$15;
                        switch (self._) {
                            case 'Fm.Status.init':
                                var _defs$16 = Fm$set$(_name$12, Fm$Def$new$(_file$10, _code$11, _name$12, _term$13, _type$14, Fm$Status$wait), _defs$2);
                                var self = Fm$Term$check$(_type$14, Maybe$some$(Fm$Term$typ), _defs$16, List$nil, Fm$MPath$i$(Fm$MPath$nil), Maybe$none);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $8143 = self.value;
                                        var $8144 = self.errors;
                                        var self = $8143;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $8146 = Fm$Check$result$(Maybe$none, $8144);
                                                var $8145 = $8146;
                                                break;
                                            case 'Maybe.some':
                                                var $8147 = self.value;
                                                var self = Fm$Term$check$(_term$13, Maybe$some$(_type$14), _defs$16, List$nil, Fm$MPath$o$(Fm$MPath$nil), Maybe$none);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $8149 = self.value;
                                                        var $8150 = self.errors;
                                                        var self = $8149;
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var $8152 = Fm$Check$result$(Maybe$none, $8150);
                                                                var $8151 = $8152;
                                                                break;
                                                            case 'Maybe.some':
                                                                var $8153 = self.value;
                                                                var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                                                switch (self._) {
                                                                    case 'Fm.Check.result':
                                                                        var $8155 = self.value;
                                                                        var $8156 = self.errors;
                                                                        var $8157 = Fm$Check$result$($8155, List$concat$($8150, $8156));
                                                                        var $8154 = $8157;
                                                                        break;
                                                                };
                                                                var $8151 = $8154;
                                                                break;
                                                        };
                                                        var self = $8151;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $8158 = self.value;
                                                        var $8159 = self.errors;
                                                        var $8160 = Fm$Check$result$($8158, List$concat$($8144, $8159));
                                                        var $8148 = $8160;
                                                        break;
                                                };
                                                var $8145 = $8148;
                                                break;
                                        };
                                        var _checked$17 = $8145;
                                        break;
                                };
                                var self = _checked$17;
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $8161 = self.value;
                                        var $8162 = self.errors;
                                        var self = List$is_empty$($8162);
                                        if (self) {
                                            var _defs$20 = Fm$define$(_file$10, _code$11, _name$12, _term$13, _type$14, Bool$true, _defs$16);
                                            var $8164 = IO$monad$((_m$bind$21 => _m$pure$22 => {
                                                var $8165 = _m$pure$22;
                                                return $8165;
                                            }))(Maybe$some$(_defs$20));
                                            var $8163 = $8164;
                                        } else {
                                            var $8166 = IO$monad$((_m$bind$20 => _m$pure$21 => {
                                                var $8167 = _m$bind$20;
                                                return $8167;
                                            }))(Fm$Synth$fix$(_file$10, _code$11, _name$12, _term$13, _type$14, _defs$16, $8162, Bool$false))((_fixed$20 => {
                                                var self = _fixed$20;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var _stat$21 = Fm$Status$fail$($8162);
                                                        var _defs$22 = Fm$set$(_name$12, Fm$Def$new$(_file$10, _code$11, _name$12, _term$13, _type$14, _stat$21), _defs$16);
                                                        var $8169 = IO$monad$((_m$bind$23 => _m$pure$24 => {
                                                            var $8170 = _m$pure$24;
                                                            return $8170;
                                                        }))(Maybe$some$(_defs$22));
                                                        var $8168 = $8169;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $8171 = self.value;
                                                        var $8172 = Fm$Synth$one$(_name$12, $8171);
                                                        var $8168 = $8172;
                                                        break;
                                                };
                                                return $8168;
                                            }));
                                            var $8163 = $8166;
                                        };
                                        var $8142 = $8163;
                                        break;
                                };
                                var $8141 = $8142;
                                break;
                            case 'Fm.Status.wait':
                                var $8173 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                    var $8174 = _m$pure$17;
                                    return $8174;
                                }))(Maybe$some$(_defs$2));
                                var $8141 = $8173;
                                break;
                            case 'Fm.Status.done':
                                var $8175 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                    var $8176 = _m$pure$17;
                                    return $8176;
                                }))(Maybe$some$(_defs$2));
                                var $8141 = $8175;
                                break;
                            case 'Fm.Status.fail':
                                var $8177 = self.errors;
                                var $8178 = IO$monad$((_m$bind$17 => _m$pure$18 => {
                                    var $8179 = _m$pure$18;
                                    return $8179;
                                }))(Maybe$some$(_defs$2));
                                var $8141 = $8178;
                                break;
                        };
                        var $8134 = $8141;
                        break;
                };
                var $8125 = $8134;
                break;
        };
        return $8125;
    };
    const Fm$Synth$one = x0 => x1 => Fm$Synth$one$(x0, x1);

    function Map$map$(_fn$3, _map$4) {
        var self = _map$4;
        switch (self._) {
            case 'Map.new':
                var $8181 = Map$new;
                var $8180 = $8181;
                break;
            case 'Map.tie':
                var $8182 = self.val;
                var $8183 = self.lft;
                var $8184 = self.rgt;
                var self = $8182;
                switch (self._) {
                    case 'Maybe.none':
                        var $8186 = Maybe$none;
                        var _val$8 = $8186;
                        break;
                    case 'Maybe.some':
                        var $8187 = self.value;
                        var $8188 = Maybe$some$(_fn$3($8187));
                        var _val$8 = $8188;
                        break;
                };
                var _lft$9 = Map$map$(_fn$3, $8183);
                var _rgt$10 = Map$map$(_fn$3, $8184);
                var $8185 = Map$tie$(_val$8, _lft$9, _rgt$10);
                var $8180 = $8185;
                break;
        };
        return $8180;
    };
    const Map$map = x0 => x1 => Map$map$(x0, x1);
    const Fm$Term$inline$names = (() => {
        var _inl$1 = List$cons$("Monad.pure", List$cons$("Monad.bind", List$cons$("Monad.new", List$cons$("Parser.monad", List$cons$("Parser.bind", List$cons$("Parser.pure", List$cons$("Fm.Check.pure", List$cons$("Fm.Check.bind", List$cons$("Fm.Check.monad", List$cons$("Fm.Check.value", List$cons$("Fm.Check.none", List$nil)))))))))));
        var _kvs$2 = List$mapped$(_inl$1, (_x$2 => {
            var $8190 = Pair$new$((fm_name_to_bits(_x$2)), Unit$new);
            return $8190;
        }));
        var $8189 = Map$from_list$(_kvs$2);
        return $8189;
    })();

    function Fm$Term$inline$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8192 = self.name;
                var $8193 = self.indx;
                var $8194 = _term$1;
                var $8191 = $8194;
                break;
            case 'Fm.Term.ref':
                var $8195 = self.name;
                var _inli$4 = Set$has$((fm_name_to_bits($8195)), Fm$Term$inline$names);
                var self = _inli$4;
                if (self) {
                    var self = Fm$get$($8195, _defs$2);
                    switch (self._) {
                        case 'Maybe.none':
                            var $8198 = Fm$Term$ref$($8195);
                            var $8197 = $8198;
                            break;
                        case 'Maybe.some':
                            var $8199 = self.value;
                            var self = $8199;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $8201 = self.file;
                                    var $8202 = self.code;
                                    var $8203 = self.name;
                                    var $8204 = self.term;
                                    var $8205 = self.type;
                                    var $8206 = self.stat;
                                    var $8207 = Fm$Term$inline$reduce$($8204, _defs$2);
                                    var $8200 = $8207;
                                    break;
                            };
                            var $8197 = $8200;
                            break;
                    };
                    var $8196 = $8197;
                } else {
                    var $8208 = _term$1;
                    var $8196 = $8208;
                };
                var $8191 = $8196;
                break;
            case 'Fm.Term.typ':
                var $8209 = _term$1;
                var $8191 = $8209;
                break;
            case 'Fm.Term.all':
                var $8210 = self.eras;
                var $8211 = self.self;
                var $8212 = self.name;
                var $8213 = self.xtyp;
                var $8214 = self.body;
                var $8215 = _term$1;
                var $8191 = $8215;
                break;
            case 'Fm.Term.lam':
                var $8216 = self.name;
                var $8217 = self.body;
                var $8218 = _term$1;
                var $8191 = $8218;
                break;
            case 'Fm.Term.app':
                var $8219 = self.func;
                var $8220 = self.argm;
                var _func$5 = Fm$Term$inline$reduce$($8219, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $8222 = self.name;
                        var $8223 = self.indx;
                        var $8224 = _term$1;
                        var $8221 = $8224;
                        break;
                    case 'Fm.Term.ref':
                        var $8225 = self.name;
                        var $8226 = _term$1;
                        var $8221 = $8226;
                        break;
                    case 'Fm.Term.typ':
                        var $8227 = _term$1;
                        var $8221 = $8227;
                        break;
                    case 'Fm.Term.all':
                        var $8228 = self.eras;
                        var $8229 = self.self;
                        var $8230 = self.name;
                        var $8231 = self.xtyp;
                        var $8232 = self.body;
                        var $8233 = _term$1;
                        var $8221 = $8233;
                        break;
                    case 'Fm.Term.lam':
                        var $8234 = self.name;
                        var $8235 = self.body;
                        var $8236 = Fm$Term$inline$reduce$($8235($8220), _defs$2);
                        var $8221 = $8236;
                        break;
                    case 'Fm.Term.app':
                        var $8237 = self.func;
                        var $8238 = self.argm;
                        var $8239 = _term$1;
                        var $8221 = $8239;
                        break;
                    case 'Fm.Term.let':
                        var $8240 = self.name;
                        var $8241 = self.expr;
                        var $8242 = self.body;
                        var $8243 = Fm$Term$let$($8240, $8241, (_x$9 => {
                            var $8244 = Fm$Term$inline$reduce$(Fm$Term$app$($8242(_x$9), $8220), _defs$2);
                            return $8244;
                        }));
                        var $8221 = $8243;
                        break;
                    case 'Fm.Term.def':
                        var $8245 = self.name;
                        var $8246 = self.expr;
                        var $8247 = self.body;
                        var $8248 = _term$1;
                        var $8221 = $8248;
                        break;
                    case 'Fm.Term.ann':
                        var $8249 = self.done;
                        var $8250 = self.term;
                        var $8251 = self.type;
                        var $8252 = _term$1;
                        var $8221 = $8252;
                        break;
                    case 'Fm.Term.gol':
                        var $8253 = self.name;
                        var $8254 = self.dref;
                        var $8255 = self.verb;
                        var $8256 = _term$1;
                        var $8221 = $8256;
                        break;
                    case 'Fm.Term.hol':
                        var $8257 = self.path;
                        var $8258 = _term$1;
                        var $8221 = $8258;
                        break;
                    case 'Fm.Term.nat':
                        var $8259 = self.natx;
                        var $8260 = _term$1;
                        var $8221 = $8260;
                        break;
                    case 'Fm.Term.chr':
                        var $8261 = self.chrx;
                        var $8262 = _term$1;
                        var $8221 = $8262;
                        break;
                    case 'Fm.Term.str':
                        var $8263 = self.strx;
                        var $8264 = _term$1;
                        var $8221 = $8264;
                        break;
                    case 'Fm.Term.cse':
                        var $8265 = self.path;
                        var $8266 = self.expr;
                        var $8267 = self.name;
                        var $8268 = self.with;
                        var $8269 = self.cses;
                        var $8270 = self.moti;
                        var $8271 = _term$1;
                        var $8221 = $8271;
                        break;
                    case 'Fm.Term.ori':
                        var $8272 = self.orig;
                        var $8273 = self.expr;
                        var $8274 = _term$1;
                        var $8221 = $8274;
                        break;
                };
                var $8191 = $8221;
                break;
            case 'Fm.Term.let':
                var $8275 = self.name;
                var $8276 = self.expr;
                var $8277 = self.body;
                var $8278 = _term$1;
                var $8191 = $8278;
                break;
            case 'Fm.Term.def':
                var $8279 = self.name;
                var $8280 = self.expr;
                var $8281 = self.body;
                var $8282 = _term$1;
                var $8191 = $8282;
                break;
            case 'Fm.Term.ann':
                var $8283 = self.done;
                var $8284 = self.term;
                var $8285 = self.type;
                var $8286 = _term$1;
                var $8191 = $8286;
                break;
            case 'Fm.Term.gol':
                var $8287 = self.name;
                var $8288 = self.dref;
                var $8289 = self.verb;
                var $8290 = _term$1;
                var $8191 = $8290;
                break;
            case 'Fm.Term.hol':
                var $8291 = self.path;
                var $8292 = _term$1;
                var $8191 = $8292;
                break;
            case 'Fm.Term.nat':
                var $8293 = self.natx;
                var $8294 = _term$1;
                var $8191 = $8294;
                break;
            case 'Fm.Term.chr':
                var $8295 = self.chrx;
                var $8296 = _term$1;
                var $8191 = $8296;
                break;
            case 'Fm.Term.str':
                var $8297 = self.strx;
                var $8298 = _term$1;
                var $8191 = $8298;
                break;
            case 'Fm.Term.cse':
                var $8299 = self.path;
                var $8300 = self.expr;
                var $8301 = self.name;
                var $8302 = self.with;
                var $8303 = self.cses;
                var $8304 = self.moti;
                var $8305 = _term$1;
                var $8191 = $8305;
                break;
            case 'Fm.Term.ori':
                var $8306 = self.orig;
                var $8307 = self.expr;
                var $8308 = Fm$Term$inline$reduce$($8307, _defs$2);
                var $8191 = $8308;
                break;
        };
        return $8191;
    };
    const Fm$Term$inline$reduce = x0 => x1 => Fm$Term$inline$reduce$(x0, x1);

    function Fm$Term$inline$(_term$1, _defs$2) {
        var self = Fm$Term$inline$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Fm.Term.var':
                var $8310 = self.name;
                var $8311 = self.indx;
                var $8312 = Fm$Term$var$($8310, $8311);
                var $8309 = $8312;
                break;
            case 'Fm.Term.ref':
                var $8313 = self.name;
                var $8314 = Fm$Term$ref$($8313);
                var $8309 = $8314;
                break;
            case 'Fm.Term.typ':
                var $8315 = Fm$Term$typ;
                var $8309 = $8315;
                break;
            case 'Fm.Term.all':
                var $8316 = self.eras;
                var $8317 = self.self;
                var $8318 = self.name;
                var $8319 = self.xtyp;
                var $8320 = self.body;
                var $8321 = Fm$Term$all$($8316, $8317, $8318, Fm$Term$inline$($8319, _defs$2), (_s$8 => _x$9 => {
                    var $8322 = Fm$Term$inline$($8320(_s$8)(_x$9), _defs$2);
                    return $8322;
                }));
                var $8309 = $8321;
                break;
            case 'Fm.Term.lam':
                var $8323 = self.name;
                var $8324 = self.body;
                var $8325 = Fm$Term$lam$($8323, (_x$5 => {
                    var $8326 = Fm$Term$inline$($8324(_x$5), _defs$2);
                    return $8326;
                }));
                var $8309 = $8325;
                break;
            case 'Fm.Term.app':
                var $8327 = self.func;
                var $8328 = self.argm;
                var $8329 = Fm$Term$app$(Fm$Term$inline$($8327, _defs$2), Fm$Term$inline$($8328, _defs$2));
                var $8309 = $8329;
                break;
            case 'Fm.Term.let':
                var $8330 = self.name;
                var $8331 = self.expr;
                var $8332 = self.body;
                var $8333 = Fm$Term$let$($8330, Fm$Term$inline$($8331, _defs$2), (_x$6 => {
                    var $8334 = Fm$Term$inline$($8332(_x$6), _defs$2);
                    return $8334;
                }));
                var $8309 = $8333;
                break;
            case 'Fm.Term.def':
                var $8335 = self.name;
                var $8336 = self.expr;
                var $8337 = self.body;
                var $8338 = Fm$Term$def$($8335, Fm$Term$inline$($8336, _defs$2), (_x$6 => {
                    var $8339 = Fm$Term$inline$($8337(_x$6), _defs$2);
                    return $8339;
                }));
                var $8309 = $8338;
                break;
            case 'Fm.Term.ann':
                var $8340 = self.done;
                var $8341 = self.term;
                var $8342 = self.type;
                var $8343 = Fm$Term$ann$($8340, Fm$Term$inline$($8341, _defs$2), Fm$Term$inline$($8342, _defs$2));
                var $8309 = $8343;
                break;
            case 'Fm.Term.gol':
                var $8344 = self.name;
                var $8345 = self.dref;
                var $8346 = self.verb;
                var $8347 = Fm$Term$gol$($8344, $8345, $8346);
                var $8309 = $8347;
                break;
            case 'Fm.Term.hol':
                var $8348 = self.path;
                var $8349 = Fm$Term$hol$($8348);
                var $8309 = $8349;
                break;
            case 'Fm.Term.nat':
                var $8350 = self.natx;
                var $8351 = Fm$Term$nat$($8350);
                var $8309 = $8351;
                break;
            case 'Fm.Term.chr':
                var $8352 = self.chrx;
                var $8353 = Fm$Term$chr$($8352);
                var $8309 = $8353;
                break;
            case 'Fm.Term.str':
                var $8354 = self.strx;
                var $8355 = Fm$Term$str$($8354);
                var $8309 = $8355;
                break;
            case 'Fm.Term.cse':
                var $8356 = self.path;
                var $8357 = self.expr;
                var $8358 = self.name;
                var $8359 = self.with;
                var $8360 = self.cses;
                var $8361 = self.moti;
                var $8362 = _term$1;
                var $8309 = $8362;
                break;
            case 'Fm.Term.ori':
                var $8363 = self.orig;
                var $8364 = self.expr;
                var $8365 = Fm$Term$inline$($8364, _defs$2);
                var $8309 = $8365;
                break;
        };
        return $8309;
    };
    const Fm$Term$inline = x0 => x1 => Fm$Term$inline$(x0, x1);

    function Map$values$go$(_xs$2, _list$3) {
        var self = _xs$2;
        switch (self._) {
            case 'Map.new':
                var $8367 = _list$3;
                var $8366 = $8367;
                break;
            case 'Map.tie':
                var $8368 = self.val;
                var $8369 = self.lft;
                var $8370 = self.rgt;
                var self = $8368;
                switch (self._) {
                    case 'Maybe.none':
                        var $8372 = _list$3;
                        var _list0$7 = $8372;
                        break;
                    case 'Maybe.some':
                        var $8373 = self.value;
                        var $8374 = List$cons$($8373, _list$3);
                        var _list0$7 = $8374;
                        break;
                };
                var _list1$8 = Map$values$go$($8369, _list0$7);
                var _list2$9 = Map$values$go$($8370, _list1$8);
                var $8371 = _list2$9;
                var $8366 = $8371;
                break;
        };
        return $8366;
    };
    const Map$values$go = x0 => x1 => Map$values$go$(x0, x1);

    function Map$values$(_xs$2) {
        var $8375 = Map$values$go$(_xs$2, List$nil);
        return $8375;
    };
    const Map$values = x0 => Map$values$(x0);

    function Fm$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4) {
        var Fm$Core$var_name$ = (_indx$1, _name$2, _brui$3, _vars$4) => ({
            ctr: 'TCO',
            arg: [_indx$1, _name$2, _brui$3, _vars$4]
        });
        var Fm$Core$var_name = _indx$1 => _name$2 => _brui$3 => _vars$4 => Fm$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4);
        var arg = [_indx$1, _name$2, _brui$3, _vars$4];
        while (true) {
            let [_indx$1, _name$2, _brui$3, _vars$4] = arg;
            var R = (() => {
                var self = _indx$1;
                if (self === 0n) {
                    var self = _brui$3;
                    if (self === 0n) {
                        var $8377 = _name$2;
                        var $8376 = $8377;
                    } else {
                        var $8378 = (self - 1n);
                        var $8379 = (_name$2 + ("^" + Nat$show$(_brui$3)));
                        var $8376 = $8379;
                    };
                    return $8376;
                } else {
                    var $8380 = (self - 1n);
                    var self = _vars$4;
                    switch (self._) {
                        case 'List.nil':
                            var $8382 = "unbound";
                            var $8381 = $8382;
                            break;
                        case 'List.cons':
                            var $8383 = self.head;
                            var $8384 = self.tail;
                            var self = (_name$2 === $8383);
                            if (self) {
                                var $8386 = Nat$succ$(_brui$3);
                                var _brui$8 = $8386;
                            } else {
                                var $8387 = _brui$3;
                                var _brui$8 = $8387;
                            };
                            var $8385 = Fm$Core$var_name$($8380, _name$2, _brui$8, $8384);
                            var $8381 = $8385;
                            break;
                    };
                    return $8381;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Core$var_name = x0 => x1 => x2 => x3 => Fm$Core$var_name$(x0, x1, x2, x3);

    function Fm$Name$show$(_name$1) {
        var $8388 = _name$1;
        return $8388;
    };
    const Fm$Name$show = x0 => Fm$Name$show$(x0);

    function Bits$to_nat$(_b$1) {
        var self = _b$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $8390 = 0n;
                var $8389 = $8390;
                break;
            case 'o':
                var $8391 = self.slice(0, -1);
                var $8392 = (2n * Bits$to_nat$($8391));
                var $8389 = $8392;
                break;
            case 'i':
                var $8393 = self.slice(0, -1);
                var $8394 = Nat$succ$((2n * Bits$to_nat$($8393)));
                var $8389 = $8394;
                break;
        };
        return $8389;
    };
    const Bits$to_nat = x0 => Bits$to_nat$(x0);

    function U16$show_hex$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $8396 = u16_to_word(self);
                var $8397 = Nat$to_string_base$(16n, Bits$to_nat$(Word$to_bits$($8396)));
                var $8395 = $8397;
                break;
        };
        return $8395;
    };
    const U16$show_hex = x0 => U16$show_hex$(x0);

    function Fm$escape$char$(_chr$1) {
        var self = (_chr$1 === Fm$backslash);
        if (self) {
            var $8399 = String$cons$(Fm$backslash, String$cons$(_chr$1, String$nil));
            var $8398 = $8399;
        } else {
            var self = (_chr$1 === 34);
            if (self) {
                var $8401 = String$cons$(Fm$backslash, String$cons$(_chr$1, String$nil));
                var $8400 = $8401;
            } else {
                var self = (_chr$1 === 39);
                if (self) {
                    var $8403 = String$cons$(Fm$backslash, String$cons$(_chr$1, String$nil));
                    var $8402 = $8403;
                } else {
                    var self = U16$btw$(32, _chr$1, 126);
                    if (self) {
                        var $8405 = String$cons$(_chr$1, String$nil);
                        var $8404 = $8405;
                    } else {
                        var $8406 = String$flatten$(List$cons$(String$cons$(Fm$backslash, String$nil), List$cons$("u{", List$cons$(U16$show_hex$(_chr$1), List$cons$("}", List$cons$(String$nil, List$nil))))));
                        var $8404 = $8406;
                    };
                    var $8402 = $8404;
                };
                var $8400 = $8402;
            };
            var $8398 = $8400;
        };
        return $8398;
    };
    const Fm$escape$char = x0 => Fm$escape$char$(x0);

    function Fm$escape$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $8408 = String$nil;
            var $8407 = $8408;
        } else {
            var $8409 = self.charCodeAt(0);
            var $8410 = self.slice(1);
            var _head$4 = Fm$escape$char$($8409);
            var _tail$5 = Fm$escape$($8410);
            var $8411 = (_head$4 + _tail$5);
            var $8407 = $8411;
        };
        return $8407;
    };
    const Fm$escape = x0 => Fm$escape$(x0);

    function Fm$Core$show$(_term$1, _indx$2, _vars$3) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8413 = self.name;
                var $8414 = self.indx;
                var $8415 = Fm$Core$var_name$(Nat$pred$((_indx$2 - $8414 <= 0n ? 0n : _indx$2 - $8414)), $8413, 0n, _vars$3);
                var $8412 = $8415;
                break;
            case 'Fm.Term.ref':
                var $8416 = self.name;
                var $8417 = Fm$Name$show$($8416);
                var $8412 = $8417;
                break;
            case 'Fm.Term.typ':
                var $8418 = "*";
                var $8412 = $8418;
                break;
            case 'Fm.Term.all':
                var $8419 = self.eras;
                var $8420 = self.self;
                var $8421 = self.name;
                var $8422 = self.xtyp;
                var $8423 = self.body;
                var _eras$9 = $8419;
                var self = _eras$9;
                if (self) {
                    var $8425 = "%";
                    var _init$10 = $8425;
                } else {
                    var $8426 = "@";
                    var _init$10 = $8426;
                };
                var _self$11 = Fm$Name$show$($8420);
                var _name$12 = Fm$Name$show$($8421);
                var _xtyp$13 = Fm$Core$show$($8422, _indx$2, _vars$3);
                var _body$14 = Fm$Core$show$($8423(Fm$Term$var$($8420, _indx$2))(Fm$Term$var$($8421, Nat$succ$(_indx$2))), Nat$succ$(Nat$succ$(_indx$2)), List$cons$($8421, List$cons$($8420, _vars$3)));
                var $8424 = String$flatten$(List$cons$(_init$10, List$cons$(_self$11, List$cons$("(", List$cons$(_name$12, List$cons$(":", List$cons$(_xtyp$13, List$cons$(") ", List$cons$(_body$14, List$nil)))))))));
                var $8412 = $8424;
                break;
            case 'Fm.Term.lam':
                var $8427 = self.name;
                var $8428 = self.body;
                var _name$6 = Fm$Name$show$($8427);
                var _body$7 = Fm$Core$show$($8428(Fm$Term$var$($8427, _indx$2)), Nat$succ$(_indx$2), List$cons$($8427, _vars$3));
                var $8429 = String$flatten$(List$cons$("#", List$cons$(_name$6, List$cons$(" ", List$cons$(_body$7, List$nil)))));
                var $8412 = $8429;
                break;
            case 'Fm.Term.app':
                var $8430 = self.func;
                var $8431 = self.argm;
                var _func$6 = Fm$Core$show$($8430, _indx$2, _vars$3);
                var _argm$7 = Fm$Core$show$($8431, _indx$2, _vars$3);
                var $8432 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(" ", List$cons$(_argm$7, List$cons$(")", List$nil))))));
                var $8412 = $8432;
                break;
            case 'Fm.Term.let':
                var $8433 = self.name;
                var $8434 = self.expr;
                var $8435 = self.body;
                var _name$7 = Fm$Name$show$($8433);
                var _expr$8 = Fm$Core$show$($8434, _indx$2, _vars$3);
                var _body$9 = Fm$Core$show$($8435(Fm$Term$var$($8433, _indx$2)), Nat$succ$(_indx$2), List$cons$($8433, _vars$3));
                var $8436 = String$flatten$(List$cons$("!", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $8412 = $8436;
                break;
            case 'Fm.Term.def':
                var $8437 = self.name;
                var $8438 = self.expr;
                var $8439 = self.body;
                var _name$7 = Fm$Name$show$($8437);
                var _expr$8 = Fm$Core$show$($8438, _indx$2, _vars$3);
                var _body$9 = Fm$Core$show$($8439(Fm$Term$var$($8437, _indx$2)), Nat$succ$(_indx$2), List$cons$($8437, _vars$3));
                var $8440 = String$flatten$(List$cons$("$", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $8412 = $8440;
                break;
            case 'Fm.Term.ann':
                var $8441 = self.done;
                var $8442 = self.term;
                var $8443 = self.type;
                var _term$7 = Fm$Core$show$($8442, _indx$2, _vars$3);
                var _type$8 = Fm$Core$show$($8443, _indx$2, _vars$3);
                var $8444 = String$flatten$(List$cons$("{", List$cons$(_term$7, List$cons$(":", List$cons$(_type$8, List$cons$("}", List$nil))))));
                var $8412 = $8444;
                break;
            case 'Fm.Term.gol':
                var $8445 = self.name;
                var $8446 = self.dref;
                var $8447 = self.verb;
                var $8448 = "<GOL>";
                var $8412 = $8448;
                break;
            case 'Fm.Term.hol':
                var $8449 = self.path;
                var $8450 = "<HOL>";
                var $8412 = $8450;
                break;
            case 'Fm.Term.nat':
                var $8451 = self.natx;
                var $8452 = String$flatten$(List$cons$("+", List$cons$(Nat$show$($8451), List$nil)));
                var $8412 = $8452;
                break;
            case 'Fm.Term.chr':
                var $8453 = self.chrx;
                var $8454 = String$flatten$(List$cons$("\'", List$cons$(Fm$escape$char$($8453), List$cons$("\'", List$nil))));
                var $8412 = $8454;
                break;
            case 'Fm.Term.str':
                var $8455 = self.strx;
                var $8456 = String$flatten$(List$cons$("\"", List$cons$(Fm$escape$($8455), List$cons$("\"", List$nil))));
                var $8412 = $8456;
                break;
            case 'Fm.Term.cse':
                var $8457 = self.path;
                var $8458 = self.expr;
                var $8459 = self.name;
                var $8460 = self.with;
                var $8461 = self.cses;
                var $8462 = self.moti;
                var $8463 = "<CSE>";
                var $8412 = $8463;
                break;
            case 'Fm.Term.ori':
                var $8464 = self.orig;
                var $8465 = self.expr;
                var $8466 = Fm$Core$show$($8465, _indx$2, _vars$3);
                var $8412 = $8466;
                break;
        };
        return $8412;
    };
    const Fm$Core$show = x0 => x1 => x2 => Fm$Core$show$(x0, x1, x2);

    function Fm$Defs$core$(_defs$1) {
        var _result$2 = "";
        var _result$3 = (() => {
            var $8469 = _result$2;
            var $8470 = Map$values$(_defs$1);
            let _result$4 = $8469;
            let _defn$3;
            while ($8470._ === 'List.cons') {
                _defn$3 = $8470.head;
                var self = _defn$3;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $8471 = self.file;
                        var $8472 = self.code;
                        var $8473 = self.name;
                        var $8474 = self.term;
                        var $8475 = self.type;
                        var $8476 = self.stat;
                        var self = $8476;
                        switch (self._) {
                            case 'Fm.Status.init':
                                var $8478 = _result$4;
                                var $8477 = $8478;
                                break;
                            case 'Fm.Status.wait':
                                var $8479 = _result$4;
                                var $8477 = $8479;
                                break;
                            case 'Fm.Status.done':
                                var _name$11 = $8473;
                                var _term$12 = Fm$Core$show$($8474, 0n, List$nil);
                                var _type$13 = Fm$Core$show$($8475, 0n, List$nil);
                                var $8480 = String$flatten$(List$cons$(_result$4, List$cons$(_name$11, List$cons$(" : ", List$cons$(_type$13, List$cons$(" = ", List$cons$(_term$12, List$cons$(";\u{a}", List$nil))))))));
                                var $8477 = $8480;
                                break;
                            case 'Fm.Status.fail':
                                var $8481 = self.errors;
                                var $8482 = _result$4;
                                var $8477 = $8482;
                                break;
                        };
                        var $8469 = $8477;
                        break;
                };
                _result$4 = $8469;
                $8470 = $8470.tail;
            }
            return _result$4;
        })();
        var $8467 = _result$3;
        return $8467;
    };
    const Fm$Defs$core = x0 => Fm$Defs$core$(x0);

    function Fm$to_core$io$one$(_name$1) {
        var $8483 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8484 = _m$bind$2;
            return $8484;
        }))(Fm$Synth$one$(_name$1, Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.none':
                    var $8486 = Map$new;
                    var _defs$3 = $8486;
                    break;
                case 'Maybe.some':
                    var $8487 = self.value;
                    var $8488 = $8487;
                    var _defs$3 = $8488;
                    break;
            };
            var _defs$4 = Map$map$((_defn$4 => {
                var self = _defn$4;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $8490 = self.file;
                        var $8491 = self.code;
                        var $8492 = self.name;
                        var $8493 = self.term;
                        var $8494 = self.type;
                        var $8495 = self.stat;
                        var _term$11 = Fm$Term$inline$($8493, _defs$3);
                        var _type$12 = Fm$Term$inline$($8494, _defs$3);
                        var $8496 = Fm$Def$new$($8490, $8491, $8492, _term$11, _type$12, $8495);
                        var $8489 = $8496;
                        break;
                };
                return $8489;
            }), _defs$3);
            var $8485 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                var $8497 = _m$pure$6;
                return $8497;
            }))(Fm$Defs$core$(_defs$4));
            return $8485;
        }));
        return $8483;
    };
    const Fm$to_core$io$one = x0 => Fm$to_core$io$one$(x0);

    function IO$print$(_text$1) {
        var $8498 = IO$ask$("print", _text$1, (_skip$2 => {
            var $8499 = IO$end$(Unit$new);
            return $8499;
        }));
        return $8498;
    };
    const IO$print = x0 => IO$print$(x0);

    function Maybe$bind$(_m$3, _f$4) {
        var self = _m$3;
        switch (self._) {
            case 'Maybe.none':
                var $8501 = Maybe$none;
                var $8500 = $8501;
                break;
            case 'Maybe.some':
                var $8502 = self.value;
                var $8503 = _f$4($8502);
                var $8500 = $8503;
                break;
        };
        return $8500;
    };
    const Maybe$bind = x0 => x1 => Maybe$bind$(x0, x1);

    function Maybe$monad$(_new$2) {
        var $8504 = _new$2(Maybe$bind)(Maybe$some);
        return $8504;
    };
    const Maybe$monad = x0 => Maybe$monad$(x0);

    function Fm$Term$show$as_nat$go$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8506 = self.name;
                var $8507 = self.indx;
                var $8508 = Maybe$none;
                var $8505 = $8508;
                break;
            case 'Fm.Term.ref':
                var $8509 = self.name;
                var self = ($8509 === "Nat.zero");
                if (self) {
                    var $8511 = Maybe$some$(0n);
                    var $8510 = $8511;
                } else {
                    var $8512 = Maybe$none;
                    var $8510 = $8512;
                };
                var $8505 = $8510;
                break;
            case 'Fm.Term.typ':
                var $8513 = Maybe$none;
                var $8505 = $8513;
                break;
            case 'Fm.Term.all':
                var $8514 = self.eras;
                var $8515 = self.self;
                var $8516 = self.name;
                var $8517 = self.xtyp;
                var $8518 = self.body;
                var $8519 = Maybe$none;
                var $8505 = $8519;
                break;
            case 'Fm.Term.lam':
                var $8520 = self.name;
                var $8521 = self.body;
                var $8522 = Maybe$none;
                var $8505 = $8522;
                break;
            case 'Fm.Term.app':
                var $8523 = self.func;
                var $8524 = self.argm;
                var self = $8523;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $8526 = self.name;
                        var $8527 = self.indx;
                        var $8528 = Maybe$none;
                        var $8525 = $8528;
                        break;
                    case 'Fm.Term.ref':
                        var $8529 = self.name;
                        var self = ($8529 === "Nat.succ");
                        if (self) {
                            var $8531 = Maybe$monad$((_m$bind$5 => _m$pure$6 => {
                                var $8532 = _m$bind$5;
                                return $8532;
                            }))(Fm$Term$show$as_nat$go$($8524))((_pred$5 => {
                                var $8533 = Maybe$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $8534 = _m$pure$7;
                                    return $8534;
                                }))(Nat$succ$(_pred$5));
                                return $8533;
                            }));
                            var $8530 = $8531;
                        } else {
                            var $8535 = Maybe$none;
                            var $8530 = $8535;
                        };
                        var $8525 = $8530;
                        break;
                    case 'Fm.Term.typ':
                        var $8536 = Maybe$none;
                        var $8525 = $8536;
                        break;
                    case 'Fm.Term.all':
                        var $8537 = self.eras;
                        var $8538 = self.self;
                        var $8539 = self.name;
                        var $8540 = self.xtyp;
                        var $8541 = self.body;
                        var $8542 = Maybe$none;
                        var $8525 = $8542;
                        break;
                    case 'Fm.Term.lam':
                        var $8543 = self.name;
                        var $8544 = self.body;
                        var $8545 = Maybe$none;
                        var $8525 = $8545;
                        break;
                    case 'Fm.Term.app':
                        var $8546 = self.func;
                        var $8547 = self.argm;
                        var $8548 = Maybe$none;
                        var $8525 = $8548;
                        break;
                    case 'Fm.Term.let':
                        var $8549 = self.name;
                        var $8550 = self.expr;
                        var $8551 = self.body;
                        var $8552 = Maybe$none;
                        var $8525 = $8552;
                        break;
                    case 'Fm.Term.def':
                        var $8553 = self.name;
                        var $8554 = self.expr;
                        var $8555 = self.body;
                        var $8556 = Maybe$none;
                        var $8525 = $8556;
                        break;
                    case 'Fm.Term.ann':
                        var $8557 = self.done;
                        var $8558 = self.term;
                        var $8559 = self.type;
                        var $8560 = Maybe$none;
                        var $8525 = $8560;
                        break;
                    case 'Fm.Term.gol':
                        var $8561 = self.name;
                        var $8562 = self.dref;
                        var $8563 = self.verb;
                        var $8564 = Maybe$none;
                        var $8525 = $8564;
                        break;
                    case 'Fm.Term.hol':
                        var $8565 = self.path;
                        var $8566 = Maybe$none;
                        var $8525 = $8566;
                        break;
                    case 'Fm.Term.nat':
                        var $8567 = self.natx;
                        var $8568 = Maybe$none;
                        var $8525 = $8568;
                        break;
                    case 'Fm.Term.chr':
                        var $8569 = self.chrx;
                        var $8570 = Maybe$none;
                        var $8525 = $8570;
                        break;
                    case 'Fm.Term.str':
                        var $8571 = self.strx;
                        var $8572 = Maybe$none;
                        var $8525 = $8572;
                        break;
                    case 'Fm.Term.cse':
                        var $8573 = self.path;
                        var $8574 = self.expr;
                        var $8575 = self.name;
                        var $8576 = self.with;
                        var $8577 = self.cses;
                        var $8578 = self.moti;
                        var $8579 = Maybe$none;
                        var $8525 = $8579;
                        break;
                    case 'Fm.Term.ori':
                        var $8580 = self.orig;
                        var $8581 = self.expr;
                        var $8582 = Maybe$none;
                        var $8525 = $8582;
                        break;
                };
                var $8505 = $8525;
                break;
            case 'Fm.Term.let':
                var $8583 = self.name;
                var $8584 = self.expr;
                var $8585 = self.body;
                var $8586 = Maybe$none;
                var $8505 = $8586;
                break;
            case 'Fm.Term.def':
                var $8587 = self.name;
                var $8588 = self.expr;
                var $8589 = self.body;
                var $8590 = Maybe$none;
                var $8505 = $8590;
                break;
            case 'Fm.Term.ann':
                var $8591 = self.done;
                var $8592 = self.term;
                var $8593 = self.type;
                var $8594 = Maybe$none;
                var $8505 = $8594;
                break;
            case 'Fm.Term.gol':
                var $8595 = self.name;
                var $8596 = self.dref;
                var $8597 = self.verb;
                var $8598 = Maybe$none;
                var $8505 = $8598;
                break;
            case 'Fm.Term.hol':
                var $8599 = self.path;
                var $8600 = Maybe$none;
                var $8505 = $8600;
                break;
            case 'Fm.Term.nat':
                var $8601 = self.natx;
                var $8602 = Maybe$none;
                var $8505 = $8602;
                break;
            case 'Fm.Term.chr':
                var $8603 = self.chrx;
                var $8604 = Maybe$none;
                var $8505 = $8604;
                break;
            case 'Fm.Term.str':
                var $8605 = self.strx;
                var $8606 = Maybe$none;
                var $8505 = $8606;
                break;
            case 'Fm.Term.cse':
                var $8607 = self.path;
                var $8608 = self.expr;
                var $8609 = self.name;
                var $8610 = self.with;
                var $8611 = self.cses;
                var $8612 = self.moti;
                var $8613 = Maybe$none;
                var $8505 = $8613;
                break;
            case 'Fm.Term.ori':
                var $8614 = self.orig;
                var $8615 = self.expr;
                var $8616 = Maybe$none;
                var $8505 = $8616;
                break;
        };
        return $8505;
    };
    const Fm$Term$show$as_nat$go = x0 => Fm$Term$show$as_nat$go$(x0);

    function Fm$Term$show$as_nat$(_term$1) {
        var $8617 = Maybe$mapped$(Fm$Term$show$as_nat$go$(_term$1), Nat$show);
        return $8617;
    };
    const Fm$Term$show$as_nat = x0 => Fm$Term$show$as_nat$(x0);

    function Fm$Term$show$is_ref$(_term$1, _name$2) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8619 = self.name;
                var $8620 = self.indx;
                var $8621 = Bool$false;
                var $8618 = $8621;
                break;
            case 'Fm.Term.ref':
                var $8622 = self.name;
                var $8623 = (_name$2 === $8622);
                var $8618 = $8623;
                break;
            case 'Fm.Term.typ':
                var $8624 = Bool$false;
                var $8618 = $8624;
                break;
            case 'Fm.Term.all':
                var $8625 = self.eras;
                var $8626 = self.self;
                var $8627 = self.name;
                var $8628 = self.xtyp;
                var $8629 = self.body;
                var $8630 = Bool$false;
                var $8618 = $8630;
                break;
            case 'Fm.Term.lam':
                var $8631 = self.name;
                var $8632 = self.body;
                var $8633 = Bool$false;
                var $8618 = $8633;
                break;
            case 'Fm.Term.app':
                var $8634 = self.func;
                var $8635 = self.argm;
                var $8636 = Bool$false;
                var $8618 = $8636;
                break;
            case 'Fm.Term.let':
                var $8637 = self.name;
                var $8638 = self.expr;
                var $8639 = self.body;
                var $8640 = Bool$false;
                var $8618 = $8640;
                break;
            case 'Fm.Term.def':
                var $8641 = self.name;
                var $8642 = self.expr;
                var $8643 = self.body;
                var $8644 = Bool$false;
                var $8618 = $8644;
                break;
            case 'Fm.Term.ann':
                var $8645 = self.done;
                var $8646 = self.term;
                var $8647 = self.type;
                var $8648 = Bool$false;
                var $8618 = $8648;
                break;
            case 'Fm.Term.gol':
                var $8649 = self.name;
                var $8650 = self.dref;
                var $8651 = self.verb;
                var $8652 = Bool$false;
                var $8618 = $8652;
                break;
            case 'Fm.Term.hol':
                var $8653 = self.path;
                var $8654 = Bool$false;
                var $8618 = $8654;
                break;
            case 'Fm.Term.nat':
                var $8655 = self.natx;
                var $8656 = Bool$false;
                var $8618 = $8656;
                break;
            case 'Fm.Term.chr':
                var $8657 = self.chrx;
                var $8658 = Bool$false;
                var $8618 = $8658;
                break;
            case 'Fm.Term.str':
                var $8659 = self.strx;
                var $8660 = Bool$false;
                var $8618 = $8660;
                break;
            case 'Fm.Term.cse':
                var $8661 = self.path;
                var $8662 = self.expr;
                var $8663 = self.name;
                var $8664 = self.with;
                var $8665 = self.cses;
                var $8666 = self.moti;
                var $8667 = Bool$false;
                var $8618 = $8667;
                break;
            case 'Fm.Term.ori':
                var $8668 = self.orig;
                var $8669 = self.expr;
                var $8670 = Bool$false;
                var $8618 = $8670;
                break;
        };
        return $8618;
    };
    const Fm$Term$show$is_ref = x0 => x1 => Fm$Term$show$is_ref$(x0, x1);

    function Fm$Term$show$app$done$(_term$1, _path$2, _args$3) {
        var _arity$4 = (list_length(_args$3));
        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$4 === 3n));
        if (self) {
            var _func$5 = Fm$Term$show$go$(_term$1, _path$2);
            var _eq_lft$6 = Maybe$default$("?", List$at$(1n, _args$3));
            var _eq_rgt$7 = Maybe$default$("?", List$at$(2n, _args$3));
            var $8672 = String$flatten$(List$cons$(_eq_lft$6, List$cons$(" == ", List$cons$(_eq_rgt$7, List$nil))));
            var $8671 = $8672;
        } else {
            var _func$5 = Fm$Term$show$go$(_term$1, _path$2);
            var self = _func$5;
            if (self.length === 0) {
                var $8674 = Bool$false;
                var _wrap$6 = $8674;
            } else {
                var $8675 = self.charCodeAt(0);
                var $8676 = self.slice(1);
                var $8677 = ($8675 === 40);
                var _wrap$6 = $8677;
            };
            var _args$7 = String$join$(",", _args$3);
            var self = _wrap$6;
            if (self) {
                var $8678 = String$flatten$(List$cons$("(", List$cons$(_func$5, List$cons$(")", List$nil))));
                var _func$8 = $8678;
            } else {
                var $8679 = _func$5;
                var _func$8 = $8679;
            };
            var $8673 = String$flatten$(List$cons$(_func$8, List$cons$("(", List$cons$(_args$7, List$cons$(")", List$nil)))));
            var $8671 = $8673;
        };
        return $8671;
    };
    const Fm$Term$show$app$done = x0 => x1 => x2 => Fm$Term$show$app$done$(x0, x1, x2);

    function Fm$Term$show$app$(_term$1, _path$2, _args$3) {
        var Fm$Term$show$app$ = (_term$1, _path$2, _args$3) => ({
            ctr: 'TCO',
            arg: [_term$1, _path$2, _args$3]
        });
        var Fm$Term$show$app = _term$1 => _path$2 => _args$3 => Fm$Term$show$app$(_term$1, _path$2, _args$3);
        var arg = [_term$1, _path$2, _args$3];
        while (true) {
            let [_term$1, _path$2, _args$3] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $8680 = self.name;
                        var $8681 = self.indx;
                        var $8682 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8682;
                    case 'Fm.Term.ref':
                        var $8683 = self.name;
                        var $8684 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8684;
                    case 'Fm.Term.typ':
                        var $8685 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8685;
                    case 'Fm.Term.all':
                        var $8686 = self.eras;
                        var $8687 = self.self;
                        var $8688 = self.name;
                        var $8689 = self.xtyp;
                        var $8690 = self.body;
                        var $8691 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8691;
                    case 'Fm.Term.lam':
                        var $8692 = self.name;
                        var $8693 = self.body;
                        var $8694 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8694;
                    case 'Fm.Term.app':
                        var $8695 = self.func;
                        var $8696 = self.argm;
                        var $8697 = Fm$Term$show$app$($8695, Fm$MPath$o$(_path$2), List$cons$(Fm$Term$show$go$($8696, Fm$MPath$i$(_path$2)), _args$3));
                        return $8697;
                    case 'Fm.Term.let':
                        var $8698 = self.name;
                        var $8699 = self.expr;
                        var $8700 = self.body;
                        var $8701 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8701;
                    case 'Fm.Term.def':
                        var $8702 = self.name;
                        var $8703 = self.expr;
                        var $8704 = self.body;
                        var $8705 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8705;
                    case 'Fm.Term.ann':
                        var $8706 = self.done;
                        var $8707 = self.term;
                        var $8708 = self.type;
                        var $8709 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8709;
                    case 'Fm.Term.gol':
                        var $8710 = self.name;
                        var $8711 = self.dref;
                        var $8712 = self.verb;
                        var $8713 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8713;
                    case 'Fm.Term.hol':
                        var $8714 = self.path;
                        var $8715 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8715;
                    case 'Fm.Term.nat':
                        var $8716 = self.natx;
                        var $8717 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8717;
                    case 'Fm.Term.chr':
                        var $8718 = self.chrx;
                        var $8719 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8719;
                    case 'Fm.Term.str':
                        var $8720 = self.strx;
                        var $8721 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8721;
                    case 'Fm.Term.cse':
                        var $8722 = self.path;
                        var $8723 = self.expr;
                        var $8724 = self.name;
                        var $8725 = self.with;
                        var $8726 = self.cses;
                        var $8727 = self.moti;
                        var $8728 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8728;
                    case 'Fm.Term.ori':
                        var $8729 = self.orig;
                        var $8730 = self.expr;
                        var $8731 = Fm$Term$show$app$($8730, _path$2, _args$3);
                        return $8731;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Term$show$app = x0 => x1 => x2 => Fm$Term$show$app$(x0, x1, x2);

    function Map$to_list$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'Map.new':
                var $8733 = _list$4;
                var $8732 = $8733;
                break;
            case 'Map.tie':
                var $8734 = self.val;
                var $8735 = self.lft;
                var $8736 = self.rgt;
                var self = $8734;
                switch (self._) {
                    case 'Maybe.none':
                        var $8738 = _list$4;
                        var _list0$8 = $8738;
                        break;
                    case 'Maybe.some':
                        var $8739 = self.value;
                        var $8740 = List$cons$(Pair$new$(Bits$reverse$(_key$3), $8739), _list$4);
                        var _list0$8 = $8740;
                        break;
                };
                var _list1$9 = Map$to_list$go$($8735, (_key$3 + '0'), _list0$8);
                var _list2$10 = Map$to_list$go$($8736, (_key$3 + '1'), _list1$9);
                var $8737 = _list2$10;
                var $8732 = $8737;
                break;
        };
        return $8732;
    };
    const Map$to_list$go = x0 => x1 => x2 => Map$to_list$go$(x0, x1, x2);

    function Map$to_list$(_xs$2) {
        var $8741 = List$reverse$(Map$to_list$go$(_xs$2, Bits$e, List$nil));
        return $8741;
    };
    const Map$to_list = x0 => Map$to_list$(x0);

    function Bits$chunks_of$go$(_len$1, _bits$2, _need$3, _chunk$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $8743 = List$cons$(Bits$reverse$(_chunk$4), List$nil);
                var $8742 = $8743;
                break;
            case 'o':
                var $8744 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $8746 = List$cons$(_head$6, _tail$7);
                    var $8745 = $8746;
                } else {
                    var $8747 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '0');
                    var $8748 = Bits$chunks_of$go$(_len$1, $8744, $8747, _chunk$7);
                    var $8745 = $8748;
                };
                var $8742 = $8745;
                break;
            case 'i':
                var $8749 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $8751 = List$cons$(_head$6, _tail$7);
                    var $8750 = $8751;
                } else {
                    var $8752 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '1');
                    var $8753 = Bits$chunks_of$go$(_len$1, $8749, $8752, _chunk$7);
                    var $8750 = $8753;
                };
                var $8742 = $8750;
                break;
        };
        return $8742;
    };
    const Bits$chunks_of$go = x0 => x1 => x2 => x3 => Bits$chunks_of$go$(x0, x1, x2, x3);

    function Bits$chunks_of$(_len$1, _bits$2) {
        var $8754 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
        return $8754;
    };
    const Bits$chunks_of = x0 => x1 => Bits$chunks_of$(x0, x1);

    function Word$from_bits$(_size$1, _bits$2) {
        var self = _size$1;
        if (self === 0n) {
            var $8756 = Word$e;
            var $8755 = $8756;
        } else {
            var $8757 = (self - 1n);
            var self = _bits$2;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'e':
                    var $8759 = Word$o$(Word$from_bits$($8757, Bits$e));
                    var $8758 = $8759;
                    break;
                case 'o':
                    var $8760 = self.slice(0, -1);
                    var $8761 = Word$o$(Word$from_bits$($8757, $8760));
                    var $8758 = $8761;
                    break;
                case 'i':
                    var $8762 = self.slice(0, -1);
                    var $8763 = Word$i$(Word$from_bits$($8757, $8762));
                    var $8758 = $8763;
                    break;
            };
            var $8755 = $8758;
        };
        return $8755;
    };
    const Word$from_bits = x0 => x1 => Word$from_bits$(x0, x1);

    function Fm$Name$from_bits$(_bits$1) {
        var _list$2 = Bits$chunks_of$(6n, _bits$1);
        var _name$3 = List$fold$(_list$2, String$nil, (_bts$3 => _name$4 => {
            var _u16$5 = U16$new$(Word$from_bits$(16n, Bits$reverse$(_bts$3)));
            var self = U16$btw$(0, _u16$5, 25);
            if (self) {
                var $8766 = ((_u16$5 + 65) & 0xFFFF);
                var _chr$6 = $8766;
            } else {
                var self = U16$btw$(26, _u16$5, 51);
                if (self) {
                    var $8768 = ((_u16$5 + 71) & 0xFFFF);
                    var $8767 = $8768;
                } else {
                    var self = U16$btw$(52, _u16$5, 61);
                    if (self) {
                        var $8770 = (Math.max(_u16$5 - 4, 0));
                        var $8769 = $8770;
                    } else {
                        var self = (62 === _u16$5);
                        if (self) {
                            var $8772 = 46;
                            var $8771 = $8772;
                        } else {
                            var $8773 = 95;
                            var $8771 = $8773;
                        };
                        var $8769 = $8771;
                    };
                    var $8767 = $8769;
                };
                var _chr$6 = $8767;
            };
            var $8765 = String$cons$(_chr$6, _name$4);
            return $8765;
        }));
        var $8764 = _name$3;
        return $8764;
    };
    const Fm$Name$from_bits = x0 => Fm$Name$from_bits$(x0);

    function Fm$Term$show$go$(_term$1, _path$2) {
        var self = Fm$Term$show$as_nat$(_term$1);
        switch (self._) {
            case 'Maybe.none':
                var self = _term$1;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $8776 = self.name;
                        var $8777 = self.indx;
                        var $8778 = Fm$Name$show$($8776);
                        var $8775 = $8778;
                        break;
                    case 'Fm.Term.ref':
                        var $8779 = self.name;
                        var _name$4 = Fm$Name$show$($8779);
                        var self = _path$2;
                        switch (self._) {
                            case 'Maybe.none':
                                var $8781 = _name$4;
                                var $8780 = $8781;
                                break;
                            case 'Maybe.some':
                                var $8782 = self.value;
                                var _path_val$6 = ((Bits$e + '1') + Fm$Path$to_bits$($8782));
                                var _path_str$7 = Nat$show$(Bits$to_nat$(_path_val$6));
                                var $8783 = String$flatten$(List$cons$(_name$4, List$cons$(Fm$color$("2", ("-" + _path_str$7)), List$nil)));
                                var $8780 = $8783;
                                break;
                        };
                        var $8775 = $8780;
                        break;
                    case 'Fm.Term.typ':
                        var $8784 = "Type";
                        var $8775 = $8784;
                        break;
                    case 'Fm.Term.all':
                        var $8785 = self.eras;
                        var $8786 = self.self;
                        var $8787 = self.name;
                        var $8788 = self.xtyp;
                        var $8789 = self.body;
                        var _eras$8 = $8785;
                        var _self$9 = Fm$Name$show$($8786);
                        var _name$10 = Fm$Name$show$($8787);
                        var _type$11 = Fm$Term$show$go$($8788, Fm$MPath$o$(_path$2));
                        var self = _eras$8;
                        if (self) {
                            var $8791 = "<";
                            var _open$12 = $8791;
                        } else {
                            var $8792 = "(";
                            var _open$12 = $8792;
                        };
                        var self = _eras$8;
                        if (self) {
                            var $8793 = ">";
                            var _clos$13 = $8793;
                        } else {
                            var $8794 = ")";
                            var _clos$13 = $8794;
                        };
                        var _body$14 = Fm$Term$show$go$($8789(Fm$Term$var$($8786, 0n))(Fm$Term$var$($8787, 0n)), Fm$MPath$i$(_path$2));
                        var $8790 = String$flatten$(List$cons$(_self$9, List$cons$(_open$12, List$cons$(_name$10, List$cons$(":", List$cons$(_type$11, List$cons$(_clos$13, List$cons$(" ", List$cons$(_body$14, List$nil)))))))));
                        var $8775 = $8790;
                        break;
                    case 'Fm.Term.lam':
                        var $8795 = self.name;
                        var $8796 = self.body;
                        var _name$5 = Fm$Name$show$($8795);
                        var _body$6 = Fm$Term$show$go$($8796(Fm$Term$var$($8795, 0n)), Fm$MPath$o$(_path$2));
                        var $8797 = String$flatten$(List$cons$("(", List$cons$(_name$5, List$cons$(") ", List$cons$(_body$6, List$nil)))));
                        var $8775 = $8797;
                        break;
                    case 'Fm.Term.app':
                        var $8798 = self.func;
                        var $8799 = self.argm;
                        var $8800 = Fm$Term$show$app$(_term$1, _path$2, List$nil);
                        var $8775 = $8800;
                        break;
                    case 'Fm.Term.let':
                        var $8801 = self.name;
                        var $8802 = self.expr;
                        var $8803 = self.body;
                        var _name$6 = Fm$Name$show$($8801);
                        var _expr$7 = Fm$Term$show$go$($8802, Fm$MPath$o$(_path$2));
                        var _body$8 = Fm$Term$show$go$($8803(Fm$Term$var$($8801, 0n)), Fm$MPath$i$(_path$2));
                        var $8804 = String$flatten$(List$cons$("let ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $8775 = $8804;
                        break;
                    case 'Fm.Term.def':
                        var $8805 = self.name;
                        var $8806 = self.expr;
                        var $8807 = self.body;
                        var _name$6 = Fm$Name$show$($8805);
                        var _expr$7 = Fm$Term$show$go$($8806, Fm$MPath$o$(_path$2));
                        var _body$8 = Fm$Term$show$go$($8807(Fm$Term$var$($8805, 0n)), Fm$MPath$i$(_path$2));
                        var $8808 = String$flatten$(List$cons$("def ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $8775 = $8808;
                        break;
                    case 'Fm.Term.ann':
                        var $8809 = self.done;
                        var $8810 = self.term;
                        var $8811 = self.type;
                        var _term$6 = Fm$Term$show$go$($8810, Fm$MPath$o$(_path$2));
                        var _type$7 = Fm$Term$show$go$($8811, Fm$MPath$i$(_path$2));
                        var $8812 = String$flatten$(List$cons$(_term$6, List$cons$("::", List$cons$(_type$7, List$nil))));
                        var $8775 = $8812;
                        break;
                    case 'Fm.Term.gol':
                        var $8813 = self.name;
                        var $8814 = self.dref;
                        var $8815 = self.verb;
                        var _name$6 = Fm$Name$show$($8813);
                        var $8816 = String$flatten$(List$cons$("?", List$cons$(_name$6, List$nil)));
                        var $8775 = $8816;
                        break;
                    case 'Fm.Term.hol':
                        var $8817 = self.path;
                        var $8818 = "_";
                        var $8775 = $8818;
                        break;
                    case 'Fm.Term.nat':
                        var $8819 = self.natx;
                        var $8820 = String$flatten$(List$cons$(Nat$show$($8819), List$nil));
                        var $8775 = $8820;
                        break;
                    case 'Fm.Term.chr':
                        var $8821 = self.chrx;
                        var $8822 = String$flatten$(List$cons$("\'", List$cons$(Fm$escape$char$($8821), List$cons$("\'", List$nil))));
                        var $8775 = $8822;
                        break;
                    case 'Fm.Term.str':
                        var $8823 = self.strx;
                        var $8824 = String$flatten$(List$cons$("\"", List$cons$(Fm$escape$($8823), List$cons$("\"", List$nil))));
                        var $8775 = $8824;
                        break;
                    case 'Fm.Term.cse':
                        var $8825 = self.path;
                        var $8826 = self.expr;
                        var $8827 = self.name;
                        var $8828 = self.with;
                        var $8829 = self.cses;
                        var $8830 = self.moti;
                        var _expr$9 = Fm$Term$show$go$($8826, Fm$MPath$o$(_path$2));
                        var _name$10 = Fm$Name$show$($8827);
                        var _wyth$11 = String$join$("", List$mapped$($8828, (_defn$11 => {
                            var self = _defn$11;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $8833 = self.file;
                                    var $8834 = self.code;
                                    var $8835 = self.name;
                                    var $8836 = self.term;
                                    var $8837 = self.type;
                                    var $8838 = self.stat;
                                    var _name$18 = Fm$Name$show$($8835);
                                    var _type$19 = Fm$Term$show$go$($8837, Maybe$none);
                                    var _term$20 = Fm$Term$show$go$($8836, Maybe$none);
                                    var $8839 = String$flatten$(List$cons$(_name$18, List$cons$(": ", List$cons$(_type$19, List$cons$(" = ", List$cons$(_term$20, List$cons$(";", List$nil)))))));
                                    var $8832 = $8839;
                                    break;
                            };
                            return $8832;
                        })));
                        var _cses$12 = Map$to_list$($8829);
                        var _cses$13 = String$join$("", List$mapped$(_cses$12, (_x$13 => {
                            var _name$14 = Fm$Name$from_bits$(Pair$fst$(_x$13));
                            var _term$15 = Fm$Term$show$go$(Pair$snd$(_x$13), Maybe$none);
                            var $8840 = String$flatten$(List$cons$(_name$14, List$cons$(": ", List$cons$(_term$15, List$cons$("; ", List$nil)))));
                            return $8840;
                        })));
                        var self = $8830;
                        switch (self._) {
                            case 'Maybe.none':
                                var $8841 = "";
                                var _moti$14 = $8841;
                                break;
                            case 'Maybe.some':
                                var $8842 = self.value;
                                var $8843 = String$flatten$(List$cons$(": ", List$cons$(Fm$Term$show$go$($8842, Maybe$none), List$nil)));
                                var _moti$14 = $8843;
                                break;
                        };
                        var $8831 = String$flatten$(List$cons$("case ", List$cons$(_expr$9, List$cons$(" as ", List$cons$(_name$10, List$cons$(_wyth$11, List$cons$(" { ", List$cons$(_cses$13, List$cons$("}", List$cons$(_moti$14, List$nil))))))))));
                        var $8775 = $8831;
                        break;
                    case 'Fm.Term.ori':
                        var $8844 = self.orig;
                        var $8845 = self.expr;
                        var $8846 = Fm$Term$show$go$($8845, _path$2);
                        var $8775 = $8846;
                        break;
                };
                var $8774 = $8775;
                break;
            case 'Maybe.some':
                var $8847 = self.value;
                var $8848 = $8847;
                var $8774 = $8848;
                break;
        };
        return $8774;
    };
    const Fm$Term$show$go = x0 => x1 => Fm$Term$show$go$(x0, x1);

    function Fm$Term$show$(_term$1) {
        var $8849 = Fm$Term$show$go$(_term$1, Maybe$none);
        return $8849;
    };
    const Fm$Term$show = x0 => Fm$Term$show$(x0);

    function Fm$Error$relevant$(_errors$1, _got$2) {
        var self = _errors$1;
        switch (self._) {
            case 'List.nil':
                var $8851 = List$nil;
                var $8850 = $8851;
                break;
            case 'List.cons':
                var $8852 = self.head;
                var $8853 = self.tail;
                var self = $8852;
                switch (self._) {
                    case 'Fm.Error.type_mismatch':
                        var $8855 = self.origin;
                        var $8856 = self.expected;
                        var $8857 = self.detected;
                        var $8858 = self.context;
                        var $8859 = (!_got$2);
                        var _keep$5 = $8859;
                        break;
                    case 'Fm.Error.show_goal':
                        var $8860 = self.name;
                        var $8861 = self.dref;
                        var $8862 = self.verb;
                        var $8863 = self.goal;
                        var $8864 = self.context;
                        var $8865 = Bool$true;
                        var _keep$5 = $8865;
                        break;
                    case 'Fm.Error.waiting':
                        var $8866 = self.name;
                        var $8867 = Bool$false;
                        var _keep$5 = $8867;
                        break;
                    case 'Fm.Error.indirect':
                        var $8868 = self.name;
                        var $8869 = Bool$false;
                        var _keep$5 = $8869;
                        break;
                    case 'Fm.Error.patch':
                        var $8870 = self.path;
                        var $8871 = self.term;
                        var $8872 = Bool$false;
                        var _keep$5 = $8872;
                        break;
                    case 'Fm.Error.undefined_reference':
                        var $8873 = self.origin;
                        var $8874 = self.name;
                        var $8875 = (!_got$2);
                        var _keep$5 = $8875;
                        break;
                    case 'Fm.Error.cant_infer':
                        var $8876 = self.origin;
                        var $8877 = self.term;
                        var $8878 = self.context;
                        var $8879 = (!_got$2);
                        var _keep$5 = $8879;
                        break;
                };
                var self = $8852;
                switch (self._) {
                    case 'Fm.Error.type_mismatch':
                        var $8880 = self.origin;
                        var $8881 = self.expected;
                        var $8882 = self.detected;
                        var $8883 = self.context;
                        var $8884 = Bool$true;
                        var _got$6 = $8884;
                        break;
                    case 'Fm.Error.show_goal':
                        var $8885 = self.name;
                        var $8886 = self.dref;
                        var $8887 = self.verb;
                        var $8888 = self.goal;
                        var $8889 = self.context;
                        var $8890 = _got$2;
                        var _got$6 = $8890;
                        break;
                    case 'Fm.Error.waiting':
                        var $8891 = self.name;
                        var $8892 = _got$2;
                        var _got$6 = $8892;
                        break;
                    case 'Fm.Error.indirect':
                        var $8893 = self.name;
                        var $8894 = _got$2;
                        var _got$6 = $8894;
                        break;
                    case 'Fm.Error.patch':
                        var $8895 = self.path;
                        var $8896 = self.term;
                        var $8897 = _got$2;
                        var _got$6 = $8897;
                        break;
                    case 'Fm.Error.undefined_reference':
                        var $8898 = self.origin;
                        var $8899 = self.name;
                        var $8900 = Bool$true;
                        var _got$6 = $8900;
                        break;
                    case 'Fm.Error.cant_infer':
                        var $8901 = self.origin;
                        var $8902 = self.term;
                        var $8903 = self.context;
                        var $8904 = _got$2;
                        var _got$6 = $8904;
                        break;
                };
                var _tail$7 = Fm$Error$relevant$($8853, _got$6);
                var self = _keep$5;
                if (self) {
                    var $8905 = List$cons$($8852, _tail$7);
                    var $8854 = $8905;
                } else {
                    var $8906 = _tail$7;
                    var $8854 = $8906;
                };
                var $8850 = $8854;
                break;
        };
        return $8850;
    };
    const Fm$Error$relevant = x0 => x1 => Fm$Error$relevant$(x0, x1);

    function Fm$Context$show$(_context$1) {
        var self = _context$1;
        switch (self._) {
            case 'List.nil':
                var $8908 = "";
                var $8907 = $8908;
                break;
            case 'List.cons':
                var $8909 = self.head;
                var $8910 = self.tail;
                var self = $8909;
                switch (self._) {
                    case 'Pair.new':
                        var $8912 = self.fst;
                        var $8913 = self.snd;
                        var _name$6 = Fm$Name$show$($8912);
                        var _type$7 = Fm$Term$show$(Fm$Term$normalize$($8913, Map$new));
                        var _rest$8 = Fm$Context$show$($8910);
                        var $8914 = String$flatten$(List$cons$(_rest$8, List$cons$("- ", List$cons$(_name$6, List$cons$(": ", List$cons$(_type$7, List$cons$("\u{a}", List$nil)))))));
                        var $8911 = $8914;
                        break;
                };
                var $8907 = $8911;
                break;
        };
        return $8907;
    };
    const Fm$Context$show = x0 => Fm$Context$show$(x0);

    function Fm$Term$expand_at$(_path$1, _term$2, _defs$3) {
        var $8915 = Fm$Term$patch_at$(_path$1, _term$2, (_term$4 => {
            var self = _term$4;
            switch (self._) {
                case 'Fm.Term.var':
                    var $8917 = self.name;
                    var $8918 = self.indx;
                    var $8919 = _term$4;
                    var $8916 = $8919;
                    break;
                case 'Fm.Term.ref':
                    var $8920 = self.name;
                    var self = Fm$get$($8920, _defs$3);
                    switch (self._) {
                        case 'Maybe.none':
                            var $8922 = Fm$Term$ref$($8920);
                            var $8921 = $8922;
                            break;
                        case 'Maybe.some':
                            var $8923 = self.value;
                            var self = $8923;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $8925 = self.file;
                                    var $8926 = self.code;
                                    var $8927 = self.name;
                                    var $8928 = self.term;
                                    var $8929 = self.type;
                                    var $8930 = self.stat;
                                    var $8931 = $8928;
                                    var $8924 = $8931;
                                    break;
                            };
                            var $8921 = $8924;
                            break;
                    };
                    var $8916 = $8921;
                    break;
                case 'Fm.Term.typ':
                    var $8932 = _term$4;
                    var $8916 = $8932;
                    break;
                case 'Fm.Term.all':
                    var $8933 = self.eras;
                    var $8934 = self.self;
                    var $8935 = self.name;
                    var $8936 = self.xtyp;
                    var $8937 = self.body;
                    var $8938 = _term$4;
                    var $8916 = $8938;
                    break;
                case 'Fm.Term.lam':
                    var $8939 = self.name;
                    var $8940 = self.body;
                    var $8941 = _term$4;
                    var $8916 = $8941;
                    break;
                case 'Fm.Term.app':
                    var $8942 = self.func;
                    var $8943 = self.argm;
                    var $8944 = _term$4;
                    var $8916 = $8944;
                    break;
                case 'Fm.Term.let':
                    var $8945 = self.name;
                    var $8946 = self.expr;
                    var $8947 = self.body;
                    var $8948 = _term$4;
                    var $8916 = $8948;
                    break;
                case 'Fm.Term.def':
                    var $8949 = self.name;
                    var $8950 = self.expr;
                    var $8951 = self.body;
                    var $8952 = _term$4;
                    var $8916 = $8952;
                    break;
                case 'Fm.Term.ann':
                    var $8953 = self.done;
                    var $8954 = self.term;
                    var $8955 = self.type;
                    var $8956 = _term$4;
                    var $8916 = $8956;
                    break;
                case 'Fm.Term.gol':
                    var $8957 = self.name;
                    var $8958 = self.dref;
                    var $8959 = self.verb;
                    var $8960 = _term$4;
                    var $8916 = $8960;
                    break;
                case 'Fm.Term.hol':
                    var $8961 = self.path;
                    var $8962 = _term$4;
                    var $8916 = $8962;
                    break;
                case 'Fm.Term.nat':
                    var $8963 = self.natx;
                    var $8964 = _term$4;
                    var $8916 = $8964;
                    break;
                case 'Fm.Term.chr':
                    var $8965 = self.chrx;
                    var $8966 = _term$4;
                    var $8916 = $8966;
                    break;
                case 'Fm.Term.str':
                    var $8967 = self.strx;
                    var $8968 = _term$4;
                    var $8916 = $8968;
                    break;
                case 'Fm.Term.cse':
                    var $8969 = self.path;
                    var $8970 = self.expr;
                    var $8971 = self.name;
                    var $8972 = self.with;
                    var $8973 = self.cses;
                    var $8974 = self.moti;
                    var $8975 = _term$4;
                    var $8916 = $8975;
                    break;
                case 'Fm.Term.ori':
                    var $8976 = self.orig;
                    var $8977 = self.expr;
                    var $8978 = _term$4;
                    var $8916 = $8978;
                    break;
            };
            return $8916;
        }));
        return $8915;
    };
    const Fm$Term$expand_at = x0 => x1 => x2 => Fm$Term$expand_at$(x0, x1, x2);

    function Fm$Term$expand_ct$(_term$1, _defs$2, _arity$3) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8980 = self.name;
                var $8981 = self.indx;
                var $8982 = Fm$Term$var$($8980, $8981);
                var $8979 = $8982;
                break;
            case 'Fm.Term.ref':
                var $8983 = self.name;
                var _expand$5 = Bool$false;
                var _expand$6 = ((($8983 === "Nat.succ") && (_arity$3 > 1n)) || _expand$5);
                var _expand$7 = ((($8983 === "Nat.zero") && (_arity$3 > 0n)) || _expand$6);
                var _expand$8 = ((($8983 === "Bool.true") && (_arity$3 > 0n)) || _expand$7);
                var _expand$9 = ((($8983 === "Bool.false") && (_arity$3 > 0n)) || _expand$8);
                var self = _expand$9;
                if (self) {
                    var self = Fm$get$($8983, _defs$2);
                    switch (self._) {
                        case 'Maybe.none':
                            var $8986 = Fm$Term$ref$($8983);
                            var $8985 = $8986;
                            break;
                        case 'Maybe.some':
                            var $8987 = self.value;
                            var self = $8987;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $8989 = self.file;
                                    var $8990 = self.code;
                                    var $8991 = self.name;
                                    var $8992 = self.term;
                                    var $8993 = self.type;
                                    var $8994 = self.stat;
                                    var $8995 = $8992;
                                    var $8988 = $8995;
                                    break;
                            };
                            var $8985 = $8988;
                            break;
                    };
                    var $8984 = $8985;
                } else {
                    var $8996 = Fm$Term$ref$($8983);
                    var $8984 = $8996;
                };
                var $8979 = $8984;
                break;
            case 'Fm.Term.typ':
                var $8997 = Fm$Term$typ;
                var $8979 = $8997;
                break;
            case 'Fm.Term.all':
                var $8998 = self.eras;
                var $8999 = self.self;
                var $9000 = self.name;
                var $9001 = self.xtyp;
                var $9002 = self.body;
                var $9003 = Fm$Term$all$($8998, $8999, $9000, Fm$Term$expand_ct$($9001, _defs$2, 0n), (_s$9 => _x$10 => {
                    var $9004 = Fm$Term$expand_ct$($9002(_s$9)(_x$10), _defs$2, 0n);
                    return $9004;
                }));
                var $8979 = $9003;
                break;
            case 'Fm.Term.lam':
                var $9005 = self.name;
                var $9006 = self.body;
                var $9007 = Fm$Term$lam$($9005, (_x$6 => {
                    var $9008 = Fm$Term$expand_ct$($9006(_x$6), _defs$2, 0n);
                    return $9008;
                }));
                var $8979 = $9007;
                break;
            case 'Fm.Term.app':
                var $9009 = self.func;
                var $9010 = self.argm;
                var $9011 = Fm$Term$app$(Fm$Term$expand_ct$($9009, _defs$2, Nat$succ$(_arity$3)), Fm$Term$expand_ct$($9010, _defs$2, 0n));
                var $8979 = $9011;
                break;
            case 'Fm.Term.let':
                var $9012 = self.name;
                var $9013 = self.expr;
                var $9014 = self.body;
                var $9015 = Fm$Term$let$($9012, Fm$Term$expand_ct$($9013, _defs$2, 0n), (_x$7 => {
                    var $9016 = Fm$Term$expand_ct$($9014(_x$7), _defs$2, 0n);
                    return $9016;
                }));
                var $8979 = $9015;
                break;
            case 'Fm.Term.def':
                var $9017 = self.name;
                var $9018 = self.expr;
                var $9019 = self.body;
                var $9020 = Fm$Term$def$($9017, Fm$Term$expand_ct$($9018, _defs$2, 0n), (_x$7 => {
                    var $9021 = Fm$Term$expand_ct$($9019(_x$7), _defs$2, 0n);
                    return $9021;
                }));
                var $8979 = $9020;
                break;
            case 'Fm.Term.ann':
                var $9022 = self.done;
                var $9023 = self.term;
                var $9024 = self.type;
                var $9025 = Fm$Term$ann$($9022, Fm$Term$expand_ct$($9023, _defs$2, 0n), Fm$Term$expand_ct$($9024, _defs$2, 0n));
                var $8979 = $9025;
                break;
            case 'Fm.Term.gol':
                var $9026 = self.name;
                var $9027 = self.dref;
                var $9028 = self.verb;
                var $9029 = Fm$Term$gol$($9026, $9027, $9028);
                var $8979 = $9029;
                break;
            case 'Fm.Term.hol':
                var $9030 = self.path;
                var $9031 = Fm$Term$hol$($9030);
                var $8979 = $9031;
                break;
            case 'Fm.Term.nat':
                var $9032 = self.natx;
                var $9033 = Fm$Term$nat$($9032);
                var $8979 = $9033;
                break;
            case 'Fm.Term.chr':
                var $9034 = self.chrx;
                var $9035 = Fm$Term$chr$($9034);
                var $8979 = $9035;
                break;
            case 'Fm.Term.str':
                var $9036 = self.strx;
                var $9037 = Fm$Term$str$($9036);
                var $8979 = $9037;
                break;
            case 'Fm.Term.cse':
                var $9038 = self.path;
                var $9039 = self.expr;
                var $9040 = self.name;
                var $9041 = self.with;
                var $9042 = self.cses;
                var $9043 = self.moti;
                var $9044 = _term$1;
                var $8979 = $9044;
                break;
            case 'Fm.Term.ori':
                var $9045 = self.orig;
                var $9046 = self.expr;
                var $9047 = Fm$Term$ori$($9045, $9046);
                var $8979 = $9047;
                break;
        };
        return $8979;
    };
    const Fm$Term$expand_ct = x0 => x1 => x2 => Fm$Term$expand_ct$(x0, x1, x2);

    function Fm$Term$expand$(_dref$1, _term$2, _defs$3) {
        var _term$4 = Fm$Term$normalize$(_term$2, Map$new);
        var _term$5 = (() => {
            var $9050 = _term$4;
            var $9051 = _dref$1;
            let _term$6 = $9050;
            let _path$5;
            while ($9051._ === 'List.cons') {
                _path$5 = $9051.head;
                var _term$7 = Fm$Term$expand_at$(_path$5, _term$6, _defs$3);
                var _term$8 = Fm$Term$normalize$(_term$7, Map$new);
                var _term$9 = Fm$Term$expand_ct$(_term$8, _defs$3, 0n);
                var _term$10 = Fm$Term$normalize$(_term$9, Map$new);
                var $9050 = _term$10;
                _term$6 = $9050;
                $9051 = $9051.tail;
            }
            return _term$6;
        })();
        var $9048 = _term$5;
        return $9048;
    };
    const Fm$Term$expand = x0 => x1 => x2 => Fm$Term$expand$(x0, x1, x2);

    function Fm$Error$show$(_error$1, _defs$2) {
        var self = _error$1;
        switch (self._) {
            case 'Fm.Error.type_mismatch':
                var $9053 = self.origin;
                var $9054 = self.expected;
                var $9055 = self.detected;
                var $9056 = self.context;
                var self = $9054;
                switch (self._) {
                    case 'Either.left':
                        var $9058 = self.value;
                        var $9059 = $9058;
                        var _expected$7 = $9059;
                        break;
                    case 'Either.right':
                        var $9060 = self.value;
                        var $9061 = Fm$Term$show$(Fm$Term$normalize$($9060, Map$new));
                        var _expected$7 = $9061;
                        break;
                };
                var self = $9055;
                switch (self._) {
                    case 'Either.left':
                        var $9062 = self.value;
                        var $9063 = $9062;
                        var _detected$8 = $9063;
                        break;
                    case 'Either.right':
                        var $9064 = self.value;
                        var $9065 = Fm$Term$show$(Fm$Term$normalize$($9064, Map$new));
                        var _detected$8 = $9065;
                        break;
                };
                var $9057 = String$flatten$(List$cons$("Type mismatch.\u{a}", List$cons$("- Expected: ", List$cons$(_expected$7, List$cons$("\u{a}", List$cons$("- Detected: ", List$cons$(_detected$8, List$cons$("\u{a}", List$cons$((() => {
                    var self = $9056;
                    switch (self._) {
                        case 'List.nil':
                            var $9066 = "";
                            return $9066;
                        case 'List.cons':
                            var $9067 = self.head;
                            var $9068 = self.tail;
                            var $9069 = String$flatten$(List$cons$("With context:\u{a}", List$cons$(Fm$Context$show$($9056), List$nil)));
                            return $9069;
                    };
                })(), List$nil)))))))));
                var $9052 = $9057;
                break;
            case 'Fm.Error.show_goal':
                var $9070 = self.name;
                var $9071 = self.dref;
                var $9072 = self.verb;
                var $9073 = self.goal;
                var $9074 = self.context;
                var _goal_name$8 = String$flatten$(List$cons$("Goal ?", List$cons$(Fm$Name$show$($9070), List$cons$(":\u{a}", List$nil))));
                var self = $9073;
                switch (self._) {
                    case 'Maybe.none':
                        var $9076 = "";
                        var _with_type$9 = $9076;
                        break;
                    case 'Maybe.some':
                        var $9077 = self.value;
                        var _goal$10 = Fm$Term$expand$($9071, $9077, _defs$2);
                        var $9078 = String$flatten$(List$cons$("With type: ", List$cons$((() => {
                            var self = $9072;
                            if (self) {
                                var $9079 = Fm$Term$show$go$(_goal$10, Maybe$some$((_x$11 => {
                                    var $9080 = _x$11;
                                    return $9080;
                                })));
                                return $9079;
                            } else {
                                var $9081 = Fm$Term$show$(_goal$10);
                                return $9081;
                            };
                        })(), List$cons$("\u{a}", List$nil))));
                        var _with_type$9 = $9078;
                        break;
                };
                var self = $9074;
                switch (self._) {
                    case 'List.nil':
                        var $9082 = "";
                        var _with_ctxt$10 = $9082;
                        break;
                    case 'List.cons':
                        var $9083 = self.head;
                        var $9084 = self.tail;
                        var $9085 = String$flatten$(List$cons$("With ctxt:\u{a}", List$cons$(Fm$Context$show$($9074), List$nil)));
                        var _with_ctxt$10 = $9085;
                        break;
                };
                var $9075 = String$flatten$(List$cons$(_goal_name$8, List$cons$(_with_type$9, List$cons$(_with_ctxt$10, List$nil))));
                var $9052 = $9075;
                break;
            case 'Fm.Error.waiting':
                var $9086 = self.name;
                var $9087 = String$flatten$(List$cons$("Waiting for \'", List$cons$($9086, List$cons$("\'.", List$nil))));
                var $9052 = $9087;
                break;
            case 'Fm.Error.indirect':
                var $9088 = self.name;
                var $9089 = String$flatten$(List$cons$("Error on dependency \'", List$cons$($9088, List$cons$("\'.", List$nil))));
                var $9052 = $9089;
                break;
            case 'Fm.Error.patch':
                var $9090 = self.path;
                var $9091 = self.term;
                var $9092 = String$flatten$(List$cons$("Patching: ", List$cons$(Fm$Term$show$($9091), List$nil)));
                var $9052 = $9092;
                break;
            case 'Fm.Error.undefined_reference':
                var $9093 = self.origin;
                var $9094 = self.name;
                var $9095 = String$flatten$(List$cons$("Undefined reference: ", List$cons$(Fm$Name$show$($9094), List$cons$("\u{a}", List$nil))));
                var $9052 = $9095;
                break;
            case 'Fm.Error.cant_infer':
                var $9096 = self.origin;
                var $9097 = self.term;
                var $9098 = self.context;
                var _term$6 = Fm$Term$show$($9097);
                var _context$7 = Fm$Context$show$($9098);
                var $9099 = String$flatten$(List$cons$("Can\'t infer type of: ", List$cons$(_term$6, List$cons$("\u{a}", List$cons$("With ctxt:\u{a}", List$cons$(_context$7, List$nil))))));
                var $9052 = $9099;
                break;
        };
        return $9052;
    };
    const Fm$Error$show = x0 => x1 => Fm$Error$show$(x0, x1);

    function Fm$Error$origin$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Fm.Error.type_mismatch':
                var $9101 = self.origin;
                var $9102 = self.expected;
                var $9103 = self.detected;
                var $9104 = self.context;
                var $9105 = $9101;
                var $9100 = $9105;
                break;
            case 'Fm.Error.show_goal':
                var $9106 = self.name;
                var $9107 = self.dref;
                var $9108 = self.verb;
                var $9109 = self.goal;
                var $9110 = self.context;
                var $9111 = Maybe$none;
                var $9100 = $9111;
                break;
            case 'Fm.Error.waiting':
                var $9112 = self.name;
                var $9113 = Maybe$none;
                var $9100 = $9113;
                break;
            case 'Fm.Error.indirect':
                var $9114 = self.name;
                var $9115 = Maybe$none;
                var $9100 = $9115;
                break;
            case 'Fm.Error.patch':
                var $9116 = self.path;
                var $9117 = self.term;
                var $9118 = Maybe$none;
                var $9100 = $9118;
                break;
            case 'Fm.Error.undefined_reference':
                var $9119 = self.origin;
                var $9120 = self.name;
                var $9121 = $9119;
                var $9100 = $9121;
                break;
            case 'Fm.Error.cant_infer':
                var $9122 = self.origin;
                var $9123 = self.term;
                var $9124 = self.context;
                var $9125 = $9122;
                var $9100 = $9125;
                break;
        };
        return $9100;
    };
    const Fm$Error$origin = x0 => Fm$Error$origin$(x0);

    function Fm$Defs$report$go$(_defs$1, _list$2, _errs$3, _typs$4) {
        var Fm$Defs$report$go$ = (_defs$1, _list$2, _errs$3, _typs$4) => ({
            ctr: 'TCO',
            arg: [_defs$1, _list$2, _errs$3, _typs$4]
        });
        var Fm$Defs$report$go = _defs$1 => _list$2 => _errs$3 => _typs$4 => Fm$Defs$report$go$(_defs$1, _list$2, _errs$3, _typs$4);
        var arg = [_defs$1, _list$2, _errs$3, _typs$4];
        while (true) {
            let [_defs$1, _list$2, _errs$3, _typs$4] = arg;
            var R = (() => {
                var self = _list$2;
                switch (self._) {
                    case 'List.nil':
                        var $9126 = String$flatten$(List$cons$(_typs$4, List$cons$("\u{a}", List$cons$((() => {
                            var self = _errs$3;
                            if (self.length === 0) {
                                var $9127 = "All terms check.";
                                return $9127;
                            } else {
                                var $9128 = self.charCodeAt(0);
                                var $9129 = self.slice(1);
                                var $9130 = _errs$3;
                                return $9130;
                            };
                        })(), List$nil))));
                        return $9126;
                    case 'List.cons':
                        var $9131 = self.head;
                        var $9132 = self.tail;
                        var _name$7 = $9131;
                        var self = Fm$get$(_name$7, _defs$1);
                        switch (self._) {
                            case 'Maybe.none':
                                var $9134 = Fm$Defs$report$go$(_defs$1, $9132, _errs$3, _typs$4);
                                var $9133 = $9134;
                                break;
                            case 'Maybe.some':
                                var $9135 = self.value;
                                var self = $9135;
                                switch (self._) {
                                    case 'Fm.Def.new':
                                        var $9137 = self.file;
                                        var $9138 = self.code;
                                        var $9139 = self.name;
                                        var $9140 = self.term;
                                        var $9141 = self.type;
                                        var $9142 = self.stat;
                                        var _typs$15 = String$flatten$(List$cons$(_typs$4, List$cons$(_name$7, List$cons$(": ", List$cons$(Fm$Term$show$($9141), List$cons$("\u{a}", List$nil))))));
                                        var self = $9142;
                                        switch (self._) {
                                            case 'Fm.Status.init':
                                                var $9144 = Fm$Defs$report$go$(_defs$1, $9132, _errs$3, _typs$15);
                                                var $9143 = $9144;
                                                break;
                                            case 'Fm.Status.wait':
                                                var $9145 = Fm$Defs$report$go$(_defs$1, $9132, _errs$3, _typs$15);
                                                var $9143 = $9145;
                                                break;
                                            case 'Fm.Status.done':
                                                var $9146 = Fm$Defs$report$go$(_defs$1, $9132, _errs$3, _typs$15);
                                                var $9143 = $9146;
                                                break;
                                            case 'Fm.Status.fail':
                                                var $9147 = self.errors;
                                                var self = $9147;
                                                switch (self._) {
                                                    case 'List.nil':
                                                        var $9149 = Fm$Defs$report$go$(_defs$1, $9132, _errs$3, _typs$15);
                                                        var $9148 = $9149;
                                                        break;
                                                    case 'List.cons':
                                                        var $9150 = self.head;
                                                        var $9151 = self.tail;
                                                        var _name_str$19 = Fm$Name$show$($9139);
                                                        var _rel_errs$20 = Fm$Error$relevant$($9147, Bool$false);
                                                        var self = _rel_errs$20;
                                                        switch (self._) {
                                                            case 'List.nil':
                                                                var $9153 = Fm$Defs$report$go$(_defs$1, $9132, _errs$3, _typs$15);
                                                                var $9152 = $9153;
                                                                break;
                                                            case 'List.cons':
                                                                var $9154 = self.head;
                                                                var $9155 = self.tail;
                                                                var _rel_msgs$23 = List$mapped$(_rel_errs$20, (_err$23 => {
                                                                    var $9157 = String$flatten$(List$cons$(Fm$Error$show$(_err$23, _defs$1), List$cons$((() => {
                                                                        var self = Fm$Error$origin$(_err$23);
                                                                        switch (self._) {
                                                                            case 'Maybe.none':
                                                                                var $9158 = "";
                                                                                return $9158;
                                                                            case 'Maybe.some':
                                                                                var $9159 = self.value;
                                                                                var self = $9159;
                                                                                switch (self._) {
                                                                                    case 'Fm.Origin.new':
                                                                                        var $9161 = self.file;
                                                                                        var $9162 = self.from;
                                                                                        var $9163 = self.upto;
                                                                                        var $9164 = String$flatten$(List$cons$("Inside \'", List$cons$($9137, List$cons$("\':\u{a}", List$cons$(Fm$highlight$($9138, $9162, $9163), List$cons$("\u{a}", List$nil))))));
                                                                                        var $9160 = $9164;
                                                                                        break;
                                                                                };
                                                                                return $9160;
                                                                        };
                                                                    })(), List$nil)));
                                                                    return $9157;
                                                                }));
                                                                var _errs$24 = String$flatten$(List$cons$(_errs$3, List$cons$(String$join$("\u{a}", _rel_msgs$23), List$cons$("\u{a}", List$nil))));
                                                                var $9156 = Fm$Defs$report$go$(_defs$1, $9132, _errs$24, _typs$15);
                                                                var $9152 = $9156;
                                                                break;
                                                        };
                                                        var $9148 = $9152;
                                                        break;
                                                };
                                                var $9143 = $9148;
                                                break;
                                        };
                                        var $9136 = $9143;
                                        break;
                                };
                                var $9133 = $9136;
                                break;
                        };
                        return $9133;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Defs$report$go = x0 => x1 => x2 => x3 => Fm$Defs$report$go$(x0, x1, x2, x3);

    function Fm$Defs$report$(_defs$1, _list$2) {
        var $9165 = Fm$Defs$report$go$(_defs$1, _list$2, "", "");
        return $9165;
    };
    const Fm$Defs$report = x0 => x1 => Fm$Defs$report$(x0, x1);

    function Fm$checker$io$one$(_name$1) {
        var $9166 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $9167 = _m$bind$2;
            return $9167;
        }))(Fm$Synth$one$(_name$1, Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.none':
                    var $9169 = IO$print$(Fm$Defs$report$(Map$new, List$cons$(_name$1, List$nil)));
                    var $9168 = $9169;
                    break;
                case 'Maybe.some':
                    var $9170 = self.value;
                    var $9171 = IO$print$(Fm$Defs$report$($9170, List$cons$(_name$1, List$nil)));
                    var $9168 = $9171;
                    break;
            };
            return $9168;
        }));
        return $9166;
    };
    const Fm$checker$io$one = x0 => Fm$checker$io$one$(x0);

    function Map$keys$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'Map.new':
                var $9173 = _list$4;
                var $9172 = $9173;
                break;
            case 'Map.tie':
                var $9174 = self.val;
                var $9175 = self.lft;
                var $9176 = self.rgt;
                var self = $9174;
                switch (self._) {
                    case 'Maybe.none':
                        var $9178 = _list$4;
                        var _list0$8 = $9178;
                        break;
                    case 'Maybe.some':
                        var $9179 = self.value;
                        var $9180 = List$cons$(Bits$reverse$(_key$3), _list$4);
                        var _list0$8 = $9180;
                        break;
                };
                var _list1$9 = Map$keys$go$($9175, (_key$3 + '0'), _list0$8);
                var _list2$10 = Map$keys$go$($9176, (_key$3 + '1'), _list1$9);
                var $9177 = _list2$10;
                var $9172 = $9177;
                break;
        };
        return $9172;
    };
    const Map$keys$go = x0 => x1 => x2 => Map$keys$go$(x0, x1, x2);

    function Map$keys$(_xs$2) {
        var $9181 = List$reverse$(Map$keys$go$(_xs$2, Bits$e, List$nil));
        return $9181;
    };
    const Map$keys = x0 => Map$keys$(x0);

    function Fm$Synth$many$(_names$1, _defs$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.nil':
                var $9183 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $9184 = _m$pure$4;
                    return $9184;
                }))(_defs$2);
                var $9182 = $9183;
                break;
            case 'List.cons':
                var $9185 = self.head;
                var $9186 = self.tail;
                var $9187 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $9188 = _m$bind$5;
                    return $9188;
                }))(Fm$Synth$one$($9185, _defs$2))((_new_defs$5 => {
                    var self = _new_defs$5;
                    switch (self._) {
                        case 'Maybe.none':
                            var $9190 = Fm$Synth$many$($9186, _defs$2);
                            var $9189 = $9190;
                            break;
                        case 'Maybe.some':
                            var $9191 = self.value;
                            var $9192 = Fm$Synth$many$($9186, $9191);
                            var $9189 = $9192;
                            break;
                    };
                    return $9189;
                }));
                var $9182 = $9187;
                break;
        };
        return $9182;
    };
    const Fm$Synth$many = x0 => x1 => Fm$Synth$many$(x0, x1);

    function Fm$Synth$file$(_file$1, _defs$2) {
        var $9193 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $9194 = _m$bind$3;
            return $9194;
        }))(IO$get_file$(_file$1))((_code$3 => {
            var _read$4 = Fm$Defs$read$(_file$1, _code$3, _defs$2);
            var self = _read$4;
            switch (self._) {
                case 'Either.left':
                    var $9196 = self.value;
                    var $9197 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                        var $9198 = _m$pure$7;
                        return $9198;
                    }))(Either$left$($9196));
                    var $9195 = $9197;
                    break;
                case 'Either.right':
                    var $9199 = self.value;
                    var _file_defs$6 = $9199;
                    var _file_keys$7 = Map$keys$(_file_defs$6);
                    var _file_nams$8 = List$mapped$(_file_keys$7, Fm$Name$from_bits);
                    var $9200 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                        var $9201 = _m$bind$9;
                        return $9201;
                    }))(Fm$Synth$many$(_file_nams$8, _file_defs$6))((_defs$9 => {
                        var $9202 = IO$monad$((_m$bind$10 => _m$pure$11 => {
                            var $9203 = _m$pure$11;
                            return $9203;
                        }))(Either$right$(Pair$new$(_file_nams$8, _defs$9)));
                        return $9202;
                    }));
                    var $9195 = $9200;
                    break;
            };
            return $9195;
        }));
        return $9193;
    };
    const Fm$Synth$file = x0 => x1 => Fm$Synth$file$(x0, x1);

    function Fm$checker$io$file$(_file$1) {
        var $9204 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $9205 = _m$bind$2;
            return $9205;
        }))(Fm$Synth$file$(_file$1, Map$new))((_loaded$2 => {
            var self = _loaded$2;
            switch (self._) {
                case 'Either.left':
                    var $9207 = self.value;
                    var $9208 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $9209 = _m$bind$4;
                        return $9209;
                    }))(IO$print$(String$flatten$(List$cons$("On \'", List$cons$(_file$1, List$cons$("\':", List$nil))))))((_$4 => {
                        var $9210 = IO$print$($9207);
                        return $9210;
                    }));
                    var $9206 = $9208;
                    break;
                case 'Either.right':
                    var $9211 = self.value;
                    var self = $9211;
                    switch (self._) {
                        case 'Pair.new':
                            var $9213 = self.fst;
                            var $9214 = self.snd;
                            var _nams$6 = $9213;
                            var _defs$7 = $9214;
                            var $9215 = IO$print$(Fm$Defs$report$(_defs$7, _nams$6));
                            var $9212 = $9215;
                            break;
                    };
                    var $9206 = $9212;
                    break;
            };
            return $9206;
        }));
        return $9204;
    };
    const Fm$checker$io$file = x0 => Fm$checker$io$file$(x0);

    function IO$purify$(_io$2) {
        var IO$purify$ = (_io$2) => ({
            ctr: 'TCO',
            arg: [_io$2]
        });
        var IO$purify = _io$2 => IO$purify$(_io$2);
        var arg = [_io$2];
        while (true) {
            let [_io$2] = arg;
            var R = (() => {
                var self = _io$2;
                switch (self._) {
                    case 'IO.end':
                        var $9216 = self.value;
                        var $9217 = $9216;
                        return $9217;
                    case 'IO.ask':
                        var $9218 = self.query;
                        var $9219 = self.param;
                        var $9220 = self.then;
                        var $9221 = IO$purify$($9220(""));
                        return $9221;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const IO$purify = x0 => IO$purify$(x0);

    function Fm$checker$code$(_code$1) {
        var self = Fm$Defs$read$("Main.fm", _code$1, Map$new);
        switch (self._) {
            case 'Either.left':
                var $9223 = self.value;
                var $9224 = $9223;
                var $9222 = $9224;
                break;
            case 'Either.right':
                var $9225 = self.value;
                var $9226 = IO$purify$((() => {
                    var _defs$3 = $9225;
                    var _nams$4 = List$mapped$(Map$keys$(_defs$3), Fm$Name$from_bits);
                    var $9227 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                        var $9228 = _m$bind$5;
                        return $9228;
                    }))(Fm$Synth$many$(_nams$4, _defs$3))((_defs$5 => {
                        var $9229 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                            var $9230 = _m$pure$7;
                            return $9230;
                        }))(Fm$Defs$report$(_defs$5, _nams$4));
                        return $9229;
                    }));
                    return $9227;
                })());
                var $9222 = $9226;
                break;
        };
        return $9222;
    };
    const Fm$checker$code = x0 => Fm$checker$code$(x0);

    function Fm$Term$read$(_code$1) {
        var self = Fm$Parser$term$(0n, _code$1);
        switch (self._) {
            case 'Parser.Reply.error':
                var $9232 = self.idx;
                var $9233 = self.code;
                var $9234 = self.err;
                var $9235 = Maybe$none;
                var $9231 = $9235;
                break;
            case 'Parser.Reply.value':
                var $9236 = self.idx;
                var $9237 = self.code;
                var $9238 = self.val;
                var $9239 = Maybe$some$($9238);
                var $9231 = $9239;
                break;
        };
        return $9231;
    };
    const Fm$Term$read = x0 => Fm$Term$read$(x0);

    function Fm$compute$io$one$(_name$1) {
        var $9240 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $9241 = _m$bind$2;
            return $9241;
        }))(IO$get_file$(Fm$Synth$file_of$(_name$1)))((_code$2 => {
            var self = Fm$Defs$read$((_name$1 + ".fm"), _code$2, Map$new);
            switch (self._) {
                case 'Either.left':
                    var $9243 = self.value;
                    var $9244 = IO$print$($9243);
                    var $9242 = $9244;
                    break;
                case 'Either.right':
                    var $9245 = self.value;
                    var _defs$4 = $9245;
                    var _defn$5 = Fm$get$(_name$1, _defs$4);
                    var self = _defn$5;
                    switch (self._) {
                        case 'Maybe.none':
                            var $9247 = IO$print$(("Term \'" + (_name$1 + "\' not found.")));
                            var $9246 = $9247;
                            break;
                        case 'Maybe.some':
                            var $9248 = self.value;
                            var self = $9248;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $9250 = self.file;
                                    var $9251 = self.code;
                                    var $9252 = self.name;
                                    var $9253 = self.term;
                                    var $9254 = self.type;
                                    var $9255 = self.stat;
                                    var $9256 = IO$print$(Fm$Term$show$(Fm$Term$normalize$($9253, _defs$4)));
                                    var $9249 = $9256;
                                    break;
                            };
                            var $9246 = $9249;
                            break;
                    };
                    var $9242 = $9246;
                    break;
            };
            return $9242;
        }));
        return $9240;
    };
    const Fm$compute$io$one = x0 => Fm$compute$io$one$(x0);
    const Fm = (() => {
        var __$1 = Fm$to_core$io$one;
        var __$2 = Fm$checker$io$one;
        var __$3 = Fm$checker$io$file;
        var __$4 = Fm$checker$code;
        var __$5 = Fm$Term$read;
        var __$6 = Fm$compute$io$one;
        var $9257 = IO$monad$((_m$bind$7 => _m$pure$8 => {
            var $9258 = _m$pure$8;
            return $9258;
        }))(Unit$new);
        return $9257;
    })();
    return {
        '$main$': () => run(Fm),
        'run': run,
        'IO': IO,
        'IO.ask': IO$ask,
        'IO.bind': IO$bind,
        'IO.end': IO$end,
        'IO.monad': IO$monad,
        'Maybe': Maybe,
        'Map': Map,
        'Maybe.none': Maybe$none,
        'Map.get': Map$get,
        'Bits.e': Bits$e,
        'Bool.false': Bool$false,
        'Bool.and': Bool$and,
        'Bool.true': Bool$true,
        'Cmp.as_lte': Cmp$as_lte,
        'Cmp.ltn': Cmp$ltn,
        'Cmp.gtn': Cmp$gtn,
        'Word.cmp.go': Word$cmp$go,
        'Cmp.eql': Cmp$eql,
        'Word.cmp': Word$cmp,
        'Word.lte': Word$lte,
        'Nat.succ': Nat$succ,
        'Nat.zero': Nat$zero,
        'U16.lte': U16$lte,
        'U16.btw': U16$btw,
        'U16.new': U16$new,
        'Word.e': Word$e,
        'Word': Word,
        'Word.i': Word$i,
        'Word.o': Word$o,
        'Word.subber': Word$subber,
        'Word.sub': Word$sub,
        'U16.sub': U16$sub,
        'Nat.apply': Nat$apply,
        'Word.inc': Word$inc,
        'U16.inc': U16$inc,
        'Word.zero': Word$zero,
        'U16.zero': U16$zero,
        'Nat.to_u16': Nat$to_u16,
        'Word.adder': Word$adder,
        'Word.add': Word$add,
        'U16.add': U16$add,
        'Cmp.as_eql': Cmp$as_eql,
        'Word.eql': Word$eql,
        'U16.eql': U16$eql,
        'Bits.o': Bits$o,
        'Bits.i': Bits$i,
        'Word.to_bits': Word$to_bits,
        'Word.trim': Word$trim,
        'Bits.concat': Bits$concat,
        'Bits.reverse.tco': Bits$reverse$tco,
        'Bits.reverse': Bits$reverse,
        'Fm.Name.to_bits': Fm$Name$to_bits,
        'Fm.get': Fm$get,
        'String.cons': String$cons,
        'Fm.Synth.file_of': Fm$Synth$file_of,
        'IO.get_file': IO$get_file,
        'Parser.Reply': Parser$Reply,
        'Parser.Reply.value': Parser$Reply$value,
        'Parser.is_eof': Parser$is_eof,
        'Parser.Reply.error': Parser$Reply$error,
        'Parser': Parser,
        'Maybe.some': Maybe$some,
        'Parser.ErrorAt.new': Parser$ErrorAt$new,
        'Nat.gtn': Nat$gtn,
        'Parser.ErrorAt.combine': Parser$ErrorAt$combine,
        'Parser.first_of.go': Parser$first_of$go,
        'Parser.first_of': Parser$first_of,
        'List.cons': List$cons,
        'List': List,
        'List.nil': List$nil,
        'Parser.many.go': Parser$many$go,
        'Parser.many': Parser$many,
        'Unit.new': Unit$new,
        'String.concat': String$concat,
        'String.flatten.go': String$flatten$go,
        'String.flatten': String$flatten,
        'String.nil': String$nil,
        'Parser.text.go': Parser$text$go,
        'Parser.text': Parser$text,
        'Parser.until.go': Parser$until$go,
        'Parser.until': Parser$until,
        'Parser.one': Parser$one,
        'Fm.Parser.spaces': Fm$Parser$spaces,
        'Parser.many1': Parser$many1,
        'Fm.Name.is_letter': Fm$Name$is_letter,
        'Fm.Parser.letter': Fm$Parser$letter,
        'List.fold': List$fold,
        'Fm.Parser.name1': Fm$Parser$name1,
        'Fm.Parser.text': Fm$Parser$text,
        'Parser.until1': Parser$until1,
        'Pair': Pair,
        'Parser.maybe': Parser$maybe,
        'Fm.Parser.item': Fm$Parser$item,
        'Fm.Parser.name': Fm$Parser$name,
        'Parser.get_index': Parser$get_index,
        'Fm.Parser.init': Fm$Parser$init,
        'Fm.Origin.new': Fm$Origin$new,
        'Fm.Parser.stop': Fm$Parser$stop,
        'Fm.Term.ori': Fm$Term$ori,
        'Fm.Term.typ': Fm$Term$typ,
        'Fm.Parser.type': Fm$Parser$type,
        'Fm.Term.all': Fm$Term$all,
        'Fm.Parser.forall': Fm$Parser$forall,
        'Fm.Term.lam': Fm$Term$lam,
        'Fm.Parser.make_lambda': Fm$Parser$make_lambda,
        'Fm.Parser.lambda': Fm$Parser$lambda,
        'Fm.Parser.lambda.erased': Fm$Parser$lambda$erased,
        'Fm.Parser.lambda.nameless': Fm$Parser$lambda$nameless,
        'Fm.Parser.parenthesis': Fm$Parser$parenthesis,
        'Fm.Term.ref': Fm$Term$ref,
        'Fm.Term.app': Fm$Term$app,
        'Fm.Term.hol': Fm$Term$hol,
        'Fm.Term.let': Fm$Term$let,
        'Fm.Parser.letforrange.u32': Fm$Parser$letforrange$u32,
        'Fm.Parser.letforin': Fm$Parser$letforin,
        'Fm.Parser.let': Fm$Parser$let,
        'Fm.Parser.get': Fm$Parser$get,
        'Fm.Term.def': Fm$Term$def,
        'Fm.Parser.def': Fm$Parser$def,
        'Fm.Parser.if': Fm$Parser$if,
        'List.mapped': List$mapped,
        'Pair.new': Pair$new,
        'Fm.backslash': Fm$backslash,
        'Fm.escapes': Fm$escapes,
        'Fm.Parser.char.single': Fm$Parser$char$single,
        'Fm.Term.chr': Fm$Term$chr,
        'Fm.Parser.char': Fm$Parser$char,
        'Fm.Term.str': Fm$Term$str,
        'Fm.Parser.string': Fm$Parser$string,
        'Fm.Parser.pair': Fm$Parser$pair,
        'Fm.Parser.sigma.type': Fm$Parser$sigma$type,
        'Fm.Parser.some': Fm$Parser$some,
        'Fm.Parser.apply': Fm$Parser$apply,
        'Fm.Parser.mirror': Fm$Parser$mirror,
        'Fm.Name.read': Fm$Name$read,
        'Fm.Parser.list': Fm$Parser$list,
        'Fm.Parser.log': Fm$Parser$log,
        'Fm.Parser.forrange.u32': Fm$Parser$forrange$u32,
        'Fm.Parser.forrange.u32.2': Fm$Parser$forrange$u32$2,
        'Fm.Parser.forin': Fm$Parser$forin,
        'Fm.Parser.forin.2': Fm$Parser$forin$2,
        'Fm.Parser.do.statements': Fm$Parser$do$statements,
        'Fm.Parser.do': Fm$Parser$do,
        'Fm.Term.nat': Fm$Term$nat,
        'Fm.Term.unroll_nat': Fm$Term$unroll_nat,
        'U16.to_bits': U16$to_bits,
        'Fm.Term.unroll_chr.bits': Fm$Term$unroll_chr$bits,
        'Fm.Term.unroll_chr': Fm$Term$unroll_chr,
        'Fm.Term.unroll_str': Fm$Term$unroll_str,
        'Fm.Term.reduce': Fm$Term$reduce,
        'Map.new': Map$new,
        'Fm.Def.new': Fm$Def$new,
        'Fm.Status.init': Fm$Status$init,
        'Fm.Parser.case.with': Fm$Parser$case$with,
        'Fm.Parser.case.case': Fm$Parser$case$case,
        'Map.tie': Map$tie,
        'Map.set': Map$set,
        'Map.from_list': Map$from_list,
        'Pair.fst': Pair$fst,
        'Pair.snd': Pair$snd,
        'Fm.Term.cse': Fm$Term$cse,
        'Fm.Parser.case': Fm$Parser$case,
        'Fm.set': Fm$set,
        'Fm.Parser.open': Fm$Parser$open,
        'Parser.digit': Parser$digit,
        'Nat.add': Nat$add,
        'Nat.mul': Nat$mul,
        'Nat.from_base.go': Nat$from_base$go,
        'List.reverse.go': List$reverse$go,
        'List.reverse': List$reverse,
        'Nat.from_base': Nat$from_base,
        'Parser.nat': Parser$nat,
        'Bits.tail': Bits$tail,
        'Bits.inc': Bits$inc,
        'Nat.to_bits': Nat$to_bits,
        'Maybe.to_bool': Maybe$to_bool,
        'Fm.Term.gol': Fm$Term$gol,
        'Fm.Parser.goal': Fm$Parser$goal,
        'Fm.Parser.hole': Fm$Parser$hole,
        'Fm.Parser.u8': Fm$Parser$u8,
        'Fm.Parser.u16': Fm$Parser$u16,
        'Fm.Parser.u32': Fm$Parser$u32,
        'Fm.Parser.u64': Fm$Parser$u64,
        'Fm.Parser.nat': Fm$Parser$nat,
        'String.eql': String$eql,
        'Parser.fail': Parser$fail,
        'Fm.Parser.reference': Fm$Parser$reference,
        'List.for': List$for,
        'Fm.Parser.application': Fm$Parser$application,
        'Parser.spaces': Parser$spaces,
        'Parser.spaces_text': Parser$spaces_text,
        'Fm.Parser.application.erased': Fm$Parser$application$erased,
        'Fm.Parser.arrow': Fm$Parser$arrow,
        'Fm.Parser.op': Fm$Parser$op,
        'Fm.Parser.add': Fm$Parser$add,
        'Fm.Parser.sub': Fm$Parser$sub,
        'Fm.Parser.mul': Fm$Parser$mul,
        'Fm.Parser.div': Fm$Parser$div,
        'Fm.Parser.mod': Fm$Parser$mod,
        'Fm.Parser.cons': Fm$Parser$cons,
        'Fm.Parser.concat': Fm$Parser$concat,
        'Fm.Parser.string_concat': Fm$Parser$string_concat,
        'Fm.Parser.sigma': Fm$Parser$sigma,
        'Fm.Parser.equality': Fm$Parser$equality,
        'Fm.Parser.inequality': Fm$Parser$inequality,
        'Fm.Parser.rewrite': Fm$Parser$rewrite,
        'Fm.Term.ann': Fm$Term$ann,
        'Fm.Parser.annotation': Fm$Parser$annotation,
        'Fm.Parser.application.hole': Fm$Parser$application$hole,
        'Fm.Parser.suffix': Fm$Parser$suffix,
        'Fm.Parser.term': Fm$Parser$term,
        'Fm.Parser.name_term': Fm$Parser$name_term,
        'Fm.Binder.new': Fm$Binder$new,
        'Fm.Parser.binder.homo': Fm$Parser$binder$homo,
        'List.concat': List$concat,
        'List.flatten': List$flatten,
        'Fm.Parser.binder': Fm$Parser$binder,
        'Fm.Parser.make_forall': Fm$Parser$make_forall,
        'List.at': List$at,
        'List.at_last': List$at_last,
        'Fm.Term.var': Fm$Term$var,
        'Fm.Context.get_name_skips': Fm$Context$get_name_skips,
        'Fm.Name.eql': Fm$Name$eql,
        'Fm.Context.find.go': Fm$Context$find$go,
        'Fm.Context.find': Fm$Context$find,
        'List.length': List$length,
        'Fm.Path.o': Fm$Path$o,
        'Fm.Path.i': Fm$Path$i,
        'Fm.Path.to_bits': Fm$Path$to_bits,
        'Fm.Term.bind': Fm$Term$bind,
        'Fm.Status.done': Fm$Status$done,
        'Fm.define': Fm$define,
        'Fm.Parser.file.def': Fm$Parser$file$def,
        'Maybe.default': Maybe$default,
        'Fm.Constructor.new': Fm$Constructor$new,
        'Fm.Parser.constructor': Fm$Parser$constructor,
        'Fm.Datatype.new': Fm$Datatype$new,
        'Fm.Parser.datatype': Fm$Parser$datatype,
        'Fm.Datatype.build_term.motive.go': Fm$Datatype$build_term$motive$go,
        'Fm.Datatype.build_term.motive': Fm$Datatype$build_term$motive,
        'Fm.Datatype.build_term.constructor.go': Fm$Datatype$build_term$constructor$go,
        'Fm.Datatype.build_term.constructor': Fm$Datatype$build_term$constructor,
        'Fm.Datatype.build_term.constructors.go': Fm$Datatype$build_term$constructors$go,
        'Fm.Datatype.build_term.constructors': Fm$Datatype$build_term$constructors,
        'Fm.Datatype.build_term.go': Fm$Datatype$build_term$go,
        'Fm.Datatype.build_term': Fm$Datatype$build_term,
        'Fm.Datatype.build_type.go': Fm$Datatype$build_type$go,
        'Fm.Datatype.build_type': Fm$Datatype$build_type,
        'Fm.Constructor.build_term.opt.go': Fm$Constructor$build_term$opt$go,
        'Fm.Constructor.build_term.opt': Fm$Constructor$build_term$opt,
        'Fm.Constructor.build_term.go': Fm$Constructor$build_term$go,
        'Fm.Constructor.build_term': Fm$Constructor$build_term,
        'Fm.Constructor.build_type.go': Fm$Constructor$build_type$go,
        'Fm.Constructor.build_type': Fm$Constructor$build_type,
        'Fm.Parser.file.adt': Fm$Parser$file$adt,
        'Parser.eof': Parser$eof,
        'Fm.Parser.file.end': Fm$Parser$file$end,
        'Fm.Parser.file': Fm$Parser$file,
        'Either': Either,
        'String.join.go': String$join$go,
        'String.join': String$join,
        'Fm.highlight.end': Fm$highlight$end,
        'Maybe.extract': Maybe$extract,
        'Nat.is_zero': Nat$is_zero,
        'Nat.double': Nat$double,
        'Nat.pred': Nat$pred,
        'String.reverse.go': String$reverse$go,
        'String.reverse': String$reverse,
        'String.pad_right': String$pad_right,
        'String.pad_left': String$pad_left,
        'Either.left': Either$left,
        'Either.right': Either$right,
        'Nat.sub_rem': Nat$sub_rem,
        'Nat.div_mod.go': Nat$div_mod$go,
        'Nat.div_mod': Nat$div_mod,
        'Nat.to_base.go': Nat$to_base$go,
        'Nat.to_base': Nat$to_base,
        'Nat.mod.go': Nat$mod$go,
        'Nat.mod': Nat$mod,
        'Nat.lte': Nat$lte,
        'Nat.show_digit': Nat$show_digit,
        'Nat.to_string_base': Nat$to_string_base,
        'Nat.show': Nat$show,
        'Bool.not': Bool$not,
        'Fm.color': Fm$color,
        'Nat.eql': Nat$eql,
        'List.take': List$take,
        'Fm.highlight.tc': Fm$highlight$tc,
        'Fm.highlight': Fm$highlight,
        'Fm.Defs.read': Fm$Defs$read,
        'Fm.Synth.load': Fm$Synth$load,
        'Fm.Status.wait': Fm$Status$wait,
        'Fm.Check': Fm$Check,
        'Fm.Check.result': Fm$Check$result,
        'Fm.Error.undefined_reference': Fm$Error$undefined_reference,
        'Fm.Error.waiting': Fm$Error$waiting,
        'Fm.Error.indirect': Fm$Error$indirect,
        'Maybe.mapped': Maybe$mapped,
        'Fm.MPath.o': Fm$MPath$o,
        'Fm.MPath.i': Fm$MPath$i,
        'Fm.Error.patch': Fm$Error$patch,
        'Fm.MPath.to_bits': Fm$MPath$to_bits,
        'Fm.Error.type_mismatch': Fm$Error$type_mismatch,
        'Fm.Error.show_goal': Fm$Error$show_goal,
        'Fm.Term.normalize': Fm$Term$normalize,
        'List.tail': List$tail,
        'Fm.SmartMotive.vals.cont': Fm$SmartMotive$vals$cont,
        'Fm.SmartMotive.vals': Fm$SmartMotive$vals,
        'Fm.SmartMotive.nams.cont': Fm$SmartMotive$nams$cont,
        'Fm.SmartMotive.nams': Fm$SmartMotive$nams,
        'List.zip': List$zip,
        'Nat.gte': Nat$gte,
        'Nat.sub': Nat$sub,
        'Fm.Term.serialize.name': Fm$Term$serialize$name,
        'Fm.Term.serialize': Fm$Term$serialize,
        'Bits.eql': Bits$eql,
        'Fm.Term.identical': Fm$Term$identical,
        'Fm.SmartMotive.replace': Fm$SmartMotive$replace,
        'Fm.SmartMotive.make': Fm$SmartMotive$make,
        'Fm.Term.desugar_cse.motive': Fm$Term$desugar_cse$motive,
        'String.is_empty': String$is_empty,
        'Fm.Term.desugar_cse.argument': Fm$Term$desugar_cse$argument,
        'Maybe.or': Maybe$or,
        'Fm.Term.desugar_cse.cases': Fm$Term$desugar_cse$cases,
        'Fm.Term.desugar_cse': Fm$Term$desugar_cse,
        'Fm.Error.cant_infer': Fm$Error$cant_infer,
        'Set.has': Set$has,
        'Bool.or': Bool$or,
        'Fm.Term.has_holes': Fm$Term$has_holes,
        'Fm.Term.equal.hole': Fm$Term$equal$hole,
        'Fm.Term.equal.extra_holes': Fm$Term$equal$extra_holes,
        'Set.set': Set$set,
        'Bool.eql': Bool$eql,
        'Fm.Term.equal': Fm$Term$equal,
        'Set.new': Set$new,
        'Fm.Term.check': Fm$Term$check,
        'Fm.Path.nil': Fm$Path$nil,
        'Fm.MPath.nil': Fm$MPath$nil,
        'List.is_empty': List$is_empty,
        'Fm.Term.patch_at': Fm$Term$patch_at,
        'Fm.Synth.fix': Fm$Synth$fix,
        'Fm.Status.fail': Fm$Status$fail,
        'Fm.Synth.one': Fm$Synth$one,
        'Map.map': Map$map,
        'Fm.Term.inline.names': Fm$Term$inline$names,
        'Fm.Term.inline.reduce': Fm$Term$inline$reduce,
        'Fm.Term.inline': Fm$Term$inline,
        'Map.values.go': Map$values$go,
        'Map.values': Map$values,
        'Fm.Core.var_name': Fm$Core$var_name,
        'Fm.Name.show': Fm$Name$show,
        'Bits.to_nat': Bits$to_nat,
        'U16.show_hex': U16$show_hex,
        'Fm.escape.char': Fm$escape$char,
        'Fm.escape': Fm$escape,
        'Fm.Core.show': Fm$Core$show,
        'Fm.Defs.core': Fm$Defs$core,
        'Fm.to_core.io.one': Fm$to_core$io$one,
        'IO.print': IO$print,
        'Maybe.bind': Maybe$bind,
        'Maybe.monad': Maybe$monad,
        'Fm.Term.show.as_nat.go': Fm$Term$show$as_nat$go,
        'Fm.Term.show.as_nat': Fm$Term$show$as_nat,
        'Fm.Term.show.is_ref': Fm$Term$show$is_ref,
        'Fm.Term.show.app.done': Fm$Term$show$app$done,
        'Fm.Term.show.app': Fm$Term$show$app,
        'Map.to_list.go': Map$to_list$go,
        'Map.to_list': Map$to_list,
        'Bits.chunks_of.go': Bits$chunks_of$go,
        'Bits.chunks_of': Bits$chunks_of,
        'Word.from_bits': Word$from_bits,
        'Fm.Name.from_bits': Fm$Name$from_bits,
        'Fm.Term.show.go': Fm$Term$show$go,
        'Fm.Term.show': Fm$Term$show,
        'Fm.Error.relevant': Fm$Error$relevant,
        'Fm.Context.show': Fm$Context$show,
        'Fm.Term.expand_at': Fm$Term$expand_at,
        'Fm.Term.expand_ct': Fm$Term$expand_ct,
        'Fm.Term.expand': Fm$Term$expand,
        'Fm.Error.show': Fm$Error$show,
        'Fm.Error.origin': Fm$Error$origin,
        'Fm.Defs.report.go': Fm$Defs$report$go,
        'Fm.Defs.report': Fm$Defs$report,
        'Fm.checker.io.one': Fm$checker$io$one,
        'Map.keys.go': Map$keys$go,
        'Map.keys': Map$keys,
        'Fm.Synth.many': Fm$Synth$many,
        'Fm.Synth.file': Fm$Synth$file,
        'Fm.checker.io.file': Fm$checker$io$file,
        'IO.purify': IO$purify,
        'Fm.checker.code': Fm$checker$code,
        'Fm.Term.read': Fm$Term$read,
        'Fm.compute.io.one': Fm$compute$io$one,
        'Fm': Fm,
    };
})();