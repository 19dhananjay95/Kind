Crypto.Keccak(arr: Buffer32): Buffer32
  // Local definitions, for readability
  def read   = Buffer32.get
  def write  = Buffer32.set
  def update = Buffer32.mut
  def or     = U32.or
  def xor    = U32.xor
  def xors   = U32.xors
  def nott   = U32.not
  def and    = U32.and
  def shl    = U32.shl
  def shr    = U32.shr
  def add    = U32.add

  let arr = Crypto.Keccak.compress(arr)
   for i : U32 from 0#32 to 24u with arr:
    let n = U32.mul(2#32, i)
    let c0 = xors(5)(read(0#32, arr), read(10#32, arr), read(20#32, arr), read(30#32, arr), read(40#32, arr))
    let c1 = xors(5)(read(1#32, arr), read(11#32, arr), read(21#32, arr), read(31#32, arr), read(41#32, arr))
    let c2 = xors(5)(read(2#32, arr), read(12#32, arr), read(22#32, arr), read(32#32, arr), read(42#32, arr))
    let c3 = xors(5)(read(3#32, arr), read(13#32, arr), read(23#32, arr), read(33#32, arr), read(43#32, arr))
    let c4 = xors(5)(read(4#32, arr), read(14#32, arr), read(24#32, arr), read(34#32, arr), read(44#32, arr))
    let c5 = xors(5)(read(5#32, arr), read(15#32, arr), read(25#32, arr), read(35#32, arr), read(45#32, arr))
    let c6 = xors(5)(read(6#32, arr), read(16#32, arr), read(26#32, arr), read(36#32, arr), read(46#32, arr))
    let c7 = xors(5)(read(7#32, arr), read(17#32, arr), read(27#32, arr), read(37#32, arr), read(47#32, arr))
    let c8 = xors(5)(read(8#32, arr), read(18#32, arr), read(28#32, arr), read(38#32, arr), read(48#32, arr))
    let c9 = xors(5)(read(9#32, arr), read(19#32, arr), read(29#32, arr), read(39#32, arr), read(49#32, arr))

    let h   = xor(c8, or(shl(c2, 1#32), shr(c3, 31#32)))
    let l   = xor(c9, or(shl(c3, 1#32), shr(c2, 31#32)))
    let arr = update(0#32,  xor(h), arr)
    let arr = update(1#32,  xor(l), arr)
    let arr = update(10#32, xor(h), arr)
    let arr = update(11#32, xor(l), arr)
    let arr = update(20#32, xor(h), arr)
    let arr = update(21#32, xor(l), arr)
    let arr = update(30#32, xor(h), arr)
    let arr = update(31#32, xor(l), arr)
    let arr = update(40#32, xor(h), arr)
    let arr = update(41#32, xor(l), arr)

    let h   = xor(c0, or(shl(c4, 1#32), shr(c5, 31#32)))
    let l   = xor(c1, or(shl(c5, 1#32), shr(c4, 31#32)))
    let arr = update(2#32, xor(h), arr)
    let arr = update(3#32,  xor(l), arr)
    let arr = update(12#32,  xor(h), arr)
    let arr = update(13#32, xor(l), arr)
    let arr = update(22#32, xor(h), arr)
    let arr = update(23#32, xor(l), arr)
    let arr = update(32#32, xor(h), arr)
    let arr = update(33#32, xor(l), arr)
    let arr = update(42#32, xor(h), arr)
    let arr = update(43#32, xor(l), arr)

    let h   = xor(c2, or(shl(c6, 1#32), shr(c7, 31#32)))
    let l   = xor(c3, or(shl(c7, 1#32), shr(c6, 31#32)))
    let arr = update(4#32,  xor(h), arr)
    let arr = update(5#32,  xor(l), arr)
    let arr = update(14#32, xor(h), arr)
    let arr = update(15#32, xor(l), arr)
    let arr = update(24#32, xor(h), arr)
    let arr = update(25#32, xor(l), arr)
    let arr = update(34#32, xor(h), arr)
    let arr = update(35#32, xor(l), arr)
    let arr = update(44#32, xor(h), arr)
    let arr = update(45#32, xor(l), arr)

    let h   = xor(c4, or(shl(c8, 1#32), shr(c9, 31#32)))
    let l   = xor(c5, or(shl(c9, 1#32), shr(c8, 31#32)))
    let arr = update(6#32,  xor(h), arr)
    let arr = update(7#32,  xor(l), arr)
    let arr = update(16#32, xor(h), arr)
    let arr = update(17#32, xor(l), arr)
    let arr = update(26#32, xor(h), arr)
    let arr = update(27#32, xor(l), arr)
    let arr = update(36#32, xor(h), arr)
    let arr = update(37#32, xor(l), arr)
    let arr = update(46#32, xor(h), arr)
    let arr = update(47#32, xor(l), arr)

    let h   = xor(c6, or(shl(c0, 1#32), shr(c1, 31#32)))
    let l   = xor(c7, or(shl(c1, 1#32), shr(c0, 31#32)))
    let arr = update(8#32,  xor(h), arr)
    let arr = update(9#32,  xor(l), arr)
    let arr = update(18#32, xor(h), arr)
    let arr = update(19#32, xor(l), arr)
    let arr = update(28#32, xor(h), arr)
    let arr = update(29#32, xor(l), arr)
    let arr = update(38#32, xor(h), arr)
    let arr = update(39#32, xor(l), arr)
    let arr = update(48#32, xor(h), arr)
    let arr = update(49#32, xor(l), arr)

    let b00 = read(0#32, arr)
    let b01 = read(1#32, arr)
    let b32 = or(shl(read(11#32, arr),  4#32), shr(read(10#32, arr), 28#32))
    let b33 = or(shl(read(10#32, arr),  4#32), shr(read(11#32, arr), 28#32))
    let b14 = or(shl(read(20#32, arr),  3#32), shr(read(21#32, arr), 29#32))
    let b15 = or(shl(read(21#32, arr),  3#32), shr(read(20#32, arr), 29#32))
    let b46 = or(shl(read(31#32, arr),  9#32), shr(read(30#32, arr), 23#32))
    let b47 = or(shl(read(30#32, arr),  9#32), shr(read(31#32, arr), 23#32))
    let b28 = or(shl(read(40#32, arr), 18#32), shr(read(41#32, arr), 14#32))
    let b29 = or(shl(read(41#32, arr), 18#32), shr(read(40#32, arr), 14#32))
    let b20 = or(shl(read(2#32,  arr),  1#32), shr(read(3#32,  arr), 31#32))
    let b21 = or(shl(read(3#32,  arr),  1#32), shr(read(2#32,  arr), 31#32))
    let b02 = or(shl(read(13#32, arr), 12#32), shr(read(12#32, arr), 20#32))
    let b03 = or(shl(read(12#32, arr), 12#32), shr(read(13#32, arr), 20#32))
    let b34 = or(shl(read(22#32, arr), 10#32), shr(read(23#32, arr), 22#32))
    let b35 = or(shl(read(23#32, arr), 10#32), shr(read(22#32, arr), 22#32))
    let b16 = or(shl(read(33#32, arr), 13#32), shr(read(32#32, arr), 19#32))
    let b17 = or(shl(read(32#32, arr), 13#32), shr(read(33#32, arr), 19#32))
    let b48 = or(shl(read(42#32, arr), 02#32), shr(read(43#32, arr), 30#32))
    let b49 = or(shl(read(43#32, arr), 02#32), shr(read(42#32, arr), 30#32))
    let b40 = or(shl(read(5#32,  arr), 30#32), shr(read(4#32,  arr),  2#32))
    let b41 = or(shl(read(4#32,  arr), 30#32), shr(read(5#32,  arr),  2#32))
    let b22 = or(shl(read(14#32, arr), 06#32), shr(read(15#32, arr), 26#32))
    let b23 = or(shl(read(15#32, arr), 06#32), shr(read(14#32, arr), 26#32))
    let b04 = or(shl(read(25#32, arr), 11#32), shr(read(24#32, arr), 21#32))
    let b05 = or(shl(read(24#32, arr), 11#32), shr(read(25#32, arr), 21#32))
    let b36 = or(shl(read(34#32, arr), 15#32), shr(read(35#32, arr), 17#32))
    let b37 = or(shl(read(35#32, arr), 15#32), shr(read(34#32, arr), 17#32))
    let b18 = or(shl(read(45#32, arr), 29#32), shr(read(44#32, arr),  3#32))
    let b19 = or(shl(read(44#32, arr), 29#32), shr(read(45#32, arr),  3#32))
    let b10 = or(shl(read(6#32,  arr), 28#32), shr(read(7#32,  arr),  4#32))
    let b11 = or(shl(read(7#32,  arr), 28#32), shr(read(6#32,  arr),  4#32))
    let b42 = or(shl(read(17#32, arr), 23#32), shr(read(16#32, arr),  9#32))
    let b43 = or(shl(read(16#32, arr), 23#32), shr(read(17#32, arr),  9#32))
    let b24 = or(shl(read(26#32, arr), 25#32), shr(read(27#32, arr),  7#32))
    let b25 = or(shl(read(27#32, arr), 25#32), shr(read(26#32, arr),  7#32))
    let b06 = or(shl(read(36#32, arr), 21#32), shr(read(37#32, arr), 11#32))
    let b07 = or(shl(read(37#32, arr), 21#32), shr(read(36#32, arr), 11#32))
    let b38 = or(shl(read(47#32, arr), 24#32), shr(read(46#32, arr),  8#32))
    let b39 = or(shl(read(46#32, arr), 24#32), shr(read(47#32, arr),  8#32))
    let b30 = or(shl(read(8#32,  arr), 27#32), shr(read(9#32,  arr),  5#32))
    let b31 = or(shl(read(9#32,  arr), 27#32), shr(read(8#32,  arr),  5#32))
    let b12 = or(shl(read(18#32, arr), 20#32), shr(read(19#32, arr), 12#32))
    let b13 = or(shl(read(19#32, arr), 20#32), shr(read(18#32, arr), 12#32))
    let b44 = or(shl(read(29#32, arr), 07#32), shr(read(28#32, arr), 25#32))
    let b45 = or(shl(read(28#32, arr), 07#32), shr(read(29#32, arr), 25#32))
    let b26 = or(shl(read(38#32, arr), 08#32), shr(read(39#32, arr), 24#32))
    let b27 = or(shl(read(39#32, arr), 08#32), shr(read(38#32, arr), 24#32))
    let b08 = or(shl(read(48#32, arr), 14#32), shr(read(49#32, arr), 18#32))
    let b09 = or(shl(read(49#32, arr), 14#32), shr(read(48#32, arr), 18#32))

    let arr = write(0#32,  xor(b00, and(nott(b02), b04)), arr)
    let arr = write(1#32,  xor(b01, and(nott(b03), b05)), arr)
    let arr = write(10#32, xor(b10, and(nott(b12), b14)), arr)
    let arr = write(11#32, xor(b11, and(nott(b13), b15)), arr)
    let arr = write(20#32, xor(b20, and(nott(b22), b24)), arr)
    let arr = write(21#32, xor(b21, and(nott(b23), b25)), arr)
    let arr = write(30#32, xor(b30, and(nott(b32), b34)), arr)
    let arr = write(31#32, xor(b31, and(nott(b33), b35)), arr)
    let arr = write(40#32, xor(b40, and(nott(b42), b44)), arr)
    let arr = write(41#32, xor(b41, and(nott(b43), b45)), arr)
    let arr = write(2#32,  xor(b02, and(nott(b04), b06)), arr)
    let arr = write(3#32,  xor(b03, and(nott(b05), b07)), arr)
    let arr = write(12#32, xor(b12, and(nott(b14), b16)), arr)
    let arr = write(13#32, xor(b13, and(nott(b15), b17)), arr)
    let arr = write(22#32, xor(b22, and(nott(b24), b26)), arr)
    let arr = write(23#32, xor(b23, and(nott(b25), b27)), arr)
    let arr = write(32#32, xor(b32, and(nott(b34), b36)), arr)
    let arr = write(33#32, xor(b33, and(nott(b35), b37)), arr)
    let arr = write(42#32, xor(b42, and(nott(b44), b46)), arr)
    let arr = write(43#32, xor(b43, and(nott(b45), b47)), arr)
    let arr = write(4#32,  xor(b04, and(nott(b06), b08)), arr)
    let arr = write(5#32,  xor(b05, and(nott(b07), b09)), arr)
    let arr = write(14#32, xor(b14, and(nott(b16), b18)), arr)
    let arr = write(15#32, xor(b15, and(nott(b17), b19)), arr)
    let arr = write(24#32, xor(b24, and(nott(b26), b28)), arr)
    let arr = write(25#32, xor(b25, and(nott(b27), b29)), arr)
    let arr = write(34#32, xor(b34, and(nott(b36), b38)), arr)
    let arr = write(35#32, xor(b35, and(nott(b37), b39)), arr)
    let arr = write(44#32, xor(b44, and(nott(b46), b48)), arr)
    let arr = write(45#32, xor(b45, and(nott(b47), b49)), arr)
    let arr = write(6#32,  xor(b06, and(nott(b08), b00)), arr)
    let arr = write(7#32,  xor(b07, and(nott(b09), b01)), arr)
    let arr = write(16#32, xor(b16, and(nott(b18), b10)), arr)
    let arr = write(17#32, xor(b17, and(nott(b19), b11)), arr)
    let arr = write(26#32, xor(b26, and(nott(b28), b20)), arr)
    let arr = write(27#32, xor(b27, and(nott(b29), b21)), arr)
    let arr = write(36#32, xor(b36, and(nott(b38), b30)), arr)
    let arr = write(37#32, xor(b37, and(nott(b39), b31)), arr)
    let arr = write(46#32, xor(b46, and(nott(b48), b40)), arr)
    let arr = write(47#32, xor(b47, and(nott(b49), b41)), arr)
    let arr = write(8#32,  xor(b08, and(nott(b00), b02)), arr)
    let arr = write(9#32,  xor(b09, and(nott(b01), b03)), arr)
    let arr = write(18#32, xor(b18, and(nott(b10), b12)), arr)
    let arr = write(19#32, xor(b19, and(nott(b11), b13)), arr)
    let arr = write(28#32, xor(b28, and(nott(b20), b22)), arr)
    let arr = write(29#32, xor(b29, and(nott(b21), b23)), arr)
    let arr = write(38#32, xor(b38, and(nott(b30), b32)), arr)
    let arr = write(39#32, xor(b39, and(nott(b31), b33)), arr)
    let arr = write(48#32, xor(b48, and(nott(b40), b42)), arr)
    let arr = write(49#32, xor(b49, and(nott(b41), b43)), arr)

    let arr = update(0#32, xor(read(n, Crypto.Keccak.RC)), arr)
    let arr = update(1#32, xor(read(add(n, 1#32), Crypto.Keccak.RC)), arr)
    arr
  Crypto.Keccak.uncompress(arr)