{"version":3,"sources":["webpack://kind-web/./src/apps/App.Drawing.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,I","file":"22.index.js","sourcesContent":["module.exports = (function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    var list_length = list => {\n        var len = 0;\n        while (list._ === 'List.cons') {\n            len += 1;\n            list = list.tail;\n        };\n        return BigInt(len);\n    };\n    const inst_unit = x => x(null);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c0;\n                return $2;\n            } else {\n                var $3 = c1;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c0;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c1($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $11 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $9 = u16_to_word(self);\n                    var $10 = c0($9);\n                    return $10;\n            };\n        })();\n        return $11;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $14 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $12 = u32_to_word(self);\n                    var $13 = c0($12);\n                    return $13;\n            };\n        })();\n        return $14;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $15 = u64_to_word(self);\n                    var $16 = c0($15);\n                    return $16;\n            };\n        })();\n        return $17;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $22 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $18 = c0;\n                return $18;\n            } else {\n                var $19 = self.charCodeAt(0);\n                var $20 = self.slice(1);\n                var $21 = c1($19)($20);\n                return $21;\n            };\n        })();\n        return $22;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $26 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $23 = buffer32_to_depth(self);\n                    var $24 = buffer32_to_u32array(self);\n                    var $25 = c0($23)($24);\n                    return $25;\n            };\n        })();\n        return $26;\n    });\n\n    function Buffer32$new$(_depth$1, _array$2) {\n        var $27 = u32array_to_buffer32(_array$2);\n        return $27;\n    };\n    const Buffer32$new = x0 => x1 => Buffer32$new$(x0, x1);\n\n    function Array$(_A$1, _depth$2) {\n        var $28 = null;\n        return $28;\n    };\n    const Array = x0 => x1 => Array$(x0, x1);\n\n    function Array$tip$(_value$2) {\n        var $29 = ({\n            _: 'Array.tip',\n            'value': _value$2\n        });\n        return $29;\n    };\n    const Array$tip = x0 => Array$tip$(x0);\n\n    function Array$tie$(_lft$3, _rgt$4) {\n        var $30 = ({\n            _: 'Array.tie',\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $30;\n    };\n    const Array$tie = x0 => x1 => Array$tie$(x0, x1);\n\n    function Array$alloc$(_depth$2, _x$3) {\n        var self = _depth$2;\n        if (self === 0n) {\n            var $32 = Array$tip$(_x$3);\n            var $31 = $32;\n        } else {\n            var $33 = (self - 1n);\n            var _half$5 = Array$alloc$($33, _x$3);\n            var $34 = Array$tie$(_half$5, _half$5);\n            var $31 = $34;\n        };\n        return $31;\n    };\n    const Array$alloc = x0 => x1 => Array$alloc$(x0, x1);\n\n    function U32$new$(_value$1) {\n        var $35 = word_to_u32(_value$1);\n        return $35;\n    };\n    const U32$new = x0 => U32$new$(x0);\n\n    function Word$(_size$1) {\n        var $36 = null;\n        return $36;\n    };\n    const Word = x0 => Word$(x0);\n    const Word$e = ({\n        _: 'Word.e'\n    });\n\n    function Word$o$(_pred$2) {\n        var $37 = ({\n            _: 'Word.o',\n            'pred': _pred$2\n        });\n        return $37;\n    };\n    const Word$o = x0 => Word$o$(x0);\n\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $39 = Word$e;\n            var $38 = $39;\n        } else {\n            var $40 = (self - 1n);\n            var $41 = Word$o$(Word$zero$($40));\n            var $38 = $41;\n        };\n        return $38;\n    };\n    const Word$zero = x0 => Word$zero$(x0);\n\n    function Nat$succ$(_pred$1) {\n        var $42 = 1n + _pred$1;\n        return $42;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const U32$zero = U32$new$(Word$zero$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$zero))))))))))))))))))))))))))))))))));\n    const Buffer32$alloc = a0 => (new Uint32Array(2 ** Number(a0)));\n\n    function Word$bit_length$go$(_word$2, _c$3, _n$4) {\n        var Word$bit_length$go$ = (_word$2, _c$3, _n$4) => ({\n            ctr: 'TCO',\n            arg: [_word$2, _c$3, _n$4]\n        });\n        var Word$bit_length$go = _word$2 => _c$3 => _n$4 => Word$bit_length$go$(_word$2, _c$3, _n$4);\n        var arg = [_word$2, _c$3, _n$4];\n        while (true) {\n            let [_word$2, _c$3, _n$4] = arg;\n            var R = (() => {\n                var self = _word$2;\n                switch (self._) {\n                    case 'Word.o':\n                        var $43 = self.pred;\n                        var $44 = Word$bit_length$go$($43, Nat$succ$(_c$3), _n$4);\n                        return $44;\n                    case 'Word.i':\n                        var $45 = self.pred;\n                        var $46 = Word$bit_length$go$($45, Nat$succ$(_c$3), Nat$succ$(_c$3));\n                        return $46;\n                    case 'Word.e':\n                        var $47 = _n$4;\n                        return $47;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$bit_length$go = x0 => x1 => x2 => Word$bit_length$go$(x0, x1, x2);\n\n    function Word$bit_length$(_word$2) {\n        var $48 = Word$bit_length$go$(_word$2, 0n, 0n);\n        return $48;\n    };\n    const Word$bit_length = x0 => Word$bit_length$(x0);\n\n    function U32$bit_length$(_size$1) {\n        var self = _size$1;\n        switch ('u32') {\n            case 'u32':\n                var $50 = u32_to_word(self);\n                var $51 = Word$bit_length$($50);\n                var $49 = $51;\n                break;\n        };\n        return $49;\n    };\n    const U32$bit_length = x0 => U32$bit_length$(x0);\n\n    function Word$i$(_pred$2) {\n        var $52 = ({\n            _: 'Word.i',\n            'pred': _pred$2\n        });\n        return $52;\n    };\n    const Word$i = x0 => Word$i$(x0);\n    const Bool$false = false;\n    const Bool$true = true;\n\n    function Word$shift_left$one$go$(_word$2, _prev$3) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $54 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $56 = Word$i$(Word$shift_left$one$go$($54, Bool$false));\n                    var $55 = $56;\n                } else {\n                    var $57 = Word$o$(Word$shift_left$one$go$($54, Bool$false));\n                    var $55 = $57;\n                };\n                var $53 = $55;\n                break;\n            case 'Word.i':\n                var $58 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $60 = Word$i$(Word$shift_left$one$go$($58, Bool$true));\n                    var $59 = $60;\n                } else {\n                    var $61 = Word$o$(Word$shift_left$one$go$($58, Bool$true));\n                    var $59 = $61;\n                };\n                var $53 = $59;\n                break;\n            case 'Word.e':\n                var $62 = Word$e;\n                var $53 = $62;\n                break;\n        };\n        return $53;\n    };\n    const Word$shift_left$one$go = x0 => x1 => Word$shift_left$one$go$(x0, x1);\n\n    function Word$shift_left$one$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $64 = self.pred;\n                var $65 = Word$o$(Word$shift_left$one$go$($64, Bool$false));\n                var $63 = $65;\n                break;\n            case 'Word.i':\n                var $66 = self.pred;\n                var $67 = Word$o$(Word$shift_left$one$go$($66, Bool$true));\n                var $63 = $67;\n                break;\n            case 'Word.e':\n                var $68 = Word$e;\n                var $63 = $68;\n                break;\n        };\n        return $63;\n    };\n    const Word$shift_left$one = x0 => Word$shift_left$one$(x0);\n\n    function Word$shift_left$(_n$2, _value$3) {\n        var Word$shift_left$ = (_n$2, _value$3) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _value$3]\n        });\n        var Word$shift_left = _n$2 => _value$3 => Word$shift_left$(_n$2, _value$3);\n        var arg = [_n$2, _value$3];\n        while (true) {\n            let [_n$2, _value$3] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $69 = _value$3;\n                    return $69;\n                } else {\n                    var $70 = (self - 1n);\n                    var $71 = Word$shift_left$($70, Word$shift_left$one$(_value$3));\n                    return $71;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$shift_left = x0 => x1 => Word$shift_left$(x0, x1);\n\n    function Word$adder$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $73 = self.pred;\n                var $74 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $76 = self.pred;\n                            var $77 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $79 = Word$i$(Word$adder$(_a$pred$10, $76, Bool$false));\n                                    var $78 = $79;\n                                } else {\n                                    var $80 = Word$o$(Word$adder$(_a$pred$10, $76, Bool$false));\n                                    var $78 = $80;\n                                };\n                                return $78;\n                            });\n                            var $75 = $77;\n                            break;\n                        case 'Word.i':\n                            var $81 = self.pred;\n                            var $82 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $84 = Word$o$(Word$adder$(_a$pred$10, $81, Bool$true));\n                                    var $83 = $84;\n                                } else {\n                                    var $85 = Word$i$(Word$adder$(_a$pred$10, $81, Bool$false));\n                                    var $83 = $85;\n                                };\n                                return $83;\n                            });\n                            var $75 = $82;\n                            break;\n                        case 'Word.e':\n                            var $86 = (_a$pred$8 => {\n                                var $87 = Word$e;\n                                return $87;\n                            });\n                            var $75 = $86;\n                            break;\n                    };\n                    var $75 = $75($73);\n                    return $75;\n                });\n                var $72 = $74;\n                break;\n            case 'Word.i':\n                var $88 = self.pred;\n                var $89 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $91 = self.pred;\n                            var $92 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $94 = Word$o$(Word$adder$(_a$pred$10, $91, Bool$true));\n                                    var $93 = $94;\n                                } else {\n                                    var $95 = Word$i$(Word$adder$(_a$pred$10, $91, Bool$false));\n                                    var $93 = $95;\n                                };\n                                return $93;\n                            });\n                            var $90 = $92;\n                            break;\n                        case 'Word.i':\n                            var $96 = self.pred;\n                            var $97 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $99 = Word$i$(Word$adder$(_a$pred$10, $96, Bool$true));\n                                    var $98 = $99;\n                                } else {\n                                    var $100 = Word$o$(Word$adder$(_a$pred$10, $96, Bool$true));\n                                    var $98 = $100;\n                                };\n                                return $98;\n                            });\n                            var $90 = $97;\n                            break;\n                        case 'Word.e':\n                            var $101 = (_a$pred$8 => {\n                                var $102 = Word$e;\n                                return $102;\n                            });\n                            var $90 = $101;\n                            break;\n                    };\n                    var $90 = $90($88);\n                    return $90;\n                });\n                var $72 = $89;\n                break;\n            case 'Word.e':\n                var $103 = (_b$5 => {\n                    var $104 = Word$e;\n                    return $104;\n                });\n                var $72 = $103;\n                break;\n        };\n        var $72 = $72(_b$3);\n        return $72;\n    };\n    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);\n\n    function Word$add$(_a$2, _b$3) {\n        var $105 = Word$adder$(_a$2, _b$3, Bool$false);\n        return $105;\n    };\n    const Word$add = x0 => x1 => Word$add$(x0, x1);\n\n    function Word$mul$go$(_a$3, _b$4, _acc$5) {\n        var Word$mul$go$ = (_a$3, _b$4, _acc$5) => ({\n            ctr: 'TCO',\n            arg: [_a$3, _b$4, _acc$5]\n        });\n        var Word$mul$go = _a$3 => _b$4 => _acc$5 => Word$mul$go$(_a$3, _b$4, _acc$5);\n        var arg = [_a$3, _b$4, _acc$5];\n        while (true) {\n            let [_a$3, _b$4, _acc$5] = arg;\n            var R = (() => {\n                var self = _a$3;\n                switch (self._) {\n                    case 'Word.o':\n                        var $106 = self.pred;\n                        var $107 = Word$mul$go$($106, Word$shift_left$(1n, _b$4), _acc$5);\n                        return $107;\n                    case 'Word.i':\n                        var $108 = self.pred;\n                        var $109 = Word$mul$go$($108, Word$shift_left$(1n, _b$4), Word$add$(_b$4, _acc$5));\n                        return $109;\n                    case 'Word.e':\n                        var $110 = _acc$5;\n                        return $110;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mul$go = x0 => x1 => x2 => Word$mul$go$(x0, x1, x2);\n\n    function Word$to_zero$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $112 = self.pred;\n                var $113 = Word$o$(Word$to_zero$($112));\n                var $111 = $113;\n                break;\n            case 'Word.i':\n                var $114 = self.pred;\n                var $115 = Word$o$(Word$to_zero$($114));\n                var $111 = $115;\n                break;\n            case 'Word.e':\n                var $116 = Word$e;\n                var $111 = $116;\n                break;\n        };\n        return $111;\n    };\n    const Word$to_zero = x0 => Word$to_zero$(x0);\n\n    function Word$mul$(_a$2, _b$3) {\n        var $117 = Word$mul$go$(_a$2, _b$3, Word$to_zero$(_a$2));\n        return $117;\n    };\n    const Word$mul = x0 => x1 => Word$mul$(x0, x1);\n    const U32$mul = a0 => a1 => ((a0 * a1) >>> 0);\n\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _f$3, _x$4]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [_n$2, _f$3, _x$4];\n        while (true) {\n            let [_n$2, _f$3, _x$4] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $118 = _x$4;\n                    return $118;\n                } else {\n                    var $119 = (self - 1n);\n                    var $120 = Nat$apply$($119, _f$3, _f$3(_x$4));\n                    return $120;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $122 = self.pred;\n                var $123 = Word$i$($122);\n                var $121 = $123;\n                break;\n            case 'Word.i':\n                var $124 = self.pred;\n                var $125 = Word$o$(Word$inc$($124));\n                var $121 = $125;\n                break;\n            case 'Word.e':\n                var $126 = Word$e;\n                var $121 = $126;\n                break;\n        };\n        return $121;\n    };\n    const Word$inc = x0 => Word$inc$(x0);\n\n    function Nat$to_word$(_size$1, _n$2) {\n        var $127 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));\n        return $127;\n    };\n    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);\n    const Nat$to_u32 = a0 => (Number(a0) >>> 0);\n\n    function VoxBox$new$(_length$1, _capacity$2, _buffer$3) {\n        var $128 = ({\n            _: 'VoxBox.new',\n            'length': _length$1,\n            'capacity': _capacity$2,\n            'buffer': _buffer$3\n        });\n        return $128;\n    };\n    const VoxBox$new = x0 => x1 => x2 => VoxBox$new$(x0, x1, x2);\n\n    function VoxBox$alloc_capacity$(_capacity$1) {\n        var _buffer$2 = (new Uint32Array(2 ** Number(U32$bit_length$(((2 * _capacity$1) >>> 0)))));\n        var $129 = VoxBox$new$(0, _capacity$1, _buffer$2);\n        return $129;\n    };\n    const VoxBox$alloc_capacity = x0 => VoxBox$alloc_capacity$(x0);\n    const App$Drawing$Constants$room = \"0x10000000000999\";\n    const BBL$tip = ({\n        _: 'BBL.tip'\n    });\n    const Map$new = BBL$tip;\n\n    function App$Drawing$Phase$active$(_turn$1) {\n        var $130 = ({\n            _: 'App.Drawing.Phase.active',\n            'turn': _turn$1\n        });\n        return $130;\n    };\n    const App$Drawing$Phase$active = x0 => App$Drawing$Phase$active$(x0);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function BBL$(_K$1, _V$2) {\n        var $131 = null;\n        return $131;\n    };\n    const BBL = x0 => x1 => BBL$(x0, x1);\n\n    function Map$(_V$1) {\n        var $132 = null;\n        return $132;\n    };\n    const Map = x0 => Map$(x0);\n\n    function App$Drawing$Stage$boards$(_phase$1, _arts$2) {\n        var $133 = ({\n            _: 'App.Drawing.Stage.boards',\n            'phase': _phase$1,\n            'arts': _arts$2\n        });\n        return $133;\n    };\n    const App$Drawing$Stage$boards = x0 => x1 => App$Drawing$Stage$boards$(x0, x1);\n\n    function App$EnvInfo$new$(_screen_size$1, _mouse_pos$2) {\n        var $134 = ({\n            _: 'App.EnvInfo.new',\n            'screen_size': _screen_size$1,\n            'mouse_pos': _mouse_pos$2\n        });\n        return $134;\n    };\n    const App$EnvInfo$new = x0 => x1 => App$EnvInfo$new$(x0, x1);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $135 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $135;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n    const U32$from_nat = a0 => (Number(a0) >>> 0);\n    const App$Drawing$Tool$pencil = ({\n        _: 'App.Drawing.Tool.pencil'\n    });\n\n    function Word$or$(_a$2, _b$3) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $137 = self.pred;\n                var $138 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $140 = self.pred;\n                            var $141 = (_a$pred$9 => {\n                                var $142 = Word$o$(Word$or$(_a$pred$9, $140));\n                                return $142;\n                            });\n                            var $139 = $141;\n                            break;\n                        case 'Word.i':\n                            var $143 = self.pred;\n                            var $144 = (_a$pred$9 => {\n                                var $145 = Word$i$(Word$or$(_a$pred$9, $143));\n                                return $145;\n                            });\n                            var $139 = $144;\n                            break;\n                        case 'Word.e':\n                            var $146 = (_a$pred$7 => {\n                                var $147 = Word$e;\n                                return $147;\n                            });\n                            var $139 = $146;\n                            break;\n                    };\n                    var $139 = $139($137);\n                    return $139;\n                });\n                var $136 = $138;\n                break;\n            case 'Word.i':\n                var $148 = self.pred;\n                var $149 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $151 = self.pred;\n                            var $152 = (_a$pred$9 => {\n                                var $153 = Word$i$(Word$or$(_a$pred$9, $151));\n                                return $153;\n                            });\n                            var $150 = $152;\n                            break;\n                        case 'Word.i':\n                            var $154 = self.pred;\n                            var $155 = (_a$pred$9 => {\n                                var $156 = Word$i$(Word$or$(_a$pred$9, $154));\n                                return $156;\n                            });\n                            var $150 = $155;\n                            break;\n                        case 'Word.e':\n                            var $157 = (_a$pred$7 => {\n                                var $158 = Word$e;\n                                return $158;\n                            });\n                            var $150 = $157;\n                            break;\n                    };\n                    var $150 = $150($148);\n                    return $150;\n                });\n                var $136 = $149;\n                break;\n            case 'Word.e':\n                var $159 = (_b$4 => {\n                    var $160 = Word$e;\n                    return $160;\n                });\n                var $136 = $159;\n                break;\n        };\n        var $136 = $136(_b$3);\n        return $136;\n    };\n    const Word$or = x0 => x1 => Word$or$(x0, x1);\n    const U32$or = a0 => a1 => (a0 | a1);\n\n    function Word$fold$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var self = _word$6;\n        switch (self._) {\n            case 'Word.o':\n                var $162 = self.pred;\n                var $163 = _w0$4(Word$fold$(_nil$3, _w0$4, _w1$5, $162));\n                var $161 = $163;\n                break;\n            case 'Word.i':\n                var $164 = self.pred;\n                var $165 = _w1$5(Word$fold$(_nil$3, _w0$4, _w1$5, $164));\n                var $161 = $165;\n                break;\n            case 'Word.e':\n                var $166 = _nil$3;\n                var $161 = $166;\n                break;\n        };\n        return $161;\n    };\n    const Word$fold = x0 => x1 => x2 => x3 => Word$fold$(x0, x1, x2, x3);\n    const Nat$add = a0 => a1 => (a0 + a1);\n    const Nat$mul = a0 => a1 => (a0 * a1);\n\n    function Word$to_nat$(_word$2) {\n        var $167 = Word$fold$(0n, a1 => (2n * a1), (_x$4 => {\n            var $168 = Nat$succ$((2n * _x$4));\n            return $168;\n        }), _word$2);\n        return $167;\n    };\n    const Word$to_nat = x0 => Word$to_nat$(x0);\n\n    function Word$shl$(_n$2, _value$3) {\n        var _n_nat$4 = Word$to_nat$(_n$2);\n        var $169 = Word$shift_left$(_n_nat$4, _value$3);\n        return $169;\n    };\n    const Word$shl = x0 => x1 => Word$shl$(x0, x1);\n    const U32$shl = a0 => a1 => ((a0 << a1) >>> 0);\n    const Col32$new = a0 => a1 => a2 => a3 => ((0 | a0 | (a1 << 8) | (a2 << 16) | (a3 << 24)));\n\n    function App$Drawing$Whiteboard$new$(_past$1, _live$2, _future$3) {\n        var $170 = ({\n            _: 'App.Drawing.Whiteboard.new',\n            'past': _past$1,\n            'live': _live$2,\n            'future': _future$3\n        });\n        return $170;\n    };\n    const App$Drawing$Whiteboard$new = x0 => x1 => x2 => App$Drawing$Whiteboard$new$(x0, x1, x2);\n\n    function List$cons$(_head$2, _tail$3) {\n        var $171 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $171;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function App$Drawing$Style$new$(_tool$1, _size$2, _color$3) {\n        var $172 = ({\n            _: 'App.Drawing.Style.new',\n            'tool': _tool$1,\n            'size': _size$2,\n            'color': _color$3\n        });\n        return $172;\n    };\n    const App$Drawing$Style$new = x0 => x1 => x2 => App$Drawing$Style$new$(x0, x1, x2);\n\n    function App$Store$new$(_local$2, _global$3) {\n        var $173 = ({\n            _: 'App.Store.new',\n            'local': _local$2,\n            'global': _global$3\n        });\n        return $173;\n    };\n    const App$Store$new = x0 => x1 => App$Store$new$(x0, x1);\n    const App$State$new = Pair$new$(null, null);\n    const App$Drawing$State = App$State$new;\n\n    function App$Drawing$State$local$new$(_input$1, _user$2, _drawing$3, _style$4, _whiteboard$5, _env_info$6) {\n        var $174 = ({\n            _: 'App.Drawing.State.local.new',\n            'input': _input$1,\n            'user': _user$2,\n            'drawing': _drawing$3,\n            'style': _style$4,\n            'whiteboard': _whiteboard$5,\n            'env_info': _env_info$6\n        });\n        return $174;\n    };\n    const App$Drawing$State$local$new = x0 => x1 => x2 => x3 => x4 => x5 => App$Drawing$State$local$new$(x0, x1, x2, x3, x4, x5);\n\n    function App$Drawing$State$global$new$(_room$1, _players$2, _stage$3) {\n        var $175 = ({\n            _: 'App.Drawing.State.global.new',\n            'room': _room$1,\n            'players': _players$2,\n            'stage': _stage$3\n        });\n        return $175;\n    };\n    const App$Drawing$State$global$new = x0 => x1 => x2 => App$Drawing$State$global$new$(x0, x1, x2);\n\n    function App$Drawing$App$init$(_img$1) {\n        var _room$2 = App$Drawing$Constants$room;\n        var _players$3 = Map$new;\n        var _phase$4 = App$Drawing$Phase$active$(0n);\n        var _arts$5 = List$nil;\n        var _stage$6 = App$Drawing$Stage$boards$(_phase$4, List$nil);\n        var _input$7 = \"\";\n        var _user$8 = \"\";\n        var _env_info$9 = App$EnvInfo$new$(Pair$new$(256, 256), Pair$new$(0, 0));\n        var _tool$10 = App$Drawing$Tool$pencil;\n        var _size$11 = 3;\n        var _color$12 = ((0 | 255 | (0 << 8) | (0 << 16) | (125 << 24)));\n        var _whiteboard$13 = App$Drawing$Whiteboard$new$(List$cons$(_img$1, List$nil), _img$1, List$nil);\n        var _style$14 = App$Drawing$Style$new$(_tool$10, _size$11, _color$12);\n        var $176 = App$Store$new$(App$Drawing$State$local$new$(_input$7, _user$8, Bool$false, _style$14, _whiteboard$13, _env_info$9), App$Drawing$State$global$new$(_room$2, _players$3, _stage$6));\n        return $176;\n    };\n    const App$Drawing$App$init = x0 => App$Drawing$App$init$(x0);\n\n    function Pair$fst$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $178 = self.fst;\n                var $179 = $178;\n                var $177 = $179;\n                break;\n        };\n        return $177;\n    };\n    const Pair$fst = x0 => Pair$fst$(x0);\n    const App$State$local = Pair$fst;\n\n    function VoxBox$set_length$(_length$1, _img$2) {\n        var self = _img$2;\n        switch (self._) {\n            case 'VoxBox.new':\n                var $181 = self.capacity;\n                var $182 = self.buffer;\n                var $183 = VoxBox$new$(_length$1, $181, $182);\n                var $180 = $183;\n                break;\n        };\n        return $180;\n    };\n    const VoxBox$set_length = x0 => x1 => VoxBox$set_length$(x0, x1);\n\n    function VoxBox$clear$(_img$1) {\n        var $184 = VoxBox$set_length$(0, _img$1);\n        return $184;\n    };\n    const VoxBox$clear = x0 => VoxBox$clear$(x0);\n\n    function VoxBox$get_len$(_img$1) {\n        var self = _img$1;\n        switch (self._) {\n            case 'VoxBox.new':\n                var $186 = self.length;\n                var $187 = $186;\n                var $185 = $187;\n                break;\n        };\n        return $185;\n    };\n    const VoxBox$get_len = x0 => VoxBox$get_len$(x0);\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $189 = Bool$false;\n                var $188 = $189;\n                break;\n            case 'Cmp.eql':\n                var $190 = Bool$true;\n                var $188 = $190;\n                break;\n        };\n        return $188;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $192 = self.pred;\n                var $193 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $195 = self.pred;\n                            var $196 = (_a$pred$10 => {\n                                var $197 = Word$cmp$go$(_a$pred$10, $195, _c$4);\n                                return $197;\n                            });\n                            var $194 = $196;\n                            break;\n                        case 'Word.i':\n                            var $198 = self.pred;\n                            var $199 = (_a$pred$10 => {\n                                var $200 = Word$cmp$go$(_a$pred$10, $198, Cmp$ltn);\n                                return $200;\n                            });\n                            var $194 = $199;\n                            break;\n                        case 'Word.e':\n                            var $201 = (_a$pred$8 => {\n                                var $202 = _c$4;\n                                return $202;\n                            });\n                            var $194 = $201;\n                            break;\n                    };\n                    var $194 = $194($192);\n                    return $194;\n                });\n                var $191 = $193;\n                break;\n            case 'Word.i':\n                var $203 = self.pred;\n                var $204 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $206 = self.pred;\n                            var $207 = (_a$pred$10 => {\n                                var $208 = Word$cmp$go$(_a$pred$10, $206, Cmp$gtn);\n                                return $208;\n                            });\n                            var $205 = $207;\n                            break;\n                        case 'Word.i':\n                            var $209 = self.pred;\n                            var $210 = (_a$pred$10 => {\n                                var $211 = Word$cmp$go$(_a$pred$10, $209, _c$4);\n                                return $211;\n                            });\n                            var $205 = $210;\n                            break;\n                        case 'Word.e':\n                            var $212 = (_a$pred$8 => {\n                                var $213 = _c$4;\n                                return $213;\n                            });\n                            var $205 = $212;\n                            break;\n                    };\n                    var $205 = $205($203);\n                    return $205;\n                });\n                var $191 = $204;\n                break;\n            case 'Word.e':\n                var $214 = (_b$5 => {\n                    var $215 = _c$4;\n                    return $215;\n                });\n                var $191 = $214;\n                break;\n        };\n        var $191 = $191(_b$3);\n        return $191;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $216 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $216;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $217 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $217;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n    const U32$eql = a0 => a1 => (a0 === a1);\n    const U32$inc = a0 => ((a0 + 1) >>> 0);\n    const U32$for = a0 => a1 => a2 => a3 => (u32_for(a0, a1, a2, a3));\n\n    function Word$trim$(_new_size$2, _word$3) {\n        var self = _new_size$2;\n        if (self === 0n) {\n            var $219 = Word$e;\n            var $218 = $219;\n        } else {\n            var $220 = (self - 1n);\n            var self = _word$3;\n            switch (self._) {\n                case 'Word.o':\n                    var $222 = self.pred;\n                    var $223 = Word$o$(Word$trim$($220, $222));\n                    var $221 = $223;\n                    break;\n                case 'Word.i':\n                    var $224 = self.pred;\n                    var $225 = Word$i$(Word$trim$($220, $224));\n                    var $221 = $225;\n                    break;\n                case 'Word.e':\n                    var $226 = Word$o$(Word$trim$($220, Word$e));\n                    var $221 = $226;\n                    break;\n            };\n            var $218 = $221;\n        };\n        return $218;\n    };\n    const Word$trim = x0 => x1 => Word$trim$(x0, x1);\n    const Unit$new = null;\n\n    function Array$extract_tip$(_arr$2) {\n        var self = _arr$2;\n        switch (self._) {\n            case 'Array.tip':\n                var $228 = self.value;\n                var $229 = $228;\n                var $227 = $229;\n                break;\n            case 'Array.tie':\n                var $230 = Unit$new;\n                var $227 = $230;\n                break;\n        };\n        return $227;\n    };\n    const Array$extract_tip = x0 => Array$extract_tip$(x0);\n\n    function Pair$(_A$1, _B$2) {\n        var $231 = null;\n        return $231;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n\n    function Array$extract_tie$(_arr$3) {\n        var self = _arr$3;\n        switch (self._) {\n            case 'Array.tie':\n                var $233 = self.lft;\n                var $234 = self.rgt;\n                var $235 = Pair$new$($233, $234);\n                var $232 = $235;\n                break;\n            case 'Array.tip':\n                var $236 = Unit$new;\n                var $232 = $236;\n                break;\n        };\n        return $232;\n    };\n    const Array$extract_tie = x0 => Array$extract_tie$(x0);\n\n    function Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var Word$foldl$ = (_nil$3, _w0$4, _w1$5, _word$6) => ({\n            ctr: 'TCO',\n            arg: [_nil$3, _w0$4, _w1$5, _word$6]\n        });\n        var Word$foldl = _nil$3 => _w0$4 => _w1$5 => _word$6 => Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6);\n        var arg = [_nil$3, _w0$4, _w1$5, _word$6];\n        while (true) {\n            let [_nil$3, _w0$4, _w1$5, _word$6] = arg;\n            var R = (() => {\n                var self = _word$6;\n                switch (self._) {\n                    case 'Word.o':\n                        var $237 = self.pred;\n                        var $238 = Word$foldl$(_w0$4(_nil$3), _w0$4, _w1$5, $237);\n                        return $238;\n                    case 'Word.i':\n                        var $239 = self.pred;\n                        var $240 = Word$foldl$(_w1$5(_nil$3), _w0$4, _w1$5, $239);\n                        return $240;\n                    case 'Word.e':\n                        var $241 = _nil$3;\n                        return $241;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$foldl = x0 => x1 => x2 => x3 => Word$foldl$(x0, x1, x2, x3);\n\n    function Array$get$(_idx$3, _arr$4) {\n        var $242 = Word$foldl$(Array$extract_tip, (_rec$6 => _arr$7 => {\n            var _arr_l$8 = Array$extract_tie$(_arr$7);\n            var self = _arr_l$8;\n            switch (self._) {\n                case 'Pair.new':\n                    var $244 = self.fst;\n                    var $245 = _rec$6($244);\n                    var $243 = $245;\n                    break;\n            };\n            return $243;\n        }), (_rec$6 => _arr$7 => {\n            var _arr_r$8 = Array$extract_tie$(_arr$7);\n            var self = _arr_r$8;\n            switch (self._) {\n                case 'Pair.new':\n                    var $247 = self.snd;\n                    var $248 = _rec$6($247);\n                    var $246 = $248;\n                    break;\n            };\n            return $246;\n        }), _idx$3)(_arr$4);\n        return $242;\n    };\n    const Array$get = x0 => x1 => Array$get$(x0, x1);\n    const Buffer32$get = a0 => a1 => ((a1[a0]));\n    const VoxBox$get_pos = a0 => a1 => ((a1.buffer[a0 * 2]));\n    const U32$add = a0 => a1 => ((a0 + a1) >>> 0);\n    const VoxBox$get_col = a0 => a1 => ((a1.buffer[a0 * 2 + 1]));\n\n    function Word$and$(_a$2, _b$3) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $250 = self.pred;\n                var $251 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $253 = self.pred;\n                            var $254 = (_a$pred$9 => {\n                                var $255 = Word$o$(Word$and$(_a$pred$9, $253));\n                                return $255;\n                            });\n                            var $252 = $254;\n                            break;\n                        case 'Word.i':\n                            var $256 = self.pred;\n                            var $257 = (_a$pred$9 => {\n                                var $258 = Word$o$(Word$and$(_a$pred$9, $256));\n                                return $258;\n                            });\n                            var $252 = $257;\n                            break;\n                        case 'Word.e':\n                            var $259 = (_a$pred$7 => {\n                                var $260 = Word$e;\n                                return $260;\n                            });\n                            var $252 = $259;\n                            break;\n                    };\n                    var $252 = $252($250);\n                    return $252;\n                });\n                var $249 = $251;\n                break;\n            case 'Word.i':\n                var $261 = self.pred;\n                var $262 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $264 = self.pred;\n                            var $265 = (_a$pred$9 => {\n                                var $266 = Word$o$(Word$and$(_a$pred$9, $264));\n                                return $266;\n                            });\n                            var $263 = $265;\n                            break;\n                        case 'Word.i':\n                            var $267 = self.pred;\n                            var $268 = (_a$pred$9 => {\n                                var $269 = Word$i$(Word$and$(_a$pred$9, $267));\n                                return $269;\n                            });\n                            var $263 = $268;\n                            break;\n                        case 'Word.e':\n                            var $270 = (_a$pred$7 => {\n                                var $271 = Word$e;\n                                return $271;\n                            });\n                            var $263 = $270;\n                            break;\n                    };\n                    var $263 = $263($261);\n                    return $263;\n                });\n                var $249 = $262;\n                break;\n            case 'Word.e':\n                var $272 = (_b$4 => {\n                    var $273 = Word$e;\n                    return $273;\n                });\n                var $249 = $272;\n                break;\n        };\n        var $249 = $249(_b$3);\n        return $249;\n    };\n    const Word$and = x0 => x1 => Word$and$(x0, x1);\n    const U32$and = a0 => a1 => (a0 & a1);\n\n    function Word$shift_right$one$go$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $275 = self.pred;\n                var $276 = Word$o$(Word$shift_right$one$go$($275));\n                var $274 = $276;\n                break;\n            case 'Word.i':\n                var $277 = self.pred;\n                var $278 = Word$i$(Word$shift_right$one$go$($277));\n                var $274 = $278;\n                break;\n            case 'Word.e':\n                var $279 = Word$o$(Word$e);\n                var $274 = $279;\n                break;\n        };\n        return $274;\n    };\n    const Word$shift_right$one$go = x0 => Word$shift_right$one$go$(x0);\n\n    function Word$shift_right$one$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $281 = self.pred;\n                var $282 = Word$shift_right$one$go$($281);\n                var $280 = $282;\n                break;\n            case 'Word.i':\n                var $283 = self.pred;\n                var $284 = Word$shift_right$one$go$($283);\n                var $280 = $284;\n                break;\n            case 'Word.e':\n                var $285 = Word$e;\n                var $280 = $285;\n                break;\n        };\n        return $280;\n    };\n    const Word$shift_right$one = x0 => Word$shift_right$one$(x0);\n\n    function Word$shift_right$(_n$2, _value$3) {\n        var Word$shift_right$ = (_n$2, _value$3) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _value$3]\n        });\n        var Word$shift_right = _n$2 => _value$3 => Word$shift_right$(_n$2, _value$3);\n        var arg = [_n$2, _value$3];\n        while (true) {\n            let [_n$2, _value$3] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $286 = _value$3;\n                    return $286;\n                } else {\n                    var $287 = (self - 1n);\n                    var $288 = Word$shift_right$($287, Word$shift_right$one$(_value$3));\n                    return $288;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$shift_right = x0 => x1 => Word$shift_right$(x0, x1);\n\n    function Word$shr$(_n$2, _value$3) {\n        var _n_nat$4 = Word$to_nat$(_n$2);\n        var $289 = Word$shift_right$(_n_nat$4, _value$3);\n        return $289;\n    };\n    const Word$shr = x0 => x1 => Word$shr$(x0, x1);\n    const U32$shr = a0 => a1 => (a0 >>> a1);\n    const Pos32$new = a0 => a1 => a2 => ((0 | a0 | (a1 << 12) | (a2 << 24)));\n\n    function Array$mut$(_idx$3, _f$4, _arr$5) {\n        var $290 = Word$foldl$((_arr$6 => {\n            var $291 = Array$tip$(_f$4(Array$extract_tip$(_arr$6)));\n            return $291;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $293 = self.fst;\n                    var $294 = self.snd;\n                    var $295 = Array$tie$(_rec$7($293), $294);\n                    var $292 = $295;\n                    break;\n            };\n            return $292;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $297 = self.fst;\n                    var $298 = self.snd;\n                    var $299 = Array$tie$($297, _rec$7($298));\n                    var $296 = $299;\n                    break;\n            };\n            return $296;\n        }), _idx$3)(_arr$5);\n        return $290;\n    };\n    const Array$mut = x0 => x1 => x2 => Array$mut$(x0, x1, x2);\n\n    function Array$set$(_idx$3, _val$4, _arr$5) {\n        var $300 = Array$mut$(_idx$3, (_x$6 => {\n            var $301 = _val$4;\n            return $301;\n        }), _arr$5);\n        return $300;\n    };\n    const Array$set = x0 => x1 => x2 => Array$set$(x0, x1, x2);\n    const Buffer32$set = a0 => a1 => a2 => ((a2[a0] = a1, a2));\n    const VoxBox$set_pos = a0 => a1 => a2 => ((a2.buffer[a0 * 2] = a1, a2));\n    const VoxBox$set_col = a0 => a1 => a2 => ((a2.buffer[a0 * 2 + 1] = a1, a2));\n    const VoxBox$push = a0 => a1 => a2 => ((a2.buffer[a2.length * 2] = a0, a2.buffer[a2.length * 2 + 1] = a1, a2.length++, a2));\n\n    function VoxBox$Draw$image$(_x$1, _y$2, _z$3, _src$4, _img$5) {\n        var _len$6 = VoxBox$get_len$(_src$4);\n        var _img$7 = (() => {\n            var $303 = _img$5;\n            var $304 = 0;\n            var $305 = _len$6;\n            let _img$8 = $303;\n            for (let _i$7 = $304; _i$7 < $305; ++_i$7) {\n                var _pos$9 = ((_src$4.buffer[_i$7 * 2]));\n                var _col$10 = ((_src$4.buffer[_i$7 * 2 + 1]));\n                var _p_x$11 = (_pos$9 & 4095);\n                var _p_y$12 = ((_pos$9 & 16773120) >>> 12);\n                var _p_z$13 = ((_pos$9 & 4278190080) >>> 24);\n                var _p_x$14 = ((_p_x$11 + _x$1) >>> 0);\n                var _p_y$15 = ((_p_y$12 + _y$2) >>> 0);\n                var _p_z$16 = ((_p_z$13 + _z$3) >>> 0);\n                var _pos$17 = ((0 | _p_x$14 | (_p_y$15 << 12) | (_p_z$16 << 24)));\n                var $303 = ((_img$8.buffer[_img$8.length * 2] = _pos$17, _img$8.buffer[_img$8.length * 2 + 1] = _col$10, _img$8.length++, _img$8));\n                _img$8 = $303;\n            };\n            return _img$8;\n        })();\n        var $302 = _img$7;\n        return $302;\n    };\n    const VoxBox$Draw$image = x0 => x1 => x2 => x3 => x4 => VoxBox$Draw$image$(x0, x1, x2, x3, x4);\n\n    function App$Drawing$draw$boards$(_img$1, _state$2) {\n        var self = _state$2;\n        switch (self._) {\n            case 'App.Store.new':\n                var $307 = self.local;\n                var $308 = $307;\n                var _local$3 = $308;\n                break;\n        };\n        var self = _local$3;\n        switch (self._) {\n            case 'App.Drawing.State.local.new':\n                var $309 = self.whiteboard;\n                var $310 = $309;\n                var _whiteboard$4 = $310;\n                break;\n        };\n        var _img$5 = VoxBox$clear$(_img$1);\n        var $306 = VoxBox$Draw$image$(0, 0, 0, (() => {\n            var self = _whiteboard$4;\n            switch (self._) {\n                case 'App.Drawing.Whiteboard.new':\n                    var $311 = self.live;\n                    var $312 = $311;\n                    return $312;\n            };\n        })(), _img$5);\n        return $306;\n    };\n    const App$Drawing$draw$boards = x0 => x1 => App$Drawing$draw$boards$(x0, x1);\n\n    function DOM$vbox$(_props$1, _style$2, _value$3) {\n        var $313 = ({\n            _: 'DOM.vbox',\n            'props': _props$1,\n            'style': _style$2,\n            'value': _value$3\n        });\n        return $313;\n    };\n    const DOM$vbox = x0 => x1 => x2 => DOM$vbox$(x0, x1, x2);\n\n    function Pair$snd$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $315 = self.snd;\n                var $316 = $315;\n                var $314 = $316;\n                break;\n        };\n        return $314;\n    };\n    const Pair$snd = x0 => Pair$snd$(x0);\n\n    function BBL$bin$(_size$3, _key$4, _val$5, _left$6, _right$7) {\n        var $317 = ({\n            _: 'BBL.bin',\n            'size': _size$3,\n            'key': _key$4,\n            'val': _val$5,\n            'left': _left$6,\n            'right': _right$7\n        });\n        return $317;\n    };\n    const BBL$bin = x0 => x1 => x2 => x3 => x4 => BBL$bin$(x0, x1, x2, x3, x4);\n\n    function BBL$singleton$(_key$3, _val$4) {\n        var $318 = BBL$bin$(1, _key$3, _val$4, BBL$tip, BBL$tip);\n        return $318;\n    };\n    const BBL$singleton = x0 => x1 => BBL$singleton$(x0, x1);\n\n    function BBL$size$(_map$3) {\n        var self = _map$3;\n        switch (self._) {\n            case 'BBL.bin':\n                var $320 = self.size;\n                var $321 = $320;\n                var $319 = $321;\n                break;\n            case 'BBL.tip':\n                var $322 = 0;\n                var $319 = $322;\n                break;\n        };\n        return $319;\n    };\n    const BBL$size = x0 => BBL$size$(x0);\n    const BBL$w = 3;\n\n    function Cmp$as_ltn$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $324 = Bool$true;\n                var $323 = $324;\n                break;\n            case 'Cmp.eql':\n            case 'Cmp.gtn':\n                var $325 = Bool$false;\n                var $323 = $325;\n                break;\n        };\n        return $323;\n    };\n    const Cmp$as_ltn = x0 => Cmp$as_ltn$(x0);\n\n    function Word$ltn$(_a$2, _b$3) {\n        var $326 = Cmp$as_ltn$(Word$cmp$(_a$2, _b$3));\n        return $326;\n    };\n    const Word$ltn = x0 => x1 => Word$ltn$(x0, x1);\n    const U32$ltn = a0 => a1 => (a0 < a1);\n\n    function BBL$node$(_key$3, _val$4, _left$5, _right$6) {\n        var _size_left$7 = BBL$size$(_left$5);\n        var _size_right$8 = BBL$size$(_right$6);\n        var _new_size$9 = ((1 + ((_size_left$7 + _size_right$8) >>> 0)) >>> 0);\n        var $327 = BBL$bin$(_new_size$9, _key$3, _val$4, _left$5, _right$6);\n        return $327;\n    };\n    const BBL$node = x0 => x1 => x2 => x3 => BBL$node$(x0, x1, x2, x3);\n\n    function Cmp$as_gtn$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.eql':\n                var $329 = Bool$false;\n                var $328 = $329;\n                break;\n            case 'Cmp.gtn':\n                var $330 = Bool$true;\n                var $328 = $330;\n                break;\n        };\n        return $328;\n    };\n    const Cmp$as_gtn = x0 => Cmp$as_gtn$(x0);\n\n    function Word$gtn$(_a$2, _b$3) {\n        var $331 = Cmp$as_gtn$(Word$cmp$(_a$2, _b$3));\n        return $331;\n    };\n    const Word$gtn = x0 => x1 => Word$gtn$(x0, x1);\n    const U32$gtn = a0 => a1 => (a0 > a1);\n\n    function BBL$balance$(_k$3, _v$4, _l$5, _r$6) {\n        var _size_l$7 = BBL$size$(_l$5);\n        var _size_r$8 = BBL$size$(_r$6);\n        var _size_l_plus_size_r$9 = ((_size_l$7 + _size_r$8) >>> 0);\n        var _w_x_size_l$10 = ((BBL$w * _size_l$7) >>> 0);\n        var _w_x_size_r$11 = ((BBL$w * _size_r$8) >>> 0);\n        var self = (_size_l_plus_size_r$9 < 2);\n        if (self) {\n            var $333 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n            var $332 = $333;\n        } else {\n            var self = (_size_r$8 > _w_x_size_l$10);\n            if (self) {\n                var self = _r$6;\n                switch (self._) {\n                    case 'BBL.bin':\n                        var $336 = self.key;\n                        var $337 = self.val;\n                        var $338 = self.left;\n                        var $339 = self.right;\n                        var _size_rl$17 = BBL$size$($338);\n                        var _size_rr$18 = BBL$size$($339);\n                        var self = (_size_rl$17 < _size_rr$18);\n                        if (self) {\n                            var _new_key$19 = $336;\n                            var _new_val$20 = $337;\n                            var _new_left$21 = BBL$node$(_k$3, _v$4, _l$5, $338);\n                            var _new_right$22 = $339;\n                            var $341 = BBL$node$(_new_key$19, _new_val$20, _new_left$21, _new_right$22);\n                            var $340 = $341;\n                        } else {\n                            var self = $338;\n                            switch (self._) {\n                                case 'BBL.bin':\n                                    var $343 = self.key;\n                                    var $344 = self.val;\n                                    var $345 = self.left;\n                                    var $346 = self.right;\n                                    var _new_key$24 = $343;\n                                    var _new_val$25 = $344;\n                                    var _new_left$26 = BBL$node$(_k$3, _v$4, _l$5, $345);\n                                    var _new_right$27 = BBL$node$($336, $337, $346, $339);\n                                    var $347 = BBL$node$(_new_key$24, _new_val$25, _new_left$26, _new_right$27);\n                                    var $342 = $347;\n                                    break;\n                                case 'BBL.tip':\n                                    var $348 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                                    var $342 = $348;\n                                    break;\n                            };\n                            var $340 = $342;\n                        };\n                        var $335 = $340;\n                        break;\n                    case 'BBL.tip':\n                        var $349 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                        var $335 = $349;\n                        break;\n                };\n                var $334 = $335;\n            } else {\n                var self = (_size_l$7 > _w_x_size_r$11);\n                if (self) {\n                    var self = _l$5;\n                    switch (self._) {\n                        case 'BBL.bin':\n                            var $352 = self.key;\n                            var $353 = self.val;\n                            var $354 = self.left;\n                            var $355 = self.right;\n                            var _size_ll$17 = BBL$size$($354);\n                            var _size_lr$18 = BBL$size$($355);\n                            var self = (_size_lr$18 < _size_ll$17);\n                            if (self) {\n                                var _new_key$19 = $352;\n                                var _new_val$20 = $353;\n                                var _new_left$21 = $354;\n                                var _new_right$22 = BBL$node$(_k$3, _v$4, $355, _r$6);\n                                var $357 = BBL$node$(_new_key$19, _new_val$20, _new_left$21, _new_right$22);\n                                var $356 = $357;\n                            } else {\n                                var self = $355;\n                                switch (self._) {\n                                    case 'BBL.bin':\n                                        var $359 = self.key;\n                                        var $360 = self.val;\n                                        var $361 = self.left;\n                                        var $362 = self.right;\n                                        var _new_key$24 = $359;\n                                        var _new_val$25 = $360;\n                                        var _new_left$26 = BBL$node$($352, $353, $354, $361);\n                                        var _new_right$27 = BBL$node$(_k$3, _v$4, $362, _r$6);\n                                        var $363 = BBL$node$(_new_key$24, _new_val$25, _new_left$26, _new_right$27);\n                                        var $358 = $363;\n                                        break;\n                                    case 'BBL.tip':\n                                        var $364 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                                        var $358 = $364;\n                                        break;\n                                };\n                                var $356 = $358;\n                            };\n                            var $351 = $356;\n                            break;\n                        case 'BBL.tip':\n                            var $365 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                            var $351 = $365;\n                            break;\n                    };\n                    var $350 = $351;\n                } else {\n                    var $366 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                    var $350 = $366;\n                };\n                var $334 = $350;\n            };\n            var $332 = $334;\n        };\n        return $332;\n    };\n    const BBL$balance = x0 => x1 => x2 => x3 => BBL$balance$(x0, x1, x2, x3);\n\n    function BBL$insert$(_cmp$3, _key$4, _val$5, _map$6) {\n        var self = _map$6;\n        switch (self._) {\n            case 'BBL.bin':\n                var $368 = self.key;\n                var $369 = self.val;\n                var $370 = self.left;\n                var $371 = self.right;\n                var self = _cmp$3(_key$4)($368);\n                switch (self._) {\n                    case 'Cmp.ltn':\n                        var _new_key$12 = $368;\n                        var _new_val$13 = $369;\n                        var _new_left$14 = BBL$insert$(_cmp$3, _key$4, _val$5, $370);\n                        var _new_right$15 = $371;\n                        var $373 = BBL$balance$(_new_key$12, _new_val$13, _new_left$14, _new_right$15);\n                        var $372 = $373;\n                        break;\n                    case 'Cmp.eql':\n                        var $374 = BBL$node$(_key$4, _val$5, $370, $371);\n                        var $372 = $374;\n                        break;\n                    case 'Cmp.gtn':\n                        var _new_key$12 = $368;\n                        var _new_val$13 = $369;\n                        var _new_left$14 = $370;\n                        var _new_right$15 = BBL$insert$(_cmp$3, _key$4, _val$5, $371);\n                        var $375 = BBL$balance$(_new_key$12, _new_val$13, _new_left$14, _new_right$15);\n                        var $372 = $375;\n                        break;\n                };\n                var $367 = $372;\n                break;\n            case 'BBL.tip':\n                var $376 = BBL$singleton$(_key$4, _val$5);\n                var $367 = $376;\n                break;\n        };\n        return $367;\n    };\n    const BBL$insert = x0 => x1 => x2 => x3 => BBL$insert$(x0, x1, x2, x3);\n\n    function BBL$from_list$go$(_cmp$3, _acc$4, _xs$5) {\n        var BBL$from_list$go$ = (_cmp$3, _acc$4, _xs$5) => ({\n            ctr: 'TCO',\n            arg: [_cmp$3, _acc$4, _xs$5]\n        });\n        var BBL$from_list$go = _cmp$3 => _acc$4 => _xs$5 => BBL$from_list$go$(_cmp$3, _acc$4, _xs$5);\n        var arg = [_cmp$3, _acc$4, _xs$5];\n        while (true) {\n            let [_cmp$3, _acc$4, _xs$5] = arg;\n            var R = (() => {\n                var self = _xs$5;\n                switch (self._) {\n                    case 'List.cons':\n                        var $377 = self.head;\n                        var $378 = self.tail;\n                        var _key$8 = Pair$fst$($377);\n                        var _val$9 = Pair$snd$($377);\n                        var _new_acc$10 = BBL$insert$(_cmp$3, _key$8, _val$9, _acc$4);\n                        var $379 = BBL$from_list$go$(_cmp$3, _new_acc$10, $378);\n                        return $379;\n                    case 'List.nil':\n                        var $380 = _acc$4;\n                        return $380;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const BBL$from_list$go = x0 => x1 => x2 => BBL$from_list$go$(x0, x1, x2);\n\n    function BBL$from_list$(_cmp$3, _xs$4) {\n        var $381 = BBL$from_list$go$(_cmp$3, BBL$tip, _xs$4);\n        return $381;\n    };\n    const BBL$from_list = x0 => x1 => BBL$from_list$(x0, x1);\n    const U16$ltn = a0 => a1 => (a0 < a1);\n    const U16$eql = a0 => a1 => (a0 === a1);\n\n    function U16$cmp$(_a$1, _b$2) {\n        var self = (_a$1 < _b$2);\n        if (self) {\n            var $383 = Cmp$ltn;\n            var $382 = $383;\n        } else {\n            var self = (_a$1 === _b$2);\n            if (self) {\n                var $385 = Cmp$eql;\n                var $384 = $385;\n            } else {\n                var $386 = Cmp$gtn;\n                var $384 = $386;\n            };\n            var $382 = $384;\n        };\n        return $382;\n    };\n    const U16$cmp = x0 => x1 => U16$cmp$(x0, x1);\n\n    function String$cmp$(_a$1, _b$2) {\n        var String$cmp$ = (_a$1, _b$2) => ({\n            ctr: 'TCO',\n            arg: [_a$1, _b$2]\n        });\n        var String$cmp = _a$1 => _b$2 => String$cmp$(_a$1, _b$2);\n        var arg = [_a$1, _b$2];\n        while (true) {\n            let [_a$1, _b$2] = arg;\n            var R = (() => {\n                var self = _a$1;\n                if (self.length === 0) {\n                    var self = _b$2;\n                    if (self.length === 0) {\n                        var $388 = Cmp$eql;\n                        var $387 = $388;\n                    } else {\n                        var $389 = self.charCodeAt(0);\n                        var $390 = self.slice(1);\n                        var $391 = Cmp$ltn;\n                        var $387 = $391;\n                    };\n                    return $387;\n                } else {\n                    var $392 = self.charCodeAt(0);\n                    var $393 = self.slice(1);\n                    var self = _b$2;\n                    if (self.length === 0) {\n                        var $395 = Cmp$gtn;\n                        var $394 = $395;\n                    } else {\n                        var $396 = self.charCodeAt(0);\n                        var $397 = self.slice(1);\n                        var self = U16$cmp$($392, $396);\n                        switch (self._) {\n                            case 'Cmp.ltn':\n                                var $399 = Cmp$ltn;\n                                var $398 = $399;\n                                break;\n                            case 'Cmp.eql':\n                                var $400 = String$cmp$($393, $397);\n                                var $398 = $400;\n                                break;\n                            case 'Cmp.gtn':\n                                var $401 = Cmp$gtn;\n                                var $398 = $401;\n                                break;\n                        };\n                        var $394 = $398;\n                    };\n                    return $394;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$cmp = x0 => x1 => String$cmp$(x0, x1);\n\n    function Map$from_list$(_xs$2) {\n        var $402 = BBL$from_list$(String$cmp, _xs$2);\n        return $402;\n    };\n    const Map$from_list = x0 => Map$from_list$(x0);\n\n    function App$Drawing$App$draw$(_img$1, _state$2) {\n        var self = _state$2;\n        switch (self._) {\n            case 'App.Store.new':\n                var _img$5 = App$Drawing$draw$boards$(_img$1, _state$2);\n                var $404 = DOM$vbox$(Map$from_list$(List$cons$(Pair$new$(\"width\", \"256\"), List$nil)), Map$from_list$(List$nil), _img$5);\n                var $403 = $404;\n                break;\n        };\n        return $403;\n    };\n    const App$Drawing$App$draw = x0 => x1 => App$Drawing$App$draw$(x0, x1);\n    const App$State$global = Pair$snd;\n\n    function IO$(_A$1) {\n        var $405 = null;\n        return $405;\n    };\n    const IO = x0 => IO$(x0);\n\n    function Maybe$(_A$1) {\n        var $406 = null;\n        return $406;\n    };\n    const Maybe = x0 => Maybe$(x0);\n\n    function IO$ask$(_query$2, _param$3, _then$4) {\n        var $407 = ({\n            _: 'IO.ask',\n            'query': _query$2,\n            'param': _param$3,\n            'then': _then$4\n        });\n        return $407;\n    };\n    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);\n\n    function IO$bind$(_a$3, _f$4) {\n        var self = _a$3;\n        switch (self._) {\n            case 'IO.end':\n                var $409 = self.value;\n                var $410 = _f$4($409);\n                var $408 = $410;\n                break;\n            case 'IO.ask':\n                var $411 = self.query;\n                var $412 = self.param;\n                var $413 = self.then;\n                var $414 = IO$ask$($411, $412, (_x$8 => {\n                    var $415 = IO$bind$($413(_x$8), _f$4);\n                    return $415;\n                }));\n                var $408 = $414;\n                break;\n        };\n        return $408;\n    };\n    const IO$bind = x0 => x1 => IO$bind$(x0, x1);\n\n    function IO$end$(_value$2) {\n        var $416 = ({\n            _: 'IO.end',\n            'value': _value$2\n        });\n        return $416;\n    };\n    const IO$end = x0 => IO$end$(x0);\n\n    function IO$monad$(_new$2) {\n        var $417 = _new$2(IO$bind)(IO$end);\n        return $417;\n    };\n    const IO$monad = x0 => IO$monad$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n    const App$pass = IO$monad$((_m$bind$2 => _m$pure$3 => {\n        var $418 = _m$pure$3;\n        return $418;\n    }))(Maybe$none);\n    const Debug$log = a0 => a1 => ((console.log(a0), a1()));\n    const Nat$ltn = a0 => a1 => (a0 < a1);\n    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);\n\n    function Cmp$as_gte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $420 = Bool$false;\n                var $419 = $420;\n                break;\n            case 'Cmp.eql':\n            case 'Cmp.gtn':\n                var $421 = Bool$true;\n                var $419 = $421;\n                break;\n        };\n        return $419;\n    };\n    const Cmp$as_gte = x0 => Cmp$as_gte$(x0);\n\n    function Word$gte$(_a$2, _b$3) {\n        var $422 = Cmp$as_gte$(Word$cmp$(_a$2, _b$3));\n        return $422;\n    };\n    const Word$gte = x0 => x1 => Word$gte$(x0, x1);\n\n    function Word$subber$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $424 = self.pred;\n                var $425 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $427 = self.pred;\n                            var $428 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $430 = Word$i$(Word$subber$(_a$pred$10, $427, Bool$true));\n                                    var $429 = $430;\n                                } else {\n                                    var $431 = Word$o$(Word$subber$(_a$pred$10, $427, Bool$false));\n                                    var $429 = $431;\n                                };\n                                return $429;\n                            });\n                            var $426 = $428;\n                            break;\n                        case 'Word.i':\n                            var $432 = self.pred;\n                            var $433 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $435 = Word$o$(Word$subber$(_a$pred$10, $432, Bool$true));\n                                    var $434 = $435;\n                                } else {\n                                    var $436 = Word$i$(Word$subber$(_a$pred$10, $432, Bool$true));\n                                    var $434 = $436;\n                                };\n                                return $434;\n                            });\n                            var $426 = $433;\n                            break;\n                        case 'Word.e':\n                            var $437 = (_a$pred$8 => {\n                                var $438 = Word$e;\n                                return $438;\n                            });\n                            var $426 = $437;\n                            break;\n                    };\n                    var $426 = $426($424);\n                    return $426;\n                });\n                var $423 = $425;\n                break;\n            case 'Word.i':\n                var $439 = self.pred;\n                var $440 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $442 = self.pred;\n                            var $443 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $445 = Word$o$(Word$subber$(_a$pred$10, $442, Bool$false));\n                                    var $444 = $445;\n                                } else {\n                                    var $446 = Word$i$(Word$subber$(_a$pred$10, $442, Bool$false));\n                                    var $444 = $446;\n                                };\n                                return $444;\n                            });\n                            var $441 = $443;\n                            break;\n                        case 'Word.i':\n                            var $447 = self.pred;\n                            var $448 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $450 = Word$i$(Word$subber$(_a$pred$10, $447, Bool$true));\n                                    var $449 = $450;\n                                } else {\n                                    var $451 = Word$o$(Word$subber$(_a$pred$10, $447, Bool$false));\n                                    var $449 = $451;\n                                };\n                                return $449;\n                            });\n                            var $441 = $448;\n                            break;\n                        case 'Word.e':\n                            var $452 = (_a$pred$8 => {\n                                var $453 = Word$e;\n                                return $453;\n                            });\n                            var $441 = $452;\n                            break;\n                    };\n                    var $441 = $441($439);\n                    return $441;\n                });\n                var $423 = $440;\n                break;\n            case 'Word.e':\n                var $454 = (_b$5 => {\n                    var $455 = Word$e;\n                    return $455;\n                });\n                var $423 = $454;\n                break;\n        };\n        var $423 = $423(_b$3);\n        return $423;\n    };\n    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);\n\n    function Word$sub$(_a$2, _b$3) {\n        var $456 = Word$subber$(_a$2, _b$3, Bool$false);\n        return $456;\n    };\n    const Word$sub = x0 => x1 => Word$sub$(x0, x1);\n\n    function Word$div$go$(_shift$2, _sub_copy$3, _shift_copy$4, _value$5) {\n        var Word$div$go$ = (_shift$2, _sub_copy$3, _shift_copy$4, _value$5) => ({\n            ctr: 'TCO',\n            arg: [_shift$2, _sub_copy$3, _shift_copy$4, _value$5]\n        });\n        var Word$div$go = _shift$2 => _sub_copy$3 => _shift_copy$4 => _value$5 => Word$div$go$(_shift$2, _sub_copy$3, _shift_copy$4, _value$5);\n        var arg = [_shift$2, _sub_copy$3, _shift_copy$4, _value$5];\n        while (true) {\n            let [_shift$2, _sub_copy$3, _shift_copy$4, _value$5] = arg;\n            var R = (() => {\n                var self = Word$gte$(_sub_copy$3, _shift_copy$4);\n                if (self) {\n                    var _mask$6 = Word$shift_left$(_shift$2, Word$inc$(Word$to_zero$(_sub_copy$3)));\n                    var $457 = Pair$new$(Bool$true, Word$or$(_value$5, _mask$6));\n                    var self = $457;\n                } else {\n                    var $458 = Pair$new$(Bool$false, _value$5);\n                    var self = $458;\n                };\n                switch (self._) {\n                    case 'Pair.new':\n                        var $459 = self.fst;\n                        var $460 = self.snd;\n                        var self = _shift$2;\n                        if (self === 0n) {\n                            var $462 = $460;\n                            var $461 = $462;\n                        } else {\n                            var $463 = (self - 1n);\n                            var _new_shift_copy$9 = Word$shift_right$(1n, _shift_copy$4);\n                            var self = $459;\n                            if (self) {\n                                var $465 = Word$div$go$($463, Word$sub$(_sub_copy$3, _shift_copy$4), _new_shift_copy$9, $460);\n                                var $464 = $465;\n                            } else {\n                                var $466 = Word$div$go$($463, _sub_copy$3, _new_shift_copy$9, $460);\n                                var $464 = $466;\n                            };\n                            var $461 = $464;\n                        };\n                        return $461;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$div$go = x0 => x1 => x2 => x3 => Word$div$go$(x0, x1, x2, x3);\n\n    function Word$div$(_a$2, _b$3) {\n        var _a_bits$4 = Word$bit_length$(_a$2);\n        var _b_bits$5 = Word$bit_length$(_b$3);\n        var self = (_a_bits$4 < _b_bits$5);\n        if (self) {\n            var $468 = Word$to_zero$(_a$2);\n            var $467 = $468;\n        } else {\n            var _shift$6 = (_a_bits$4 - _b_bits$5 <= 0n ? 0n : _a_bits$4 - _b_bits$5);\n            var _shift_copy$7 = Word$shift_left$(_shift$6, _b$3);\n            var $469 = Word$div$go$(_shift$6, _a$2, _shift_copy$7, Word$to_zero$(_a$2));\n            var $467 = $469;\n        };\n        return $467;\n    };\n    const Word$div = x0 => x1 => Word$div$(x0, x1);\n    const U32$div = a0 => a1 => ((a0 / a1) >>> 0);\n\n    function Word$mod$(_a$2, _b$3) {\n        var _q$4 = Word$div$(_a$2, _b$3);\n        var $470 = Word$sub$(_a$2, Word$mul$(_b$3, _q$4));\n        return $470;\n    };\n    const Word$mod = x0 => x1 => Word$mod$(x0, x1);\n    const U32$mod = a0 => a1 => (a0 % a1);\n    const U32$sub = a0 => a1 => ((a0 - a1) >>> 0);\n\n    function VoxBox$Draw$square$(_x$1, _y$2, _z$3, _w$4, _h$5, _col$6, _img$7) {\n        var _siz$8 = ((_w$4 * _h$5) >>> 0);\n        var _w_2$9 = ((_w$4 / 2) >>> 0);\n        var _h_2$10 = ((_h$5 / 2) >>> 0);\n        var $471 = (() => {\n            var $472 = _img$7;\n            var $473 = 0;\n            var $474 = _siz$8;\n            let _pix$12 = $472;\n            for (let _idx$11 = $473; _idx$11 < $474; ++_idx$11) {\n                var _v_x$13 = (_idx$11 % _w$4);\n                var _v_y$14 = ((_idx$11 / _h$5) >>> 0);\n                var _p_x$15 = ((((_x$1 + _v_x$13) >>> 0) - _w_2$9) >>> 0);\n                var _p_y$16 = ((((_y$2 + _v_y$14) >>> 0) - _h_2$10) >>> 0);\n                var _pos$17 = ((0 | _p_x$15 | (_p_y$16 << 12) | (_z$3 << 24)));\n                var _pix$18 = ((_pix$12.buffer[_pix$12.length * 2] = _pos$17, _pix$12.buffer[_pix$12.length * 2 + 1] = _col$6, _pix$12.length++, _pix$12));\n                var $472 = _pix$18;\n                _pix$12 = $472;\n            };\n            return _pix$12;\n        })();\n        return $471;\n    };\n    const VoxBox$Draw$square = x0 => x1 => x2 => x3 => x4 => x5 => x6 => VoxBox$Draw$square$(x0, x1, x2, x3, x4, x5, x6);\n\n    function App$Drawing$draw$pencil$(_local$1) {\n        var $475 = ((console.log(\"push\"), (_$2 => {\n            var self = _local$1;\n            switch (self._) {\n                case 'App.Drawing.State.local.new':\n                    var $477 = self.style;\n                    var $478 = $477;\n                    var _style$3 = $478;\n                    break;\n            };\n            var self = _style$3;\n            switch (self._) {\n                case 'App.Drawing.Style.new':\n                    var $479 = self.size;\n                    var $480 = $479;\n                    var _size$4 = $480;\n                    break;\n            };\n            var self = _local$1;\n            switch (self._) {\n                case 'App.Drawing.State.local.new':\n                    var $481 = self.whiteboard;\n                    var $482 = $481;\n                    var _wb$5 = $482;\n                    break;\n            };\n            var self = _local$1;\n            switch (self._) {\n                case 'App.Drawing.State.local.new':\n                    var $483 = self.env_info;\n                    var $484 = $483;\n                    var self = $484;\n                    break;\n            };\n            switch (self._) {\n                case 'App.EnvInfo.new':\n                    var $485 = self.mouse_pos;\n                    var $486 = $485;\n                    var _info$6 = $486;\n                    break;\n            };\n            var self = _style$3;\n            switch (self._) {\n                case 'App.Drawing.Style.new':\n                    var $487 = self.color;\n                    var $488 = $487;\n                    var _color$7 = $488;\n                    break;\n            };\n            var _new_board$8 = VoxBox$Draw$square$((() => {\n                var self = _info$6;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $489 = self.fst;\n                        var $490 = $489;\n                        return $490;\n                };\n            })(), (() => {\n                var self = _info$6;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $491 = self.snd;\n                        var $492 = $491;\n                        return $492;\n                };\n            })(), 0, _size$4, _size$4, _color$7, (() => {\n                var self = _wb$5;\n                switch (self._) {\n                    case 'App.Drawing.Whiteboard.new':\n                        var $493 = self.live;\n                        var $494 = $493;\n                        return $494;\n                };\n            })());\n            var self = _wb$5;\n            switch (self._) {\n                case 'App.Drawing.Whiteboard.new':\n                    var $495 = self.past;\n                    var $496 = self.future;\n                    var $497 = App$Drawing$Whiteboard$new$($495, _new_board$8, $496);\n                    var _new_wb$9 = $497;\n                    break;\n            };\n            var self = _local$1;\n            switch (self._) {\n                case 'App.Drawing.State.local.new':\n                    var $498 = self.input;\n                    var $499 = self.user;\n                    var $500 = self.drawing;\n                    var $501 = self.style;\n                    var $502 = self.env_info;\n                    var $503 = App$Drawing$State$local$new$($498, $499, $500, $501, _new_wb$9, $502);\n                    var $476 = $503;\n                    break;\n            };\n            return $476;\n        })()));\n        return $475;\n    };\n    const App$Drawing$draw$pencil = x0 => App$Drawing$draw$pencil$(x0);\n\n    function Maybe$some$(_value$2) {\n        var $504 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $504;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n\n    function App$set_local$(_value$2) {\n        var $505 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n            var $506 = _m$pure$4;\n            return $506;\n        }))(Maybe$some$(_value$2));\n        return $505;\n    };\n    const App$set_local = x0 => App$set_local$(x0);\n\n    function List$fold$(_list$2, _nil$4, _cons$5) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.cons':\n                var $508 = self.head;\n                var $509 = self.tail;\n                var $510 = _cons$5($508)(List$fold$($509, _nil$4, _cons$5));\n                var $507 = $510;\n                break;\n            case 'List.nil':\n                var $511 = _nil$4;\n                var $507 = $511;\n                break;\n        };\n        return $507;\n    };\n    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);\n\n    function Either$(_A$1, _B$2) {\n        var $512 = null;\n        return $512;\n    };\n    const Either = x0 => x1 => Either$(x0, x1);\n\n    function Either$left$(_value$3) {\n        var $513 = ({\n            _: 'Either.left',\n            'value': _value$3\n        });\n        return $513;\n    };\n    const Either$left = x0 => Either$left$(x0);\n\n    function Either$right$(_value$3) {\n        var $514 = ({\n            _: 'Either.right',\n            'value': _value$3\n        });\n        return $514;\n    };\n    const Either$right = x0 => Either$right$(x0);\n\n    function Nat$sub_rem$(_n$1, _m$2) {\n        var Nat$sub_rem$ = (_n$1, _m$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2]\n        });\n        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);\n        var arg = [_n$1, _m$2];\n        while (true) {\n            let [_n$1, _m$2] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $515 = Either$left$(_n$1);\n                    return $515;\n                } else {\n                    var $516 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $518 = Either$right$(Nat$succ$($516));\n                        var $517 = $518;\n                    } else {\n                        var $519 = (self - 1n);\n                        var $520 = Nat$sub_rem$($519, $516);\n                        var $517 = $520;\n                    };\n                    return $517;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);\n\n    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {\n        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _d$3]\n        });\n        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);\n        var arg = [_n$1, _m$2, _d$3];\n        while (true) {\n            let [_n$1, _m$2, _d$3] = arg;\n            var R = (() => {\n                var self = Nat$sub_rem$(_n$1, _m$2);\n                switch (self._) {\n                    case 'Either.left':\n                        var $521 = self.value;\n                        var $522 = Nat$div_mod$go$($521, _m$2, Nat$succ$(_d$3));\n                        return $522;\n                    case 'Either.right':\n                        var $523 = Pair$new$(_d$3, _n$1);\n                        return $523;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);\n    const Nat$div_mod = a0 => a1 => (({\n        _: 'Pair.new',\n        'fst': a0 / a1,\n        'snd': a0 % a1\n    }));\n\n    function List$(_A$1) {\n        var $524 = null;\n        return $524;\n    };\n    const List = x0 => List$(x0);\n\n    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {\n        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_base$1, _nat$2, _res$3]\n        });\n        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);\n        var arg = [_base$1, _nat$2, _res$3];\n        while (true) {\n            let [_base$1, _nat$2, _res$3] = arg;\n            var R = (() => {\n                var self = (({\n                    _: 'Pair.new',\n                    'fst': _nat$2 / _base$1,\n                    'snd': _nat$2 % _base$1\n                }));\n                switch (self._) {\n                    case 'Pair.new':\n                        var $525 = self.fst;\n                        var $526 = self.snd;\n                        var self = $525;\n                        if (self === 0n) {\n                            var $528 = List$cons$($526, _res$3);\n                            var $527 = $528;\n                        } else {\n                            var $529 = (self - 1n);\n                            var $530 = Nat$to_base$go$(_base$1, $525, List$cons$($526, _res$3));\n                            var $527 = $530;\n                        };\n                        return $527;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);\n\n    function Nat$to_base$(_base$1, _nat$2) {\n        var $531 = Nat$to_base$go$(_base$1, _nat$2, List$nil);\n        return $531;\n    };\n    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);\n    const String$nil = '';\n\n    function String$cons$(_head$1, _tail$2) {\n        var $532 = (String.fromCharCode(_head$1) + _tail$2);\n        return $532;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n\n    function Nat$mod$go$(_n$1, _m$2, _r$3) {\n        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _r$3]\n        });\n        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);\n        var arg = [_n$1, _m$2, _r$3];\n        while (true) {\n            let [_n$1, _m$2, _r$3] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $533 = Nat$mod$go$(_n$1, _r$3, _m$2);\n                    return $533;\n                } else {\n                    var $534 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $536 = _r$3;\n                        var $535 = $536;\n                    } else {\n                        var $537 = (self - 1n);\n                        var $538 = Nat$mod$go$($537, $534, Nat$succ$(_r$3));\n                        var $535 = $538;\n                    };\n                    return $535;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);\n    const Nat$mod = a0 => a1 => (a0 % a1);\n    const Bool$and = a0 => a1 => (a0 && a1);\n    const Nat$gtn = a0 => a1 => (a0 > a1);\n    const Nat$lte = a0 => a1 => (a0 <= a1);\n\n    function List$at$(_index$2, _list$3) {\n        var List$at$ = (_index$2, _list$3) => ({\n            ctr: 'TCO',\n            arg: [_index$2, _list$3]\n        });\n        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);\n        var arg = [_index$2, _list$3];\n        while (true) {\n            let [_index$2, _list$3] = arg;\n            var R = (() => {\n                var self = _list$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $539 = self.head;\n                        var $540 = self.tail;\n                        var self = _index$2;\n                        if (self === 0n) {\n                            var $542 = Maybe$some$($539);\n                            var $541 = $542;\n                        } else {\n                            var $543 = (self - 1n);\n                            var $544 = List$at$($543, $540);\n                            var $541 = $544;\n                        };\n                        return $541;\n                    case 'List.nil':\n                        var $545 = Maybe$none;\n                        return $545;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$at = x0 => x1 => List$at$(x0, x1);\n\n    function Nat$show_digit$(_base$1, _n$2) {\n        var _m$3 = (_n$2 % _base$1);\n        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n        var self = ((_base$1 > 0n) && (_base$1 <= 64n));\n        if (self) {\n            var self = List$at$(_m$3, _base64$4);\n            switch (self._) {\n                case 'Maybe.some':\n                    var $548 = self.value;\n                    var $549 = $548;\n                    var $547 = $549;\n                    break;\n                case 'Maybe.none':\n                    var $550 = 35;\n                    var $547 = $550;\n                    break;\n            };\n            var $546 = $547;\n        } else {\n            var $551 = 35;\n            var $546 = $551;\n        };\n        return $546;\n    };\n    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);\n\n    function Nat$to_string_base$(_base$1, _nat$2) {\n        var $552 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {\n            var $553 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);\n            return $553;\n        }));\n        return $552;\n    };\n    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);\n\n    function Nat$show$(_n$1) {\n        var $554 = Nat$to_string_base$(10n, _n$1);\n        return $554;\n    };\n    const Nat$show = x0 => Nat$show$(x0);\n    const List$length = a0 => (list_length(a0));\n\n    function App$Drawing$Action$local$save$(_local$1) {\n        var self = _local$1;\n        switch (self._) {\n            case 'App.Drawing.State.local.new':\n                var $556 = self.whiteboard;\n                var self = $556;\n                switch (self._) {\n                    case 'App.Drawing.Whiteboard.new':\n                        var $558 = self.past;\n                        var $559 = self.live;\n                        var _past$11 = List$cons$($559, $558);\n                        var _live$12 = $559;\n                        var _future$13 = List$nil;\n                        var $560 = ((console.log(Nat$show$((list_length(_past$11)))), (_$14 => {\n                            var _whiteboard$15 = App$Drawing$Whiteboard$new$(_past$11, _live$12, _future$13);\n                            var self = _local$1;\n                            switch (self._) {\n                                case 'App.Drawing.State.local.new':\n                                    var $562 = self.input;\n                                    var $563 = self.user;\n                                    var $564 = self.drawing;\n                                    var $565 = self.style;\n                                    var $566 = self.env_info;\n                                    var $567 = App$Drawing$State$local$new$($562, $563, $564, $565, _whiteboard$15, $566);\n                                    var $561 = $567;\n                                    break;\n                            };\n                            return $561;\n                        })()));\n                        var $557 = $560;\n                        break;\n                };\n                var $555 = $557;\n                break;\n        };\n        return $555;\n    };\n    const App$Drawing$Action$local$save = x0 => App$Drawing$Action$local$save$(x0);\n\n    function List$tail$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $569 = self.tail;\n                var $570 = $569;\n                var $568 = $570;\n                break;\n            case 'List.nil':\n                var $571 = List$nil;\n                var $568 = $571;\n                break;\n        };\n        return $568;\n    };\n    const List$tail = x0 => List$tail$(x0);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function Maybe$default$(_m$2, _a$3) {\n        var self = _m$2;\n        switch (self._) {\n            case 'Maybe.some':\n                var $573 = self.value;\n                var $574 = $573;\n                var $572 = $574;\n                break;\n            case 'Maybe.none':\n                var $575 = _a$3;\n                var $572 = $575;\n                break;\n        };\n        return $572;\n    };\n    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);\n\n    function List$head$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $577 = self.head;\n                var $578 = Maybe$some$($577);\n                var $576 = $578;\n                break;\n            case 'List.nil':\n                var $579 = Maybe$none;\n                var $576 = $579;\n                break;\n        };\n        return $576;\n    };\n    const List$head = x0 => List$head$(x0);\n\n    function App$Drawing$Action$local$ctrl_z$(_local$1) {\n        var self = _local$1;\n        switch (self._) {\n            case 'App.Drawing.State.local.new':\n                var $581 = self.whiteboard;\n                var self = $581;\n                switch (self._) {\n                    case 'App.Drawing.Whiteboard.new':\n                        var $583 = self.past;\n                        var $584 = self.live;\n                        var $585 = self.future;\n                        var _past$11 = List$tail$($583);\n                        var self = _past$11;\n                        switch (self._) {\n                            case 'List.nil':\n                                var $587 = ((console.log(\"nil\"), (_$12 => {\n                                    var $588 = _local$1;\n                                    return $588;\n                                })()));\n                                var $586 = $587;\n                                break;\n                            case 'List.cons':\n                                var $589 = ((console.log(\"cons\"), (_$14 => {\n                                    var _square$15 = VoxBox$Draw$square$(126, 126, 0, 20, 20, ((0 | 0 | (255 << 8) | (0 << 16) | (125 << 24))), $584);\n                                    var $590 = ((console.log((\"past_length: \" + Nat$show$((list_length(_past$11))))), (_$16 => {\n                                        var _live$17 = Maybe$default$(List$head$(_past$11), _square$15);\n                                        var _cleared$18 = VoxBox$clear$(_live$17);\n                                        var _live$19 = VoxBox$Draw$image$(0, 0, 0, _live$17, _cleared$18);\n                                        var _future$20 = List$cons$($584, $585);\n                                        var _wb$21 = App$Drawing$Whiteboard$new$(_past$11, _live$19, _future$20);\n                                        var self = _local$1;\n                                        switch (self._) {\n                                            case 'App.Drawing.State.local.new':\n                                                var $592 = self.input;\n                                                var $593 = self.user;\n                                                var $594 = self.drawing;\n                                                var $595 = self.style;\n                                                var $596 = self.env_info;\n                                                var $597 = App$Drawing$State$local$new$($592, $593, $594, $595, _wb$21, $596);\n                                                var _new_local$22 = $597;\n                                                break;\n                                        };\n                                        var $591 = _new_local$22;\n                                        return $591;\n                                    })()));\n                                    return $590;\n                                })()));\n                                var $586 = $589;\n                                break;\n                        };\n                        var $582 = $586;\n                        break;\n                };\n                var $580 = $582;\n                break;\n        };\n        return $580;\n    };\n    const App$Drawing$Action$local$ctrl_z = x0 => App$Drawing$Action$local$ctrl_z$(x0);\n\n    function App$Drawing$when$boards$(_event$1, _state$2) {\n        var self = _state$2;\n        switch (self._) {\n            case 'App.Store.new':\n                var $599 = self.local;\n                var $600 = $599;\n                var _local$3 = $600;\n                break;\n        };\n        var self = _event$1;\n        switch (self._) {\n            case 'App.Event.frame':\n                var $601 = self.info;\n                var self = _local$3;\n                switch (self._) {\n                    case 'App.Drawing.State.local.new':\n                        var $603 = self.drawing;\n                        var $604 = $603;\n                        var self = $604;\n                        break;\n                };\n                if (self) {\n                    var $605 = App$Drawing$draw$pencil$(_local$3);\n                    var _new_local$6 = $605;\n                } else {\n                    var $606 = _local$3;\n                    var _new_local$6 = $606;\n                };\n                var self = _local$3;\n                switch (self._) {\n                    case 'App.Drawing.State.local.new':\n                        var $607 = self.input;\n                        var $608 = self.user;\n                        var $609 = self.drawing;\n                        var $610 = self.style;\n                        var $611 = self.whiteboard;\n                        var $612 = App$Drawing$State$local$new$($607, $608, $609, $610, $611, $601);\n                        var _new_local$7 = $612;\n                        break;\n                };\n                var $602 = App$set_local$(_new_local$7);\n                var $598 = $602;\n                break;\n            case 'App.Event.key_down':\n                var $613 = self.code;\n                var self = ($613 === 65);\n                if (self) {\n                    var self = _local$3;\n                    switch (self._) {\n                        case 'App.Drawing.State.local.new':\n                            var $616 = self.style;\n                            var $617 = $616;\n                            var _style$6 = $617;\n                            break;\n                    };\n                    var self = _style$6;\n                    switch (self._) {\n                        case 'App.Drawing.Style.new':\n                            var $618 = self.tool;\n                            var $619 = self.size;\n                            var $620 = App$Drawing$Style$new$($618, $619, ((0 | 0 | (0 << 8) | (255 << 16) | (255 << 24))));\n                            var _style$7 = $620;\n                            break;\n                    };\n                    var self = _local$3;\n                    switch (self._) {\n                        case 'App.Drawing.State.local.new':\n                            var $621 = self.input;\n                            var $622 = self.user;\n                            var $623 = self.drawing;\n                            var $624 = self.whiteboard;\n                            var $625 = self.env_info;\n                            var $626 = App$Drawing$State$local$new$($621, $622, $623, _style$7, $624, $625);\n                            var _new_local$8 = $626;\n                            break;\n                    };\n                    var $615 = App$set_local$(_new_local$8);\n                    var $614 = $615;\n                } else {\n                    var self = ($613 === 83);\n                    if (self) {\n                        var self = _local$3;\n                        switch (self._) {\n                            case 'App.Drawing.State.local.new':\n                                var $629 = self.style;\n                                var $630 = $629;\n                                var _style$6 = $630;\n                                break;\n                        };\n                        var self = _style$6;\n                        switch (self._) {\n                            case 'App.Drawing.Style.new':\n                                var $631 = self.tool;\n                                var $632 = self.size;\n                                var $633 = App$Drawing$Style$new$($631, $632, ((0 | 255 | (0 << 8) | (0 << 16) | (255 << 24))));\n                                var _style$7 = $633;\n                                break;\n                        };\n                        var self = _local$3;\n                        switch (self._) {\n                            case 'App.Drawing.State.local.new':\n                                var $634 = self.input;\n                                var $635 = self.user;\n                                var $636 = self.drawing;\n                                var $637 = self.whiteboard;\n                                var $638 = self.env_info;\n                                var $639 = App$Drawing$State$local$new$($634, $635, $636, _style$7, $637, $638);\n                                var _new_local$8 = $639;\n                                break;\n                        };\n                        var $628 = App$set_local$(_new_local$8);\n                        var $627 = $628;\n                    } else {\n                        var self = ($613 === 90);\n                        if (self) {\n                            var $641 = App$set_local$(App$Drawing$Action$local$ctrl_z$(_local$3));\n                            var $640 = $641;\n                        } else {\n                            var $642 = App$pass;\n                            var $640 = $642;\n                        };\n                        var $627 = $640;\n                    };\n                    var $614 = $627;\n                };\n                var $598 = $614;\n                break;\n            case 'App.Event.init':\n            case 'App.Event.key_up':\n            case 'App.Event.mouse_move':\n            case 'App.Event.mouse_over':\n            case 'App.Event.mouse_click':\n            case 'App.Event.input':\n                var $643 = App$pass;\n                var $598 = $643;\n                break;\n            case 'App.Event.mouse_down':\n                var self = _local$3;\n                switch (self._) {\n                    case 'App.Drawing.State.local.new':\n                        var $645 = self.input;\n                        var $646 = self.user;\n                        var $647 = self.style;\n                        var $648 = self.whiteboard;\n                        var $649 = self.env_info;\n                        var $650 = App$Drawing$State$local$new$($645, $646, Bool$true, $647, $648, $649);\n                        var _new_local$6 = $650;\n                        break;\n                };\n                var $644 = App$set_local$(_new_local$6);\n                var $598 = $644;\n                break;\n            case 'App.Event.mouse_up':\n                var self = _local$3;\n                switch (self._) {\n                    case 'App.Drawing.State.local.new':\n                        var $652 = self.input;\n                        var $653 = self.user;\n                        var $654 = self.style;\n                        var $655 = self.whiteboard;\n                        var $656 = self.env_info;\n                        var $657 = App$Drawing$State$local$new$($652, $653, Bool$false, $654, $655, $656);\n                        var _new_local$6 = $657;\n                        break;\n                };\n                var _new_local$7 = App$Drawing$Action$local$save$(_new_local$6);\n                var $651 = App$set_local$(_new_local$7);\n                var $598 = $651;\n                break;\n        };\n        return $598;\n    };\n    const App$Drawing$when$boards = x0 => x1 => App$Drawing$when$boards$(x0, x1);\n\n    function App$Drawing$App$when$(_event$1, _state$2) {\n        var self = _state$2;\n        switch (self._) {\n            case 'App.Store.new':\n                var $659 = self.global;\n                var $660 = $659;\n                var self = $660;\n                break;\n        };\n        switch (self._) {\n            case 'App.Drawing.State.global.new':\n                var $661 = self.stage;\n                var $662 = $661;\n                var _stage$3 = $662;\n                break;\n        };\n        var self = _stage$3;\n        switch (self._) {\n            case 'App.Drawing.Stage.start':\n            case 'App.Drawing.Stage.menu':\n                var $663 = App$pass;\n                var $658 = $663;\n                break;\n            case 'App.Drawing.Stage.boards':\n                var $664 = App$Drawing$when$boards$(_event$1, _state$2);\n                var $658 = $664;\n                break;\n        };\n        return $658;\n    };\n    const App$Drawing$App$when = x0 => x1 => App$Drawing$App$when$(x0, x1);\n\n    function App$Drawing$App$tick$(_tick$1, _glob$2) {\n        var $665 = _glob$2;\n        return $665;\n    };\n    const App$Drawing$App$tick = x0 => x1 => App$Drawing$App$tick$(x0, x1);\n\n    function App$Drawing$App$post$(_time$1, _room$2, _addr$3, _data$4, _glob$5) {\n        var $666 = _glob$5;\n        return $666;\n    };\n    const App$Drawing$App$post = x0 => x1 => x2 => x3 => x4 => App$Drawing$App$post$(x0, x1, x2, x3, x4);\n\n    function App$new$(_init$2, _draw$3, _when$4, _tick$5, _post$6) {\n        var $667 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4,\n            'tick': _tick$5,\n            'post': _post$6\n        });\n        return $667;\n    };\n    const App$new = x0 => x1 => x2 => x3 => x4 => App$new$(x0, x1, x2, x3, x4);\n    const App$Drawing = (() => {\n        var _img$1 = VoxBox$alloc_capacity$(((65536 * 8) >>> 0));\n        var _init$2 = App$Drawing$App$init$(_img$1);\n        var _draw$3 = App$Drawing$App$draw(_img$1);\n        var _when$4 = App$Drawing$App$when;\n        var _tick$5 = App$Drawing$App$tick;\n        var _post$6 = App$Drawing$App$post;\n        var $668 = App$new$(_init$2, _draw$3, _when$4, _tick$5, _post$6);\n        return $668;\n    })();\n    return {\n        'Buffer32.new': Buffer32$new,\n        'Array': Array,\n        'Array.tip': Array$tip,\n        'Array.tie': Array$tie,\n        'Array.alloc': Array$alloc,\n        'U32.new': U32$new,\n        'Word': Word,\n        'Word.e': Word$e,\n        'Word.o': Word$o,\n        'Word.zero': Word$zero,\n        'Nat.succ': Nat$succ,\n        'Nat.zero': Nat$zero,\n        'U32.zero': U32$zero,\n        'Buffer32.alloc': Buffer32$alloc,\n        'Word.bit_length.go': Word$bit_length$go,\n        'Word.bit_length': Word$bit_length,\n        'U32.bit_length': U32$bit_length,\n        'Word.i': Word$i,\n        'Bool.false': Bool$false,\n        'Bool.true': Bool$true,\n        'Word.shift_left.one.go': Word$shift_left$one$go,\n        'Word.shift_left.one': Word$shift_left$one,\n        'Word.shift_left': Word$shift_left,\n        'Word.adder': Word$adder,\n        'Word.add': Word$add,\n        'Word.mul.go': Word$mul$go,\n        'Word.to_zero': Word$to_zero,\n        'Word.mul': Word$mul,\n        'U32.mul': U32$mul,\n        'Nat.apply': Nat$apply,\n        'Word.inc': Word$inc,\n        'Nat.to_word': Nat$to_word,\n        'Nat.to_u32': Nat$to_u32,\n        'VoxBox.new': VoxBox$new,\n        'VoxBox.alloc_capacity': VoxBox$alloc_capacity,\n        'App.Drawing.Constants.room': App$Drawing$Constants$room,\n        'BBL.tip': BBL$tip,\n        'Map.new': Map$new,\n        'App.Drawing.Phase.active': App$Drawing$Phase$active,\n        'List.nil': List$nil,\n        'BBL': BBL,\n        'Map': Map,\n        'App.Drawing.Stage.boards': App$Drawing$Stage$boards,\n        'App.EnvInfo.new': App$EnvInfo$new,\n        'Pair.new': Pair$new,\n        'U32.from_nat': U32$from_nat,\n        'App.Drawing.Tool.pencil': App$Drawing$Tool$pencil,\n        'Word.or': Word$or,\n        'U32.or': U32$or,\n        'Word.fold': Word$fold,\n        'Nat.add': Nat$add,\n        'Nat.mul': Nat$mul,\n        'Word.to_nat': Word$to_nat,\n        'Word.shl': Word$shl,\n        'U32.shl': U32$shl,\n        'Col32.new': Col32$new,\n        'App.Drawing.Whiteboard.new': App$Drawing$Whiteboard$new,\n        'List.cons': List$cons,\n        'App.Drawing.Style.new': App$Drawing$Style$new,\n        'App.Store.new': App$Store$new,\n        'App.State.new': App$State$new,\n        'App.Drawing.State': App$Drawing$State,\n        'App.Drawing.State.local.new': App$Drawing$State$local$new,\n        'App.Drawing.State.global.new': App$Drawing$State$global$new,\n        'App.Drawing.App.init': App$Drawing$App$init,\n        'Pair.fst': Pair$fst,\n        'App.State.local': App$State$local,\n        'VoxBox.set_length': VoxBox$set_length,\n        'VoxBox.clear': VoxBox$clear,\n        'VoxBox.get_len': VoxBox$get_len,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.eql': Word$eql,\n        'U32.eql': U32$eql,\n        'U32.inc': U32$inc,\n        'U32.for': U32$for,\n        'Word.trim': Word$trim,\n        'Unit.new': Unit$new,\n        'Array.extract_tip': Array$extract_tip,\n        'Pair': Pair,\n        'Array.extract_tie': Array$extract_tie,\n        'Word.foldl': Word$foldl,\n        'Array.get': Array$get,\n        'Buffer32.get': Buffer32$get,\n        'VoxBox.get_pos': VoxBox$get_pos,\n        'U32.add': U32$add,\n        'VoxBox.get_col': VoxBox$get_col,\n        'Word.and': Word$and,\n        'U32.and': U32$and,\n        'Word.shift_right.one.go': Word$shift_right$one$go,\n        'Word.shift_right.one': Word$shift_right$one,\n        'Word.shift_right': Word$shift_right,\n        'Word.shr': Word$shr,\n        'U32.shr': U32$shr,\n        'Pos32.new': Pos32$new,\n        'Array.mut': Array$mut,\n        'Array.set': Array$set,\n        'Buffer32.set': Buffer32$set,\n        'VoxBox.set_pos': VoxBox$set_pos,\n        'VoxBox.set_col': VoxBox$set_col,\n        'VoxBox.push': VoxBox$push,\n        'VoxBox.Draw.image': VoxBox$Draw$image,\n        'App.Drawing.draw.boards': App$Drawing$draw$boards,\n        'DOM.vbox': DOM$vbox,\n        'Pair.snd': Pair$snd,\n        'BBL.bin': BBL$bin,\n        'BBL.singleton': BBL$singleton,\n        'BBL.size': BBL$size,\n        'BBL.w': BBL$w,\n        'Cmp.as_ltn': Cmp$as_ltn,\n        'Word.ltn': Word$ltn,\n        'U32.ltn': U32$ltn,\n        'BBL.node': BBL$node,\n        'Cmp.as_gtn': Cmp$as_gtn,\n        'Word.gtn': Word$gtn,\n        'U32.gtn': U32$gtn,\n        'BBL.balance': BBL$balance,\n        'BBL.insert': BBL$insert,\n        'BBL.from_list.go': BBL$from_list$go,\n        'BBL.from_list': BBL$from_list,\n        'U16.ltn': U16$ltn,\n        'U16.eql': U16$eql,\n        'U16.cmp': U16$cmp,\n        'String.cmp': String$cmp,\n        'Map.from_list': Map$from_list,\n        'App.Drawing.App.draw': App$Drawing$App$draw,\n        'App.State.global': App$State$global,\n        'IO': IO,\n        'Maybe': Maybe,\n        'IO.ask': IO$ask,\n        'IO.bind': IO$bind,\n        'IO.end': IO$end,\n        'IO.monad': IO$monad,\n        'Maybe.none': Maybe$none,\n        'App.pass': App$pass,\n        'Debug.log': Debug$log,\n        'Nat.ltn': Nat$ltn,\n        'Nat.sub': Nat$sub,\n        'Cmp.as_gte': Cmp$as_gte,\n        'Word.gte': Word$gte,\n        'Word.subber': Word$subber,\n        'Word.sub': Word$sub,\n        'Word.div.go': Word$div$go,\n        'Word.div': Word$div,\n        'U32.div': U32$div,\n        'Word.mod': Word$mod,\n        'U32.mod': U32$mod,\n        'U32.sub': U32$sub,\n        'VoxBox.Draw.square': VoxBox$Draw$square,\n        'App.Drawing.draw.pencil': App$Drawing$draw$pencil,\n        'Maybe.some': Maybe$some,\n        'App.set_local': App$set_local,\n        'List.fold': List$fold,\n        'Either': Either,\n        'Either.left': Either$left,\n        'Either.right': Either$right,\n        'Nat.sub_rem': Nat$sub_rem,\n        'Nat.div_mod.go': Nat$div_mod$go,\n        'Nat.div_mod': Nat$div_mod,\n        'List': List,\n        'Nat.to_base.go': Nat$to_base$go,\n        'Nat.to_base': Nat$to_base,\n        'String.nil': String$nil,\n        'String.cons': String$cons,\n        'Nat.mod.go': Nat$mod$go,\n        'Nat.mod': Nat$mod,\n        'Bool.and': Bool$and,\n        'Nat.gtn': Nat$gtn,\n        'Nat.lte': Nat$lte,\n        'List.at': List$at,\n        'Nat.show_digit': Nat$show_digit,\n        'Nat.to_string_base': Nat$to_string_base,\n        'Nat.show': Nat$show,\n        'List.length': List$length,\n        'App.Drawing.Action.local.save': App$Drawing$Action$local$save,\n        'List.tail': List$tail,\n        'String.concat': String$concat,\n        'Maybe.default': Maybe$default,\n        'List.head': List$head,\n        'App.Drawing.Action.local.ctrl_z': App$Drawing$Action$local$ctrl_z,\n        'App.Drawing.when.boards': App$Drawing$when$boards,\n        'App.Drawing.App.when': App$Drawing$App$when,\n        'App.Drawing.App.tick': App$Drawing$App$tick,\n        'App.Drawing.App.post': App$Drawing$App$post,\n        'App.new': App$new,\n        'App.Drawing': App$Drawing,\n    };\n})();"],"sourceRoot":""}