Test.main: IO(Unit)
  let map = {}
  let sum = 0
  let lim = 200000
  for i from 0 to lim with map:
    map{Nat.show(i)} <- i
  for i from 0 to lim with sum:
    sum + (map{Nat.show(i)} <> 0)
  IO.print(Nat.show(sum))

Test: IO(Unit)
  IO {
    let name = "Test.main"
    IO.print("Compiling "|name|" to Scheme...")
    get defs = Kind.Synth.one(name, Kind.Map.new!)
    case defs {
      none: IO.print("Something is wrong.")
      some: IO {
        let defs = Kind.Comp.Defs.compile(defs.value)
        let file = Kind.Comp.Target.Scheme(defs)|"(run_io ("|name|"))\n"
        IO.print(file)
        IO.set_file("./main.scm", file)
      }
    }
  }
  //Test.main
