App.KL.Game.Board.Creature.change_hp(
  value: I32
  pos: Hexagonal.Axial
  board: App.KL.Game.Board
): Pair(I32, App.KL.Game.Board)

  creature = App.KL.Game.Board.Creature.get(pos, board)
  case creature { 
    none:
      board = App.KL.Game.Board.Creature.modify_at(App.KL.Game.Board.Creature.change_hp_aux(value), pos, board)
      {value, board}
    some:
      open creature.value as creature
      open creature.hero as hero
      if I32.eql(0, creature.value@hp) then
        {+0#32, App.KL.Game.Board.Creature.del(pos, board)}
      else
        new_hp = I32.max((creature.value@hp + value) , 0)
        new_hp = I32.min(new_hp, hero.max_hp)
        hp_diff = new_hp - creature.value@hp 
        board = App.KL.Game.Board.Creature.modify_at(App.KL.Game.Board.Creature.change_hp_aux(hp_diff), pos, board)
        {hp_diff, board}
  }


App.KL.Game.Board.Creature.change_hp_aux(
  change: I32,
  creature: App.KL.Game.Creature
): App.KL.Game.Creature

  open creature
  open creature.hero as hero
  case I32.lte(creature.hp, 0) { //I32
    true: 
      creature
    false:
      def new_hp = I32.min(I32.add(creature.hp, change), hero.max_hp)
      creature@hp <- new_hp
      }
