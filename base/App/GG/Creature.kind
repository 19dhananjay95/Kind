type App.GG.Creature { 
  new(
    category: App.GG.Monster
    team: App.GG.Team
    animation: Pair<App.GG.Animation, U64>
    actions: App.GG.Actions
    status: List<App.GG.Creature.Status>
    hp: I32
    id: Nat
  )
}


type App.GG.Creature.Dna {
  new(
    alteration: String //TODO
    attributes: App.GG.Creature.Attributes
    body: App.GG.Body
  )
}

type App.GG.Creature.Attributes {
  new(
    hp:I32
    energy:I32
    damage:I32
    corruption: I32
  )
}


type App.GG.Creature.Status {
  stun(duration: I32)
}

App.GG.Creature.Attributes.add(
  a: App.GG.Creature.Attributes
  b: App.GG.Creature.Attributes
): App.GG.Creature.Attributes

  let hp = a@hp + b@hp
  let energy = a@energy + b@energy
  let damage = a@damage + b@damage
  let corruption = a@corruption + b@corruption
  App.GG.Creature.Attributes.new(hp, energy, damage, corruption)

//===========================================================
//Creature Management

App.GG.Creature.modify_at(
  mod: App.GG.Creature -> App.GG.Creature
  pos: App.GG.Coord
  grid: App.GG.Grid
): App.GG.Grid
  
  let result = Maybe { 
    get creature = App.GG.Creature.get(pos, grid)
    let mod = App.GG.Tile.update_creature(mod)
    let new_grid = App.GG.Grid.update(pos, mod, grid)
    return new_grid
  }
  result <> grid


App.GG.Creature.get(
  place: App.GG.Coord
  grid: App.GG.Grid
): Maybe<App.GG.Creature>

  let tile = App.GG.Grid.get(place, grid)
  case tile { 
    none:
      none
    some:
      tile.value@creature
  }


