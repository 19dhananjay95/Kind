// App states (local = clicks, global = visitors)
App.Kaelin.State: App.State
  App.State.new(Nat, Nat)

// Initial state
App.Kaelin.init: App.Init<App.Kaelin.State>
  App.Store.new<App.Kaelin.State>(0, 0)

// Render function
App.Kaelin.draw: App.Draw<App.Kaelin.State> 
  (state)
  <div>
    "oi, tudo bem?"
  </div>

  //<div>
    //"oi"
  //</div>
  //DOM.node("div", {}, {"border": "1px solid black"}, [
    //DOM.node("div", {}, {"font-weight": "bold"}, [DOM.text("Kaelin, world!")])
    //DOM.node("div", {}, {}, [DOM.text("Clicks: " | Nat.show(state@local))])
    //DOM.node("div", {}, {}, [DOM.text("Visits: " | Nat.show(state@global))])
  //])

// Event handler
App.Kaelin.when: App.When<App.Kaelin.State>
  (event, state)
  case event {
    init: IO {
      App.watch!(App.room_zero)
      App.new_post!(App.room_zero, App.empty_post)
    }
    mouse_down: IO {
      App.set_local!(state@local + 1)
    }
  } default App.pass!

// Global ticker: not used
App.Kaelin.tick: App.Tick<App.Kaelin.State>
  App.no_tick<App.Kaelin.State>

// Global visitor: counts posts to room_zero
App.Kaelin.post: App.Post<App.Kaelin.State>
  (time, room, addr, data, global_state)
  global_state + 1

// A "Kaelin, world!" + counter application
App.Kaelin: App<App.Kaelin.State>
  App.new<App.Kaelin.State>(
    App.Kaelin.init
    App.Kaelin.draw
    App.Kaelin.when
    App.Kaelin.tick
    App.Kaelin.post
  )
