#code (((Fm.Core.read.spaces code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #skip (((code #code ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) ((((Pair.new String) @(:(List ((Pair String) Fm.Term))) Fm.Term) "") #ctx (Fm.Term.ref "error"))) #code.head #code.tail !head = code.head; !code = code.tail; (((((Char.eql head) '*') # ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) ((((Pair.new String) @(:(List ((Pair String) Fm.Term))) Fm.Term) code) #ctx Fm.Term.typ)) (((((U16.eql head) '@') # ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) (((Fm.Core.read.name code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #self ((((Fm.Core.read.char code) '(') #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #skip (((Fm.Core.read.name code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #name ((((Fm.Core.read.char code) ':') #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #skip (((Fm.Core.read.term code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #bind ((((Fm.Core.read.char code) ')') #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #skip (((Fm.Core.read.term code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #body ((((Pair.new String) @(:(List ((Pair String) Fm.Term))) Fm.Term) code) #ctx (((((Fm.Term.all Bool.false) self) name) (bind ctx)) #s #x (body (((List.cons ((Pair String) Fm.Term)) ((((Pair.new String) Fm.Term) name) x)) (((List.cons ((Pair String) Fm.Term)) ((((Pair.new String) Fm.Term) self) s)) ctx))))))))))))) (((((U16.eql head) '%') # ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) (((Fm.Core.read.name code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #self ((((Fm.Core.read.char code) '(') #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #skip (((Fm.Core.read.name code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #name ((((Fm.Core.read.char code) ':') #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #skip (((Fm.Core.read.term code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #bind ((((Fm.Core.read.char code) ')') #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #skip (((Fm.Core.read.term code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #body ((((Pair.new String) @(:(List ((Pair String) Fm.Term))) Fm.Term) code) #ctx (((((Fm.Term.all Bool.true) self) name) (bind ctx)) #s #x (body (((List.cons ((Pair String) Fm.Term)) ((((Pair.new String) Fm.Term) name) x)) (((List.cons ((Pair String) Fm.Term)) ((((Pair.new String) Fm.Term) self) s)) ctx))))))))))))) (((((U16.eql head) '#') # ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) (((Fm.Core.read.name code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #name (((Fm.Core.read.term code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #body ((((Pair.new String) @(:(List ((Pair String) Fm.Term))) Fm.Term) code) #ctx ((Fm.Term.lam name) #x (body (((List.cons ((Pair String) Fm.Term)) ((((Pair.new String) Fm.Term) name) x)) ctx))))))) (((((U16.eql head) '(') # ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) (((Fm.Core.read.term code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #func (((Fm.Core.read.term code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #argm ((((Fm.Core.read.char code) ')') #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #skip ((((Pair.new String) @(:(List ((Pair String) Fm.Term))) Fm.Term) code) #ctx ((Fm.Term.app (func ctx)) (argm ctx))))))) (((((U16.eql head) '!') # ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) (((Fm.Core.read.name code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #name ((((Fm.Core.read.char code) '=') #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #skip (((Fm.Core.read.term code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #expr ((((Fm.Core.read.char code) ';') #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #skip (((Fm.Core.read.term code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #body ((((Pair.new String) @(:(List ((Pair String) Fm.Term))) Fm.Term) code) #ctx (((Fm.Term.let name) (expr ctx)) #x (body (((List.cons ((Pair String) Fm.Term)) ((((Pair.new String) Fm.Term) name) x)) ctx)))))))))) (((((U16.eql head) '$') # ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) (((Fm.Core.read.name code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #name ((((Fm.Core.read.char code) '=') #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #skip (((Fm.Core.read.term code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #expr ((((Fm.Core.read.char code) ';') #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #skip (((Fm.Core.read.term code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #body ((((Pair.new String) @(:(List ((Pair String) Fm.Term))) Fm.Term) code) #ctx (((Fm.Term.def name) (expr ctx)) #x (body (((List.cons ((Pair String) Fm.Term)) ((((Pair.new String) Fm.Term) name) x)) ctx)))))))))) (((((U16.eql head) '{') # ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) (((Fm.Core.read.term code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #expr ((((Fm.Core.read.char code) ':') #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #skip (((Fm.Core.read.term code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #type ((((Fm.Core.read.char code) '}') #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #skip ((((Pair.new String) @(:(List ((Pair String) Fm.Term))) Fm.Term) code) #ctx (((Fm.Term.ann Bool.false) (expr ctx)) (type ctx)))))))) (((((U16.eql head) '\'') # ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) (((Fm.Core.read.chrx code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #chrx ((((Fm.Core.read.char code) '\'') #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #skip ((((Pair.new String) @(:(List ((Pair String) Fm.Term))) Fm.Term) code) #ctx (Fm.Term.chr chrx))))) (((((U16.eql head) '\"') # ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) (((Fm.Core.read.strx code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #strx ((((Fm.Core.read.char code) '\"') #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #skip ((((Pair.new String) @(:(List ((Pair String) Fm.Term))) Fm.Term) code) #ctx (Fm.Term.str strx))))) (((((U16.eql head) '+') # ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) ((((Fm.Core.read.natx code) +0) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #natx ((((Pair.new String) @(:(List ((Pair String) Fm.Term))) Fm.Term) code) #ctx (Fm.Term.nat natx)))) ((((Fm.Core.read.is_name head) # ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) (((Fm.Core.read.name code) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #name !name = ((String.cons head) name); (((((((U16.eql head) '^') # ((Pair String) Nat)) ((Fm.Core.read.natx code) +0)) ((((Pair.new String) Nat) code) +0)) #x ((Pair String) @(:(List ((Pair String) Fm.Term))) Fm.Term)) #code #brui ((((Pair.new String) @(:(List ((Pair String) Fm.Term))) Fm.Term) code) #ctx $fun = {#x #i ((String.eql (((Pair.fst String) Fm.Term) x)) name):@(:((Pair String) Fm.Term)) @(:Nat) Bool}; !got = (((((Fm.Core.read.find ((Pair String) Fm.Term)) ctx) fun) +0) brui); (((got #got Fm.Term) (Fm.Term.ref name)) #got.value (((Pair.snd String) Fm.Term) (((Pair.fst ((Pair String) Fm.Term)) Nat) got.value))))))) ((((Pair.new String) @(:(List ((Pair String) Fm.Term))) Fm.Term) "") #ctx (Fm.Term.ref "error"))))))))))))))))