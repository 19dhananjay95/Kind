 // TODO avoid using assets from Kaelin, use KL assets, adjust their positions

// BOARD DRAWING
// =============

// draw all the screen (round, seconds, canvas, list of skills)
App.KL.Game.Phase.Play.draw(img: VoxBox, local: App.KL.Game.State.Local, game: App.KL.Game): DOM
  open game
  <div style={ 
    "width": "100vw", 
    "height": "100vh", 
    "display": "flex", 
    "flex-direction": "column", 
    "justify-content": "center", 
    "align-items": "center",
    "position": "relative"
  }>
    <div style={"font-size": "24px", "font-family": "monospace"}>
      case game.moment {
        preparation: 
          "Turn "
          | Nat.show(U64.to_nat(game.turn))
          | ". Casting in "
          | Nat.show(U64.to_nat(game.moment.countdown))
          | " ticks..."
        execution: case game.moment.casts {
          nil:
            "End of turn "
            | Nat.show(U64.to_nat(game.turn))
            | "."
          cons: Maybe {
            let cast = game.moment.casts.head
            get skill = App.KL.Game.Cast.get_skill(cast, game)
            get hero = App.KL.Game.Cast.get_hero(cast, game)
            let text = hero@name | " used " | skill@name | "!"
            let text = text | if game.moment.success then "" else " But it failed."
            return text
          } <> "Invalid cast."
        }
      }
    </div>
    <div>{ 
      let width = Nat.show(I32.to_nat(App.KL.Constants.center_x * 2))
      let height = Nat.show(I32.to_nat(App.KL.Constants.center_y * 2))
      DOM.vbox(
        { "id": "game_screen",
          "width": width,
          "height": height,
          "scale": "2"},
        {},
        App.KL.Game.Phase.Play.draw.canvas(img, local, game)) 
    }</div>
  </div>

// CANVAS DRAWING
// ================

// draw canvas
App.KL.Game.Phase.Play.draw.canvas(
  img: VoxBox
  local: App.KL.Game.State.Local
  game: App.KL.Game
): VoxBox
  open game
  let hits = case game.moment {
    preparation: none
    execution: some(game.moment.hits)
  }
  let img = App.KL.Game.Phase.Play.draw.board(game@board, local@preview, hits, local@mouse, img) 
  let img = App.KL.Game.Phase.Play.draw.cursor(local@mouse, img)
  img

// draw canvas board
App.KL.Game.Phase.Play.draw.board(
  map: App.KL.Game.Board
  preview: App.KL.Game.Cast.Preview
  hits: Maybe<App.KL.Game.Indicators>
  mouse: Pair<U32, U32>
  img: VoxBox
): VoxBox
  map = Hexagonal.Axial.BBT.to_list!(map)
  mouse_coord = Hexagonal.Axial.from_screen_xy(mouse, App.KL.Constants.hexagon_radius, App.KL.Constants.center_x, App.KL.Constants.center_y)
  for pos in map with img:
    {coord, tile} = pos
    img = App.KL.Game.Phase.Play.draw.tile.terrain(tile@terrain, preview, hits, coord, mouse_coord, img)
    img = App.KL.Game.Phase.Play.draw.tile.creature(tile@creature, coord, img)
    img
  img

// draw mouse indicator
App.KL.Game.Phase.Play.draw.cursor(
  mouse: Pair<U32, U32>
  img: VoxBox
): VoxBox
  coord = Hexagonal.Axial.from_screen_xy(mouse, App.KL.Constants.hexagon_radius, App.KL.Constants.center_x, App.KL.Constants.center_y)
  {x,y} = App.KL.Game.Phase.Play.draw.centralize(coord)
  VoxBox.Draw.image(x, y, 0#32, App.Kaelin.Assets.tile.mouse_ui, img)

// draws tile terrain
App.KL.Game.Phase.Play.draw.tile.terrain(
  terrain: App.KL.Game.Terrain
  preview: App.KL.Game.Cast.Preview
  hits: Maybe<App.KL.Game.Indicators>
  tile_coord: Hexagonal.Axial
  mouse_coord: Hexagonal.Axial
  img: VoxBox
): VoxBox
  indicator = Hexagonal.Axial.BBT.get!(tile_coord, hits <> preview@areas) <> App.KL.Game.Indicator.background
  {i, j} = App.KL.Game.Phase.Play.draw.centralize(tile_coord)
  field = App.KL.Game.Field.get_by_id.default(terrain@field_id)
  field_drawing = field@draw(terrain, indicator)
  tile_drawing = VoxBox.Draw.image(i, j, 0#32, field_drawing, img)
  tile_drawing = App.KL.Game.Phase.Play.draw.letter(tile_coord, preview, tile_drawing)
  tile_drawing

// draws tile creature if any
App.KL.Game.Phase.Play.draw.tile.creature(
  creature: Maybe<App.KL.Game.Creature>,
  coord: Hexagonal.Axial,
  img: VoxBox
): VoxBox
  case creature {
    none: img
    some:
      {cx, cy} = Hexagonal.Axial.to_screen_xy(coord, App.KL.Constants.hexagon_radius, App.KL.Constants.center_x, App.KL.Constants.center_y)
      let cx = cx - (128::U32)
      let cy = cy - (128::U32)
      let hero = creature.value@hero
      let drawing = hero@draw(creature.value)
      //let aux = I32.to_u32(App.KL.Constants.hexagon_radius) //U32
      //let cy = cy - (aux * 2) //U32
      //let cx = cx - aux //U32
      let img = VoxBox.Draw.image(cx, cy, 0u, drawing, img)
      let img = App.KL.Game.Board.Creature.show_hp(cx, cy, creature.value, img)
      img
  }

// AUX FUNCTIONS
// =============

App.KL.Game.Phase.Play.draw.letter(
  tile_coord: Hexagonal.Axial
  preview: App.KL.Game.Cast.Preview
  img: VoxBox
): VoxBox
  open preview
  case Hexagonal.Axial.BBT.get!(tile_coord, preview.picks) as got {
    none: img
    some: 
      screen_coord = Hexagonal.Axial.to_screen_xy(tile_coord, App.KL.Constants.hexagon_radius, App.KL.Constants.center_x, App.KL.Constants.center_y)
      {cx, cy} = App.KL.Game.Phase.Play.draw.centralize_letter(screen_coord)
      VoxBox.Draw.text(Char.to_string(got.value), PixelFont.black, Pos32.new(cx,cy,0u), img)
  }

App.KL.Game.Phase.Play.draw.centralize_letter(screen_coord: Pair<U32, U32>): Pair<U32, U32>
  { screen_coord@fst - 2, screen_coord@snd - 6 }
  
// Centralizes an image in the hexagon 
// TODO: won't be used after we start using assets from KL only
App.KL.Game.Phase.Play.draw.centralize(
  coord: Hexagonal.Axial
): Pair(U32, U32)
  let {i, j} = Hexagonal.Axial.to_screen_xy(coord, App.KL.Constants.hexagon_radius, App.KL.Constants.center_x, App.KL.Constants.center_y)
  let aux = I32.to_u32(App.KL.Constants.hexagon_radius)
  let i = i - aux
  let j = j - aux
  {i, j}
