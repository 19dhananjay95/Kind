Kind.Parser.without: Parser(Kind.Term)
  Parser {
    get init = Kind.Parser.init;
    Kind.Parser.text("without ");
    get name = Parser.override_error!(Kind.Parser.name1, "Expected identifier after \"without â€¦\"");
    Kind.Parser.text_error(":", "Missing ':' after \"without â€¦\"");
    get dflt = Kind.Parser.term;
    get rest = Kind.Parser.term;
    get orig = Kind.Parser.stop(init);
    let term = Kind.Term.ref(name);
    let term = Kind.Term.app(term, Kind.Term.lam("x", (x) Kind.Term.hol(Bits.e)));
    let term = Kind.Term.app(term, dflt);
    let term = Kind.Term.app(term, Kind.Term.lam(name, (x) rest));
    return Kind.Term.ori(orig, term);
  }
