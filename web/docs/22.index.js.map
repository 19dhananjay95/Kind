{"version":3,"sources":["webpack://kind-web/./src/apps/App.Drawing.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,aAAa;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzfile":"22.index.js","sourcesContent":["module.exports = (function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    var bitsmap_new = {\n        _: 'BitsMap.new'\n    };\n    var bitsmap_tie = function(val, lft, rgt) {\n        return {\n            _: 'BitsMap.tip',\n            val,\n            lft,\n            rgt\n        };\n    }\n    var maybe_none = {\n        _: 'Maybe.none'\n    };\n    var maybe_some = function(value) {\n        return {\n            _: 'Maybe.some',\n            value\n        };\n    }\n    var bitsmap_get = function(bits, map) {\n        for (var i = bits.length - 1; i >= 0; --i) {\n            if (map._ !== 'BitsMap.new') {\n                map = bits[i] === '0' ? map.lft : map.rgt;\n            }\n        }\n        return map._ === 'BitsMap.new' ? maybe_none : map.val;\n    }\n    var bitsmap_set = function(bits, val, map, mode) {\n        var res = {\n            value: map\n        };\n        var key = 'value';\n        var obj = res;\n        for (var i = bits.length - 1; i >= 0; --i) {\n            var map = obj[key];\n            if (map._ === 'BitsMap.new') {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: maybe_none,\n                    lft: bitsmap_new,\n                    rgt: bitsmap_new\n                };\n            } else {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: map.val,\n                    lft: map.lft,\n                    rgt: map.rgt\n                };\n            }\n            obj = obj[key];\n            key = bits[i] === '0' ? 'lft' : 'rgt';\n        }\n        var map = obj[key];\n        if (map._ === 'BitsMap.new') {\n            var x = mode === 'del' ? maybe_none : {\n                _: 'Maybe.some',\n                value: val\n            };\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: bitsmap_new,\n                rgt: bitsmap_new\n            };\n        } else {\n            var x = mode === 'set' ? {\n                _: 'Maybe.some',\n                value: val\n            } : mode === 'del' ? maybe_none : map.val;\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: map.lft,\n                rgt: map.rgt\n            };\n        }\n        return res.value;\n    };\n    var list_length = list => {\n        var len = 0;\n        while (list._ === 'List.cons') {\n            len += 1;\n            list = list.tail;\n        };\n        return BigInt(len);\n    };\n    const inst_unit = x => x(null);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c0;\n                return $2;\n            } else {\n                var $3 = c1;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c0;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c1($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');\n    const elim_bits = (x => {\n        var $14 = (() => c0 => c1 => c2 => {\n            var self = x;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'o':\n                    var $9 = self.slice(0, -1);\n                    var $10 = c1($9);\n                    return $10;\n                case 'i':\n                    var $11 = self.slice(0, -1);\n                    var $12 = c2($11);\n                    return $12;\n                case 'e':\n                    var $13 = c0;\n                    return $13;\n            };\n        })();\n        return $14;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $15 = u16_to_word(self);\n                    var $16 = c0($15);\n                    return $16;\n            };\n        })();\n        return $17;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $20 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $18 = u32_to_word(self);\n                    var $19 = c0($18);\n                    return $19;\n            };\n        })();\n        return $20;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $23 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $21 = u64_to_word(self);\n                    var $22 = c0($21);\n                    return $22;\n            };\n        })();\n        return $23;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $28 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $24 = c0;\n                return $24;\n            } else {\n                var $25 = self.charCodeAt(0);\n                var $26 = self.slice(1);\n                var $27 = c1($25)($26);\n                return $27;\n            };\n        })();\n        return $28;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $32 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $29 = buffer32_to_depth(self);\n                    var $30 = buffer32_to_u32array(self);\n                    var $31 = c0($29)($30);\n                    return $31;\n            };\n        })();\n        return $32;\n    });\n\n    function Buffer32$new$(_depth$1, _array$2) {\n        var $33 = u32array_to_buffer32(_array$2);\n        return $33;\n    };\n    const Buffer32$new = x0 => x1 => Buffer32$new$(x0, x1);\n\n    function Array$(_A$1, _depth$2) {\n        var $34 = null;\n        return $34;\n    };\n    const Array = x0 => x1 => Array$(x0, x1);\n\n    function Array$tip$(_value$2) {\n        var $35 = ({\n            _: 'Array.tip',\n            'value': _value$2\n        });\n        return $35;\n    };\n    const Array$tip = x0 => Array$tip$(x0);\n\n    function Array$tie$(_lft$3, _rgt$4) {\n        var $36 = ({\n            _: 'Array.tie',\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $36;\n    };\n    const Array$tie = x0 => x1 => Array$tie$(x0, x1);\n\n    function Array$alloc$(_depth$2, _x$3) {\n        var self = _depth$2;\n        if (self === 0n) {\n            var $38 = Array$tip$(_x$3);\n            var $37 = $38;\n        } else {\n            var $39 = (self - 1n);\n            var _half$5 = Array$alloc$($39, _x$3);\n            var $40 = Array$tie$(_half$5, _half$5);\n            var $37 = $40;\n        };\n        return $37;\n    };\n    const Array$alloc = x0 => x1 => Array$alloc$(x0, x1);\n\n    function U32$new$(_value$1) {\n        var $41 = word_to_u32(_value$1);\n        return $41;\n    };\n    const U32$new = x0 => U32$new$(x0);\n\n    function Word$(_size$1) {\n        var $42 = null;\n        return $42;\n    };\n    const Word = x0 => Word$(x0);\n    const Word$e = ({\n        _: 'Word.e'\n    });\n\n    function Word$o$(_pred$2) {\n        var $43 = ({\n            _: 'Word.o',\n            'pred': _pred$2\n        });\n        return $43;\n    };\n    const Word$o = x0 => Word$o$(x0);\n\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $45 = Word$e;\n            var $44 = $45;\n        } else {\n            var $46 = (self - 1n);\n            var $47 = Word$o$(Word$zero$($46));\n            var $44 = $47;\n        };\n        return $44;\n    };\n    const Word$zero = x0 => Word$zero$(x0);\n\n    function Nat$succ$(_pred$1) {\n        var $48 = 1n + _pred$1;\n        return $48;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const U32$zero = U32$new$(Word$zero$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$zero))))))))))))))))))))))))))))))))));\n    const Buffer32$alloc = a0 => (new Uint32Array(2 ** Number(a0)));\n\n    function Word$bit_length$go$(_word$2, _c$3, _n$4) {\n        var Word$bit_length$go$ = (_word$2, _c$3, _n$4) => ({\n            ctr: 'TCO',\n            arg: [_word$2, _c$3, _n$4]\n        });\n        var Word$bit_length$go = _word$2 => _c$3 => _n$4 => Word$bit_length$go$(_word$2, _c$3, _n$4);\n        var arg = [_word$2, _c$3, _n$4];\n        while (true) {\n            let [_word$2, _c$3, _n$4] = arg;\n            var R = (() => {\n                var self = _word$2;\n                switch (self._) {\n                    case 'Word.o':\n                        var $49 = self.pred;\n                        var $50 = Word$bit_length$go$($49, Nat$succ$(_c$3), _n$4);\n                        return $50;\n                    case 'Word.i':\n                        var $51 = self.pred;\n                        var $52 = Word$bit_length$go$($51, Nat$succ$(_c$3), Nat$succ$(_c$3));\n                        return $52;\n                    case 'Word.e':\n                        var $53 = _n$4;\n                        return $53;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$bit_length$go = x0 => x1 => x2 => Word$bit_length$go$(x0, x1, x2);\n\n    function Word$bit_length$(_word$2) {\n        var $54 = Word$bit_length$go$(_word$2, 0n, 0n);\n        return $54;\n    };\n    const Word$bit_length = x0 => Word$bit_length$(x0);\n\n    function U32$bit_length$(_size$1) {\n        var self = _size$1;\n        switch ('u32') {\n            case 'u32':\n                var $56 = u32_to_word(self);\n                var $57 = Word$bit_length$($56);\n                var $55 = $57;\n                break;\n        };\n        return $55;\n    };\n    const U32$bit_length = x0 => U32$bit_length$(x0);\n\n    function Word$i$(_pred$2) {\n        var $58 = ({\n            _: 'Word.i',\n            'pred': _pred$2\n        });\n        return $58;\n    };\n    const Word$i = x0 => Word$i$(x0);\n    const Bool$false = false;\n    const Bool$true = true;\n\n    function Word$shift_left$one$go$(_word$2, _prev$3) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $60 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $62 = Word$i$(Word$shift_left$one$go$($60, Bool$false));\n                    var $61 = $62;\n                } else {\n                    var $63 = Word$o$(Word$shift_left$one$go$($60, Bool$false));\n                    var $61 = $63;\n                };\n                var $59 = $61;\n                break;\n            case 'Word.i':\n                var $64 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $66 = Word$i$(Word$shift_left$one$go$($64, Bool$true));\n                    var $65 = $66;\n                } else {\n                    var $67 = Word$o$(Word$shift_left$one$go$($64, Bool$true));\n                    var $65 = $67;\n                };\n                var $59 = $65;\n                break;\n            case 'Word.e':\n                var $68 = Word$e;\n                var $59 = $68;\n                break;\n        };\n        return $59;\n    };\n    const Word$shift_left$one$go = x0 => x1 => Word$shift_left$one$go$(x0, x1);\n\n    function Word$shift_left$one$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $70 = self.pred;\n                var $71 = Word$o$(Word$shift_left$one$go$($70, Bool$false));\n                var $69 = $71;\n                break;\n            case 'Word.i':\n                var $72 = self.pred;\n                var $73 = Word$o$(Word$shift_left$one$go$($72, Bool$true));\n                var $69 = $73;\n                break;\n            case 'Word.e':\n                var $74 = Word$e;\n                var $69 = $74;\n                break;\n        };\n        return $69;\n    };\n    const Word$shift_left$one = x0 => Word$shift_left$one$(x0);\n\n    function Word$shift_left$(_n$2, _value$3) {\n        var Word$shift_left$ = (_n$2, _value$3) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _value$3]\n        });\n        var Word$shift_left = _n$2 => _value$3 => Word$shift_left$(_n$2, _value$3);\n        var arg = [_n$2, _value$3];\n        while (true) {\n            let [_n$2, _value$3] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $75 = _value$3;\n                    return $75;\n                } else {\n                    var $76 = (self - 1n);\n                    var $77 = Word$shift_left$($76, Word$shift_left$one$(_value$3));\n                    return $77;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$shift_left = x0 => x1 => Word$shift_left$(x0, x1);\n\n    function Word$adder$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $79 = self.pred;\n                var $80 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $82 = self.pred;\n                            var $83 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $85 = Word$i$(Word$adder$(_a$pred$10, $82, Bool$false));\n                                    var $84 = $85;\n                                } else {\n                                    var $86 = Word$o$(Word$adder$(_a$pred$10, $82, Bool$false));\n                                    var $84 = $86;\n                                };\n                                return $84;\n                            });\n                            var $81 = $83;\n                            break;\n                        case 'Word.i':\n                            var $87 = self.pred;\n                            var $88 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $90 = Word$o$(Word$adder$(_a$pred$10, $87, Bool$true));\n                                    var $89 = $90;\n                                } else {\n                                    var $91 = Word$i$(Word$adder$(_a$pred$10, $87, Bool$false));\n                                    var $89 = $91;\n                                };\n                                return $89;\n                            });\n                            var $81 = $88;\n                            break;\n                        case 'Word.e':\n                            var $92 = (_a$pred$8 => {\n                                var $93 = Word$e;\n                                return $93;\n                            });\n                            var $81 = $92;\n                            break;\n                    };\n                    var $81 = $81($79);\n                    return $81;\n                });\n                var $78 = $80;\n                break;\n            case 'Word.i':\n                var $94 = self.pred;\n                var $95 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $97 = self.pred;\n                            var $98 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $100 = Word$o$(Word$adder$(_a$pred$10, $97, Bool$true));\n                                    var $99 = $100;\n                                } else {\n                                    var $101 = Word$i$(Word$adder$(_a$pred$10, $97, Bool$false));\n                                    var $99 = $101;\n                                };\n                                return $99;\n                            });\n                            var $96 = $98;\n                            break;\n                        case 'Word.i':\n                            var $102 = self.pred;\n                            var $103 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $105 = Word$i$(Word$adder$(_a$pred$10, $102, Bool$true));\n                                    var $104 = $105;\n                                } else {\n                                    var $106 = Word$o$(Word$adder$(_a$pred$10, $102, Bool$true));\n                                    var $104 = $106;\n                                };\n                                return $104;\n                            });\n                            var $96 = $103;\n                            break;\n                        case 'Word.e':\n                            var $107 = (_a$pred$8 => {\n                                var $108 = Word$e;\n                                return $108;\n                            });\n                            var $96 = $107;\n                            break;\n                    };\n                    var $96 = $96($94);\n                    return $96;\n                });\n                var $78 = $95;\n                break;\n            case 'Word.e':\n                var $109 = (_b$5 => {\n                    var $110 = Word$e;\n                    return $110;\n                });\n                var $78 = $109;\n                break;\n        };\n        var $78 = $78(_b$3);\n        return $78;\n    };\n    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);\n\n    function Word$add$(_a$2, _b$3) {\n        var $111 = Word$adder$(_a$2, _b$3, Bool$false);\n        return $111;\n    };\n    const Word$add = x0 => x1 => Word$add$(x0, x1);\n\n    function Word$mul$go$(_a$3, _b$4, _acc$5) {\n        var Word$mul$go$ = (_a$3, _b$4, _acc$5) => ({\n            ctr: 'TCO',\n            arg: [_a$3, _b$4, _acc$5]\n        });\n        var Word$mul$go = _a$3 => _b$4 => _acc$5 => Word$mul$go$(_a$3, _b$4, _acc$5);\n        var arg = [_a$3, _b$4, _acc$5];\n        while (true) {\n            let [_a$3, _b$4, _acc$5] = arg;\n            var R = (() => {\n                var self = _a$3;\n                switch (self._) {\n                    case 'Word.o':\n                        var $112 = self.pred;\n                        var $113 = Word$mul$go$($112, Word$shift_left$(1n, _b$4), _acc$5);\n                        return $113;\n                    case 'Word.i':\n                        var $114 = self.pred;\n                        var $115 = Word$mul$go$($114, Word$shift_left$(1n, _b$4), Word$add$(_b$4, _acc$5));\n                        return $115;\n                    case 'Word.e':\n                        var $116 = _acc$5;\n                        return $116;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mul$go = x0 => x1 => x2 => Word$mul$go$(x0, x1, x2);\n\n    function Word$to_zero$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $118 = self.pred;\n                var $119 = Word$o$(Word$to_zero$($118));\n                var $117 = $119;\n                break;\n            case 'Word.i':\n                var $120 = self.pred;\n                var $121 = Word$o$(Word$to_zero$($120));\n                var $117 = $121;\n                break;\n            case 'Word.e':\n                var $122 = Word$e;\n                var $117 = $122;\n                break;\n        };\n        return $117;\n    };\n    const Word$to_zero = x0 => Word$to_zero$(x0);\n\n    function Word$mul$(_a$2, _b$3) {\n        var $123 = Word$mul$go$(_a$2, _b$3, Word$to_zero$(_a$2));\n        return $123;\n    };\n    const Word$mul = x0 => x1 => Word$mul$(x0, x1);\n    const U32$mul = a0 => a1 => ((a0 * a1) >>> 0);\n\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _f$3, _x$4]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [_n$2, _f$3, _x$4];\n        while (true) {\n            let [_n$2, _f$3, _x$4] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $124 = _x$4;\n                    return $124;\n                } else {\n                    var $125 = (self - 1n);\n                    var $126 = Nat$apply$($125, _f$3, _f$3(_x$4));\n                    return $126;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $128 = self.pred;\n                var $129 = Word$i$($128);\n                var $127 = $129;\n                break;\n            case 'Word.i':\n                var $130 = self.pred;\n                var $131 = Word$o$(Word$inc$($130));\n                var $127 = $131;\n                break;\n            case 'Word.e':\n                var $132 = Word$e;\n                var $127 = $132;\n                break;\n        };\n        return $127;\n    };\n    const Word$inc = x0 => Word$inc$(x0);\n\n    function Nat$to_word$(_size$1, _n$2) {\n        var $133 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));\n        return $133;\n    };\n    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);\n    const Nat$to_u32 = a0 => (Number(a0) >>> 0);\n\n    function VoxBox$new$(_length$1, _capacity$2, _buffer$3) {\n        var $134 = ({\n            _: 'VoxBox.new',\n            'length': _length$1,\n            'capacity': _capacity$2,\n            'buffer': _buffer$3\n        });\n        return $134;\n    };\n    const VoxBox$new = x0 => x1 => x2 => VoxBox$new$(x0, x1, x2);\n\n    function VoxBox$alloc_capacity$(_capacity$1) {\n        var _buffer$2 = (new Uint32Array(2 ** Number(U32$bit_length$(((2 * _capacity$1) >>> 0)))));\n        var $135 = VoxBox$new$(0, _capacity$1, _buffer$2);\n        return $135;\n    };\n    const VoxBox$alloc_capacity = x0 => VoxBox$alloc_capacity$(x0);\n    const App$Drawing$Constants$room = \"0x10000000000999\";\n    const BitsMap$new = ({\n        _: 'BitsMap.new'\n    });\n    const Map$new = BitsMap$new;\n\n    function App$Drawing$Phase$active$(_turn$1) {\n        var $136 = ({\n            _: 'App.Drawing.Phase.active',\n            'turn': _turn$1\n        });\n        return $136;\n    };\n    const App$Drawing$Phase$active = x0 => App$Drawing$Phase$active$(x0);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function BitsMap$(_A$1) {\n        var $137 = null;\n        return $137;\n    };\n    const BitsMap = x0 => BitsMap$(x0);\n\n    function Map$(_V$1) {\n        var $138 = null;\n        return $138;\n    };\n    const Map = x0 => Map$(x0);\n\n    function App$Drawing$Stage$boards$(_phase$1, _arts$2) {\n        var $139 = ({\n            _: 'App.Drawing.Stage.boards',\n            'phase': _phase$1,\n            'arts': _arts$2\n        });\n        return $139;\n    };\n    const App$Drawing$Stage$boards = x0 => x1 => App$Drawing$Stage$boards$(x0, x1);\n\n    function App$EnvInfo$new$(_screen_size$1, _mouse_pos$2) {\n        var $140 = ({\n            _: 'App.EnvInfo.new',\n            'screen_size': _screen_size$1,\n            'mouse_pos': _mouse_pos$2\n        });\n        return $140;\n    };\n    const App$EnvInfo$new = x0 => x1 => App$EnvInfo$new$(x0, x1);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $141 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $141;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n    const U32$from_nat = a0 => (Number(a0) >>> 0);\n    const App$Drawing$Tool$pencil = ({\n        _: 'App.Drawing.Tool.pencil'\n    });\n\n    function Word$or$(_a$2, _b$3) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $143 = self.pred;\n                var $144 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $146 = self.pred;\n                            var $147 = (_a$pred$9 => {\n                                var $148 = Word$o$(Word$or$(_a$pred$9, $146));\n                                return $148;\n                            });\n                            var $145 = $147;\n                            break;\n                        case 'Word.i':\n                            var $149 = self.pred;\n                            var $150 = (_a$pred$9 => {\n                                var $151 = Word$i$(Word$or$(_a$pred$9, $149));\n                                return $151;\n                            });\n                            var $145 = $150;\n                            break;\n                        case 'Word.e':\n                            var $152 = (_a$pred$7 => {\n                                var $153 = Word$e;\n                                return $153;\n                            });\n                            var $145 = $152;\n                            break;\n                    };\n                    var $145 = $145($143);\n                    return $145;\n                });\n                var $142 = $144;\n                break;\n            case 'Word.i':\n                var $154 = self.pred;\n                var $155 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $157 = self.pred;\n                            var $158 = (_a$pred$9 => {\n                                var $159 = Word$i$(Word$or$(_a$pred$9, $157));\n                                return $159;\n                            });\n                            var $156 = $158;\n                            break;\n                        case 'Word.i':\n                            var $160 = self.pred;\n                            var $161 = (_a$pred$9 => {\n                                var $162 = Word$i$(Word$or$(_a$pred$9, $160));\n                                return $162;\n                            });\n                            var $156 = $161;\n                            break;\n                        case 'Word.e':\n                            var $163 = (_a$pred$7 => {\n                                var $164 = Word$e;\n                                return $164;\n                            });\n                            var $156 = $163;\n                            break;\n                    };\n                    var $156 = $156($154);\n                    return $156;\n                });\n                var $142 = $155;\n                break;\n            case 'Word.e':\n                var $165 = (_b$4 => {\n                    var $166 = Word$e;\n                    return $166;\n                });\n                var $142 = $165;\n                break;\n        };\n        var $142 = $142(_b$3);\n        return $142;\n    };\n    const Word$or = x0 => x1 => Word$or$(x0, x1);\n    const U32$or = a0 => a1 => (a0 | a1);\n\n    function Word$fold$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var self = _word$6;\n        switch (self._) {\n            case 'Word.o':\n                var $168 = self.pred;\n                var $169 = _w0$4(Word$fold$(_nil$3, _w0$4, _w1$5, $168));\n                var $167 = $169;\n                break;\n            case 'Word.i':\n                var $170 = self.pred;\n                var $171 = _w1$5(Word$fold$(_nil$3, _w0$4, _w1$5, $170));\n                var $167 = $171;\n                break;\n            case 'Word.e':\n                var $172 = _nil$3;\n                var $167 = $172;\n                break;\n        };\n        return $167;\n    };\n    const Word$fold = x0 => x1 => x2 => x3 => Word$fold$(x0, x1, x2, x3);\n    const Nat$add = a0 => a1 => (a0 + a1);\n    const Nat$mul = a0 => a1 => (a0 * a1);\n\n    function Word$to_nat$(_word$2) {\n        var $173 = Word$fold$(0n, a1 => (2n * a1), (_x$4 => {\n            var $174 = Nat$succ$((2n * _x$4));\n            return $174;\n        }), _word$2);\n        return $173;\n    };\n    const Word$to_nat = x0 => Word$to_nat$(x0);\n\n    function Word$shl$(_n$2, _value$3) {\n        var _n_nat$4 = Word$to_nat$(_n$2);\n        var $175 = Word$shift_left$(_n_nat$4, _value$3);\n        return $175;\n    };\n    const Word$shl = x0 => x1 => Word$shl$(x0, x1);\n    const U32$shl = a0 => a1 => ((a0 << a1) >>> 0);\n    const Col32$new = a0 => a1 => a2 => a3 => ((0 | a0 | (a1 << 8) | (a2 << 16) | (a3 << 24)));\n\n    function App$Drawing$Whiteboard$new$(_past$1, _live$2, _future$3) {\n        var $176 = ({\n            _: 'App.Drawing.Whiteboard.new',\n            'past': _past$1,\n            'live': _live$2,\n            'future': _future$3\n        });\n        return $176;\n    };\n    const App$Drawing$Whiteboard$new = x0 => x1 => x2 => App$Drawing$Whiteboard$new$(x0, x1, x2);\n\n    function List$cons$(_head$2, _tail$3) {\n        var $177 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $177;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function App$Drawing$Style$new$(_tool$1, _size$2, _color$3) {\n        var $178 = ({\n            _: 'App.Drawing.Style.new',\n            'tool': _tool$1,\n            'size': _size$2,\n            'color': _color$3\n        });\n        return $178;\n    };\n    const App$Drawing$Style$new = x0 => x1 => x2 => App$Drawing$Style$new$(x0, x1, x2);\n\n    function App$Store$new$(_local$2, _global$3) {\n        var $179 = ({\n            _: 'App.Store.new',\n            'local': _local$2,\n            'global': _global$3\n        });\n        return $179;\n    };\n    const App$Store$new = x0 => x1 => App$Store$new$(x0, x1);\n    const App$State$new = Pair$new$(null, null);\n    const App$Drawing$State = App$State$new;\n\n    function App$Drawing$State$local$new$(_input$1, _user$2, _drawing$3, _style$4, _whiteboard$5, _env_info$6) {\n        var $180 = ({\n            _: 'App.Drawing.State.local.new',\n            'input': _input$1,\n            'user': _user$2,\n            'drawing': _drawing$3,\n            'style': _style$4,\n            'whiteboard': _whiteboard$5,\n            'env_info': _env_info$6\n        });\n        return $180;\n    };\n    const App$Drawing$State$local$new = x0 => x1 => x2 => x3 => x4 => x5 => App$Drawing$State$local$new$(x0, x1, x2, x3, x4, x5);\n\n    function App$Drawing$State$global$new$(_room$1, _players$2, _stage$3) {\n        var $181 = ({\n            _: 'App.Drawing.State.global.new',\n            'room': _room$1,\n            'players': _players$2,\n            'stage': _stage$3\n        });\n        return $181;\n    };\n    const App$Drawing$State$global$new = x0 => x1 => x2 => App$Drawing$State$global$new$(x0, x1, x2);\n\n    function App$Drawing$App$init$(_img$1) {\n        var _room$2 = App$Drawing$Constants$room;\n        var _players$3 = Map$new;\n        var _phase$4 = App$Drawing$Phase$active$(0n);\n        var _arts$5 = List$nil;\n        var _stage$6 = App$Drawing$Stage$boards$(_phase$4, List$nil);\n        var _input$7 = \"\";\n        var _user$8 = \"\";\n        var _env_info$9 = App$EnvInfo$new$(Pair$new$(256, 256), Pair$new$(0, 0));\n        var _tool$10 = App$Drawing$Tool$pencil;\n        var _size$11 = 3;\n        var _color$12 = ((0 | 255 | (0 << 8) | (0 << 16) | (125 << 24)));\n        var _whiteboard$13 = App$Drawing$Whiteboard$new$(List$cons$(_img$1, List$nil), _img$1, List$nil);\n        var _style$14 = App$Drawing$Style$new$(_tool$10, _size$11, _color$12);\n        var $182 = App$Store$new$(App$Drawing$State$local$new$(_input$7, _user$8, Bool$false, _style$14, _whiteboard$13, _env_info$9), App$Drawing$State$global$new$(_room$2, _players$3, _stage$6));\n        return $182;\n    };\n    const App$Drawing$App$init = x0 => App$Drawing$App$init$(x0);\n\n    function Pair$fst$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $184 = self.fst;\n                var $185 = $184;\n                var $183 = $185;\n                break;\n        };\n        return $183;\n    };\n    const Pair$fst = x0 => Pair$fst$(x0);\n    const App$State$local = Pair$fst;\n\n    function VoxBox$set_length$(_length$1, _img$2) {\n        var self = _img$2;\n        switch (self._) {\n            case 'VoxBox.new':\n                var $187 = self.capacity;\n                var $188 = self.buffer;\n                var $189 = VoxBox$new$(_length$1, $187, $188);\n                var $186 = $189;\n                break;\n        };\n        return $186;\n    };\n    const VoxBox$set_length = x0 => x1 => VoxBox$set_length$(x0, x1);\n\n    function VoxBox$clear$(_img$1) {\n        var $190 = VoxBox$set_length$(0, _img$1);\n        return $190;\n    };\n    const VoxBox$clear = x0 => VoxBox$clear$(x0);\n\n    function VoxBox$get_len$(_img$1) {\n        var self = _img$1;\n        switch (self._) {\n            case 'VoxBox.new':\n                var $192 = self.length;\n                var $193 = $192;\n                var $191 = $193;\n                break;\n        };\n        return $191;\n    };\n    const VoxBox$get_len = x0 => VoxBox$get_len$(x0);\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $195 = Bool$false;\n                var $194 = $195;\n                break;\n            case 'Cmp.eql':\n                var $196 = Bool$true;\n                var $194 = $196;\n                break;\n        };\n        return $194;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $198 = self.pred;\n                var $199 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $201 = self.pred;\n                            var $202 = (_a$pred$10 => {\n                                var $203 = Word$cmp$go$(_a$pred$10, $201, _c$4);\n                                return $203;\n                            });\n                            var $200 = $202;\n                            break;\n                        case 'Word.i':\n                            var $204 = self.pred;\n                            var $205 = (_a$pred$10 => {\n                                var $206 = Word$cmp$go$(_a$pred$10, $204, Cmp$ltn);\n                                return $206;\n                            });\n                            var $200 = $205;\n                            break;\n                        case 'Word.e':\n                            var $207 = (_a$pred$8 => {\n                                var $208 = _c$4;\n                                return $208;\n                            });\n                            var $200 = $207;\n                            break;\n                    };\n                    var $200 = $200($198);\n                    return $200;\n                });\n                var $197 = $199;\n                break;\n            case 'Word.i':\n                var $209 = self.pred;\n                var $210 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $212 = self.pred;\n                            var $213 = (_a$pred$10 => {\n                                var $214 = Word$cmp$go$(_a$pred$10, $212, Cmp$gtn);\n                                return $214;\n                            });\n                            var $211 = $213;\n                            break;\n                        case 'Word.i':\n                            var $215 = self.pred;\n                            var $216 = (_a$pred$10 => {\n                                var $217 = Word$cmp$go$(_a$pred$10, $215, _c$4);\n                                return $217;\n                            });\n                            var $211 = $216;\n                            break;\n                        case 'Word.e':\n                            var $218 = (_a$pred$8 => {\n                                var $219 = _c$4;\n                                return $219;\n                            });\n                            var $211 = $218;\n                            break;\n                    };\n                    var $211 = $211($209);\n                    return $211;\n                });\n                var $197 = $210;\n                break;\n            case 'Word.e':\n                var $220 = (_b$5 => {\n                    var $221 = _c$4;\n                    return $221;\n                });\n                var $197 = $220;\n                break;\n        };\n        var $197 = $197(_b$3);\n        return $197;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $222 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $222;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $223 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $223;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n    const U32$eql = a0 => a1 => (a0 === a1);\n    const U32$inc = a0 => ((a0 + 1) >>> 0);\n    const U32$for = a0 => a1 => a2 => a3 => (u32_for(a0, a1, a2, a3));\n\n    function Word$trim$(_new_size$2, _word$3) {\n        var self = _new_size$2;\n        if (self === 0n) {\n            var $225 = Word$e;\n            var $224 = $225;\n        } else {\n            var $226 = (self - 1n);\n            var self = _word$3;\n            switch (self._) {\n                case 'Word.o':\n                    var $228 = self.pred;\n                    var $229 = Word$o$(Word$trim$($226, $228));\n                    var $227 = $229;\n                    break;\n                case 'Word.i':\n                    var $230 = self.pred;\n                    var $231 = Word$i$(Word$trim$($226, $230));\n                    var $227 = $231;\n                    break;\n                case 'Word.e':\n                    var $232 = Word$o$(Word$trim$($226, Word$e));\n                    var $227 = $232;\n                    break;\n            };\n            var $224 = $227;\n        };\n        return $224;\n    };\n    const Word$trim = x0 => x1 => Word$trim$(x0, x1);\n    const Unit$new = null;\n\n    function Array$extract_tip$(_arr$2) {\n        var self = _arr$2;\n        switch (self._) {\n            case 'Array.tip':\n                var $234 = self.value;\n                var $235 = $234;\n                var $233 = $235;\n                break;\n            case 'Array.tie':\n                var $236 = Unit$new;\n                var $233 = $236;\n                break;\n        };\n        return $233;\n    };\n    const Array$extract_tip = x0 => Array$extract_tip$(x0);\n\n    function Pair$(_A$1, _B$2) {\n        var $237 = null;\n        return $237;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n\n    function Array$extract_tie$(_arr$3) {\n        var self = _arr$3;\n        switch (self._) {\n            case 'Array.tie':\n                var $239 = self.lft;\n                var $240 = self.rgt;\n                var $241 = Pair$new$($239, $240);\n                var $238 = $241;\n                break;\n            case 'Array.tip':\n                var $242 = Unit$new;\n                var $238 = $242;\n                break;\n        };\n        return $238;\n    };\n    const Array$extract_tie = x0 => Array$extract_tie$(x0);\n\n    function Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var Word$foldl$ = (_nil$3, _w0$4, _w1$5, _word$6) => ({\n            ctr: 'TCO',\n            arg: [_nil$3, _w0$4, _w1$5, _word$6]\n        });\n        var Word$foldl = _nil$3 => _w0$4 => _w1$5 => _word$6 => Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6);\n        var arg = [_nil$3, _w0$4, _w1$5, _word$6];\n        while (true) {\n            let [_nil$3, _w0$4, _w1$5, _word$6] = arg;\n            var R = (() => {\n                var self = _word$6;\n                switch (self._) {\n                    case 'Word.o':\n                        var $243 = self.pred;\n                        var $244 = Word$foldl$(_w0$4(_nil$3), _w0$4, _w1$5, $243);\n                        return $244;\n                    case 'Word.i':\n                        var $245 = self.pred;\n                        var $246 = Word$foldl$(_w1$5(_nil$3), _w0$4, _w1$5, $245);\n                        return $246;\n                    case 'Word.e':\n                        var $247 = _nil$3;\n                        return $247;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$foldl = x0 => x1 => x2 => x3 => Word$foldl$(x0, x1, x2, x3);\n\n    function Array$get$(_idx$3, _arr$4) {\n        var $248 = Word$foldl$(Array$extract_tip, (_rec$6 => _arr$7 => {\n            var _arr_l$8 = Array$extract_tie$(_arr$7);\n            var self = _arr_l$8;\n            switch (self._) {\n                case 'Pair.new':\n                    var $250 = self.fst;\n                    var $251 = _rec$6($250);\n                    var $249 = $251;\n                    break;\n            };\n            return $249;\n        }), (_rec$6 => _arr$7 => {\n            var _arr_r$8 = Array$extract_tie$(_arr$7);\n            var self = _arr_r$8;\n            switch (self._) {\n                case 'Pair.new':\n                    var $253 = self.snd;\n                    var $254 = _rec$6($253);\n                    var $252 = $254;\n                    break;\n            };\n            return $252;\n        }), _idx$3)(_arr$4);\n        return $248;\n    };\n    const Array$get = x0 => x1 => Array$get$(x0, x1);\n    const Buffer32$get = a0 => a1 => ((a1[a0]));\n    const VoxBox$get_pos = a0 => a1 => ((a1.buffer[a0 * 2]));\n    const U32$add = a0 => a1 => ((a0 + a1) >>> 0);\n    const VoxBox$get_col = a0 => a1 => ((a1.buffer[a0 * 2 + 1]));\n\n    function Word$and$(_a$2, _b$3) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $256 = self.pred;\n                var $257 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $259 = self.pred;\n                            var $260 = (_a$pred$9 => {\n                                var $261 = Word$o$(Word$and$(_a$pred$9, $259));\n                                return $261;\n                            });\n                            var $258 = $260;\n                            break;\n                        case 'Word.i':\n                            var $262 = self.pred;\n                            var $263 = (_a$pred$9 => {\n                                var $264 = Word$o$(Word$and$(_a$pred$9, $262));\n                                return $264;\n                            });\n                            var $258 = $263;\n                            break;\n                        case 'Word.e':\n                            var $265 = (_a$pred$7 => {\n                                var $266 = Word$e;\n                                return $266;\n                            });\n                            var $258 = $265;\n                            break;\n                    };\n                    var $258 = $258($256);\n                    return $258;\n                });\n                var $255 = $257;\n                break;\n            case 'Word.i':\n                var $267 = self.pred;\n                var $268 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $270 = self.pred;\n                            var $271 = (_a$pred$9 => {\n                                var $272 = Word$o$(Word$and$(_a$pred$9, $270));\n                                return $272;\n                            });\n                            var $269 = $271;\n                            break;\n                        case 'Word.i':\n                            var $273 = self.pred;\n                            var $274 = (_a$pred$9 => {\n                                var $275 = Word$i$(Word$and$(_a$pred$9, $273));\n                                return $275;\n                            });\n                            var $269 = $274;\n                            break;\n                        case 'Word.e':\n                            var $276 = (_a$pred$7 => {\n                                var $277 = Word$e;\n                                return $277;\n                            });\n                            var $269 = $276;\n                            break;\n                    };\n                    var $269 = $269($267);\n                    return $269;\n                });\n                var $255 = $268;\n                break;\n            case 'Word.e':\n                var $278 = (_b$4 => {\n                    var $279 = Word$e;\n                    return $279;\n                });\n                var $255 = $278;\n                break;\n        };\n        var $255 = $255(_b$3);\n        return $255;\n    };\n    const Word$and = x0 => x1 => Word$and$(x0, x1);\n    const U32$and = a0 => a1 => (a0 & a1);\n\n    function Word$shift_right$one$go$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $281 = self.pred;\n                var $282 = Word$o$(Word$shift_right$one$go$($281));\n                var $280 = $282;\n                break;\n            case 'Word.i':\n                var $283 = self.pred;\n                var $284 = Word$i$(Word$shift_right$one$go$($283));\n                var $280 = $284;\n                break;\n            case 'Word.e':\n                var $285 = Word$o$(Word$e);\n                var $280 = $285;\n                break;\n        };\n        return $280;\n    };\n    const Word$shift_right$one$go = x0 => Word$shift_right$one$go$(x0);\n\n    function Word$shift_right$one$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $287 = self.pred;\n                var $288 = Word$shift_right$one$go$($287);\n                var $286 = $288;\n                break;\n            case 'Word.i':\n                var $289 = self.pred;\n                var $290 = Word$shift_right$one$go$($289);\n                var $286 = $290;\n                break;\n            case 'Word.e':\n                var $291 = Word$e;\n                var $286 = $291;\n                break;\n        };\n        return $286;\n    };\n    const Word$shift_right$one = x0 => Word$shift_right$one$(x0);\n\n    function Word$shift_right$(_n$2, _value$3) {\n        var Word$shift_right$ = (_n$2, _value$3) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _value$3]\n        });\n        var Word$shift_right = _n$2 => _value$3 => Word$shift_right$(_n$2, _value$3);\n        var arg = [_n$2, _value$3];\n        while (true) {\n            let [_n$2, _value$3] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $292 = _value$3;\n                    return $292;\n                } else {\n                    var $293 = (self - 1n);\n                    var $294 = Word$shift_right$($293, Word$shift_right$one$(_value$3));\n                    return $294;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$shift_right = x0 => x1 => Word$shift_right$(x0, x1);\n\n    function Word$shr$(_n$2, _value$3) {\n        var _n_nat$4 = Word$to_nat$(_n$2);\n        var $295 = Word$shift_right$(_n_nat$4, _value$3);\n        return $295;\n    };\n    const Word$shr = x0 => x1 => Word$shr$(x0, x1);\n    const U32$shr = a0 => a1 => (a0 >>> a1);\n    const Pos32$new = a0 => a1 => a2 => ((0 | a0 | (a1 << 12) | (a2 << 24)));\n\n    function Array$mut$(_idx$3, _f$4, _arr$5) {\n        var $296 = Word$foldl$((_arr$6 => {\n            var $297 = Array$tip$(_f$4(Array$extract_tip$(_arr$6)));\n            return $297;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $299 = self.fst;\n                    var $300 = self.snd;\n                    var $301 = Array$tie$(_rec$7($299), $300);\n                    var $298 = $301;\n                    break;\n            };\n            return $298;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $303 = self.fst;\n                    var $304 = self.snd;\n                    var $305 = Array$tie$($303, _rec$7($304));\n                    var $302 = $305;\n                    break;\n            };\n            return $302;\n        }), _idx$3)(_arr$5);\n        return $296;\n    };\n    const Array$mut = x0 => x1 => x2 => Array$mut$(x0, x1, x2);\n\n    function Array$set$(_idx$3, _val$4, _arr$5) {\n        var $306 = Array$mut$(_idx$3, (_x$6 => {\n            var $307 = _val$4;\n            return $307;\n        }), _arr$5);\n        return $306;\n    };\n    const Array$set = x0 => x1 => x2 => Array$set$(x0, x1, x2);\n    const Buffer32$set = a0 => a1 => a2 => ((a2[a0] = a1, a2));\n    const VoxBox$set_pos = a0 => a1 => a2 => ((a2.buffer[a0 * 2] = a1, a2));\n    const VoxBox$set_col = a0 => a1 => a2 => ((a2.buffer[a0 * 2 + 1] = a1, a2));\n    const VoxBox$push = a0 => a1 => a2 => ((a2.buffer[a2.length * 2] = a0, a2.buffer[a2.length * 2 + 1] = a1, a2.length++, a2));\n\n    function VoxBox$Draw$image$(_x$1, _y$2, _z$3, _src$4, _img$5) {\n        var _len$6 = VoxBox$get_len$(_src$4);\n        var _img$7 = (() => {\n            var $309 = _img$5;\n            var $310 = 0;\n            var $311 = _len$6;\n            let _img$8 = $309;\n            for (let _i$7 = $310; _i$7 < $311; ++_i$7) {\n                var _pos$9 = ((_src$4.buffer[_i$7 * 2]));\n                var _col$10 = ((_src$4.buffer[_i$7 * 2 + 1]));\n                var _p_x$11 = (_pos$9 & 4095);\n                var _p_y$12 = ((_pos$9 & 16773120) >>> 12);\n                var _p_z$13 = ((_pos$9 & 4278190080) >>> 24);\n                var _p_x$14 = ((_p_x$11 + _x$1) >>> 0);\n                var _p_y$15 = ((_p_y$12 + _y$2) >>> 0);\n                var _p_z$16 = ((_p_z$13 + _z$3) >>> 0);\n                var _pos$17 = ((0 | _p_x$14 | (_p_y$15 << 12) | (_p_z$16 << 24)));\n                var $309 = ((_img$8.buffer[_img$8.length * 2] = _pos$17, _img$8.buffer[_img$8.length * 2 + 1] = _col$10, _img$8.length++, _img$8));\n                _img$8 = $309;\n            };\n            return _img$8;\n        })();\n        var $308 = _img$7;\n        return $308;\n    };\n    const VoxBox$Draw$image = x0 => x1 => x2 => x3 => x4 => VoxBox$Draw$image$(x0, x1, x2, x3, x4);\n\n    function App$Drawing$draw$boards$(_img$1, _state$2) {\n        var self = _state$2;\n        switch (self._) {\n            case 'App.Store.new':\n                var $313 = self.local;\n                var $314 = $313;\n                var _local$3 = $314;\n                break;\n        };\n        var self = _local$3;\n        switch (self._) {\n            case 'App.Drawing.State.local.new':\n                var $315 = self.whiteboard;\n                var $316 = $315;\n                var _whiteboard$4 = $316;\n                break;\n        };\n        var _img$5 = VoxBox$clear$(_img$1);\n        var $312 = VoxBox$Draw$image$(0, 0, 0, (() => {\n            var self = _whiteboard$4;\n            switch (self._) {\n                case 'App.Drawing.Whiteboard.new':\n                    var $317 = self.live;\n                    var $318 = $317;\n                    return $318;\n            };\n        })(), _img$5);\n        return $312;\n    };\n    const App$Drawing$draw$boards = x0 => x1 => App$Drawing$draw$boards$(x0, x1);\n\n    function DOM$vbox$(_props$1, _style$2, _value$3) {\n        var $319 = ({\n            _: 'DOM.vbox',\n            'props': _props$1,\n            'style': _style$2,\n            'value': _value$3\n        });\n        return $319;\n    };\n    const DOM$vbox = x0 => x1 => x2 => DOM$vbox$(x0, x1, x2);\n\n    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {\n        var $320 = ({\n            _: 'BitsMap.tie',\n            'val': _val$2,\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $320;\n    };\n    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);\n\n    function Maybe$some$(_value$2) {\n        var $321 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $321;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n    const BitsMap$set = a0 => a1 => a2 => (bitsmap_set(a0, a1, a2, 'set'));\n    const Bits$e = '';\n    const Bits$o = a0 => (a0 + '0');\n    const Bits$i = a0 => (a0 + '1');\n    const Bits$concat = a0 => a1 => (a1 + a0);\n\n    function Word$to_bits$(_a$2) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $323 = self.pred;\n                var $324 = (Word$to_bits$($323) + '0');\n                var $322 = $324;\n                break;\n            case 'Word.i':\n                var $325 = self.pred;\n                var $326 = (Word$to_bits$($325) + '1');\n                var $322 = $326;\n                break;\n            case 'Word.e':\n                var $327 = Bits$e;\n                var $322 = $327;\n                break;\n        };\n        return $322;\n    };\n    const Word$to_bits = x0 => Word$to_bits$(x0);\n    const U16$to_bits = a0 => (u16_to_bits(a0));\n\n    function String$to_bits$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $329 = Bits$e;\n            var $328 = $329;\n        } else {\n            var $330 = self.charCodeAt(0);\n            var $331 = self.slice(1);\n            var $332 = (String$to_bits$($331) + (u16_to_bits($330)));\n            var $328 = $332;\n        };\n        return $328;\n    };\n    const String$to_bits = x0 => String$to_bits$(x0);\n\n    function Map$from_list$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $334 = self.head;\n                var $335 = self.tail;\n                var self = $334;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $337 = self.fst;\n                        var $338 = self.snd;\n                        var $339 = (bitsmap_set(String$to_bits$($337), $338, Map$from_list$($335), 'set'));\n                        var $336 = $339;\n                        break;\n                };\n                var $333 = $336;\n                break;\n            case 'List.nil':\n                var $340 = BitsMap$new;\n                var $333 = $340;\n                break;\n        };\n        return $333;\n    };\n    const Map$from_list = x0 => Map$from_list$(x0);\n\n    function App$Drawing$App$draw$(_img$1, _state$2) {\n        var self = _state$2;\n        switch (self._) {\n            case 'App.Store.new':\n                var _img$5 = App$Drawing$draw$boards$(_img$1, _state$2);\n                var $342 = DOM$vbox$(Map$from_list$(List$cons$(Pair$new$(\"width\", \"256\"), List$nil)), Map$from_list$(List$nil), _img$5);\n                var $341 = $342;\n                break;\n        };\n        return $341;\n    };\n    const App$Drawing$App$draw = x0 => x1 => App$Drawing$App$draw$(x0, x1);\n\n    function Pair$snd$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $344 = self.snd;\n                var $345 = $344;\n                var $343 = $345;\n                break;\n        };\n        return $343;\n    };\n    const Pair$snd = x0 => Pair$snd$(x0);\n    const App$State$global = Pair$snd;\n\n    function IO$(_A$1) {\n        var $346 = null;\n        return $346;\n    };\n    const IO = x0 => IO$(x0);\n\n    function Maybe$(_A$1) {\n        var $347 = null;\n        return $347;\n    };\n    const Maybe = x0 => Maybe$(x0);\n\n    function IO$ask$(_query$2, _param$3, _then$4) {\n        var $348 = ({\n            _: 'IO.ask',\n            'query': _query$2,\n            'param': _param$3,\n            'then': _then$4\n        });\n        return $348;\n    };\n    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);\n\n    function IO$bind$(_a$3, _f$4) {\n        var self = _a$3;\n        switch (self._) {\n            case 'IO.end':\n                var $350 = self.value;\n                var $351 = _f$4($350);\n                var $349 = $351;\n                break;\n            case 'IO.ask':\n                var $352 = self.query;\n                var $353 = self.param;\n                var $354 = self.then;\n                var $355 = IO$ask$($352, $353, (_x$8 => {\n                    var $356 = IO$bind$($354(_x$8), _f$4);\n                    return $356;\n                }));\n                var $349 = $355;\n                break;\n        };\n        return $349;\n    };\n    const IO$bind = x0 => x1 => IO$bind$(x0, x1);\n\n    function IO$end$(_value$2) {\n        var $357 = ({\n            _: 'IO.end',\n            'value': _value$2\n        });\n        return $357;\n    };\n    const IO$end = x0 => IO$end$(x0);\n\n    function IO$monad$(_new$2) {\n        var $358 = _new$2(IO$bind)(IO$end);\n        return $358;\n    };\n    const IO$monad = x0 => IO$monad$(x0);\n    const App$pass = IO$monad$((_m$bind$2 => _m$pure$3 => {\n        var $359 = _m$pure$3;\n        return $359;\n    }))(Maybe$none);\n    const Debug$log = a0 => a1 => ((console.log(a0), a1()));\n    const Nat$ltn = a0 => a1 => (a0 < a1);\n    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);\n\n    function Cmp$as_gte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $361 = Bool$false;\n                var $360 = $361;\n                break;\n            case 'Cmp.eql':\n            case 'Cmp.gtn':\n                var $362 = Bool$true;\n                var $360 = $362;\n                break;\n        };\n        return $360;\n    };\n    const Cmp$as_gte = x0 => Cmp$as_gte$(x0);\n\n    function Word$gte$(_a$2, _b$3) {\n        var $363 = Cmp$as_gte$(Word$cmp$(_a$2, _b$3));\n        return $363;\n    };\n    const Word$gte = x0 => x1 => Word$gte$(x0, x1);\n\n    function Word$subber$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $365 = self.pred;\n                var $366 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $368 = self.pred;\n                            var $369 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $371 = Word$i$(Word$subber$(_a$pred$10, $368, Bool$true));\n                                    var $370 = $371;\n                                } else {\n                                    var $372 = Word$o$(Word$subber$(_a$pred$10, $368, Bool$false));\n                                    var $370 = $372;\n                                };\n                                return $370;\n                            });\n                            var $367 = $369;\n                            break;\n                        case 'Word.i':\n                            var $373 = self.pred;\n                            var $374 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $376 = Word$o$(Word$subber$(_a$pred$10, $373, Bool$true));\n                                    var $375 = $376;\n                                } else {\n                                    var $377 = Word$i$(Word$subber$(_a$pred$10, $373, Bool$true));\n                                    var $375 = $377;\n                                };\n                                return $375;\n                            });\n                            var $367 = $374;\n                            break;\n                        case 'Word.e':\n                            var $378 = (_a$pred$8 => {\n                                var $379 = Word$e;\n                                return $379;\n                            });\n                            var $367 = $378;\n                            break;\n                    };\n                    var $367 = $367($365);\n                    return $367;\n                });\n                var $364 = $366;\n                break;\n            case 'Word.i':\n                var $380 = self.pred;\n                var $381 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $383 = self.pred;\n                            var $384 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $386 = Word$o$(Word$subber$(_a$pred$10, $383, Bool$false));\n                                    var $385 = $386;\n                                } else {\n                                    var $387 = Word$i$(Word$subber$(_a$pred$10, $383, Bool$false));\n                                    var $385 = $387;\n                                };\n                                return $385;\n                            });\n                            var $382 = $384;\n                            break;\n                        case 'Word.i':\n                            var $388 = self.pred;\n                            var $389 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $391 = Word$i$(Word$subber$(_a$pred$10, $388, Bool$true));\n                                    var $390 = $391;\n                                } else {\n                                    var $392 = Word$o$(Word$subber$(_a$pred$10, $388, Bool$false));\n                                    var $390 = $392;\n                                };\n                                return $390;\n                            });\n                            var $382 = $389;\n                            break;\n                        case 'Word.e':\n                            var $393 = (_a$pred$8 => {\n                                var $394 = Word$e;\n                                return $394;\n                            });\n                            var $382 = $393;\n                            break;\n                    };\n                    var $382 = $382($380);\n                    return $382;\n                });\n                var $364 = $381;\n                break;\n            case 'Word.e':\n                var $395 = (_b$5 => {\n                    var $396 = Word$e;\n                    return $396;\n                });\n                var $364 = $395;\n                break;\n        };\n        var $364 = $364(_b$3);\n        return $364;\n    };\n    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);\n\n    function Word$sub$(_a$2, _b$3) {\n        var $397 = Word$subber$(_a$2, _b$3, Bool$false);\n        return $397;\n    };\n    const Word$sub = x0 => x1 => Word$sub$(x0, x1);\n\n    function Word$div$go$(_shift$2, _sub_copy$3, _shift_copy$4, _value$5) {\n        var Word$div$go$ = (_shift$2, _sub_copy$3, _shift_copy$4, _value$5) => ({\n            ctr: 'TCO',\n            arg: [_shift$2, _sub_copy$3, _shift_copy$4, _value$5]\n        });\n        var Word$div$go = _shift$2 => _sub_copy$3 => _shift_copy$4 => _value$5 => Word$div$go$(_shift$2, _sub_copy$3, _shift_copy$4, _value$5);\n        var arg = [_shift$2, _sub_copy$3, _shift_copy$4, _value$5];\n        while (true) {\n            let [_shift$2, _sub_copy$3, _shift_copy$4, _value$5] = arg;\n            var R = (() => {\n                var self = Word$gte$(_sub_copy$3, _shift_copy$4);\n                if (self) {\n                    var _mask$6 = Word$shift_left$(_shift$2, Word$inc$(Word$to_zero$(_sub_copy$3)));\n                    var $398 = Pair$new$(Bool$true, Word$or$(_value$5, _mask$6));\n                    var self = $398;\n                } else {\n                    var $399 = Pair$new$(Bool$false, _value$5);\n                    var self = $399;\n                };\n                switch (self._) {\n                    case 'Pair.new':\n                        var $400 = self.fst;\n                        var $401 = self.snd;\n                        var self = _shift$2;\n                        if (self === 0n) {\n                            var $403 = $401;\n                            var $402 = $403;\n                        } else {\n                            var $404 = (self - 1n);\n                            var _new_shift_copy$9 = Word$shift_right$(1n, _shift_copy$4);\n                            var self = $400;\n                            if (self) {\n                                var $406 = Word$div$go$($404, Word$sub$(_sub_copy$3, _shift_copy$4), _new_shift_copy$9, $401);\n                                var $405 = $406;\n                            } else {\n                                var $407 = Word$div$go$($404, _sub_copy$3, _new_shift_copy$9, $401);\n                                var $405 = $407;\n                            };\n                            var $402 = $405;\n                        };\n                        return $402;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$div$go = x0 => x1 => x2 => x3 => Word$div$go$(x0, x1, x2, x3);\n\n    function Word$div$(_a$2, _b$3) {\n        var _a_bits$4 = Word$bit_length$(_a$2);\n        var _b_bits$5 = Word$bit_length$(_b$3);\n        var self = (_a_bits$4 < _b_bits$5);\n        if (self) {\n            var $409 = Word$to_zero$(_a$2);\n            var $408 = $409;\n        } else {\n            var _shift$6 = (_a_bits$4 - _b_bits$5 <= 0n ? 0n : _a_bits$4 - _b_bits$5);\n            var _shift_copy$7 = Word$shift_left$(_shift$6, _b$3);\n            var $410 = Word$div$go$(_shift$6, _a$2, _shift_copy$7, Word$to_zero$(_a$2));\n            var $408 = $410;\n        };\n        return $408;\n    };\n    const Word$div = x0 => x1 => Word$div$(x0, x1);\n    const U32$div = a0 => a1 => ((a0 / a1) >>> 0);\n\n    function Word$mod$(_a$2, _b$3) {\n        var _q$4 = Word$div$(_a$2, _b$3);\n        var $411 = Word$sub$(_a$2, Word$mul$(_b$3, _q$4));\n        return $411;\n    };\n    const Word$mod = x0 => x1 => Word$mod$(x0, x1);\n    const U32$mod = a0 => a1 => (a0 % a1);\n    const U32$sub = a0 => a1 => ((a0 - a1) >>> 0);\n\n    function VoxBox$Draw$square$(_x$1, _y$2, _z$3, _w$4, _h$5, _col$6, _img$7) {\n        var _siz$8 = ((_w$4 * _h$5) >>> 0);\n        var _w_2$9 = ((_w$4 / 2) >>> 0);\n        var _h_2$10 = ((_h$5 / 2) >>> 0);\n        var $412 = (() => {\n            var $413 = _img$7;\n            var $414 = 0;\n            var $415 = _siz$8;\n            let _pix$12 = $413;\n            for (let _idx$11 = $414; _idx$11 < $415; ++_idx$11) {\n                var _v_x$13 = (_idx$11 % _w$4);\n                var _v_y$14 = ((_idx$11 / _h$5) >>> 0);\n                var _p_x$15 = ((((_x$1 + _v_x$13) >>> 0) - _w_2$9) >>> 0);\n                var _p_y$16 = ((((_y$2 + _v_y$14) >>> 0) - _h_2$10) >>> 0);\n                var _pos$17 = ((0 | _p_x$15 | (_p_y$16 << 12) | (_z$3 << 24)));\n                var _pix$18 = ((_pix$12.buffer[_pix$12.length * 2] = _pos$17, _pix$12.buffer[_pix$12.length * 2 + 1] = _col$6, _pix$12.length++, _pix$12));\n                var $413 = _pix$18;\n                _pix$12 = $413;\n            };\n            return _pix$12;\n        })();\n        return $412;\n    };\n    const VoxBox$Draw$square = x0 => x1 => x2 => x3 => x4 => x5 => x6 => VoxBox$Draw$square$(x0, x1, x2, x3, x4, x5, x6);\n\n    function App$Drawing$draw$pencil$(_local$1) {\n        var $416 = ((console.log(\"push\"), (_$2 => {\n            var self = _local$1;\n            switch (self._) {\n                case 'App.Drawing.State.local.new':\n                    var $418 = self.style;\n                    var $419 = $418;\n                    var _style$3 = $419;\n                    break;\n            };\n            var self = _style$3;\n            switch (self._) {\n                case 'App.Drawing.Style.new':\n                    var $420 = self.size;\n                    var $421 = $420;\n                    var _size$4 = $421;\n                    break;\n            };\n            var self = _local$1;\n            switch (self._) {\n                case 'App.Drawing.State.local.new':\n                    var $422 = self.whiteboard;\n                    var $423 = $422;\n                    var _wb$5 = $423;\n                    break;\n            };\n            var self = _local$1;\n            switch (self._) {\n                case 'App.Drawing.State.local.new':\n                    var $424 = self.env_info;\n                    var $425 = $424;\n                    var self = $425;\n                    break;\n            };\n            switch (self._) {\n                case 'App.EnvInfo.new':\n                    var $426 = self.mouse_pos;\n                    var $427 = $426;\n                    var _info$6 = $427;\n                    break;\n            };\n            var self = _style$3;\n            switch (self._) {\n                case 'App.Drawing.Style.new':\n                    var $428 = self.color;\n                    var $429 = $428;\n                    var _color$7 = $429;\n                    break;\n            };\n            var _new_board$8 = VoxBox$Draw$square$((() => {\n                var self = _info$6;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $430 = self.fst;\n                        var $431 = $430;\n                        return $431;\n                };\n            })(), (() => {\n                var self = _info$6;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $432 = self.snd;\n                        var $433 = $432;\n                        return $433;\n                };\n            })(), 0, _size$4, _size$4, _color$7, (() => {\n                var self = _wb$5;\n                switch (self._) {\n                    case 'App.Drawing.Whiteboard.new':\n                        var $434 = self.live;\n                        var $435 = $434;\n                        return $435;\n                };\n            })());\n            var self = _wb$5;\n            switch (self._) {\n                case 'App.Drawing.Whiteboard.new':\n                    var $436 = self.past;\n                    var $437 = self.future;\n                    var $438 = App$Drawing$Whiteboard$new$($436, _new_board$8, $437);\n                    var _new_wb$9 = $438;\n                    break;\n            };\n            var self = _local$1;\n            switch (self._) {\n                case 'App.Drawing.State.local.new':\n                    var $439 = self.input;\n                    var $440 = self.user;\n                    var $441 = self.drawing;\n                    var $442 = self.style;\n                    var $443 = self.env_info;\n                    var $444 = App$Drawing$State$local$new$($439, $440, $441, $442, _new_wb$9, $443);\n                    var $417 = $444;\n                    break;\n            };\n            return $417;\n        })()));\n        return $416;\n    };\n    const App$Drawing$draw$pencil = x0 => App$Drawing$draw$pencil$(x0);\n\n    function App$set_local$(_value$2) {\n        var $445 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n            var $446 = _m$pure$4;\n            return $446;\n        }))(Maybe$some$(_value$2));\n        return $445;\n    };\n    const App$set_local = x0 => App$set_local$(x0);\n\n    function List$fold$(_list$2, _nil$4, _cons$5) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.cons':\n                var $448 = self.head;\n                var $449 = self.tail;\n                var $450 = _cons$5($448)(List$fold$($449, _nil$4, _cons$5));\n                var $447 = $450;\n                break;\n            case 'List.nil':\n                var $451 = _nil$4;\n                var $447 = $451;\n                break;\n        };\n        return $447;\n    };\n    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);\n\n    function Either$(_A$1, _B$2) {\n        var $452 = null;\n        return $452;\n    };\n    const Either = x0 => x1 => Either$(x0, x1);\n\n    function Either$left$(_value$3) {\n        var $453 = ({\n            _: 'Either.left',\n            'value': _value$3\n        });\n        return $453;\n    };\n    const Either$left = x0 => Either$left$(x0);\n\n    function Either$right$(_value$3) {\n        var $454 = ({\n            _: 'Either.right',\n            'value': _value$3\n        });\n        return $454;\n    };\n    const Either$right = x0 => Either$right$(x0);\n\n    function Nat$sub_rem$(_n$1, _m$2) {\n        var Nat$sub_rem$ = (_n$1, _m$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2]\n        });\n        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);\n        var arg = [_n$1, _m$2];\n        while (true) {\n            let [_n$1, _m$2] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $455 = Either$left$(_n$1);\n                    return $455;\n                } else {\n                    var $456 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $458 = Either$right$(Nat$succ$($456));\n                        var $457 = $458;\n                    } else {\n                        var $459 = (self - 1n);\n                        var $460 = Nat$sub_rem$($459, $456);\n                        var $457 = $460;\n                    };\n                    return $457;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);\n\n    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {\n        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _d$3]\n        });\n        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);\n        var arg = [_n$1, _m$2, _d$3];\n        while (true) {\n            let [_n$1, _m$2, _d$3] = arg;\n            var R = (() => {\n                var self = Nat$sub_rem$(_n$1, _m$2);\n                switch (self._) {\n                    case 'Either.left':\n                        var $461 = self.value;\n                        var $462 = Nat$div_mod$go$($461, _m$2, Nat$succ$(_d$3));\n                        return $462;\n                    case 'Either.right':\n                        var $463 = Pair$new$(_d$3, _n$1);\n                        return $463;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);\n    const Nat$div_mod = a0 => a1 => (({\n        _: 'Pair.new',\n        'fst': a0 / a1,\n        'snd': a0 % a1\n    }));\n\n    function List$(_A$1) {\n        var $464 = null;\n        return $464;\n    };\n    const List = x0 => List$(x0);\n\n    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {\n        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_base$1, _nat$2, _res$3]\n        });\n        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);\n        var arg = [_base$1, _nat$2, _res$3];\n        while (true) {\n            let [_base$1, _nat$2, _res$3] = arg;\n            var R = (() => {\n                var self = (({\n                    _: 'Pair.new',\n                    'fst': _nat$2 / _base$1,\n                    'snd': _nat$2 % _base$1\n                }));\n                switch (self._) {\n                    case 'Pair.new':\n                        var $465 = self.fst;\n                        var $466 = self.snd;\n                        var self = $465;\n                        if (self === 0n) {\n                            var $468 = List$cons$($466, _res$3);\n                            var $467 = $468;\n                        } else {\n                            var $469 = (self - 1n);\n                            var $470 = Nat$to_base$go$(_base$1, $465, List$cons$($466, _res$3));\n                            var $467 = $470;\n                        };\n                        return $467;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);\n\n    function Nat$to_base$(_base$1, _nat$2) {\n        var $471 = Nat$to_base$go$(_base$1, _nat$2, List$nil);\n        return $471;\n    };\n    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);\n    const String$nil = '';\n\n    function String$cons$(_head$1, _tail$2) {\n        var $472 = (String.fromCharCode(_head$1) + _tail$2);\n        return $472;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n\n    function Nat$mod$go$(_n$1, _m$2, _r$3) {\n        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _r$3]\n        });\n        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);\n        var arg = [_n$1, _m$2, _r$3];\n        while (true) {\n            let [_n$1, _m$2, _r$3] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $473 = Nat$mod$go$(_n$1, _r$3, _m$2);\n                    return $473;\n                } else {\n                    var $474 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $476 = _r$3;\n                        var $475 = $476;\n                    } else {\n                        var $477 = (self - 1n);\n                        var $478 = Nat$mod$go$($477, $474, Nat$succ$(_r$3));\n                        var $475 = $478;\n                    };\n                    return $475;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);\n    const Nat$mod = a0 => a1 => (a0 % a1);\n    const Bool$and = a0 => a1 => (a0 && a1);\n    const Nat$gtn = a0 => a1 => (a0 > a1);\n    const Nat$lte = a0 => a1 => (a0 <= a1);\n\n    function List$at$(_index$2, _list$3) {\n        var List$at$ = (_index$2, _list$3) => ({\n            ctr: 'TCO',\n            arg: [_index$2, _list$3]\n        });\n        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);\n        var arg = [_index$2, _list$3];\n        while (true) {\n            let [_index$2, _list$3] = arg;\n            var R = (() => {\n                var self = _list$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $479 = self.head;\n                        var $480 = self.tail;\n                        var self = _index$2;\n                        if (self === 0n) {\n                            var $482 = Maybe$some$($479);\n                            var $481 = $482;\n                        } else {\n                            var $483 = (self - 1n);\n                            var $484 = List$at$($483, $480);\n                            var $481 = $484;\n                        };\n                        return $481;\n                    case 'List.nil':\n                        var $485 = Maybe$none;\n                        return $485;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$at = x0 => x1 => List$at$(x0, x1);\n\n    function Nat$show_digit$(_base$1, _n$2) {\n        var _m$3 = (_n$2 % _base$1);\n        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n        var self = ((_base$1 > 0n) && (_base$1 <= 64n));\n        if (self) {\n            var self = List$at$(_m$3, _base64$4);\n            switch (self._) {\n                case 'Maybe.some':\n                    var $488 = self.value;\n                    var $489 = $488;\n                    var $487 = $489;\n                    break;\n                case 'Maybe.none':\n                    var $490 = 35;\n                    var $487 = $490;\n                    break;\n            };\n            var $486 = $487;\n        } else {\n            var $491 = 35;\n            var $486 = $491;\n        };\n        return $486;\n    };\n    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);\n\n    function Nat$to_string_base$(_base$1, _nat$2) {\n        var $492 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {\n            var $493 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);\n            return $493;\n        }));\n        return $492;\n    };\n    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);\n\n    function Nat$show$(_n$1) {\n        var $494 = Nat$to_string_base$(10n, _n$1);\n        return $494;\n    };\n    const Nat$show = x0 => Nat$show$(x0);\n    const List$length = a0 => (list_length(a0));\n\n    function App$Drawing$Action$local$save$(_local$1) {\n        var self = _local$1;\n        switch (self._) {\n            case 'App.Drawing.State.local.new':\n                var $496 = self.whiteboard;\n                var self = $496;\n                switch (self._) {\n                    case 'App.Drawing.Whiteboard.new':\n                        var $498 = self.past;\n                        var $499 = self.live;\n                        var _past$11 = List$cons$($499, $498);\n                        var _live$12 = $499;\n                        var _future$13 = List$nil;\n                        var $500 = ((console.log(Nat$show$((list_length(_past$11)))), (_$14 => {\n                            var _whiteboard$15 = App$Drawing$Whiteboard$new$(_past$11, _live$12, _future$13);\n                            var self = _local$1;\n                            switch (self._) {\n                                case 'App.Drawing.State.local.new':\n                                    var $502 = self.input;\n                                    var $503 = self.user;\n                                    var $504 = self.drawing;\n                                    var $505 = self.style;\n                                    var $506 = self.env_info;\n                                    var $507 = App$Drawing$State$local$new$($502, $503, $504, $505, _whiteboard$15, $506);\n                                    var $501 = $507;\n                                    break;\n                            };\n                            return $501;\n                        })()));\n                        var $497 = $500;\n                        break;\n                };\n                var $495 = $497;\n                break;\n        };\n        return $495;\n    };\n    const App$Drawing$Action$local$save = x0 => App$Drawing$Action$local$save$(x0);\n    const U16$eql = a0 => a1 => (a0 === a1);\n\n    function List$tail$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $509 = self.tail;\n                var $510 = $509;\n                var $508 = $510;\n                break;\n            case 'List.nil':\n                var $511 = List$nil;\n                var $508 = $511;\n                break;\n        };\n        return $508;\n    };\n    const List$tail = x0 => List$tail$(x0);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function Maybe$default$(_m$2, _a$3) {\n        var self = _m$2;\n        switch (self._) {\n            case 'Maybe.some':\n                var $513 = self.value;\n                var $514 = $513;\n                var $512 = $514;\n                break;\n            case 'Maybe.none':\n                var $515 = _a$3;\n                var $512 = $515;\n                break;\n        };\n        return $512;\n    };\n    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);\n\n    function List$head$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $517 = self.head;\n                var $518 = Maybe$some$($517);\n                var $516 = $518;\n                break;\n            case 'List.nil':\n                var $519 = Maybe$none;\n                var $516 = $519;\n                break;\n        };\n        return $516;\n    };\n    const List$head = x0 => List$head$(x0);\n\n    function App$Drawing$Action$local$ctrl_z$(_local$1) {\n        var self = _local$1;\n        switch (self._) {\n            case 'App.Drawing.State.local.new':\n                var $521 = self.whiteboard;\n                var self = $521;\n                switch (self._) {\n                    case 'App.Drawing.Whiteboard.new':\n                        var $523 = self.past;\n                        var $524 = self.live;\n                        var $525 = self.future;\n                        var _past$11 = List$tail$($523);\n                        var self = _past$11;\n                        switch (self._) {\n                            case 'List.nil':\n                                var $527 = ((console.log(\"nil\"), (_$12 => {\n                                    var $528 = _local$1;\n                                    return $528;\n                                })()));\n                                var $526 = $527;\n                                break;\n                            case 'List.cons':\n                                var $529 = ((console.log(\"cons\"), (_$14 => {\n                                    var _square$15 = VoxBox$Draw$square$(126, 126, 0, 20, 20, ((0 | 0 | (255 << 8) | (0 << 16) | (125 << 24))), $524);\n                                    var $530 = ((console.log((\"past_length: \" + Nat$show$((list_length(_past$11))))), (_$16 => {\n                                        var head = List$head$(_past$11);\n                                        console.log(\"head:\", head);\n                                        var _live$17 = Maybe$default$(head, _square$15);\n                                        console.log(\"live:\", _live$17);\n                                        var _cleared$18 = VoxBox$clear$(_live$17);\n                                        var _live$19 = VoxBox$Draw$image$(0, 0, 0, _live$17, _cleared$18);\n                                        var _future$20 = List$cons$($524, $525);\n                                        var _wb$21 = App$Drawing$Whiteboard$new$(_past$11, _live$19, _future$20);\n                                        var self = _local$1;\n                                        switch (self._) {\n                                            case 'App.Drawing.State.local.new':\n                                                var $532 = self.input;\n                                                var $533 = self.user;\n                                                var $534 = self.drawing;\n                                                var $535 = self.style;\n                                                var $536 = self.env_info;\n                                                var $537 = App$Drawing$State$local$new$($532, $533, $534, $535, _wb$21, $536);\n                                                var _new_local$22 = $537;\n                                                break;\n                                        };\n                                        var $531 = _new_local$22;\n                                        return $531;\n                                    })()));\n                                    return $530;\n                                })()));\n                                var $526 = $529;\n                                break;\n                        };\n                        var $522 = $526;\n                        break;\n                };\n                var $520 = $522;\n                break;\n        };\n        return $520;\n    };\n    const App$Drawing$Action$local$ctrl_z = x0 => App$Drawing$Action$local$ctrl_z$(x0);\n\n    function App$Drawing$when$boards$(_event$1, _state$2) {\n        var self = _state$2;\n        switch (self._) {\n            case 'App.Store.new':\n                var $539 = self.local;\n                var $540 = $539;\n                var _local$3 = $540;\n                break;\n        };\n        var self = _event$1;\n        switch (self._) {\n            case 'App.Event.frame':\n                var $541 = self.info;\n                var self = _local$3;\n                switch (self._) {\n                    case 'App.Drawing.State.local.new':\n                        var $543 = self.drawing;\n                        var $544 = $543;\n                        var self = $544;\n                        break;\n                };\n                if (self) {\n                    var $545 = App$Drawing$draw$pencil$(_local$3);\n                    var _new_local$6 = $545;\n                } else {\n                    var $546 = _local$3;\n                    var _new_local$6 = $546;\n                };\n                var self = _local$3;\n                switch (self._) {\n                    case 'App.Drawing.State.local.new':\n                        var $547 = self.input;\n                        var $548 = self.user;\n                        var $549 = self.drawing;\n                        var $550 = self.style;\n                        var $551 = self.whiteboard;\n                        var $552 = App$Drawing$State$local$new$($547, $548, $549, $550, $551, $541);\n                        var _new_local$7 = $552;\n                        break;\n                };\n                var $542 = App$set_local$(_new_local$7);\n                var $538 = $542;\n                break;\n            case 'App.Event.key_down':\n                var $553 = self.code;\n                var self = ($553 === 65);\n                if (self) {\n                    var self = _local$3;\n                    switch (self._) {\n                        case 'App.Drawing.State.local.new':\n                            var $556 = self.style;\n                            var $557 = $556;\n                            var _style$6 = $557;\n                            break;\n                    };\n                    var self = _style$6;\n                    switch (self._) {\n                        case 'App.Drawing.Style.new':\n                            var $558 = self.tool;\n                            var $559 = self.size;\n                            var $560 = App$Drawing$Style$new$($558, $559, ((0 | 0 | (0 << 8) | (255 << 16) | (255 << 24))));\n                            var _style$7 = $560;\n                            break;\n                    };\n                    var self = _local$3;\n                    switch (self._) {\n                        case 'App.Drawing.State.local.new':\n                            var $561 = self.input;\n                            var $562 = self.user;\n                            var $563 = self.drawing;\n                            var $564 = self.whiteboard;\n                            var $565 = self.env_info;\n                            var $566 = App$Drawing$State$local$new$($561, $562, $563, _style$7, $564, $565);\n                            var _new_local$8 = $566;\n                            break;\n                    };\n                    var $555 = App$set_local$(_new_local$8);\n                    var $554 = $555;\n                } else {\n                    var self = ($553 === 83);\n                    if (self) {\n                        var self = _local$3;\n                        switch (self._) {\n                            case 'App.Drawing.State.local.new':\n                                var $569 = self.style;\n                                var $570 = $569;\n                                var _style$6 = $570;\n                                break;\n                        };\n                        var self = _style$6;\n                        switch (self._) {\n                            case 'App.Drawing.Style.new':\n                                var $571 = self.tool;\n                                var $572 = self.size;\n                                var $573 = App$Drawing$Style$new$($571, $572, ((0 | 255 | (0 << 8) | (0 << 16) | (255 << 24))));\n                                var _style$7 = $573;\n                                break;\n                        };\n                        var self = _local$3;\n                        switch (self._) {\n                            case 'App.Drawing.State.local.new':\n                                var $574 = self.input;\n                                var $575 = self.user;\n                                var $576 = self.drawing;\n                                var $577 = self.whiteboard;\n                                var $578 = self.env_info;\n                                var $579 = App$Drawing$State$local$new$($574, $575, $576, _style$7, $577, $578);\n                                var _new_local$8 = $579;\n                                break;\n                        };\n                        var $568 = App$set_local$(_new_local$8);\n                        var $567 = $568;\n                    } else {\n                        var self = ($553 === 90);\n                        if (self) {\n                            var $581 = App$set_local$(App$Drawing$Action$local$ctrl_z$(_local$3));\n                            var $580 = $581;\n                        } else {\n                            var $582 = App$pass;\n                            var $580 = $582;\n                        };\n                        var $567 = $580;\n                    };\n                    var $554 = $567;\n                };\n                var $538 = $554;\n                break;\n            case 'App.Event.init':\n            case 'App.Event.key_up':\n            case 'App.Event.mouse_over':\n            case 'App.Event.mouse_click':\n            case 'App.Event.input':\n                var $583 = App$pass;\n                var $538 = $583;\n                break;\n            case 'App.Event.mouse_down':\n                var self = _local$3;\n                switch (self._) {\n                    case 'App.Drawing.State.local.new':\n                        var $585 = self.input;\n                        var $586 = self.user;\n                        var $587 = self.style;\n                        var $588 = self.whiteboard;\n                        var $589 = self.env_info;\n                        var $590 = App$Drawing$State$local$new$($585, $586, Bool$true, $587, $588, $589);\n                        var _new_local$6 = $590;\n                        break;\n                };\n                var $584 = App$set_local$(_new_local$6);\n                var $538 = $584;\n                break;\n            case 'App.Event.mouse_up':\n                var self = _local$3;\n                switch (self._) {\n                    case 'App.Drawing.State.local.new':\n                        var $592 = self.input;\n                        var $593 = self.user;\n                        var $594 = self.style;\n                        var $595 = self.whiteboard;\n                        var $596 = self.env_info;\n                        var $597 = App$Drawing$State$local$new$($592, $593, Bool$false, $594, $595, $596);\n                        var _new_local$6 = $597;\n                        break;\n                };\n                var _new_local$7 = App$Drawing$Action$local$save$(_new_local$6);\n                var $591 = App$set_local$(_new_local$7);\n                var $538 = $591;\n                break;\n        };\n        return $538;\n    };\n    const App$Drawing$when$boards = x0 => x1 => App$Drawing$when$boards$(x0, x1);\n\n    function App$Drawing$App$when$(_event$1, _state$2) {\n        var self = _state$2;\n        switch (self._) {\n            case 'App.Store.new':\n                var $599 = self.global;\n                var $600 = $599;\n                var self = $600;\n                break;\n        };\n        switch (self._) {\n            case 'App.Drawing.State.global.new':\n                var $601 = self.stage;\n                var $602 = $601;\n                var _stage$3 = $602;\n                break;\n        };\n        var self = _stage$3;\n        switch (self._) {\n            case 'App.Drawing.Stage.start':\n            case 'App.Drawing.Stage.menu':\n                var $603 = App$pass;\n                var $598 = $603;\n                break;\n            case 'App.Drawing.Stage.boards':\n                var $604 = App$Drawing$when$boards$(_event$1, _state$2);\n                var $598 = $604;\n                break;\n        };\n        return $598;\n    };\n    const App$Drawing$App$when = x0 => x1 => App$Drawing$App$when$(x0, x1);\n\n    function App$Drawing$App$tick$(_tick$1, _glob$2) {\n        var $605 = _glob$2;\n        return $605;\n    };\n    const App$Drawing$App$tick = x0 => x1 => App$Drawing$App$tick$(x0, x1);\n\n    function App$Drawing$App$post$(_time$1, _room$2, _addr$3, _data$4, _glob$5) {\n        var $606 = _glob$5;\n        return $606;\n    };\n    const App$Drawing$App$post = x0 => x1 => x2 => x3 => x4 => App$Drawing$App$post$(x0, x1, x2, x3, x4);\n\n    function App$new$(_init$2, _draw$3, _when$4, _tick$5, _post$6) {\n        var $607 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4,\n            'tick': _tick$5,\n            'post': _post$6\n        });\n        return $607;\n    };\n    const App$new = x0 => x1 => x2 => x3 => x4 => App$new$(x0, x1, x2, x3, x4);\n    const App$Drawing = (() => {\n        var _img$1 = VoxBox$alloc_capacity$(((65536 * 8) >>> 0));\n        var _init$2 = App$Drawing$App$init$(_img$1);\n        var _draw$3 = App$Drawing$App$draw(_img$1);\n        var _when$4 = App$Drawing$App$when;\n        var _tick$5 = App$Drawing$App$tick;\n        var _post$6 = App$Drawing$App$post;\n        var $608 = App$new$(_init$2, _draw$3, _when$4, _tick$5, _post$6);\n        return $608;\n    })();\n    return {\n        'Buffer32.new': Buffer32$new,\n        'Array': Array,\n        'Array.tip': Array$tip,\n        'Array.tie': Array$tie,\n        'Array.alloc': Array$alloc,\n        'U32.new': U32$new,\n        'Word': Word,\n        'Word.e': Word$e,\n        'Word.o': Word$o,\n        'Word.zero': Word$zero,\n        'Nat.succ': Nat$succ,\n        'Nat.zero': Nat$zero,\n        'U32.zero': U32$zero,\n        'Buffer32.alloc': Buffer32$alloc,\n        'Word.bit_length.go': Word$bit_length$go,\n        'Word.bit_length': Word$bit_length,\n        'U32.bit_length': U32$bit_length,\n        'Word.i': Word$i,\n        'Bool.false': Bool$false,\n        'Bool.true': Bool$true,\n        'Word.shift_left.one.go': Word$shift_left$one$go,\n        'Word.shift_left.one': Word$shift_left$one,\n        'Word.shift_left': Word$shift_left,\n        'Word.adder': Word$adder,\n        'Word.add': Word$add,\n        'Word.mul.go': Word$mul$go,\n        'Word.to_zero': Word$to_zero,\n        'Word.mul': Word$mul,\n        'U32.mul': U32$mul,\n        'Nat.apply': Nat$apply,\n        'Word.inc': Word$inc,\n        'Nat.to_word': Nat$to_word,\n        'Nat.to_u32': Nat$to_u32,\n        'VoxBox.new': VoxBox$new,\n        'VoxBox.alloc_capacity': VoxBox$alloc_capacity,\n        'App.Drawing.Constants.room': App$Drawing$Constants$room,\n        'BitsMap.new': BitsMap$new,\n        'Map.new': Map$new,\n        'App.Drawing.Phase.active': App$Drawing$Phase$active,\n        'List.nil': List$nil,\n        'BitsMap': BitsMap,\n        'Map': Map,\n        'App.Drawing.Stage.boards': App$Drawing$Stage$boards,\n        'App.EnvInfo.new': App$EnvInfo$new,\n        'Pair.new': Pair$new,\n        'U32.from_nat': U32$from_nat,\n        'App.Drawing.Tool.pencil': App$Drawing$Tool$pencil,\n        'Word.or': Word$or,\n        'U32.or': U32$or,\n        'Word.fold': Word$fold,\n        'Nat.add': Nat$add,\n        'Nat.mul': Nat$mul,\n        'Word.to_nat': Word$to_nat,\n        'Word.shl': Word$shl,\n        'U32.shl': U32$shl,\n        'Col32.new': Col32$new,\n        'App.Drawing.Whiteboard.new': App$Drawing$Whiteboard$new,\n        'List.cons': List$cons,\n        'App.Drawing.Style.new': App$Drawing$Style$new,\n        'App.Store.new': App$Store$new,\n        'App.State.new': App$State$new,\n        'App.Drawing.State': App$Drawing$State,\n        'App.Drawing.State.local.new': App$Drawing$State$local$new,\n        'App.Drawing.State.global.new': App$Drawing$State$global$new,\n        'App.Drawing.App.init': App$Drawing$App$init,\n        'Pair.fst': Pair$fst,\n        'App.State.local': App$State$local,\n        'VoxBox.set_length': VoxBox$set_length,\n        'VoxBox.clear': VoxBox$clear,\n        'VoxBox.get_len': VoxBox$get_len,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.eql': Word$eql,\n        'U32.eql': U32$eql,\n        'U32.inc': U32$inc,\n        'U32.for': U32$for,\n        'Word.trim': Word$trim,\n        'Unit.new': Unit$new,\n        'Array.extract_tip': Array$extract_tip,\n        'Pair': Pair,\n        'Array.extract_tie': Array$extract_tie,\n        'Word.foldl': Word$foldl,\n        'Array.get': Array$get,\n        'Buffer32.get': Buffer32$get,\n        'VoxBox.get_pos': VoxBox$get_pos,\n        'U32.add': U32$add,\n        'VoxBox.get_col': VoxBox$get_col,\n        'Word.and': Word$and,\n        'U32.and': U32$and,\n        'Word.shift_right.one.go': Word$shift_right$one$go,\n        'Word.shift_right.one': Word$shift_right$one,\n        'Word.shift_right': Word$shift_right,\n        'Word.shr': Word$shr,\n        'U32.shr': U32$shr,\n        'Pos32.new': Pos32$new,\n        'Array.mut': Array$mut,\n        'Array.set': Array$set,\n        'Buffer32.set': Buffer32$set,\n        'VoxBox.set_pos': VoxBox$set_pos,\n        'VoxBox.set_col': VoxBox$set_col,\n        'VoxBox.push': VoxBox$push,\n        'VoxBox.Draw.image': VoxBox$Draw$image,\n        'App.Drawing.draw.boards': App$Drawing$draw$boards,\n        'DOM.vbox': DOM$vbox,\n        'BitsMap.tie': BitsMap$tie,\n        'Maybe.some': Maybe$some,\n        'Maybe.none': Maybe$none,\n        'BitsMap.set': BitsMap$set,\n        'Bits.e': Bits$e,\n        'Bits.o': Bits$o,\n        'Bits.i': Bits$i,\n        'Bits.concat': Bits$concat,\n        'Word.to_bits': Word$to_bits,\n        'U16.to_bits': U16$to_bits,\n        'String.to_bits': String$to_bits,\n        'Map.from_list': Map$from_list,\n        'App.Drawing.App.draw': App$Drawing$App$draw,\n        'Pair.snd': Pair$snd,\n        'App.State.global': App$State$global,\n        'IO': IO,\n        'Maybe': Maybe,\n        'IO.ask': IO$ask,\n        'IO.bind': IO$bind,\n        'IO.end': IO$end,\n        'IO.monad': IO$monad,\n        'App.pass': App$pass,\n        'Debug.log': Debug$log,\n        'Nat.ltn': Nat$ltn,\n        'Nat.sub': Nat$sub,\n        'Cmp.as_gte': Cmp$as_gte,\n        'Word.gte': Word$gte,\n        'Word.subber': Word$subber,\n        'Word.sub': Word$sub,\n        'Word.div.go': Word$div$go,\n        'Word.div': Word$div,\n        'U32.div': U32$div,\n        'Word.mod': Word$mod,\n        'U32.mod': U32$mod,\n        'U32.sub': U32$sub,\n        'VoxBox.Draw.square': VoxBox$Draw$square,\n        'App.Drawing.draw.pencil': App$Drawing$draw$pencil,\n        'App.set_local': App$set_local,\n        'List.fold': List$fold,\n        'Either': Either,\n        'Either.left': Either$left,\n        'Either.right': Either$right,\n        'Nat.sub_rem': Nat$sub_rem,\n        'Nat.div_mod.go': Nat$div_mod$go,\n        'Nat.div_mod': Nat$div_mod,\n        'List': List,\n        'Nat.to_base.go': Nat$to_base$go,\n        'Nat.to_base': Nat$to_base,\n        'String.nil': String$nil,\n        'String.cons': String$cons,\n        'Nat.mod.go': Nat$mod$go,\n        'Nat.mod': Nat$mod,\n        'Bool.and': Bool$and,\n        'Nat.gtn': Nat$gtn,\n        'Nat.lte': Nat$lte,\n        'List.at': List$at,\n        'Nat.show_digit': Nat$show_digit,\n        'Nat.to_string_base': Nat$to_string_base,\n        'Nat.show': Nat$show,\n        'List.length': List$length,\n        'App.Drawing.Action.local.save': App$Drawing$Action$local$save,\n        'U16.eql': U16$eql,\n        'List.tail': List$tail,\n        'String.concat': String$concat,\n        'Maybe.default': Maybe$default,\n        'List.head': List$head,\n        'App.Drawing.Action.local.ctrl_z': App$Drawing$Action$local$ctrl_z,\n        'App.Drawing.when.boards': App$Drawing$when$boards,\n        'App.Drawing.App.when': App$Drawing$App$when,\n        'App.Drawing.App.tick': App$Drawing$App$tick,\n        'App.Drawing.App.post': App$Drawing$App$post,\n        'App.new': App$new,\n        'App.Drawing': App$Drawing,\n    };\n})();\n"],"sourceRoot":""}