Test: IO(Unit)
  IO {
    let defs = Kind.Defs.read_main("
      type Bool {
        true
        false
      }

      not(b: Bool): Bool
        let b0 = ((P, t, f) f) :: Bool
        let b1 = Bool.true
        case b {
          true: b0
          false: b1
        }
    ")
    let defs = IO.purify!(Kind.Synth.one("not", defs)) <> Kind.Map.new!
    IO.print(Kind.Comp.Target.scheme(Kind.Comp.Defs.compile(defs)))
  }
