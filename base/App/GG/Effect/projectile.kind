App.GG.Effect.projectile.add_at(pos: App.GG.Coord, projectile: App.GG.Projectile): App.GG.Effect<Unit>
  (center, origin, local)
  let new_grid = App.GG.Projectile.create(pos, projectile, local@grid)
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(unit, center, origin, new_local, (enemy, img) img, 0, "")


App.GG.Effect.projectile.get: App.GG.Effect<Maybe<App.GG.Projectile>>
  (center, origin, local)
  let projectile = App.GG.Projectile.get(center, origin, local@grid)
  App.GG.Effect.Result.new!(projectile, center, origin, local, (enemy, img) img, 0, "")


App.GG.Effect.projectile.move(new_pos: App.GG.Coord): App.GG.Effect<Bool>
  (center, origin, local)
  let grid = local@grid
  let {bool, new_grid} = 
    case origin {
      creature: {false, grid}
      projectile:
        let tile_exists =
          Maybe.is_some!(App.GG.Grid.get(new_pos, grid))
        let new_grid = App.GG.Projectile.move(center, new_pos, origin.id, grid)
        {tile_exists, new_grid}
    }
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(bool, center, origin, new_local, (enemy, img) img, 0, "")

App.GG.Effect.projectile.add_hit(pos: App.GG.Coord): App.GG.Effect<Unit>
  (center, origin, local)
  let grid = local@grid
  let new_grid =
    let creature = App.GG.Creature.get(pos, grid)
    without creature: grid
    let id = creature@id
    case origin {
      creature: grid
      projectile:
        App.GG.Projectile.add_hit(id, center, origin.id, grid)
    }
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(unit, center, origin, new_local, (enemy, img) img, 0, "")

App.GG.Effect.projectile.has_hit(pos: App.GG.Coord): App.GG.Effect<Bool>
  (center, origin, local)
  let grid = local@grid
  let bool =
    Maybe {
      get creature = App.GG.Creature.get(pos, grid)
      get projectile = App.GG.Projectile.get(center, origin, grid)
      let info = projectile@info
      let bool = NatSet.has(creature@id, info@hits)
      return bool
    } <> false
  App.GG.Effect.Result.new!(bool, center, origin, local, (enemy, img) img, 0, "")

App.GG.Effect.projectile.delete: App.GG.Effect<Unit>
  (center, origin, local)
  let grid = local@grid
  let new_grid = 
    case origin {
      creature: grid
      projectile: 
        App.GG.Projectile.delete(center, origin.id, grid)
    }
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(unit, center, origin, new_local, (enemy, img) img, 0, "")


App.GG.Effect.projectile.hit.effect<A: Type>(coord: App.GG.Coord, f: App.GG.Coord -> App.GG.Effect<A>): App.GG.Effect<Maybe<A>>
  App.GG.Effect {
    get can_hit = App.GG.Effect.projectile.can_hit(coord)
    if can_hit then
      App.GG.Effect { 
        App.GG.Effect.projectile.add_hit(coord) // Adds enemy to list of targets hit by projectile
        get value = f(coord)
        return some(value)
      }
  else
    App.GG.Effect { return none }
  } 

App.GG.Effect.projectile.hit.damage_at(dmg: I32, coord: App.GG.Coord, flinch: Bool, intangible: Bool): App.GG.Effect<I32>
  App.GG.Effect { 
    let dmg = App.GG.Effect.damage(dmg, flinch, intangible)
    get dmg_dealt = App.GG.Effect.projectile.hit.effect<I32>(coord, dmg)
    return 
      without dmg_dealt: +0#32
      dmg_dealt
  }

App.GG.Effect.projectile.can_hit(coord: App.GG.Coord): App.GG.Effect<Bool>
  App.GG.Effect {
    get has_hit  = App.GG.Effect.projectile.has_hit(coord) // Checks if projectile has already hit that enemy
    get is_enemy = App.GG.Effect.creature.is_enemy(coord) // Checks if projectile is over an enemy
    let is_invulnerable = false //App.GG.Effect.status.is_invulnerable(coord) // Checks if projectile is trying to affect an invulnerable enemy
    let is_noname = false //App.GG.Effect.status.is_noname(coord) // Checks if projectile is trying to affect a creature with noname
    return not(is_noname) && not(is_invulnerable) && not(has_hit) && is_enemy
  }
  
App.GG.Effect.projectile.add_image(img: List<VoxBox>, duration: U64, coord: App.GG.Coord): App.GG.Effect<Unit>
  App.GG.Effect {
    let eff = App.GG.Effect.projectile.add_image.effect(img, duration)
    get team = App.GG.Effect.team.get
    without team: App.GG.Effect.pass
    let status = App.GG.Projectile.Status.unit
    let hits = NatSet.new
    let frame = 0#64
    let has_acted = false
    let projectile = App.GG.Projectile.new(App.GG.Projectile.Info.new(team, status, hits, frame, has_acted), eff)
    App.GG.Effect.projectile.add_at(coord, projectile)
  }

App.GG.Effect.projectile.add_image.effect(img: List<VoxBox>, duration: U64): App.GG.Effect<Unit>
  App.GG.Effect {
    get frame = App.GG.Effect.frame.get
    get center = App.GG.Effect.coord.get_center
    App.GG.Effect.frame.inc
    without frame: App.GG.Effect.pass
    App.GG.Effect {
      let img = img[U64.to_nat(frame) % List.length!(img)] 
      App.GG.Effect.vbox.at_tile(center, img <> VoxBox.empty)
      if frame =? duration then
        App.GG.Effect.projectile.delete
      else
        App.GG.Effect.pass
    }
  }