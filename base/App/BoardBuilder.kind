// App states (local = clicks, global = visitors)
App.BoardBuilder.State: App.State
  App.State.new(App.BoardBuilder.State.local, Unit)

type App.BoardBuilder.State.local {
  new(
    canvas_size: Pair<I32, I32>
    board: Hexagonal.Axial.Map<App.KL.Game.Terrain>
    mouse: Maybe<Pair<U32, U32>>
    actual_terrain: App.KL.Game.Terrain
    command: Maybe<Char>
    string: String
  )
}

// Initial state
App.BoardBuilder.init: App.Init<App.BoardBuilder.State>
  let canvas_size = {App.KL.Constants.center_x * 2, App.KL.Constants.center_y * 2}
  let board = Hexagonal.Axial.Map.new!
  let board = Hexagonal.Axial.Map.set!({0,0} :: Hexagonal.Axial, {1}, board)
  let mouse = none
  let actual_terrain = App.KL.Game.Terrain.new(1)
  let string = ""
  App.Store.new<App.BoardBuilder.State>(App.BoardBuilder.State.local.new(canvas_size, board, mouse, actual_terrain, none, ""), unit)

App.BoardBuilder.draw.board(
  canvas_size: Pair<I32, I32>
  board: Hexagonal.Axial.Map<App.KL.Game.Terrain>
  actual_terrain: App.KL.Game.Terrain
  mouse: Maybe<Pair<U32, U32>>
  img: VoxBox
): VoxBox
  // let mouse_coord = Hexagonal.Axial.from_screen_xy(mouse, App.KL.Constants.hexagon_radius, canvas_size@fst / 2, canvas_size@snd / 2)
  let img = 
    case mouse {
      none: img
      some: App.KL.Game.Phase.Play.draw.cursor(mouse.value, img)
    }
  // let img = App.BoardBuilder.draw.terrain(actual_terrain, mouse_coord, canvas_size,img)
  for coord:terrain in board with img:
    App.BoardBuilder.draw.terrain(terrain, coord, canvas_size, img)
  img

App.BoardBuilder.draw.terrain(
  terrain: App.KL.Game.Terrain, 
  coord: Hexagonal.Axial,
  canvas_size: Pair<I32, I32>
  img: VoxBox
): VoxBox
  let {i, j} = App.KL.Game.Phase.Play.draw.centralize(coord)
  let i = (i - 128) + I32.to_u32(App.KL.Constants.hexagon_radius)
  let j = (j - 128) + I32.to_u32(App.KL.Constants.hexagon_radius) + 5
  // let {i, j} = Hexagonal.Axial.to_screen_xy(coord, App.KL.Constants.hexagon_radius, canvas_size@fst, canvas_size@snd)
  let field  = App.KL.Game.Field.get_by_id.default(terrain@field_id)
  let field_drawing = field@draw(terrain, App.KL.Game.Indicator.background)
  let tile_drawing = VoxBox.Draw.image(i, j, I32.to_u32(coord@j) + 20, field_drawing, img)
  tile_drawing

App.BoardBuilder.generate_array(board: Hexagonal.Axial.Map<App.KL.Game.Terrain>): String
  let string = ""
  for coord:terrain in board with string:
    let coord_string   = "{" | String.show_clean(I32.show(coord@i)) | ", " | String.show_clean(I32.show(coord@j)) | "}"
    let terrain_string = Nat.show(terrain@field_id)
    "{" | coord_string | "," | terrain_string | "}" | ",\n" | string
  
  "[\n" | string | "]"

// Render function
App.BoardBuilder.draw(img: VoxBox): App.Draw<App.BoardBuilder.State>
  (state)
    open state
    let width = Nat.show(I32.to_nat(state.local@canvas_size@fst))
    let height = Nat.show(I32.to_nat(state.local@canvas_size@snd))
    let max_height = Nat.show(I32.to_nat(state.local@canvas_size@snd * 2))
    <div style={"margin-bottom": "10px"}>
      <div style={"display": "flex", "padding": "20px"}>
        <div style={"margin-right": "5px"}>
          {
            DOM.vbox(
              { "id": "game_screen",
                "width": width,
                "height": height,
                "scale": "2"},
              {},
              App.BoardBuilder.draw.board(state.local@canvas_size, state.local@board, state.local@actual_terrain, state.local@mouse, img)
            )
          }
        </div>
        <div style={"max-height": max_height|"px", "overflow": "auto", "display" : "flex", "flex-wrap": "wrap", "align-content": "flex-start"}>
          for value in List.indices!(App.KL.Game.Field.list):
            let selected = value@fst =? state.local@actual_terrain@field_id
            let border = if selected then "2px solid green" else "none"
            <div id=Nat.show(value@fst) style={"width" : "75px", "height": "fit-content", "padding": "5px", "font-size": "1rem", "cursor": "pointer", "display": "flex", "justify-content": "center", "align-items": "center", "flex-direction": "column", "border" : border, "box-sizing": "border-box"}>
              <img id=Nat.show(value@fst) src=value@snd@picture></img>
              <span id=Nat.show(value@fst)>value@snd@name</span>
            </div>
        </div>
      </div>
      <div style={"display": "flex", "width": "100vw", "justify-content": "center", "flex-direction": "column", "align-items":"center"}>
        <button id="generate_array" style={"font-size": "2rem", "padding": "2px"}>"Generate array"</button>
        <textarea readonly="readonly" value=state.local@string style={"width": "900px", "height": "900px", "font-size": "1rem"}></textarea>
      </div>
    </div>

// Event handler
App.BoardBuilder.when: App.When<App.BoardBuilder.State>
  (event, state)
    open state
    case event {
      input: 
        switch String.eql(event.id) {
          "width":
            let local = state.local@canvas_size <- {I32.read(event.text), state.local@canvas_size@snd}
            App.set_local!(local)
          "height":
            let local = state.local@canvas_size <- {state.local@canvas_size@fst, I32.read(event.text)}
            App.set_local!(local)
        } default App.pass!
      mouse_move:
        if String.eql("game_screen", event.id) then
          let {x,y} = event.mouse_pos
          let command = state.local@command <> ' '
          let mouse = {x / 2, y / 2}
          if Char.eql(command, 'X') then
            let coord = Hexagonal.Axial.from_screen_xy(mouse, App.KL.Constants.hexagon_radius, state.local@canvas_size@fst / 2, state.local@canvas_size@snd / 2)
            let board = Hexagonal.Axial.Map.set!(coord, state.local@actual_terrain, state.local@board)
            let local = state.local@mouse <- some(mouse)
            let local = local@board <- board
            App.set_local!(local)
          else
            let local = state.local@mouse <- some(mouse)
            App.set_local!(local)
        else
          let local = state.local@mouse <- none
          App.set_local!(local)
      mouse_click:
        if (event.id =? "generate_array") then
          let local = state.local@string <- App.BoardBuilder.generate_array(state.local@board)
          App.set_local!(local)
        else 
          log(Nat.show(Nat.read(event.id)))
          let terrain = App.KL.Game.Terrain.new(Nat.read(event.id))
          let local = state.local@actual_terrain <- terrain
          App.set_local!(local)
      mouse_up:
        let mouse = state.local@mouse
        without mouse: App.pass!
          let command = state.local@command <> ' '
          let coord = Hexagonal.Axial.from_screen_xy(mouse, App.KL.Constants.hexagon_radius, state.local@canvas_size@fst / 2, state.local@canvas_size@snd / 2)
          let board = 
            if Char.eql(command, 'Z') then
              Hexagonal.Axial.Map.delete!(coord, state.local@board)
            else  
              Hexagonal.Axial.Map.set!(coord, state.local@actual_terrain, state.local@board)
          let local = state.local@board <- board
          App.set_local!(local)
      key_up:
        let local = state.local@command <- none
        App.set_local!(local)
      key_down:
        let local = state.local@command <- some(event.code)
        App.set_local!(local)
    } default App.pass!

// Global ticker: not used
App.BoardBuilder.tick: App.Tick<App.BoardBuilder.State>
  App.no_tick<App.BoardBuilder.State>

// Global visitor: counts posts to room_zero
App.BoardBuilder.post: App.Post<App.BoardBuilder.State>
  App.no_post<App.BoardBuilder.State>

// A "BoardBuilder, world!" + counter application
App.BoardBuilder: App<App.BoardBuilder.State>
  let img = VoxBox.alloc_capacity(U32.mul(65536#32, 8#32))
  App.new<App.BoardBuilder.State>(
    App.BoardBuilder.init
    App.BoardBuilder.draw(img)
    App.BoardBuilder.when
    App.BoardBuilder.tick
    App.BoardBuilder.post
  )
