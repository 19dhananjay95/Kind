((((((Monad.bind Parser) Parser.monad) Nat) Fm.Term) Fm.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Unit) Fm.Term) (Fm.Parser.text "for ")) # ((((((Monad.bind Parser) Parser.monad) Fm.Name) Fm.Term) Fm.Parser.name1) #elem ((((((Monad.bind Parser) Parser.monad) Unit) Fm.Term) (Fm.Parser.text "in")) # ((((((Monad.bind Parser) Parser.monad) Fm.Term) Fm.Term) Fm.Parser.term) #list ((((((Monad.bind Parser) Parser.monad) Unit) Fm.Term) (Fm.Parser.text "with")) # ((((((Monad.bind Parser) Parser.monad) Fm.Name) Fm.Term) Fm.Parser.name1) #name ((((((Monad.bind Parser) Parser.monad) Unit) Fm.Term) (Fm.Parser.text ":")) # ((((((Monad.bind Parser) Parser.monad) Fm.Term) Fm.Term) Fm.Parser.term) #loop ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Fm.Term) (Fm.Parser.stop init)) #orig !term = (Fm.Term.ref "List.for"); !term = ((Fm.Term.app term) (Fm.Term.hol Bits.e)); !term = ((Fm.Term.app term) list); !term = ((Fm.Term.app term) (Fm.Term.hol Bits.e)); !term = ((Fm.Term.app term) (Fm.Term.ref name)); !lamb = ((Fm.Term.lam elem) #i ((Fm.Term.lam name) #x loop)); !term = ((Fm.Term.app term) lamb); !term = (((Fm.Term.let name) term) #x (Fm.Term.ref name)); ((((Monad.pure Parser) Parser.monad) Fm.Term) ((Fm.Term.ori orig) term))))))))))))