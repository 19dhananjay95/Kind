module.exports = (function() {
    function word_to_u16(w) {
        var u = 0;
        for (var i = 0; i < 16; ++i) {
            u = u | (w._ === 'Word.i' ? 1 << i : 0);
            w = w.pred;
        };
        return u;
    };

    function u16_to_word(u) {
        var w = {
            _: 'Word.e'
        };
        for (var i = 0; i < 16; ++i) {
            w = {
                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',
                pred: w
            };
        };
        return w;
    };

    function u16_to_bits(x) {
        var s = '';
        for (var i = 0; i < 16; ++i) {
            s = (x & 1 ? '1' : '0') + s;
            x = x >>> 1;
        }
        return s;
    };
    var list_for = list => nil => cons => {
        while (list._ !== 'List.nil') {
            nil = cons(list.head)(nil);
            list = list.tail;
        }
        return nil;
    };
    var list_length = list => {
        var len = 0;
        while (list._ === 'List.cons') {
            len += 1;
            list = list.tail;
        };
        return BigInt(len);
    };
    var nat_to_bits = n => {
        return n === 0n ? '' : n.toString(2);
    };
    var kind_name_to_bits = name => {
        const TABLE = {
            'A': '000000',
            'B': '100000',
            'C': '010000',
            'D': '110000',
            'E': '001000',
            'F': '101000',
            'G': '011000',
            'H': '111000',
            'I': '000100',
            'J': '100100',
            'K': '010100',
            'L': '110100',
            'M': '001100',
            'N': '101100',
            'O': '011100',
            'P': '111100',
            'Q': '000010',
            'R': '100010',
            'S': '010010',
            'T': '110010',
            'U': '001010',
            'V': '101010',
            'W': '011010',
            'X': '111010',
            'Y': '000110',
            'Z': '100110',
            'a': '010110',
            'b': '110110',
            'c': '001110',
            'd': '101110',
            'e': '011110',
            'f': '111110',
            'g': '000001',
            'h': '100001',
            'i': '010001',
            'j': '110001',
            'k': '001001',
            'l': '101001',
            'm': '011001',
            'n': '111001',
            'o': '000101',
            'p': '100101',
            'q': '010101',
            'r': '110101',
            's': '001101',
            't': '101101',
            'u': '011101',
            'v': '111101',
            'w': '000011',
            'x': '100011',
            'y': '010011',
            'z': '110011',
            '0': '001011',
            '1': '101011',
            '2': '011011',
            '3': '111011',
            '4': '000111',
            '5': '100111',
            '6': '010111',
            '7': '110111',
            '8': '001111',
            '9': '101111',
            '.': '011111',
            '_': '111111',
        }
        var a = '';
        for (var i = name.length - 1; i >= 0; --i) {
            a += TABLE[name[i]];
        }
        return a;
    };
    const inst_unit = x => x(1);
    const elim_unit = (x => {
        var $1 = (() => c0 => {
            var self = x;
            switch ("unit") {
                case 'unit':
                    var $0 = c0;
                    return $0;
            };
        })();
        return $1;
    });
    const inst_bool = x => x(true)(false);
    const elim_bool = (x => {
        var $4 = (() => c0 => c1 => {
            var self = x;
            if (self) {
                var $2 = c2;
                return $2;
            } else {
                var $3 = c2;
                return $3;
            };
        })();
        return $4;
    });
    const inst_nat = x => x(0n)(x0 => 1n + x0);
    const elim_nat = (x => {
        var $8 = (() => c0 => c1 => {
            var self = x;
            if (self === 0n) {
                var $5 = c2;
                return $5;
            } else {
                var $6 = (self - 1n);
                var $7 = c2($6);
                return $7;
            };
        })();
        return $8;
    });
    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');
    const elim_bits = (x => {
        var $14 = (() => c0 => c1 => c2 => {
            var self = x;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'o':
                    var $9 = self.slice(0, -1);
                    var $10 = c1($9);
                    return $10;
                case 'i':
                    var $11 = self.slice(0, -1);
                    var $12 = c2($11);
                    return $12;
                case 'e':
                    var $13 = c0;
                    return $13;
            };
        })();
        return $14;
    });
    const inst_u16 = x => x(x0 => word_to_u16(x0));
    const elim_u16 = (x => {
        var $17 = (() => c0 => {
            var self = x;
            switch ('u16') {
                case 'u16':
                    var $15 = u16_to_word(self);
                    var $16 = c0($15);
                    return $16;
            };
        })();
        return $17;
    });
    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));
    const elim_string = (x => {
        var $22 = (() => c0 => c1 => {
            var self = x;
            if (self.length === 0) {
                var $18 = c2;
                return $18;
            } else {
                var $19 = self.charCodeAt(0);
                var $20 = self.slice(1);
                var $21 = c2($19)($20);
                return $21;
            };
        })();
        return $22;
    });
    var run = (p) => {
        if (typeof window === 'undefined') {
            var rl = eval("require('readline')").createInterface({
                input: process.stdin,
                output: process.stdout,
                terminal: false
            });
            var fs = eval("require('fs')");
            var pc = eval("process");
        } else {
            var rl = {
                question: (x, f) => f(''),
                close: () => {}
            };
            var fs = {
                readFileSync: () => ''
            };
            var pc = {
                exit: () => {},
                argv: []
            };
        };
        return run_io({
            rl,
            fs,
            pc
        }, p).then((x) => {
            rl.close();
            return x;
        }).catch((e) => {
            rl.close();
            throw e;
        });
    };
    var get_file = (lib, param) => {
        return lib.fs.readFileSync(param, 'utf8');
    }
    var set_file = (lib, param) => {
        var path = '';
        for (var i = 0; i < param.length && param[i] !== '='; ++i) {
            path += param[i];
        };
        var data = param.slice(i + 1);
        lib.fs.mkdirSync(path.split('/').slice(0, -1).join('/'), {
            recursive: true
        });
        lib.fs.writeFileSync(path, data);
        return '';
    };
    var del_file = (lib, param) => {
        try {
            lib.fs.unlinkSync(param);
            return '';
        } catch (e) {
            if (e.message.indexOf('EPERM') !== -1) {
                lib.fs.rmdirSync(param);
                return '';
            } else {
                throw e;
            }
        }
    };
    var get_dir = (lib, param) => {
        return lib.fs.readdirSync(param).join(';');
    };
    var run_io = (lib, p) => {
        switch (p._) {
            case 'IO.end':
                return Promise.resolve(p.value);
            case 'IO.ask':
                return new Promise((res, err) => {
                    switch (p.query) {
                        case 'print':
                            console.log(p.param);
                            run_io(lib, p.then('')).then(res).catch(err);
                            break;
                        case 'put_string':
                            process.stdout.write(p.param);
                            run_io(lib, p.then('')).then(res).catch(err);
                            break;
                        case 'exit':
                            lib.pc.exit();
                            break;
                        case 'get_time':
                            run_io(lib, p.then(String(Date.now()))).then(res).catch(err);
                            break;
                        case 'get_line':
                            lib.rl.question('', (line) => run_io(lib, p.then(line)).then(res).catch(err));
                            break;
                        case 'get_file':
                            try {
                                run_io(lib, p.then(get_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'set_file':
                            try {
                                run_io(lib, p.then(set_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'del_file':
                            try {
                                run_io(lib, p.then(del_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'get_dir':
                            try {
                                run_io(lib, p.then(get_dir(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'get_args':
                            run_io(lib, p.then(lib.pc.argv[2] || '')).then(res).catch(err);
                            break;
                    }
                });
        }
    };

    function IO$(_A$1) {
        var $23 = null;
        return $23;
    };
    const IO = x0 => IO$(x0);

    function IO$ask$(_query$2, _param$3, _then$4) {
        var $24 = ({
            _: 'IO.ask',
            'query': _query$2,
            'param': _param$3,
            'then': _then$4
        });
        return $24;
    };
    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);

    function IO$bind$(_a$3, _f$4) {
        var self = _a$3;
        switch (self._) {
            case 'IO.end':
                var $26 = self.value;
                var $27 = _f$4($26);
                var $25 = $27;
                break;
            case 'IO.ask':
                var $28 = self.query;
                var $29 = self.param;
                var $30 = self.then;
                var $31 = IO$ask$($28, $29, (_x$8 => {
                    var $32 = IO$bind$($30(_x$8), _f$4);
                    return $32;
                }));
                var $25 = $31;
                break;
        };
        return $25;
    };
    const IO$bind = x0 => x1 => IO$bind$(x0, x1);

    function IO$end$(_value$2) {
        var $33 = ({
            _: 'IO.end',
            'value': _value$2
        });
        return $33;
    };
    const IO$end = x0 => IO$end$(x0);

    function IO$monad$(_new$2) {
        var $34 = _new$2(IO$bind)(IO$end);
        return $34;
    };
    const IO$monad = x0 => IO$monad$(x0);

    function Maybe$(_A$1) {
        var $35 = null;
        return $35;
    };
    const Maybe = x0 => Maybe$(x0);

    function BitsMap$(_A$1) {
        var $36 = null;
        return $36;
    };
    const BitsMap = x0 => BitsMap$(x0);
    const Maybe$none = ({
        _: 'Maybe.none'
    });

    function BitsMap$get$(_bits$2, _map$3) {
        var BitsMap$get$ = (_bits$2, _map$3) => ({
            ctr: 'TCO',
            arg: [_bits$2, _map$3]
        });
        var BitsMap$get = _bits$2 => _map$3 => BitsMap$get$(_bits$2, _map$3);
        var arg = [_bits$2, _map$3];
        while (true) {
            let [_bits$2, _map$3] = arg;
            var R = (() => {
                var self = _bits$2;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $37 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $39 = self.lft;
                                var $40 = BitsMap$get$($37, $39);
                                var $38 = $40;
                                break;
                            case 'BitsMap.new':
                                var $41 = Maybe$none;
                                var $38 = $41;
                                break;
                        };
                        return $38;
                    case 'i':
                        var $42 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $44 = self.rgt;
                                var $45 = BitsMap$get$($42, $44);
                                var $43 = $45;
                                break;
                            case 'BitsMap.new':
                                var $46 = Maybe$none;
                                var $43 = $46;
                                break;
                        };
                        return $43;
                    case 'e':
                        var self = _map$3;
                        switch (self._) {
                            case 'BitsMap.tie':
                                var $48 = self.val;
                                var $49 = $48;
                                var $47 = $49;
                                break;
                            case 'BitsMap.new':
                                var $50 = Maybe$none;
                                var $47 = $50;
                                break;
                        };
                        return $47;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const BitsMap$get = x0 => x1 => BitsMap$get$(x0, x1);
    const Bits$e = '';
    const Bool$false = false;
    const Bool$and = a0 => a1 => (a0 && a1);
    const Bool$true = true;

    function Cmp$as_lte$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
            case 'Cmp.eql':
                var $52 = Bool$true;
                var $51 = $52;
                break;
            case 'Cmp.gtn':
                var $53 = Bool$false;
                var $51 = $53;
                break;
        };
        return $51;
    };
    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);
    const Cmp$ltn = ({
        _: 'Cmp.ltn'
    });
    const Cmp$gtn = ({
        _: 'Cmp.gtn'
    });

    function Word$cmp$go$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $55 = self.pred;
                var $56 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $58 = self.pred;
                            var $59 = (_a$pred$10 => {
                                var $60 = Word$cmp$go$(_a$pred$10, $58, _c$4);
                                return $60;
                            });
                            var $57 = $59;
                            break;
                        case 'Word.i':
                            var $61 = self.pred;
                            var $62 = (_a$pred$10 => {
                                var $63 = Word$cmp$go$(_a$pred$10, $61, Cmp$ltn);
                                return $63;
                            });
                            var $57 = $62;
                            break;
                        case 'Word.e':
                            var $64 = (_a$pred$8 => {
                                var $65 = _c$4;
                                return $65;
                            });
                            var $57 = $64;
                            break;
                    };
                    var $57 = $57($55);
                    return $57;
                });
                var $54 = $56;
                break;
            case 'Word.i':
                var $66 = self.pred;
                var $67 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $69 = self.pred;
                            var $70 = (_a$pred$10 => {
                                var $71 = Word$cmp$go$(_a$pred$10, $69, Cmp$gtn);
                                return $71;
                            });
                            var $68 = $70;
                            break;
                        case 'Word.i':
                            var $72 = self.pred;
                            var $73 = (_a$pred$10 => {
                                var $74 = Word$cmp$go$(_a$pred$10, $72, _c$4);
                                return $74;
                            });
                            var $68 = $73;
                            break;
                        case 'Word.e':
                            var $75 = (_a$pred$8 => {
                                var $76 = _c$4;
                                return $76;
                            });
                            var $68 = $75;
                            break;
                    };
                    var $68 = $68($66);
                    return $68;
                });
                var $54 = $67;
                break;
            case 'Word.e':
                var $77 = (_b$5 => {
                    var $78 = _c$4;
                    return $78;
                });
                var $54 = $77;
                break;
        };
        var $54 = $54(_b$3);
        return $54;
    };
    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);
    const Cmp$eql = ({
        _: 'Cmp.eql'
    });

    function Word$cmp$(_a$2, _b$3) {
        var $79 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);
        return $79;
    };
    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);

    function Nat$succ$(_pred$1) {
        var $80 = 1n + _pred$1;
        return $80;
    };
    const Nat$succ = x0 => Nat$succ$(x0);
    const Nat$zero = 0n;

    function U16$cmp$(_a$1, _b$2) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $82 = u16_to_word(self);
                var self = _b$2;
                switch ('u16') {
                    case 'u16':
                        var $84 = u16_to_word(self);
                        var $85 = Word$cmp$($82, $84);
                        var $83 = $85;
                        break;
                };
                var $81 = $83;
                break;
        };
        return $81;
    };
    const U16$cmp = x0 => x1 => U16$cmp$(x0, x1);
    const U16$lte = a0 => a1 => (a0 <= a1);

    function U16$btw$(_a$1, _b$2, _c$3) {
        var $86 = ((_a$1 <= _b$2) && (_b$2 <= _c$3));
        return $86;
    };
    const U16$btw = x0 => x1 => x2 => U16$btw$(x0, x1, x2);

    function U16$new$(_value$1) {
        var $87 = word_to_u16(_value$1);
        return $87;
    };
    const U16$new = x0 => U16$new$(x0);
    const Word$e = ({
        _: 'Word.e'
    });

    function Word$(_size$1) {
        var $88 = null;
        return $88;
    };
    const Word = x0 => Word$(x0);

    function Word$i$(_pred$2) {
        var $89 = ({
            _: 'Word.i',
            'pred': _pred$2
        });
        return $89;
    };
    const Word$i = x0 => Word$i$(x0);

    function Word$o$(_pred$2) {
        var $90 = ({
            _: 'Word.o',
            'pred': _pred$2
        });
        return $90;
    };
    const Word$o = x0 => Word$o$(x0);

    function Word$subber$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $92 = self.pred;
                var $93 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $95 = self.pred;
                            var $96 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $98 = Word$i$(Word$subber$(_a$pred$10, $95, Bool$true));
                                    var $97 = $98;
                                } else {
                                    var $99 = Word$o$(Word$subber$(_a$pred$10, $95, Bool$false));
                                    var $97 = $99;
                                };
                                return $97;
                            });
                            var $94 = $96;
                            break;
                        case 'Word.i':
                            var $100 = self.pred;
                            var $101 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $103 = Word$o$(Word$subber$(_a$pred$10, $100, Bool$true));
                                    var $102 = $103;
                                } else {
                                    var $104 = Word$i$(Word$subber$(_a$pred$10, $100, Bool$true));
                                    var $102 = $104;
                                };
                                return $102;
                            });
                            var $94 = $101;
                            break;
                        case 'Word.e':
                            var $105 = (_a$pred$8 => {
                                var $106 = Word$e;
                                return $106;
                            });
                            var $94 = $105;
                            break;
                    };
                    var $94 = $94($92);
                    return $94;
                });
                var $91 = $93;
                break;
            case 'Word.i':
                var $107 = self.pred;
                var $108 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $110 = self.pred;
                            var $111 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $113 = Word$o$(Word$subber$(_a$pred$10, $110, Bool$false));
                                    var $112 = $113;
                                } else {
                                    var $114 = Word$i$(Word$subber$(_a$pred$10, $110, Bool$false));
                                    var $112 = $114;
                                };
                                return $112;
                            });
                            var $109 = $111;
                            break;
                        case 'Word.i':
                            var $115 = self.pred;
                            var $116 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $118 = Word$i$(Word$subber$(_a$pred$10, $115, Bool$true));
                                    var $117 = $118;
                                } else {
                                    var $119 = Word$o$(Word$subber$(_a$pred$10, $115, Bool$false));
                                    var $117 = $119;
                                };
                                return $117;
                            });
                            var $109 = $116;
                            break;
                        case 'Word.e':
                            var $120 = (_a$pred$8 => {
                                var $121 = Word$e;
                                return $121;
                            });
                            var $109 = $120;
                            break;
                    };
                    var $109 = $109($107);
                    return $109;
                });
                var $91 = $108;
                break;
            case 'Word.e':
                var $122 = (_b$5 => {
                    var $123 = Word$e;
                    return $123;
                });
                var $91 = $122;
                break;
        };
        var $91 = $91(_b$3);
        return $91;
    };
    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);

    function Word$sub$(_a$2, _b$3) {
        var $124 = Word$subber$(_a$2, _b$3, Bool$false);
        return $124;
    };
    const Word$sub = x0 => x1 => Word$sub$(x0, x1);
    const U16$sub = a0 => a1 => (Math.max(a0 - a1, 0));

    function Nat$apply$(_n$2, _f$3, _x$4) {
        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({
            ctr: 'TCO',
            arg: [_n$2, _f$3, _x$4]
        });
        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);
        var arg = [_n$2, _f$3, _x$4];
        while (true) {
            let [_n$2, _f$3, _x$4] = arg;
            var R = (() => {
                var self = _n$2;
                if (self === 0n) {
                    var $125 = _x$4;
                    return $125;
                } else {
                    var $126 = (self - 1n);
                    var $127 = Nat$apply$($126, _f$3, _f$3(_x$4));
                    return $127;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);

    function Word$inc$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.o':
                var $129 = self.pred;
                var $130 = Word$i$($129);
                var $128 = $130;
                break;
            case 'Word.i':
                var $131 = self.pred;
                var $132 = Word$o$(Word$inc$($131));
                var $128 = $132;
                break;
            case 'Word.e':
                var $133 = Word$e;
                var $128 = $133;
                break;
        };
        return $128;
    };
    const Word$inc = x0 => Word$inc$(x0);

    function Word$zero$(_size$1) {
        var self = _size$1;
        if (self === 0n) {
            var $135 = Word$e;
            var $134 = $135;
        } else {
            var $136 = (self - 1n);
            var $137 = Word$o$(Word$zero$($136));
            var $134 = $137;
        };
        return $134;
    };
    const Word$zero = x0 => Word$zero$(x0);

    function Nat$to_word$(_n$2) {
        var $138 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));
        return $138;
    };
    const Nat$to_word = x0 => Nat$to_word$(x0);
    const Nat$to_u16 = a0 => (Number(a0));

    function Word$adder$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $140 = self.pred;
                var $141 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $143 = self.pred;
                            var $144 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $146 = Word$i$(Word$adder$(_a$pred$10, $143, Bool$false));
                                    var $145 = $146;
                                } else {
                                    var $147 = Word$o$(Word$adder$(_a$pred$10, $143, Bool$false));
                                    var $145 = $147;
                                };
                                return $145;
                            });
                            var $142 = $144;
                            break;
                        case 'Word.i':
                            var $148 = self.pred;
                            var $149 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $151 = Word$o$(Word$adder$(_a$pred$10, $148, Bool$true));
                                    var $150 = $151;
                                } else {
                                    var $152 = Word$i$(Word$adder$(_a$pred$10, $148, Bool$false));
                                    var $150 = $152;
                                };
                                return $150;
                            });
                            var $142 = $149;
                            break;
                        case 'Word.e':
                            var $153 = (_a$pred$8 => {
                                var $154 = Word$e;
                                return $154;
                            });
                            var $142 = $153;
                            break;
                    };
                    var $142 = $142($140);
                    return $142;
                });
                var $139 = $141;
                break;
            case 'Word.i':
                var $155 = self.pred;
                var $156 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.o':
                            var $158 = self.pred;
                            var $159 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $161 = Word$o$(Word$adder$(_a$pred$10, $158, Bool$true));
                                    var $160 = $161;
                                } else {
                                    var $162 = Word$i$(Word$adder$(_a$pred$10, $158, Bool$false));
                                    var $160 = $162;
                                };
                                return $160;
                            });
                            var $157 = $159;
                            break;
                        case 'Word.i':
                            var $163 = self.pred;
                            var $164 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $166 = Word$i$(Word$adder$(_a$pred$10, $163, Bool$true));
                                    var $165 = $166;
                                } else {
                                    var $167 = Word$o$(Word$adder$(_a$pred$10, $163, Bool$true));
                                    var $165 = $167;
                                };
                                return $165;
                            });
                            var $157 = $164;
                            break;
                        case 'Word.e':
                            var $168 = (_a$pred$8 => {
                                var $169 = Word$e;
                                return $169;
                            });
                            var $157 = $168;
                            break;
                    };
                    var $157 = $157($155);
                    return $157;
                });
                var $139 = $156;
                break;
            case 'Word.e':
                var $170 = (_b$5 => {
                    var $171 = Word$e;
                    return $171;
                });
                var $139 = $170;
                break;
        };
        var $139 = $139(_b$3);
        return $139;
    };
    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);

    function Word$add$(_a$2, _b$3) {
        var $172 = Word$adder$(_a$2, _b$3, Bool$false);
        return $172;
    };
    const Word$add = x0 => x1 => Word$add$(x0, x1);
    const U16$add = a0 => a1 => ((a0 + a1) & 0xFFFF);

    function Cmp$as_eql$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
            case 'Cmp.gtn':
                var $174 = Bool$false;
                var $173 = $174;
                break;
            case 'Cmp.eql':
                var $175 = Bool$true;
                var $173 = $175;
                break;
        };
        return $173;
    };
    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);
    const U16$eql = a0 => a1 => (a0 === a1);
    const Bits$o = a0 => (a0 + '0');
    const Bits$i = a0 => (a0 + '1');

    function Word$to_bits$(_a$2) {
        var self = _a$2;
        switch (self._) {
            case 'Word.o':
                var $177 = self.pred;
                var $178 = (Word$to_bits$($177) + '0');
                var $176 = $178;
                break;
            case 'Word.i':
                var $179 = self.pred;
                var $180 = (Word$to_bits$($179) + '1');
                var $176 = $180;
                break;
            case 'Word.e':
                var $181 = Bits$e;
                var $176 = $181;
                break;
        };
        return $176;
    };
    const Word$to_bits = x0 => Word$to_bits$(x0);

    function Word$trim$(_new_size$2, _word$3) {
        var self = _new_size$2;
        if (self === 0n) {
            var $183 = Word$e;
            var $182 = $183;
        } else {
            var $184 = (self - 1n);
            var self = _word$3;
            switch (self._) {
                case 'Word.o':
                    var $186 = self.pred;
                    var $187 = Word$o$(Word$trim$($184, $186));
                    var $185 = $187;
                    break;
                case 'Word.i':
                    var $188 = self.pred;
                    var $189 = Word$i$(Word$trim$($184, $188));
                    var $185 = $189;
                    break;
                case 'Word.e':
                    var $190 = Word$o$(Word$trim$($184, Word$e));
                    var $185 = $190;
                    break;
            };
            var $182 = $185;
        };
        return $182;
    };
    const Word$trim = x0 => x1 => Word$trim$(x0, x1);
    const Bits$concat = a0 => a1 => (a1 + a0);

    function Bits$reverse$tco$(_a$1, _r$2) {
        var Bits$reverse$tco$ = (_a$1, _r$2) => ({
            ctr: 'TCO',
            arg: [_a$1, _r$2]
        });
        var Bits$reverse$tco = _a$1 => _r$2 => Bits$reverse$tco$(_a$1, _r$2);
        var arg = [_a$1, _r$2];
        while (true) {
            let [_a$1, _r$2] = arg;
            var R = (() => {
                var self = _a$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $191 = self.slice(0, -1);
                        var $192 = Bits$reverse$tco$($191, (_r$2 + '0'));
                        return $192;
                    case 'i':
                        var $193 = self.slice(0, -1);
                        var $194 = Bits$reverse$tco$($193, (_r$2 + '1'));
                        return $194;
                    case 'e':
                        var $195 = _r$2;
                        return $195;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Bits$reverse$tco = x0 => x1 => Bits$reverse$tco$(x0, x1);

    function Bits$reverse$(_a$1) {
        var $196 = Bits$reverse$tco$(_a$1, Bits$e);
        return $196;
    };
    const Bits$reverse = x0 => Bits$reverse$(x0);
    const Kind$Name$to_bits = a0 => (kind_name_to_bits(a0));

    function Kind$Map$get$(_name$2, _map$3) {
        var $197 = BitsMap$get$((kind_name_to_bits(_name$2)), _map$3);
        return $197;
    };
    const Kind$Map$get = x0 => x1 => Kind$Map$get$(x0, x1);

    function IO$get_file$(_name$1) {
        var $198 = IO$ask$("get_file", _name$1, (_file$2 => {
            var $199 = IO$end$(_file$2);
            return $199;
        }));
        return $198;
    };
    const IO$get_file = x0 => IO$get_file$(x0);

    function Parser$Reply$(_V$1) {
        var $200 = null;
        return $200;
    };
    const Parser$Reply = x0 => Parser$Reply$(x0);

    function Parser$Reply$value$(_idx$2, _code$3, _val$4) {
        var $201 = ({
            _: 'Parser.Reply.value',
            'idx': _idx$2,
            'code': _code$3,
            'val': _val$4
        });
        return $201;
    };
    const Parser$Reply$value = x0 => x1 => x2 => Parser$Reply$value$(x0, x1, x2);

    function Parser$is_eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $203 = Parser$Reply$value$(_idx$1, _code$2, Bool$true);
            var $202 = $203;
        } else {
            var $204 = self.charCodeAt(0);
            var $205 = self.slice(1);
            var $206 = Parser$Reply$value$(_idx$1, _code$2, Bool$false);
            var $202 = $206;
        };
        return $202;
    };
    const Parser$is_eof = x0 => x1 => Parser$is_eof$(x0, x1);

    function Parser$Reply$error$(_idx$2, _code$3, _err$4) {
        var $207 = ({
            _: 'Parser.Reply.error',
            'idx': _idx$2,
            'code': _code$3,
            'err': _err$4
        });
        return $207;
    };
    const Parser$Reply$error = x0 => x1 => x2 => Parser$Reply$error$(x0, x1, x2);

    function Parser$(_V$1) {
        var $208 = null;
        return $208;
    };
    const Parser = x0 => Parser$(x0);

    function Maybe$some$(_value$2) {
        var $209 = ({
            _: 'Maybe.some',
            'value': _value$2
        });
        return $209;
    };
    const Maybe$some = x0 => Maybe$some$(x0);

    function Parser$ErrorAt$new$(_idx$1, _code$2, _err$3) {
        var $210 = ({
            _: 'Parser.ErrorAt.new',
            'idx': _idx$1,
            'code': _code$2,
            'err': _err$3
        });
        return $210;
    };
    const Parser$ErrorAt$new = x0 => x1 => x2 => Parser$ErrorAt$new$(x0, x1, x2);
    const Nat$gtn = a0 => a1 => (a0 > a1);

    function Parser$ErrorAt$combine$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Maybe.some':
                var $212 = self.value;
                var self = _b$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $214 = self.value;
                        var self = $212;
                        switch (self._) {
                            case 'Parser.ErrorAt.new':
                                var $216 = self.idx;
                                var self = $214;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $218 = self.idx;
                                        var self = ($216 > $218);
                                        if (self) {
                                            var $220 = _a$1;
                                            var $219 = $220;
                                        } else {
                                            var $221 = _b$2;
                                            var $219 = $221;
                                        };
                                        var $217 = $219;
                                        break;
                                };
                                var $215 = $217;
                                break;
                        };
                        var $213 = $215;
                        break;
                    case 'Maybe.none':
                        var $222 = _a$1;
                        var $213 = $222;
                        break;
                };
                var $211 = $213;
                break;
            case 'Maybe.none':
                var $223 = _b$2;
                var $211 = $223;
                break;
        };
        return $211;
    };
    const Parser$ErrorAt$combine = x0 => x1 => Parser$ErrorAt$combine$(x0, x1);

    function Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5) {
        var Parser$first_of$go$ = (_pars$2, _err$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_pars$2, _err$3, _idx$4, _code$5]
        });
        var Parser$first_of$go = _pars$2 => _err$3 => _idx$4 => _code$5 => Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5);
        var arg = [_pars$2, _err$3, _idx$4, _code$5];
        while (true) {
            let [_pars$2, _err$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _pars$2;
                switch (self._) {
                    case 'List.cons':
                        var $224 = self.head;
                        var $225 = self.tail;
                        var _parsed$8 = $224(_idx$4)(_code$5);
                        var self = _parsed$8;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $227 = self.idx;
                                var $228 = self.code;
                                var $229 = self.err;
                                var _neo$12 = Maybe$some$(Parser$ErrorAt$new$($227, $228, $229));
                                var _err$13 = Parser$ErrorAt$combine$(_neo$12, _err$3);
                                var $230 = Parser$first_of$go$($225, _err$13, _idx$4, _code$5);
                                var $226 = $230;
                                break;
                            case 'Parser.Reply.value':
                                var $231 = self.idx;
                                var $232 = self.code;
                                var $233 = self.val;
                                var $234 = Parser$Reply$value$($231, $232, $233);
                                var $226 = $234;
                                break;
                        };
                        return $226;
                    case 'List.nil':
                        var self = _err$3;
                        switch (self._) {
                            case 'Maybe.some':
                                var $236 = self.value;
                                var self = $236;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $238 = self.idx;
                                        var $239 = self.code;
                                        var $240 = self.err;
                                        var $241 = Parser$Reply$error$($238, $239, $240);
                                        var $237 = $241;
                                        break;
                                };
                                var $235 = $237;
                                break;
                            case 'Maybe.none':
                                var $242 = Parser$Reply$error$(_idx$4, _code$5, "No parse.");
                                var $235 = $242;
                                break;
                        };
                        return $235;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$first_of$go = x0 => x1 => x2 => x3 => Parser$first_of$go$(x0, x1, x2, x3);

    function Parser$first_of$(_pars$2) {
        var $243 = Parser$first_of$go(_pars$2)(Maybe$none);
        return $243;
    };
    const Parser$first_of = x0 => Parser$first_of$(x0);

    function List$cons$(_head$2, _tail$3) {
        var $244 = ({
            _: 'List.cons',
            'head': _head$2,
            'tail': _tail$3
        });
        return $244;
    };
    const List$cons = x0 => x1 => List$cons$(x0, x1);

    function List$(_A$1) {
        var $245 = null;
        return $245;
    };
    const List = x0 => List$(x0);
    const List$nil = ({
        _: 'List.nil'
    });

    function Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5) {
        var Parser$many$go$ = (_parse$2, _values$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_parse$2, _values$3, _idx$4, _code$5]
        });
        var Parser$many$go = _parse$2 => _values$3 => _idx$4 => _code$5 => Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5);
        var arg = [_parse$2, _values$3, _idx$4, _code$5];
        while (true) {
            let [_parse$2, _values$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _parse$2(_idx$4)(_code$5);
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $246 = self.idx;
                        var $247 = self.code;
                        var $248 = self.val;
                        var $249 = Parser$many$go$(_parse$2, (_xs$9 => {
                            var $250 = _values$3(List$cons$($248, _xs$9));
                            return $250;
                        }), $246, $247);
                        return $249;
                    case 'Parser.Reply.error':
                        var $251 = Parser$Reply$value$(_idx$4, _code$5, _values$3(List$nil));
                        return $251;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$many$go = x0 => x1 => x2 => x3 => Parser$many$go$(x0, x1, x2, x3);

    function Parser$many$(_parser$2) {
        var $252 = Parser$many$go(_parser$2)((_x$3 => {
            var $253 = _x$3;
            return $253;
        }));
        return $252;
    };
    const Parser$many = x0 => Parser$many$(x0);
    const Unit$new = 1;

    function String$cons$(_head$1, _tail$2) {
        var $254 = (String.fromCharCode(_head$1) + _tail$2);
        return $254;
    };
    const String$cons = x0 => x1 => String$cons$(x0, x1);
    const String$concat = a0 => a1 => (a0 + a1);

    function String$flatten$go$(_xs$1, _res$2) {
        var String$flatten$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                switch (self._) {
                    case 'List.cons':
                        var $255 = self.head;
                        var $256 = self.tail;
                        var $257 = String$flatten$go$($256, (_res$2 + $255));
                        return $257;
                    case 'List.nil':
                        var $258 = _res$2;
                        return $258;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);

    function String$flatten$(_xs$1) {
        var $259 = String$flatten$go$(_xs$1, "");
        return $259;
    };
    const String$flatten = x0 => String$flatten$(x0);
    const String$nil = '';

    function Parser$text$go$(_text$1, _idx$2, _code$3) {
        var self = _text$1;
        if (self.length === 0) {
            var $261 = Parser$Reply$value$(_idx$2, _code$3, Unit$new);
            var $260 = $261;
        } else {
            var $262 = self.charCodeAt(0);
            var $263 = self.slice(1);
            var self = _code$3;
            if (self.length === 0) {
                var _error$6 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found end of file.", List$nil))));
                var $265 = Parser$Reply$error$(_idx$2, _code$3, _error$6);
                var $264 = $265;
            } else {
                var $266 = self.charCodeAt(0);
                var $267 = self.slice(1);
                var self = ($262 === $266);
                if (self) {
                    var $269 = Parser$text$($263, Nat$succ$(_idx$2), $267);
                    var $268 = $269;
                } else {
                    var _error$8 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found \'", List$cons$(String$cons$($266, String$nil), List$cons$("\'.", List$nil))))));
                    var $270 = Parser$Reply$error$(_idx$2, _code$3, _error$8);
                    var $268 = $270;
                };
                var $264 = $268;
            };
            var $260 = $264;
        };
        return $260;
    };
    const Parser$text$go = x0 => x1 => x2 => Parser$text$go$(x0, x1, x2);

    function Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Parser$text$go$(_text$1, _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $272 = self.err;
                var $273 = Parser$Reply$error$(_idx$2, _code$3, $272);
                var $271 = $273;
                break;
            case 'Parser.Reply.value':
                var $274 = self.idx;
                var $275 = self.code;
                var $276 = self.val;
                var $277 = Parser$Reply$value$($274, $275, $276);
                var $271 = $277;
                break;
        };
        return $271;
    };
    const Parser$text = x0 => x1 => x2 => Parser$text$(x0, x1, x2);

    function Parser$eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $279 = Parser$Reply$value$(_idx$1, _code$2, Unit$new);
            var $278 = $279;
        } else {
            var $280 = self.charCodeAt(0);
            var $281 = self.slice(1);
            var $282 = Parser$Reply$error$(_idx$1, _code$2, "Expected end-of-file.");
            var $278 = $282;
        };
        return $278;
    };
    const Parser$eof = x0 => x1 => Parser$eof$(x0, x1);

    function List$reverse$go$(_xs$2, _res$3) {
        var List$reverse$go$ = (_xs$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_xs$2, _res$3]
        });
        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);
        var arg = [_xs$2, _res$3];
        while (true) {
            let [_xs$2, _res$3] = arg;
            var R = (() => {
                var self = _xs$2;
                switch (self._) {
                    case 'List.cons':
                        var $283 = self.head;
                        var $284 = self.tail;
                        var $285 = List$reverse$go$($284, List$cons$($283, _res$3));
                        return $285;
                    case 'List.nil':
                        var $286 = _res$3;
                        return $286;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);

    function List$reverse$(_xs$2) {
        var $287 = List$reverse$go$(_xs$2, List$nil);
        return $287;
    };
    const List$reverse = x0 => List$reverse$(x0);

    function Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6) {
        var Parser$until$go$ = (_until$2, _parse$3, _values$4, _idx$5, _code$6) => ({
            ctr: 'TCO',
            arg: [_until$2, _parse$3, _values$4, _idx$5, _code$6]
        });
        var Parser$until$go = _until$2 => _parse$3 => _values$4 => _idx$5 => _code$6 => Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6);
        var arg = [_until$2, _parse$3, _values$4, _idx$5, _code$6];
        while (true) {
            let [_until$2, _parse$3, _values$4, _idx$5, _code$6] = arg;
            var R = (() => {
                var _until_reply$7 = _until$2(_idx$5)(_code$6);
                var self = _until_reply$7;
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $289 = self.idx;
                        var $290 = self.code;
                        var $291 = Parser$Reply$value$($289, $290, List$reverse$(_values$4));
                        var $288 = $291;
                        break;
                    case 'Parser.Reply.error':
                        var _reply$11 = _parse$3(_idx$5)(_code$6);
                        var self = _reply$11;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $293 = self.idx;
                                var $294 = self.code;
                                var $295 = self.err;
                                var $296 = Parser$Reply$error$($293, $294, $295);
                                var $292 = $296;
                                break;
                            case 'Parser.Reply.value':
                                var $297 = self.idx;
                                var $298 = self.code;
                                var $299 = self.val;
                                var $300 = Parser$until$go$(_until$2, _parse$3, List$cons$($299, _values$4), $297, $298);
                                var $292 = $300;
                                break;
                        };
                        var $288 = $292;
                        break;
                };
                return $288;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$until$go = x0 => x1 => x2 => x3 => x4 => Parser$until$go$(x0, x1, x2, x3, x4);

    function Parser$until$(_until$2, _parse$3) {
        var $301 = Parser$until$go(_until$2)(_parse$3)(List$nil);
        return $301;
    };
    const Parser$until = x0 => x1 => Parser$until$(x0, x1);

    function Parser$one$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $303 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected end of file.");
            var $302 = $303;
        } else {
            var $304 = self.charCodeAt(0);
            var $305 = self.slice(1);
            var $306 = Parser$Reply$value$(Nat$succ$(_idx$1), $305, $304);
            var $302 = $306;
        };
        return $302;
    };
    const Parser$one = x0 => x1 => Parser$one$(x0, x1);
    const Kind$Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{9}"), List$cons$(Parser$text("\u{a}"), List$cons$((_idx$1 => _code$2 => {
        var self = Parser$text$("//", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $308 = self.idx;
                var $309 = self.code;
                var $310 = self.err;
                var $311 = Parser$Reply$error$($308, $309, $310);
                var $307 = $311;
                break;
            case 'Parser.Reply.value':
                var $312 = self.idx;
                var $313 = self.code;
                var _endl_or_eof$6 = Parser$first_of$(List$cons$(Parser$text("\u{a}"), List$cons$(Parser$eof, List$nil)));
                var self = Parser$until$(_endl_or_eof$6, Parser$one)($312)($313);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $315 = self.idx;
                        var $316 = self.code;
                        var $317 = self.err;
                        var $318 = Parser$Reply$error$($315, $316, $317);
                        var $314 = $318;
                        break;
                    case 'Parser.Reply.value':
                        var $319 = self.idx;
                        var $320 = self.code;
                        var $321 = Parser$Reply$value$($319, $320, Unit$new);
                        var $314 = $321;
                        break;
                };
                var $307 = $314;
                break;
        };
        return $307;
    }), List$nil))))));

    function Parser$get_index$(_idx$1, _code$2) {
        var $322 = Parser$Reply$value$(_idx$1, _code$2, _idx$1);
        return $322;
    };
    const Parser$get_index = x0 => x1 => Parser$get_index$(x0, x1);

    function Kind$Parser$init$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $324 = self.idx;
                var $325 = self.code;
                var $326 = self.err;
                var $327 = Parser$Reply$error$($324, $325, $326);
                var $323 = $327;
                break;
            case 'Parser.Reply.value':
                var $328 = self.idx;
                var $329 = self.code;
                var self = Parser$get_index$($328, $329);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $331 = self.idx;
                        var $332 = self.code;
                        var $333 = self.err;
                        var $334 = Parser$Reply$error$($331, $332, $333);
                        var $330 = $334;
                        break;
                    case 'Parser.Reply.value':
                        var $335 = self.idx;
                        var $336 = self.code;
                        var $337 = self.val;
                        var $338 = Parser$Reply$value$($335, $336, $337);
                        var $330 = $338;
                        break;
                };
                var $323 = $330;
                break;
        };
        return $323;
    };
    const Kind$Parser$init = x0 => x1 => Kind$Parser$init$(x0, x1);

    function Parser$many1$(_parser$2, _idx$3, _code$4) {
        var self = _parser$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $340 = self.idx;
                var $341 = self.code;
                var $342 = self.err;
                var $343 = Parser$Reply$error$($340, $341, $342);
                var $339 = $343;
                break;
            case 'Parser.Reply.value':
                var $344 = self.idx;
                var $345 = self.code;
                var $346 = self.val;
                var self = Parser$many$(_parser$2)($344)($345);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $348 = self.idx;
                        var $349 = self.code;
                        var $350 = self.err;
                        var $351 = Parser$Reply$error$($348, $349, $350);
                        var $347 = $351;
                        break;
                    case 'Parser.Reply.value':
                        var $352 = self.idx;
                        var $353 = self.code;
                        var $354 = self.val;
                        var $355 = Parser$Reply$value$($352, $353, List$cons$($346, $354));
                        var $347 = $355;
                        break;
                };
                var $339 = $347;
                break;
        };
        return $339;
    };
    const Parser$many1 = x0 => x1 => x2 => Parser$many1$(x0, x1, x2);

    function Kind$Name$is_letter$(_chr$1) {
        var self = U16$btw$(65, _chr$1, 90);
        if (self) {
            var $357 = Bool$true;
            var $356 = $357;
        } else {
            var self = U16$btw$(97, _chr$1, 122);
            if (self) {
                var $359 = Bool$true;
                var $358 = $359;
            } else {
                var self = U16$btw$(48, _chr$1, 57);
                if (self) {
                    var $361 = Bool$true;
                    var $360 = $361;
                } else {
                    var self = (46 === _chr$1);
                    if (self) {
                        var $363 = Bool$true;
                        var $362 = $363;
                    } else {
                        var self = (95 === _chr$1);
                        if (self) {
                            var $365 = Bool$true;
                            var $364 = $365;
                        } else {
                            var self = (94 === _chr$1);
                            if (self) {
                                var $367 = Bool$true;
                                var $366 = $367;
                            } else {
                                var $368 = Bool$false;
                                var $366 = $368;
                            };
                            var $364 = $366;
                        };
                        var $362 = $364;
                    };
                    var $360 = $362;
                };
                var $358 = $360;
            };
            var $356 = $358;
        };
        return $356;
    };
    const Kind$Name$is_letter = x0 => Kind$Name$is_letter$(x0);

    function Kind$Parser$letter$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $370 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected eof.");
            var $369 = $370;
        } else {
            var $371 = self.charCodeAt(0);
            var $372 = self.slice(1);
            var self = Kind$Name$is_letter$($371);
            if (self) {
                var $374 = Parser$Reply$value$(Nat$succ$(_idx$1), $372, $371);
                var $373 = $374;
            } else {
                var $375 = Parser$Reply$error$(_idx$1, _code$2, "Expected letter.");
                var $373 = $375;
            };
            var $369 = $373;
        };
        return $369;
    };
    const Kind$Parser$letter = x0 => x1 => Kind$Parser$letter$(x0, x1);

    function List$fold$(_list$2, _nil$4, _cons$5) {
        var self = _list$2;
        switch (self._) {
            case 'List.cons':
                var $377 = self.head;
                var $378 = self.tail;
                var $379 = _cons$5($377)(List$fold$($378, _nil$4, _cons$5));
                var $376 = $379;
                break;
            case 'List.nil':
                var $380 = _nil$4;
                var $376 = $380;
                break;
        };
        return $376;
    };
    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);

    function Kind$Parser$name1$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $382 = self.idx;
                var $383 = self.code;
                var $384 = self.err;
                var $385 = Parser$Reply$error$($382, $383, $384);
                var $381 = $385;
                break;
            case 'Parser.Reply.value':
                var $386 = self.idx;
                var $387 = self.code;
                var self = Parser$many1$(Kind$Parser$letter, $386, $387);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $389 = self.idx;
                        var $390 = self.code;
                        var $391 = self.err;
                        var $392 = Parser$Reply$error$($389, $390, $391);
                        var $388 = $392;
                        break;
                    case 'Parser.Reply.value':
                        var $393 = self.idx;
                        var $394 = self.code;
                        var $395 = self.val;
                        var $396 = Parser$Reply$value$($393, $394, List$fold$($395, String$nil, String$cons));
                        var $388 = $396;
                        break;
                };
                var $381 = $388;
                break;
        };
        return $381;
    };
    const Kind$Parser$name1 = x0 => x1 => Kind$Parser$name1$(x0, x1);

    function Kind$Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Kind$Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $398 = self.idx;
                var $399 = self.code;
                var $400 = self.err;
                var $401 = Parser$Reply$error$($398, $399, $400);
                var $397 = $401;
                break;
            case 'Parser.Reply.value':
                var $402 = self.idx;
                var $403 = self.code;
                var $404 = Parser$text$(_text$1, $402, $403);
                var $397 = $404;
                break;
        };
        return $397;
    };
    const Kind$Parser$text = x0 => x1 => x2 => Kind$Parser$text$(x0, x1, x2);

    function Parser$until1$(_cond$2, _parser$3, _idx$4, _code$5) {
        var self = _parser$3(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $406 = self.idx;
                var $407 = self.code;
                var $408 = self.err;
                var $409 = Parser$Reply$error$($406, $407, $408);
                var $405 = $409;
                break;
            case 'Parser.Reply.value':
                var $410 = self.idx;
                var $411 = self.code;
                var $412 = self.val;
                var self = Parser$until$(_cond$2, _parser$3)($410)($411);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $414 = self.idx;
                        var $415 = self.code;
                        var $416 = self.err;
                        var $417 = Parser$Reply$error$($414, $415, $416);
                        var $413 = $417;
                        break;
                    case 'Parser.Reply.value':
                        var $418 = self.idx;
                        var $419 = self.code;
                        var $420 = self.val;
                        var $421 = Parser$Reply$value$($418, $419, List$cons$($412, $420));
                        var $413 = $421;
                        break;
                };
                var $405 = $413;
                break;
        };
        return $405;
    };
    const Parser$until1 = x0 => x1 => x2 => x3 => Parser$until1$(x0, x1, x2, x3);

    function Pair$(_A$1, _B$2) {
        var $422 = null;
        return $422;
    };
    const Pair = x0 => x1 => Pair$(x0, x1);

    function Parser$maybe$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.value':
                var $424 = self.idx;
                var $425 = self.code;
                var $426 = self.val;
                var $427 = Parser$Reply$value$($424, $425, Maybe$some$($426));
                var $423 = $427;
                break;
            case 'Parser.Reply.error':
                var $428 = Parser$Reply$value$(_idx$3, _code$4, Maybe$none);
                var $423 = $428;
                break;
        };
        return $423;
    };
    const Parser$maybe = x0 => x1 => x2 => Parser$maybe$(x0, x1, x2);

    function Kind$Parser$item$(_parser$2, _idx$3, _code$4) {
        var self = Kind$Parser$spaces(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $430 = self.idx;
                var $431 = self.code;
                var $432 = self.err;
                var $433 = Parser$Reply$error$($430, $431, $432);
                var $429 = $433;
                break;
            case 'Parser.Reply.value':
                var $434 = self.idx;
                var $435 = self.code;
                var self = _parser$2($434)($435);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $437 = self.idx;
                        var $438 = self.code;
                        var $439 = self.err;
                        var $440 = Parser$Reply$error$($437, $438, $439);
                        var $436 = $440;
                        break;
                    case 'Parser.Reply.value':
                        var $441 = self.idx;
                        var $442 = self.code;
                        var $443 = self.val;
                        var self = Parser$maybe$(Kind$Parser$text(","), $441, $442);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $445 = self.idx;
                                var $446 = self.code;
                                var $447 = self.err;
                                var $448 = Parser$Reply$error$($445, $446, $447);
                                var $444 = $448;
                                break;
                            case 'Parser.Reply.value':
                                var $449 = self.idx;
                                var $450 = self.code;
                                var $451 = Parser$Reply$value$($449, $450, $443);
                                var $444 = $451;
                                break;
                        };
                        var $436 = $444;
                        break;
                };
                var $429 = $436;
                break;
        };
        return $429;
    };
    const Kind$Parser$item = x0 => x1 => x2 => Kind$Parser$item$(x0, x1, x2);

    function Kind$Parser$name$(_idx$1, _code$2) {
        var self = Kind$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $453 = self.idx;
                var $454 = self.code;
                var $455 = self.err;
                var $456 = Parser$Reply$error$($453, $454, $455);
                var $452 = $456;
                break;
            case 'Parser.Reply.value':
                var $457 = self.idx;
                var $458 = self.code;
                var self = Parser$many$(Kind$Parser$letter)($457)($458);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $460 = self.idx;
                        var $461 = self.code;
                        var $462 = self.err;
                        var $463 = Parser$Reply$error$($460, $461, $462);
                        var $459 = $463;
                        break;
                    case 'Parser.Reply.value':
                        var $464 = self.idx;
                        var $465 = self.code;
                        var $466 = self.val;
                        var $467 = Parser$Reply$value$($464, $465, List$fold$($466, String$nil, String$cons));
                        var $459 = $467;
                        break;
                };
                var $452 = $459;
                break;
        };
        return $452;
    };
    const Kind$Parser$name = x0 => x1 => Kind$Parser$name$(x0, x1);

    function Kind$Term$all$(_eras$1, _self$2, _name$3, _xtyp$4, _body$5) {
        var $468 = ({
            _: 'Kind.Term.all',
            'eras': _eras$1,
            'self': _self$2,
            'name': _name$3,
            'xtyp': _xtyp$4,
            'body': _body$5
        });
        return $468;
    };
    const Kind$Term$all = x0 => x1 => x2 => x3 => x4 => Kind$Term$all$(x0, x1, x2, x3, x4);

    function Pair$new$(_fst$3, _snd$4) {
        var $469 = ({
            _: 'Pair.new',
            'fst': _fst$3,
            'snd': _snd$4
        });
        return $469;
    };
    const Pair$new = x0 => x1 => Pair$new$(x0, x1);

    function Kind$Parser$stop$(_from$1, _idx$2, _code$3) {
        var self = Parser$get_index$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $471 = self.idx;
                var $472 = self.code;
                var $473 = self.err;
                var $474 = Parser$Reply$error$($471, $472, $473);
                var $470 = $474;
                break;
            case 'Parser.Reply.value':
                var $475 = self.idx;
                var $476 = self.code;
                var $477 = self.val;
                var _orig$7 = Pair$new$(_from$1, $477);
                var $478 = Parser$Reply$value$($475, $476, _orig$7);
                var $470 = $478;
                break;
        };
        return $470;
    };
    const Kind$Parser$stop = x0 => x1 => x2 => Kind$Parser$stop$(x0, x1, x2);

    function Kind$Term$ori$(_orig$1, _expr$2) {
        var $479 = ({
            _: 'Kind.Term.ori',
            'orig': _orig$1,
            'expr': _expr$2
        });
        return $479;
    };
    const Kind$Term$ori = x0 => x1 => Kind$Term$ori$(x0, x1);

    function Kind$Parser$forall$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $481 = self.idx;
                var $482 = self.code;
                var $483 = self.err;
                var $484 = Parser$Reply$error$($481, $482, $483);
                var $480 = $484;
                break;
            case 'Parser.Reply.value':
                var $485 = self.idx;
                var $486 = self.code;
                var $487 = self.val;
                var self = Kind$Parser$name$($485, $486);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $489 = self.idx;
                        var $490 = self.code;
                        var $491 = self.err;
                        var $492 = Parser$Reply$error$($489, $490, $491);
                        var $488 = $492;
                        break;
                    case 'Parser.Reply.value':
                        var $493 = self.idx;
                        var $494 = self.code;
                        var $495 = self.val;
                        var self = Kind$Parser$binder$(":", $493, $494);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $497 = self.idx;
                                var $498 = self.code;
                                var $499 = self.err;
                                var $500 = Parser$Reply$error$($497, $498, $499);
                                var $496 = $500;
                                break;
                            case 'Parser.Reply.value':
                                var $501 = self.idx;
                                var $502 = self.code;
                                var $503 = self.val;
                                var self = Parser$maybe$(Kind$Parser$text("->"), $501, $502);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $505 = self.idx;
                                        var $506 = self.code;
                                        var $507 = self.err;
                                        var $508 = Parser$Reply$error$($505, $506, $507);
                                        var $504 = $508;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $509 = self.idx;
                                        var $510 = self.code;
                                        var self = Kind$Parser$term$($509, $510);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $512 = self.idx;
                                                var $513 = self.code;
                                                var $514 = self.err;
                                                var $515 = Parser$Reply$error$($512, $513, $514);
                                                var $511 = $515;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $516 = self.idx;
                                                var $517 = self.code;
                                                var $518 = self.val;
                                                var _term$18 = List$fold$($503, $518, (_x$18 => _t$19 => {
                                                    var self = _x$18;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $521 = self.eras;
                                                            var $522 = self.name;
                                                            var $523 = self.term;
                                                            var $524 = Kind$Term$all$($521, "", $522, $523, (_s$23 => _x$24 => {
                                                                var $525 = _t$19;
                                                                return $525;
                                                            }));
                                                            var $520 = $524;
                                                            break;
                                                    };
                                                    return $520;
                                                }));
                                                var self = Kind$Parser$stop$($487, $516, $517);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $526 = self.idx;
                                                        var $527 = self.code;
                                                        var $528 = self.err;
                                                        var $529 = Parser$Reply$error$($526, $527, $528);
                                                        var $519 = $529;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $530 = self.idx;
                                                        var $531 = self.code;
                                                        var $532 = self.val;
                                                        var $533 = Parser$Reply$value$($530, $531, (() => {
                                                            var self = _term$18;
                                                            switch (self._) {
                                                                case 'Kind.Term.all':
                                                                    var $534 = self.eras;
                                                                    var $535 = self.name;
                                                                    var $536 = self.xtyp;
                                                                    var $537 = self.body;
                                                                    var $538 = Kind$Term$ori$($532, Kind$Term$all$($534, $495, $535, $536, $537));
                                                                    return $538;
                                                                case 'Kind.Term.var':
                                                                case 'Kind.Term.ref':
                                                                case 'Kind.Term.typ':
                                                                case 'Kind.Term.lam':
                                                                case 'Kind.Term.app':
                                                                case 'Kind.Term.let':
                                                                case 'Kind.Term.def':
                                                                case 'Kind.Term.ann':
                                                                case 'Kind.Term.gol':
                                                                case 'Kind.Term.hol':
                                                                case 'Kind.Term.nat':
                                                                case 'Kind.Term.chr':
                                                                case 'Kind.Term.str':
                                                                case 'Kind.Term.cse':
                                                                case 'Kind.Term.ori':
                                                                    var $539 = _term$18;
                                                                    return $539;
                                                            };
                                                        })());
                                                        var $519 = $533;
                                                        break;
                                                };
                                                var $511 = $519;
                                                break;
                                        };
                                        var $504 = $511;
                                        break;
                                };
                                var $496 = $504;
                                break;
                        };
                        var $488 = $496;
                        break;
                };
                var $480 = $488;
                break;
        };
        return $480;
    };
    const Kind$Parser$forall = x0 => x1 => Kind$Parser$forall$(x0, x1);

    function Kind$Term$lam$(_name$1, _body$2) {
        var $540 = ({
            _: 'Kind.Term.lam',
            'name': _name$1,
            'body': _body$2
        });
        return $540;
    };
    const Kind$Term$lam = x0 => x1 => Kind$Term$lam$(x0, x1);

    function Kind$Parser$make_lambda$(_names$1, _body$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $542 = self.head;
                var $543 = self.tail;
                var $544 = Kind$Term$lam$($542, (_x$5 => {
                    var $545 = Kind$Parser$make_lambda$($543, _body$2);
                    return $545;
                }));
                var $541 = $544;
                break;
            case 'List.nil':
                var $546 = _body$2;
                var $541 = $546;
                break;
        };
        return $541;
    };
    const Kind$Parser$make_lambda = x0 => x1 => Kind$Parser$make_lambda$(x0, x1);

    function Kind$Parser$lambda$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $548 = self.idx;
                var $549 = self.code;
                var $550 = self.err;
                var $551 = Parser$Reply$error$($548, $549, $550);
                var $547 = $551;
                break;
            case 'Parser.Reply.value':
                var $552 = self.idx;
                var $553 = self.code;
                var $554 = self.val;
                var self = Kind$Parser$text$("(", $552, $553);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $556 = self.idx;
                        var $557 = self.code;
                        var $558 = self.err;
                        var $559 = Parser$Reply$error$($556, $557, $558);
                        var $555 = $559;
                        break;
                    case 'Parser.Reply.value':
                        var $560 = self.idx;
                        var $561 = self.code;
                        var self = Parser$until1$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$name1), $560, $561);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $563 = self.idx;
                                var $564 = self.code;
                                var $565 = self.err;
                                var $566 = Parser$Reply$error$($563, $564, $565);
                                var $562 = $566;
                                break;
                            case 'Parser.Reply.value':
                                var $567 = self.idx;
                                var $568 = self.code;
                                var $569 = self.val;
                                var self = Kind$Parser$term$($567, $568);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $571 = self.idx;
                                        var $572 = self.code;
                                        var $573 = self.err;
                                        var $574 = Parser$Reply$error$($571, $572, $573);
                                        var $570 = $574;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $575 = self.idx;
                                        var $576 = self.code;
                                        var $577 = self.val;
                                        var self = Kind$Parser$stop$($554, $575, $576);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $579 = self.idx;
                                                var $580 = self.code;
                                                var $581 = self.err;
                                                var $582 = Parser$Reply$error$($579, $580, $581);
                                                var $578 = $582;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $583 = self.idx;
                                                var $584 = self.code;
                                                var $585 = self.val;
                                                var _expr$18 = Kind$Parser$make_lambda$($569, $577);
                                                var $586 = Parser$Reply$value$($583, $584, Kind$Term$ori$($585, _expr$18));
                                                var $578 = $586;
                                                break;
                                        };
                                        var $570 = $578;
                                        break;
                                };
                                var $562 = $570;
                                break;
                        };
                        var $555 = $562;
                        break;
                };
                var $547 = $555;
                break;
        };
        return $547;
    };
    const Kind$Parser$lambda = x0 => x1 => Kind$Parser$lambda$(x0, x1);

    function Kind$Parser$lambda$erased$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $588 = self.idx;
                var $589 = self.code;
                var $590 = self.err;
                var $591 = Parser$Reply$error$($588, $589, $590);
                var $587 = $591;
                break;
            case 'Parser.Reply.value':
                var $592 = self.idx;
                var $593 = self.code;
                var $594 = self.val;
                var self = Kind$Parser$text$("<", $592, $593);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $596 = self.idx;
                        var $597 = self.code;
                        var $598 = self.err;
                        var $599 = Parser$Reply$error$($596, $597, $598);
                        var $595 = $599;
                        break;
                    case 'Parser.Reply.value':
                        var $600 = self.idx;
                        var $601 = self.code;
                        var self = Parser$until1$(Kind$Parser$text(">"), Kind$Parser$item(Kind$Parser$name1), $600, $601);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $603 = self.idx;
                                var $604 = self.code;
                                var $605 = self.err;
                                var $606 = Parser$Reply$error$($603, $604, $605);
                                var $602 = $606;
                                break;
                            case 'Parser.Reply.value':
                                var $607 = self.idx;
                                var $608 = self.code;
                                var $609 = self.val;
                                var self = Kind$Parser$term$($607, $608);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $611 = self.idx;
                                        var $612 = self.code;
                                        var $613 = self.err;
                                        var $614 = Parser$Reply$error$($611, $612, $613);
                                        var $610 = $614;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $615 = self.idx;
                                        var $616 = self.code;
                                        var $617 = self.val;
                                        var self = Kind$Parser$stop$($594, $615, $616);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $619 = self.idx;
                                                var $620 = self.code;
                                                var $621 = self.err;
                                                var $622 = Parser$Reply$error$($619, $620, $621);
                                                var $618 = $622;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $623 = self.idx;
                                                var $624 = self.code;
                                                var $625 = self.val;
                                                var _expr$18 = Kind$Parser$make_lambda$($609, $617);
                                                var $626 = Parser$Reply$value$($623, $624, Kind$Term$ori$($625, _expr$18));
                                                var $618 = $626;
                                                break;
                                        };
                                        var $610 = $618;
                                        break;
                                };
                                var $602 = $610;
                                break;
                        };
                        var $595 = $602;
                        break;
                };
                var $587 = $595;
                break;
        };
        return $587;
    };
    const Kind$Parser$lambda$erased = x0 => x1 => Kind$Parser$lambda$erased$(x0, x1);

    function Kind$Parser$lambda$nameless$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $628 = self.idx;
                var $629 = self.code;
                var $630 = self.err;
                var $631 = Parser$Reply$error$($628, $629, $630);
                var $627 = $631;
                break;
            case 'Parser.Reply.value':
                var $632 = self.idx;
                var $633 = self.code;
                var $634 = self.val;
                var self = Kind$Parser$text$("()", $632, $633);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $636 = self.idx;
                        var $637 = self.code;
                        var $638 = self.err;
                        var $639 = Parser$Reply$error$($636, $637, $638);
                        var $635 = $639;
                        break;
                    case 'Parser.Reply.value':
                        var $640 = self.idx;
                        var $641 = self.code;
                        var self = Kind$Parser$term$($640, $641);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $643 = self.idx;
                                var $644 = self.code;
                                var $645 = self.err;
                                var $646 = Parser$Reply$error$($643, $644, $645);
                                var $642 = $646;
                                break;
                            case 'Parser.Reply.value':
                                var $647 = self.idx;
                                var $648 = self.code;
                                var $649 = self.val;
                                var self = Kind$Parser$stop$($634, $647, $648);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $651 = self.idx;
                                        var $652 = self.code;
                                        var $653 = self.err;
                                        var $654 = Parser$Reply$error$($651, $652, $653);
                                        var $650 = $654;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $655 = self.idx;
                                        var $656 = self.code;
                                        var $657 = self.val;
                                        var _expr$15 = Kind$Term$lam$("", (_x$15 => {
                                            var $659 = $649;
                                            return $659;
                                        }));
                                        var $658 = Parser$Reply$value$($655, $656, Kind$Term$ori$($657, _expr$15));
                                        var $650 = $658;
                                        break;
                                };
                                var $642 = $650;
                                break;
                        };
                        var $635 = $642;
                        break;
                };
                var $627 = $635;
                break;
        };
        return $627;
    };
    const Kind$Parser$lambda$nameless = x0 => x1 => Kind$Parser$lambda$nameless$(x0, x1);

    function Kind$Parser$parenthesis$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $661 = self.idx;
                var $662 = self.code;
                var $663 = self.err;
                var $664 = Parser$Reply$error$($661, $662, $663);
                var $660 = $664;
                break;
            case 'Parser.Reply.value':
                var $665 = self.idx;
                var $666 = self.code;
                var $667 = self.val;
                var self = Kind$Parser$text$("(", $665, $666);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $669 = self.idx;
                        var $670 = self.code;
                        var $671 = self.err;
                        var $672 = Parser$Reply$error$($669, $670, $671);
                        var $668 = $672;
                        break;
                    case 'Parser.Reply.value':
                        var $673 = self.idx;
                        var $674 = self.code;
                        var self = Kind$Parser$term$($673, $674);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $676 = self.idx;
                                var $677 = self.code;
                                var $678 = self.err;
                                var $679 = Parser$Reply$error$($676, $677, $678);
                                var $675 = $679;
                                break;
                            case 'Parser.Reply.value':
                                var $680 = self.idx;
                                var $681 = self.code;
                                var $682 = self.val;
                                var self = Kind$Parser$text$(")", $680, $681);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $684 = self.idx;
                                        var $685 = self.code;
                                        var $686 = self.err;
                                        var $687 = Parser$Reply$error$($684, $685, $686);
                                        var $683 = $687;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $688 = self.idx;
                                        var $689 = self.code;
                                        var self = Kind$Parser$stop$($667, $688, $689);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $691 = self.idx;
                                                var $692 = self.code;
                                                var $693 = self.err;
                                                var $694 = Parser$Reply$error$($691, $692, $693);
                                                var $690 = $694;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $695 = self.idx;
                                                var $696 = self.code;
                                                var $697 = self.val;
                                                var $698 = Parser$Reply$value$($695, $696, Kind$Term$ori$($697, $682));
                                                var $690 = $698;
                                                break;
                                        };
                                        var $683 = $690;
                                        break;
                                };
                                var $675 = $683;
                                break;
                        };
                        var $668 = $675;
                        break;
                };
                var $660 = $668;
                break;
        };
        return $660;
    };
    const Kind$Parser$parenthesis = x0 => x1 => Kind$Parser$parenthesis$(x0, x1);

    function Kind$Term$ref$(_name$1) {
        var $699 = ({
            _: 'Kind.Term.ref',
            'name': _name$1
        });
        return $699;
    };
    const Kind$Term$ref = x0 => Kind$Term$ref$(x0);

    function Kind$Term$app$(_func$1, _argm$2) {
        var $700 = ({
            _: 'Kind.Term.app',
            'func': _func$1,
            'argm': _argm$2
        });
        return $700;
    };
    const Kind$Term$app = x0 => x1 => Kind$Term$app$(x0, x1);

    function Kind$Term$hol$(_path$1) {
        var $701 = ({
            _: 'Kind.Term.hol',
            'path': _path$1
        });
        return $701;
    };
    const Kind$Term$hol = x0 => Kind$Term$hol$(x0);

    function Kind$Term$let$(_name$1, _expr$2, _body$3) {
        var $702 = ({
            _: 'Kind.Term.let',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $702;
    };
    const Kind$Term$let = x0 => x1 => x2 => Kind$Term$let$(x0, x1, x2);

    function Kind$Parser$letforrange$u32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $704 = self.idx;
                var $705 = self.code;
                var $706 = self.err;
                var $707 = Parser$Reply$error$($704, $705, $706);
                var $703 = $707;
                break;
            case 'Parser.Reply.value':
                var $708 = self.idx;
                var $709 = self.code;
                var $710 = self.val;
                var self = Kind$Parser$text$("let ", $708, $709);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $712 = self.idx;
                        var $713 = self.code;
                        var $714 = self.err;
                        var $715 = Parser$Reply$error$($712, $713, $714);
                        var $711 = $715;
                        break;
                    case 'Parser.Reply.value':
                        var $716 = self.idx;
                        var $717 = self.code;
                        var self = Kind$Parser$name1$($716, $717);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $719 = self.idx;
                                var $720 = self.code;
                                var $721 = self.err;
                                var $722 = Parser$Reply$error$($719, $720, $721);
                                var $718 = $722;
                                break;
                            case 'Parser.Reply.value':
                                var $723 = self.idx;
                                var $724 = self.code;
                                var $725 = self.val;
                                var self = Kind$Parser$text$("=", $723, $724);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $727 = self.idx;
                                        var $728 = self.code;
                                        var $729 = self.err;
                                        var $730 = Parser$Reply$error$($727, $728, $729);
                                        var $726 = $730;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $731 = self.idx;
                                        var $732 = self.code;
                                        var self = Kind$Parser$text$("for ", $731, $732);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $734 = self.idx;
                                                var $735 = self.code;
                                                var $736 = self.err;
                                                var $737 = Parser$Reply$error$($734, $735, $736);
                                                var $733 = $737;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $738 = self.idx;
                                                var $739 = self.code;
                                                var self = Kind$Parser$name1$($738, $739);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $741 = self.idx;
                                                        var $742 = self.code;
                                                        var $743 = self.err;
                                                        var $744 = Parser$Reply$error$($741, $742, $743);
                                                        var $740 = $744;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $745 = self.idx;
                                                        var $746 = self.code;
                                                        var $747 = self.val;
                                                        var self = Kind$Parser$text$(":", $745, $746);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $749 = self.idx;
                                                                var $750 = self.code;
                                                                var $751 = self.err;
                                                                var $752 = Parser$Reply$error$($749, $750, $751);
                                                                var $748 = $752;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $753 = self.idx;
                                                                var $754 = self.code;
                                                                var self = Kind$Parser$text$("U32", $753, $754);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $756 = self.idx;
                                                                        var $757 = self.code;
                                                                        var $758 = self.err;
                                                                        var $759 = Parser$Reply$error$($756, $757, $758);
                                                                        var $755 = $759;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $760 = self.idx;
                                                                        var $761 = self.code;
                                                                        var self = Kind$Parser$text$("from", $760, $761);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $763 = self.idx;
                                                                                var $764 = self.code;
                                                                                var $765 = self.err;
                                                                                var $766 = Parser$Reply$error$($763, $764, $765);
                                                                                var $762 = $766;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $767 = self.idx;
                                                                                var $768 = self.code;
                                                                                var self = Kind$Parser$term$($767, $768);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $770 = self.idx;
                                                                                        var $771 = self.code;
                                                                                        var $772 = self.err;
                                                                                        var $773 = Parser$Reply$error$($770, $771, $772);
                                                                                        var $769 = $773;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $774 = self.idx;
                                                                                        var $775 = self.code;
                                                                                        var $776 = self.val;
                                                                                        var self = Kind$Parser$text$("to", $774, $775);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $778 = self.idx;
                                                                                                var $779 = self.code;
                                                                                                var $780 = self.err;
                                                                                                var $781 = Parser$Reply$error$($778, $779, $780);
                                                                                                var $777 = $781;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $782 = self.idx;
                                                                                                var $783 = self.code;
                                                                                                var self = Kind$Parser$term$($782, $783);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $785 = self.idx;
                                                                                                        var $786 = self.code;
                                                                                                        var $787 = self.err;
                                                                                                        var $788 = Parser$Reply$error$($785, $786, $787);
                                                                                                        var $784 = $788;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $789 = self.idx;
                                                                                                        var $790 = self.code;
                                                                                                        var $791 = self.val;
                                                                                                        var self = Kind$Parser$text$(":", $789, $790);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $793 = self.idx;
                                                                                                                var $794 = self.code;
                                                                                                                var $795 = self.err;
                                                                                                                var $796 = Parser$Reply$error$($793, $794, $795);
                                                                                                                var $792 = $796;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $797 = self.idx;
                                                                                                                var $798 = self.code;
                                                                                                                var self = Kind$Parser$term$($797, $798);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $800 = self.idx;
                                                                                                                        var $801 = self.code;
                                                                                                                        var $802 = self.err;
                                                                                                                        var $803 = Parser$Reply$error$($800, $801, $802);
                                                                                                                        var $799 = $803;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $804 = self.idx;
                                                                                                                        var $805 = self.code;
                                                                                                                        var $806 = self.val;
                                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $804, $805);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $808 = self.idx;
                                                                                                                                var $809 = self.code;
                                                                                                                                var $810 = self.err;
                                                                                                                                var $811 = Parser$Reply$error$($808, $809, $810);
                                                                                                                                var $807 = $811;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $812 = self.idx;
                                                                                                                                var $813 = self.code;
                                                                                                                                var self = Kind$Parser$term$($812, $813);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $815 = self.idx;
                                                                                                                                        var $816 = self.code;
                                                                                                                                        var $817 = self.err;
                                                                                                                                        var $818 = Parser$Reply$error$($815, $816, $817);
                                                                                                                                        var $814 = $818;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $819 = self.idx;
                                                                                                                                        var $820 = self.code;
                                                                                                                                        var $821 = self.val;
                                                                                                                                        var self = Kind$Parser$stop$($710, $819, $820);
                                                                                                                                        switch (self._) {
                                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                                var $823 = self.idx;
                                                                                                                                                var $824 = self.code;
                                                                                                                                                var $825 = self.err;
                                                                                                                                                var $826 = Parser$Reply$error$($823, $824, $825);
                                                                                                                                                var $822 = $826;
                                                                                                                                                break;
                                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                                var $827 = self.idx;
                                                                                                                                                var $828 = self.code;
                                                                                                                                                var $829 = self.val;
                                                                                                                                                var _term$54 = Kind$Term$ref$("U32.for");
                                                                                                                                                var _term$55 = Kind$Term$app$(_term$54, Kind$Term$hol$(Bits$e));
                                                                                                                                                var _term$56 = Kind$Term$app$(_term$55, Kind$Term$ref$($725));
                                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, $776);
                                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, $791);
                                                                                                                                                var _lamb$59 = Kind$Term$lam$($747, (_e$59 => {
                                                                                                                                                    var $831 = Kind$Term$lam$($725, (_s$60 => {
                                                                                                                                                        var $832 = $806;
                                                                                                                                                        return $832;
                                                                                                                                                    }));
                                                                                                                                                    return $831;
                                                                                                                                                }));
                                                                                                                                                var _term$60 = Kind$Term$app$(_term$58, _lamb$59);
                                                                                                                                                var _term$61 = Kind$Term$let$($725, _term$60, (_x$61 => {
                                                                                                                                                    var $833 = $821;
                                                                                                                                                    return $833;
                                                                                                                                                }));
                                                                                                                                                var $830 = Parser$Reply$value$($827, $828, Kind$Term$ori$($829, _term$61));
                                                                                                                                                var $822 = $830;
                                                                                                                                                break;
                                                                                                                                        };
                                                                                                                                        var $814 = $822;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $807 = $814;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $799 = $807;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $792 = $799;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $784 = $792;
                                                                                                        break;
                                                                                                };
                                                                                                var $777 = $784;
                                                                                                break;
                                                                                        };
                                                                                        var $769 = $777;
                                                                                        break;
                                                                                };
                                                                                var $762 = $769;
                                                                                break;
                                                                        };
                                                                        var $755 = $762;
                                                                        break;
                                                                };
                                                                var $748 = $755;
                                                                break;
                                                        };
                                                        var $740 = $748;
                                                        break;
                                                };
                                                var $733 = $740;
                                                break;
                                        };
                                        var $726 = $733;
                                        break;
                                };
                                var $718 = $726;
                                break;
                        };
                        var $711 = $718;
                        break;
                };
                var $703 = $711;
                break;
        };
        return $703;
    };
    const Kind$Parser$letforrange$u32 = x0 => x1 => Kind$Parser$letforrange$u32$(x0, x1);

    function Kind$Parser$letforrange$u32$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $835 = self.idx;
                var $836 = self.code;
                var $837 = self.err;
                var $838 = Parser$Reply$error$($835, $836, $837);
                var $834 = $838;
                break;
            case 'Parser.Reply.value':
                var $839 = self.idx;
                var $840 = self.code;
                var $841 = self.val;
                var self = Kind$Parser$text$("for ", $839, $840);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $843 = self.idx;
                        var $844 = self.code;
                        var $845 = self.err;
                        var $846 = Parser$Reply$error$($843, $844, $845);
                        var $842 = $846;
                        break;
                    case 'Parser.Reply.value':
                        var $847 = self.idx;
                        var $848 = self.code;
                        var self = Kind$Parser$name1$($847, $848);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $850 = self.idx;
                                var $851 = self.code;
                                var $852 = self.err;
                                var $853 = Parser$Reply$error$($850, $851, $852);
                                var $849 = $853;
                                break;
                            case 'Parser.Reply.value':
                                var $854 = self.idx;
                                var $855 = self.code;
                                var $856 = self.val;
                                var self = Kind$Parser$text$(":", $854, $855);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $858 = self.idx;
                                        var $859 = self.code;
                                        var $860 = self.err;
                                        var $861 = Parser$Reply$error$($858, $859, $860);
                                        var $857 = $861;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $862 = self.idx;
                                        var $863 = self.code;
                                        var self = Kind$Parser$text$("U32", $862, $863);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $865 = self.idx;
                                                var $866 = self.code;
                                                var $867 = self.err;
                                                var $868 = Parser$Reply$error$($865, $866, $867);
                                                var $864 = $868;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $869 = self.idx;
                                                var $870 = self.code;
                                                var self = Kind$Parser$text$("from", $869, $870);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $872 = self.idx;
                                                        var $873 = self.code;
                                                        var $874 = self.err;
                                                        var $875 = Parser$Reply$error$($872, $873, $874);
                                                        var $871 = $875;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $876 = self.idx;
                                                        var $877 = self.code;
                                                        var self = Kind$Parser$term$($876, $877);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $879 = self.idx;
                                                                var $880 = self.code;
                                                                var $881 = self.err;
                                                                var $882 = Parser$Reply$error$($879, $880, $881);
                                                                var $878 = $882;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $883 = self.idx;
                                                                var $884 = self.code;
                                                                var $885 = self.val;
                                                                var self = Kind$Parser$text$("to", $883, $884);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $887 = self.idx;
                                                                        var $888 = self.code;
                                                                        var $889 = self.err;
                                                                        var $890 = Parser$Reply$error$($887, $888, $889);
                                                                        var $886 = $890;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $891 = self.idx;
                                                                        var $892 = self.code;
                                                                        var self = Kind$Parser$term$($891, $892);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $894 = self.idx;
                                                                                var $895 = self.code;
                                                                                var $896 = self.err;
                                                                                var $897 = Parser$Reply$error$($894, $895, $896);
                                                                                var $893 = $897;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $898 = self.idx;
                                                                                var $899 = self.code;
                                                                                var $900 = self.val;
                                                                                var self = Kind$Parser$text$("with ", $898, $899);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $902 = self.idx;
                                                                                        var $903 = self.code;
                                                                                        var $904 = self.err;
                                                                                        var $905 = Parser$Reply$error$($902, $903, $904);
                                                                                        var $901 = $905;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $906 = self.idx;
                                                                                        var $907 = self.code;
                                                                                        var self = Kind$Parser$name1$($906, $907);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $909 = self.idx;
                                                                                                var $910 = self.code;
                                                                                                var $911 = self.err;
                                                                                                var $912 = Parser$Reply$error$($909, $910, $911);
                                                                                                var $908 = $912;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $913 = self.idx;
                                                                                                var $914 = self.code;
                                                                                                var $915 = self.val;
                                                                                                var self = Kind$Parser$text$(":", $913, $914);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $917 = self.idx;
                                                                                                        var $918 = self.code;
                                                                                                        var $919 = self.err;
                                                                                                        var $920 = Parser$Reply$error$($917, $918, $919);
                                                                                                        var $916 = $920;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $921 = self.idx;
                                                                                                        var $922 = self.code;
                                                                                                        var self = Kind$Parser$term$($921, $922);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $924 = self.idx;
                                                                                                                var $925 = self.code;
                                                                                                                var $926 = self.err;
                                                                                                                var $927 = Parser$Reply$error$($924, $925, $926);
                                                                                                                var $923 = $927;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $928 = self.idx;
                                                                                                                var $929 = self.code;
                                                                                                                var $930 = self.val;
                                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $928, $929);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $932 = self.idx;
                                                                                                                        var $933 = self.code;
                                                                                                                        var $934 = self.err;
                                                                                                                        var $935 = Parser$Reply$error$($932, $933, $934);
                                                                                                                        var $931 = $935;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $936 = self.idx;
                                                                                                                        var $937 = self.code;
                                                                                                                        var self = Kind$Parser$term$($936, $937);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $939 = self.idx;
                                                                                                                                var $940 = self.code;
                                                                                                                                var $941 = self.err;
                                                                                                                                var $942 = Parser$Reply$error$($939, $940, $941);
                                                                                                                                var $938 = $942;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $943 = self.idx;
                                                                                                                                var $944 = self.code;
                                                                                                                                var $945 = self.val;
                                                                                                                                var self = Kind$Parser$stop$($841, $943, $944);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $947 = self.idx;
                                                                                                                                        var $948 = self.code;
                                                                                                                                        var $949 = self.err;
                                                                                                                                        var $950 = Parser$Reply$error$($947, $948, $949);
                                                                                                                                        var $946 = $950;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $951 = self.idx;
                                                                                                                                        var $952 = self.code;
                                                                                                                                        var $953 = self.val;
                                                                                                                                        var _term$51 = Kind$Term$ref$("U32.for");
                                                                                                                                        var _term$52 = Kind$Term$app$(_term$51, Kind$Term$hol$(Bits$e));
                                                                                                                                        var _term$53 = Kind$Term$app$(_term$52, Kind$Term$ref$($915));
                                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, $885);
                                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, $900);
                                                                                                                                        var _lamb$56 = Kind$Term$lam$($856, (_e$56 => {
                                                                                                                                            var $955 = Kind$Term$lam$($915, (_s$57 => {
                                                                                                                                                var $956 = $930;
                                                                                                                                                return $956;
                                                                                                                                            }));
                                                                                                                                            return $955;
                                                                                                                                        }));
                                                                                                                                        var _term$57 = Kind$Term$app$(_term$55, _lamb$56);
                                                                                                                                        var _term$58 = Kind$Term$let$($915, _term$57, (_x$58 => {
                                                                                                                                            var $957 = $945;
                                                                                                                                            return $957;
                                                                                                                                        }));
                                                                                                                                        var $954 = Parser$Reply$value$($951, $952, Kind$Term$ori$($953, _term$58));
                                                                                                                                        var $946 = $954;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $938 = $946;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $931 = $938;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $923 = $931;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $916 = $923;
                                                                                                        break;
                                                                                                };
                                                                                                var $908 = $916;
                                                                                                break;
                                                                                        };
                                                                                        var $901 = $908;
                                                                                        break;
                                                                                };
                                                                                var $893 = $901;
                                                                                break;
                                                                        };
                                                                        var $886 = $893;
                                                                        break;
                                                                };
                                                                var $878 = $886;
                                                                break;
                                                        };
                                                        var $871 = $878;
                                                        break;
                                                };
                                                var $864 = $871;
                                                break;
                                        };
                                        var $857 = $864;
                                        break;
                                };
                                var $849 = $857;
                                break;
                        };
                        var $842 = $849;
                        break;
                };
                var $834 = $842;
                break;
        };
        return $834;
    };
    const Kind$Parser$letforrange$u32$with = x0 => x1 => Kind$Parser$letforrange$u32$with$(x0, x1);

    function Kind$Parser$letforrange$nat$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $959 = self.idx;
                var $960 = self.code;
                var $961 = self.err;
                var $962 = Parser$Reply$error$($959, $960, $961);
                var $958 = $962;
                break;
            case 'Parser.Reply.value':
                var $963 = self.idx;
                var $964 = self.code;
                var $965 = self.val;
                var self = Kind$Parser$text$("let ", $963, $964);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $967 = self.idx;
                        var $968 = self.code;
                        var $969 = self.err;
                        var $970 = Parser$Reply$error$($967, $968, $969);
                        var $966 = $970;
                        break;
                    case 'Parser.Reply.value':
                        var $971 = self.idx;
                        var $972 = self.code;
                        var self = Kind$Parser$name1$($971, $972);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $974 = self.idx;
                                var $975 = self.code;
                                var $976 = self.err;
                                var $977 = Parser$Reply$error$($974, $975, $976);
                                var $973 = $977;
                                break;
                            case 'Parser.Reply.value':
                                var $978 = self.idx;
                                var $979 = self.code;
                                var $980 = self.val;
                                var self = Kind$Parser$text$("=", $978, $979);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $982 = self.idx;
                                        var $983 = self.code;
                                        var $984 = self.err;
                                        var $985 = Parser$Reply$error$($982, $983, $984);
                                        var $981 = $985;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $986 = self.idx;
                                        var $987 = self.code;
                                        var self = Kind$Parser$text$("for ", $986, $987);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $989 = self.idx;
                                                var $990 = self.code;
                                                var $991 = self.err;
                                                var $992 = Parser$Reply$error$($989, $990, $991);
                                                var $988 = $992;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $993 = self.idx;
                                                var $994 = self.code;
                                                var self = Kind$Parser$name1$($993, $994);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $996 = self.idx;
                                                        var $997 = self.code;
                                                        var $998 = self.err;
                                                        var $999 = Parser$Reply$error$($996, $997, $998);
                                                        var $995 = $999;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1000 = self.idx;
                                                        var $1001 = self.code;
                                                        var $1002 = self.val;
                                                        var self = Kind$Parser$text$("from", $1000, $1001);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1004 = self.idx;
                                                                var $1005 = self.code;
                                                                var $1006 = self.err;
                                                                var $1007 = Parser$Reply$error$($1004, $1005, $1006);
                                                                var $1003 = $1007;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1008 = self.idx;
                                                                var $1009 = self.code;
                                                                var self = Kind$Parser$term$($1008, $1009);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1011 = self.idx;
                                                                        var $1012 = self.code;
                                                                        var $1013 = self.err;
                                                                        var $1014 = Parser$Reply$error$($1011, $1012, $1013);
                                                                        var $1010 = $1014;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1015 = self.idx;
                                                                        var $1016 = self.code;
                                                                        var $1017 = self.val;
                                                                        var self = Kind$Parser$text$("to", $1015, $1016);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1019 = self.idx;
                                                                                var $1020 = self.code;
                                                                                var $1021 = self.err;
                                                                                var $1022 = Parser$Reply$error$($1019, $1020, $1021);
                                                                                var $1018 = $1022;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1023 = self.idx;
                                                                                var $1024 = self.code;
                                                                                var self = Kind$Parser$term$($1023, $1024);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1026 = self.idx;
                                                                                        var $1027 = self.code;
                                                                                        var $1028 = self.err;
                                                                                        var $1029 = Parser$Reply$error$($1026, $1027, $1028);
                                                                                        var $1025 = $1029;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1030 = self.idx;
                                                                                        var $1031 = self.code;
                                                                                        var $1032 = self.val;
                                                                                        var self = Kind$Parser$text$(":", $1030, $1031);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1034 = self.idx;
                                                                                                var $1035 = self.code;
                                                                                                var $1036 = self.err;
                                                                                                var $1037 = Parser$Reply$error$($1034, $1035, $1036);
                                                                                                var $1033 = $1037;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1038 = self.idx;
                                                                                                var $1039 = self.code;
                                                                                                var self = Kind$Parser$term$($1038, $1039);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1041 = self.idx;
                                                                                                        var $1042 = self.code;
                                                                                                        var $1043 = self.err;
                                                                                                        var $1044 = Parser$Reply$error$($1041, $1042, $1043);
                                                                                                        var $1040 = $1044;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1045 = self.idx;
                                                                                                        var $1046 = self.code;
                                                                                                        var $1047 = self.val;
                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1045, $1046);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1049 = self.idx;
                                                                                                                var $1050 = self.code;
                                                                                                                var $1051 = self.err;
                                                                                                                var $1052 = Parser$Reply$error$($1049, $1050, $1051);
                                                                                                                var $1048 = $1052;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1053 = self.idx;
                                                                                                                var $1054 = self.code;
                                                                                                                var self = Kind$Parser$term$($1053, $1054);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1056 = self.idx;
                                                                                                                        var $1057 = self.code;
                                                                                                                        var $1058 = self.err;
                                                                                                                        var $1059 = Parser$Reply$error$($1056, $1057, $1058);
                                                                                                                        var $1055 = $1059;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1060 = self.idx;
                                                                                                                        var $1061 = self.code;
                                                                                                                        var $1062 = self.val;
                                                                                                                        var self = Kind$Parser$stop$($965, $1060, $1061);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1064 = self.idx;
                                                                                                                                var $1065 = self.code;
                                                                                                                                var $1066 = self.err;
                                                                                                                                var $1067 = Parser$Reply$error$($1064, $1065, $1066);
                                                                                                                                var $1063 = $1067;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1068 = self.idx;
                                                                                                                                var $1069 = self.code;
                                                                                                                                var $1070 = self.val;
                                                                                                                                var _term$48 = Kind$Term$ref$("Nat.for");
                                                                                                                                var _term$49 = Kind$Term$app$(_term$48, Kind$Term$hol$(Bits$e));
                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$ref$($980));
                                                                                                                                var _term$51 = Kind$Term$app$(_term$50, $1017);
                                                                                                                                var _term$52 = Kind$Term$app$(_term$51, $1032);
                                                                                                                                var _lamb$53 = Kind$Term$lam$($1002, (_e$53 => {
                                                                                                                                    var $1072 = Kind$Term$lam$($980, (_s$54 => {
                                                                                                                                        var $1073 = $1047;
                                                                                                                                        return $1073;
                                                                                                                                    }));
                                                                                                                                    return $1072;
                                                                                                                                }));
                                                                                                                                var _term$54 = Kind$Term$app$(_term$52, _lamb$53);
                                                                                                                                var _term$55 = Kind$Term$let$($980, _term$54, (_x$55 => {
                                                                                                                                    var $1074 = $1062;
                                                                                                                                    return $1074;
                                                                                                                                }));
                                                                                                                                var $1071 = Parser$Reply$value$($1068, $1069, Kind$Term$ori$($1070, _term$55));
                                                                                                                                var $1063 = $1071;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1055 = $1063;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1048 = $1055;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1040 = $1048;
                                                                                                        break;
                                                                                                };
                                                                                                var $1033 = $1040;
                                                                                                break;
                                                                                        };
                                                                                        var $1025 = $1033;
                                                                                        break;
                                                                                };
                                                                                var $1018 = $1025;
                                                                                break;
                                                                        };
                                                                        var $1010 = $1018;
                                                                        break;
                                                                };
                                                                var $1003 = $1010;
                                                                break;
                                                        };
                                                        var $995 = $1003;
                                                        break;
                                                };
                                                var $988 = $995;
                                                break;
                                        };
                                        var $981 = $988;
                                        break;
                                };
                                var $973 = $981;
                                break;
                        };
                        var $966 = $973;
                        break;
                };
                var $958 = $966;
                break;
        };
        return $958;
    };
    const Kind$Parser$letforrange$nat = x0 => x1 => Kind$Parser$letforrange$nat$(x0, x1);

    function Kind$Parser$letforrange$nat$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1076 = self.idx;
                var $1077 = self.code;
                var $1078 = self.err;
                var $1079 = Parser$Reply$error$($1076, $1077, $1078);
                var $1075 = $1079;
                break;
            case 'Parser.Reply.value':
                var $1080 = self.idx;
                var $1081 = self.code;
                var $1082 = self.val;
                var self = Kind$Parser$text$("for ", $1080, $1081);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1084 = self.idx;
                        var $1085 = self.code;
                        var $1086 = self.err;
                        var $1087 = Parser$Reply$error$($1084, $1085, $1086);
                        var $1083 = $1087;
                        break;
                    case 'Parser.Reply.value':
                        var $1088 = self.idx;
                        var $1089 = self.code;
                        var self = Kind$Parser$name1$($1088, $1089);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1091 = self.idx;
                                var $1092 = self.code;
                                var $1093 = self.err;
                                var $1094 = Parser$Reply$error$($1091, $1092, $1093);
                                var $1090 = $1094;
                                break;
                            case 'Parser.Reply.value':
                                var $1095 = self.idx;
                                var $1096 = self.code;
                                var $1097 = self.val;
                                var self = Kind$Parser$text$("from", $1095, $1096);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1099 = self.idx;
                                        var $1100 = self.code;
                                        var $1101 = self.err;
                                        var $1102 = Parser$Reply$error$($1099, $1100, $1101);
                                        var $1098 = $1102;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1103 = self.idx;
                                        var $1104 = self.code;
                                        var self = Kind$Parser$term$($1103, $1104);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1106 = self.idx;
                                                var $1107 = self.code;
                                                var $1108 = self.err;
                                                var $1109 = Parser$Reply$error$($1106, $1107, $1108);
                                                var $1105 = $1109;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1110 = self.idx;
                                                var $1111 = self.code;
                                                var $1112 = self.val;
                                                var self = Kind$Parser$text$("to", $1110, $1111);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1114 = self.idx;
                                                        var $1115 = self.code;
                                                        var $1116 = self.err;
                                                        var $1117 = Parser$Reply$error$($1114, $1115, $1116);
                                                        var $1113 = $1117;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1118 = self.idx;
                                                        var $1119 = self.code;
                                                        var self = Kind$Parser$term$($1118, $1119);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1121 = self.idx;
                                                                var $1122 = self.code;
                                                                var $1123 = self.err;
                                                                var $1124 = Parser$Reply$error$($1121, $1122, $1123);
                                                                var $1120 = $1124;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1125 = self.idx;
                                                                var $1126 = self.code;
                                                                var $1127 = self.val;
                                                                var self = Kind$Parser$text$("with ", $1125, $1126);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1129 = self.idx;
                                                                        var $1130 = self.code;
                                                                        var $1131 = self.err;
                                                                        var $1132 = Parser$Reply$error$($1129, $1130, $1131);
                                                                        var $1128 = $1132;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1133 = self.idx;
                                                                        var $1134 = self.code;
                                                                        var self = Kind$Parser$name1$($1133, $1134);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1136 = self.idx;
                                                                                var $1137 = self.code;
                                                                                var $1138 = self.err;
                                                                                var $1139 = Parser$Reply$error$($1136, $1137, $1138);
                                                                                var $1135 = $1139;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1140 = self.idx;
                                                                                var $1141 = self.code;
                                                                                var $1142 = self.val;
                                                                                var self = Kind$Parser$text$(":", $1140, $1141);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1144 = self.idx;
                                                                                        var $1145 = self.code;
                                                                                        var $1146 = self.err;
                                                                                        var $1147 = Parser$Reply$error$($1144, $1145, $1146);
                                                                                        var $1143 = $1147;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1148 = self.idx;
                                                                                        var $1149 = self.code;
                                                                                        var self = Kind$Parser$term$($1148, $1149);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1151 = self.idx;
                                                                                                var $1152 = self.code;
                                                                                                var $1153 = self.err;
                                                                                                var $1154 = Parser$Reply$error$($1151, $1152, $1153);
                                                                                                var $1150 = $1154;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1155 = self.idx;
                                                                                                var $1156 = self.code;
                                                                                                var $1157 = self.val;
                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1155, $1156);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1159 = self.idx;
                                                                                                        var $1160 = self.code;
                                                                                                        var $1161 = self.err;
                                                                                                        var $1162 = Parser$Reply$error$($1159, $1160, $1161);
                                                                                                        var $1158 = $1162;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1163 = self.idx;
                                                                                                        var $1164 = self.code;
                                                                                                        var self = Kind$Parser$term$($1163, $1164);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1166 = self.idx;
                                                                                                                var $1167 = self.code;
                                                                                                                var $1168 = self.err;
                                                                                                                var $1169 = Parser$Reply$error$($1166, $1167, $1168);
                                                                                                                var $1165 = $1169;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1170 = self.idx;
                                                                                                                var $1171 = self.code;
                                                                                                                var $1172 = self.val;
                                                                                                                var self = Kind$Parser$stop$($1082, $1170, $1171);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1174 = self.idx;
                                                                                                                        var $1175 = self.code;
                                                                                                                        var $1176 = self.err;
                                                                                                                        var $1177 = Parser$Reply$error$($1174, $1175, $1176);
                                                                                                                        var $1173 = $1177;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1178 = self.idx;
                                                                                                                        var $1179 = self.code;
                                                                                                                        var $1180 = self.val;
                                                                                                                        var _term$45 = Kind$Term$ref$("Nat.for");
                                                                                                                        var _term$46 = Kind$Term$app$(_term$45, Kind$Term$hol$(Bits$e));
                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$ref$($1142));
                                                                                                                        var _term$48 = Kind$Term$app$(_term$47, $1112);
                                                                                                                        var _term$49 = Kind$Term$app$(_term$48, $1127);
                                                                                                                        var _lamb$50 = Kind$Term$lam$($1097, (_e$50 => {
                                                                                                                            var $1182 = Kind$Term$lam$($1142, (_s$51 => {
                                                                                                                                var $1183 = $1157;
                                                                                                                                return $1183;
                                                                                                                            }));
                                                                                                                            return $1182;
                                                                                                                        }));
                                                                                                                        var _term$51 = Kind$Term$app$(_term$49, _lamb$50);
                                                                                                                        var _term$52 = Kind$Term$let$($1142, _term$51, (_x$52 => {
                                                                                                                            var $1184 = $1172;
                                                                                                                            return $1184;
                                                                                                                        }));
                                                                                                                        var $1181 = Parser$Reply$value$($1178, $1179, Kind$Term$ori$($1180, _term$52));
                                                                                                                        var $1173 = $1181;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1165 = $1173;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1158 = $1165;
                                                                                                        break;
                                                                                                };
                                                                                                var $1150 = $1158;
                                                                                                break;
                                                                                        };
                                                                                        var $1143 = $1150;
                                                                                        break;
                                                                                };
                                                                                var $1135 = $1143;
                                                                                break;
                                                                        };
                                                                        var $1128 = $1135;
                                                                        break;
                                                                };
                                                                var $1120 = $1128;
                                                                break;
                                                        };
                                                        var $1113 = $1120;
                                                        break;
                                                };
                                                var $1105 = $1113;
                                                break;
                                        };
                                        var $1098 = $1105;
                                        break;
                                };
                                var $1090 = $1098;
                                break;
                        };
                        var $1083 = $1090;
                        break;
                };
                var $1075 = $1083;
                break;
        };
        return $1075;
    };
    const Kind$Parser$letforrange$nat$with = x0 => x1 => Kind$Parser$letforrange$nat$with$(x0, x1);

    function Kind$Parser$letforin$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1186 = self.idx;
                var $1187 = self.code;
                var $1188 = self.err;
                var $1189 = Parser$Reply$error$($1186, $1187, $1188);
                var $1185 = $1189;
                break;
            case 'Parser.Reply.value':
                var $1190 = self.idx;
                var $1191 = self.code;
                var $1192 = self.val;
                var self = Kind$Parser$text$("let ", $1190, $1191);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1194 = self.idx;
                        var $1195 = self.code;
                        var $1196 = self.err;
                        var $1197 = Parser$Reply$error$($1194, $1195, $1196);
                        var $1193 = $1197;
                        break;
                    case 'Parser.Reply.value':
                        var $1198 = self.idx;
                        var $1199 = self.code;
                        var self = Kind$Parser$name1$($1198, $1199);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1201 = self.idx;
                                var $1202 = self.code;
                                var $1203 = self.err;
                                var $1204 = Parser$Reply$error$($1201, $1202, $1203);
                                var $1200 = $1204;
                                break;
                            case 'Parser.Reply.value':
                                var $1205 = self.idx;
                                var $1206 = self.code;
                                var $1207 = self.val;
                                var self = Kind$Parser$text$("=", $1205, $1206);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1209 = self.idx;
                                        var $1210 = self.code;
                                        var $1211 = self.err;
                                        var $1212 = Parser$Reply$error$($1209, $1210, $1211);
                                        var $1208 = $1212;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1213 = self.idx;
                                        var $1214 = self.code;
                                        var self = Kind$Parser$text$("for ", $1213, $1214);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1216 = self.idx;
                                                var $1217 = self.code;
                                                var $1218 = self.err;
                                                var $1219 = Parser$Reply$error$($1216, $1217, $1218);
                                                var $1215 = $1219;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1220 = self.idx;
                                                var $1221 = self.code;
                                                var self = Kind$Parser$name1$($1220, $1221);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1223 = self.idx;
                                                        var $1224 = self.code;
                                                        var $1225 = self.err;
                                                        var $1226 = Parser$Reply$error$($1223, $1224, $1225);
                                                        var $1222 = $1226;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1227 = self.idx;
                                                        var $1228 = self.code;
                                                        var $1229 = self.val;
                                                        var self = Kind$Parser$text$("in", $1227, $1228);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1231 = self.idx;
                                                                var $1232 = self.code;
                                                                var $1233 = self.err;
                                                                var $1234 = Parser$Reply$error$($1231, $1232, $1233);
                                                                var $1230 = $1234;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1235 = self.idx;
                                                                var $1236 = self.code;
                                                                var self = Kind$Parser$term$($1235, $1236);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1238 = self.idx;
                                                                        var $1239 = self.code;
                                                                        var $1240 = self.err;
                                                                        var $1241 = Parser$Reply$error$($1238, $1239, $1240);
                                                                        var $1237 = $1241;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1242 = self.idx;
                                                                        var $1243 = self.code;
                                                                        var $1244 = self.val;
                                                                        var self = Kind$Parser$text$(":", $1242, $1243);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1246 = self.idx;
                                                                                var $1247 = self.code;
                                                                                var $1248 = self.err;
                                                                                var $1249 = Parser$Reply$error$($1246, $1247, $1248);
                                                                                var $1245 = $1249;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1250 = self.idx;
                                                                                var $1251 = self.code;
                                                                                var self = Kind$Parser$term$($1250, $1251);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1253 = self.idx;
                                                                                        var $1254 = self.code;
                                                                                        var $1255 = self.err;
                                                                                        var $1256 = Parser$Reply$error$($1253, $1254, $1255);
                                                                                        var $1252 = $1256;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1257 = self.idx;
                                                                                        var $1258 = self.code;
                                                                                        var $1259 = self.val;
                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1257, $1258);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1261 = self.idx;
                                                                                                var $1262 = self.code;
                                                                                                var $1263 = self.err;
                                                                                                var $1264 = Parser$Reply$error$($1261, $1262, $1263);
                                                                                                var $1260 = $1264;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1265 = self.idx;
                                                                                                var $1266 = self.code;
                                                                                                var self = Kind$Parser$term$($1265, $1266);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1268 = self.idx;
                                                                                                        var $1269 = self.code;
                                                                                                        var $1270 = self.err;
                                                                                                        var $1271 = Parser$Reply$error$($1268, $1269, $1270);
                                                                                                        var $1267 = $1271;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1272 = self.idx;
                                                                                                        var $1273 = self.code;
                                                                                                        var $1274 = self.val;
                                                                                                        var self = Kind$Parser$stop$($1192, $1272, $1273);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1276 = self.idx;
                                                                                                                var $1277 = self.code;
                                                                                                                var $1278 = self.err;
                                                                                                                var $1279 = Parser$Reply$error$($1276, $1277, $1278);
                                                                                                                var $1275 = $1279;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1280 = self.idx;
                                                                                                                var $1281 = self.code;
                                                                                                                var $1282 = self.val;
                                                                                                                var _term$42 = Kind$Term$ref$("List.for");
                                                                                                                var _term$43 = Kind$Term$app$(_term$42, Kind$Term$hol$(Bits$e));
                                                                                                                var _term$44 = Kind$Term$app$(_term$43, $1244);
                                                                                                                var _term$45 = Kind$Term$app$(_term$44, Kind$Term$hol$(Bits$e));
                                                                                                                var _term$46 = Kind$Term$app$(_term$45, Kind$Term$ref$($1207));
                                                                                                                var _lamb$47 = Kind$Term$lam$($1229, (_i$47 => {
                                                                                                                    var $1284 = Kind$Term$lam$($1207, (_x$48 => {
                                                                                                                        var $1285 = $1259;
                                                                                                                        return $1285;
                                                                                                                    }));
                                                                                                                    return $1284;
                                                                                                                }));
                                                                                                                var _term$48 = Kind$Term$app$(_term$46, _lamb$47);
                                                                                                                var _term$49 = Kind$Term$let$($1207, _term$48, (_x$49 => {
                                                                                                                    var $1286 = $1274;
                                                                                                                    return $1286;
                                                                                                                }));
                                                                                                                var $1283 = Parser$Reply$value$($1280, $1281, Kind$Term$ori$($1282, _term$49));
                                                                                                                var $1275 = $1283;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1267 = $1275;
                                                                                                        break;
                                                                                                };
                                                                                                var $1260 = $1267;
                                                                                                break;
                                                                                        };
                                                                                        var $1252 = $1260;
                                                                                        break;
                                                                                };
                                                                                var $1245 = $1252;
                                                                                break;
                                                                        };
                                                                        var $1237 = $1245;
                                                                        break;
                                                                };
                                                                var $1230 = $1237;
                                                                break;
                                                        };
                                                        var $1222 = $1230;
                                                        break;
                                                };
                                                var $1215 = $1222;
                                                break;
                                        };
                                        var $1208 = $1215;
                                        break;
                                };
                                var $1200 = $1208;
                                break;
                        };
                        var $1193 = $1200;
                        break;
                };
                var $1185 = $1193;
                break;
        };
        return $1185;
    };
    const Kind$Parser$letforin = x0 => x1 => Kind$Parser$letforin$(x0, x1);

    function Kind$Parser$letforin$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1288 = self.idx;
                var $1289 = self.code;
                var $1290 = self.err;
                var $1291 = Parser$Reply$error$($1288, $1289, $1290);
                var $1287 = $1291;
                break;
            case 'Parser.Reply.value':
                var $1292 = self.idx;
                var $1293 = self.code;
                var $1294 = self.val;
                var self = Kind$Parser$text$("for ", $1292, $1293);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1296 = self.idx;
                        var $1297 = self.code;
                        var $1298 = self.err;
                        var $1299 = Parser$Reply$error$($1296, $1297, $1298);
                        var $1295 = $1299;
                        break;
                    case 'Parser.Reply.value':
                        var $1300 = self.idx;
                        var $1301 = self.code;
                        var self = Kind$Parser$name1$($1300, $1301);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1303 = self.idx;
                                var $1304 = self.code;
                                var $1305 = self.err;
                                var $1306 = Parser$Reply$error$($1303, $1304, $1305);
                                var $1302 = $1306;
                                break;
                            case 'Parser.Reply.value':
                                var $1307 = self.idx;
                                var $1308 = self.code;
                                var $1309 = self.val;
                                var self = Kind$Parser$text$("in", $1307, $1308);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1311 = self.idx;
                                        var $1312 = self.code;
                                        var $1313 = self.err;
                                        var $1314 = Parser$Reply$error$($1311, $1312, $1313);
                                        var $1310 = $1314;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1315 = self.idx;
                                        var $1316 = self.code;
                                        var self = Kind$Parser$term$($1315, $1316);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1318 = self.idx;
                                                var $1319 = self.code;
                                                var $1320 = self.err;
                                                var $1321 = Parser$Reply$error$($1318, $1319, $1320);
                                                var $1317 = $1321;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1322 = self.idx;
                                                var $1323 = self.code;
                                                var $1324 = self.val;
                                                var self = Kind$Parser$text$("with ", $1322, $1323);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1326 = self.idx;
                                                        var $1327 = self.code;
                                                        var $1328 = self.err;
                                                        var $1329 = Parser$Reply$error$($1326, $1327, $1328);
                                                        var $1325 = $1329;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1330 = self.idx;
                                                        var $1331 = self.code;
                                                        var self = Kind$Parser$name1$($1330, $1331);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1333 = self.idx;
                                                                var $1334 = self.code;
                                                                var $1335 = self.err;
                                                                var $1336 = Parser$Reply$error$($1333, $1334, $1335);
                                                                var $1332 = $1336;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1337 = self.idx;
                                                                var $1338 = self.code;
                                                                var $1339 = self.val;
                                                                var self = Kind$Parser$text$(":", $1337, $1338);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1341 = self.idx;
                                                                        var $1342 = self.code;
                                                                        var $1343 = self.err;
                                                                        var $1344 = Parser$Reply$error$($1341, $1342, $1343);
                                                                        var $1340 = $1344;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1345 = self.idx;
                                                                        var $1346 = self.code;
                                                                        var self = Kind$Parser$term$($1345, $1346);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1348 = self.idx;
                                                                                var $1349 = self.code;
                                                                                var $1350 = self.err;
                                                                                var $1351 = Parser$Reply$error$($1348, $1349, $1350);
                                                                                var $1347 = $1351;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1352 = self.idx;
                                                                                var $1353 = self.code;
                                                                                var $1354 = self.val;
                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1352, $1353);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1356 = self.idx;
                                                                                        var $1357 = self.code;
                                                                                        var $1358 = self.err;
                                                                                        var $1359 = Parser$Reply$error$($1356, $1357, $1358);
                                                                                        var $1355 = $1359;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1360 = self.idx;
                                                                                        var $1361 = self.code;
                                                                                        var self = Kind$Parser$term$($1360, $1361);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1363 = self.idx;
                                                                                                var $1364 = self.code;
                                                                                                var $1365 = self.err;
                                                                                                var $1366 = Parser$Reply$error$($1363, $1364, $1365);
                                                                                                var $1362 = $1366;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1367 = self.idx;
                                                                                                var $1368 = self.code;
                                                                                                var $1369 = self.val;
                                                                                                var self = Kind$Parser$stop$($1294, $1367, $1368);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1371 = self.idx;
                                                                                                        var $1372 = self.code;
                                                                                                        var $1373 = self.err;
                                                                                                        var $1374 = Parser$Reply$error$($1371, $1372, $1373);
                                                                                                        var $1370 = $1374;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1375 = self.idx;
                                                                                                        var $1376 = self.code;
                                                                                                        var $1377 = self.val;
                                                                                                        var _term$39 = Kind$Term$ref$("List.for");
                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$hol$(Bits$e));
                                                                                                        var _term$41 = Kind$Term$app$(_term$40, $1324);
                                                                                                        var _term$42 = Kind$Term$app$(_term$41, Kind$Term$hol$(Bits$e));
                                                                                                        var _term$43 = Kind$Term$app$(_term$42, Kind$Term$ref$($1339));
                                                                                                        var _lamb$44 = Kind$Term$lam$($1309, (_i$44 => {
                                                                                                            var $1379 = Kind$Term$lam$($1339, (_x$45 => {
                                                                                                                var $1380 = $1354;
                                                                                                                return $1380;
                                                                                                            }));
                                                                                                            return $1379;
                                                                                                        }));
                                                                                                        var _term$45 = Kind$Term$app$(_term$43, _lamb$44);
                                                                                                        var _term$46 = Kind$Term$let$($1339, _term$45, (_x$46 => {
                                                                                                            var $1381 = $1369;
                                                                                                            return $1381;
                                                                                                        }));
                                                                                                        var $1378 = Parser$Reply$value$($1375, $1376, Kind$Term$ori$($1377, _term$46));
                                                                                                        var $1370 = $1378;
                                                                                                        break;
                                                                                                };
                                                                                                var $1362 = $1370;
                                                                                                break;
                                                                                        };
                                                                                        var $1355 = $1362;
                                                                                        break;
                                                                                };
                                                                                var $1347 = $1355;
                                                                                break;
                                                                        };
                                                                        var $1340 = $1347;
                                                                        break;
                                                                };
                                                                var $1332 = $1340;
                                                                break;
                                                        };
                                                        var $1325 = $1332;
                                                        break;
                                                };
                                                var $1317 = $1325;
                                                break;
                                        };
                                        var $1310 = $1317;
                                        break;
                                };
                                var $1302 = $1310;
                                break;
                        };
                        var $1295 = $1302;
                        break;
                };
                var $1287 = $1295;
                break;
        };
        return $1287;
    };
    const Kind$Parser$letforin$with = x0 => x1 => Kind$Parser$letforin$with$(x0, x1);

    function Kind$Parser$letwhile$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1383 = self.idx;
                var $1384 = self.code;
                var $1385 = self.err;
                var $1386 = Parser$Reply$error$($1383, $1384, $1385);
                var $1382 = $1386;
                break;
            case 'Parser.Reply.value':
                var $1387 = self.idx;
                var $1388 = self.code;
                var $1389 = self.val;
                var self = Kind$Parser$text$("let ", $1387, $1388);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1391 = self.idx;
                        var $1392 = self.code;
                        var $1393 = self.err;
                        var $1394 = Parser$Reply$error$($1391, $1392, $1393);
                        var $1390 = $1394;
                        break;
                    case 'Parser.Reply.value':
                        var $1395 = self.idx;
                        var $1396 = self.code;
                        var self = Kind$Parser$name1$($1395, $1396);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1398 = self.idx;
                                var $1399 = self.code;
                                var $1400 = self.err;
                                var $1401 = Parser$Reply$error$($1398, $1399, $1400);
                                var $1397 = $1401;
                                break;
                            case 'Parser.Reply.value':
                                var $1402 = self.idx;
                                var $1403 = self.code;
                                var $1404 = self.val;
                                var self = Kind$Parser$text$("=", $1402, $1403);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1406 = self.idx;
                                        var $1407 = self.code;
                                        var $1408 = self.err;
                                        var $1409 = Parser$Reply$error$($1406, $1407, $1408);
                                        var $1405 = $1409;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1410 = self.idx;
                                        var $1411 = self.code;
                                        var self = Kind$Parser$text$("while ", $1410, $1411);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1413 = self.idx;
                                                var $1414 = self.code;
                                                var $1415 = self.err;
                                                var $1416 = Parser$Reply$error$($1413, $1414, $1415);
                                                var $1412 = $1416;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1417 = self.idx;
                                                var $1418 = self.code;
                                                var self = Kind$Parser$term$($1417, $1418);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1420 = self.idx;
                                                        var $1421 = self.code;
                                                        var $1422 = self.err;
                                                        var $1423 = Parser$Reply$error$($1420, $1421, $1422);
                                                        var $1419 = $1423;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1424 = self.idx;
                                                        var $1425 = self.code;
                                                        var $1426 = self.val;
                                                        var self = Kind$Parser$text$(":", $1424, $1425);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1428 = self.idx;
                                                                var $1429 = self.code;
                                                                var $1430 = self.err;
                                                                var $1431 = Parser$Reply$error$($1428, $1429, $1430);
                                                                var $1427 = $1431;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1432 = self.idx;
                                                                var $1433 = self.code;
                                                                var self = Kind$Parser$term$($1432, $1433);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1435 = self.idx;
                                                                        var $1436 = self.code;
                                                                        var $1437 = self.err;
                                                                        var $1438 = Parser$Reply$error$($1435, $1436, $1437);
                                                                        var $1434 = $1438;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1439 = self.idx;
                                                                        var $1440 = self.code;
                                                                        var $1441 = self.val;
                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1439, $1440);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1443 = self.idx;
                                                                                var $1444 = self.code;
                                                                                var $1445 = self.err;
                                                                                var $1446 = Parser$Reply$error$($1443, $1444, $1445);
                                                                                var $1442 = $1446;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1447 = self.idx;
                                                                                var $1448 = self.code;
                                                                                var self = Kind$Parser$term$($1447, $1448);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1450 = self.idx;
                                                                                        var $1451 = self.code;
                                                                                        var $1452 = self.err;
                                                                                        var $1453 = Parser$Reply$error$($1450, $1451, $1452);
                                                                                        var $1449 = $1453;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1454 = self.idx;
                                                                                        var $1455 = self.code;
                                                                                        var $1456 = self.val;
                                                                                        var self = Kind$Parser$stop$($1389, $1454, $1455);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1458 = self.idx;
                                                                                                var $1459 = self.code;
                                                                                                var $1460 = self.err;
                                                                                                var $1461 = Parser$Reply$error$($1458, $1459, $1460);
                                                                                                var $1457 = $1461;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1462 = self.idx;
                                                                                                var $1463 = self.code;
                                                                                                var $1464 = self.val;
                                                                                                var _term$36 = Kind$Term$ref$("Function.while");
                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$hol$(Bits$e));
                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$ref$($1404));
                                                                                                var _term$39 = Kind$Term$app$(_term$38, Kind$Term$lam$($1404, (_s$39 => {
                                                                                                    var $1466 = $1426;
                                                                                                    return $1466;
                                                                                                })));
                                                                                                var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$($1404, (_s$40 => {
                                                                                                    var $1467 = $1441;
                                                                                                    return $1467;
                                                                                                })));
                                                                                                var _term$41 = Kind$Term$let$($1404, _term$40, (_x$41 => {
                                                                                                    var $1468 = $1456;
                                                                                                    return $1468;
                                                                                                }));
                                                                                                var $1465 = Parser$Reply$value$($1462, $1463, Kind$Term$ori$($1464, _term$41));
                                                                                                var $1457 = $1465;
                                                                                                break;
                                                                                        };
                                                                                        var $1449 = $1457;
                                                                                        break;
                                                                                };
                                                                                var $1442 = $1449;
                                                                                break;
                                                                        };
                                                                        var $1434 = $1442;
                                                                        break;
                                                                };
                                                                var $1427 = $1434;
                                                                break;
                                                        };
                                                        var $1419 = $1427;
                                                        break;
                                                };
                                                var $1412 = $1419;
                                                break;
                                        };
                                        var $1405 = $1412;
                                        break;
                                };
                                var $1397 = $1405;
                                break;
                        };
                        var $1390 = $1397;
                        break;
                };
                var $1382 = $1390;
                break;
        };
        return $1382;
    };
    const Kind$Parser$letwhile = x0 => x1 => Kind$Parser$letwhile$(x0, x1);

    function Kind$Parser$letwhile$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1470 = self.idx;
                var $1471 = self.code;
                var $1472 = self.err;
                var $1473 = Parser$Reply$error$($1470, $1471, $1472);
                var $1469 = $1473;
                break;
            case 'Parser.Reply.value':
                var $1474 = self.idx;
                var $1475 = self.code;
                var $1476 = self.val;
                var self = Kind$Parser$text$("while ", $1474, $1475);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1478 = self.idx;
                        var $1479 = self.code;
                        var $1480 = self.err;
                        var $1481 = Parser$Reply$error$($1478, $1479, $1480);
                        var $1477 = $1481;
                        break;
                    case 'Parser.Reply.value':
                        var $1482 = self.idx;
                        var $1483 = self.code;
                        var self = Kind$Parser$term$($1482, $1483);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1485 = self.idx;
                                var $1486 = self.code;
                                var $1487 = self.err;
                                var $1488 = Parser$Reply$error$($1485, $1486, $1487);
                                var $1484 = $1488;
                                break;
                            case 'Parser.Reply.value':
                                var $1489 = self.idx;
                                var $1490 = self.code;
                                var $1491 = self.val;
                                var self = Kind$Parser$text$("with ", $1489, $1490);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1493 = self.idx;
                                        var $1494 = self.code;
                                        var $1495 = self.err;
                                        var $1496 = Parser$Reply$error$($1493, $1494, $1495);
                                        var $1492 = $1496;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1497 = self.idx;
                                        var $1498 = self.code;
                                        var self = Kind$Parser$name1$($1497, $1498);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1500 = self.idx;
                                                var $1501 = self.code;
                                                var $1502 = self.err;
                                                var $1503 = Parser$Reply$error$($1500, $1501, $1502);
                                                var $1499 = $1503;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1504 = self.idx;
                                                var $1505 = self.code;
                                                var $1506 = self.val;
                                                var self = Kind$Parser$text$(":", $1504, $1505);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1508 = self.idx;
                                                        var $1509 = self.code;
                                                        var $1510 = self.err;
                                                        var $1511 = Parser$Reply$error$($1508, $1509, $1510);
                                                        var $1507 = $1511;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1512 = self.idx;
                                                        var $1513 = self.code;
                                                        var self = Kind$Parser$term$($1512, $1513);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1515 = self.idx;
                                                                var $1516 = self.code;
                                                                var $1517 = self.err;
                                                                var $1518 = Parser$Reply$error$($1515, $1516, $1517);
                                                                var $1514 = $1518;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1519 = self.idx;
                                                                var $1520 = self.code;
                                                                var $1521 = self.val;
                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1519, $1520);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1523 = self.idx;
                                                                        var $1524 = self.code;
                                                                        var $1525 = self.err;
                                                                        var $1526 = Parser$Reply$error$($1523, $1524, $1525);
                                                                        var $1522 = $1526;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1527 = self.idx;
                                                                        var $1528 = self.code;
                                                                        var self = Kind$Parser$term$($1527, $1528);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1530 = self.idx;
                                                                                var $1531 = self.code;
                                                                                var $1532 = self.err;
                                                                                var $1533 = Parser$Reply$error$($1530, $1531, $1532);
                                                                                var $1529 = $1533;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1534 = self.idx;
                                                                                var $1535 = self.code;
                                                                                var $1536 = self.val;
                                                                                var self = Kind$Parser$stop$($1476, $1534, $1535);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1538 = self.idx;
                                                                                        var $1539 = self.code;
                                                                                        var $1540 = self.err;
                                                                                        var $1541 = Parser$Reply$error$($1538, $1539, $1540);
                                                                                        var $1537 = $1541;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1542 = self.idx;
                                                                                        var $1543 = self.code;
                                                                                        var $1544 = self.val;
                                                                                        var _term$33 = Kind$Term$ref$("Function.while");
                                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));
                                                                                        var _term$35 = Kind$Term$app$(_term$34, Kind$Term$ref$($1506));
                                                                                        var _term$36 = Kind$Term$app$(_term$35, Kind$Term$lam$($1506, (_s$36 => {
                                                                                            var $1546 = $1491;
                                                                                            return $1546;
                                                                                        })));
                                                                                        var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$($1506, (_s$37 => {
                                                                                            var $1547 = $1521;
                                                                                            return $1547;
                                                                                        })));
                                                                                        var _term$38 = Kind$Term$let$($1506, _term$37, (_x$38 => {
                                                                                            var $1548 = $1536;
                                                                                            return $1548;
                                                                                        }));
                                                                                        var $1545 = Parser$Reply$value$($1542, $1543, Kind$Term$ori$($1544, _term$38));
                                                                                        var $1537 = $1545;
                                                                                        break;
                                                                                };
                                                                                var $1529 = $1537;
                                                                                break;
                                                                        };
                                                                        var $1522 = $1529;
                                                                        break;
                                                                };
                                                                var $1514 = $1522;
                                                                break;
                                                        };
                                                        var $1507 = $1514;
                                                        break;
                                                };
                                                var $1499 = $1507;
                                                break;
                                        };
                                        var $1492 = $1499;
                                        break;
                                };
                                var $1484 = $1492;
                                break;
                        };
                        var $1477 = $1484;
                        break;
                };
                var $1469 = $1477;
                break;
        };
        return $1469;
    };
    const Kind$Parser$letwhile$with = x0 => x1 => Kind$Parser$letwhile$with$(x0, x1);

    function Kind$Parser$let$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1550 = self.idx;
                var $1551 = self.code;
                var $1552 = self.err;
                var $1553 = Parser$Reply$error$($1550, $1551, $1552);
                var $1549 = $1553;
                break;
            case 'Parser.Reply.value':
                var $1554 = self.idx;
                var $1555 = self.code;
                var $1556 = self.val;
                var self = Kind$Parser$text$("let ", $1554, $1555);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1558 = self.idx;
                        var $1559 = self.code;
                        var $1560 = self.err;
                        var $1561 = Parser$Reply$error$($1558, $1559, $1560);
                        var $1557 = $1561;
                        break;
                    case 'Parser.Reply.value':
                        var $1562 = self.idx;
                        var $1563 = self.code;
                        var self = Kind$Parser$name$($1562, $1563);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1565 = self.idx;
                                var $1566 = self.code;
                                var $1567 = self.err;
                                var $1568 = Parser$Reply$error$($1565, $1566, $1567);
                                var $1564 = $1568;
                                break;
                            case 'Parser.Reply.value':
                                var $1569 = self.idx;
                                var $1570 = self.code;
                                var $1571 = self.val;
                                var self = Kind$Parser$text$("=", $1569, $1570);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1573 = self.idx;
                                        var $1574 = self.code;
                                        var $1575 = self.err;
                                        var $1576 = Parser$Reply$error$($1573, $1574, $1575);
                                        var $1572 = $1576;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1577 = self.idx;
                                        var $1578 = self.code;
                                        var self = Kind$Parser$term$($1577, $1578);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1580 = self.idx;
                                                var $1581 = self.code;
                                                var $1582 = self.err;
                                                var $1583 = Parser$Reply$error$($1580, $1581, $1582);
                                                var $1579 = $1583;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1584 = self.idx;
                                                var $1585 = self.code;
                                                var $1586 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1584, $1585);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1588 = self.idx;
                                                        var $1589 = self.code;
                                                        var $1590 = self.err;
                                                        var $1591 = Parser$Reply$error$($1588, $1589, $1590);
                                                        var $1587 = $1591;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1592 = self.idx;
                                                        var $1593 = self.code;
                                                        var self = Kind$Parser$term$($1592, $1593);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1595 = self.idx;
                                                                var $1596 = self.code;
                                                                var $1597 = self.err;
                                                                var $1598 = Parser$Reply$error$($1595, $1596, $1597);
                                                                var $1594 = $1598;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1599 = self.idx;
                                                                var $1600 = self.code;
                                                                var $1601 = self.val;
                                                                var self = Kind$Parser$stop$($1556, $1599, $1600);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1603 = self.idx;
                                                                        var $1604 = self.code;
                                                                        var $1605 = self.err;
                                                                        var $1606 = Parser$Reply$error$($1603, $1604, $1605);
                                                                        var $1602 = $1606;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1607 = self.idx;
                                                                        var $1608 = self.code;
                                                                        var $1609 = self.val;
                                                                        var $1610 = Parser$Reply$value$($1607, $1608, Kind$Term$ori$($1609, Kind$Term$let$($1571, $1586, (_x$27 => {
                                                                            var $1611 = $1601;
                                                                            return $1611;
                                                                        }))));
                                                                        var $1602 = $1610;
                                                                        break;
                                                                };
                                                                var $1594 = $1602;
                                                                break;
                                                        };
                                                        var $1587 = $1594;
                                                        break;
                                                };
                                                var $1579 = $1587;
                                                break;
                                        };
                                        var $1572 = $1579;
                                        break;
                                };
                                var $1564 = $1572;
                                break;
                        };
                        var $1557 = $1564;
                        break;
                };
                var $1549 = $1557;
                break;
        };
        return $1549;
    };
    const Kind$Parser$let = x0 => x1 => Kind$Parser$let$(x0, x1);

    function Kind$Parser$let$omit$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1613 = self.idx;
                var $1614 = self.code;
                var $1615 = self.err;
                var $1616 = Parser$Reply$error$($1613, $1614, $1615);
                var $1612 = $1616;
                break;
            case 'Parser.Reply.value':
                var $1617 = self.idx;
                var $1618 = self.code;
                var $1619 = self.val;
                var self = Kind$Parser$name$($1617, $1618);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1621 = self.idx;
                        var $1622 = self.code;
                        var $1623 = self.err;
                        var $1624 = Parser$Reply$error$($1621, $1622, $1623);
                        var $1620 = $1624;
                        break;
                    case 'Parser.Reply.value':
                        var $1625 = self.idx;
                        var $1626 = self.code;
                        var $1627 = self.val;
                        var self = Kind$Parser$text$("= ", $1625, $1626);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1629 = self.idx;
                                var $1630 = self.code;
                                var $1631 = self.err;
                                var $1632 = Parser$Reply$error$($1629, $1630, $1631);
                                var $1628 = $1632;
                                break;
                            case 'Parser.Reply.value':
                                var $1633 = self.idx;
                                var $1634 = self.code;
                                var self = Kind$Parser$term$($1633, $1634);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1636 = self.idx;
                                        var $1637 = self.code;
                                        var $1638 = self.err;
                                        var $1639 = Parser$Reply$error$($1636, $1637, $1638);
                                        var $1635 = $1639;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1640 = self.idx;
                                        var $1641 = self.code;
                                        var $1642 = self.val;
                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1640, $1641);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1644 = self.idx;
                                                var $1645 = self.code;
                                                var $1646 = self.err;
                                                var $1647 = Parser$Reply$error$($1644, $1645, $1646);
                                                var $1643 = $1647;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1648 = self.idx;
                                                var $1649 = self.code;
                                                var self = Kind$Parser$term$($1648, $1649);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1651 = self.idx;
                                                        var $1652 = self.code;
                                                        var $1653 = self.err;
                                                        var $1654 = Parser$Reply$error$($1651, $1652, $1653);
                                                        var $1650 = $1654;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1655 = self.idx;
                                                        var $1656 = self.code;
                                                        var $1657 = self.val;
                                                        var self = Kind$Parser$stop$($1619, $1655, $1656);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1659 = self.idx;
                                                                var $1660 = self.code;
                                                                var $1661 = self.err;
                                                                var $1662 = Parser$Reply$error$($1659, $1660, $1661);
                                                                var $1658 = $1662;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1663 = self.idx;
                                                                var $1664 = self.code;
                                                                var $1665 = self.val;
                                                                var $1666 = Parser$Reply$value$($1663, $1664, Kind$Term$ori$($1665, Kind$Term$let$($1627, $1642, (_x$24 => {
                                                                    var $1667 = $1657;
                                                                    return $1667;
                                                                }))));
                                                                var $1658 = $1666;
                                                                break;
                                                        };
                                                        var $1650 = $1658;
                                                        break;
                                                };
                                                var $1643 = $1650;
                                                break;
                                        };
                                        var $1635 = $1643;
                                        break;
                                };
                                var $1628 = $1635;
                                break;
                        };
                        var $1620 = $1628;
                        break;
                };
                var $1612 = $1620;
                break;
        };
        return $1612;
    };
    const Kind$Parser$let$omit = x0 => x1 => Kind$Parser$let$omit$(x0, x1);

    function Kind$Parser$getwhile$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1669 = self.idx;
                var $1670 = self.code;
                var $1671 = self.err;
                var $1672 = Parser$Reply$error$($1669, $1670, $1671);
                var $1668 = $1672;
                break;
            case 'Parser.Reply.value':
                var $1673 = self.idx;
                var $1674 = self.code;
                var $1675 = self.val;
                var self = Parser$maybe$(Kind$Parser$text("let "), $1673, $1674);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1677 = self.idx;
                        var $1678 = self.code;
                        var $1679 = self.err;
                        var $1680 = Parser$Reply$error$($1677, $1678, $1679);
                        var $1676 = $1680;
                        break;
                    case 'Parser.Reply.value':
                        var $1681 = self.idx;
                        var $1682 = self.code;
                        var self = Kind$Parser$text$("{", $1681, $1682);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1684 = self.idx;
                                var $1685 = self.code;
                                var $1686 = self.err;
                                var $1687 = Parser$Reply$error$($1684, $1685, $1686);
                                var $1683 = $1687;
                                break;
                            case 'Parser.Reply.value':
                                var $1688 = self.idx;
                                var $1689 = self.code;
                                var self = Kind$Parser$name$($1688, $1689);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1691 = self.idx;
                                        var $1692 = self.code;
                                        var $1693 = self.err;
                                        var $1694 = Parser$Reply$error$($1691, $1692, $1693);
                                        var $1690 = $1694;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1695 = self.idx;
                                        var $1696 = self.code;
                                        var $1697 = self.val;
                                        var self = Kind$Parser$text$(",", $1695, $1696);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1699 = self.idx;
                                                var $1700 = self.code;
                                                var $1701 = self.err;
                                                var $1702 = Parser$Reply$error$($1699, $1700, $1701);
                                                var $1698 = $1702;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1703 = self.idx;
                                                var $1704 = self.code;
                                                var self = Kind$Parser$name$($1703, $1704);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1706 = self.idx;
                                                        var $1707 = self.code;
                                                        var $1708 = self.err;
                                                        var $1709 = Parser$Reply$error$($1706, $1707, $1708);
                                                        var $1705 = $1709;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1710 = self.idx;
                                                        var $1711 = self.code;
                                                        var $1712 = self.val;
                                                        var self = Kind$Parser$text$("}", $1710, $1711);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1714 = self.idx;
                                                                var $1715 = self.code;
                                                                var $1716 = self.err;
                                                                var $1717 = Parser$Reply$error$($1714, $1715, $1716);
                                                                var $1713 = $1717;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1718 = self.idx;
                                                                var $1719 = self.code;
                                                                var self = Kind$Parser$text$("=", $1718, $1719);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1721 = self.idx;
                                                                        var $1722 = self.code;
                                                                        var $1723 = self.err;
                                                                        var $1724 = Parser$Reply$error$($1721, $1722, $1723);
                                                                        var $1720 = $1724;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1725 = self.idx;
                                                                        var $1726 = self.code;
                                                                        var self = Kind$Parser$text$("while ", $1725, $1726);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1728 = self.idx;
                                                                                var $1729 = self.code;
                                                                                var $1730 = self.err;
                                                                                var $1731 = Parser$Reply$error$($1728, $1729, $1730);
                                                                                var $1727 = $1731;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1732 = self.idx;
                                                                                var $1733 = self.code;
                                                                                var self = Kind$Parser$term$($1732, $1733);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1735 = self.idx;
                                                                                        var $1736 = self.code;
                                                                                        var $1737 = self.err;
                                                                                        var $1738 = Parser$Reply$error$($1735, $1736, $1737);
                                                                                        var $1734 = $1738;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1739 = self.idx;
                                                                                        var $1740 = self.code;
                                                                                        var $1741 = self.val;
                                                                                        var self = Kind$Parser$text$(":", $1739, $1740);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1743 = self.idx;
                                                                                                var $1744 = self.code;
                                                                                                var $1745 = self.err;
                                                                                                var $1746 = Parser$Reply$error$($1743, $1744, $1745);
                                                                                                var $1742 = $1746;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1747 = self.idx;
                                                                                                var $1748 = self.code;
                                                                                                var self = Kind$Parser$term$($1747, $1748);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1750 = self.idx;
                                                                                                        var $1751 = self.code;
                                                                                                        var $1752 = self.err;
                                                                                                        var $1753 = Parser$Reply$error$($1750, $1751, $1752);
                                                                                                        var $1749 = $1753;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1754 = self.idx;
                                                                                                        var $1755 = self.code;
                                                                                                        var $1756 = self.val;
                                                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $1754, $1755);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1758 = self.idx;
                                                                                                                var $1759 = self.code;
                                                                                                                var $1760 = self.err;
                                                                                                                var $1761 = Parser$Reply$error$($1758, $1759, $1760);
                                                                                                                var $1757 = $1761;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1762 = self.idx;
                                                                                                                var $1763 = self.code;
                                                                                                                var self = Kind$Parser$term$($1762, $1763);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1765 = self.idx;
                                                                                                                        var $1766 = self.code;
                                                                                                                        var $1767 = self.err;
                                                                                                                        var $1768 = Parser$Reply$error$($1765, $1766, $1767);
                                                                                                                        var $1764 = $1768;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1769 = self.idx;
                                                                                                                        var $1770 = self.code;
                                                                                                                        var $1771 = self.val;
                                                                                                                        var self = Kind$Parser$stop$($1675, $1769, $1770);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1773 = self.idx;
                                                                                                                                var $1774 = self.code;
                                                                                                                                var $1775 = self.err;
                                                                                                                                var $1776 = Parser$Reply$error$($1773, $1774, $1775);
                                                                                                                                var $1772 = $1776;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1777 = self.idx;
                                                                                                                                var $1778 = self.code;
                                                                                                                                var $1779 = self.val;
                                                                                                                                var _moti$48 = Kind$Term$lam$("x", (_x$48 => {
                                                                                                                                    var $1781 = Kind$Term$hol$(Bits$e);
                                                                                                                                    return $1781;
                                                                                                                                }));
                                                                                                                                var _term$49 = Kind$Term$ref$("Function.while");
                                                                                                                                var _term$50 = Kind$Term$app$(_term$49, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$51 = Kind$Term$ref$("Pair.new");
                                                                                                                                var _init$52 = Kind$Term$app$(_init$51, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$53 = Kind$Term$app$(_init$52, Kind$Term$hol$(Bits$e));
                                                                                                                                var _init$54 = Kind$Term$app$(_init$53, Kind$Term$ref$($1697));
                                                                                                                                var _init$55 = Kind$Term$app$(_init$54, Kind$Term$ref$($1712));
                                                                                                                                var _term$56 = Kind$Term$app$(_term$50, _init$55);
                                                                                                                                var _term$57 = Kind$Term$app$(_term$56, Kind$Term$lam$("s", (_s$57 => {
                                                                                                                                    var $1782 = Kind$Term$app$(Kind$Term$app$(_s$57, _moti$48), Kind$Term$lam$($1697, (_x$58 => {
                                                                                                                                        var $1783 = Kind$Term$lam$($1712, (_y$59 => {
                                                                                                                                            var $1784 = $1741;
                                                                                                                                            return $1784;
                                                                                                                                        }));
                                                                                                                                        return $1783;
                                                                                                                                    })));
                                                                                                                                    return $1782;
                                                                                                                                })));
                                                                                                                                var _term$58 = Kind$Term$app$(_term$57, Kind$Term$lam$("s", (_s$58 => {
                                                                                                                                    var $1785 = Kind$Term$app$(Kind$Term$app$(_s$58, _moti$48), Kind$Term$lam$($1697, (_x$59 => {
                                                                                                                                        var $1786 = Kind$Term$lam$($1712, (_y$60 => {
                                                                                                                                            var $1787 = $1756;
                                                                                                                                            return $1787;
                                                                                                                                        }));
                                                                                                                                        return $1786;
                                                                                                                                    })));
                                                                                                                                    return $1785;
                                                                                                                                })));
                                                                                                                                var _term$59 = Kind$Term$app$(Kind$Term$app$(_term$58, _moti$48), Kind$Term$lam$($1697, (_x$59 => {
                                                                                                                                    var $1788 = Kind$Term$lam$($1712, (_y$60 => {
                                                                                                                                        var $1789 = $1771;
                                                                                                                                        return $1789;
                                                                                                                                    }));
                                                                                                                                    return $1788;
                                                                                                                                })));
                                                                                                                                var $1780 = Parser$Reply$value$($1777, $1778, Kind$Term$ori$($1779, _term$59));
                                                                                                                                var $1772 = $1780;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1764 = $1772;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1757 = $1764;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1749 = $1757;
                                                                                                        break;
                                                                                                };
                                                                                                var $1742 = $1749;
                                                                                                break;
                                                                                        };
                                                                                        var $1734 = $1742;
                                                                                        break;
                                                                                };
                                                                                var $1727 = $1734;
                                                                                break;
                                                                        };
                                                                        var $1720 = $1727;
                                                                        break;
                                                                };
                                                                var $1713 = $1720;
                                                                break;
                                                        };
                                                        var $1705 = $1713;
                                                        break;
                                                };
                                                var $1698 = $1705;
                                                break;
                                        };
                                        var $1690 = $1698;
                                        break;
                                };
                                var $1683 = $1690;
                                break;
                        };
                        var $1676 = $1683;
                        break;
                };
                var $1668 = $1676;
                break;
        };
        return $1668;
    };
    const Kind$Parser$getwhile = x0 => x1 => Kind$Parser$getwhile$(x0, x1);

    function Kind$Parser$getwhile$with$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1791 = self.idx;
                var $1792 = self.code;
                var $1793 = self.err;
                var $1794 = Parser$Reply$error$($1791, $1792, $1793);
                var $1790 = $1794;
                break;
            case 'Parser.Reply.value':
                var $1795 = self.idx;
                var $1796 = self.code;
                var $1797 = self.val;
                var self = Kind$Parser$text$("while ", $1795, $1796);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1799 = self.idx;
                        var $1800 = self.code;
                        var $1801 = self.err;
                        var $1802 = Parser$Reply$error$($1799, $1800, $1801);
                        var $1798 = $1802;
                        break;
                    case 'Parser.Reply.value':
                        var $1803 = self.idx;
                        var $1804 = self.code;
                        var self = Kind$Parser$term$($1803, $1804);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1806 = self.idx;
                                var $1807 = self.code;
                                var $1808 = self.err;
                                var $1809 = Parser$Reply$error$($1806, $1807, $1808);
                                var $1805 = $1809;
                                break;
                            case 'Parser.Reply.value':
                                var $1810 = self.idx;
                                var $1811 = self.code;
                                var $1812 = self.val;
                                var self = Kind$Parser$text$("with ", $1810, $1811);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1814 = self.idx;
                                        var $1815 = self.code;
                                        var $1816 = self.err;
                                        var $1817 = Parser$Reply$error$($1814, $1815, $1816);
                                        var $1813 = $1817;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1818 = self.idx;
                                        var $1819 = self.code;
                                        var self = Kind$Parser$text$("{", $1818, $1819);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1821 = self.idx;
                                                var $1822 = self.code;
                                                var $1823 = self.err;
                                                var $1824 = Parser$Reply$error$($1821, $1822, $1823);
                                                var $1820 = $1824;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1825 = self.idx;
                                                var $1826 = self.code;
                                                var self = Kind$Parser$name$($1825, $1826);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1828 = self.idx;
                                                        var $1829 = self.code;
                                                        var $1830 = self.err;
                                                        var $1831 = Parser$Reply$error$($1828, $1829, $1830);
                                                        var $1827 = $1831;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1832 = self.idx;
                                                        var $1833 = self.code;
                                                        var $1834 = self.val;
                                                        var self = Kind$Parser$text$(",", $1832, $1833);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1836 = self.idx;
                                                                var $1837 = self.code;
                                                                var $1838 = self.err;
                                                                var $1839 = Parser$Reply$error$($1836, $1837, $1838);
                                                                var $1835 = $1839;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1840 = self.idx;
                                                                var $1841 = self.code;
                                                                var self = Kind$Parser$name$($1840, $1841);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1843 = self.idx;
                                                                        var $1844 = self.code;
                                                                        var $1845 = self.err;
                                                                        var $1846 = Parser$Reply$error$($1843, $1844, $1845);
                                                                        var $1842 = $1846;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1847 = self.idx;
                                                                        var $1848 = self.code;
                                                                        var $1849 = self.val;
                                                                        var self = Kind$Parser$text$("}", $1847, $1848);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1851 = self.idx;
                                                                                var $1852 = self.code;
                                                                                var $1853 = self.err;
                                                                                var $1854 = Parser$Reply$error$($1851, $1852, $1853);
                                                                                var $1850 = $1854;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1855 = self.idx;
                                                                                var $1856 = self.code;
                                                                                var self = Kind$Parser$text$(":", $1855, $1856);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1858 = self.idx;
                                                                                        var $1859 = self.code;
                                                                                        var $1860 = self.err;
                                                                                        var $1861 = Parser$Reply$error$($1858, $1859, $1860);
                                                                                        var $1857 = $1861;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1862 = self.idx;
                                                                                        var $1863 = self.code;
                                                                                        var self = Kind$Parser$term$($1862, $1863);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1865 = self.idx;
                                                                                                var $1866 = self.code;
                                                                                                var $1867 = self.err;
                                                                                                var $1868 = Parser$Reply$error$($1865, $1866, $1867);
                                                                                                var $1864 = $1868;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1869 = self.idx;
                                                                                                var $1870 = self.code;
                                                                                                var $1871 = self.val;
                                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1869, $1870);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1873 = self.idx;
                                                                                                        var $1874 = self.code;
                                                                                                        var $1875 = self.err;
                                                                                                        var $1876 = Parser$Reply$error$($1873, $1874, $1875);
                                                                                                        var $1872 = $1876;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1877 = self.idx;
                                                                                                        var $1878 = self.code;
                                                                                                        var self = Kind$Parser$term$($1877, $1878);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1880 = self.idx;
                                                                                                                var $1881 = self.code;
                                                                                                                var $1882 = self.err;
                                                                                                                var $1883 = Parser$Reply$error$($1880, $1881, $1882);
                                                                                                                var $1879 = $1883;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1884 = self.idx;
                                                                                                                var $1885 = self.code;
                                                                                                                var $1886 = self.val;
                                                                                                                var self = Kind$Parser$stop$($1797, $1884, $1885);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1888 = self.idx;
                                                                                                                        var $1889 = self.code;
                                                                                                                        var $1890 = self.err;
                                                                                                                        var $1891 = Parser$Reply$error$($1888, $1889, $1890);
                                                                                                                        var $1887 = $1891;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1892 = self.idx;
                                                                                                                        var $1893 = self.code;
                                                                                                                        var $1894 = self.val;
                                                                                                                        var _moti$45 = Kind$Term$lam$("x", (_x$45 => {
                                                                                                                            var $1896 = Kind$Term$hol$(Bits$e);
                                                                                                                            return $1896;
                                                                                                                        }));
                                                                                                                        var _term$46 = Kind$Term$ref$("Function.while");
                                                                                                                        var _term$47 = Kind$Term$app$(_term$46, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$48 = Kind$Term$ref$("Pair.new");
                                                                                                                        var _init$49 = Kind$Term$app$(_init$48, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$50 = Kind$Term$app$(_init$49, Kind$Term$hol$(Bits$e));
                                                                                                                        var _init$51 = Kind$Term$app$(_init$50, Kind$Term$ref$($1834));
                                                                                                                        var _init$52 = Kind$Term$app$(_init$51, Kind$Term$ref$($1849));
                                                                                                                        var _term$53 = Kind$Term$app$(_term$47, _init$52);
                                                                                                                        var _term$54 = Kind$Term$app$(_term$53, Kind$Term$lam$("s", (_s$54 => {
                                                                                                                            var $1897 = Kind$Term$app$(Kind$Term$app$(_s$54, _moti$45), Kind$Term$lam$($1834, (_x$55 => {
                                                                                                                                var $1898 = Kind$Term$lam$($1849, (_y$56 => {
                                                                                                                                    var $1899 = $1812;
                                                                                                                                    return $1899;
                                                                                                                                }));
                                                                                                                                return $1898;
                                                                                                                            })));
                                                                                                                            return $1897;
                                                                                                                        })));
                                                                                                                        var _term$55 = Kind$Term$app$(_term$54, Kind$Term$lam$("s", (_s$55 => {
                                                                                                                            var $1900 = Kind$Term$app$(Kind$Term$app$(_s$55, _moti$45), Kind$Term$lam$($1834, (_x$56 => {
                                                                                                                                var $1901 = Kind$Term$lam$($1849, (_y$57 => {
                                                                                                                                    var $1902 = $1871;
                                                                                                                                    return $1902;
                                                                                                                                }));
                                                                                                                                return $1901;
                                                                                                                            })));
                                                                                                                            return $1900;
                                                                                                                        })));
                                                                                                                        var _term$56 = Kind$Term$app$(Kind$Term$app$(_term$55, _moti$45), Kind$Term$lam$($1834, (_x$56 => {
                                                                                                                            var $1903 = Kind$Term$lam$($1849, (_y$57 => {
                                                                                                                                var $1904 = $1886;
                                                                                                                                return $1904;
                                                                                                                            }));
                                                                                                                            return $1903;
                                                                                                                        })));
                                                                                                                        var $1895 = Parser$Reply$value$($1892, $1893, Kind$Term$ori$($1894, _term$56));
                                                                                                                        var $1887 = $1895;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1879 = $1887;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1872 = $1879;
                                                                                                        break;
                                                                                                };
                                                                                                var $1864 = $1872;
                                                                                                break;
                                                                                        };
                                                                                        var $1857 = $1864;
                                                                                        break;
                                                                                };
                                                                                var $1850 = $1857;
                                                                                break;
                                                                        };
                                                                        var $1842 = $1850;
                                                                        break;
                                                                };
                                                                var $1835 = $1842;
                                                                break;
                                                        };
                                                        var $1827 = $1835;
                                                        break;
                                                };
                                                var $1820 = $1827;
                                                break;
                                        };
                                        var $1813 = $1820;
                                        break;
                                };
                                var $1805 = $1813;
                                break;
                        };
                        var $1798 = $1805;
                        break;
                };
                var $1790 = $1798;
                break;
        };
        return $1790;
    };
    const Kind$Parser$getwhile$with = x0 => x1 => Kind$Parser$getwhile$with$(x0, x1);

    function Kind$Parser$get$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1906 = self.idx;
                var $1907 = self.code;
                var $1908 = self.err;
                var $1909 = Parser$Reply$error$($1906, $1907, $1908);
                var $1905 = $1909;
                break;
            case 'Parser.Reply.value':
                var $1910 = self.idx;
                var $1911 = self.code;
                var $1912 = self.val;
                var self = Kind$Parser$text$("let ", $1910, $1911);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1914 = self.idx;
                        var $1915 = self.code;
                        var $1916 = self.err;
                        var $1917 = Parser$Reply$error$($1914, $1915, $1916);
                        var $1913 = $1917;
                        break;
                    case 'Parser.Reply.value':
                        var $1918 = self.idx;
                        var $1919 = self.code;
                        var self = Kind$Parser$text$("{", $1918, $1919);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1921 = self.idx;
                                var $1922 = self.code;
                                var $1923 = self.err;
                                var $1924 = Parser$Reply$error$($1921, $1922, $1923);
                                var $1920 = $1924;
                                break;
                            case 'Parser.Reply.value':
                                var $1925 = self.idx;
                                var $1926 = self.code;
                                var self = Kind$Parser$name$($1925, $1926);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1928 = self.idx;
                                        var $1929 = self.code;
                                        var $1930 = self.err;
                                        var $1931 = Parser$Reply$error$($1928, $1929, $1930);
                                        var $1927 = $1931;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1932 = self.idx;
                                        var $1933 = self.code;
                                        var $1934 = self.val;
                                        var self = Kind$Parser$text$(",", $1932, $1933);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1936 = self.idx;
                                                var $1937 = self.code;
                                                var $1938 = self.err;
                                                var $1939 = Parser$Reply$error$($1936, $1937, $1938);
                                                var $1935 = $1939;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1940 = self.idx;
                                                var $1941 = self.code;
                                                var self = Kind$Parser$name$($1940, $1941);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1943 = self.idx;
                                                        var $1944 = self.code;
                                                        var $1945 = self.err;
                                                        var $1946 = Parser$Reply$error$($1943, $1944, $1945);
                                                        var $1942 = $1946;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1947 = self.idx;
                                                        var $1948 = self.code;
                                                        var $1949 = self.val;
                                                        var self = Kind$Parser$text$("}", $1947, $1948);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1951 = self.idx;
                                                                var $1952 = self.code;
                                                                var $1953 = self.err;
                                                                var $1954 = Parser$Reply$error$($1951, $1952, $1953);
                                                                var $1950 = $1954;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1955 = self.idx;
                                                                var $1956 = self.code;
                                                                var self = Kind$Parser$text$("=", $1955, $1956);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1958 = self.idx;
                                                                        var $1959 = self.code;
                                                                        var $1960 = self.err;
                                                                        var $1961 = Parser$Reply$error$($1958, $1959, $1960);
                                                                        var $1957 = $1961;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1962 = self.idx;
                                                                        var $1963 = self.code;
                                                                        var self = Kind$Parser$term$($1962, $1963);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1965 = self.idx;
                                                                                var $1966 = self.code;
                                                                                var $1967 = self.err;
                                                                                var $1968 = Parser$Reply$error$($1965, $1966, $1967);
                                                                                var $1964 = $1968;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1969 = self.idx;
                                                                                var $1970 = self.code;
                                                                                var $1971 = self.val;
                                                                                var self = Parser$maybe$(Kind$Parser$text(";"), $1969, $1970);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1973 = self.idx;
                                                                                        var $1974 = self.code;
                                                                                        var $1975 = self.err;
                                                                                        var $1976 = Parser$Reply$error$($1973, $1974, $1975);
                                                                                        var $1972 = $1976;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1977 = self.idx;
                                                                                        var $1978 = self.code;
                                                                                        var self = Kind$Parser$term$($1977, $1978);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1980 = self.idx;
                                                                                                var $1981 = self.code;
                                                                                                var $1982 = self.err;
                                                                                                var $1983 = Parser$Reply$error$($1980, $1981, $1982);
                                                                                                var $1979 = $1983;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1984 = self.idx;
                                                                                                var $1985 = self.code;
                                                                                                var $1986 = self.val;
                                                                                                var self = Kind$Parser$stop$($1912, $1984, $1985);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1988 = self.idx;
                                                                                                        var $1989 = self.code;
                                                                                                        var $1990 = self.err;
                                                                                                        var $1991 = Parser$Reply$error$($1988, $1989, $1990);
                                                                                                        var $1987 = $1991;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1992 = self.idx;
                                                                                                        var $1993 = self.code;
                                                                                                        var $1994 = self.val;
                                                                                                        var _term$39 = $1971;
                                                                                                        var _term$40 = Kind$Term$app$(_term$39, Kind$Term$lam$("x", (_x$40 => {
                                                                                                            var $1996 = Kind$Term$hol$(Bits$e);
                                                                                                            return $1996;
                                                                                                        })));
                                                                                                        var _term$41 = Kind$Term$app$(_term$40, Kind$Term$lam$($1934, (_x$41 => {
                                                                                                            var $1997 = Kind$Term$lam$($1949, (_y$42 => {
                                                                                                                var $1998 = $1986;
                                                                                                                return $1998;
                                                                                                            }));
                                                                                                            return $1997;
                                                                                                        })));
                                                                                                        var $1995 = Parser$Reply$value$($1992, $1993, Kind$Term$ori$($1994, _term$41));
                                                                                                        var $1987 = $1995;
                                                                                                        break;
                                                                                                };
                                                                                                var $1979 = $1987;
                                                                                                break;
                                                                                        };
                                                                                        var $1972 = $1979;
                                                                                        break;
                                                                                };
                                                                                var $1964 = $1972;
                                                                                break;
                                                                        };
                                                                        var $1957 = $1964;
                                                                        break;
                                                                };
                                                                var $1950 = $1957;
                                                                break;
                                                        };
                                                        var $1942 = $1950;
                                                        break;
                                                };
                                                var $1935 = $1942;
                                                break;
                                        };
                                        var $1927 = $1935;
                                        break;
                                };
                                var $1920 = $1927;
                                break;
                        };
                        var $1913 = $1920;
                        break;
                };
                var $1905 = $1913;
                break;
        };
        return $1905;
    };
    const Kind$Parser$get = x0 => x1 => Kind$Parser$get$(x0, x1);

    function Kind$Parser$get$omit$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2000 = self.idx;
                var $2001 = self.code;
                var $2002 = self.err;
                var $2003 = Parser$Reply$error$($2000, $2001, $2002);
                var $1999 = $2003;
                break;
            case 'Parser.Reply.value':
                var $2004 = self.idx;
                var $2005 = self.code;
                var $2006 = self.val;
                var self = Kind$Parser$text$("{", $2004, $2005);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2008 = self.idx;
                        var $2009 = self.code;
                        var $2010 = self.err;
                        var $2011 = Parser$Reply$error$($2008, $2009, $2010);
                        var $2007 = $2011;
                        break;
                    case 'Parser.Reply.value':
                        var $2012 = self.idx;
                        var $2013 = self.code;
                        var self = Kind$Parser$name$($2012, $2013);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2015 = self.idx;
                                var $2016 = self.code;
                                var $2017 = self.err;
                                var $2018 = Parser$Reply$error$($2015, $2016, $2017);
                                var $2014 = $2018;
                                break;
                            case 'Parser.Reply.value':
                                var $2019 = self.idx;
                                var $2020 = self.code;
                                var $2021 = self.val;
                                var self = Kind$Parser$text$(",", $2019, $2020);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2023 = self.idx;
                                        var $2024 = self.code;
                                        var $2025 = self.err;
                                        var $2026 = Parser$Reply$error$($2023, $2024, $2025);
                                        var $2022 = $2026;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2027 = self.idx;
                                        var $2028 = self.code;
                                        var self = Kind$Parser$name$($2027, $2028);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2030 = self.idx;
                                                var $2031 = self.code;
                                                var $2032 = self.err;
                                                var $2033 = Parser$Reply$error$($2030, $2031, $2032);
                                                var $2029 = $2033;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2034 = self.idx;
                                                var $2035 = self.code;
                                                var $2036 = self.val;
                                                var self = Kind$Parser$text$("}", $2034, $2035);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2038 = self.idx;
                                                        var $2039 = self.code;
                                                        var $2040 = self.err;
                                                        var $2041 = Parser$Reply$error$($2038, $2039, $2040);
                                                        var $2037 = $2041;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2042 = self.idx;
                                                        var $2043 = self.code;
                                                        var self = Kind$Parser$text$("= ", $2042, $2043);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2045 = self.idx;
                                                                var $2046 = self.code;
                                                                var $2047 = self.err;
                                                                var $2048 = Parser$Reply$error$($2045, $2046, $2047);
                                                                var $2044 = $2048;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2049 = self.idx;
                                                                var $2050 = self.code;
                                                                var self = Kind$Parser$term$($2049, $2050);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2052 = self.idx;
                                                                        var $2053 = self.code;
                                                                        var $2054 = self.err;
                                                                        var $2055 = Parser$Reply$error$($2052, $2053, $2054);
                                                                        var $2051 = $2055;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2056 = self.idx;
                                                                        var $2057 = self.code;
                                                                        var $2058 = self.val;
                                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $2056, $2057);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2060 = self.idx;
                                                                                var $2061 = self.code;
                                                                                var $2062 = self.err;
                                                                                var $2063 = Parser$Reply$error$($2060, $2061, $2062);
                                                                                var $2059 = $2063;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2064 = self.idx;
                                                                                var $2065 = self.code;
                                                                                var self = Kind$Parser$term$($2064, $2065);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2067 = self.idx;
                                                                                        var $2068 = self.code;
                                                                                        var $2069 = self.err;
                                                                                        var $2070 = Parser$Reply$error$($2067, $2068, $2069);
                                                                                        var $2066 = $2070;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2071 = self.idx;
                                                                                        var $2072 = self.code;
                                                                                        var $2073 = self.val;
                                                                                        var self = Kind$Parser$stop$($2006, $2071, $2072);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2075 = self.idx;
                                                                                                var $2076 = self.code;
                                                                                                var $2077 = self.err;
                                                                                                var $2078 = Parser$Reply$error$($2075, $2076, $2077);
                                                                                                var $2074 = $2078;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2079 = self.idx;
                                                                                                var $2080 = self.code;
                                                                                                var $2081 = self.val;
                                                                                                var _term$36 = $2058;
                                                                                                var _term$37 = Kind$Term$app$(_term$36, Kind$Term$lam$("x", (_x$37 => {
                                                                                                    var $2083 = Kind$Term$hol$(Bits$e);
                                                                                                    return $2083;
                                                                                                })));
                                                                                                var _term$38 = Kind$Term$app$(_term$37, Kind$Term$lam$($2021, (_x$38 => {
                                                                                                    var $2084 = Kind$Term$lam$($2036, (_y$39 => {
                                                                                                        var $2085 = $2073;
                                                                                                        return $2085;
                                                                                                    }));
                                                                                                    return $2084;
                                                                                                })));
                                                                                                var $2082 = Parser$Reply$value$($2079, $2080, Kind$Term$ori$($2081, _term$38));
                                                                                                var $2074 = $2082;
                                                                                                break;
                                                                                        };
                                                                                        var $2066 = $2074;
                                                                                        break;
                                                                                };
                                                                                var $2059 = $2066;
                                                                                break;
                                                                        };
                                                                        var $2051 = $2059;
                                                                        break;
                                                                };
                                                                var $2044 = $2051;
                                                                break;
                                                        };
                                                        var $2037 = $2044;
                                                        break;
                                                };
                                                var $2029 = $2037;
                                                break;
                                        };
                                        var $2022 = $2029;
                                        break;
                                };
                                var $2014 = $2022;
                                break;
                        };
                        var $2007 = $2014;
                        break;
                };
                var $1999 = $2007;
                break;
        };
        return $1999;
    };
    const Kind$Parser$get$omit = x0 => x1 => Kind$Parser$get$omit$(x0, x1);

    function Kind$Term$def$(_name$1, _expr$2, _body$3) {
        var $2086 = ({
            _: 'Kind.Term.def',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $2086;
    };
    const Kind$Term$def = x0 => x1 => x2 => Kind$Term$def$(x0, x1, x2);

    function Kind$Parser$def$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2088 = self.idx;
                var $2089 = self.code;
                var $2090 = self.err;
                var $2091 = Parser$Reply$error$($2088, $2089, $2090);
                var $2087 = $2091;
                break;
            case 'Parser.Reply.value':
                var $2092 = self.idx;
                var $2093 = self.code;
                var $2094 = self.val;
                var self = Kind$Parser$text$("def ", $2092, $2093);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2096 = self.idx;
                        var $2097 = self.code;
                        var $2098 = self.err;
                        var $2099 = Parser$Reply$error$($2096, $2097, $2098);
                        var $2095 = $2099;
                        break;
                    case 'Parser.Reply.value':
                        var $2100 = self.idx;
                        var $2101 = self.code;
                        var self = Kind$Parser$name$($2100, $2101);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2103 = self.idx;
                                var $2104 = self.code;
                                var $2105 = self.err;
                                var $2106 = Parser$Reply$error$($2103, $2104, $2105);
                                var $2102 = $2106;
                                break;
                            case 'Parser.Reply.value':
                                var $2107 = self.idx;
                                var $2108 = self.code;
                                var $2109 = self.val;
                                var self = Kind$Parser$text$("=", $2107, $2108);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2111 = self.idx;
                                        var $2112 = self.code;
                                        var $2113 = self.err;
                                        var $2114 = Parser$Reply$error$($2111, $2112, $2113);
                                        var $2110 = $2114;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2115 = self.idx;
                                        var $2116 = self.code;
                                        var self = Kind$Parser$term$($2115, $2116);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2118 = self.idx;
                                                var $2119 = self.code;
                                                var $2120 = self.err;
                                                var $2121 = Parser$Reply$error$($2118, $2119, $2120);
                                                var $2117 = $2121;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2122 = self.idx;
                                                var $2123 = self.code;
                                                var $2124 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $2122, $2123);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2126 = self.idx;
                                                        var $2127 = self.code;
                                                        var $2128 = self.err;
                                                        var $2129 = Parser$Reply$error$($2126, $2127, $2128);
                                                        var $2125 = $2129;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2130 = self.idx;
                                                        var $2131 = self.code;
                                                        var self = Kind$Parser$term$($2130, $2131);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2133 = self.idx;
                                                                var $2134 = self.code;
                                                                var $2135 = self.err;
                                                                var $2136 = Parser$Reply$error$($2133, $2134, $2135);
                                                                var $2132 = $2136;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2137 = self.idx;
                                                                var $2138 = self.code;
                                                                var $2139 = self.val;
                                                                var self = Kind$Parser$stop$($2094, $2137, $2138);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2141 = self.idx;
                                                                        var $2142 = self.code;
                                                                        var $2143 = self.err;
                                                                        var $2144 = Parser$Reply$error$($2141, $2142, $2143);
                                                                        var $2140 = $2144;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2145 = self.idx;
                                                                        var $2146 = self.code;
                                                                        var $2147 = self.val;
                                                                        var $2148 = Parser$Reply$value$($2145, $2146, Kind$Term$ori$($2147, Kind$Term$def$($2109, $2124, (_x$27 => {
                                                                            var $2149 = $2139;
                                                                            return $2149;
                                                                        }))));
                                                                        var $2140 = $2148;
                                                                        break;
                                                                };
                                                                var $2132 = $2140;
                                                                break;
                                                        };
                                                        var $2125 = $2132;
                                                        break;
                                                };
                                                var $2117 = $2125;
                                                break;
                                        };
                                        var $2110 = $2117;
                                        break;
                                };
                                var $2102 = $2110;
                                break;
                        };
                        var $2095 = $2102;
                        break;
                };
                var $2087 = $2095;
                break;
        };
        return $2087;
    };
    const Kind$Parser$def = x0 => x1 => Kind$Parser$def$(x0, x1);

    function Kind$Parser$goal_rewrite$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2151 = self.idx;
                var $2152 = self.code;
                var $2153 = self.err;
                var $2154 = Parser$Reply$error$($2151, $2152, $2153);
                var $2150 = $2154;
                break;
            case 'Parser.Reply.value':
                var $2155 = self.idx;
                var $2156 = self.code;
                var $2157 = self.val;
                var self = Kind$Parser$text$("rewrite ", $2155, $2156);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2159 = self.idx;
                        var $2160 = self.code;
                        var $2161 = self.err;
                        var $2162 = Parser$Reply$error$($2159, $2160, $2161);
                        var $2158 = $2162;
                        break;
                    case 'Parser.Reply.value':
                        var $2163 = self.idx;
                        var $2164 = self.code;
                        var self = Kind$Parser$name1$($2163, $2164);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2166 = self.idx;
                                var $2167 = self.code;
                                var $2168 = self.err;
                                var $2169 = Parser$Reply$error$($2166, $2167, $2168);
                                var $2165 = $2169;
                                break;
                            case 'Parser.Reply.value':
                                var $2170 = self.idx;
                                var $2171 = self.code;
                                var $2172 = self.val;
                                var self = Kind$Parser$text$("in", $2170, $2171);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2174 = self.idx;
                                        var $2175 = self.code;
                                        var $2176 = self.err;
                                        var $2177 = Parser$Reply$error$($2174, $2175, $2176);
                                        var $2173 = $2177;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2178 = self.idx;
                                        var $2179 = self.code;
                                        var self = Kind$Parser$term$($2178, $2179);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2181 = self.idx;
                                                var $2182 = self.code;
                                                var $2183 = self.err;
                                                var $2184 = Parser$Reply$error$($2181, $2182, $2183);
                                                var $2180 = $2184;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2185 = self.idx;
                                                var $2186 = self.code;
                                                var $2187 = self.val;
                                                var self = Kind$Parser$text$("with", $2185, $2186);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2189 = self.idx;
                                                        var $2190 = self.code;
                                                        var $2191 = self.err;
                                                        var $2192 = Parser$Reply$error$($2189, $2190, $2191);
                                                        var $2188 = $2192;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2193 = self.idx;
                                                        var $2194 = self.code;
                                                        var self = Kind$Parser$term$($2193, $2194);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2196 = self.idx;
                                                                var $2197 = self.code;
                                                                var $2198 = self.err;
                                                                var $2199 = Parser$Reply$error$($2196, $2197, $2198);
                                                                var $2195 = $2199;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2200 = self.idx;
                                                                var $2201 = self.code;
                                                                var $2202 = self.val;
                                                                var self = Kind$Parser$term$($2200, $2201);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2204 = self.idx;
                                                                        var $2205 = self.code;
                                                                        var $2206 = self.err;
                                                                        var $2207 = Parser$Reply$error$($2204, $2205, $2206);
                                                                        var $2203 = $2207;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2208 = self.idx;
                                                                        var $2209 = self.code;
                                                                        var $2210 = self.val;
                                                                        var self = Kind$Parser$stop$($2157, $2208, $2209);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2212 = self.idx;
                                                                                var $2213 = self.code;
                                                                                var $2214 = self.err;
                                                                                var $2215 = Parser$Reply$error$($2212, $2213, $2214);
                                                                                var $2211 = $2215;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2216 = self.idx;
                                                                                var $2217 = self.code;
                                                                                var $2218 = self.val;
                                                                                var _moti$30 = Kind$Term$lam$($2172, (_s$30 => {
                                                                                    var $2220 = Kind$Term$lam$("", (_x$31 => {
                                                                                        var $2221 = $2187;
                                                                                        return $2221;
                                                                                    }));
                                                                                    return $2220;
                                                                                }));
                                                                                var _term$31 = Kind$Term$ref$("Equal.mirror");
                                                                                var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));
                                                                                var _term$33 = Kind$Term$app$(_term$32, Kind$Term$hol$(Bits$e));
                                                                                var _term$34 = Kind$Term$app$(_term$33, Kind$Term$hol$(Bits$e));
                                                                                var _term$35 = Kind$Term$app$(_term$34, $2202);
                                                                                var _term$36 = Kind$Term$app$(_term$35, _moti$30);
                                                                                var _term$37 = Kind$Term$app$(_term$36, $2210);
                                                                                var $2219 = Parser$Reply$value$($2216, $2217, Kind$Term$ori$($2218, _term$37));
                                                                                var $2211 = $2219;
                                                                                break;
                                                                        };
                                                                        var $2203 = $2211;
                                                                        break;
                                                                };
                                                                var $2195 = $2203;
                                                                break;
                                                        };
                                                        var $2188 = $2195;
                                                        break;
                                                };
                                                var $2180 = $2188;
                                                break;
                                        };
                                        var $2173 = $2180;
                                        break;
                                };
                                var $2165 = $2173;
                                break;
                        };
                        var $2158 = $2165;
                        break;
                };
                var $2150 = $2158;
                break;
        };
        return $2150;
    };
    const Kind$Parser$goal_rewrite = x0 => x1 => Kind$Parser$goal_rewrite$(x0, x1);

    function Kind$Parser$if$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2223 = self.idx;
                var $2224 = self.code;
                var $2225 = self.err;
                var $2226 = Parser$Reply$error$($2223, $2224, $2225);
                var $2222 = $2226;
                break;
            case 'Parser.Reply.value':
                var $2227 = self.idx;
                var $2228 = self.code;
                var $2229 = self.val;
                var self = Kind$Parser$text$("if ", $2227, $2228);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2231 = self.idx;
                        var $2232 = self.code;
                        var $2233 = self.err;
                        var $2234 = Parser$Reply$error$($2231, $2232, $2233);
                        var $2230 = $2234;
                        break;
                    case 'Parser.Reply.value':
                        var $2235 = self.idx;
                        var $2236 = self.code;
                        var self = Kind$Parser$term$($2235, $2236);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2238 = self.idx;
                                var $2239 = self.code;
                                var $2240 = self.err;
                                var $2241 = Parser$Reply$error$($2238, $2239, $2240);
                                var $2237 = $2241;
                                break;
                            case 'Parser.Reply.value':
                                var $2242 = self.idx;
                                var $2243 = self.code;
                                var $2244 = self.val;
                                var self = Kind$Parser$text$("then", $2242, $2243);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2246 = self.idx;
                                        var $2247 = self.code;
                                        var $2248 = self.err;
                                        var $2249 = Parser$Reply$error$($2246, $2247, $2248);
                                        var $2245 = $2249;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2250 = self.idx;
                                        var $2251 = self.code;
                                        var self = Kind$Parser$term$($2250, $2251);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2253 = self.idx;
                                                var $2254 = self.code;
                                                var $2255 = self.err;
                                                var $2256 = Parser$Reply$error$($2253, $2254, $2255);
                                                var $2252 = $2256;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2257 = self.idx;
                                                var $2258 = self.code;
                                                var $2259 = self.val;
                                                var self = Kind$Parser$text$("else", $2257, $2258);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2261 = self.idx;
                                                        var $2262 = self.code;
                                                        var $2263 = self.err;
                                                        var $2264 = Parser$Reply$error$($2261, $2262, $2263);
                                                        var $2260 = $2264;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2265 = self.idx;
                                                        var $2266 = self.code;
                                                        var self = Kind$Parser$term$($2265, $2266);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2268 = self.idx;
                                                                var $2269 = self.code;
                                                                var $2270 = self.err;
                                                                var $2271 = Parser$Reply$error$($2268, $2269, $2270);
                                                                var $2267 = $2271;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2272 = self.idx;
                                                                var $2273 = self.code;
                                                                var $2274 = self.val;
                                                                var self = Kind$Parser$stop$($2229, $2272, $2273);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2276 = self.idx;
                                                                        var $2277 = self.code;
                                                                        var $2278 = self.err;
                                                                        var $2279 = Parser$Reply$error$($2276, $2277, $2278);
                                                                        var $2275 = $2279;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2280 = self.idx;
                                                                        var $2281 = self.code;
                                                                        var $2282 = self.val;
                                                                        var _term$27 = $2244;
                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$lam$("", (_x$28 => {
                                                                            var $2284 = Kind$Term$hol$(Bits$e);
                                                                            return $2284;
                                                                        })));
                                                                        var _term$29 = Kind$Term$app$(_term$28, $2259);
                                                                        var _term$30 = Kind$Term$app$(_term$29, $2274);
                                                                        var $2283 = Parser$Reply$value$($2280, $2281, Kind$Term$ori$($2282, _term$30));
                                                                        var $2275 = $2283;
                                                                        break;
                                                                };
                                                                var $2267 = $2275;
                                                                break;
                                                        };
                                                        var $2260 = $2267;
                                                        break;
                                                };
                                                var $2252 = $2260;
                                                break;
                                        };
                                        var $2245 = $2252;
                                        break;
                                };
                                var $2237 = $2245;
                                break;
                        };
                        var $2230 = $2237;
                        break;
                };
                var $2222 = $2230;
                break;
        };
        return $2222;
    };
    const Kind$Parser$if = x0 => x1 => Kind$Parser$if$(x0, x1);

    function List$mapped$(_as$2, _f$4) {
        var self = _as$2;
        switch (self._) {
            case 'List.cons':
                var $2286 = self.head;
                var $2287 = self.tail;
                var $2288 = List$cons$(_f$4($2286), List$mapped$($2287, _f$4));
                var $2285 = $2288;
                break;
            case 'List.nil':
                var $2289 = List$nil;
                var $2285 = $2289;
                break;
        };
        return $2285;
    };
    const List$mapped = x0 => x1 => List$mapped$(x0, x1);
    const Kind$Code$backslash = 92;
    const Kind$Code$escapes = List$cons$(Pair$new$("\\b", 8), List$cons$(Pair$new$("\\f", 12), List$cons$(Pair$new$("\\n", 10), List$cons$(Pair$new$("\\r", 13), List$cons$(Pair$new$("\\t", 9), List$cons$(Pair$new$("\\v", 11), List$cons$(Pair$new$(String$cons$(Kind$Code$backslash, String$cons$(Kind$Code$backslash, String$nil)), Kind$Code$backslash), List$cons$(Pair$new$("\\\"", 34), List$cons$(Pair$new$("\\0", 0), List$cons$(Pair$new$("\\\'", 39), List$nil))))))))));
    const Kind$Parser$char$single = Parser$first_of$(List$cons$(Parser$first_of$(List$mapped$(Kind$Code$escapes, (_esc$1 => {
        var self = _esc$1;
        switch (self._) {
            case 'Pair.new':
                var $2291 = self.fst;
                var $2292 = self.snd;
                var $2293 = (_idx$4 => _code$5 => {
                    var self = Parser$text$($2291, _idx$4, _code$5);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2295 = self.idx;
                            var $2296 = self.code;
                            var $2297 = self.err;
                            var $2298 = Parser$Reply$error$($2295, $2296, $2297);
                            var $2294 = $2298;
                            break;
                        case 'Parser.Reply.value':
                            var $2299 = self.idx;
                            var $2300 = self.code;
                            var $2301 = Parser$Reply$value$($2299, $2300, $2292);
                            var $2294 = $2301;
                            break;
                    };
                    return $2294;
                });
                var $2290 = $2293;
                break;
        };
        return $2290;
    }))), List$cons$(Parser$one, List$nil)));

    function Kind$Term$chr$(_chrx$1) {
        var $2302 = ({
            _: 'Kind.Term.chr',
            'chrx': _chrx$1
        });
        return $2302;
    };
    const Kind$Term$chr = x0 => Kind$Term$chr$(x0);

    function Kind$Parser$char$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2304 = self.idx;
                var $2305 = self.code;
                var $2306 = self.err;
                var $2307 = Parser$Reply$error$($2304, $2305, $2306);
                var $2303 = $2307;
                break;
            case 'Parser.Reply.value':
                var $2308 = self.idx;
                var $2309 = self.code;
                var $2310 = self.val;
                var self = Kind$Parser$text$("\'", $2308, $2309);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2312 = self.idx;
                        var $2313 = self.code;
                        var $2314 = self.err;
                        var $2315 = Parser$Reply$error$($2312, $2313, $2314);
                        var $2311 = $2315;
                        break;
                    case 'Parser.Reply.value':
                        var $2316 = self.idx;
                        var $2317 = self.code;
                        var self = Kind$Parser$char$single($2316)($2317);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2319 = self.idx;
                                var $2320 = self.code;
                                var $2321 = self.err;
                                var $2322 = Parser$Reply$error$($2319, $2320, $2321);
                                var $2318 = $2322;
                                break;
                            case 'Parser.Reply.value':
                                var $2323 = self.idx;
                                var $2324 = self.code;
                                var $2325 = self.val;
                                var self = Parser$text$("\'", $2323, $2324);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2327 = self.idx;
                                        var $2328 = self.code;
                                        var $2329 = self.err;
                                        var $2330 = Parser$Reply$error$($2327, $2328, $2329);
                                        var $2326 = $2330;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2331 = self.idx;
                                        var $2332 = self.code;
                                        var self = Kind$Parser$stop$($2310, $2331, $2332);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2334 = self.idx;
                                                var $2335 = self.code;
                                                var $2336 = self.err;
                                                var $2337 = Parser$Reply$error$($2334, $2335, $2336);
                                                var $2333 = $2337;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2338 = self.idx;
                                                var $2339 = self.code;
                                                var $2340 = self.val;
                                                var $2341 = Parser$Reply$value$($2338, $2339, Kind$Term$ori$($2340, Kind$Term$chr$($2325)));
                                                var $2333 = $2341;
                                                break;
                                        };
                                        var $2326 = $2333;
                                        break;
                                };
                                var $2318 = $2326;
                                break;
                        };
                        var $2311 = $2318;
                        break;
                };
                var $2303 = $2311;
                break;
        };
        return $2303;
    };
    const Kind$Parser$char = x0 => x1 => Kind$Parser$char$(x0, x1);

    function String$reverse$go$(_xs$1, _res$2) {
        var String$reverse$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$reverse$go = _xs$1 => _res$2 => String$reverse$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $2342 = _res$2;
                    return $2342;
                } else {
                    var $2343 = self.charCodeAt(0);
                    var $2344 = self.slice(1);
                    var $2345 = String$reverse$go$($2344, String$cons$($2343, _res$2));
                    return $2345;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$reverse$go = x0 => x1 => String$reverse$go$(x0, x1);

    function String$reverse$(_xs$1) {
        var $2346 = String$reverse$go$(_xs$1, String$nil);
        return $2346;
    };
    const String$reverse = x0 => String$reverse$(x0);

    function Kind$Parser$string$go$(_str$1, _idx$2, _code$3) {
        var Kind$Parser$string$go$ = (_str$1, _idx$2, _code$3) => ({
            ctr: 'TCO',
            arg: [_str$1, _idx$2, _code$3]
        });
        var Kind$Parser$string$go = _str$1 => _idx$2 => _code$3 => Kind$Parser$string$go$(_str$1, _idx$2, _code$3);
        var arg = [_str$1, _idx$2, _code$3];
        while (true) {
            let [_str$1, _idx$2, _code$3] = arg;
            var R = (() => {
                var self = _code$3;
                if (self.length === 0) {
                    var $2347 = Parser$Reply$error$(_idx$2, _code$3, "Non-terminating string.");
                    return $2347;
                } else {
                    var $2348 = self.charCodeAt(0);
                    var $2349 = self.slice(1);
                    var self = ($2348 === 34);
                    if (self) {
                        var $2351 = Parser$Reply$value$(Nat$succ$(_idx$2), $2349, String$reverse$(_str$1));
                        var $2350 = $2351;
                    } else {
                        var self = Kind$Parser$char$single(_idx$2)(_code$3);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2353 = self.idx;
                                var $2354 = self.code;
                                var $2355 = self.err;
                                var $2356 = Parser$Reply$error$($2353, $2354, $2355);
                                var $2352 = $2356;
                                break;
                            case 'Parser.Reply.value':
                                var $2357 = self.idx;
                                var $2358 = self.code;
                                var $2359 = self.val;
                                var $2360 = Kind$Parser$string$go$(String$cons$($2359, _str$1), $2357, $2358);
                                var $2352 = $2360;
                                break;
                        };
                        var $2350 = $2352;
                    };
                    return $2350;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Parser$string$go = x0 => x1 => x2 => Kind$Parser$string$go$(x0, x1, x2);

    function Kind$Term$str$(_strx$1) {
        var $2361 = ({
            _: 'Kind.Term.str',
            'strx': _strx$1
        });
        return $2361;
    };
    const Kind$Term$str = x0 => Kind$Term$str$(x0);

    function Kind$Parser$string$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2363 = self.idx;
                var $2364 = self.code;
                var $2365 = self.err;
                var $2366 = Parser$Reply$error$($2363, $2364, $2365);
                var $2362 = $2366;
                break;
            case 'Parser.Reply.value':
                var $2367 = self.idx;
                var $2368 = self.code;
                var $2369 = self.val;
                var self = Kind$Parser$text$(String$cons$(34, String$nil), $2367, $2368);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2371 = self.idx;
                        var $2372 = self.code;
                        var $2373 = self.err;
                        var $2374 = Parser$Reply$error$($2371, $2372, $2373);
                        var $2370 = $2374;
                        break;
                    case 'Parser.Reply.value':
                        var $2375 = self.idx;
                        var $2376 = self.code;
                        var self = Kind$Parser$string$go$("", $2375, $2376);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2378 = self.idx;
                                var $2379 = self.code;
                                var $2380 = self.err;
                                var $2381 = Parser$Reply$error$($2378, $2379, $2380);
                                var $2377 = $2381;
                                break;
                            case 'Parser.Reply.value':
                                var $2382 = self.idx;
                                var $2383 = self.code;
                                var $2384 = self.val;
                                var self = Kind$Parser$stop$($2369, $2382, $2383);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2386 = self.idx;
                                        var $2387 = self.code;
                                        var $2388 = self.err;
                                        var $2389 = Parser$Reply$error$($2386, $2387, $2388);
                                        var $2385 = $2389;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2390 = self.idx;
                                        var $2391 = self.code;
                                        var $2392 = self.val;
                                        var $2393 = Parser$Reply$value$($2390, $2391, Kind$Term$ori$($2392, Kind$Term$str$($2384)));
                                        var $2385 = $2393;
                                        break;
                                };
                                var $2377 = $2385;
                                break;
                        };
                        var $2370 = $2377;
                        break;
                };
                var $2362 = $2370;
                break;
        };
        return $2362;
    };
    const Kind$Parser$string = x0 => x1 => Kind$Parser$string$(x0, x1);

    function Kind$Parser$pair$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2395 = self.idx;
                var $2396 = self.code;
                var $2397 = self.err;
                var $2398 = Parser$Reply$error$($2395, $2396, $2397);
                var $2394 = $2398;
                break;
            case 'Parser.Reply.value':
                var $2399 = self.idx;
                var $2400 = self.code;
                var $2401 = self.val;
                var self = Kind$Parser$text$("{", $2399, $2400);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2403 = self.idx;
                        var $2404 = self.code;
                        var $2405 = self.err;
                        var $2406 = Parser$Reply$error$($2403, $2404, $2405);
                        var $2402 = $2406;
                        break;
                    case 'Parser.Reply.value':
                        var $2407 = self.idx;
                        var $2408 = self.code;
                        var self = Kind$Parser$term$($2407, $2408);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2410 = self.idx;
                                var $2411 = self.code;
                                var $2412 = self.err;
                                var $2413 = Parser$Reply$error$($2410, $2411, $2412);
                                var $2409 = $2413;
                                break;
                            case 'Parser.Reply.value':
                                var $2414 = self.idx;
                                var $2415 = self.code;
                                var $2416 = self.val;
                                var self = Parser$maybe$(Kind$Parser$text(","), $2414, $2415);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2418 = self.idx;
                                        var $2419 = self.code;
                                        var $2420 = self.err;
                                        var $2421 = Parser$Reply$error$($2418, $2419, $2420);
                                        var $2417 = $2421;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2422 = self.idx;
                                        var $2423 = self.code;
                                        var self = Kind$Parser$term$($2422, $2423);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2425 = self.idx;
                                                var $2426 = self.code;
                                                var $2427 = self.err;
                                                var $2428 = Parser$Reply$error$($2425, $2426, $2427);
                                                var $2424 = $2428;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2429 = self.idx;
                                                var $2430 = self.code;
                                                var $2431 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(","), $2429, $2430);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2433 = self.idx;
                                                        var $2434 = self.code;
                                                        var $2435 = self.err;
                                                        var $2436 = Parser$Reply$error$($2433, $2434, $2435);
                                                        var $2432 = $2436;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2437 = self.idx;
                                                        var $2438 = self.code;
                                                        var self = Kind$Parser$text$("}", $2437, $2438);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2440 = self.idx;
                                                                var $2441 = self.code;
                                                                var $2442 = self.err;
                                                                var $2443 = Parser$Reply$error$($2440, $2441, $2442);
                                                                var $2439 = $2443;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2444 = self.idx;
                                                                var $2445 = self.code;
                                                                var self = Kind$Parser$stop$($2401, $2444, $2445);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2447 = self.idx;
                                                                        var $2448 = self.code;
                                                                        var $2449 = self.err;
                                                                        var $2450 = Parser$Reply$error$($2447, $2448, $2449);
                                                                        var $2446 = $2450;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2451 = self.idx;
                                                                        var $2452 = self.code;
                                                                        var $2453 = self.val;
                                                                        var _term$27 = Kind$Term$ref$("Pair.new");
                                                                        var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$hol$(Bits$e));
                                                                        var _term$30 = Kind$Term$app$(_term$29, $2416);
                                                                        var _term$31 = Kind$Term$app$(_term$30, $2431);
                                                                        var $2454 = Parser$Reply$value$($2451, $2452, Kind$Term$ori$($2453, _term$31));
                                                                        var $2446 = $2454;
                                                                        break;
                                                                };
                                                                var $2439 = $2446;
                                                                break;
                                                        };
                                                        var $2432 = $2439;
                                                        break;
                                                };
                                                var $2424 = $2432;
                                                break;
                                        };
                                        var $2417 = $2424;
                                        break;
                                };
                                var $2409 = $2417;
                                break;
                        };
                        var $2402 = $2409;
                        break;
                };
                var $2394 = $2402;
                break;
        };
        return $2394;
    };
    const Kind$Parser$pair = x0 => x1 => Kind$Parser$pair$(x0, x1);

    function Kind$Parser$sigma$type$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2456 = self.idx;
                var $2457 = self.code;
                var $2458 = self.err;
                var $2459 = Parser$Reply$error$($2456, $2457, $2458);
                var $2455 = $2459;
                break;
            case 'Parser.Reply.value':
                var $2460 = self.idx;
                var $2461 = self.code;
                var $2462 = self.val;
                var self = Kind$Parser$text$("[", $2460, $2461);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2464 = self.idx;
                        var $2465 = self.code;
                        var $2466 = self.err;
                        var $2467 = Parser$Reply$error$($2464, $2465, $2466);
                        var $2463 = $2467;
                        break;
                    case 'Parser.Reply.value':
                        var $2468 = self.idx;
                        var $2469 = self.code;
                        var self = Kind$Parser$name1$($2468, $2469);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2471 = self.idx;
                                var $2472 = self.code;
                                var $2473 = self.err;
                                var $2474 = Parser$Reply$error$($2471, $2472, $2473);
                                var $2470 = $2474;
                                break;
                            case 'Parser.Reply.value':
                                var $2475 = self.idx;
                                var $2476 = self.code;
                                var $2477 = self.val;
                                var self = Kind$Parser$text$(":", $2475, $2476);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2479 = self.idx;
                                        var $2480 = self.code;
                                        var $2481 = self.err;
                                        var $2482 = Parser$Reply$error$($2479, $2480, $2481);
                                        var $2478 = $2482;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2483 = self.idx;
                                        var $2484 = self.code;
                                        var self = Kind$Parser$term$($2483, $2484);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2486 = self.idx;
                                                var $2487 = self.code;
                                                var $2488 = self.err;
                                                var $2489 = Parser$Reply$error$($2486, $2487, $2488);
                                                var $2485 = $2489;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2490 = self.idx;
                                                var $2491 = self.code;
                                                var $2492 = self.val;
                                                var self = Kind$Parser$text$("]", $2490, $2491);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2494 = self.idx;
                                                        var $2495 = self.code;
                                                        var $2496 = self.err;
                                                        var $2497 = Parser$Reply$error$($2494, $2495, $2496);
                                                        var $2493 = $2497;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2498 = self.idx;
                                                        var $2499 = self.code;
                                                        var self = Kind$Parser$term$($2498, $2499);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2501 = self.idx;
                                                                var $2502 = self.code;
                                                                var $2503 = self.err;
                                                                var $2504 = Parser$Reply$error$($2501, $2502, $2503);
                                                                var $2500 = $2504;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2505 = self.idx;
                                                                var $2506 = self.code;
                                                                var $2507 = self.val;
                                                                var self = Kind$Parser$stop$($2462, $2505, $2506);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2509 = self.idx;
                                                                        var $2510 = self.code;
                                                                        var $2511 = self.err;
                                                                        var $2512 = Parser$Reply$error$($2509, $2510, $2511);
                                                                        var $2508 = $2512;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2513 = self.idx;
                                                                        var $2514 = self.code;
                                                                        var $2515 = self.val;
                                                                        var _term$27 = Kind$Term$ref$("Sigma");
                                                                        var _term$28 = Kind$Term$app$(_term$27, $2492);
                                                                        var _term$29 = Kind$Term$app$(_term$28, Kind$Term$lam$($2477, (_x$29 => {
                                                                            var $2517 = $2507;
                                                                            return $2517;
                                                                        })));
                                                                        var $2516 = Parser$Reply$value$($2513, $2514, Kind$Term$ori$($2515, _term$29));
                                                                        var $2508 = $2516;
                                                                        break;
                                                                };
                                                                var $2500 = $2508;
                                                                break;
                                                        };
                                                        var $2493 = $2500;
                                                        break;
                                                };
                                                var $2485 = $2493;
                                                break;
                                        };
                                        var $2478 = $2485;
                                        break;
                                };
                                var $2470 = $2478;
                                break;
                        };
                        var $2463 = $2470;
                        break;
                };
                var $2455 = $2463;
                break;
        };
        return $2455;
    };
    const Kind$Parser$sigma$type = x0 => x1 => Kind$Parser$sigma$type$(x0, x1);

    function Kind$Parser$some$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2519 = self.idx;
                var $2520 = self.code;
                var $2521 = self.err;
                var $2522 = Parser$Reply$error$($2519, $2520, $2521);
                var $2518 = $2522;
                break;
            case 'Parser.Reply.value':
                var $2523 = self.idx;
                var $2524 = self.code;
                var $2525 = self.val;
                var self = Kind$Parser$text$("some(", $2523, $2524);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2527 = self.idx;
                        var $2528 = self.code;
                        var $2529 = self.err;
                        var $2530 = Parser$Reply$error$($2527, $2528, $2529);
                        var $2526 = $2530;
                        break;
                    case 'Parser.Reply.value':
                        var $2531 = self.idx;
                        var $2532 = self.code;
                        var self = Kind$Parser$term$($2531, $2532);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2534 = self.idx;
                                var $2535 = self.code;
                                var $2536 = self.err;
                                var $2537 = Parser$Reply$error$($2534, $2535, $2536);
                                var $2533 = $2537;
                                break;
                            case 'Parser.Reply.value':
                                var $2538 = self.idx;
                                var $2539 = self.code;
                                var $2540 = self.val;
                                var self = Kind$Parser$text$(")", $2538, $2539);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2542 = self.idx;
                                        var $2543 = self.code;
                                        var $2544 = self.err;
                                        var $2545 = Parser$Reply$error$($2542, $2543, $2544);
                                        var $2541 = $2545;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2546 = self.idx;
                                        var $2547 = self.code;
                                        var self = Kind$Parser$stop$($2525, $2546, $2547);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2549 = self.idx;
                                                var $2550 = self.code;
                                                var $2551 = self.err;
                                                var $2552 = Parser$Reply$error$($2549, $2550, $2551);
                                                var $2548 = $2552;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2553 = self.idx;
                                                var $2554 = self.code;
                                                var $2555 = self.val;
                                                var _term$18 = Kind$Term$ref$("Maybe.some");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, $2540);
                                                var $2556 = Parser$Reply$value$($2553, $2554, Kind$Term$ori$($2555, _term$20));
                                                var $2548 = $2556;
                                                break;
                                        };
                                        var $2541 = $2548;
                                        break;
                                };
                                var $2533 = $2541;
                                break;
                        };
                        var $2526 = $2533;
                        break;
                };
                var $2518 = $2526;
                break;
        };
        return $2518;
    };
    const Kind$Parser$some = x0 => x1 => Kind$Parser$some$(x0, x1);

    function Kind$Parser$not$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2558 = self.idx;
                var $2559 = self.code;
                var $2560 = self.err;
                var $2561 = Parser$Reply$error$($2558, $2559, $2560);
                var $2557 = $2561;
                break;
            case 'Parser.Reply.value':
                var $2562 = self.idx;
                var $2563 = self.code;
                var $2564 = self.val;
                var self = Kind$Parser$text$("not(", $2562, $2563);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2566 = self.idx;
                        var $2567 = self.code;
                        var $2568 = self.err;
                        var $2569 = Parser$Reply$error$($2566, $2567, $2568);
                        var $2565 = $2569;
                        break;
                    case 'Parser.Reply.value':
                        var $2570 = self.idx;
                        var $2571 = self.code;
                        var self = Kind$Parser$term$($2570, $2571);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2573 = self.idx;
                                var $2574 = self.code;
                                var $2575 = self.err;
                                var $2576 = Parser$Reply$error$($2573, $2574, $2575);
                                var $2572 = $2576;
                                break;
                            case 'Parser.Reply.value':
                                var $2577 = self.idx;
                                var $2578 = self.code;
                                var $2579 = self.val;
                                var self = Kind$Parser$text$(")", $2577, $2578);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2581 = self.idx;
                                        var $2582 = self.code;
                                        var $2583 = self.err;
                                        var $2584 = Parser$Reply$error$($2581, $2582, $2583);
                                        var $2580 = $2584;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2585 = self.idx;
                                        var $2586 = self.code;
                                        var self = Kind$Parser$stop$($2564, $2585, $2586);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2588 = self.idx;
                                                var $2589 = self.code;
                                                var $2590 = self.err;
                                                var $2591 = Parser$Reply$error$($2588, $2589, $2590);
                                                var $2587 = $2591;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2592 = self.idx;
                                                var $2593 = self.code;
                                                var $2594 = self.val;
                                                var _term$18 = Kind$Term$ref$("Bool.not");
                                                var _term$19 = Kind$Term$app$(_term$18, $2579);
                                                var $2595 = Parser$Reply$value$($2592, $2593, Kind$Term$ori$($2594, _term$19));
                                                var $2587 = $2595;
                                                break;
                                        };
                                        var $2580 = $2587;
                                        break;
                                };
                                var $2572 = $2580;
                                break;
                        };
                        var $2565 = $2572;
                        break;
                };
                var $2557 = $2565;
                break;
        };
        return $2557;
    };
    const Kind$Parser$not = x0 => x1 => Kind$Parser$not$(x0, x1);

    function Kind$Parser$left$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2597 = self.idx;
                var $2598 = self.code;
                var $2599 = self.err;
                var $2600 = Parser$Reply$error$($2597, $2598, $2599);
                var $2596 = $2600;
                break;
            case 'Parser.Reply.value':
                var $2601 = self.idx;
                var $2602 = self.code;
                var $2603 = self.val;
                var self = Kind$Parser$text$("left(", $2601, $2602);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2605 = self.idx;
                        var $2606 = self.code;
                        var $2607 = self.err;
                        var $2608 = Parser$Reply$error$($2605, $2606, $2607);
                        var $2604 = $2608;
                        break;
                    case 'Parser.Reply.value':
                        var $2609 = self.idx;
                        var $2610 = self.code;
                        var self = Kind$Parser$term$($2609, $2610);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2612 = self.idx;
                                var $2613 = self.code;
                                var $2614 = self.err;
                                var $2615 = Parser$Reply$error$($2612, $2613, $2614);
                                var $2611 = $2615;
                                break;
                            case 'Parser.Reply.value':
                                var $2616 = self.idx;
                                var $2617 = self.code;
                                var $2618 = self.val;
                                var self = Kind$Parser$text$(")", $2616, $2617);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2620 = self.idx;
                                        var $2621 = self.code;
                                        var $2622 = self.err;
                                        var $2623 = Parser$Reply$error$($2620, $2621, $2622);
                                        var $2619 = $2623;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2624 = self.idx;
                                        var $2625 = self.code;
                                        var self = Kind$Parser$stop$($2603, $2624, $2625);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2627 = self.idx;
                                                var $2628 = self.code;
                                                var $2629 = self.err;
                                                var $2630 = Parser$Reply$error$($2627, $2628, $2629);
                                                var $2626 = $2630;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2631 = self.idx;
                                                var $2632 = self.code;
                                                var $2633 = self.val;
                                                var _term$18 = Kind$Term$ref$("Either.left");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, $2618);
                                                var $2634 = Parser$Reply$value$($2631, $2632, Kind$Term$ori$($2633, _term$21));
                                                var $2626 = $2634;
                                                break;
                                        };
                                        var $2619 = $2626;
                                        break;
                                };
                                var $2611 = $2619;
                                break;
                        };
                        var $2604 = $2611;
                        break;
                };
                var $2596 = $2604;
                break;
        };
        return $2596;
    };
    const Kind$Parser$left = x0 => x1 => Kind$Parser$left$(x0, x1);

    function Kind$Parser$right$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2636 = self.idx;
                var $2637 = self.code;
                var $2638 = self.err;
                var $2639 = Parser$Reply$error$($2636, $2637, $2638);
                var $2635 = $2639;
                break;
            case 'Parser.Reply.value':
                var $2640 = self.idx;
                var $2641 = self.code;
                var $2642 = self.val;
                var self = Kind$Parser$text$("right(", $2640, $2641);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2644 = self.idx;
                        var $2645 = self.code;
                        var $2646 = self.err;
                        var $2647 = Parser$Reply$error$($2644, $2645, $2646);
                        var $2643 = $2647;
                        break;
                    case 'Parser.Reply.value':
                        var $2648 = self.idx;
                        var $2649 = self.code;
                        var self = Kind$Parser$term$($2648, $2649);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2651 = self.idx;
                                var $2652 = self.code;
                                var $2653 = self.err;
                                var $2654 = Parser$Reply$error$($2651, $2652, $2653);
                                var $2650 = $2654;
                                break;
                            case 'Parser.Reply.value':
                                var $2655 = self.idx;
                                var $2656 = self.code;
                                var $2657 = self.val;
                                var self = Kind$Parser$text$(")", $2655, $2656);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2659 = self.idx;
                                        var $2660 = self.code;
                                        var $2661 = self.err;
                                        var $2662 = Parser$Reply$error$($2659, $2660, $2661);
                                        var $2658 = $2662;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2663 = self.idx;
                                        var $2664 = self.code;
                                        var self = Kind$Parser$stop$($2642, $2663, $2664);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2666 = self.idx;
                                                var $2667 = self.code;
                                                var $2668 = self.err;
                                                var $2669 = Parser$Reply$error$($2666, $2667, $2668);
                                                var $2665 = $2669;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2670 = self.idx;
                                                var $2671 = self.code;
                                                var $2672 = self.val;
                                                var _term$18 = Kind$Term$ref$("Either.right");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, $2657);
                                                var $2673 = Parser$Reply$value$($2670, $2671, Kind$Term$ori$($2672, _term$21));
                                                var $2665 = $2673;
                                                break;
                                        };
                                        var $2658 = $2665;
                                        break;
                                };
                                var $2650 = $2658;
                                break;
                        };
                        var $2643 = $2650;
                        break;
                };
                var $2635 = $2643;
                break;
        };
        return $2635;
    };
    const Kind$Parser$right = x0 => x1 => Kind$Parser$right$(x0, x1);

    function Kind$Parser$apply$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2675 = self.idx;
                var $2676 = self.code;
                var $2677 = self.err;
                var $2678 = Parser$Reply$error$($2675, $2676, $2677);
                var $2674 = $2678;
                break;
            case 'Parser.Reply.value':
                var $2679 = self.idx;
                var $2680 = self.code;
                var $2681 = self.val;
                var self = Kind$Parser$text$("apply(", $2679, $2680);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2683 = self.idx;
                        var $2684 = self.code;
                        var $2685 = self.err;
                        var $2686 = Parser$Reply$error$($2683, $2684, $2685);
                        var $2682 = $2686;
                        break;
                    case 'Parser.Reply.value':
                        var $2687 = self.idx;
                        var $2688 = self.code;
                        var self = Kind$Parser$term$($2687, $2688);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2690 = self.idx;
                                var $2691 = self.code;
                                var $2692 = self.err;
                                var $2693 = Parser$Reply$error$($2690, $2691, $2692);
                                var $2689 = $2693;
                                break;
                            case 'Parser.Reply.value':
                                var $2694 = self.idx;
                                var $2695 = self.code;
                                var $2696 = self.val;
                                var self = Kind$Parser$text$(",", $2694, $2695);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2698 = self.idx;
                                        var $2699 = self.code;
                                        var $2700 = self.err;
                                        var $2701 = Parser$Reply$error$($2698, $2699, $2700);
                                        var $2697 = $2701;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2702 = self.idx;
                                        var $2703 = self.code;
                                        var self = Kind$Parser$term$($2702, $2703);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2705 = self.idx;
                                                var $2706 = self.code;
                                                var $2707 = self.err;
                                                var $2708 = Parser$Reply$error$($2705, $2706, $2707);
                                                var $2704 = $2708;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2709 = self.idx;
                                                var $2710 = self.code;
                                                var $2711 = self.val;
                                                var self = Kind$Parser$text$(")", $2709, $2710);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2713 = self.idx;
                                                        var $2714 = self.code;
                                                        var $2715 = self.err;
                                                        var $2716 = Parser$Reply$error$($2713, $2714, $2715);
                                                        var $2712 = $2716;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2717 = self.idx;
                                                        var $2718 = self.code;
                                                        var self = Kind$Parser$stop$($2681, $2717, $2718);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2720 = self.idx;
                                                                var $2721 = self.code;
                                                                var $2722 = self.err;
                                                                var $2723 = Parser$Reply$error$($2720, $2721, $2722);
                                                                var $2719 = $2723;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2724 = self.idx;
                                                                var $2725 = self.code;
                                                                var $2726 = self.val;
                                                                var _term$24 = Kind$Term$ref$("Equal.apply");
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));
                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                var _term$29 = Kind$Term$app$(_term$28, $2696);
                                                                var _term$30 = Kind$Term$app$(_term$29, $2711);
                                                                var $2727 = Parser$Reply$value$($2724, $2725, Kind$Term$ori$($2726, _term$30));
                                                                var $2719 = $2727;
                                                                break;
                                                        };
                                                        var $2712 = $2719;
                                                        break;
                                                };
                                                var $2704 = $2712;
                                                break;
                                        };
                                        var $2697 = $2704;
                                        break;
                                };
                                var $2689 = $2697;
                                break;
                        };
                        var $2682 = $2689;
                        break;
                };
                var $2674 = $2682;
                break;
        };
        return $2674;
    };
    const Kind$Parser$apply = x0 => x1 => Kind$Parser$apply$(x0, x1);

    function Kind$Parser$chain$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2729 = self.idx;
                var $2730 = self.code;
                var $2731 = self.err;
                var $2732 = Parser$Reply$error$($2729, $2730, $2731);
                var $2728 = $2732;
                break;
            case 'Parser.Reply.value':
                var $2733 = self.idx;
                var $2734 = self.code;
                var $2735 = self.val;
                var self = Kind$Parser$text$("chain(", $2733, $2734);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2737 = self.idx;
                        var $2738 = self.code;
                        var $2739 = self.err;
                        var $2740 = Parser$Reply$error$($2737, $2738, $2739);
                        var $2736 = $2740;
                        break;
                    case 'Parser.Reply.value':
                        var $2741 = self.idx;
                        var $2742 = self.code;
                        var self = Kind$Parser$term$($2741, $2742);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2744 = self.idx;
                                var $2745 = self.code;
                                var $2746 = self.err;
                                var $2747 = Parser$Reply$error$($2744, $2745, $2746);
                                var $2743 = $2747;
                                break;
                            case 'Parser.Reply.value':
                                var $2748 = self.idx;
                                var $2749 = self.code;
                                var $2750 = self.val;
                                var self = Kind$Parser$text$(",", $2748, $2749);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2752 = self.idx;
                                        var $2753 = self.code;
                                        var $2754 = self.err;
                                        var $2755 = Parser$Reply$error$($2752, $2753, $2754);
                                        var $2751 = $2755;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2756 = self.idx;
                                        var $2757 = self.code;
                                        var self = Kind$Parser$term$($2756, $2757);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2759 = self.idx;
                                                var $2760 = self.code;
                                                var $2761 = self.err;
                                                var $2762 = Parser$Reply$error$($2759, $2760, $2761);
                                                var $2758 = $2762;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2763 = self.idx;
                                                var $2764 = self.code;
                                                var $2765 = self.val;
                                                var self = Kind$Parser$text$(")", $2763, $2764);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2767 = self.idx;
                                                        var $2768 = self.code;
                                                        var $2769 = self.err;
                                                        var $2770 = Parser$Reply$error$($2767, $2768, $2769);
                                                        var $2766 = $2770;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2771 = self.idx;
                                                        var $2772 = self.code;
                                                        var self = Kind$Parser$stop$($2735, $2771, $2772);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2774 = self.idx;
                                                                var $2775 = self.code;
                                                                var $2776 = self.err;
                                                                var $2777 = Parser$Reply$error$($2774, $2775, $2776);
                                                                var $2773 = $2777;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2778 = self.idx;
                                                                var $2779 = self.code;
                                                                var $2780 = self.val;
                                                                var _term$24 = Kind$Term$ref$("Equal.chain");
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                                var _term$26 = Kind$Term$app$(_term$25, Kind$Term$hol$(Bits$e));
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$hol$(Bits$e));
                                                                var _term$28 = Kind$Term$app$(_term$27, Kind$Term$hol$(Bits$e));
                                                                var _term$29 = Kind$Term$app$(_term$28, $2750);
                                                                var _term$30 = Kind$Term$app$(_term$29, $2765);
                                                                var $2781 = Parser$Reply$value$($2778, $2779, Kind$Term$ori$($2780, _term$30));
                                                                var $2773 = $2781;
                                                                break;
                                                        };
                                                        var $2766 = $2773;
                                                        break;
                                                };
                                                var $2758 = $2766;
                                                break;
                                        };
                                        var $2751 = $2758;
                                        break;
                                };
                                var $2743 = $2751;
                                break;
                        };
                        var $2736 = $2743;
                        break;
                };
                var $2728 = $2736;
                break;
        };
        return $2728;
    };
    const Kind$Parser$chain = x0 => x1 => Kind$Parser$chain$(x0, x1);

    function Kind$Parser$mirror$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2783 = self.idx;
                var $2784 = self.code;
                var $2785 = self.err;
                var $2786 = Parser$Reply$error$($2783, $2784, $2785);
                var $2782 = $2786;
                break;
            case 'Parser.Reply.value':
                var $2787 = self.idx;
                var $2788 = self.code;
                var $2789 = self.val;
                var self = Kind$Parser$text$("mirror(", $2787, $2788);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2791 = self.idx;
                        var $2792 = self.code;
                        var $2793 = self.err;
                        var $2794 = Parser$Reply$error$($2791, $2792, $2793);
                        var $2790 = $2794;
                        break;
                    case 'Parser.Reply.value':
                        var $2795 = self.idx;
                        var $2796 = self.code;
                        var self = Kind$Parser$term$($2795, $2796);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2798 = self.idx;
                                var $2799 = self.code;
                                var $2800 = self.err;
                                var $2801 = Parser$Reply$error$($2798, $2799, $2800);
                                var $2797 = $2801;
                                break;
                            case 'Parser.Reply.value':
                                var $2802 = self.idx;
                                var $2803 = self.code;
                                var $2804 = self.val;
                                var self = Kind$Parser$text$(")", $2802, $2803);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2806 = self.idx;
                                        var $2807 = self.code;
                                        var $2808 = self.err;
                                        var $2809 = Parser$Reply$error$($2806, $2807, $2808);
                                        var $2805 = $2809;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2810 = self.idx;
                                        var $2811 = self.code;
                                        var self = Kind$Parser$stop$($2789, $2810, $2811);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2813 = self.idx;
                                                var $2814 = self.code;
                                                var $2815 = self.err;
                                                var $2816 = Parser$Reply$error$($2813, $2814, $2815);
                                                var $2812 = $2816;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2817 = self.idx;
                                                var $2818 = self.code;
                                                var $2819 = self.val;
                                                var _term$18 = Kind$Term$ref$("Equal.mirror");
                                                var _term$19 = Kind$Term$app$(_term$18, Kind$Term$hol$(Bits$e));
                                                var _term$20 = Kind$Term$app$(_term$19, Kind$Term$hol$(Bits$e));
                                                var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                var _term$22 = Kind$Term$app$(_term$21, $2804);
                                                var $2820 = Parser$Reply$value$($2817, $2818, Kind$Term$ori$($2819, _term$22));
                                                var $2812 = $2820;
                                                break;
                                        };
                                        var $2805 = $2812;
                                        break;
                                };
                                var $2797 = $2805;
                                break;
                        };
                        var $2790 = $2797;
                        break;
                };
                var $2782 = $2790;
                break;
        };
        return $2782;
    };
    const Kind$Parser$mirror = x0 => x1 => Kind$Parser$mirror$(x0, x1);

    function Kind$Name$read$(_str$1) {
        var $2821 = _str$1;
        return $2821;
    };
    const Kind$Name$read = x0 => Kind$Name$read$(x0);

    function Kind$Parser$list$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2823 = self.idx;
                var $2824 = self.code;
                var $2825 = self.err;
                var $2826 = Parser$Reply$error$($2823, $2824, $2825);
                var $2822 = $2826;
                break;
            case 'Parser.Reply.value':
                var $2827 = self.idx;
                var $2828 = self.code;
                var $2829 = self.val;
                var self = Kind$Parser$text$("[", $2827, $2828);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2831 = self.idx;
                        var $2832 = self.code;
                        var $2833 = self.err;
                        var $2834 = Parser$Reply$error$($2831, $2832, $2833);
                        var $2830 = $2834;
                        break;
                    case 'Parser.Reply.value':
                        var $2835 = self.idx;
                        var $2836 = self.code;
                        var self = Parser$until$(Kind$Parser$text("]"), Kind$Parser$item(Kind$Parser$term))($2835)($2836);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2838 = self.idx;
                                var $2839 = self.code;
                                var $2840 = self.err;
                                var $2841 = Parser$Reply$error$($2838, $2839, $2840);
                                var $2837 = $2841;
                                break;
                            case 'Parser.Reply.value':
                                var $2842 = self.idx;
                                var $2843 = self.code;
                                var $2844 = self.val;
                                var self = Kind$Parser$stop$($2829, $2842, $2843);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2846 = self.idx;
                                        var $2847 = self.code;
                                        var $2848 = self.err;
                                        var $2849 = Parser$Reply$error$($2846, $2847, $2848);
                                        var $2845 = $2849;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2850 = self.idx;
                                        var $2851 = self.code;
                                        var $2852 = self.val;
                                        var $2853 = Parser$Reply$value$($2850, $2851, List$fold$($2844, Kind$Term$ori$($2852, Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("List.nil")), Kind$Term$hol$(Bits$e))), (_x$15 => _xs$16 => {
                                            var _term$17 = Kind$Term$ref$(Kind$Name$read$("List.cons"));
                                            var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                            var _term$19 = Kind$Term$app$(_term$18, _x$15);
                                            var _term$20 = Kind$Term$app$(_term$19, _xs$16);
                                            var $2854 = Kind$Term$ori$($2852, _term$20);
                                            return $2854;
                                        })));
                                        var $2845 = $2853;
                                        break;
                                };
                                var $2837 = $2845;
                                break;
                        };
                        var $2830 = $2837;
                        break;
                };
                var $2822 = $2830;
                break;
        };
        return $2822;
    };
    const Kind$Parser$list = x0 => x1 => Kind$Parser$list$(x0, x1);

    function Kind$Parser$map$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2856 = self.idx;
                var $2857 = self.code;
                var $2858 = self.err;
                var $2859 = Parser$Reply$error$($2856, $2857, $2858);
                var $2855 = $2859;
                break;
            case 'Parser.Reply.value':
                var $2860 = self.idx;
                var $2861 = self.code;
                var $2862 = self.val;
                var self = Kind$Parser$text$("{", $2860, $2861);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2864 = self.idx;
                        var $2865 = self.code;
                        var $2866 = self.err;
                        var $2867 = Parser$Reply$error$($2864, $2865, $2866);
                        var $2863 = $2867;
                        break;
                    case 'Parser.Reply.value':
                        var $2868 = self.idx;
                        var $2869 = self.code;
                        var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$item((_idx$9 => _code$10 => {
                            var self = Kind$Parser$term$(_idx$9, _code$10);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2872 = self.idx;
                                    var $2873 = self.code;
                                    var $2874 = self.err;
                                    var $2875 = Parser$Reply$error$($2872, $2873, $2874);
                                    var $2871 = $2875;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2876 = self.idx;
                                    var $2877 = self.code;
                                    var $2878 = self.val;
                                    var self = Kind$Parser$text$(":", $2876, $2877);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2880 = self.idx;
                                            var $2881 = self.code;
                                            var $2882 = self.err;
                                            var $2883 = Parser$Reply$error$($2880, $2881, $2882);
                                            var $2879 = $2883;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2884 = self.idx;
                                            var $2885 = self.code;
                                            var self = Kind$Parser$term$($2884, $2885);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2887 = self.idx;
                                                    var $2888 = self.code;
                                                    var $2889 = self.err;
                                                    var $2890 = Parser$Reply$error$($2887, $2888, $2889);
                                                    var $2886 = $2890;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2891 = self.idx;
                                                    var $2892 = self.code;
                                                    var $2893 = self.val;
                                                    var $2894 = Parser$Reply$value$($2891, $2892, Pair$new$($2878, $2893));
                                                    var $2886 = $2894;
                                                    break;
                                            };
                                            var $2879 = $2886;
                                            break;
                                    };
                                    var $2871 = $2879;
                                    break;
                            };
                            return $2871;
                        })))($2868)($2869);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2895 = self.idx;
                                var $2896 = self.code;
                                var $2897 = self.err;
                                var $2898 = Parser$Reply$error$($2895, $2896, $2897);
                                var $2870 = $2898;
                                break;
                            case 'Parser.Reply.value':
                                var $2899 = self.idx;
                                var $2900 = self.code;
                                var $2901 = self.val;
                                var self = Kind$Parser$stop$($2862, $2899, $2900);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2903 = self.idx;
                                        var $2904 = self.code;
                                        var $2905 = self.err;
                                        var $2906 = Parser$Reply$error$($2903, $2904, $2905);
                                        var $2902 = $2906;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2907 = self.idx;
                                        var $2908 = self.code;
                                        var $2909 = self.val;
                                        var _list$15 = List$fold$($2901, Kind$Term$ori$($2909, Kind$Term$app$(Kind$Term$ref$("List.nil"), Kind$Term$hol$(Bits$e))), (_kv$15 => _xs$16 => {
                                            var self = _kv$15;
                                            switch (self._) {
                                                case 'Pair.new':
                                                    var $2912 = self.fst;
                                                    var $2913 = self.snd;
                                                    var _pair$19 = Kind$Term$ref$("Pair.new");
                                                    var _pair$20 = Kind$Term$app$(_pair$19, Kind$Term$hol$(Bits$e));
                                                    var _pair$21 = Kind$Term$app$(_pair$20, Kind$Term$hol$(Bits$e));
                                                    var _pair$22 = Kind$Term$app$(_pair$21, $2912);
                                                    var _pair$23 = Kind$Term$app$(_pair$22, $2913);
                                                    var _term$24 = Kind$Term$ref$("List.cons");
                                                    var _term$25 = Kind$Term$app$(_term$24, Kind$Term$hol$(Bits$e));
                                                    var _term$26 = Kind$Term$app$(_term$25, _pair$23);
                                                    var _term$27 = Kind$Term$app$(_term$26, _xs$16);
                                                    var $2914 = Kind$Term$ori$($2909, _term$27);
                                                    var $2911 = $2914;
                                                    break;
                                            };
                                            return $2911;
                                        }));
                                        var _term$16 = Kind$Term$ref$("Map.from_list");
                                        var _term$17 = Kind$Term$app$(_term$16, Kind$Term$hol$(Bits$e));
                                        var _term$18 = Kind$Term$app$(_term$17, _list$15);
                                        var $2910 = Parser$Reply$value$($2907, $2908, Kind$Term$ori$($2909, _term$18));
                                        var $2902 = $2910;
                                        break;
                                };
                                var $2870 = $2902;
                                break;
                        };
                        var $2863 = $2870;
                        break;
                };
                var $2855 = $2863;
                break;
        };
        return $2855;
    };
    const Kind$Parser$map = x0 => x1 => Kind$Parser$map$(x0, x1);

    function Kind$Parser$log$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2916 = self.idx;
                var $2917 = self.code;
                var $2918 = self.err;
                var $2919 = Parser$Reply$error$($2916, $2917, $2918);
                var $2915 = $2919;
                break;
            case 'Parser.Reply.value':
                var $2920 = self.idx;
                var $2921 = self.code;
                var $2922 = self.val;
                var self = Kind$Parser$text$("log(", $2920, $2921);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2924 = self.idx;
                        var $2925 = self.code;
                        var $2926 = self.err;
                        var $2927 = Parser$Reply$error$($2924, $2925, $2926);
                        var $2923 = $2927;
                        break;
                    case 'Parser.Reply.value':
                        var $2928 = self.idx;
                        var $2929 = self.code;
                        var self = Parser$until$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$term))($2928)($2929);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2931 = self.idx;
                                var $2932 = self.code;
                                var $2933 = self.err;
                                var $2934 = Parser$Reply$error$($2931, $2932, $2933);
                                var $2930 = $2934;
                                break;
                            case 'Parser.Reply.value':
                                var $2935 = self.idx;
                                var $2936 = self.code;
                                var $2937 = self.val;
                                var self = Kind$Parser$term$($2935, $2936);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2939 = self.idx;
                                        var $2940 = self.code;
                                        var $2941 = self.err;
                                        var $2942 = Parser$Reply$error$($2939, $2940, $2941);
                                        var $2938 = $2942;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2943 = self.idx;
                                        var $2944 = self.code;
                                        var $2945 = self.val;
                                        var _term$15 = Kind$Term$ref$("Debug.log");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));
                                        var _args$17 = List$fold$($2937, Kind$Term$ref$("String.nil"), (_x$17 => _xs$18 => {
                                            var _arg$19 = Kind$Term$ref$("String.concat");
                                            var _arg$20 = Kind$Term$app$(_arg$19, _x$17);
                                            var _arg$21 = Kind$Term$app$(_arg$20, _xs$18);
                                            var $2947 = _arg$21;
                                            return $2947;
                                        }));
                                        var _term$18 = Kind$Term$app$(_term$16, _args$17);
                                        var _term$19 = Kind$Term$app$(_term$18, Kind$Term$lam$("x", (_x$19 => {
                                            var $2948 = $2945;
                                            return $2948;
                                        })));
                                        var self = Kind$Parser$stop$($2922, $2943, $2944);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2949 = self.idx;
                                                var $2950 = self.code;
                                                var $2951 = self.err;
                                                var $2952 = Parser$Reply$error$($2949, $2950, $2951);
                                                var $2946 = $2952;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2953 = self.idx;
                                                var $2954 = self.code;
                                                var $2955 = self.val;
                                                var $2956 = Parser$Reply$value$($2953, $2954, Kind$Term$ori$($2955, _term$19));
                                                var $2946 = $2956;
                                                break;
                                        };
                                        var $2938 = $2946;
                                        break;
                                };
                                var $2930 = $2938;
                                break;
                        };
                        var $2923 = $2930;
                        break;
                };
                var $2915 = $2923;
                break;
        };
        return $2915;
    };
    const Kind$Parser$log = x0 => x1 => Kind$Parser$log$(x0, x1);

    function Kind$Parser$do$statements$(_monad_name$1) {
        var $2957 = Parser$first_of$(List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2959 = self.idx;
                    var $2960 = self.code;
                    var $2961 = self.err;
                    var $2962 = Parser$Reply$error$($2959, $2960, $2961);
                    var $2958 = $2962;
                    break;
                case 'Parser.Reply.value':
                    var $2963 = self.idx;
                    var $2964 = self.code;
                    var $2965 = self.val;
                    var self = Parser$first_of$(List$cons$(Kind$Parser$text("var "), List$cons$(Kind$Parser$text("get "), List$nil)))($2963)($2964);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2967 = self.idx;
                            var $2968 = self.code;
                            var $2969 = self.err;
                            var $2970 = Parser$Reply$error$($2967, $2968, $2969);
                            var $2966 = $2970;
                            break;
                        case 'Parser.Reply.value':
                            var $2971 = self.idx;
                            var $2972 = self.code;
                            var self = Kind$Parser$name1$($2971, $2972);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2974 = self.idx;
                                    var $2975 = self.code;
                                    var $2976 = self.err;
                                    var $2977 = Parser$Reply$error$($2974, $2975, $2976);
                                    var $2973 = $2977;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2978 = self.idx;
                                    var $2979 = self.code;
                                    var $2980 = self.val;
                                    var self = Kind$Parser$text$("=", $2978, $2979);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2982 = self.idx;
                                            var $2983 = self.code;
                                            var $2984 = self.err;
                                            var $2985 = Parser$Reply$error$($2982, $2983, $2984);
                                            var $2981 = $2985;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2986 = self.idx;
                                            var $2987 = self.code;
                                            var self = Kind$Parser$term$($2986, $2987);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2989 = self.idx;
                                                    var $2990 = self.code;
                                                    var $2991 = self.err;
                                                    var $2992 = Parser$Reply$error$($2989, $2990, $2991);
                                                    var $2988 = $2992;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2993 = self.idx;
                                                    var $2994 = self.code;
                                                    var $2995 = self.val;
                                                    var self = Parser$maybe$(Kind$Parser$text(";"), $2993, $2994);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $2997 = self.idx;
                                                            var $2998 = self.code;
                                                            var $2999 = self.err;
                                                            var $3000 = Parser$Reply$error$($2997, $2998, $2999);
                                                            var $2996 = $3000;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $3001 = self.idx;
                                                            var $3002 = self.code;
                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($3001)($3002);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $3004 = self.idx;
                                                                    var $3005 = self.code;
                                                                    var $3006 = self.err;
                                                                    var $3007 = Parser$Reply$error$($3004, $3005, $3006);
                                                                    var $3003 = $3007;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $3008 = self.idx;
                                                                    var $3009 = self.code;
                                                                    var $3010 = self.val;
                                                                    var self = Kind$Parser$stop$($2965, $3008, $3009);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3012 = self.idx;
                                                                            var $3013 = self.code;
                                                                            var $3014 = self.err;
                                                                            var $3015 = Parser$Reply$error$($3012, $3013, $3014);
                                                                            var $3011 = $3015;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3016 = self.idx;
                                                                            var $3017 = self.code;
                                                                            var $3018 = self.val;
                                                                            var _term$28 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"), Kind$Term$ref$(_monad_name$1));
                                                                            var _term$29 = Kind$Term$app$(_term$28, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                                            var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));
                                                                            var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));
                                                                            var _term$32 = Kind$Term$app$(_term$31, $2995);
                                                                            var _term$33 = Kind$Term$app$(_term$32, Kind$Term$lam$($2980, (_x$33 => {
                                                                                var $3020 = $3010;
                                                                                return $3020;
                                                                            })));
                                                                            var $3019 = Parser$Reply$value$($3016, $3017, Kind$Term$ori$($3018, _term$33));
                                                                            var $3011 = $3019;
                                                                            break;
                                                                    };
                                                                    var $3003 = $3011;
                                                                    break;
                                                            };
                                                            var $2996 = $3003;
                                                            break;
                                                    };
                                                    var $2988 = $2996;
                                                    break;
                                            };
                                            var $2981 = $2988;
                                            break;
                                    };
                                    var $2973 = $2981;
                                    break;
                            };
                            var $2966 = $2973;
                            break;
                    };
                    var $2958 = $2966;
                    break;
            };
            return $2958;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3022 = self.idx;
                    var $3023 = self.code;
                    var $3024 = self.err;
                    var $3025 = Parser$Reply$error$($3022, $3023, $3024);
                    var $3021 = $3025;
                    break;
                case 'Parser.Reply.value':
                    var $3026 = self.idx;
                    var $3027 = self.code;
                    var $3028 = self.val;
                    var self = Kind$Parser$text$("let ", $3026, $3027);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3030 = self.idx;
                            var $3031 = self.code;
                            var $3032 = self.err;
                            var $3033 = Parser$Reply$error$($3030, $3031, $3032);
                            var $3029 = $3033;
                            break;
                        case 'Parser.Reply.value':
                            var $3034 = self.idx;
                            var $3035 = self.code;
                            var self = Kind$Parser$name1$($3034, $3035);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3037 = self.idx;
                                    var $3038 = self.code;
                                    var $3039 = self.err;
                                    var $3040 = Parser$Reply$error$($3037, $3038, $3039);
                                    var $3036 = $3040;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3041 = self.idx;
                                    var $3042 = self.code;
                                    var $3043 = self.val;
                                    var self = Kind$Parser$text$("=", $3041, $3042);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3045 = self.idx;
                                            var $3046 = self.code;
                                            var $3047 = self.err;
                                            var $3048 = Parser$Reply$error$($3045, $3046, $3047);
                                            var $3044 = $3048;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3049 = self.idx;
                                            var $3050 = self.code;
                                            var self = Kind$Parser$term$($3049, $3050);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3052 = self.idx;
                                                    var $3053 = self.code;
                                                    var $3054 = self.err;
                                                    var $3055 = Parser$Reply$error$($3052, $3053, $3054);
                                                    var $3051 = $3055;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3056 = self.idx;
                                                    var $3057 = self.code;
                                                    var $3058 = self.val;
                                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3056, $3057);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $3060 = self.idx;
                                                            var $3061 = self.code;
                                                            var $3062 = self.err;
                                                            var $3063 = Parser$Reply$error$($3060, $3061, $3062);
                                                            var $3059 = $3063;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $3064 = self.idx;
                                                            var $3065 = self.code;
                                                            var self = Kind$Parser$do$statements$(_monad_name$1)($3064)($3065);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $3067 = self.idx;
                                                                    var $3068 = self.code;
                                                                    var $3069 = self.err;
                                                                    var $3070 = Parser$Reply$error$($3067, $3068, $3069);
                                                                    var $3066 = $3070;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $3071 = self.idx;
                                                                    var $3072 = self.code;
                                                                    var $3073 = self.val;
                                                                    var self = Kind$Parser$stop$($3028, $3071, $3072);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3075 = self.idx;
                                                                            var $3076 = self.code;
                                                                            var $3077 = self.err;
                                                                            var $3078 = Parser$Reply$error$($3075, $3076, $3077);
                                                                            var $3074 = $3078;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3079 = self.idx;
                                                                            var $3080 = self.code;
                                                                            var $3081 = self.val;
                                                                            var $3082 = Parser$Reply$value$($3079, $3080, Kind$Term$ori$($3081, Kind$Term$let$($3043, $3058, (_x$28 => {
                                                                                var $3083 = $3073;
                                                                                return $3083;
                                                                            }))));
                                                                            var $3074 = $3082;
                                                                            break;
                                                                    };
                                                                    var $3066 = $3074;
                                                                    break;
                                                            };
                                                            var $3059 = $3066;
                                                            break;
                                                    };
                                                    var $3051 = $3059;
                                                    break;
                                            };
                                            var $3044 = $3051;
                                            break;
                                    };
                                    var $3036 = $3044;
                                    break;
                            };
                            var $3029 = $3036;
                            break;
                    };
                    var $3021 = $3029;
                    break;
            };
            return $3021;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3085 = self.idx;
                    var $3086 = self.code;
                    var $3087 = self.err;
                    var $3088 = Parser$Reply$error$($3085, $3086, $3087);
                    var $3084 = $3088;
                    break;
                case 'Parser.Reply.value':
                    var $3089 = self.idx;
                    var $3090 = self.code;
                    var $3091 = self.val;
                    var self = Kind$Parser$text$("return ", $3089, $3090);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3093 = self.idx;
                            var $3094 = self.code;
                            var $3095 = self.err;
                            var $3096 = Parser$Reply$error$($3093, $3094, $3095);
                            var $3092 = $3096;
                            break;
                        case 'Parser.Reply.value':
                            var $3097 = self.idx;
                            var $3098 = self.code;
                            var self = Kind$Parser$term$($3097, $3098);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3100 = self.idx;
                                    var $3101 = self.code;
                                    var $3102 = self.err;
                                    var $3103 = Parser$Reply$error$($3100, $3101, $3102);
                                    var $3099 = $3103;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3104 = self.idx;
                                    var $3105 = self.code;
                                    var $3106 = self.val;
                                    var self = Parser$maybe$(Kind$Parser$text(";"), $3104, $3105);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3108 = self.idx;
                                            var $3109 = self.code;
                                            var $3110 = self.err;
                                            var $3111 = Parser$Reply$error$($3108, $3109, $3110);
                                            var $3107 = $3111;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3112 = self.idx;
                                            var $3113 = self.code;
                                            var self = Kind$Parser$stop$($3091, $3112, $3113);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3115 = self.idx;
                                                    var $3116 = self.code;
                                                    var $3117 = self.err;
                                                    var $3118 = Parser$Reply$error$($3115, $3116, $3117);
                                                    var $3114 = $3118;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3119 = self.idx;
                                                    var $3120 = self.code;
                                                    var $3121 = self.val;
                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.pure"), Kind$Term$ref$(_monad_name$1));
                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                    var _term$22 = Kind$Term$app$(_term$21, $3106);
                                                    var $3122 = Parser$Reply$value$($3119, $3120, Kind$Term$ori$($3121, _term$22));
                                                    var $3114 = $3122;
                                                    break;
                                            };
                                            var $3107 = $3114;
                                            break;
                                    };
                                    var $3099 = $3107;
                                    break;
                            };
                            var $3092 = $3099;
                            break;
                    };
                    var $3084 = $3092;
                    break;
            };
            return $3084;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3124 = self.idx;
                    var $3125 = self.code;
                    var $3126 = self.err;
                    var $3127 = Parser$Reply$error$($3124, $3125, $3126);
                    var $3123 = $3127;
                    break;
                case 'Parser.Reply.value':
                    var $3128 = self.idx;
                    var $3129 = self.code;
                    var $3130 = self.val;
                    var self = Kind$Parser$term$($3128, $3129);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3132 = self.idx;
                            var $3133 = self.code;
                            var $3134 = self.err;
                            var $3135 = Parser$Reply$error$($3132, $3133, $3134);
                            var $3131 = $3135;
                            break;
                        case 'Parser.Reply.value':
                            var $3136 = self.idx;
                            var $3137 = self.code;
                            var $3138 = self.val;
                            var self = Parser$maybe$(Kind$Parser$text(";"), $3136, $3137);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3140 = self.idx;
                                    var $3141 = self.code;
                                    var $3142 = self.err;
                                    var $3143 = Parser$Reply$error$($3140, $3141, $3142);
                                    var $3139 = $3143;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3144 = self.idx;
                                    var $3145 = self.code;
                                    var self = Kind$Parser$do$statements$(_monad_name$1)($3144)($3145);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3147 = self.idx;
                                            var $3148 = self.code;
                                            var $3149 = self.err;
                                            var $3150 = Parser$Reply$error$($3147, $3148, $3149);
                                            var $3146 = $3150;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3151 = self.idx;
                                            var $3152 = self.code;
                                            var $3153 = self.val;
                                            var self = Kind$Parser$stop$($3130, $3151, $3152);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3155 = self.idx;
                                                    var $3156 = self.code;
                                                    var $3157 = self.err;
                                                    var $3158 = Parser$Reply$error$($3155, $3156, $3157);
                                                    var $3154 = $3158;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3159 = self.idx;
                                                    var $3160 = self.code;
                                                    var $3161 = self.val;
                                                    var _term$19 = Kind$Term$app$(Kind$Term$ref$("Monad.bind"), Kind$Term$ref$(_monad_name$1));
                                                    var _term$20 = Kind$Term$app$(_term$19, Kind$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Kind$Term$app$(_term$20, Kind$Term$hol$(Bits$e));
                                                    var _term$22 = Kind$Term$app$(_term$21, Kind$Term$hol$(Bits$e));
                                                    var _term$23 = Kind$Term$app$(_term$22, $3138);
                                                    var _term$24 = Kind$Term$app$(_term$23, Kind$Term$lam$("", (_x$24 => {
                                                        var $3163 = $3153;
                                                        return $3163;
                                                    })));
                                                    var $3162 = Parser$Reply$value$($3159, $3160, Kind$Term$ori$($3161, _term$24));
                                                    var $3154 = $3162;
                                                    break;
                                            };
                                            var $3146 = $3154;
                                            break;
                                    };
                                    var $3139 = $3146;
                                    break;
                            };
                            var $3131 = $3139;
                            break;
                    };
                    var $3123 = $3131;
                    break;
            };
            return $3123;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Kind$Parser$term$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $3165 = self.idx;
                    var $3166 = self.code;
                    var $3167 = self.err;
                    var $3168 = Parser$Reply$error$($3165, $3166, $3167);
                    var $3164 = $3168;
                    break;
                case 'Parser.Reply.value':
                    var $3169 = self.idx;
                    var $3170 = self.code;
                    var $3171 = self.val;
                    var self = Parser$maybe$(Kind$Parser$text(";"), $3169, $3170);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3173 = self.idx;
                            var $3174 = self.code;
                            var $3175 = self.err;
                            var $3176 = Parser$Reply$error$($3173, $3174, $3175);
                            var $3172 = $3176;
                            break;
                        case 'Parser.Reply.value':
                            var $3177 = self.idx;
                            var $3178 = self.code;
                            var $3179 = Parser$Reply$value$($3177, $3178, $3171);
                            var $3172 = $3179;
                            break;
                    };
                    var $3164 = $3172;
                    break;
            };
            return $3164;
        }), List$nil))))));
        return $2957;
    };
    const Kind$Parser$do$statements = x0 => Kind$Parser$do$statements$(x0);

    function Kind$Parser$do$(_idx$1, _code$2) {
        var self = Parser$maybe$(Kind$Parser$text("do "), _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3181 = self.idx;
                var $3182 = self.code;
                var $3183 = self.err;
                var $3184 = Parser$Reply$error$($3181, $3182, $3183);
                var $3180 = $3184;
                break;
            case 'Parser.Reply.value':
                var $3185 = self.idx;
                var $3186 = self.code;
                var self = Kind$Parser$name1$($3185, $3186);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3188 = self.idx;
                        var $3189 = self.code;
                        var $3190 = self.err;
                        var $3191 = Parser$Reply$error$($3188, $3189, $3190);
                        var $3187 = $3191;
                        break;
                    case 'Parser.Reply.value':
                        var $3192 = self.idx;
                        var $3193 = self.code;
                        var $3194 = self.val;
                        var self = Parser$text$(" {", $3192, $3193);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3196 = self.idx;
                                var $3197 = self.code;
                                var $3198 = self.err;
                                var $3199 = Parser$Reply$error$($3196, $3197, $3198);
                                var $3195 = $3199;
                                break;
                            case 'Parser.Reply.value':
                                var $3200 = self.idx;
                                var $3201 = self.code;
                                var self = Kind$Parser$do$statements$($3194)($3200)($3201);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3203 = self.idx;
                                        var $3204 = self.code;
                                        var $3205 = self.err;
                                        var $3206 = Parser$Reply$error$($3203, $3204, $3205);
                                        var $3202 = $3206;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3207 = self.idx;
                                        var $3208 = self.code;
                                        var $3209 = self.val;
                                        var self = Kind$Parser$text$("}", $3207, $3208);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3211 = self.idx;
                                                var $3212 = self.code;
                                                var $3213 = self.err;
                                                var $3214 = Parser$Reply$error$($3211, $3212, $3213);
                                                var $3210 = $3214;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3215 = self.idx;
                                                var $3216 = self.code;
                                                var $3217 = Parser$Reply$value$($3215, $3216, $3209);
                                                var $3210 = $3217;
                                                break;
                                        };
                                        var $3202 = $3210;
                                        break;
                                };
                                var $3195 = $3202;
                                break;
                        };
                        var $3187 = $3195;
                        break;
                };
                var $3180 = $3187;
                break;
        };
        return $3180;
    };
    const Kind$Parser$do = x0 => x1 => Kind$Parser$do$(x0, x1);

    function Parser$try$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3219 = Parser$Reply$value$(_idx$3, _code$4, Bool$false);
                var $3218 = $3219;
                break;
            case 'Parser.Reply.value':
                var $3220 = Parser$Reply$value$(_idx$3, _code$4, Bool$true);
                var $3218 = $3220;
                break;
        };
        return $3218;
    };
    const Parser$try = x0 => x1 => x2 => Parser$try$(x0, x1, x2);

    function Parser$fail$(_error$2, _idx$3, _code$4) {
        var $3221 = Parser$Reply$error$(_idx$3, _code$4, _error$2);
        return $3221;
    };
    const Parser$fail = x0 => x1 => x2 => Parser$fail$(x0, x1, x2);

    function Parser$avoiding$(_test$2, _parse$3, _idx$4, _code$5) {
        var self = Parser$try$(_test$2, _idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3223 = self.idx;
                var $3224 = self.code;
                var $3225 = self.err;
                var $3226 = Parser$Reply$error$($3223, $3224, $3225);
                var $3222 = $3226;
                break;
            case 'Parser.Reply.value':
                var $3227 = self.idx;
                var $3228 = self.code;
                var $3229 = self.val;
                var self = $3229;
                if (self) {
                    var $3231 = Parser$fail("Avoided.");
                    var $3230 = $3231;
                } else {
                    var $3232 = _parse$3;
                    var $3230 = $3232;
                };
                var $3230 = $3230($3227)($3228);
                var $3222 = $3230;
                break;
        };
        return $3222;
    };
    const Parser$avoiding = x0 => x1 => x2 => x3 => Parser$avoiding$(x0, x1, x2, x3);

    function Maybe$default$(_m$2, _a$3) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $3234 = self.value;
                var $3235 = $3234;
                var $3233 = $3235;
                break;
            case 'Maybe.none':
                var $3236 = _a$3;
                var $3233 = $3236;
                break;
        };
        return $3233;
    };
    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);

    function Kind$Term$nat$(_natx$1) {
        var $3237 = ({
            _: 'Kind.Term.nat',
            'natx': _natx$1
        });
        return $3237;
    };
    const Kind$Term$nat = x0 => Kind$Term$nat$(x0);

    function Kind$Term$unroll_nat$(_natx$1) {
        var self = _natx$1;
        if (self === 0n) {
            var $3239 = Kind$Term$ref$(Kind$Name$read$("Nat.zero"));
            var $3238 = $3239;
        } else {
            var $3240 = (self - 1n);
            var _func$3 = Kind$Term$ref$(Kind$Name$read$("Nat.succ"));
            var _argm$4 = Kind$Term$nat$($3240);
            var $3241 = Kind$Term$app$(_func$3, _argm$4);
            var $3238 = $3241;
        };
        return $3238;
    };
    const Kind$Term$unroll_nat = x0 => Kind$Term$unroll_nat$(x0);
    const U16$to_bits = a0 => (u16_to_bits(a0));

    function Kind$Term$unroll_chr$bits$(_bits$1) {
        var self = _bits$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $3243 = self.slice(0, -1);
                var $3244 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.o")), Kind$Term$unroll_chr$bits$($3243));
                var $3242 = $3244;
                break;
            case 'i':
                var $3245 = self.slice(0, -1);
                var $3246 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("Bits.i")), Kind$Term$unroll_chr$bits$($3245));
                var $3242 = $3246;
                break;
            case 'e':
                var $3247 = Kind$Term$ref$(Kind$Name$read$("Bits.e"));
                var $3242 = $3247;
                break;
        };
        return $3242;
    };
    const Kind$Term$unroll_chr$bits = x0 => Kind$Term$unroll_chr$bits$(x0);

    function Kind$Term$unroll_chr$(_chrx$1) {
        var _bits$2 = (u16_to_bits(_chrx$1));
        var _term$3 = Kind$Term$ref$(Kind$Name$read$("Word.from_bits"));
        var _term$4 = Kind$Term$app$(_term$3, Kind$Term$nat$(16n));
        var _term$5 = Kind$Term$app$(_term$4, Kind$Term$unroll_chr$bits$(_bits$2));
        var _term$6 = Kind$Term$app$(Kind$Term$ref$(Kind$Name$read$("U16.new")), _term$5);
        var $3248 = _term$6;
        return $3248;
    };
    const Kind$Term$unroll_chr = x0 => Kind$Term$unroll_chr$(x0);

    function Kind$Term$unroll_str$(_strx$1) {
        var self = _strx$1;
        if (self.length === 0) {
            var $3250 = Kind$Term$ref$(Kind$Name$read$("String.nil"));
            var $3249 = $3250;
        } else {
            var $3251 = self.charCodeAt(0);
            var $3252 = self.slice(1);
            var _char$4 = Kind$Term$chr$($3251);
            var _term$5 = Kind$Term$ref$(Kind$Name$read$("String.cons"));
            var _term$6 = Kind$Term$app$(_term$5, _char$4);
            var _term$7 = Kind$Term$app$(_term$6, Kind$Term$str$($3252));
            var $3253 = _term$7;
            var $3249 = $3253;
        };
        return $3249;
    };
    const Kind$Term$unroll_str = x0 => Kind$Term$unroll_str$(x0);

    function Kind$Term$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $3255 = self.name;
                var self = Kind$Map$get$($3255, _defs$2);
                switch (self._) {
                    case 'Maybe.some':
                        var $3257 = self.value;
                        var self = $3257;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $3259 = self.term;
                                var $3260 = Kind$Term$reduce$($3259, _defs$2);
                                var $3258 = $3260;
                                break;
                        };
                        var $3256 = $3258;
                        break;
                    case 'Maybe.none':
                        var $3261 = Kind$Term$ref$($3255);
                        var $3256 = $3261;
                        break;
                };
                var $3254 = $3256;
                break;
            case 'Kind.Term.app':
                var $3262 = self.func;
                var $3263 = self.argm;
                var _func$5 = Kind$Term$reduce$($3262, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Kind.Term.lam':
                        var $3265 = self.body;
                        var $3266 = Kind$Term$reduce$($3265($3263), _defs$2);
                        var $3264 = $3266;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $3267 = _term$1;
                        var $3264 = $3267;
                        break;
                };
                var $3254 = $3264;
                break;
            case 'Kind.Term.let':
                var $3268 = self.expr;
                var $3269 = self.body;
                var $3270 = Kind$Term$reduce$($3269($3268), _defs$2);
                var $3254 = $3270;
                break;
            case 'Kind.Term.def':
                var $3271 = self.expr;
                var $3272 = self.body;
                var $3273 = Kind$Term$reduce$($3272($3271), _defs$2);
                var $3254 = $3273;
                break;
            case 'Kind.Term.ann':
                var $3274 = self.term;
                var $3275 = Kind$Term$reduce$($3274, _defs$2);
                var $3254 = $3275;
                break;
            case 'Kind.Term.nat':
                var $3276 = self.natx;
                var $3277 = Kind$Term$reduce$(Kind$Term$unroll_nat$($3276), _defs$2);
                var $3254 = $3277;
                break;
            case 'Kind.Term.chr':
                var $3278 = self.chrx;
                var $3279 = Kind$Term$reduce$(Kind$Term$unroll_chr$($3278), _defs$2);
                var $3254 = $3279;
                break;
            case 'Kind.Term.str':
                var $3280 = self.strx;
                var $3281 = Kind$Term$reduce$(Kind$Term$unroll_str$($3280), _defs$2);
                var $3254 = $3281;
                break;
            case 'Kind.Term.ori':
                var $3282 = self.expr;
                var $3283 = Kind$Term$reduce$($3282, _defs$2);
                var $3254 = $3283;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.cse':
                var $3284 = _term$1;
                var $3254 = $3284;
                break;
        };
        return $3254;
    };
    const Kind$Term$reduce = x0 => x1 => Kind$Term$reduce$(x0, x1);
    const BitsMap$new = ({
        _: 'BitsMap.new'
    });
    const Kind$Map$new = BitsMap$new;

    function Kind$Term$extract_name$(_term$1) {
        var _term$2 = Kind$Term$reduce$(_term$1, Kind$Map$new);
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.var':
                var $3286 = self.name;
                var $3287 = $3286;
                var $3285 = $3287;
                break;
            case 'Kind.Term.ref':
                var $3288 = self.name;
                var $3289 = $3288;
                var $3285 = $3289;
                break;
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $3290 = "self";
                var $3285 = $3290;
                break;
        };
        return $3285;
    };
    const Kind$Term$extract_name = x0 => Kind$Term$extract_name$(x0);

    function Kind$Ann$new$(_name$1, _term$2, _type$3) {
        var $3291 = ({
            _: 'Kind.Ann.new',
            'name': _name$1,
            'term': _term$2,
            'type': _type$3
        });
        return $3291;
    };
    const Kind$Ann$new = x0 => x1 => x2 => Kind$Ann$new$(x0, x1, x2);
    const Kind$Parser$case$with = Parser$first_of$(List$cons$((_idx$1 => _code$2 => {
        var self = Kind$Parser$text$("with ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3293 = self.idx;
                var $3294 = self.code;
                var $3295 = self.err;
                var $3296 = Parser$Reply$error$($3293, $3294, $3295);
                var $3292 = $3296;
                break;
            case 'Parser.Reply.value':
                var $3297 = self.idx;
                var $3298 = self.code;
                var $3299 = Parser$many$((_idx$6 => _code$7 => {
                    var self = Kind$Parser$name1$(_idx$6, _code$7);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $3301 = self.idx;
                            var $3302 = self.code;
                            var $3303 = self.err;
                            var $3304 = Parser$Reply$error$($3301, $3302, $3303);
                            var $3300 = $3304;
                            break;
                        case 'Parser.Reply.value':
                            var $3305 = self.idx;
                            var $3306 = self.code;
                            var $3307 = self.val;
                            var self = Parser$maybe$((_idx$11 => _code$12 => {
                                var self = Kind$Parser$text$(":", _idx$11, _code$12);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3310 = self.idx;
                                        var $3311 = self.code;
                                        var $3312 = self.err;
                                        var $3313 = Parser$Reply$error$($3310, $3311, $3312);
                                        var $3309 = $3313;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3314 = self.idx;
                                        var $3315 = self.code;
                                        var self = Kind$Parser$term$($3314, $3315);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3317 = self.idx;
                                                var $3318 = self.code;
                                                var $3319 = self.err;
                                                var $3320 = Parser$Reply$error$($3317, $3318, $3319);
                                                var $3316 = $3320;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3321 = self.idx;
                                                var $3322 = self.code;
                                                var $3323 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $3321, $3322);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3325 = self.idx;
                                                        var $3326 = self.code;
                                                        var $3327 = self.err;
                                                        var $3328 = Parser$Reply$error$($3325, $3326, $3327);
                                                        var $3324 = $3328;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3329 = self.idx;
                                                        var $3330 = self.code;
                                                        var $3331 = Parser$Reply$value$($3329, $3330, $3323);
                                                        var $3324 = $3331;
                                                        break;
                                                };
                                                var $3316 = $3324;
                                                break;
                                        };
                                        var $3309 = $3316;
                                        break;
                                };
                                return $3309;
                            }), $3305, $3306);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3332 = self.idx;
                                    var $3333 = self.code;
                                    var $3334 = self.err;
                                    var $3335 = Parser$Reply$error$($3332, $3333, $3334);
                                    var $3308 = $3335;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3336 = self.idx;
                                    var $3337 = self.code;
                                    var $3338 = self.val;
                                    var $3339 = Parser$Reply$value$($3336, $3337, Kind$Ann$new$($3307, Kind$Term$ref$($3307), $3338));
                                    var $3308 = $3339;
                                    break;
                            };
                            var $3300 = $3308;
                            break;
                    };
                    return $3300;
                }))($3297)($3298);
                var $3292 = $3299;
                break;
        };
        return $3292;
    }), List$cons$((_idx$1 => _code$2 => {
        var $3340 = Parser$Reply$value$(_idx$1, _code$2, List$nil);
        return $3340;
    }), List$nil)));

    function Kind$Parser$case$case$(_idx$1, _code$2) {
        var self = Parser$until$(Kind$Parser$text(":"), Kind$Parser$name1)(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3342 = self.idx;
                var $3343 = self.code;
                var $3344 = self.err;
                var $3345 = Parser$Reply$error$($3342, $3343, $3344);
                var $3341 = $3345;
                break;
            case 'Parser.Reply.value':
                var $3346 = self.idx;
                var $3347 = self.code;
                var $3348 = self.val;
                var self = Kind$Parser$term$($3346, $3347);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3350 = self.idx;
                        var $3351 = self.code;
                        var $3352 = self.err;
                        var $3353 = Parser$Reply$error$($3350, $3351, $3352);
                        var $3349 = $3353;
                        break;
                    case 'Parser.Reply.value':
                        var $3354 = self.idx;
                        var $3355 = self.code;
                        var $3356 = self.val;
                        var self = Parser$maybe$(Kind$Parser$text(","), $3354, $3355);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3358 = self.idx;
                                var $3359 = self.code;
                                var $3360 = self.err;
                                var $3361 = Parser$Reply$error$($3358, $3359, $3360);
                                var $3357 = $3361;
                                break;
                            case 'Parser.Reply.value':
                                var $3362 = self.idx;
                                var $3363 = self.code;
                                var $3364 = Parser$Reply$value$($3362, $3363, Pair$new$($3348, $3356));
                                var $3357 = $3364;
                                break;
                        };
                        var $3349 = $3357;
                        break;
                };
                var $3341 = $3349;
                break;
        };
        return $3341;
    };
    const Kind$Parser$case$case = x0 => x1 => Kind$Parser$case$case$(x0, x1);
    const Debug$log = a0 => a1 => ((console.log(a0), a1()));

    function Pair$snd$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $3366 = self.snd;
                var $3367 = $3366;
                var $3365 = $3367;
                break;
        };
        return $3365;
    };
    const Pair$snd = x0 => Pair$snd$(x0);
    const Kind$Map = null;

    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {
        var $3368 = ({
            _: 'BitsMap.tie',
            'val': _val$2,
            'lft': _lft$3,
            'rgt': _rgt$4
        });
        return $3368;
    };
    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);

    function BitsMap$set$(_bits$2, _val$3, _map$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $3370 = self.slice(0, -1);
                var self = _map$4;
                switch (self._) {
                    case 'BitsMap.tie':
                        var $3372 = self.val;
                        var $3373 = self.lft;
                        var $3374 = self.rgt;
                        var $3375 = BitsMap$tie$($3372, BitsMap$set$($3370, _val$3, $3373), $3374);
                        var $3371 = $3375;
                        break;
                    case 'BitsMap.new':
                        var $3376 = BitsMap$tie$(Maybe$none, BitsMap$set$($3370, _val$3, BitsMap$new), BitsMap$new);
                        var $3371 = $3376;
                        break;
                };
                var $3369 = $3371;
                break;
            case 'i':
                var $3377 = self.slice(0, -1);
                var self = _map$4;
                switch (self._) {
                    case 'BitsMap.tie':
                        var $3379 = self.val;
                        var $3380 = self.lft;
                        var $3381 = self.rgt;
                        var $3382 = BitsMap$tie$($3379, $3380, BitsMap$set$($3377, _val$3, $3381));
                        var $3378 = $3382;
                        break;
                    case 'BitsMap.new':
                        var $3383 = BitsMap$tie$(Maybe$none, BitsMap$new, BitsMap$set$($3377, _val$3, BitsMap$new));
                        var $3378 = $3383;
                        break;
                };
                var $3369 = $3378;
                break;
            case 'e':
                var self = _map$4;
                switch (self._) {
                    case 'BitsMap.tie':
                        var $3385 = self.lft;
                        var $3386 = self.rgt;
                        var $3387 = BitsMap$tie$(Maybe$some$(_val$3), $3385, $3386);
                        var $3384 = $3387;
                        break;
                    case 'BitsMap.new':
                        var $3388 = BitsMap$tie$(Maybe$some$(_val$3), BitsMap$new, BitsMap$new);
                        var $3384 = $3388;
                        break;
                };
                var $3369 = $3384;
                break;
        };
        return $3369;
    };
    const BitsMap$set = x0 => x1 => x2 => BitsMap$set$(x0, x1, x2);

    function Kind$Map$set$(_name$2, _val$3, _map$4) {
        var $3389 = BitsMap$set$((kind_name_to_bits(_name$2)), _val$3, _map$4);
        return $3389;
    };
    const Kind$Map$set = x0 => x1 => x2 => Kind$Map$set$(x0, x1, x2);

    function Kind$Parser$case$group$(_dflt$1, _cses$2) {
        var self = _cses$2;
        switch (self._) {
            case 'List.cons':
                var $3391 = self.head;
                var $3392 = self.tail;
                var _map$5 = Kind$Parser$case$group$(_dflt$1, $3392);
                var self = $3391;
                switch (self._) {
                    case 'Pair.new':
                        var $3394 = self.fst;
                        var $3395 = self.snd;
                        var self = $3394;
                        switch (self._) {
                            case 'List.cons':
                                var $3397 = self.head;
                                var $3398 = self.tail;
                                var _rest$10 = Maybe$default$(Kind$Map$get$($3397, _map$5), List$nil);
                                var $3399 = Kind$Map$set$($3397, List$cons$(Pair$new$($3398, $3395), _rest$10), _map$5);
                                var $3396 = $3399;
                                break;
                            case 'List.nil':
                                var $3400 = _map$5;
                                var $3396 = $3400;
                                break;
                        };
                        var $3393 = $3396;
                        break;
                };
                var $3390 = $3393;
                break;
            case 'List.nil':
                var self = _dflt$1;
                switch (self._) {
                    case 'Maybe.some':
                        var $3402 = self.value;
                        var $3403 = Kind$Map$set$("_", List$cons$(Pair$new$(List$nil, $3402), List$nil), Kind$Map$new);
                        var $3401 = $3403;
                        break;
                    case 'Maybe.none':
                        var $3404 = Kind$Map$new;
                        var $3401 = $3404;
                        break;
                };
                var $3390 = $3401;
                break;
        };
        return $3390;
    };
    const Kind$Parser$case$group = x0 => x1 => Kind$Parser$case$group$(x0, x1);

    function Pair$fst$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $3406 = self.fst;
                var $3407 = $3406;
                var $3405 = $3407;
                break;
        };
        return $3405;
    };
    const Pair$fst = x0 => Pair$fst$(x0);

    function BitsMap$map$(_fn$3, _map$4) {
        var self = _map$4;
        switch (self._) {
            case 'BitsMap.tie':
                var $3409 = self.val;
                var $3410 = self.lft;
                var $3411 = self.rgt;
                var self = $3409;
                switch (self._) {
                    case 'Maybe.some':
                        var $3413 = self.value;
                        var $3414 = Maybe$some$(_fn$3($3413));
                        var _val$8 = $3414;
                        break;
                    case 'Maybe.none':
                        var $3415 = Maybe$none;
                        var _val$8 = $3415;
                        break;
                };
                var _lft$9 = BitsMap$map$(_fn$3, $3410);
                var _rgt$10 = BitsMap$map$(_fn$3, $3411);
                var $3412 = BitsMap$tie$(_val$8, _lft$9, _rgt$10);
                var $3408 = $3412;
                break;
            case 'BitsMap.new':
                var $3416 = BitsMap$new;
                var $3408 = $3416;
                break;
        };
        return $3408;
    };
    const BitsMap$map = x0 => x1 => BitsMap$map$(x0, x1);

    function Kind$Map$map$(_fn$3, _map$4) {
        var $3417 = BitsMap$map$(_fn$3, _map$4);
        return $3417;
    };
    const Kind$Map$map = x0 => x1 => Kind$Map$map$(x0, x1);

    function Kind$Term$cse$(_path$1, _expr$2, _name$3, _with$4, _cses$5, _moti$6) {
        var $3418 = ({
            _: 'Kind.Term.cse',
            'path': _path$1,
            'expr': _expr$2,
            'name': _name$3,
            'with': _with$4,
            'cses': _cses$5,
            'moti': _moti$6
        });
        return $3418;
    };
    const Kind$Term$cse = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$cse$(x0, x1, x2, x3, x4, x5);

    function Kind$Parser$case$build$(_vals$1, _wyth$2, _cses$3, _dflt$4, _moti$5, _orig$6) {
        var self = _vals$1;
        switch (self._) {
            case 'List.cons':
                var $3420 = self.head;
                var $3421 = self.tail;
                var _group$9 = Kind$Parser$case$group$(_dflt$4, _cses$3);
                var _name$10 = Pair$fst$($3420);
                var _expr$11 = Pair$snd$($3420);
                var _cses$12 = Kind$Map$map$((_cses$12 => {
                    var $3423 = Kind$Parser$case$build$($3421, _wyth$2, _cses$12, _dflt$4, _moti$5, _orig$6);
                    return $3423;
                }), _group$9);
                var $3422 = Kind$Term$ori$(_orig$6, Kind$Term$cse$(Bits$e, _expr$11, _name$10, _wyth$2, _cses$12, _moti$5));
                var $3419 = $3422;
                break;
            case 'List.nil':
                var self = _cses$3;
                switch (self._) {
                    case 'List.cons':
                        var $3425 = self.head;
                        var $3426 = Pair$snd$($3425);
                        var $3424 = $3426;
                        break;
                    case 'List.nil':
                        var $3427 = ((console.log(("MISSING CASE" + String$nil)), (_x$7 => {
                            var $3428 = Kind$Term$ref$("missing_case");
                            return $3428;
                        })()));
                        var $3424 = $3427;
                        break;
                };
                var $3419 = $3424;
                break;
        };
        return $3419;
    };
    const Kind$Parser$case$build = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$case$build$(x0, x1, x2, x3, x4, x5);

    function Kind$Parser$case$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3430 = self.idx;
                var $3431 = self.code;
                var $3432 = self.err;
                var $3433 = Parser$Reply$error$($3430, $3431, $3432);
                var $3429 = $3433;
                break;
            case 'Parser.Reply.value':
                var $3434 = self.idx;
                var $3435 = self.code;
                var $3436 = self.val;
                var self = Kind$Parser$text$("case ", $3434, $3435);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3438 = self.idx;
                        var $3439 = self.code;
                        var $3440 = self.err;
                        var $3441 = Parser$Reply$error$($3438, $3439, $3440);
                        var $3437 = $3441;
                        break;
                    case 'Parser.Reply.value':
                        var $3442 = self.idx;
                        var $3443 = self.code;
                        var self = Parser$many1$((_idx$9 => _code$10 => {
                            var self = Parser$avoiding$(Kind$Parser$text("{"), Kind$Parser$term, _idx$9, _code$10);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $3446 = self.idx;
                                    var $3447 = self.code;
                                    var $3448 = self.err;
                                    var $3449 = Parser$Reply$error$($3446, $3447, $3448);
                                    var $3445 = $3449;
                                    break;
                                case 'Parser.Reply.value':
                                    var $3450 = self.idx;
                                    var $3451 = self.code;
                                    var $3452 = self.val;
                                    var self = Parser$maybe$((_idx$14 => _code$15 => {
                                        var self = Kind$Parser$text$("as", _idx$14, _code$15);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3455 = self.idx;
                                                var $3456 = self.code;
                                                var $3457 = self.err;
                                                var $3458 = Parser$Reply$error$($3455, $3456, $3457);
                                                var $3454 = $3458;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3459 = self.idx;
                                                var $3460 = self.code;
                                                var self = Kind$Parser$name1$($3459, $3460);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3462 = self.idx;
                                                        var $3463 = self.code;
                                                        var $3464 = self.err;
                                                        var $3465 = Parser$Reply$error$($3462, $3463, $3464);
                                                        var $3461 = $3465;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3466 = self.idx;
                                                        var $3467 = self.code;
                                                        var $3468 = self.val;
                                                        var self = Parser$maybe$(Kind$Parser$text(";"), $3466, $3467);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3470 = self.idx;
                                                                var $3471 = self.code;
                                                                var $3472 = self.err;
                                                                var $3473 = Parser$Reply$error$($3470, $3471, $3472);
                                                                var $3469 = $3473;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3474 = self.idx;
                                                                var $3475 = self.code;
                                                                var $3476 = Parser$Reply$value$($3474, $3475, $3468);
                                                                var $3469 = $3476;
                                                                break;
                                                        };
                                                        var $3461 = $3469;
                                                        break;
                                                };
                                                var $3454 = $3461;
                                                break;
                                        };
                                        return $3454;
                                    }), $3450, $3451);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3477 = self.idx;
                                            var $3478 = self.code;
                                            var $3479 = self.err;
                                            var $3480 = Parser$Reply$error$($3477, $3478, $3479);
                                            var $3453 = $3480;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3481 = self.idx;
                                            var $3482 = self.code;
                                            var $3483 = self.val;
                                            var _name$17 = Maybe$default$($3483, Kind$Term$extract_name$($3452));
                                            var $3484 = Parser$Reply$value$($3481, $3482, Pair$new$(_name$17, $3452));
                                            var $3453 = $3484;
                                            break;
                                    };
                                    var $3445 = $3453;
                                    break;
                            };
                            return $3445;
                        }), $3442, $3443);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3485 = self.idx;
                                var $3486 = self.code;
                                var $3487 = self.err;
                                var $3488 = Parser$Reply$error$($3485, $3486, $3487);
                                var $3444 = $3488;
                                break;
                            case 'Parser.Reply.value':
                                var $3489 = self.idx;
                                var $3490 = self.code;
                                var $3491 = self.val;
                                var self = Kind$Parser$case$with($3489)($3490);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3493 = self.idx;
                                        var $3494 = self.code;
                                        var $3495 = self.err;
                                        var $3496 = Parser$Reply$error$($3493, $3494, $3495);
                                        var $3492 = $3496;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3497 = self.idx;
                                        var $3498 = self.code;
                                        var $3499 = self.val;
                                        var self = Kind$Parser$text$("{", $3497, $3498);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3501 = self.idx;
                                                var $3502 = self.code;
                                                var $3503 = self.err;
                                                var $3504 = Parser$Reply$error$($3501, $3502, $3503);
                                                var $3500 = $3504;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3505 = self.idx;
                                                var $3506 = self.code;
                                                var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$case$case)($3505)($3506);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3508 = self.idx;
                                                        var $3509 = self.code;
                                                        var $3510 = self.err;
                                                        var $3511 = Parser$Reply$error$($3508, $3509, $3510);
                                                        var $3507 = $3511;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3512 = self.idx;
                                                        var $3513 = self.code;
                                                        var $3514 = self.val;
                                                        var self = Parser$maybe$(Kind$Parser$text("!"), $3512, $3513);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3516 = self.idx;
                                                                var $3517 = self.code;
                                                                var $3518 = self.err;
                                                                var $3519 = Parser$Reply$error$($3516, $3517, $3518);
                                                                var $3515 = $3519;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3520 = self.idx;
                                                                var $3521 = self.code;
                                                                var $3522 = self.val;
                                                                var self = Parser$maybe$((_idx$24 => _code$25 => {
                                                                    var self = Kind$Parser$text$("default ", _idx$24, _code$25);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3525 = self.idx;
                                                                            var $3526 = self.code;
                                                                            var $3527 = self.err;
                                                                            var $3528 = Parser$Reply$error$($3525, $3526, $3527);
                                                                            var $3524 = $3528;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3529 = self.idx;
                                                                            var $3530 = self.code;
                                                                            var self = Kind$Parser$term$($3529, $3530);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $3532 = self.idx;
                                                                                    var $3533 = self.code;
                                                                                    var $3534 = self.err;
                                                                                    var $3535 = Parser$Reply$error$($3532, $3533, $3534);
                                                                                    var $3531 = $3535;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $3536 = self.idx;
                                                                                    var $3537 = self.code;
                                                                                    var $3538 = self.val;
                                                                                    var $3539 = Parser$Reply$value$($3536, $3537, $3538);
                                                                                    var $3531 = $3539;
                                                                                    break;
                                                                            };
                                                                            var $3524 = $3531;
                                                                            break;
                                                                    };
                                                                    return $3524;
                                                                }), $3520, $3521);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3540 = self.idx;
                                                                        var $3541 = self.code;
                                                                        var $3542 = self.err;
                                                                        var $3543 = Parser$Reply$error$($3540, $3541, $3542);
                                                                        var $3523 = $3543;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3544 = self.idx;
                                                                        var $3545 = self.code;
                                                                        var $3546 = self.val;
                                                                        var self = Parser$maybe$((_idx$27 => _code$28 => {
                                                                            var self = Kind$Parser$text$(":", _idx$27, _code$28);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $3549 = self.idx;
                                                                                    var $3550 = self.code;
                                                                                    var $3551 = self.err;
                                                                                    var $3552 = Parser$Reply$error$($3549, $3550, $3551);
                                                                                    var $3548 = $3552;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $3553 = self.idx;
                                                                                    var $3554 = self.code;
                                                                                    var $3555 = Kind$Parser$term$($3553, $3554);
                                                                                    var $3548 = $3555;
                                                                                    break;
                                                                            };
                                                                            return $3548;
                                                                        }), $3544, $3545);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $3556 = self.idx;
                                                                                var $3557 = self.code;
                                                                                var $3558 = self.err;
                                                                                var $3559 = Parser$Reply$error$($3556, $3557, $3558);
                                                                                var $3547 = $3559;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $3560 = self.idx;
                                                                                var $3561 = self.code;
                                                                                var $3562 = self.val;
                                                                                var self = $3562;
                                                                                switch (self._) {
                                                                                    case 'Maybe.some':
                                                                                        var $3564 = self.value;
                                                                                        var $3565 = Maybe$some$($3564);
                                                                                        var _moti$30 = $3565;
                                                                                        break;
                                                                                    case 'Maybe.none':
                                                                                        var self = $3522;
                                                                                        switch (self._) {
                                                                                            case 'Maybe.none':
                                                                                                var $3567 = Maybe$some$(Kind$Term$hol$(Bits$e));
                                                                                                var $3566 = $3567;
                                                                                                break;
                                                                                            case 'Maybe.some':
                                                                                                var $3568 = Maybe$none;
                                                                                                var $3566 = $3568;
                                                                                                break;
                                                                                        };
                                                                                        var _moti$30 = $3566;
                                                                                        break;
                                                                                };
                                                                                var self = Kind$Parser$stop$($3436, $3560, $3561);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $3569 = self.idx;
                                                                                        var $3570 = self.code;
                                                                                        var $3571 = self.err;
                                                                                        var $3572 = Parser$Reply$error$($3569, $3570, $3571);
                                                                                        var $3563 = $3572;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $3573 = self.idx;
                                                                                        var $3574 = self.code;
                                                                                        var $3575 = self.val;
                                                                                        var $3576 = Parser$Reply$value$($3573, $3574, Kind$Parser$case$build$($3491, $3499, $3514, $3546, _moti$30, $3575));
                                                                                        var $3563 = $3576;
                                                                                        break;
                                                                                };
                                                                                var $3547 = $3563;
                                                                                break;
                                                                        };
                                                                        var $3523 = $3547;
                                                                        break;
                                                                };
                                                                var $3515 = $3523;
                                                                break;
                                                        };
                                                        var $3507 = $3515;
                                                        break;
                                                };
                                                var $3500 = $3507;
                                                break;
                                        };
                                        var $3492 = $3500;
                                        break;
                                };
                                var $3444 = $3492;
                                break;
                        };
                        var $3437 = $3444;
                        break;
                };
                var $3429 = $3437;
                break;
        };
        return $3429;
    };
    const Kind$Parser$case = x0 => x1 => Kind$Parser$case$(x0, x1);

    function Kind$Parser$open$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3578 = self.idx;
                var $3579 = self.code;
                var $3580 = self.err;
                var $3581 = Parser$Reply$error$($3578, $3579, $3580);
                var $3577 = $3581;
                break;
            case 'Parser.Reply.value':
                var $3582 = self.idx;
                var $3583 = self.code;
                var $3584 = self.val;
                var self = Kind$Parser$text$("open ", $3582, $3583);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3586 = self.idx;
                        var $3587 = self.code;
                        var $3588 = self.err;
                        var $3589 = Parser$Reply$error$($3586, $3587, $3588);
                        var $3585 = $3589;
                        break;
                    case 'Parser.Reply.value':
                        var $3590 = self.idx;
                        var $3591 = self.code;
                        var self = Kind$Parser$spaces($3590)($3591);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3593 = self.idx;
                                var $3594 = self.code;
                                var $3595 = self.err;
                                var $3596 = Parser$Reply$error$($3593, $3594, $3595);
                                var $3592 = $3596;
                                break;
                            case 'Parser.Reply.value':
                                var $3597 = self.idx;
                                var $3598 = self.code;
                                var self = Kind$Parser$term$($3597, $3598);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3600 = self.idx;
                                        var $3601 = self.code;
                                        var $3602 = self.err;
                                        var $3603 = Parser$Reply$error$($3600, $3601, $3602);
                                        var $3599 = $3603;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3604 = self.idx;
                                        var $3605 = self.code;
                                        var $3606 = self.val;
                                        var self = Parser$maybe$((_idx$15 => _code$16 => {
                                            var self = Kind$Parser$text$("as", _idx$15, _code$16);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3609 = self.idx;
                                                    var $3610 = self.code;
                                                    var $3611 = self.err;
                                                    var $3612 = Parser$Reply$error$($3609, $3610, $3611);
                                                    var $3608 = $3612;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3613 = self.idx;
                                                    var $3614 = self.code;
                                                    var $3615 = Kind$Parser$name1$($3613, $3614);
                                                    var $3608 = $3615;
                                                    break;
                                            };
                                            return $3608;
                                        }), $3604, $3605);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3616 = self.idx;
                                                var $3617 = self.code;
                                                var $3618 = self.err;
                                                var $3619 = Parser$Reply$error$($3616, $3617, $3618);
                                                var $3607 = $3619;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3620 = self.idx;
                                                var $3621 = self.code;
                                                var $3622 = self.val;
                                                var self = Parser$maybe$(Kind$Parser$text(";"), $3620, $3621);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3624 = self.idx;
                                                        var $3625 = self.code;
                                                        var $3626 = self.err;
                                                        var $3627 = Parser$Reply$error$($3624, $3625, $3626);
                                                        var $3623 = $3627;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3628 = self.idx;
                                                        var $3629 = self.code;
                                                        var self = $3622;
                                                        switch (self._) {
                                                            case 'Maybe.some':
                                                                var $3631 = self.value;
                                                                var $3632 = $3631;
                                                                var _name$21 = $3632;
                                                                break;
                                                            case 'Maybe.none':
                                                                var self = Kind$Term$reduce$($3606, Kind$Map$new);
                                                                switch (self._) {
                                                                    case 'Kind.Term.var':
                                                                        var $3634 = self.name;
                                                                        var $3635 = $3634;
                                                                        var $3633 = $3635;
                                                                        break;
                                                                    case 'Kind.Term.ref':
                                                                        var $3636 = self.name;
                                                                        var $3637 = $3636;
                                                                        var $3633 = $3637;
                                                                        break;
                                                                    case 'Kind.Term.typ':
                                                                    case 'Kind.Term.all':
                                                                    case 'Kind.Term.lam':
                                                                    case 'Kind.Term.app':
                                                                    case 'Kind.Term.let':
                                                                    case 'Kind.Term.def':
                                                                    case 'Kind.Term.ann':
                                                                    case 'Kind.Term.gol':
                                                                    case 'Kind.Term.hol':
                                                                    case 'Kind.Term.nat':
                                                                    case 'Kind.Term.chr':
                                                                    case 'Kind.Term.str':
                                                                    case 'Kind.Term.cse':
                                                                    case 'Kind.Term.ori':
                                                                        var $3638 = Kind$Name$read$("self");
                                                                        var $3633 = $3638;
                                                                        break;
                                                                };
                                                                var _name$21 = $3633;
                                                                break;
                                                        };
                                                        var _wyth$22 = List$nil;
                                                        var self = Kind$Parser$term$($3628, $3629);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3639 = self.idx;
                                                                var $3640 = self.code;
                                                                var $3641 = self.err;
                                                                var $3642 = Parser$Reply$error$($3639, $3640, $3641);
                                                                var $3630 = $3642;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3643 = self.idx;
                                                                var $3644 = self.code;
                                                                var $3645 = self.val;
                                                                var _cses$26 = Kind$Map$set$("_", $3645, Kind$Map$new);
                                                                var _moti$27 = Maybe$some$(Kind$Term$hol$(Bits$e));
                                                                var self = Kind$Parser$stop$($3584, $3643, $3644);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3647 = self.idx;
                                                                        var $3648 = self.code;
                                                                        var $3649 = self.err;
                                                                        var $3650 = Parser$Reply$error$($3647, $3648, $3649);
                                                                        var $3646 = $3650;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3651 = self.idx;
                                                                        var $3652 = self.code;
                                                                        var $3653 = self.val;
                                                                        var $3654 = Parser$Reply$value$($3651, $3652, Kind$Term$ori$($3653, Kind$Term$cse$(Bits$e, $3606, _name$21, _wyth$22, _cses$26, _moti$27)));
                                                                        var $3646 = $3654;
                                                                        break;
                                                                };
                                                                var $3630 = $3646;
                                                                break;
                                                        };
                                                        var $3623 = $3630;
                                                        break;
                                                };
                                                var $3607 = $3623;
                                                break;
                                        };
                                        var $3599 = $3607;
                                        break;
                                };
                                var $3592 = $3599;
                                break;
                        };
                        var $3585 = $3592;
                        break;
                };
                var $3577 = $3585;
                break;
        };
        return $3577;
    };
    const Kind$Parser$open = x0 => x1 => Kind$Parser$open$(x0, x1);

    function Kind$Parser$without$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3656 = self.idx;
                var $3657 = self.code;
                var $3658 = self.err;
                var $3659 = Parser$Reply$error$($3656, $3657, $3658);
                var $3655 = $3659;
                break;
            case 'Parser.Reply.value':
                var $3660 = self.idx;
                var $3661 = self.code;
                var $3662 = self.val;
                var self = Kind$Parser$text$("without ", $3660, $3661);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3664 = self.idx;
                        var $3665 = self.code;
                        var $3666 = self.err;
                        var $3667 = Parser$Reply$error$($3664, $3665, $3666);
                        var $3663 = $3667;
                        break;
                    case 'Parser.Reply.value':
                        var $3668 = self.idx;
                        var $3669 = self.code;
                        var self = Kind$Parser$name1$($3668, $3669);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3671 = self.idx;
                                var $3672 = self.code;
                                var $3673 = self.err;
                                var $3674 = Parser$Reply$error$($3671, $3672, $3673);
                                var $3670 = $3674;
                                break;
                            case 'Parser.Reply.value':
                                var $3675 = self.idx;
                                var $3676 = self.code;
                                var $3677 = self.val;
                                var self = Kind$Parser$text$(":", $3675, $3676);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3679 = self.idx;
                                        var $3680 = self.code;
                                        var $3681 = self.err;
                                        var $3682 = Parser$Reply$error$($3679, $3680, $3681);
                                        var $3678 = $3682;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3683 = self.idx;
                                        var $3684 = self.code;
                                        var self = Kind$Parser$term$($3683, $3684);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3686 = self.idx;
                                                var $3687 = self.code;
                                                var $3688 = self.err;
                                                var $3689 = Parser$Reply$error$($3686, $3687, $3688);
                                                var $3685 = $3689;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3690 = self.idx;
                                                var $3691 = self.code;
                                                var $3692 = self.val;
                                                var self = Kind$Parser$term$($3690, $3691);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3694 = self.idx;
                                                        var $3695 = self.code;
                                                        var $3696 = self.err;
                                                        var $3697 = Parser$Reply$error$($3694, $3695, $3696);
                                                        var $3693 = $3697;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3698 = self.idx;
                                                        var $3699 = self.code;
                                                        var $3700 = self.val;
                                                        var self = Kind$Parser$stop$($3662, $3698, $3699);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3702 = self.idx;
                                                                var $3703 = self.code;
                                                                var $3704 = self.err;
                                                                var $3705 = Parser$Reply$error$($3702, $3703, $3704);
                                                                var $3701 = $3705;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3706 = self.idx;
                                                                var $3707 = self.code;
                                                                var $3708 = self.val;
                                                                var _term$24 = Kind$Term$ref$($3677);
                                                                var _term$25 = Kind$Term$app$(_term$24, Kind$Term$lam$("x", (_x$25 => {
                                                                    var $3710 = Kind$Term$hol$(Bits$e);
                                                                    return $3710;
                                                                })));
                                                                var _term$26 = Kind$Term$app$(_term$25, $3692);
                                                                var _term$27 = Kind$Term$app$(_term$26, Kind$Term$lam$($3677, (_x$27 => {
                                                                    var $3711 = $3700;
                                                                    return $3711;
                                                                })));
                                                                var $3709 = Parser$Reply$value$($3706, $3707, Kind$Term$ori$($3708, _term$27));
                                                                var $3701 = $3709;
                                                                break;
                                                        };
                                                        var $3693 = $3701;
                                                        break;
                                                };
                                                var $3685 = $3693;
                                                break;
                                        };
                                        var $3678 = $3685;
                                        break;
                                };
                                var $3670 = $3678;
                                break;
                        };
                        var $3663 = $3670;
                        break;
                };
                var $3655 = $3663;
                break;
        };
        return $3655;
    };
    const Kind$Parser$without = x0 => x1 => Kind$Parser$without$(x0, x1);

    function Kind$Parser$switch$case$(_idx$1, _code$2) {
        var self = Kind$Parser$term$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3713 = self.idx;
                var $3714 = self.code;
                var $3715 = self.err;
                var $3716 = Parser$Reply$error$($3713, $3714, $3715);
                var $3712 = $3716;
                break;
            case 'Parser.Reply.value':
                var $3717 = self.idx;
                var $3718 = self.code;
                var $3719 = self.val;
                var self = Kind$Parser$text$(":", $3717, $3718);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3721 = self.idx;
                        var $3722 = self.code;
                        var $3723 = self.err;
                        var $3724 = Parser$Reply$error$($3721, $3722, $3723);
                        var $3720 = $3724;
                        break;
                    case 'Parser.Reply.value':
                        var $3725 = self.idx;
                        var $3726 = self.code;
                        var self = Kind$Parser$term$($3725, $3726);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3728 = self.idx;
                                var $3729 = self.code;
                                var $3730 = self.err;
                                var $3731 = Parser$Reply$error$($3728, $3729, $3730);
                                var $3727 = $3731;
                                break;
                            case 'Parser.Reply.value':
                                var $3732 = self.idx;
                                var $3733 = self.code;
                                var $3734 = self.val;
                                var $3735 = Parser$Reply$value$($3732, $3733, Pair$new$($3719, $3734));
                                var $3727 = $3735;
                                break;
                        };
                        var $3720 = $3727;
                        break;
                };
                var $3712 = $3720;
                break;
        };
        return $3712;
    };
    const Kind$Parser$switch$case = x0 => x1 => Kind$Parser$switch$case$(x0, x1);

    function Kind$Parser$switch$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3737 = self.idx;
                var $3738 = self.code;
                var $3739 = self.err;
                var $3740 = Parser$Reply$error$($3737, $3738, $3739);
                var $3736 = $3740;
                break;
            case 'Parser.Reply.value':
                var $3741 = self.idx;
                var $3742 = self.code;
                var $3743 = self.val;
                var self = Kind$Parser$text$("switch ", $3741, $3742);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3745 = self.idx;
                        var $3746 = self.code;
                        var $3747 = self.err;
                        var $3748 = Parser$Reply$error$($3745, $3746, $3747);
                        var $3744 = $3748;
                        break;
                    case 'Parser.Reply.value':
                        var $3749 = self.idx;
                        var $3750 = self.code;
                        var self = Kind$Parser$term$($3749, $3750);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3752 = self.idx;
                                var $3753 = self.code;
                                var $3754 = self.err;
                                var $3755 = Parser$Reply$error$($3752, $3753, $3754);
                                var $3751 = $3755;
                                break;
                            case 'Parser.Reply.value':
                                var $3756 = self.idx;
                                var $3757 = self.code;
                                var $3758 = self.val;
                                var self = Kind$Parser$text$("{", $3756, $3757);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3760 = self.idx;
                                        var $3761 = self.code;
                                        var $3762 = self.err;
                                        var $3763 = Parser$Reply$error$($3760, $3761, $3762);
                                        var $3759 = $3763;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3764 = self.idx;
                                        var $3765 = self.code;
                                        var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$switch$case)($3764)($3765);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3767 = self.idx;
                                                var $3768 = self.code;
                                                var $3769 = self.err;
                                                var $3770 = Parser$Reply$error$($3767, $3768, $3769);
                                                var $3766 = $3770;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3771 = self.idx;
                                                var $3772 = self.code;
                                                var $3773 = self.val;
                                                var self = Kind$Parser$text$("default ", $3771, $3772);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3775 = self.idx;
                                                        var $3776 = self.code;
                                                        var $3777 = self.err;
                                                        var $3778 = Parser$Reply$error$($3775, $3776, $3777);
                                                        var $3774 = $3778;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3779 = self.idx;
                                                        var $3780 = self.code;
                                                        var self = Kind$Parser$term$($3779, $3780);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3782 = self.idx;
                                                                var $3783 = self.code;
                                                                var $3784 = self.err;
                                                                var $3785 = Parser$Reply$error$($3782, $3783, $3784);
                                                                var $3781 = $3785;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3786 = self.idx;
                                                                var $3787 = self.code;
                                                                var $3788 = self.val;
                                                                var self = Kind$Parser$stop$($3743, $3786, $3787);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3790 = self.idx;
                                                                        var $3791 = self.code;
                                                                        var $3792 = self.err;
                                                                        var $3793 = Parser$Reply$error$($3790, $3791, $3792);
                                                                        var $3789 = $3793;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3794 = self.idx;
                                                                        var $3795 = self.code;
                                                                        var $3796 = self.val;
                                                                        var _term$27 = List$fold$($3773, $3788, (_cse$27 => _rest$28 => {
                                                                            var self = _cse$27;
                                                                            switch (self._) {
                                                                                case 'Pair.new':
                                                                                    var $3799 = self.fst;
                                                                                    var $3800 = self.snd;
                                                                                    var _term$31 = Kind$Term$app$($3758, $3799);
                                                                                    var _term$32 = Kind$Term$app$(_term$31, Kind$Term$lam$("", (_x$32 => {
                                                                                        var $3802 = Kind$Term$hol$(Bits$e);
                                                                                        return $3802;
                                                                                    })));
                                                                                    var _term$33 = Kind$Term$app$(_term$32, $3800);
                                                                                    var _term$34 = Kind$Term$app$(_term$33, _rest$28);
                                                                                    var $3801 = _term$34;
                                                                                    var $3798 = $3801;
                                                                                    break;
                                                                            };
                                                                            return $3798;
                                                                        }));
                                                                        var $3797 = Parser$Reply$value$($3794, $3795, Kind$Term$ori$($3796, _term$27));
                                                                        var $3789 = $3797;
                                                                        break;
                                                                };
                                                                var $3781 = $3789;
                                                                break;
                                                        };
                                                        var $3774 = $3781;
                                                        break;
                                                };
                                                var $3766 = $3774;
                                                break;
                                        };
                                        var $3759 = $3766;
                                        break;
                                };
                                var $3751 = $3759;
                                break;
                        };
                        var $3744 = $3751;
                        break;
                };
                var $3736 = $3744;
                break;
        };
        return $3736;
    };
    const Kind$Parser$switch = x0 => x1 => Kind$Parser$switch$(x0, x1);

    function Parser$digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $3804 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $3803 = $3804;
        } else {
            var $3805 = self.charCodeAt(0);
            var $3806 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($3805 === 48);
            if (self) {
                var $3808 = Parser$Reply$value$(_sidx$5, $3806, 0n);
                var $3807 = $3808;
            } else {
                var self = ($3805 === 49);
                if (self) {
                    var $3810 = Parser$Reply$value$(_sidx$5, $3806, 1n);
                    var $3809 = $3810;
                } else {
                    var self = ($3805 === 50);
                    if (self) {
                        var $3812 = Parser$Reply$value$(_sidx$5, $3806, 2n);
                        var $3811 = $3812;
                    } else {
                        var self = ($3805 === 51);
                        if (self) {
                            var $3814 = Parser$Reply$value$(_sidx$5, $3806, 3n);
                            var $3813 = $3814;
                        } else {
                            var self = ($3805 === 52);
                            if (self) {
                                var $3816 = Parser$Reply$value$(_sidx$5, $3806, 4n);
                                var $3815 = $3816;
                            } else {
                                var self = ($3805 === 53);
                                if (self) {
                                    var $3818 = Parser$Reply$value$(_sidx$5, $3806, 5n);
                                    var $3817 = $3818;
                                } else {
                                    var self = ($3805 === 54);
                                    if (self) {
                                        var $3820 = Parser$Reply$value$(_sidx$5, $3806, 6n);
                                        var $3819 = $3820;
                                    } else {
                                        var self = ($3805 === 55);
                                        if (self) {
                                            var $3822 = Parser$Reply$value$(_sidx$5, $3806, 7n);
                                            var $3821 = $3822;
                                        } else {
                                            var self = ($3805 === 56);
                                            if (self) {
                                                var $3824 = Parser$Reply$value$(_sidx$5, $3806, 8n);
                                                var $3823 = $3824;
                                            } else {
                                                var self = ($3805 === 57);
                                                if (self) {
                                                    var $3826 = Parser$Reply$value$(_sidx$5, $3806, 9n);
                                                    var $3825 = $3826;
                                                } else {
                                                    var $3827 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                    var $3825 = $3827;
                                                };
                                                var $3823 = $3825;
                                            };
                                            var $3821 = $3823;
                                        };
                                        var $3819 = $3821;
                                    };
                                    var $3817 = $3819;
                                };
                                var $3815 = $3817;
                            };
                            var $3813 = $3815;
                        };
                        var $3811 = $3813;
                    };
                    var $3809 = $3811;
                };
                var $3807 = $3809;
            };
            var $3803 = $3807;
        };
        return $3803;
    };
    const Parser$digit = x0 => x1 => Parser$digit$(x0, x1);
    const Nat$add = a0 => a1 => (a0 + a1);
    const Nat$mul = a0 => a1 => (a0 * a1);

    function Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4) {
        var Nat$from_base$go$ = (_b$1, _ds$2, _p$3, _res$4) => ({
            ctr: 'TCO',
            arg: [_b$1, _ds$2, _p$3, _res$4]
        });
        var Nat$from_base$go = _b$1 => _ds$2 => _p$3 => _res$4 => Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4);
        var arg = [_b$1, _ds$2, _p$3, _res$4];
        while (true) {
            let [_b$1, _ds$2, _p$3, _res$4] = arg;
            var R = (() => {
                var self = _ds$2;
                switch (self._) {
                    case 'List.cons':
                        var $3828 = self.head;
                        var $3829 = self.tail;
                        var $3830 = Nat$from_base$go$(_b$1, $3829, (_b$1 * _p$3), (($3828 * _p$3) + _res$4));
                        return $3830;
                    case 'List.nil':
                        var $3831 = _res$4;
                        return $3831;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$from_base$go = x0 => x1 => x2 => x3 => Nat$from_base$go$(x0, x1, x2, x3);

    function Nat$from_base$(_base$1, _ds$2) {
        var $3832 = Nat$from_base$go$(_base$1, List$reverse$(_ds$2), 1n, 0n);
        return $3832;
    };
    const Nat$from_base = x0 => x1 => Nat$from_base$(x0, x1);

    function Parser$nat$(_idx$1, _code$2) {
        var self = Parser$many1$(Parser$digit, _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3834 = self.idx;
                var $3835 = self.code;
                var $3836 = self.err;
                var $3837 = Parser$Reply$error$($3834, $3835, $3836);
                var $3833 = $3837;
                break;
            case 'Parser.Reply.value':
                var $3838 = self.idx;
                var $3839 = self.code;
                var $3840 = self.val;
                var $3841 = Parser$Reply$value$($3838, $3839, Nat$from_base$(10n, $3840));
                var $3833 = $3841;
                break;
        };
        return $3833;
    };
    const Parser$nat = x0 => x1 => Parser$nat$(x0, x1);

    function Bits$tail$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $3843 = self.slice(0, -1);
                var $3844 = $3843;
                var $3842 = $3844;
                break;
            case 'i':
                var $3845 = self.slice(0, -1);
                var $3846 = $3845;
                var $3842 = $3846;
                break;
            case 'e':
                var $3847 = Bits$e;
                var $3842 = $3847;
                break;
        };
        return $3842;
    };
    const Bits$tail = x0 => Bits$tail$(x0);

    function Bits$inc$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $3849 = self.slice(0, -1);
                var $3850 = ($3849 + '1');
                var $3848 = $3850;
                break;
            case 'i':
                var $3851 = self.slice(0, -1);
                var $3852 = (Bits$inc$($3851) + '0');
                var $3848 = $3852;
                break;
            case 'e':
                var $3853 = (Bits$e + '1');
                var $3848 = $3853;
                break;
        };
        return $3848;
    };
    const Bits$inc = x0 => Bits$inc$(x0);
    const Nat$to_bits = a0 => (nat_to_bits(a0));

    function Maybe$is_some$(_m$2) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $3855 = Bool$false;
                var $3854 = $3855;
                break;
            case 'Maybe.some':
                var $3856 = Bool$true;
                var $3854 = $3856;
                break;
        };
        return $3854;
    };
    const Maybe$is_some = x0 => Maybe$is_some$(x0);

    function Kind$Term$gol$(_name$1, _dref$2, _verb$3) {
        var $3857 = ({
            _: 'Kind.Term.gol',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3
        });
        return $3857;
    };
    const Kind$Term$gol = x0 => x1 => x2 => Kind$Term$gol$(x0, x1, x2);

    function Kind$Parser$goal$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3859 = self.idx;
                var $3860 = self.code;
                var $3861 = self.err;
                var $3862 = Parser$Reply$error$($3859, $3860, $3861);
                var $3858 = $3862;
                break;
            case 'Parser.Reply.value':
                var $3863 = self.idx;
                var $3864 = self.code;
                var $3865 = self.val;
                var self = Kind$Parser$text$("?", $3863, $3864);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3867 = self.idx;
                        var $3868 = self.code;
                        var $3869 = self.err;
                        var $3870 = Parser$Reply$error$($3867, $3868, $3869);
                        var $3866 = $3870;
                        break;
                    case 'Parser.Reply.value':
                        var $3871 = self.idx;
                        var $3872 = self.code;
                        var self = Kind$Parser$name$($3871, $3872);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3874 = self.idx;
                                var $3875 = self.code;
                                var $3876 = self.err;
                                var $3877 = Parser$Reply$error$($3874, $3875, $3876);
                                var $3873 = $3877;
                                break;
                            case 'Parser.Reply.value':
                                var $3878 = self.idx;
                                var $3879 = self.code;
                                var $3880 = self.val;
                                var self = Parser$many$((_idx$12 => _code$13 => {
                                    var self = Kind$Parser$text$("-", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3883 = self.idx;
                                            var $3884 = self.code;
                                            var $3885 = self.err;
                                            var $3886 = Parser$Reply$error$($3883, $3884, $3885);
                                            var $3882 = $3886;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3887 = self.idx;
                                            var $3888 = self.code;
                                            var self = Parser$nat$($3887, $3888);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3890 = self.idx;
                                                    var $3891 = self.code;
                                                    var $3892 = self.err;
                                                    var $3893 = Parser$Reply$error$($3890, $3891, $3892);
                                                    var $3889 = $3893;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3894 = self.idx;
                                                    var $3895 = self.code;
                                                    var $3896 = self.val;
                                                    var _bits$20 = Bits$reverse$(Bits$tail$(Bits$reverse$((nat_to_bits($3896)))));
                                                    var $3897 = Parser$Reply$value$($3894, $3895, _bits$20);
                                                    var $3889 = $3897;
                                                    break;
                                            };
                                            var $3882 = $3889;
                                            break;
                                    };
                                    return $3882;
                                }))($3878)($3879);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3898 = self.idx;
                                        var $3899 = self.code;
                                        var $3900 = self.err;
                                        var $3901 = Parser$Reply$error$($3898, $3899, $3900);
                                        var $3881 = $3901;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3902 = self.idx;
                                        var $3903 = self.code;
                                        var $3904 = self.val;
                                        var self = Parser$maybe$(Parser$text("-"), $3902, $3903);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3906 = self.idx;
                                                var $3907 = self.code;
                                                var $3908 = self.err;
                                                var $3909 = Parser$Reply$error$($3906, $3907, $3908);
                                                var self = $3909;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3910 = self.idx;
                                                var $3911 = self.code;
                                                var $3912 = self.val;
                                                var $3913 = Parser$Reply$value$($3910, $3911, Maybe$is_some$($3912));
                                                var self = $3913;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3914 = self.idx;
                                                var $3915 = self.code;
                                                var $3916 = self.err;
                                                var $3917 = Parser$Reply$error$($3914, $3915, $3916);
                                                var $3905 = $3917;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3918 = self.idx;
                                                var $3919 = self.code;
                                                var $3920 = self.val;
                                                var self = Kind$Parser$stop$($3865, $3918, $3919);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3922 = self.idx;
                                                        var $3923 = self.code;
                                                        var $3924 = self.err;
                                                        var $3925 = Parser$Reply$error$($3922, $3923, $3924);
                                                        var $3921 = $3925;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3926 = self.idx;
                                                        var $3927 = self.code;
                                                        var $3928 = self.val;
                                                        var $3929 = Parser$Reply$value$($3926, $3927, Kind$Term$ori$($3928, Kind$Term$gol$($3880, $3904, $3920)));
                                                        var $3921 = $3929;
                                                        break;
                                                };
                                                var $3905 = $3921;
                                                break;
                                        };
                                        var $3881 = $3905;
                                        break;
                                };
                                var $3873 = $3881;
                                break;
                        };
                        var $3866 = $3873;
                        break;
                };
                var $3858 = $3866;
                break;
        };
        return $3858;
    };
    const Kind$Parser$goal = x0 => x1 => Kind$Parser$goal$(x0, x1);

    function Kind$Parser$hole$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3931 = self.idx;
                var $3932 = self.code;
                var $3933 = self.err;
                var $3934 = Parser$Reply$error$($3931, $3932, $3933);
                var $3930 = $3934;
                break;
            case 'Parser.Reply.value':
                var $3935 = self.idx;
                var $3936 = self.code;
                var $3937 = self.val;
                var self = Kind$Parser$text$("_", $3935, $3936);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3939 = self.idx;
                        var $3940 = self.code;
                        var $3941 = self.err;
                        var $3942 = Parser$Reply$error$($3939, $3940, $3941);
                        var $3938 = $3942;
                        break;
                    case 'Parser.Reply.value':
                        var $3943 = self.idx;
                        var $3944 = self.code;
                        var self = Kind$Parser$stop$($3937, $3943, $3944);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3946 = self.idx;
                                var $3947 = self.code;
                                var $3948 = self.err;
                                var $3949 = Parser$Reply$error$($3946, $3947, $3948);
                                var $3945 = $3949;
                                break;
                            case 'Parser.Reply.value':
                                var $3950 = self.idx;
                                var $3951 = self.code;
                                var $3952 = self.val;
                                var $3953 = Parser$Reply$value$($3950, $3951, Kind$Term$ori$($3952, Kind$Term$hol$(Bits$e)));
                                var $3945 = $3953;
                                break;
                        };
                        var $3938 = $3945;
                        break;
                };
                var $3930 = $3938;
                break;
        };
        return $3930;
    };
    const Kind$Parser$hole = x0 => x1 => Kind$Parser$hole$(x0, x1);

    function List$any$(_cond$2, _list$3) {
        var List$any$ = (_cond$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_cond$2, _list$3]
        });
        var List$any = _cond$2 => _list$3 => List$any$(_cond$2, _list$3);
        var arg = [_cond$2, _list$3];
        while (true) {
            let [_cond$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.cons':
                        var $3954 = self.head;
                        var $3955 = self.tail;
                        var self = _cond$2($3954);
                        if (self) {
                            var $3957 = Bool$true;
                            var $3956 = $3957;
                        } else {
                            var $3958 = List$any$(_cond$2, $3955);
                            var $3956 = $3958;
                        };
                        return $3956;
                    case 'List.nil':
                        var $3959 = Bool$false;
                        return $3959;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$any = x0 => x1 => List$any$(x0, x1);

    function Kind$Parser$float$str_digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $3961 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $3960 = $3961;
        } else {
            var $3962 = self.charCodeAt(0);
            var $3963 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var _digits$6 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$nil)))))))))));
            var self = List$any$(a1 => ($3962 === a1), _digits$6);
            if (self) {
                var $3965 = Parser$Reply$value$(_sidx$5, $3963, $3962);
                var $3964 = $3965;
            } else {
                var $3966 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                var $3964 = $3966;
            };
            var $3960 = $3964;
        };
        return $3960;
    };
    const Kind$Parser$float$str_digit = x0 => x1 => Kind$Parser$float$str_digit$(x0, x1);

    function String$from_list$(_xs$1) {
        var self = _xs$1;
        switch (self._) {
            case 'List.cons':
                var $3968 = self.head;
                var $3969 = self.tail;
                var $3970 = String$cons$($3968, String$from_list$($3969));
                var $3967 = $3970;
                break;
            case 'List.nil':
                var $3971 = String$nil;
                var $3967 = $3971;
                break;
        };
        return $3967;
    };
    const String$from_list = x0 => String$from_list$(x0);

    function Kind$Parser$float$64$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3973 = self.idx;
                var $3974 = self.code;
                var $3975 = self.err;
                var $3976 = Parser$Reply$error$($3973, $3974, $3975);
                var $3972 = $3976;
                break;
            case 'Parser.Reply.value':
                var $3977 = self.idx;
                var $3978 = self.code;
                var $3979 = self.val;
                var self = Parser$many1$(Kind$Parser$float$str_digit, $3977, $3978);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3981 = self.idx;
                        var $3982 = self.code;
                        var $3983 = self.err;
                        var $3984 = Parser$Reply$error$($3981, $3982, $3983);
                        var $3980 = $3984;
                        break;
                    case 'Parser.Reply.value':
                        var $3985 = self.idx;
                        var $3986 = self.code;
                        var $3987 = self.val;
                        var self = Parser$text$(".", $3985, $3986);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3989 = self.idx;
                                var $3990 = self.code;
                                var $3991 = self.err;
                                var $3992 = Parser$Reply$error$($3989, $3990, $3991);
                                var $3988 = $3992;
                                break;
                            case 'Parser.Reply.value':
                                var $3993 = self.idx;
                                var $3994 = self.code;
                                var self = Parser$many1$(Kind$Parser$float$str_digit, $3993, $3994);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3996 = self.idx;
                                        var $3997 = self.code;
                                        var $3998 = self.err;
                                        var $3999 = Parser$Reply$error$($3996, $3997, $3998);
                                        var $3995 = $3999;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4000 = self.idx;
                                        var $4001 = self.code;
                                        var $4002 = self.val;
                                        var self = Parser$text$("#64", $4000, $4001);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4004 = self.idx;
                                                var $4005 = self.code;
                                                var $4006 = self.err;
                                                var $4007 = Parser$Reply$error$($4004, $4005, $4006);
                                                var $4003 = $4007;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4008 = self.idx;
                                                var $4009 = self.code;
                                                var _float_str$18 = Kind$Term$str$((String$from_list$($3987) + ("." + String$from_list$($4002))));
                                                var _conv$19 = Kind$Term$ref$("F64.parse");
                                                var _term$20 = Kind$Term$app$(_conv$19, _float_str$18);
                                                var self = Kind$Parser$stop$($3979, $4008, $4009);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4011 = self.idx;
                                                        var $4012 = self.code;
                                                        var $4013 = self.err;
                                                        var $4014 = Parser$Reply$error$($4011, $4012, $4013);
                                                        var $4010 = $4014;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4015 = self.idx;
                                                        var $4016 = self.code;
                                                        var $4017 = self.val;
                                                        var $4018 = Parser$Reply$value$($4015, $4016, Kind$Term$ori$($4017, _term$20));
                                                        var $4010 = $4018;
                                                        break;
                                                };
                                                var $4003 = $4010;
                                                break;
                                        };
                                        var $3995 = $4003;
                                        break;
                                };
                                var $3988 = $3995;
                                break;
                        };
                        var $3980 = $3988;
                        break;
                };
                var $3972 = $3980;
                break;
        };
        return $3972;
    };
    const Kind$Parser$float$64 = x0 => x1 => Kind$Parser$float$64$(x0, x1);

    function Kind$Parser$float$32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4020 = self.idx;
                var $4021 = self.code;
                var $4022 = self.err;
                var $4023 = Parser$Reply$error$($4020, $4021, $4022);
                var $4019 = $4023;
                break;
            case 'Parser.Reply.value':
                var $4024 = self.idx;
                var $4025 = self.code;
                var $4026 = self.val;
                var self = Parser$many1$(Kind$Parser$float$str_digit, $4024, $4025);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4028 = self.idx;
                        var $4029 = self.code;
                        var $4030 = self.err;
                        var $4031 = Parser$Reply$error$($4028, $4029, $4030);
                        var $4027 = $4031;
                        break;
                    case 'Parser.Reply.value':
                        var $4032 = self.idx;
                        var $4033 = self.code;
                        var $4034 = self.val;
                        var self = Parser$text$(".", $4032, $4033);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4036 = self.idx;
                                var $4037 = self.code;
                                var $4038 = self.err;
                                var $4039 = Parser$Reply$error$($4036, $4037, $4038);
                                var $4035 = $4039;
                                break;
                            case 'Parser.Reply.value':
                                var $4040 = self.idx;
                                var $4041 = self.code;
                                var self = Parser$many1$(Kind$Parser$float$str_digit, $4040, $4041);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4043 = self.idx;
                                        var $4044 = self.code;
                                        var $4045 = self.err;
                                        var $4046 = Parser$Reply$error$($4043, $4044, $4045);
                                        var $4042 = $4046;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4047 = self.idx;
                                        var $4048 = self.code;
                                        var $4049 = self.val;
                                        var self = Parser$text$("#32", $4047, $4048);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4051 = self.idx;
                                                var $4052 = self.code;
                                                var $4053 = self.err;
                                                var $4054 = Parser$Reply$error$($4051, $4052, $4053);
                                                var $4050 = $4054;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4055 = self.idx;
                                                var $4056 = self.code;
                                                var _float_str$18 = Kind$Term$str$((String$from_list$($4034) + ("." + String$from_list$($4049))));
                                                var _conv$19 = Kind$Term$ref$("F32.parse");
                                                var _term$20 = Kind$Term$app$(_conv$19, _float_str$18);
                                                var self = Kind$Parser$stop$($4026, $4055, $4056);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4058 = self.idx;
                                                        var $4059 = self.code;
                                                        var $4060 = self.err;
                                                        var $4061 = Parser$Reply$error$($4058, $4059, $4060);
                                                        var $4057 = $4061;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4062 = self.idx;
                                                        var $4063 = self.code;
                                                        var $4064 = self.val;
                                                        var $4065 = Parser$Reply$value$($4062, $4063, Kind$Term$ori$($4064, _term$20));
                                                        var $4057 = $4065;
                                                        break;
                                                };
                                                var $4050 = $4057;
                                                break;
                                        };
                                        var $4042 = $4050;
                                        break;
                                };
                                var $4035 = $4042;
                                break;
                        };
                        var $4027 = $4035;
                        break;
                };
                var $4019 = $4027;
                break;
        };
        return $4019;
    };
    const Kind$Parser$float$32 = x0 => x1 => Kind$Parser$float$32$(x0, x1);

    function Either$(_A$1, _B$2) {
        var $4066 = null;
        return $4066;
    };
    const Either = x0 => x1 => Either$(x0, x1);

    function Either$left$(_value$3) {
        var $4067 = ({
            _: 'Either.left',
            'value': _value$3
        });
        return $4067;
    };
    const Either$left = x0 => Either$left$(x0);

    function Either$right$(_value$3) {
        var $4068 = ({
            _: 'Either.right',
            'value': _value$3
        });
        return $4068;
    };
    const Either$right = x0 => Either$right$(x0);

    function Nat$sub_rem$(_n$1, _m$2) {
        var Nat$sub_rem$ = (_n$1, _m$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2]
        });
        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);
        var arg = [_n$1, _m$2];
        while (true) {
            let [_n$1, _m$2] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4069 = Either$left$(_n$1);
                    return $4069;
                } else {
                    var $4070 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4072 = Either$right$(Nat$succ$($4070));
                        var $4071 = $4072;
                    } else {
                        var $4073 = (self - 1n);
                        var $4074 = Nat$sub_rem$($4073, $4070);
                        var $4071 = $4074;
                    };
                    return $4071;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);

    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {
        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _d$3]
        });
        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);
        var arg = [_n$1, _m$2, _d$3];
        while (true) {
            let [_n$1, _m$2, _d$3] = arg;
            var R = (() => {
                var self = Nat$sub_rem$(_n$1, _m$2);
                switch (self._) {
                    case 'Either.left':
                        var $4075 = self.value;
                        var $4076 = Nat$div_mod$go$($4075, _m$2, Nat$succ$(_d$3));
                        return $4076;
                    case 'Either.right':
                        var $4077 = Pair$new$(_d$3, _n$1);
                        return $4077;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);
    const Nat$div_mod = a0 => a1 => (({
        _: 'Pair.new',
        'fst': a0 / a1,
        'snd': a0 % a1
    }));

    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {
        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_base$1, _nat$2, _res$3]
        });
        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);
        var arg = [_base$1, _nat$2, _res$3];
        while (true) {
            let [_base$1, _nat$2, _res$3] = arg;
            var R = (() => {
                var self = (({
                    _: 'Pair.new',
                    'fst': _nat$2 / _base$1,
                    'snd': _nat$2 % _base$1
                }));
                switch (self._) {
                    case 'Pair.new':
                        var $4078 = self.fst;
                        var $4079 = self.snd;
                        var self = $4078;
                        if (self === 0n) {
                            var $4081 = List$cons$($4079, _res$3);
                            var $4080 = $4081;
                        } else {
                            var $4082 = (self - 1n);
                            var $4083 = Nat$to_base$go$(_base$1, $4078, List$cons$($4079, _res$3));
                            var $4080 = $4083;
                        };
                        return $4080;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);

    function Nat$to_base$(_base$1, _nat$2) {
        var $4084 = Nat$to_base$go$(_base$1, _nat$2, List$nil);
        return $4084;
    };
    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);

    function Nat$mod$go$(_n$1, _m$2, _r$3) {
        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _r$3]
        });
        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);
        var arg = [_n$1, _m$2, _r$3];
        while (true) {
            let [_n$1, _m$2, _r$3] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4085 = Nat$mod$go$(_n$1, _r$3, _m$2);
                    return $4085;
                } else {
                    var $4086 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4088 = _r$3;
                        var $4087 = $4088;
                    } else {
                        var $4089 = (self - 1n);
                        var $4090 = Nat$mod$go$($4089, $4086, Nat$succ$(_r$3));
                        var $4087 = $4090;
                    };
                    return $4087;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);
    const Nat$mod = a0 => a1 => (a0 % a1);
    const Nat$lte = a0 => a1 => (a0 <= a1);

    function List$at$(_index$2, _list$3) {
        var List$at$ = (_index$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_index$2, _list$3]
        });
        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);
        var arg = [_index$2, _list$3];
        while (true) {
            let [_index$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.cons':
                        var $4091 = self.head;
                        var $4092 = self.tail;
                        var self = _index$2;
                        if (self === 0n) {
                            var $4094 = Maybe$some$($4091);
                            var $4093 = $4094;
                        } else {
                            var $4095 = (self - 1n);
                            var $4096 = List$at$($4095, $4092);
                            var $4093 = $4096;
                        };
                        return $4093;
                    case 'List.nil':
                        var $4097 = Maybe$none;
                        return $4097;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$at = x0 => x1 => List$at$(x0, x1);

    function Nat$show_digit$(_base$1, _n$2) {
        var _m$3 = (_n$2 % _base$1);
        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
        var self = ((_base$1 > 0n) && (_base$1 <= 64n));
        if (self) {
            var self = List$at$(_m$3, _base64$4);
            switch (self._) {
                case 'Maybe.some':
                    var $4100 = self.value;
                    var $4101 = $4100;
                    var $4099 = $4101;
                    break;
                case 'Maybe.none':
                    var $4102 = 35;
                    var $4099 = $4102;
                    break;
            };
            var $4098 = $4099;
        } else {
            var $4103 = 35;
            var $4098 = $4103;
        };
        return $4098;
    };
    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);

    function Nat$to_string_base$(_base$1, _nat$2) {
        var $4104 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {
            var $4105 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);
            return $4105;
        }));
        return $4104;
    };
    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);

    function Nat$show$(_n$1) {
        var $4106 = Nat$to_string_base$(10n, _n$1);
        return $4106;
    };
    const Nat$show = x0 => Nat$show$(x0);

    function Kind$Parser$int_pos$(_idx$1, _code$2) {
        var self = Parser$text$("+", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4108 = self.idx;
                var $4109 = self.code;
                var $4110 = self.err;
                var $4111 = Parser$Reply$error$($4108, $4109, $4110);
                var $4107 = $4111;
                break;
            case 'Parser.Reply.value':
                var $4112 = self.idx;
                var $4113 = self.code;
                var self = Parser$many1$(Parser$digit, $4112, $4113);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4115 = self.idx;
                        var $4116 = self.code;
                        var $4117 = self.err;
                        var $4118 = Parser$Reply$error$($4115, $4116, $4117);
                        var $4114 = $4118;
                        break;
                    case 'Parser.Reply.value':
                        var $4119 = self.idx;
                        var $4120 = self.code;
                        var $4121 = self.val;
                        var $4122 = Parser$Reply$value$($4119, $4120, Pair$new$(Bool$true, Nat$from_base$(10n, $4121)));
                        var $4114 = $4122;
                        break;
                };
                var $4107 = $4114;
                break;
        };
        return $4107;
    };
    const Kind$Parser$int_pos = x0 => x1 => Kind$Parser$int_pos$(x0, x1);

    function Kind$Parser$int_neg$(_idx$1, _code$2) {
        var self = Parser$text$("-", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4124 = self.idx;
                var $4125 = self.code;
                var $4126 = self.err;
                var $4127 = Parser$Reply$error$($4124, $4125, $4126);
                var $4123 = $4127;
                break;
            case 'Parser.Reply.value':
                var $4128 = self.idx;
                var $4129 = self.code;
                var self = Parser$many1$(Parser$digit, $4128, $4129);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4131 = self.idx;
                        var $4132 = self.code;
                        var $4133 = self.err;
                        var $4134 = Parser$Reply$error$($4131, $4132, $4133);
                        var $4130 = $4134;
                        break;
                    case 'Parser.Reply.value':
                        var $4135 = self.idx;
                        var $4136 = self.code;
                        var $4137 = self.val;
                        var $4138 = Parser$Reply$value$($4135, $4136, Pair$new$(Bool$false, Nat$from_base$(10n, $4137)));
                        var $4130 = $4138;
                        break;
                };
                var $4123 = $4130;
                break;
        };
        return $4123;
    };
    const Kind$Parser$int_neg = x0 => x1 => Kind$Parser$int_neg$(x0, x1);

    function Kind$Parser$int$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4140 = self.idx;
                var $4141 = self.code;
                var $4142 = self.err;
                var $4143 = Parser$Reply$error$($4140, $4141, $4142);
                var $4139 = $4143;
                break;
            case 'Parser.Reply.value':
                var $4144 = self.idx;
                var $4145 = self.code;
                var $4146 = self.val;
                var self = Kind$Parser$spaces($4144)($4145);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4148 = self.idx;
                        var $4149 = self.code;
                        var $4150 = self.err;
                        var $4151 = Parser$Reply$error$($4148, $4149, $4150);
                        var $4147 = $4151;
                        break;
                    case 'Parser.Reply.value':
                        var $4152 = self.idx;
                        var $4153 = self.code;
                        var self = Parser$first_of$(List$cons$(Kind$Parser$int_pos, List$cons$(Kind$Parser$int_neg, List$nil)))($4152)($4153);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4155 = self.idx;
                                var $4156 = self.code;
                                var $4157 = self.err;
                                var $4158 = Parser$Reply$error$($4155, $4156, $4157);
                                var $4154 = $4158;
                                break;
                            case 'Parser.Reply.value':
                                var $4159 = self.idx;
                                var $4160 = self.code;
                                var $4161 = self.val;
                                var self = $4161;
                                switch (self._) {
                                    case 'Pair.new':
                                        var $4163 = self.fst;
                                        var $4164 = self.snd;
                                        var _ret$14 = Kind$Term$ref$("Int.from_nat");
                                        var _ret$15 = Kind$Term$app$(_ret$14, Kind$Term$nat$($4164));
                                        var self = $4163;
                                        if (self) {
                                            var $4166 = _ret$15;
                                            var $4165 = $4166;
                                        } else {
                                            var _inv$16 = Kind$Term$ref$("Int.neg");
                                            var $4167 = Kind$Term$app$(_inv$16, _ret$15);
                                            var $4165 = $4167;
                                        };
                                        var _term$12 = $4165;
                                        break;
                                };
                                var self = Kind$Parser$stop$($4146, $4159, $4160);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4168 = self.idx;
                                        var $4169 = self.code;
                                        var $4170 = self.err;
                                        var $4171 = Parser$Reply$error$($4168, $4169, $4170);
                                        var $4162 = $4171;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4172 = self.idx;
                                        var $4173 = self.code;
                                        var $4174 = self.val;
                                        var $4175 = Parser$Reply$value$($4172, $4173, Kind$Term$ori$($4174, _term$12));
                                        var $4162 = $4175;
                                        break;
                                };
                                var $4154 = $4162;
                                break;
                        };
                        var $4147 = $4154;
                        break;
                };
                var $4139 = $4147;
                break;
        };
        return $4139;
    };
    const Kind$Parser$int = x0 => x1 => Kind$Parser$int$(x0, x1);

    function Kind$Parser$machine_integer$signed$(_size$1) {
        var _size_str$2 = Nat$show$(_size$1);
        var $4176 = (_idx$3 => _code$4 => {
            var self = Kind$Parser$init$(_idx$3, _code$4);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $4178 = self.idx;
                    var $4179 = self.code;
                    var $4180 = self.err;
                    var $4181 = Parser$Reply$error$($4178, $4179, $4180);
                    var $4177 = $4181;
                    break;
                case 'Parser.Reply.value':
                    var $4182 = self.idx;
                    var $4183 = self.code;
                    var $4184 = self.val;
                    var self = Kind$Parser$spaces($4182)($4183);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $4186 = self.idx;
                            var $4187 = self.code;
                            var $4188 = self.err;
                            var $4189 = Parser$Reply$error$($4186, $4187, $4188);
                            var $4185 = $4189;
                            break;
                        case 'Parser.Reply.value':
                            var $4190 = self.idx;
                            var $4191 = self.code;
                            var self = Kind$Parser$int$($4190, $4191);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4193 = self.idx;
                                    var $4194 = self.code;
                                    var $4195 = self.err;
                                    var $4196 = Parser$Reply$error$($4193, $4194, $4195);
                                    var $4192 = $4196;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4197 = self.idx;
                                    var $4198 = self.code;
                                    var $4199 = self.val;
                                    var self = Parser$text$(("#" + _size_str$2), $4197, $4198);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4201 = self.idx;
                                            var $4202 = self.code;
                                            var $4203 = self.err;
                                            var $4204 = Parser$Reply$error$($4201, $4202, $4203);
                                            var $4200 = $4204;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4205 = self.idx;
                                            var $4206 = self.code;
                                            var _term$17 = Kind$Term$ref$(("Int.to_i" + _size_str$2));
                                            var _term$18 = Kind$Term$app$(_term$17, $4199);
                                            var self = Kind$Parser$stop$($4184, $4205, $4206);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4208 = self.idx;
                                                    var $4209 = self.code;
                                                    var $4210 = self.err;
                                                    var $4211 = Parser$Reply$error$($4208, $4209, $4210);
                                                    var $4207 = $4211;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4212 = self.idx;
                                                    var $4213 = self.code;
                                                    var $4214 = self.val;
                                                    var $4215 = Parser$Reply$value$($4212, $4213, Kind$Term$ori$($4214, _term$18));
                                                    var $4207 = $4215;
                                                    break;
                                            };
                                            var $4200 = $4207;
                                            break;
                                    };
                                    var $4192 = $4200;
                                    break;
                            };
                            var $4185 = $4192;
                            break;
                    };
                    var $4177 = $4185;
                    break;
            };
            return $4177;
        });
        return $4176;
    };
    const Kind$Parser$machine_integer$signed = x0 => Kind$Parser$machine_integer$signed$(x0);

    function Parser$hex_digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4217 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $4216 = $4217;
        } else {
            var $4218 = self.charCodeAt(0);
            var $4219 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($4218 === 48);
            if (self) {
                var $4221 = Parser$Reply$value$(_sidx$5, $4219, 0n);
                var $4220 = $4221;
            } else {
                var self = ($4218 === 49);
                if (self) {
                    var $4223 = Parser$Reply$value$(_sidx$5, $4219, 1n);
                    var $4222 = $4223;
                } else {
                    var self = ($4218 === 50);
                    if (self) {
                        var $4225 = Parser$Reply$value$(_sidx$5, $4219, 2n);
                        var $4224 = $4225;
                    } else {
                        var self = ($4218 === 51);
                        if (self) {
                            var $4227 = Parser$Reply$value$(_sidx$5, $4219, 3n);
                            var $4226 = $4227;
                        } else {
                            var self = ($4218 === 52);
                            if (self) {
                                var $4229 = Parser$Reply$value$(_sidx$5, $4219, 4n);
                                var $4228 = $4229;
                            } else {
                                var self = ($4218 === 53);
                                if (self) {
                                    var $4231 = Parser$Reply$value$(_sidx$5, $4219, 5n);
                                    var $4230 = $4231;
                                } else {
                                    var self = ($4218 === 54);
                                    if (self) {
                                        var $4233 = Parser$Reply$value$(_sidx$5, $4219, 6n);
                                        var $4232 = $4233;
                                    } else {
                                        var self = ($4218 === 55);
                                        if (self) {
                                            var $4235 = Parser$Reply$value$(_sidx$5, $4219, 7n);
                                            var $4234 = $4235;
                                        } else {
                                            var self = ($4218 === 56);
                                            if (self) {
                                                var $4237 = Parser$Reply$value$(_sidx$5, $4219, 8n);
                                                var $4236 = $4237;
                                            } else {
                                                var self = ($4218 === 57);
                                                if (self) {
                                                    var $4239 = Parser$Reply$value$(_sidx$5, $4219, 9n);
                                                    var $4238 = $4239;
                                                } else {
                                                    var self = ($4218 === 97);
                                                    if (self) {
                                                        var $4241 = Parser$Reply$value$(_sidx$5, $4219, 10n);
                                                        var $4240 = $4241;
                                                    } else {
                                                        var self = ($4218 === 98);
                                                        if (self) {
                                                            var $4243 = Parser$Reply$value$(_sidx$5, $4219, 11n);
                                                            var $4242 = $4243;
                                                        } else {
                                                            var self = ($4218 === 99);
                                                            if (self) {
                                                                var $4245 = Parser$Reply$value$(_sidx$5, $4219, 12n);
                                                                var $4244 = $4245;
                                                            } else {
                                                                var self = ($4218 === 100);
                                                                if (self) {
                                                                    var $4247 = Parser$Reply$value$(_sidx$5, $4219, 13n);
                                                                    var $4246 = $4247;
                                                                } else {
                                                                    var self = ($4218 === 101);
                                                                    if (self) {
                                                                        var $4249 = Parser$Reply$value$(_sidx$5, $4219, 14n);
                                                                        var $4248 = $4249;
                                                                    } else {
                                                                        var self = ($4218 === 102);
                                                                        if (self) {
                                                                            var $4251 = Parser$Reply$value$(_sidx$5, $4219, 15n);
                                                                            var $4250 = $4251;
                                                                        } else {
                                                                            var self = ($4218 === 65);
                                                                            if (self) {
                                                                                var $4253 = Parser$Reply$value$(_sidx$5, $4219, 10n);
                                                                                var $4252 = $4253;
                                                                            } else {
                                                                                var self = ($4218 === 66);
                                                                                if (self) {
                                                                                    var $4255 = Parser$Reply$value$(_sidx$5, $4219, 11n);
                                                                                    var $4254 = $4255;
                                                                                } else {
                                                                                    var self = ($4218 === 67);
                                                                                    if (self) {
                                                                                        var $4257 = Parser$Reply$value$(_sidx$5, $4219, 12n);
                                                                                        var $4256 = $4257;
                                                                                    } else {
                                                                                        var self = ($4218 === 68);
                                                                                        if (self) {
                                                                                            var $4259 = Parser$Reply$value$(_sidx$5, $4219, 13n);
                                                                                            var $4258 = $4259;
                                                                                        } else {
                                                                                            var self = ($4218 === 69);
                                                                                            if (self) {
                                                                                                var $4261 = Parser$Reply$value$(_sidx$5, $4219, 14n);
                                                                                                var $4260 = $4261;
                                                                                            } else {
                                                                                                var self = ($4218 === 70);
                                                                                                if (self) {
                                                                                                    var $4263 = Parser$Reply$value$(_sidx$5, $4219, 15n);
                                                                                                    var $4262 = $4263;
                                                                                                } else {
                                                                                                    var $4264 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                                                                    var $4262 = $4264;
                                                                                                };
                                                                                                var $4260 = $4262;
                                                                                            };
                                                                                            var $4258 = $4260;
                                                                                        };
                                                                                        var $4256 = $4258;
                                                                                    };
                                                                                    var $4254 = $4256;
                                                                                };
                                                                                var $4252 = $4254;
                                                                            };
                                                                            var $4250 = $4252;
                                                                        };
                                                                        var $4248 = $4250;
                                                                    };
                                                                    var $4246 = $4248;
                                                                };
                                                                var $4244 = $4246;
                                                            };
                                                            var $4242 = $4244;
                                                        };
                                                        var $4240 = $4242;
                                                    };
                                                    var $4238 = $4240;
                                                };
                                                var $4236 = $4238;
                                            };
                                            var $4234 = $4236;
                                        };
                                        var $4232 = $4234;
                                    };
                                    var $4230 = $4232;
                                };
                                var $4228 = $4230;
                            };
                            var $4226 = $4228;
                        };
                        var $4224 = $4226;
                    };
                    var $4222 = $4224;
                };
                var $4220 = $4222;
            };
            var $4216 = $4220;
        };
        return $4216;
    };
    const Parser$hex_digit = x0 => x1 => Parser$hex_digit$(x0, x1);

    function Parser$hex_nat$(_idx$1, _code$2) {
        var self = Parser$text$("0x", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4266 = self.idx;
                var $4267 = self.code;
                var $4268 = self.err;
                var $4269 = Parser$Reply$error$($4266, $4267, $4268);
                var $4265 = $4269;
                break;
            case 'Parser.Reply.value':
                var $4270 = self.idx;
                var $4271 = self.code;
                var self = Parser$many1$(Parser$hex_digit, $4270, $4271);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4273 = self.idx;
                        var $4274 = self.code;
                        var $4275 = self.err;
                        var $4276 = Parser$Reply$error$($4273, $4274, $4275);
                        var $4272 = $4276;
                        break;
                    case 'Parser.Reply.value':
                        var $4277 = self.idx;
                        var $4278 = self.code;
                        var $4279 = self.val;
                        var $4280 = Parser$Reply$value$($4277, $4278, Nat$from_base$(16n, $4279));
                        var $4272 = $4280;
                        break;
                };
                var $4265 = $4272;
                break;
        };
        return $4265;
    };
    const Parser$hex_nat = x0 => x1 => Parser$hex_nat$(x0, x1);

    function Kind$Parser$nat$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4282 = self.idx;
                var $4283 = self.code;
                var $4284 = self.err;
                var $4285 = Parser$Reply$error$($4282, $4283, $4284);
                var $4281 = $4285;
                break;
            case 'Parser.Reply.value':
                var $4286 = self.idx;
                var $4287 = self.code;
                var $4288 = self.val;
                var self = Kind$Parser$spaces($4286)($4287);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4290 = self.idx;
                        var $4291 = self.code;
                        var $4292 = self.err;
                        var $4293 = Parser$Reply$error$($4290, $4291, $4292);
                        var $4289 = $4293;
                        break;
                    case 'Parser.Reply.value':
                        var $4294 = self.idx;
                        var $4295 = self.code;
                        var self = Parser$first_of$(List$cons$(Parser$hex_nat, List$cons$(Parser$nat, List$nil)))($4294)($4295);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4297 = self.idx;
                                var $4298 = self.code;
                                var $4299 = self.err;
                                var $4300 = Parser$Reply$error$($4297, $4298, $4299);
                                var $4296 = $4300;
                                break;
                            case 'Parser.Reply.value':
                                var $4301 = self.idx;
                                var $4302 = self.code;
                                var $4303 = self.val;
                                var self = Kind$Parser$stop$($4288, $4301, $4302);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4305 = self.idx;
                                        var $4306 = self.code;
                                        var $4307 = self.err;
                                        var $4308 = Parser$Reply$error$($4305, $4306, $4307);
                                        var $4304 = $4308;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4309 = self.idx;
                                        var $4310 = self.code;
                                        var $4311 = self.val;
                                        var $4312 = Parser$Reply$value$($4309, $4310, Kind$Term$ori$($4311, Kind$Term$nat$($4303)));
                                        var $4304 = $4312;
                                        break;
                                };
                                var $4296 = $4304;
                                break;
                        };
                        var $4289 = $4296;
                        break;
                };
                var $4281 = $4289;
                break;
        };
        return $4281;
    };
    const Kind$Parser$nat = x0 => x1 => Kind$Parser$nat$(x0, x1);

    function Kind$Parser$machine_integer$unsigned$(_size$1) {
        var _size_str$2 = Nat$show$(_size$1);
        var $4313 = (_idx$3 => _code$4 => {
            var self = Kind$Parser$init$(_idx$3, _code$4);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $4315 = self.idx;
                    var $4316 = self.code;
                    var $4317 = self.err;
                    var $4318 = Parser$Reply$error$($4315, $4316, $4317);
                    var $4314 = $4318;
                    break;
                case 'Parser.Reply.value':
                    var $4319 = self.idx;
                    var $4320 = self.code;
                    var $4321 = self.val;
                    var self = Kind$Parser$spaces($4319)($4320);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $4323 = self.idx;
                            var $4324 = self.code;
                            var $4325 = self.err;
                            var $4326 = Parser$Reply$error$($4323, $4324, $4325);
                            var $4322 = $4326;
                            break;
                        case 'Parser.Reply.value':
                            var $4327 = self.idx;
                            var $4328 = self.code;
                            var self = Kind$Parser$nat$($4327, $4328);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4330 = self.idx;
                                    var $4331 = self.code;
                                    var $4332 = self.err;
                                    var $4333 = Parser$Reply$error$($4330, $4331, $4332);
                                    var $4329 = $4333;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4334 = self.idx;
                                    var $4335 = self.code;
                                    var $4336 = self.val;
                                    var self = Parser$text$(("#" + Nat$show$(_size$1)), $4334, $4335);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4338 = self.idx;
                                            var $4339 = self.code;
                                            var $4340 = self.err;
                                            var $4341 = Parser$Reply$error$($4338, $4339, $4340);
                                            var $4337 = $4341;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4342 = self.idx;
                                            var $4343 = self.code;
                                            var _term$17 = Kind$Term$ref$(("Nat.to_u" + Nat$show$(_size$1)));
                                            var _term$18 = Kind$Term$app$(_term$17, $4336);
                                            var self = Kind$Parser$stop$($4321, $4342, $4343);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $4345 = self.idx;
                                                    var $4346 = self.code;
                                                    var $4347 = self.err;
                                                    var $4348 = Parser$Reply$error$($4345, $4346, $4347);
                                                    var $4344 = $4348;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $4349 = self.idx;
                                                    var $4350 = self.code;
                                                    var $4351 = self.val;
                                                    var $4352 = Parser$Reply$value$($4349, $4350, Kind$Term$ori$($4351, _term$18));
                                                    var $4344 = $4352;
                                                    break;
                                            };
                                            var $4337 = $4344;
                                            break;
                                    };
                                    var $4329 = $4337;
                                    break;
                            };
                            var $4322 = $4329;
                            break;
                    };
                    var $4314 = $4322;
                    break;
            };
            return $4314;
        });
        return $4313;
    };
    const Kind$Parser$machine_integer$unsigned = x0 => Kind$Parser$machine_integer$unsigned$(x0);

    function Kind$Parser$u64$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4354 = self.idx;
                var $4355 = self.code;
                var $4356 = self.err;
                var $4357 = Parser$Reply$error$($4354, $4355, $4356);
                var $4353 = $4357;
                break;
            case 'Parser.Reply.value':
                var $4358 = self.idx;
                var $4359 = self.code;
                var $4360 = self.val;
                var self = Kind$Parser$spaces($4358)($4359);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4362 = self.idx;
                        var $4363 = self.code;
                        var $4364 = self.err;
                        var $4365 = Parser$Reply$error$($4362, $4363, $4364);
                        var $4361 = $4365;
                        break;
                    case 'Parser.Reply.value':
                        var $4366 = self.idx;
                        var $4367 = self.code;
                        var self = Parser$nat$($4366, $4367);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4369 = self.idx;
                                var $4370 = self.code;
                                var $4371 = self.err;
                                var $4372 = Parser$Reply$error$($4369, $4370, $4371);
                                var $4368 = $4372;
                                break;
                            case 'Parser.Reply.value':
                                var $4373 = self.idx;
                                var $4374 = self.code;
                                var $4375 = self.val;
                                var self = Parser$text$("l", $4373, $4374);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4377 = self.idx;
                                        var $4378 = self.code;
                                        var $4379 = self.err;
                                        var $4380 = Parser$Reply$error$($4377, $4378, $4379);
                                        var $4376 = $4380;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4381 = self.idx;
                                        var $4382 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u64");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4375));
                                        var self = Kind$Parser$stop$($4360, $4381, $4382);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4384 = self.idx;
                                                var $4385 = self.code;
                                                var $4386 = self.err;
                                                var $4387 = Parser$Reply$error$($4384, $4385, $4386);
                                                var $4383 = $4387;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4388 = self.idx;
                                                var $4389 = self.code;
                                                var $4390 = self.val;
                                                var $4391 = Parser$Reply$value$($4388, $4389, Kind$Term$ori$($4390, _term$16));
                                                var $4383 = $4391;
                                                break;
                                        };
                                        var $4376 = $4383;
                                        break;
                                };
                                var $4368 = $4376;
                                break;
                        };
                        var $4361 = $4368;
                        break;
                };
                var $4353 = $4361;
                break;
        };
        return $4353;
    };
    const Kind$Parser$u64 = x0 => x1 => Kind$Parser$u64$(x0, x1);

    function Kind$Parser$u32$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4393 = self.idx;
                var $4394 = self.code;
                var $4395 = self.err;
                var $4396 = Parser$Reply$error$($4393, $4394, $4395);
                var $4392 = $4396;
                break;
            case 'Parser.Reply.value':
                var $4397 = self.idx;
                var $4398 = self.code;
                var $4399 = self.val;
                var self = Kind$Parser$spaces($4397)($4398);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4401 = self.idx;
                        var $4402 = self.code;
                        var $4403 = self.err;
                        var $4404 = Parser$Reply$error$($4401, $4402, $4403);
                        var $4400 = $4404;
                        break;
                    case 'Parser.Reply.value':
                        var $4405 = self.idx;
                        var $4406 = self.code;
                        var self = Parser$nat$($4405, $4406);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4408 = self.idx;
                                var $4409 = self.code;
                                var $4410 = self.err;
                                var $4411 = Parser$Reply$error$($4408, $4409, $4410);
                                var $4407 = $4411;
                                break;
                            case 'Parser.Reply.value':
                                var $4412 = self.idx;
                                var $4413 = self.code;
                                var $4414 = self.val;
                                var self = Parser$text$("u", $4412, $4413);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4416 = self.idx;
                                        var $4417 = self.code;
                                        var $4418 = self.err;
                                        var $4419 = Parser$Reply$error$($4416, $4417, $4418);
                                        var $4415 = $4419;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4420 = self.idx;
                                        var $4421 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u32");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4414));
                                        var self = Kind$Parser$stop$($4399, $4420, $4421);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4423 = self.idx;
                                                var $4424 = self.code;
                                                var $4425 = self.err;
                                                var $4426 = Parser$Reply$error$($4423, $4424, $4425);
                                                var $4422 = $4426;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4427 = self.idx;
                                                var $4428 = self.code;
                                                var $4429 = self.val;
                                                var $4430 = Parser$Reply$value$($4427, $4428, Kind$Term$ori$($4429, _term$16));
                                                var $4422 = $4430;
                                                break;
                                        };
                                        var $4415 = $4422;
                                        break;
                                };
                                var $4407 = $4415;
                                break;
                        };
                        var $4400 = $4407;
                        break;
                };
                var $4392 = $4400;
                break;
        };
        return $4392;
    };
    const Kind$Parser$u32 = x0 => x1 => Kind$Parser$u32$(x0, x1);

    function Kind$Parser$u16$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4432 = self.idx;
                var $4433 = self.code;
                var $4434 = self.err;
                var $4435 = Parser$Reply$error$($4432, $4433, $4434);
                var $4431 = $4435;
                break;
            case 'Parser.Reply.value':
                var $4436 = self.idx;
                var $4437 = self.code;
                var $4438 = self.val;
                var self = Kind$Parser$spaces($4436)($4437);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4440 = self.idx;
                        var $4441 = self.code;
                        var $4442 = self.err;
                        var $4443 = Parser$Reply$error$($4440, $4441, $4442);
                        var $4439 = $4443;
                        break;
                    case 'Parser.Reply.value':
                        var $4444 = self.idx;
                        var $4445 = self.code;
                        var self = Parser$nat$($4444, $4445);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4447 = self.idx;
                                var $4448 = self.code;
                                var $4449 = self.err;
                                var $4450 = Parser$Reply$error$($4447, $4448, $4449);
                                var $4446 = $4450;
                                break;
                            case 'Parser.Reply.value':
                                var $4451 = self.idx;
                                var $4452 = self.code;
                                var $4453 = self.val;
                                var self = Parser$text$("s", $4451, $4452);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4455 = self.idx;
                                        var $4456 = self.code;
                                        var $4457 = self.err;
                                        var $4458 = Parser$Reply$error$($4455, $4456, $4457);
                                        var $4454 = $4458;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4459 = self.idx;
                                        var $4460 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u16");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4453));
                                        var self = Kind$Parser$stop$($4438, $4459, $4460);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4462 = self.idx;
                                                var $4463 = self.code;
                                                var $4464 = self.err;
                                                var $4465 = Parser$Reply$error$($4462, $4463, $4464);
                                                var $4461 = $4465;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4466 = self.idx;
                                                var $4467 = self.code;
                                                var $4468 = self.val;
                                                var $4469 = Parser$Reply$value$($4466, $4467, Kind$Term$ori$($4468, _term$16));
                                                var $4461 = $4469;
                                                break;
                                        };
                                        var $4454 = $4461;
                                        break;
                                };
                                var $4446 = $4454;
                                break;
                        };
                        var $4439 = $4446;
                        break;
                };
                var $4431 = $4439;
                break;
        };
        return $4431;
    };
    const Kind$Parser$u16 = x0 => x1 => Kind$Parser$u16$(x0, x1);

    function Kind$Parser$u8$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4471 = self.idx;
                var $4472 = self.code;
                var $4473 = self.err;
                var $4474 = Parser$Reply$error$($4471, $4472, $4473);
                var $4470 = $4474;
                break;
            case 'Parser.Reply.value':
                var $4475 = self.idx;
                var $4476 = self.code;
                var $4477 = self.val;
                var self = Kind$Parser$spaces($4475)($4476);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4479 = self.idx;
                        var $4480 = self.code;
                        var $4481 = self.err;
                        var $4482 = Parser$Reply$error$($4479, $4480, $4481);
                        var $4478 = $4482;
                        break;
                    case 'Parser.Reply.value':
                        var $4483 = self.idx;
                        var $4484 = self.code;
                        var self = Parser$nat$($4483, $4484);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4486 = self.idx;
                                var $4487 = self.code;
                                var $4488 = self.err;
                                var $4489 = Parser$Reply$error$($4486, $4487, $4488);
                                var $4485 = $4489;
                                break;
                            case 'Parser.Reply.value':
                                var $4490 = self.idx;
                                var $4491 = self.code;
                                var $4492 = self.val;
                                var self = Parser$text$("b", $4490, $4491);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4494 = self.idx;
                                        var $4495 = self.code;
                                        var $4496 = self.err;
                                        var $4497 = Parser$Reply$error$($4494, $4495, $4496);
                                        var $4493 = $4497;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4498 = self.idx;
                                        var $4499 = self.code;
                                        var _term$15 = Kind$Term$ref$("Nat.to_u8");
                                        var _term$16 = Kind$Term$app$(_term$15, Kind$Term$nat$($4492));
                                        var self = Kind$Parser$stop$($4477, $4498, $4499);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4501 = self.idx;
                                                var $4502 = self.code;
                                                var $4503 = self.err;
                                                var $4504 = Parser$Reply$error$($4501, $4502, $4503);
                                                var $4500 = $4504;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4505 = self.idx;
                                                var $4506 = self.code;
                                                var $4507 = self.val;
                                                var $4508 = Parser$Reply$value$($4505, $4506, Kind$Term$ori$($4507, _term$16));
                                                var $4500 = $4508;
                                                break;
                                        };
                                        var $4493 = $4500;
                                        break;
                                };
                                var $4485 = $4493;
                                break;
                        };
                        var $4478 = $4485;
                        break;
                };
                var $4470 = $4478;
                break;
        };
        return $4470;
    };
    const Kind$Parser$u8 = x0 => x1 => Kind$Parser$u8$(x0, x1);
    const String$eql = a0 => a1 => (a0 === a1);
    const Kind$Term$typ = ({
        _: 'Kind.Term.typ'
    });

    function Kind$Parser$reference$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4510 = self.idx;
                var $4511 = self.code;
                var $4512 = self.err;
                var $4513 = Parser$Reply$error$($4510, $4511, $4512);
                var $4509 = $4513;
                break;
            case 'Parser.Reply.value':
                var $4514 = self.idx;
                var $4515 = self.code;
                var $4516 = self.val;
                var self = Kind$Parser$name1$($4514, $4515);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4518 = self.idx;
                        var $4519 = self.code;
                        var $4520 = self.err;
                        var $4521 = Parser$Reply$error$($4518, $4519, $4520);
                        var $4517 = $4521;
                        break;
                    case 'Parser.Reply.value':
                        var $4522 = self.idx;
                        var $4523 = self.code;
                        var $4524 = self.val;
                        var self = Kind$Parser$stop$($4516, $4522, $4523);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4526 = self.idx;
                                var $4527 = self.code;
                                var $4528 = self.err;
                                var $4529 = Parser$Reply$error$($4526, $4527, $4528);
                                var $4525 = $4529;
                                break;
                            case 'Parser.Reply.value':
                                var $4530 = self.idx;
                                var $4531 = self.code;
                                var $4532 = self.val;
                                var self = ($4524 === "case");
                                if (self) {
                                    var $4534 = Parser$fail("Reserved keyword.");
                                    var $4533 = $4534;
                                } else {
                                    var self = ($4524 === "do");
                                    if (self) {
                                        var $4536 = Parser$fail("Reserved keyword.");
                                        var $4535 = $4536;
                                    } else {
                                        var self = ($4524 === "if");
                                        if (self) {
                                            var $4538 = Parser$fail("Reserved keyword.");
                                            var $4537 = $4538;
                                        } else {
                                            var self = ($4524 === "with");
                                            if (self) {
                                                var $4540 = Parser$fail("Reserved keyword.");
                                                var $4539 = $4540;
                                            } else {
                                                var self = ($4524 === "let");
                                                if (self) {
                                                    var $4542 = Parser$fail("Reserved keyword.");
                                                    var $4541 = $4542;
                                                } else {
                                                    var self = ($4524 === "def");
                                                    if (self) {
                                                        var $4544 = Parser$fail("Reserved keyword.");
                                                        var $4543 = $4544;
                                                    } else {
                                                        var self = ($4524 === "Type");
                                                        if (self) {
                                                            var $4546 = (_idx$12 => _code$13 => {
                                                                var $4547 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($4532, Kind$Term$typ));
                                                                return $4547;
                                                            });
                                                            var $4545 = $4546;
                                                        } else {
                                                            var self = ($4524 === "true");
                                                            if (self) {
                                                                var $4549 = (_idx$12 => _code$13 => {
                                                                    var $4550 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($4532, Kind$Term$ref$("Bool.true")));
                                                                    return $4550;
                                                                });
                                                                var $4548 = $4549;
                                                            } else {
                                                                var self = ($4524 === "false");
                                                                if (self) {
                                                                    var $4552 = (_idx$12 => _code$13 => {
                                                                        var $4553 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($4532, Kind$Term$ref$("Bool.false")));
                                                                        return $4553;
                                                                    });
                                                                    var $4551 = $4552;
                                                                } else {
                                                                    var self = ($4524 === "unit");
                                                                    if (self) {
                                                                        var $4555 = (_idx$12 => _code$13 => {
                                                                            var $4556 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($4532, Kind$Term$ref$("Unit.new")));
                                                                            return $4556;
                                                                        });
                                                                        var $4554 = $4555;
                                                                    } else {
                                                                        var self = ($4524 === "none");
                                                                        if (self) {
                                                                            var _term$12 = Kind$Term$ref$("Maybe.none");
                                                                            var _term$13 = Kind$Term$app$(_term$12, Kind$Term$hol$(Bits$e));
                                                                            var $4558 = (_idx$14 => _code$15 => {
                                                                                var $4559 = Parser$Reply$value$(_idx$14, _code$15, Kind$Term$ori$($4532, _term$13));
                                                                                return $4559;
                                                                            });
                                                                            var $4557 = $4558;
                                                                        } else {
                                                                            var self = ($4524 === "refl");
                                                                            if (self) {
                                                                                var _term$12 = Kind$Term$ref$("Equal.refl");
                                                                                var _term$13 = Kind$Term$app$(_term$12, Kind$Term$hol$(Bits$e));
                                                                                var _term$14 = Kind$Term$app$(_term$13, Kind$Term$hol$(Bits$e));
                                                                                var $4561 = (_idx$15 => _code$16 => {
                                                                                    var $4562 = Parser$Reply$value$(_idx$15, _code$16, Kind$Term$ori$($4532, _term$14));
                                                                                    return $4562;
                                                                                });
                                                                                var $4560 = $4561;
                                                                            } else {
                                                                                var $4563 = (_idx$12 => _code$13 => {
                                                                                    var $4564 = Parser$Reply$value$(_idx$12, _code$13, Kind$Term$ori$($4532, Kind$Term$ref$($4524)));
                                                                                    return $4564;
                                                                                });
                                                                                var $4560 = $4563;
                                                                            };
                                                                            var $4557 = $4560;
                                                                        };
                                                                        var $4554 = $4557;
                                                                    };
                                                                    var $4551 = $4554;
                                                                };
                                                                var $4548 = $4551;
                                                            };
                                                            var $4545 = $4548;
                                                        };
                                                        var $4543 = $4545;
                                                    };
                                                    var $4541 = $4543;
                                                };
                                                var $4539 = $4541;
                                            };
                                            var $4537 = $4539;
                                        };
                                        var $4535 = $4537;
                                    };
                                    var $4533 = $4535;
                                };
                                var $4533 = $4533($4530)($4531);
                                var $4525 = $4533;
                                break;
                        };
                        var $4517 = $4525;
                        break;
                };
                var $4509 = $4517;
                break;
        };
        return $4509;
    };
    const Kind$Parser$reference = x0 => x1 => Kind$Parser$reference$(x0, x1);
    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));

    function Kind$Parser$application$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$text$("(", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4566 = self.idx;
                var $4567 = self.code;
                var $4568 = self.err;
                var $4569 = Parser$Reply$error$($4566, $4567, $4568);
                var $4565 = $4569;
                break;
            case 'Parser.Reply.value':
                var $4570 = self.idx;
                var $4571 = self.code;
                var self = Parser$until1$(Kind$Parser$text(")"), Kind$Parser$item(Kind$Parser$term), $4570, $4571);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4573 = self.idx;
                        var $4574 = self.code;
                        var $4575 = self.err;
                        var $4576 = Parser$Reply$error$($4573, $4574, $4575);
                        var $4572 = $4576;
                        break;
                    case 'Parser.Reply.value':
                        var $4577 = self.idx;
                        var $4578 = self.code;
                        var $4579 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4577, $4578);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4581 = self.idx;
                                var $4582 = self.code;
                                var $4583 = self.err;
                                var $4584 = Parser$Reply$error$($4581, $4582, $4583);
                                var $4580 = $4584;
                                break;
                            case 'Parser.Reply.value':
                                var $4585 = self.idx;
                                var $4586 = self.code;
                                var $4587 = self.val;
                                var _expr$14 = (() => {
                                    var $4590 = _func$2;
                                    var $4591 = $4579;
                                    let _f$15 = $4590;
                                    let _x$14;
                                    while ($4591._ === 'List.cons') {
                                        _x$14 = $4591.head;
                                        var $4590 = Kind$Term$app$(_f$15, _x$14);
                                        _f$15 = $4590;
                                        $4591 = $4591.tail;
                                    }
                                    return _f$15;
                                })();
                                var $4588 = Parser$Reply$value$($4585, $4586, Kind$Term$ori$($4587, _expr$14));
                                var $4580 = $4588;
                                break;
                        };
                        var $4572 = $4580;
                        break;
                };
                var $4565 = $4572;
                break;
        };
        return $4565;
    };
    const Kind$Parser$application = x0 => x1 => x2 => x3 => Kind$Parser$application$(x0, x1, x2, x3);
    const Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{a}"), List$nil))));

    function Parser$spaces_text$(_text$1, _idx$2, _code$3) {
        var self = Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4593 = self.idx;
                var $4594 = self.code;
                var $4595 = self.err;
                var $4596 = Parser$Reply$error$($4593, $4594, $4595);
                var $4592 = $4596;
                break;
            case 'Parser.Reply.value':
                var $4597 = self.idx;
                var $4598 = self.code;
                var $4599 = Parser$text$(_text$1, $4597, $4598);
                var $4592 = $4599;
                break;
        };
        return $4592;
    };
    const Parser$spaces_text = x0 => x1 => x2 => Parser$spaces_text$(x0, x1, x2);

    function Kind$Parser$application$erased$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$get_index$(_idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4601 = self.idx;
                var $4602 = self.code;
                var $4603 = self.err;
                var $4604 = Parser$Reply$error$($4601, $4602, $4603);
                var $4600 = $4604;
                break;
            case 'Parser.Reply.value':
                var $4605 = self.idx;
                var $4606 = self.code;
                var $4607 = self.val;
                var self = Parser$text$("<", $4605, $4606);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4609 = self.idx;
                        var $4610 = self.code;
                        var $4611 = self.err;
                        var $4612 = Parser$Reply$error$($4609, $4610, $4611);
                        var $4608 = $4612;
                        break;
                    case 'Parser.Reply.value':
                        var $4613 = self.idx;
                        var $4614 = self.code;
                        var self = Parser$until1$(Parser$spaces_text(">"), Kind$Parser$item(Kind$Parser$term), $4613, $4614);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4616 = self.idx;
                                var $4617 = self.code;
                                var $4618 = self.err;
                                var $4619 = Parser$Reply$error$($4616, $4617, $4618);
                                var $4615 = $4619;
                                break;
                            case 'Parser.Reply.value':
                                var $4620 = self.idx;
                                var $4621 = self.code;
                                var $4622 = self.val;
                                var self = Kind$Parser$stop$($4607, $4620, $4621);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4624 = self.idx;
                                        var $4625 = self.code;
                                        var $4626 = self.err;
                                        var $4627 = Parser$Reply$error$($4624, $4625, $4626);
                                        var $4623 = $4627;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4628 = self.idx;
                                        var $4629 = self.code;
                                        var $4630 = self.val;
                                        var _expr$17 = (() => {
                                            var $4633 = _func$2;
                                            var $4634 = $4622;
                                            let _f$18 = $4633;
                                            let _x$17;
                                            while ($4634._ === 'List.cons') {
                                                _x$17 = $4634.head;
                                                var $4633 = Kind$Term$app$(_f$18, _x$17);
                                                _f$18 = $4633;
                                                $4634 = $4634.tail;
                                            }
                                            return _f$18;
                                        })();
                                        var $4631 = Parser$Reply$value$($4628, $4629, Kind$Term$ori$($4630, _expr$17));
                                        var $4623 = $4631;
                                        break;
                                };
                                var $4615 = $4623;
                                break;
                        };
                        var $4608 = $4615;
                        break;
                };
                var $4600 = $4608;
                break;
        };
        return $4600;
    };
    const Kind$Parser$application$erased = x0 => x1 => x2 => x3 => Kind$Parser$application$erased$(x0, x1, x2, x3);

    function Kind$Parser$list_set$(_init$1, _list$2, _idx$3, _code$4) {
        var self = Parser$text$("[", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4636 = self.idx;
                var $4637 = self.code;
                var $4638 = self.err;
                var $4639 = Parser$Reply$error$($4636, $4637, $4638);
                var $4635 = $4639;
                break;
            case 'Parser.Reply.value':
                var $4640 = self.idx;
                var $4641 = self.code;
                var self = Kind$Parser$term$($4640, $4641);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4643 = self.idx;
                        var $4644 = self.code;
                        var $4645 = self.err;
                        var $4646 = Parser$Reply$error$($4643, $4644, $4645);
                        var $4642 = $4646;
                        break;
                    case 'Parser.Reply.value':
                        var $4647 = self.idx;
                        var $4648 = self.code;
                        var $4649 = self.val;
                        var self = Kind$Parser$text$("]", $4647, $4648);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4651 = self.idx;
                                var $4652 = self.code;
                                var $4653 = self.err;
                                var $4654 = Parser$Reply$error$($4651, $4652, $4653);
                                var $4650 = $4654;
                                break;
                            case 'Parser.Reply.value':
                                var $4655 = self.idx;
                                var $4656 = self.code;
                                var self = Kind$Parser$text$("<-", $4655, $4656);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4658 = self.idx;
                                        var $4659 = self.code;
                                        var $4660 = self.err;
                                        var $4661 = Parser$Reply$error$($4658, $4659, $4660);
                                        var $4657 = $4661;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4662 = self.idx;
                                        var $4663 = self.code;
                                        var self = Kind$Parser$term$($4662, $4663);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4665 = self.idx;
                                                var $4666 = self.code;
                                                var $4667 = self.err;
                                                var $4668 = Parser$Reply$error$($4665, $4666, $4667);
                                                var $4664 = $4668;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4669 = self.idx;
                                                var $4670 = self.code;
                                                var $4671 = self.val;
                                                var self = Kind$Parser$stop$(_init$1, $4669, $4670);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4673 = self.idx;
                                                        var $4674 = self.code;
                                                        var $4675 = self.err;
                                                        var $4676 = Parser$Reply$error$($4673, $4674, $4675);
                                                        var $4672 = $4676;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4677 = self.idx;
                                                        var $4678 = self.code;
                                                        var $4679 = self.val;
                                                        var _term$23 = Kind$Term$ref$("List.set");
                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));
                                                        var _term$25 = Kind$Term$app$(_term$24, $4649);
                                                        var _term$26 = Kind$Term$app$(_term$25, $4671);
                                                        var _term$27 = Kind$Term$app$(_term$26, _list$2);
                                                        var $4680 = Parser$Reply$value$($4677, $4678, Kind$Term$ori$($4679, _term$27));
                                                        var $4672 = $4680;
                                                        break;
                                                };
                                                var $4664 = $4672;
                                                break;
                                        };
                                        var $4657 = $4664;
                                        break;
                                };
                                var $4650 = $4657;
                                break;
                        };
                        var $4642 = $4650;
                        break;
                };
                var $4635 = $4642;
                break;
        };
        return $4635;
    };
    const Kind$Parser$list_set = x0 => x1 => x2 => x3 => Kind$Parser$list_set$(x0, x1, x2, x3);

    function Kind$Parser$list_get$(_init$1, _list$2, _idx$3, _code$4) {
        var self = Parser$text$("[", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4682 = self.idx;
                var $4683 = self.code;
                var $4684 = self.err;
                var $4685 = Parser$Reply$error$($4682, $4683, $4684);
                var $4681 = $4685;
                break;
            case 'Parser.Reply.value':
                var $4686 = self.idx;
                var $4687 = self.code;
                var self = Kind$Parser$term$($4686, $4687);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4689 = self.idx;
                        var $4690 = self.code;
                        var $4691 = self.err;
                        var $4692 = Parser$Reply$error$($4689, $4690, $4691);
                        var $4688 = $4692;
                        break;
                    case 'Parser.Reply.value':
                        var $4693 = self.idx;
                        var $4694 = self.code;
                        var $4695 = self.val;
                        var self = Kind$Parser$text$("]", $4693, $4694);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4697 = self.idx;
                                var $4698 = self.code;
                                var $4699 = self.err;
                                var $4700 = Parser$Reply$error$($4697, $4698, $4699);
                                var $4696 = $4700;
                                break;
                            case 'Parser.Reply.value':
                                var $4701 = self.idx;
                                var $4702 = self.code;
                                var self = Kind$Parser$stop$(_init$1, $4701, $4702);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4704 = self.idx;
                                        var $4705 = self.code;
                                        var $4706 = self.err;
                                        var $4707 = Parser$Reply$error$($4704, $4705, $4706);
                                        var $4703 = $4707;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4708 = self.idx;
                                        var $4709 = self.code;
                                        var $4710 = self.val;
                                        var _term$17 = Kind$Term$ref$("List.get");
                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                        var _term$19 = Kind$Term$app$(_term$18, $4695);
                                        var _term$20 = Kind$Term$app$(_term$19, _list$2);
                                        var $4711 = Parser$Reply$value$($4708, $4709, Kind$Term$ori$($4710, _term$20));
                                        var $4703 = $4711;
                                        break;
                                };
                                var $4696 = $4703;
                                break;
                        };
                        var $4688 = $4696;
                        break;
                };
                var $4681 = $4688;
                break;
        };
        return $4681;
    };
    const Kind$Parser$list_get = x0 => x1 => x2 => x3 => Kind$Parser$list_get$(x0, x1, x2, x3);

    function Kind$Parser$map_set$(_init$1, _map$2, _idx$3, _code$4) {
        var self = Parser$text$("{", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4713 = self.idx;
                var $4714 = self.code;
                var $4715 = self.err;
                var $4716 = Parser$Reply$error$($4713, $4714, $4715);
                var $4712 = $4716;
                break;
            case 'Parser.Reply.value':
                var $4717 = self.idx;
                var $4718 = self.code;
                var self = Kind$Parser$term$($4717, $4718);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4720 = self.idx;
                        var $4721 = self.code;
                        var $4722 = self.err;
                        var $4723 = Parser$Reply$error$($4720, $4721, $4722);
                        var $4719 = $4723;
                        break;
                    case 'Parser.Reply.value':
                        var $4724 = self.idx;
                        var $4725 = self.code;
                        var $4726 = self.val;
                        var self = Kind$Parser$text$("}", $4724, $4725);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4728 = self.idx;
                                var $4729 = self.code;
                                var $4730 = self.err;
                                var $4731 = Parser$Reply$error$($4728, $4729, $4730);
                                var $4727 = $4731;
                                break;
                            case 'Parser.Reply.value':
                                var $4732 = self.idx;
                                var $4733 = self.code;
                                var self = Kind$Parser$text$("<-", $4732, $4733);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4735 = self.idx;
                                        var $4736 = self.code;
                                        var $4737 = self.err;
                                        var $4738 = Parser$Reply$error$($4735, $4736, $4737);
                                        var $4734 = $4738;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4739 = self.idx;
                                        var $4740 = self.code;
                                        var self = Kind$Parser$term$($4739, $4740);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4742 = self.idx;
                                                var $4743 = self.code;
                                                var $4744 = self.err;
                                                var $4745 = Parser$Reply$error$($4742, $4743, $4744);
                                                var $4741 = $4745;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4746 = self.idx;
                                                var $4747 = self.code;
                                                var $4748 = self.val;
                                                var self = Kind$Parser$stop$(_init$1, $4746, $4747);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4750 = self.idx;
                                                        var $4751 = self.code;
                                                        var $4752 = self.err;
                                                        var $4753 = Parser$Reply$error$($4750, $4751, $4752);
                                                        var $4749 = $4753;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4754 = self.idx;
                                                        var $4755 = self.code;
                                                        var $4756 = self.val;
                                                        var _term$23 = Kind$Term$ref$("Map.set");
                                                        var _term$24 = Kind$Term$app$(_term$23, Kind$Term$hol$(Bits$e));
                                                        var _term$25 = Kind$Term$app$(_term$24, $4726);
                                                        var _term$26 = Kind$Term$app$(_term$25, $4748);
                                                        var _term$27 = Kind$Term$app$(_term$26, _map$2);
                                                        var $4757 = Parser$Reply$value$($4754, $4755, Kind$Term$ori$($4756, _term$27));
                                                        var $4749 = $4757;
                                                        break;
                                                };
                                                var $4741 = $4749;
                                                break;
                                        };
                                        var $4734 = $4741;
                                        break;
                                };
                                var $4727 = $4734;
                                break;
                        };
                        var $4719 = $4727;
                        break;
                };
                var $4712 = $4719;
                break;
        };
        return $4712;
    };
    const Kind$Parser$map_set = x0 => x1 => x2 => x3 => Kind$Parser$map_set$(x0, x1, x2, x3);

    function Kind$Parser$map_get$(_init$1, _map$2, _idx$3, _code$4) {
        var self = Parser$text$("{", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4759 = self.idx;
                var $4760 = self.code;
                var $4761 = self.err;
                var $4762 = Parser$Reply$error$($4759, $4760, $4761);
                var $4758 = $4762;
                break;
            case 'Parser.Reply.value':
                var $4763 = self.idx;
                var $4764 = self.code;
                var self = Kind$Parser$term$($4763, $4764);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4766 = self.idx;
                        var $4767 = self.code;
                        var $4768 = self.err;
                        var $4769 = Parser$Reply$error$($4766, $4767, $4768);
                        var $4765 = $4769;
                        break;
                    case 'Parser.Reply.value':
                        var $4770 = self.idx;
                        var $4771 = self.code;
                        var $4772 = self.val;
                        var self = Kind$Parser$text$("}", $4770, $4771);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4774 = self.idx;
                                var $4775 = self.code;
                                var $4776 = self.err;
                                var $4777 = Parser$Reply$error$($4774, $4775, $4776);
                                var $4773 = $4777;
                                break;
                            case 'Parser.Reply.value':
                                var $4778 = self.idx;
                                var $4779 = self.code;
                                var self = Kind$Parser$stop$(_init$1, $4778, $4779);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4781 = self.idx;
                                        var $4782 = self.code;
                                        var $4783 = self.err;
                                        var $4784 = Parser$Reply$error$($4781, $4782, $4783);
                                        var $4780 = $4784;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4785 = self.idx;
                                        var $4786 = self.code;
                                        var $4787 = self.val;
                                        var _term$17 = Kind$Term$ref$("Map.get");
                                        var _term$18 = Kind$Term$app$(_term$17, Kind$Term$hol$(Bits$e));
                                        var _term$19 = Kind$Term$app$(_term$18, $4772);
                                        var _term$20 = Kind$Term$app$(_term$19, _map$2);
                                        var $4788 = Parser$Reply$value$($4785, $4786, Kind$Term$ori$($4787, _term$20));
                                        var $4780 = $4788;
                                        break;
                                };
                                var $4773 = $4780;
                                break;
                        };
                        var $4765 = $4773;
                        break;
                };
                var $4758 = $4765;
                break;
        };
        return $4758;
    };
    const Kind$Parser$map_get = x0 => x1 => x2 => x3 => Kind$Parser$map_get$(x0, x1, x2, x3);

    function Kind$Parser$arrow$(_init$1, _xtyp$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("->", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4790 = self.idx;
                var $4791 = self.code;
                var $4792 = self.err;
                var $4793 = Parser$Reply$error$($4790, $4791, $4792);
                var $4789 = $4793;
                break;
            case 'Parser.Reply.value':
                var $4794 = self.idx;
                var $4795 = self.code;
                var self = Kind$Parser$term$($4794, $4795);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4797 = self.idx;
                        var $4798 = self.code;
                        var $4799 = self.err;
                        var $4800 = Parser$Reply$error$($4797, $4798, $4799);
                        var $4796 = $4800;
                        break;
                    case 'Parser.Reply.value':
                        var $4801 = self.idx;
                        var $4802 = self.code;
                        var $4803 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4801, $4802);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4805 = self.idx;
                                var $4806 = self.code;
                                var $4807 = self.err;
                                var $4808 = Parser$Reply$error$($4805, $4806, $4807);
                                var $4804 = $4808;
                                break;
                            case 'Parser.Reply.value':
                                var $4809 = self.idx;
                                var $4810 = self.code;
                                var $4811 = self.val;
                                var $4812 = Parser$Reply$value$($4809, $4810, Kind$Term$ori$($4811, Kind$Term$all$(Bool$false, "", "", _xtyp$2, (_s$14 => _x$15 => {
                                    var $4813 = $4803;
                                    return $4813;
                                }))));
                                var $4804 = $4812;
                                break;
                        };
                        var $4796 = $4804;
                        break;
                };
                var $4789 = $4796;
                break;
        };
        return $4789;
    };
    const Kind$Parser$arrow = x0 => x1 => x2 => x3 => Kind$Parser$arrow$(x0, x1, x2, x3);

    function Kind$Parser$op$(_sym$1, _ref$2, _init$3, _val0$4, _idx$5, _code$6) {
        var self = Kind$Parser$text$(_sym$1, _idx$5, _code$6);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4815 = self.idx;
                var $4816 = self.code;
                var $4817 = self.err;
                var $4818 = Parser$Reply$error$($4815, $4816, $4817);
                var $4814 = $4818;
                break;
            case 'Parser.Reply.value':
                var $4819 = self.idx;
                var $4820 = self.code;
                var self = Kind$Parser$text$(" ", $4819, $4820);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4822 = self.idx;
                        var $4823 = self.code;
                        var $4824 = self.err;
                        var $4825 = Parser$Reply$error$($4822, $4823, $4824);
                        var $4821 = $4825;
                        break;
                    case 'Parser.Reply.value':
                        var $4826 = self.idx;
                        var $4827 = self.code;
                        var self = Kind$Parser$term$($4826, $4827);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4829 = self.idx;
                                var $4830 = self.code;
                                var $4831 = self.err;
                                var $4832 = Parser$Reply$error$($4829, $4830, $4831);
                                var $4828 = $4832;
                                break;
                            case 'Parser.Reply.value':
                                var $4833 = self.idx;
                                var $4834 = self.code;
                                var $4835 = self.val;
                                var self = Kind$Parser$stop$(_init$3, $4833, $4834);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4837 = self.idx;
                                        var $4838 = self.code;
                                        var $4839 = self.err;
                                        var $4840 = Parser$Reply$error$($4837, $4838, $4839);
                                        var $4836 = $4840;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4841 = self.idx;
                                        var $4842 = self.code;
                                        var $4843 = self.val;
                                        var _term$19 = Kind$Term$ref$(_ref$2);
                                        var _term$20 = Kind$Term$app$(_term$19, _val0$4);
                                        var _term$21 = Kind$Term$app$(_term$20, $4835);
                                        var $4844 = Parser$Reply$value$($4841, $4842, Kind$Term$ori$($4843, _term$21));
                                        var $4836 = $4844;
                                        break;
                                };
                                var $4828 = $4836;
                                break;
                        };
                        var $4821 = $4828;
                        break;
                };
                var $4814 = $4821;
                break;
        };
        return $4814;
    };
    const Kind$Parser$op = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Parser$op$(x0, x1, x2, x3, x4, x5);
    const Kind$Parser$add = Kind$Parser$op("+")("Nat.add");
    const Kind$Parser$sub = Kind$Parser$op("-")("Nat.sub");
    const Kind$Parser$mul = Kind$Parser$op("*")("Nat.mul");
    const Kind$Parser$div = Kind$Parser$op("/")("Nat.div");
    const Kind$Parser$mod = Kind$Parser$op("%")("Nat.mod");
    const Kind$Parser$ltn = Kind$Parser$op("<?")("Nat.ltn");
    const Kind$Parser$lte = Kind$Parser$op("<=?")("Nat.lte");
    const Kind$Parser$eql = Kind$Parser$op("=?")("Nat.eql");
    const Kind$Parser$gte = Kind$Parser$op(">=?")("Nat.gte");
    const Kind$Parser$gtn = Kind$Parser$op(">?")("Nat.gtn");
    const Kind$Parser$and = Kind$Parser$op("&&")("Bool.and");
    const Kind$Parser$or = Kind$Parser$op("||")("Bool.or");

    function Kind$Parser$default$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("<>", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4846 = self.idx;
                var $4847 = self.code;
                var $4848 = self.err;
                var $4849 = Parser$Reply$error$($4846, $4847, $4848);
                var $4845 = $4849;
                break;
            case 'Parser.Reply.value':
                var $4850 = self.idx;
                var $4851 = self.code;
                var self = Kind$Parser$term$($4850, $4851);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4853 = self.idx;
                        var $4854 = self.code;
                        var $4855 = self.err;
                        var $4856 = Parser$Reply$error$($4853, $4854, $4855);
                        var $4852 = $4856;
                        break;
                    case 'Parser.Reply.value':
                        var $4857 = self.idx;
                        var $4858 = self.code;
                        var $4859 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4857, $4858);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4861 = self.idx;
                                var $4862 = self.code;
                                var $4863 = self.err;
                                var $4864 = Parser$Reply$error$($4861, $4862, $4863);
                                var $4860 = $4864;
                                break;
                            case 'Parser.Reply.value':
                                var $4865 = self.idx;
                                var $4866 = self.code;
                                var $4867 = self.val;
                                var _term$14 = Kind$Term$ref$("Maybe.default");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $4859);
                                var $4868 = Parser$Reply$value$($4865, $4866, Kind$Term$ori$($4867, _term$17));
                                var $4860 = $4868;
                                break;
                        };
                        var $4852 = $4860;
                        break;
                };
                var $4845 = $4852;
                break;
        };
        return $4845;
    };
    const Kind$Parser$default = x0 => x1 => x2 => x3 => Kind$Parser$default$(x0, x1, x2, x3);

    function Kind$Parser$cons$(_init$1, _head$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("&", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4870 = self.idx;
                var $4871 = self.code;
                var $4872 = self.err;
                var $4873 = Parser$Reply$error$($4870, $4871, $4872);
                var $4869 = $4873;
                break;
            case 'Parser.Reply.value':
                var $4874 = self.idx;
                var $4875 = self.code;
                var self = Kind$Parser$term$($4874, $4875);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4877 = self.idx;
                        var $4878 = self.code;
                        var $4879 = self.err;
                        var $4880 = Parser$Reply$error$($4877, $4878, $4879);
                        var $4876 = $4880;
                        break;
                    case 'Parser.Reply.value':
                        var $4881 = self.idx;
                        var $4882 = self.code;
                        var $4883 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4881, $4882);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4885 = self.idx;
                                var $4886 = self.code;
                                var $4887 = self.err;
                                var $4888 = Parser$Reply$error$($4885, $4886, $4887);
                                var $4884 = $4888;
                                break;
                            case 'Parser.Reply.value':
                                var $4889 = self.idx;
                                var $4890 = self.code;
                                var _term$14 = Kind$Term$ref$("List.cons");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _head$2);
                                var _term$17 = Kind$Term$app$(_term$16, $4883);
                                var self = Kind$Parser$stop$(_init$1, $4889, $4890);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4892 = self.idx;
                                        var $4893 = self.code;
                                        var $4894 = self.err;
                                        var $4895 = Parser$Reply$error$($4892, $4893, $4894);
                                        var $4891 = $4895;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4896 = self.idx;
                                        var $4897 = self.code;
                                        var $4898 = self.val;
                                        var $4899 = Parser$Reply$value$($4896, $4897, Kind$Term$ori$($4898, _term$17));
                                        var $4891 = $4899;
                                        break;
                                };
                                var $4884 = $4891;
                                break;
                        };
                        var $4876 = $4884;
                        break;
                };
                var $4869 = $4876;
                break;
        };
        return $4869;
    };
    const Kind$Parser$cons = x0 => x1 => x2 => x3 => Kind$Parser$cons$(x0, x1, x2, x3);

    function Kind$Parser$concat$(_init$1, _lst0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("++", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4901 = self.idx;
                var $4902 = self.code;
                var $4903 = self.err;
                var $4904 = Parser$Reply$error$($4901, $4902, $4903);
                var $4900 = $4904;
                break;
            case 'Parser.Reply.value':
                var $4905 = self.idx;
                var $4906 = self.code;
                var self = Kind$Parser$term$($4905, $4906);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4908 = self.idx;
                        var $4909 = self.code;
                        var $4910 = self.err;
                        var $4911 = Parser$Reply$error$($4908, $4909, $4910);
                        var $4907 = $4911;
                        break;
                    case 'Parser.Reply.value':
                        var $4912 = self.idx;
                        var $4913 = self.code;
                        var $4914 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4912, $4913);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4916 = self.idx;
                                var $4917 = self.code;
                                var $4918 = self.err;
                                var $4919 = Parser$Reply$error$($4916, $4917, $4918);
                                var $4915 = $4919;
                                break;
                            case 'Parser.Reply.value':
                                var $4920 = self.idx;
                                var $4921 = self.code;
                                var _term$14 = Kind$Term$ref$("List.concat");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _lst0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $4914);
                                var self = Kind$Parser$stop$(_init$1, $4920, $4921);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4923 = self.idx;
                                        var $4924 = self.code;
                                        var $4925 = self.err;
                                        var $4926 = Parser$Reply$error$($4923, $4924, $4925);
                                        var $4922 = $4926;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4927 = self.idx;
                                        var $4928 = self.code;
                                        var $4929 = self.val;
                                        var $4930 = Parser$Reply$value$($4927, $4928, Kind$Term$ori$($4929, _term$17));
                                        var $4922 = $4930;
                                        break;
                                };
                                var $4915 = $4922;
                                break;
                        };
                        var $4907 = $4915;
                        break;
                };
                var $4900 = $4907;
                break;
        };
        return $4900;
    };
    const Kind$Parser$concat = x0 => x1 => x2 => x3 => Kind$Parser$concat$(x0, x1, x2, x3);

    function Kind$Parser$string_concat$(_init$1, _str0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("|", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4932 = self.idx;
                var $4933 = self.code;
                var $4934 = self.err;
                var $4935 = Parser$Reply$error$($4932, $4933, $4934);
                var $4931 = $4935;
                break;
            case 'Parser.Reply.value':
                var $4936 = self.idx;
                var $4937 = self.code;
                var self = Kind$Parser$term$($4936, $4937);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4939 = self.idx;
                        var $4940 = self.code;
                        var $4941 = self.err;
                        var $4942 = Parser$Reply$error$($4939, $4940, $4941);
                        var $4938 = $4942;
                        break;
                    case 'Parser.Reply.value':
                        var $4943 = self.idx;
                        var $4944 = self.code;
                        var $4945 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4943, $4944);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4947 = self.idx;
                                var $4948 = self.code;
                                var $4949 = self.err;
                                var $4950 = Parser$Reply$error$($4947, $4948, $4949);
                                var $4946 = $4950;
                                break;
                            case 'Parser.Reply.value':
                                var $4951 = self.idx;
                                var $4952 = self.code;
                                var _term$14 = Kind$Term$ref$("String.concat");
                                var _term$15 = Kind$Term$app$(_term$14, _str0$2);
                                var _term$16 = Kind$Term$app$(_term$15, $4945);
                                var self = Kind$Parser$stop$(_init$1, $4951, $4952);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4954 = self.idx;
                                        var $4955 = self.code;
                                        var $4956 = self.err;
                                        var $4957 = Parser$Reply$error$($4954, $4955, $4956);
                                        var $4953 = $4957;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4958 = self.idx;
                                        var $4959 = self.code;
                                        var $4960 = self.val;
                                        var $4961 = Parser$Reply$value$($4958, $4959, Kind$Term$ori$($4960, _term$16));
                                        var $4953 = $4961;
                                        break;
                                };
                                var $4946 = $4953;
                                break;
                        };
                        var $4938 = $4946;
                        break;
                };
                var $4931 = $4938;
                break;
        };
        return $4931;
    };
    const Kind$Parser$string_concat = x0 => x1 => x2 => x3 => Kind$Parser$string_concat$(x0, x1, x2, x3);

    function Kind$Parser$sigma$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("~", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4963 = self.idx;
                var $4964 = self.code;
                var $4965 = self.err;
                var $4966 = Parser$Reply$error$($4963, $4964, $4965);
                var $4962 = $4966;
                break;
            case 'Parser.Reply.value':
                var $4967 = self.idx;
                var $4968 = self.code;
                var self = Kind$Parser$term$($4967, $4968);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4970 = self.idx;
                        var $4971 = self.code;
                        var $4972 = self.err;
                        var $4973 = Parser$Reply$error$($4970, $4971, $4972);
                        var $4969 = $4973;
                        break;
                    case 'Parser.Reply.value':
                        var $4974 = self.idx;
                        var $4975 = self.code;
                        var $4976 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4974, $4975);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4978 = self.idx;
                                var $4979 = self.code;
                                var $4980 = self.err;
                                var $4981 = Parser$Reply$error$($4978, $4979, $4980);
                                var $4977 = $4981;
                                break;
                            case 'Parser.Reply.value':
                                var $4982 = self.idx;
                                var $4983 = self.code;
                                var $4984 = self.val;
                                var _term$14 = Kind$Term$ref$("Sigma.new");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, Kind$Term$hol$(Bits$e));
                                var _term$17 = Kind$Term$app$(_term$16, _val0$2);
                                var _term$18 = Kind$Term$app$(_term$17, $4976);
                                var $4985 = Parser$Reply$value$($4982, $4983, Kind$Term$ori$($4984, _term$18));
                                var $4977 = $4985;
                                break;
                        };
                        var $4969 = $4977;
                        break;
                };
                var $4962 = $4969;
                break;
        };
        return $4962;
    };
    const Kind$Parser$sigma = x0 => x1 => x2 => x3 => Kind$Parser$sigma$(x0, x1, x2, x3);

    function Kind$Parser$equality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("==", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4987 = self.idx;
                var $4988 = self.code;
                var $4989 = self.err;
                var $4990 = Parser$Reply$error$($4987, $4988, $4989);
                var $4986 = $4990;
                break;
            case 'Parser.Reply.value':
                var $4991 = self.idx;
                var $4992 = self.code;
                var self = Kind$Parser$term$($4991, $4992);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4994 = self.idx;
                        var $4995 = self.code;
                        var $4996 = self.err;
                        var $4997 = Parser$Reply$error$($4994, $4995, $4996);
                        var $4993 = $4997;
                        break;
                    case 'Parser.Reply.value':
                        var $4998 = self.idx;
                        var $4999 = self.code;
                        var $5000 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $4998, $4999);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5002 = self.idx;
                                var $5003 = self.code;
                                var $5004 = self.err;
                                var $5005 = Parser$Reply$error$($5002, $5003, $5004);
                                var $5001 = $5005;
                                break;
                            case 'Parser.Reply.value':
                                var $5006 = self.idx;
                                var $5007 = self.code;
                                var $5008 = self.val;
                                var _term$14 = Kind$Term$ref$("Equal");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5000);
                                var $5009 = Parser$Reply$value$($5006, $5007, Kind$Term$ori$($5008, _term$17));
                                var $5001 = $5009;
                                break;
                        };
                        var $4993 = $5001;
                        break;
                };
                var $4986 = $4993;
                break;
        };
        return $4986;
    };
    const Kind$Parser$equality = x0 => x1 => x2 => x3 => Kind$Parser$equality$(x0, x1, x2, x3);

    function Kind$Parser$inequality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("!=", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5011 = self.idx;
                var $5012 = self.code;
                var $5013 = self.err;
                var $5014 = Parser$Reply$error$($5011, $5012, $5013);
                var $5010 = $5014;
                break;
            case 'Parser.Reply.value':
                var $5015 = self.idx;
                var $5016 = self.code;
                var self = Kind$Parser$term$($5015, $5016);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5018 = self.idx;
                        var $5019 = self.code;
                        var $5020 = self.err;
                        var $5021 = Parser$Reply$error$($5018, $5019, $5020);
                        var $5017 = $5021;
                        break;
                    case 'Parser.Reply.value':
                        var $5022 = self.idx;
                        var $5023 = self.code;
                        var $5024 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5022, $5023);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5026 = self.idx;
                                var $5027 = self.code;
                                var $5028 = self.err;
                                var $5029 = Parser$Reply$error$($5026, $5027, $5028);
                                var $5025 = $5029;
                                break;
                            case 'Parser.Reply.value':
                                var $5030 = self.idx;
                                var $5031 = self.code;
                                var $5032 = self.val;
                                var _term$14 = Kind$Term$ref$("Equal");
                                var _term$15 = Kind$Term$app$(_term$14, Kind$Term$hol$(Bits$e));
                                var _term$16 = Kind$Term$app$(_term$15, _val0$2);
                                var _term$17 = Kind$Term$app$(_term$16, $5024);
                                var _term$18 = Kind$Term$app$(Kind$Term$ref$("Not"), _term$17);
                                var $5033 = Parser$Reply$value$($5030, $5031, Kind$Term$ori$($5032, _term$18));
                                var $5025 = $5033;
                                break;
                        };
                        var $5017 = $5025;
                        break;
                };
                var $5010 = $5017;
                break;
        };
        return $5010;
    };
    const Kind$Parser$inequality = x0 => x1 => x2 => x3 => Kind$Parser$inequality$(x0, x1, x2, x3);

    function Kind$Parser$rewrite$(_init$1, _subt$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5035 = self.idx;
                var $5036 = self.code;
                var $5037 = self.err;
                var $5038 = Parser$Reply$error$($5035, $5036, $5037);
                var $5034 = $5038;
                break;
            case 'Parser.Reply.value':
                var $5039 = self.idx;
                var $5040 = self.code;
                var self = Kind$Parser$text$("rewrite", $5039, $5040);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5042 = self.idx;
                        var $5043 = self.code;
                        var $5044 = self.err;
                        var $5045 = Parser$Reply$error$($5042, $5043, $5044);
                        var $5041 = $5045;
                        break;
                    case 'Parser.Reply.value':
                        var $5046 = self.idx;
                        var $5047 = self.code;
                        var self = Kind$Parser$name1$($5046, $5047);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5049 = self.idx;
                                var $5050 = self.code;
                                var $5051 = self.err;
                                var $5052 = Parser$Reply$error$($5049, $5050, $5051);
                                var $5048 = $5052;
                                break;
                            case 'Parser.Reply.value':
                                var $5053 = self.idx;
                                var $5054 = self.code;
                                var $5055 = self.val;
                                var self = Kind$Parser$text$("in", $5053, $5054);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5057 = self.idx;
                                        var $5058 = self.code;
                                        var $5059 = self.err;
                                        var $5060 = Parser$Reply$error$($5057, $5058, $5059);
                                        var $5056 = $5060;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5061 = self.idx;
                                        var $5062 = self.code;
                                        var self = Kind$Parser$term$($5061, $5062);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5064 = self.idx;
                                                var $5065 = self.code;
                                                var $5066 = self.err;
                                                var $5067 = Parser$Reply$error$($5064, $5065, $5066);
                                                var $5063 = $5067;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5068 = self.idx;
                                                var $5069 = self.code;
                                                var $5070 = self.val;
                                                var self = Kind$Parser$text$("with", $5068, $5069);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5072 = self.idx;
                                                        var $5073 = self.code;
                                                        var $5074 = self.err;
                                                        var $5075 = Parser$Reply$error$($5072, $5073, $5074);
                                                        var $5071 = $5075;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5076 = self.idx;
                                                        var $5077 = self.code;
                                                        var self = Kind$Parser$term$($5076, $5077);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $5079 = self.idx;
                                                                var $5080 = self.code;
                                                                var $5081 = self.err;
                                                                var $5082 = Parser$Reply$error$($5079, $5080, $5081);
                                                                var $5078 = $5082;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $5083 = self.idx;
                                                                var $5084 = self.code;
                                                                var $5085 = self.val;
                                                                var self = Kind$Parser$stop$(_init$1, $5083, $5084);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $5087 = self.idx;
                                                                        var $5088 = self.code;
                                                                        var $5089 = self.err;
                                                                        var $5090 = Parser$Reply$error$($5087, $5088, $5089);
                                                                        var $5086 = $5090;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $5091 = self.idx;
                                                                        var $5092 = self.code;
                                                                        var $5093 = self.val;
                                                                        var _term$29 = Kind$Term$ref$("Equal.rewrite");
                                                                        var _term$30 = Kind$Term$app$(_term$29, Kind$Term$hol$(Bits$e));
                                                                        var _term$31 = Kind$Term$app$(_term$30, Kind$Term$hol$(Bits$e));
                                                                        var _term$32 = Kind$Term$app$(_term$31, Kind$Term$hol$(Bits$e));
                                                                        var _term$33 = Kind$Term$app$(_term$32, $5085);
                                                                        var _term$34 = Kind$Term$app$(_term$33, Kind$Term$lam$($5055, (_x$34 => {
                                                                            var $5095 = $5070;
                                                                            return $5095;
                                                                        })));
                                                                        var _term$35 = Kind$Term$app$(_term$34, _subt$2);
                                                                        var $5094 = Parser$Reply$value$($5091, $5092, Kind$Term$ori$($5093, _term$35));
                                                                        var $5086 = $5094;
                                                                        break;
                                                                };
                                                                var $5078 = $5086;
                                                                break;
                                                        };
                                                        var $5071 = $5078;
                                                        break;
                                                };
                                                var $5063 = $5071;
                                                break;
                                        };
                                        var $5056 = $5063;
                                        break;
                                };
                                var $5048 = $5056;
                                break;
                        };
                        var $5041 = $5048;
                        break;
                };
                var $5034 = $5041;
                break;
        };
        return $5034;
    };
    const Kind$Parser$rewrite = x0 => x1 => x2 => x3 => Kind$Parser$rewrite$(x0, x1, x2, x3);

    function Kind$Term$ann$(_done$1, _term$2, _type$3) {
        var $5096 = ({
            _: 'Kind.Term.ann',
            'done': _done$1,
            'term': _term$2,
            'type': _type$3
        });
        return $5096;
    };
    const Kind$Term$ann = x0 => x1 => x2 => Kind$Term$ann$(x0, x1, x2);

    function Kind$Parser$annotation$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5098 = self.idx;
                var $5099 = self.code;
                var $5100 = self.err;
                var $5101 = Parser$Reply$error$($5098, $5099, $5100);
                var $5097 = $5101;
                break;
            case 'Parser.Reply.value':
                var $5102 = self.idx;
                var $5103 = self.code;
                var self = Kind$Parser$term$($5102, $5103);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5105 = self.idx;
                        var $5106 = self.code;
                        var $5107 = self.err;
                        var $5108 = Parser$Reply$error$($5105, $5106, $5107);
                        var $5104 = $5108;
                        break;
                    case 'Parser.Reply.value':
                        var $5109 = self.idx;
                        var $5110 = self.code;
                        var $5111 = self.val;
                        var self = Kind$Parser$stop$(_init$1, $5109, $5110);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5113 = self.idx;
                                var $5114 = self.code;
                                var $5115 = self.err;
                                var $5116 = Parser$Reply$error$($5113, $5114, $5115);
                                var $5112 = $5116;
                                break;
                            case 'Parser.Reply.value':
                                var $5117 = self.idx;
                                var $5118 = self.code;
                                var $5119 = self.val;
                                var $5120 = Parser$Reply$value$($5117, $5118, Kind$Term$ori$($5119, Kind$Term$ann$(Bool$false, _term$2, $5111)));
                                var $5112 = $5120;
                                break;
                        };
                        var $5104 = $5112;
                        break;
                };
                var $5097 = $5104;
                break;
        };
        return $5097;
    };
    const Kind$Parser$annotation = x0 => x1 => x2 => x3 => Kind$Parser$annotation$(x0, x1, x2, x3);

    function Kind$Parser$application$hole$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$("!", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5122 = self.idx;
                var $5123 = self.code;
                var $5124 = self.err;
                var $5125 = Parser$Reply$error$($5122, $5123, $5124);
                var $5121 = $5125;
                break;
            case 'Parser.Reply.value':
                var $5126 = self.idx;
                var $5127 = self.code;
                var self = Kind$Parser$stop$(_init$1, $5126, $5127);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5129 = self.idx;
                        var $5130 = self.code;
                        var $5131 = self.err;
                        var $5132 = Parser$Reply$error$($5129, $5130, $5131);
                        var $5128 = $5132;
                        break;
                    case 'Parser.Reply.value':
                        var $5133 = self.idx;
                        var $5134 = self.code;
                        var $5135 = self.val;
                        var $5136 = Parser$Reply$value$($5133, $5134, Kind$Term$ori$($5135, Kind$Term$app$(_term$2, Kind$Term$hol$(Bits$e))));
                        var $5128 = $5136;
                        break;
                };
                var $5121 = $5128;
                break;
        };
        return $5121;
    };
    const Kind$Parser$application$hole = x0 => x1 => x2 => x3 => Kind$Parser$application$hole$(x0, x1, x2, x3);

    function Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4) {
        var Kind$Parser$suffix$ = (_init$1, _term$2, _idx$3, _code$4) => ({
            ctr: 'TCO',
            arg: [_init$1, _term$2, _idx$3, _code$4]
        });
        var Kind$Parser$suffix = _init$1 => _term$2 => _idx$3 => _code$4 => Kind$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4);
        var arg = [_init$1, _term$2, _idx$3, _code$4];
        while (true) {
            let [_init$1, _term$2, _idx$3, _code$4] = arg;
            var R = (() => {
                var _suffix_parser$5 = Parser$first_of$(List$cons$(Kind$Parser$application(_init$1)(_term$2), List$cons$(Kind$Parser$application$erased(_init$1)(_term$2), List$cons$(Kind$Parser$list_set(_init$1)(_term$2), List$cons$(Kind$Parser$list_get(_init$1)(_term$2), List$cons$(Kind$Parser$map_set(_init$1)(_term$2), List$cons$(Kind$Parser$map_get(_init$1)(_term$2), List$cons$(Kind$Parser$arrow(_init$1)(_term$2), List$cons$(Kind$Parser$add(_init$1)(_term$2), List$cons$(Kind$Parser$sub(_init$1)(_term$2), List$cons$(Kind$Parser$mul(_init$1)(_term$2), List$cons$(Kind$Parser$div(_init$1)(_term$2), List$cons$(Kind$Parser$mod(_init$1)(_term$2), List$cons$(Kind$Parser$ltn(_init$1)(_term$2), List$cons$(Kind$Parser$lte(_init$1)(_term$2), List$cons$(Kind$Parser$eql(_init$1)(_term$2), List$cons$(Kind$Parser$gte(_init$1)(_term$2), List$cons$(Kind$Parser$gtn(_init$1)(_term$2), List$cons$(Kind$Parser$and(_init$1)(_term$2), List$cons$(Kind$Parser$or(_init$1)(_term$2), List$cons$(Kind$Parser$default(_init$1)(_term$2), List$cons$(Kind$Parser$cons(_init$1)(_term$2), List$cons$(Kind$Parser$concat(_init$1)(_term$2), List$cons$(Kind$Parser$string_concat(_init$1)(_term$2), List$cons$(Kind$Parser$sigma(_init$1)(_term$2), List$cons$(Kind$Parser$equality(_init$1)(_term$2), List$cons$(Kind$Parser$inequality(_init$1)(_term$2), List$cons$(Kind$Parser$rewrite(_init$1)(_term$2), List$cons$(Kind$Parser$annotation(_init$1)(_term$2), List$cons$(Kind$Parser$application$hole(_init$1)(_term$2), List$nil))))))))))))))))))))))))))))));
                var self = _suffix_parser$5(_idx$3)(_code$4);
                switch (self._) {
                    case 'Parser.Reply.value':
                        var $5138 = self.idx;
                        var $5139 = self.code;
                        var $5140 = self.val;
                        var $5141 = Kind$Parser$suffix$(_init$1, $5140, $5138, $5139);
                        var $5137 = $5141;
                        break;
                    case 'Parser.Reply.error':
                        var $5142 = Parser$Reply$value$(_idx$3, _code$4, _term$2);
                        var $5137 = $5142;
                        break;
                };
                return $5137;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Parser$suffix = x0 => x1 => x2 => x3 => Kind$Parser$suffix$(x0, x1, x2, x3);

    function Kind$Parser$term$(_idx$1, _code$2) {
        var self = Kind$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5144 = self.idx;
                var $5145 = self.code;
                var $5146 = self.err;
                var $5147 = Parser$Reply$error$($5144, $5145, $5146);
                var $5143 = $5147;
                break;
            case 'Parser.Reply.value':
                var $5148 = self.idx;
                var $5149 = self.code;
                var $5150 = self.val;
                var self = Parser$first_of$(List$cons$(Kind$Parser$forall, List$cons$(Kind$Parser$lambda, List$cons$(Kind$Parser$lambda$erased, List$cons$(Kind$Parser$lambda$nameless, List$cons$(Kind$Parser$parenthesis, List$cons$(Kind$Parser$letforrange$u32, List$cons$(Kind$Parser$letforrange$u32$with, List$cons$(Kind$Parser$letforrange$nat, List$cons$(Kind$Parser$letforrange$nat$with, List$cons$(Kind$Parser$letforin, List$cons$(Kind$Parser$letforin$with, List$cons$(Kind$Parser$letwhile, List$cons$(Kind$Parser$letwhile$with, List$cons$(Kind$Parser$let, List$cons$(Kind$Parser$let$omit, List$cons$(Kind$Parser$getwhile, List$cons$(Kind$Parser$getwhile$with, List$cons$(Kind$Parser$get, List$cons$(Kind$Parser$get$omit, List$cons$(Kind$Parser$def, List$cons$(Kind$Parser$goal_rewrite, List$cons$(Kind$Parser$if, List$cons$(Kind$Parser$char, List$cons$(Kind$Parser$string, List$cons$(Kind$Parser$pair, List$cons$(Kind$Parser$sigma$type, List$cons$(Kind$Parser$some, List$cons$(Kind$Parser$not, List$cons$(Kind$Parser$left, List$cons$(Kind$Parser$right, List$cons$(Kind$Parser$apply, List$cons$(Kind$Parser$chain, List$cons$(Kind$Parser$mirror, List$cons$(Kind$Parser$list, List$cons$(Kind$Parser$map, List$cons$(Kind$Parser$log, List$cons$(Kind$Parser$do, List$cons$(Kind$Parser$case, List$cons$(Kind$Parser$open, List$cons$(Kind$Parser$without, List$cons$(Kind$Parser$switch, List$cons$(Kind$Parser$goal, List$cons$(Kind$Parser$hole, List$cons$(Kind$Parser$float$64, List$cons$(Kind$Parser$float$32, List$cons$(Kind$Parser$machine_integer$signed$(256n), List$cons$(Kind$Parser$machine_integer$signed$(128n), List$cons$(Kind$Parser$machine_integer$signed$(64n), List$cons$(Kind$Parser$machine_integer$signed$(32n), List$cons$(Kind$Parser$machine_integer$signed$(16n), List$cons$(Kind$Parser$machine_integer$signed$(8n), List$cons$(Kind$Parser$int, List$cons$(Kind$Parser$machine_integer$unsigned$(256n), List$cons$(Kind$Parser$machine_integer$unsigned$(128n), List$cons$(Kind$Parser$machine_integer$unsigned$(64n), List$cons$(Kind$Parser$machine_integer$unsigned$(32n), List$cons$(Kind$Parser$machine_integer$unsigned$(16n), List$cons$(Kind$Parser$machine_integer$unsigned$(8n), List$cons$(Kind$Parser$u64, List$cons$(Kind$Parser$u32, List$cons$(Kind$Parser$u16, List$cons$(Kind$Parser$u8, List$cons$(Kind$Parser$nat, List$cons$(Kind$Parser$reference, List$nil)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))($5148)($5149);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5152 = self.idx;
                        var $5153 = self.code;
                        var $5154 = self.err;
                        var $5155 = Parser$Reply$error$($5152, $5153, $5154);
                        var $5151 = $5155;
                        break;
                    case 'Parser.Reply.value':
                        var $5156 = self.idx;
                        var $5157 = self.code;
                        var $5158 = self.val;
                        var $5159 = Kind$Parser$suffix$($5150, $5158, $5156, $5157);
                        var $5151 = $5159;
                        break;
                };
                var $5143 = $5151;
                break;
        };
        return $5143;
    };
    const Kind$Parser$term = x0 => x1 => Kind$Parser$term$(x0, x1);

    function Kind$Parser$name_term$(_sep$1, _idx$2, _code$3) {
        var self = Kind$Parser$name$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5161 = self.idx;
                var $5162 = self.code;
                var $5163 = self.err;
                var $5164 = Parser$Reply$error$($5161, $5162, $5163);
                var $5160 = $5164;
                break;
            case 'Parser.Reply.value':
                var $5165 = self.idx;
                var $5166 = self.code;
                var $5167 = self.val;
                var self = Kind$Parser$text$(_sep$1, $5165, $5166);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5169 = self.idx;
                        var $5170 = self.code;
                        var $5171 = self.err;
                        var $5172 = Parser$Reply$error$($5169, $5170, $5171);
                        var $5168 = $5172;
                        break;
                    case 'Parser.Reply.value':
                        var $5173 = self.idx;
                        var $5174 = self.code;
                        var self = Kind$Parser$term$($5173, $5174);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5176 = self.idx;
                                var $5177 = self.code;
                                var $5178 = self.err;
                                var $5179 = Parser$Reply$error$($5176, $5177, $5178);
                                var $5175 = $5179;
                                break;
                            case 'Parser.Reply.value':
                                var $5180 = self.idx;
                                var $5181 = self.code;
                                var $5182 = self.val;
                                var $5183 = Parser$Reply$value$($5180, $5181, Pair$new$($5167, $5182));
                                var $5175 = $5183;
                                break;
                        };
                        var $5168 = $5175;
                        break;
                };
                var $5160 = $5168;
                break;
        };
        return $5160;
    };
    const Kind$Parser$name_term = x0 => x1 => x2 => Kind$Parser$name_term$(x0, x1, x2);

    function Kind$Binder$new$(_eras$1, _name$2, _term$3) {
        var $5184 = ({
            _: 'Kind.Binder.new',
            'eras': _eras$1,
            'name': _name$2,
            'term': _term$3
        });
        return $5184;
    };
    const Kind$Binder$new = x0 => x1 => x2 => Kind$Binder$new$(x0, x1, x2);

    function Kind$Parser$binder$homo$(_sep$1, _eras$2, _idx$3, _code$4) {
        var self = Kind$Parser$text$((() => {
            var self = _eras$2;
            if (self) {
                var $5186 = "<";
                return $5186;
            } else {
                var $5187 = "(";
                return $5187;
            };
        })(), _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5188 = self.idx;
                var $5189 = self.code;
                var $5190 = self.err;
                var $5191 = Parser$Reply$error$($5188, $5189, $5190);
                var $5185 = $5191;
                break;
            case 'Parser.Reply.value':
                var $5192 = self.idx;
                var $5193 = self.code;
                var self = Parser$until1$(Kind$Parser$text((() => {
                    var self = _eras$2;
                    if (self) {
                        var $5195 = ">";
                        return $5195;
                    } else {
                        var $5196 = ")";
                        return $5196;
                    };
                })()), Kind$Parser$item(Kind$Parser$name_term(_sep$1)), $5192, $5193);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5197 = self.idx;
                        var $5198 = self.code;
                        var $5199 = self.err;
                        var $5200 = Parser$Reply$error$($5197, $5198, $5199);
                        var $5194 = $5200;
                        break;
                    case 'Parser.Reply.value':
                        var $5201 = self.idx;
                        var $5202 = self.code;
                        var $5203 = self.val;
                        var $5204 = Parser$Reply$value$($5201, $5202, List$mapped$($5203, (_pair$11 => {
                            var self = _pair$11;
                            switch (self._) {
                                case 'Pair.new':
                                    var $5206 = self.fst;
                                    var $5207 = self.snd;
                                    var $5208 = Kind$Binder$new$(_eras$2, $5206, $5207);
                                    var $5205 = $5208;
                                    break;
                            };
                            return $5205;
                        })));
                        var $5194 = $5204;
                        break;
                };
                var $5185 = $5194;
                break;
        };
        return $5185;
    };
    const Kind$Parser$binder$homo = x0 => x1 => x2 => x3 => Kind$Parser$binder$homo$(x0, x1, x2, x3);

    function List$concat$(_as$2, _bs$3) {
        var self = _as$2;
        switch (self._) {
            case 'List.cons':
                var $5210 = self.head;
                var $5211 = self.tail;
                var $5212 = List$cons$($5210, List$concat$($5211, _bs$3));
                var $5209 = $5212;
                break;
            case 'List.nil':
                var $5213 = _bs$3;
                var $5209 = $5213;
                break;
        };
        return $5209;
    };
    const List$concat = x0 => x1 => List$concat$(x0, x1);

    function List$flatten$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $5215 = self.head;
                var $5216 = self.tail;
                var $5217 = List$concat$($5215, List$flatten$($5216));
                var $5214 = $5217;
                break;
            case 'List.nil':
                var $5218 = List$nil;
                var $5214 = $5218;
                break;
        };
        return $5214;
    };
    const List$flatten = x0 => List$flatten$(x0);

    function Kind$Parser$binder$(_sep$1, _idx$2, _code$3) {
        var self = Parser$many1$(Parser$first_of$(List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$true), List$cons$(Kind$Parser$binder$homo(_sep$1)(Bool$false), List$nil))), _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5220 = self.idx;
                var $5221 = self.code;
                var $5222 = self.err;
                var $5223 = Parser$Reply$error$($5220, $5221, $5222);
                var $5219 = $5223;
                break;
            case 'Parser.Reply.value':
                var $5224 = self.idx;
                var $5225 = self.code;
                var $5226 = self.val;
                var $5227 = Parser$Reply$value$($5224, $5225, List$flatten$($5226));
                var $5219 = $5227;
                break;
        };
        return $5219;
    };
    const Kind$Parser$binder = x0 => x1 => x2 => Kind$Parser$binder$(x0, x1, x2);
    const List$length = a0 => (list_length(a0));

    function Kind$Parser$make_forall$(_binds$1, _body$2) {
        var self = _binds$1;
        switch (self._) {
            case 'List.cons':
                var $5229 = self.head;
                var $5230 = self.tail;
                var self = $5229;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5232 = self.eras;
                        var $5233 = self.name;
                        var $5234 = self.term;
                        var $5235 = Kind$Term$all$($5232, "", $5233, $5234, (_s$8 => _x$9 => {
                            var $5236 = Kind$Parser$make_forall$($5230, _body$2);
                            return $5236;
                        }));
                        var $5231 = $5235;
                        break;
                };
                var $5228 = $5231;
                break;
            case 'List.nil':
                var $5237 = _body$2;
                var $5228 = $5237;
                break;
        };
        return $5228;
    };
    const Kind$Parser$make_forall = x0 => x1 => Kind$Parser$make_forall$(x0, x1);

    function List$at_last$(_index$2, _list$3) {
        var $5238 = List$at$(_index$2, List$reverse$(_list$3));
        return $5238;
    };
    const List$at_last = x0 => x1 => List$at_last$(x0, x1);

    function Kind$Term$var$(_name$1, _indx$2) {
        var $5239 = ({
            _: 'Kind.Term.var',
            'name': _name$1,
            'indx': _indx$2
        });
        return $5239;
    };
    const Kind$Term$var = x0 => x1 => Kind$Term$var$(x0, x1);

    function Kind$Context$get_name_skips$(_name$1) {
        var self = _name$1;
        if (self.length === 0) {
            var $5241 = Pair$new$("", 0n);
            var $5240 = $5241;
        } else {
            var $5242 = self.charCodeAt(0);
            var $5243 = self.slice(1);
            var _name_skips$4 = Kind$Context$get_name_skips$($5243);
            var self = _name_skips$4;
            switch (self._) {
                case 'Pair.new':
                    var $5245 = self.fst;
                    var $5246 = self.snd;
                    var self = ($5242 === 94);
                    if (self) {
                        var $5248 = Pair$new$($5245, Nat$succ$($5246));
                        var $5247 = $5248;
                    } else {
                        var $5249 = Pair$new$(String$cons$($5242, $5245), $5246);
                        var $5247 = $5249;
                    };
                    var $5244 = $5247;
                    break;
            };
            var $5240 = $5244;
        };
        return $5240;
    };
    const Kind$Context$get_name_skips = x0 => Kind$Context$get_name_skips$(x0);

    function Kind$Name$eql$(_a$1, _b$2) {
        var $5250 = (_a$1 === _b$2);
        return $5250;
    };
    const Kind$Name$eql = x0 => x1 => Kind$Name$eql$(x0, x1);

    function Kind$Context$find$go$(_name$1, _skip$2, _ctx$3) {
        var Kind$Context$find$go$ = (_name$1, _skip$2, _ctx$3) => ({
            ctr: 'TCO',
            arg: [_name$1, _skip$2, _ctx$3]
        });
        var Kind$Context$find$go = _name$1 => _skip$2 => _ctx$3 => Kind$Context$find$go$(_name$1, _skip$2, _ctx$3);
        var arg = [_name$1, _skip$2, _ctx$3];
        while (true) {
            let [_name$1, _skip$2, _ctx$3] = arg;
            var R = (() => {
                var self = _ctx$3;
                switch (self._) {
                    case 'List.cons':
                        var $5251 = self.head;
                        var $5252 = self.tail;
                        var self = $5251;
                        switch (self._) {
                            case 'Pair.new':
                                var $5254 = self.fst;
                                var $5255 = self.snd;
                                var self = Kind$Name$eql$(_name$1, $5254);
                                if (self) {
                                    var self = _skip$2;
                                    if (self === 0n) {
                                        var $5258 = Maybe$some$($5255);
                                        var $5257 = $5258;
                                    } else {
                                        var $5259 = (self - 1n);
                                        var $5260 = Kind$Context$find$go$(_name$1, $5259, $5252);
                                        var $5257 = $5260;
                                    };
                                    var $5256 = $5257;
                                } else {
                                    var $5261 = Kind$Context$find$go$(_name$1, _skip$2, $5252);
                                    var $5256 = $5261;
                                };
                                var $5253 = $5256;
                                break;
                        };
                        return $5253;
                    case 'List.nil':
                        var $5262 = Maybe$none;
                        return $5262;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Context$find$go = x0 => x1 => x2 => Kind$Context$find$go$(x0, x1, x2);

    function Kind$Context$find$(_name$1, _ctx$2) {
        var self = Kind$Context$get_name_skips$(_name$1);
        switch (self._) {
            case 'Pair.new':
                var $5264 = self.fst;
                var $5265 = self.snd;
                var $5266 = Kind$Context$find$go$($5264, $5265, _ctx$2);
                var $5263 = $5266;
                break;
        };
        return $5263;
    };
    const Kind$Context$find = x0 => x1 => Kind$Context$find$(x0, x1);

    function Kind$Path$o$(_path$1, _x$2) {
        var $5267 = _path$1((_x$2 + '0'));
        return $5267;
    };
    const Kind$Path$o = x0 => x1 => Kind$Path$o$(x0, x1);

    function Kind$Path$i$(_path$1, _x$2) {
        var $5268 = _path$1((_x$2 + '1'));
        return $5268;
    };
    const Kind$Path$i = x0 => x1 => Kind$Path$i$(x0, x1);

    function Kind$Path$to_bits$(_path$1) {
        var $5269 = _path$1(Bits$e);
        return $5269;
    };
    const Kind$Path$to_bits = x0 => Kind$Path$to_bits$(x0);

    function Kind$Term$bind$(_vars$1, _path$2, _term$3) {
        var self = _term$3;
        switch (self._) {
            case 'Kind.Term.var':
                var $5271 = self.name;
                var $5272 = self.indx;
                var self = List$at_last$($5272, _vars$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $5274 = self.value;
                        var $5275 = Pair$snd$($5274);
                        var $5273 = $5275;
                        break;
                    case 'Maybe.none':
                        var $5276 = Kind$Term$var$($5271, $5272);
                        var $5273 = $5276;
                        break;
                };
                var $5270 = $5273;
                break;
            case 'Kind.Term.ref':
                var $5277 = self.name;
                var self = Kind$Context$find$($5277, _vars$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $5279 = self.value;
                        var $5280 = $5279;
                        var $5278 = $5280;
                        break;
                    case 'Maybe.none':
                        var $5281 = Kind$Term$ref$($5277);
                        var $5278 = $5281;
                        break;
                };
                var $5270 = $5278;
                break;
            case 'Kind.Term.all':
                var $5282 = self.eras;
                var $5283 = self.self;
                var $5284 = self.name;
                var $5285 = self.xtyp;
                var $5286 = self.body;
                var _vlen$9 = (list_length(_vars$1));
                var $5287 = Kind$Term$all$($5282, $5283, $5284, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5285), (_s$10 => _x$11 => {
                    var $5288 = Kind$Term$bind$(List$cons$(Pair$new$($5284, _x$11), List$cons$(Pair$new$($5283, _s$10), _vars$1)), Kind$Path$i(_path$2), $5286(Kind$Term$var$($5283, _vlen$9))(Kind$Term$var$($5284, Nat$succ$(_vlen$9))));
                    return $5288;
                }));
                var $5270 = $5287;
                break;
            case 'Kind.Term.lam':
                var $5289 = self.name;
                var $5290 = self.body;
                var _vlen$6 = (list_length(_vars$1));
                var $5291 = Kind$Term$lam$($5289, (_x$7 => {
                    var $5292 = Kind$Term$bind$(List$cons$(Pair$new$($5289, _x$7), _vars$1), Kind$Path$o(_path$2), $5290(Kind$Term$var$($5289, _vlen$6)));
                    return $5292;
                }));
                var $5270 = $5291;
                break;
            case 'Kind.Term.app':
                var $5293 = self.func;
                var $5294 = self.argm;
                var $5295 = Kind$Term$app$(Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5293), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $5294));
                var $5270 = $5295;
                break;
            case 'Kind.Term.let':
                var $5296 = self.name;
                var $5297 = self.expr;
                var $5298 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $5299 = Kind$Term$let$($5296, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5297), (_x$8 => {
                    var $5300 = Kind$Term$bind$(List$cons$(Pair$new$($5296, _x$8), _vars$1), Kind$Path$i(_path$2), $5298(Kind$Term$var$($5296, _vlen$7)));
                    return $5300;
                }));
                var $5270 = $5299;
                break;
            case 'Kind.Term.def':
                var $5301 = self.name;
                var $5302 = self.expr;
                var $5303 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $5304 = Kind$Term$def$($5301, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5302), (_x$8 => {
                    var $5305 = Kind$Term$bind$(List$cons$(Pair$new$($5301, _x$8), _vars$1), Kind$Path$i(_path$2), $5303(Kind$Term$var$($5301, _vlen$7)));
                    return $5305;
                }));
                var $5270 = $5304;
                break;
            case 'Kind.Term.ann':
                var $5306 = self.done;
                var $5307 = self.term;
                var $5308 = self.type;
                var $5309 = Kind$Term$ann$($5306, Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5307), Kind$Term$bind$(_vars$1, Kind$Path$i(_path$2), $5308));
                var $5270 = $5309;
                break;
            case 'Kind.Term.gol':
                var $5310 = self.name;
                var $5311 = self.dref;
                var $5312 = self.verb;
                var $5313 = Kind$Term$gol$($5310, $5311, $5312);
                var $5270 = $5313;
                break;
            case 'Kind.Term.nat':
                var $5314 = self.natx;
                var $5315 = Kind$Term$nat$($5314);
                var $5270 = $5315;
                break;
            case 'Kind.Term.chr':
                var $5316 = self.chrx;
                var $5317 = Kind$Term$chr$($5316);
                var $5270 = $5317;
                break;
            case 'Kind.Term.str':
                var $5318 = self.strx;
                var $5319 = Kind$Term$str$($5318);
                var $5270 = $5319;
                break;
            case 'Kind.Term.cse':
                var $5320 = self.expr;
                var $5321 = self.name;
                var $5322 = self.with;
                var $5323 = self.cses;
                var $5324 = self.moti;
                var _expr$10 = Kind$Term$bind$(_vars$1, Kind$Path$o(_path$2), $5320);
                var _name$11 = $5321;
                var _wyth$12 = List$mapped$($5322, (_with_var$12 => {
                    var self = _with_var$12;
                    switch (self._) {
                        case 'Kind.Ann.new':
                            var $5327 = self.name;
                            var $5328 = self.term;
                            var $5329 = self.type;
                            var _with_var_term$16 = Kind$Term$bind$(_vars$1, _path$2, $5328);
                            var self = $5329;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $5331 = self.value;
                                    var $5332 = Maybe$some$(Kind$Term$bind$(_vars$1, _path$2, $5331));
                                    var _with_var_type$17 = $5332;
                                    break;
                                case 'Maybe.none':
                                    var $5333 = Maybe$none;
                                    var _with_var_type$17 = $5333;
                                    break;
                            };
                            var $5330 = Kind$Ann$new$($5327, _with_var_term$16, _with_var_type$17);
                            var $5326 = $5330;
                            break;
                    };
                    return $5326;
                }));
                var _cses$13 = $5323;
                var _moti$14 = $5324;
                var $5325 = Kind$Term$cse$(Kind$Path$to_bits$(_path$2), _expr$10, _name$11, _wyth$12, _cses$13, _moti$14);
                var $5270 = $5325;
                break;
            case 'Kind.Term.ori':
                var $5334 = self.orig;
                var $5335 = self.expr;
                var $5336 = Kind$Term$ori$($5334, Kind$Term$bind$(_vars$1, _path$2, $5335));
                var $5270 = $5336;
                break;
            case 'Kind.Term.typ':
                var $5337 = Kind$Term$typ;
                var $5270 = $5337;
                break;
            case 'Kind.Term.hol':
                var $5338 = Kind$Term$hol$(Kind$Path$to_bits$(_path$2));
                var $5270 = $5338;
                break;
        };
        return $5270;
    };
    const Kind$Term$bind = x0 => x1 => x2 => Kind$Term$bind$(x0, x1, x2);
    const Kind$Status$done = ({
        _: 'Kind.Status.done'
    });
    const Kind$Status$init = ({
        _: 'Kind.Status.init'
    });

    function Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _stat$9) {
        var $5339 = ({
            _: 'Kind.Def.new',
            'file': _file$1,
            'code': _code$2,
            'orig': _orig$3,
            'name': _name$4,
            'term': _term$5,
            'type': _type$6,
            'isct': _isct$7,
            'arit': _arit$8,
            'stat': _stat$9
        });
        return $5339;
    };
    const Kind$Def$new = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Def$new$(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    function Kind$Map$def$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _done$9, _defs$10) {
        var self = _done$9;
        if (self) {
            var $5341 = Kind$Status$done;
            var _stat$11 = $5341;
        } else {
            var $5342 = Kind$Status$init;
            var _stat$11 = $5342;
        };
        var $5340 = Kind$Map$set$(_name$4, Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _stat$11), _defs$10);
        return $5340;
    };
    const Kind$Map$def = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => Kind$Map$def$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);

    function Kind$Parser$file$def$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5344 = self.idx;
                var $5345 = self.code;
                var $5346 = self.err;
                var $5347 = Parser$Reply$error$($5344, $5345, $5346);
                var $5343 = $5347;
                break;
            case 'Parser.Reply.value':
                var $5348 = self.idx;
                var $5349 = self.code;
                var $5350 = self.val;
                var self = Kind$Parser$name1$($5348, $5349);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5352 = self.idx;
                        var $5353 = self.code;
                        var $5354 = self.err;
                        var $5355 = Parser$Reply$error$($5352, $5353, $5354);
                        var $5351 = $5355;
                        break;
                    case 'Parser.Reply.value':
                        var $5356 = self.idx;
                        var $5357 = self.code;
                        var $5358 = self.val;
                        var self = Parser$many$(Kind$Parser$binder(":"))($5356)($5357);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5360 = self.idx;
                                var $5361 = self.code;
                                var $5362 = self.err;
                                var $5363 = Parser$Reply$error$($5360, $5361, $5362);
                                var $5359 = $5363;
                                break;
                            case 'Parser.Reply.value':
                                var $5364 = self.idx;
                                var $5365 = self.code;
                                var $5366 = self.val;
                                var _args$15 = List$flatten$($5366);
                                var self = Kind$Parser$text$(":", $5364, $5365);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5368 = self.idx;
                                        var $5369 = self.code;
                                        var $5370 = self.err;
                                        var $5371 = Parser$Reply$error$($5368, $5369, $5370);
                                        var $5367 = $5371;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5372 = self.idx;
                                        var $5373 = self.code;
                                        var self = Kind$Parser$term$($5372, $5373);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5375 = self.idx;
                                                var $5376 = self.code;
                                                var $5377 = self.err;
                                                var $5378 = Parser$Reply$error$($5375, $5376, $5377);
                                                var $5374 = $5378;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5379 = self.idx;
                                                var $5380 = self.code;
                                                var $5381 = self.val;
                                                var self = Kind$Parser$term$($5379, $5380);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5383 = self.idx;
                                                        var $5384 = self.code;
                                                        var $5385 = self.err;
                                                        var $5386 = Parser$Reply$error$($5383, $5384, $5385);
                                                        var $5382 = $5386;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5387 = self.idx;
                                                        var $5388 = self.code;
                                                        var $5389 = self.val;
                                                        var self = Kind$Parser$stop$($5350, $5387, $5388);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $5391 = self.idx;
                                                                var $5392 = self.code;
                                                                var $5393 = self.err;
                                                                var $5394 = Parser$Reply$error$($5391, $5392, $5393);
                                                                var $5390 = $5394;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $5395 = self.idx;
                                                                var $5396 = self.code;
                                                                var $5397 = self.val;
                                                                var _arit$28 = (list_length(_args$15));
                                                                var _type$29 = Kind$Parser$make_forall$(_args$15, $5381);
                                                                var _term$30 = Kind$Parser$make_lambda$(List$mapped$(_args$15, (_x$30 => {
                                                                    var self = _x$30;
                                                                    switch (self._) {
                                                                        case 'Kind.Binder.new':
                                                                            var $5400 = self.name;
                                                                            var $5401 = $5400;
                                                                            var $5399 = $5401;
                                                                            break;
                                                                    };
                                                                    return $5399;
                                                                })), $5389);
                                                                var _type$31 = Kind$Term$bind$(List$nil, (_x$31 => {
                                                                    var $5402 = (_x$31 + '1');
                                                                    return $5402;
                                                                }), _type$29);
                                                                var _term$32 = Kind$Term$bind$(List$nil, (_x$32 => {
                                                                    var $5403 = (_x$32 + '0');
                                                                    return $5403;
                                                                }), _term$30);
                                                                var _defs$33 = Kind$Map$def$(_file$1, _code$2, $5397, $5358, _term$32, _type$31, Bool$false, _arit$28, Bool$false, _defs$3);
                                                                var $5398 = Parser$Reply$value$($5395, $5396, _defs$33);
                                                                var $5390 = $5398;
                                                                break;
                                                        };
                                                        var $5382 = $5390;
                                                        break;
                                                };
                                                var $5374 = $5382;
                                                break;
                                        };
                                        var $5367 = $5374;
                                        break;
                                };
                                var $5359 = $5367;
                                break;
                        };
                        var $5351 = $5359;
                        break;
                };
                var $5343 = $5351;
                break;
        };
        return $5343;
    };
    const Kind$Parser$file$def = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$def$(x0, x1, x2, x3, x4);

    function Kind$Constructor$new$(_name$1, _args$2, _inds$3) {
        var $5404 = ({
            _: 'Kind.Constructor.new',
            'name': _name$1,
            'args': _args$2,
            'inds': _inds$3
        });
        return $5404;
    };
    const Kind$Constructor$new = x0 => x1 => x2 => Kind$Constructor$new$(x0, x1, x2);

    function Kind$Parser$constructor$(_namespace$1, _idx$2, _code$3) {
        var self = Kind$Parser$name1$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5406 = self.idx;
                var $5407 = self.code;
                var $5408 = self.err;
                var $5409 = Parser$Reply$error$($5406, $5407, $5408);
                var $5405 = $5409;
                break;
            case 'Parser.Reply.value':
                var $5410 = self.idx;
                var $5411 = self.code;
                var $5412 = self.val;
                var self = Parser$maybe$(Kind$Parser$binder(":"), $5410, $5411);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5414 = self.idx;
                        var $5415 = self.code;
                        var $5416 = self.err;
                        var $5417 = Parser$Reply$error$($5414, $5415, $5416);
                        var $5413 = $5417;
                        break;
                    case 'Parser.Reply.value':
                        var $5418 = self.idx;
                        var $5419 = self.code;
                        var $5420 = self.val;
                        var self = Parser$maybe$((_idx$10 => _code$11 => {
                            var self = Kind$Parser$text$("~", _idx$10, _code$11);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $5423 = self.idx;
                                    var $5424 = self.code;
                                    var $5425 = self.err;
                                    var $5426 = Parser$Reply$error$($5423, $5424, $5425);
                                    var $5422 = $5426;
                                    break;
                                case 'Parser.Reply.value':
                                    var $5427 = self.idx;
                                    var $5428 = self.code;
                                    var $5429 = Kind$Parser$binder$("=", $5427, $5428);
                                    var $5422 = $5429;
                                    break;
                            };
                            return $5422;
                        }), $5418, $5419);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5430 = self.idx;
                                var $5431 = self.code;
                                var $5432 = self.err;
                                var $5433 = Parser$Reply$error$($5430, $5431, $5432);
                                var $5421 = $5433;
                                break;
                            case 'Parser.Reply.value':
                                var $5434 = self.idx;
                                var $5435 = self.code;
                                var $5436 = self.val;
                                var _args$13 = Maybe$default$($5420, List$nil);
                                var _inds$14 = Maybe$default$($5436, List$nil);
                                var $5437 = Parser$Reply$value$($5434, $5435, Kind$Constructor$new$($5412, _args$13, _inds$14));
                                var $5421 = $5437;
                                break;
                        };
                        var $5413 = $5421;
                        break;
                };
                var $5405 = $5413;
                break;
        };
        return $5405;
    };
    const Kind$Parser$constructor = x0 => x1 => x2 => Kind$Parser$constructor$(x0, x1, x2);

    function Kind$Datatype$new$(_name$1, _pars$2, _inds$3, _ctrs$4) {
        var $5438 = ({
            _: 'Kind.Datatype.new',
            'name': _name$1,
            'pars': _pars$2,
            'inds': _inds$3,
            'ctrs': _ctrs$4
        });
        return $5438;
    };
    const Kind$Datatype$new = x0 => x1 => x2 => x3 => Kind$Datatype$new$(x0, x1, x2, x3);

    function Kind$Parser$datatype$(_idx$1, _code$2) {
        var self = Kind$Parser$text$("type ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5440 = self.idx;
                var $5441 = self.code;
                var $5442 = self.err;
                var $5443 = Parser$Reply$error$($5440, $5441, $5442);
                var $5439 = $5443;
                break;
            case 'Parser.Reply.value':
                var $5444 = self.idx;
                var $5445 = self.code;
                var self = Kind$Parser$name1$($5444, $5445);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5447 = self.idx;
                        var $5448 = self.code;
                        var $5449 = self.err;
                        var $5450 = Parser$Reply$error$($5447, $5448, $5449);
                        var $5446 = $5450;
                        break;
                    case 'Parser.Reply.value':
                        var $5451 = self.idx;
                        var $5452 = self.code;
                        var $5453 = self.val;
                        var self = Parser$maybe$(Kind$Parser$binder(":"), $5451, $5452);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5455 = self.idx;
                                var $5456 = self.code;
                                var $5457 = self.err;
                                var $5458 = Parser$Reply$error$($5455, $5456, $5457);
                                var $5454 = $5458;
                                break;
                            case 'Parser.Reply.value':
                                var $5459 = self.idx;
                                var $5460 = self.code;
                                var $5461 = self.val;
                                var self = Parser$maybe$((_idx$12 => _code$13 => {
                                    var self = Kind$Parser$text$("~", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $5464 = self.idx;
                                            var $5465 = self.code;
                                            var $5466 = self.err;
                                            var $5467 = Parser$Reply$error$($5464, $5465, $5466);
                                            var $5463 = $5467;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $5468 = self.idx;
                                            var $5469 = self.code;
                                            var $5470 = Kind$Parser$binder$(":", $5468, $5469);
                                            var $5463 = $5470;
                                            break;
                                    };
                                    return $5463;
                                }), $5459, $5460);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $5471 = self.idx;
                                        var $5472 = self.code;
                                        var $5473 = self.err;
                                        var $5474 = Parser$Reply$error$($5471, $5472, $5473);
                                        var $5462 = $5474;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $5475 = self.idx;
                                        var $5476 = self.code;
                                        var $5477 = self.val;
                                        var _pars$15 = Maybe$default$($5461, List$nil);
                                        var _inds$16 = Maybe$default$($5477, List$nil);
                                        var self = Kind$Parser$text$("{", $5475, $5476);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $5479 = self.idx;
                                                var $5480 = self.code;
                                                var $5481 = self.err;
                                                var $5482 = Parser$Reply$error$($5479, $5480, $5481);
                                                var $5478 = $5482;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $5483 = self.idx;
                                                var $5484 = self.code;
                                                var self = Parser$until$(Kind$Parser$text("}"), Kind$Parser$item(Kind$Parser$constructor($5453)))($5483)($5484);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $5486 = self.idx;
                                                        var $5487 = self.code;
                                                        var $5488 = self.err;
                                                        var $5489 = Parser$Reply$error$($5486, $5487, $5488);
                                                        var $5485 = $5489;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $5490 = self.idx;
                                                        var $5491 = self.code;
                                                        var $5492 = self.val;
                                                        var $5493 = Parser$Reply$value$($5490, $5491, Kind$Datatype$new$($5453, _pars$15, _inds$16, $5492));
                                                        var $5485 = $5493;
                                                        break;
                                                };
                                                var $5478 = $5485;
                                                break;
                                        };
                                        var $5462 = $5478;
                                        break;
                                };
                                var $5454 = $5462;
                                break;
                        };
                        var $5446 = $5454;
                        break;
                };
                var $5439 = $5446;
                break;
        };
        return $5439;
    };
    const Kind$Parser$datatype = x0 => x1 => Kind$Parser$datatype$(x0, x1);

    function Kind$Datatype$build_term$motive$go$(_type$1, _name$2, _inds$3) {
        var self = _inds$3;
        switch (self._) {
            case 'List.cons':
                var $5495 = self.head;
                var $5496 = self.tail;
                var self = $5495;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5498 = self.eras;
                        var $5499 = self.name;
                        var $5500 = self.term;
                        var $5501 = Kind$Term$all$($5498, "", $5499, $5500, (_s$9 => _x$10 => {
                            var $5502 = Kind$Datatype$build_term$motive$go$(_type$1, _name$2, $5496);
                            return $5502;
                        }));
                        var $5497 = $5501;
                        break;
                };
                var $5494 = $5497;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $5504 = self.pars;
                        var $5505 = self.inds;
                        var _slf$8 = Kind$Term$ref$(_name$2);
                        var _slf$9 = (() => {
                            var $5508 = _slf$8;
                            var $5509 = $5504;
                            let _slf$10 = $5508;
                            let _v$9;
                            while ($5509._ === 'List.cons') {
                                _v$9 = $5509.head;
                                var $5508 = Kind$Term$app$(_slf$10, Kind$Term$ref$((() => {
                                    var self = _v$9;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $5510 = self.name;
                                            var $5511 = $5510;
                                            return $5511;
                                    };
                                })()));
                                _slf$10 = $5508;
                                $5509 = $5509.tail;
                            }
                            return _slf$10;
                        })();
                        var _slf$10 = (() => {
                            var $5513 = _slf$9;
                            var $5514 = $5505;
                            let _slf$11 = $5513;
                            let _v$10;
                            while ($5514._ === 'List.cons') {
                                _v$10 = $5514.head;
                                var $5513 = Kind$Term$app$(_slf$11, Kind$Term$ref$((() => {
                                    var self = _v$10;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $5515 = self.name;
                                            var $5516 = $5515;
                                            return $5516;
                                    };
                                })()));
                                _slf$11 = $5513;
                                $5514 = $5514.tail;
                            }
                            return _slf$11;
                        })();
                        var $5506 = Kind$Term$all$(Bool$false, "", "", _slf$10, (_s$11 => _x$12 => {
                            var $5517 = Kind$Term$typ;
                            return $5517;
                        }));
                        var $5503 = $5506;
                        break;
                };
                var $5494 = $5503;
                break;
        };
        return $5494;
    };
    const Kind$Datatype$build_term$motive$go = x0 => x1 => x2 => Kind$Datatype$build_term$motive$go$(x0, x1, x2);

    function Kind$Datatype$build_term$motive$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5519 = self.name;
                var $5520 = self.inds;
                var $5521 = Kind$Datatype$build_term$motive$go$(_type$1, $5519, $5520);
                var $5518 = $5521;
                break;
        };
        return $5518;
    };
    const Kind$Datatype$build_term$motive = x0 => Kind$Datatype$build_term$motive$(x0);

    function Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, _args$3) {
        var self = _args$3;
        switch (self._) {
            case 'List.cons':
                var $5523 = self.head;
                var $5524 = self.tail;
                var self = $5523;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5526 = self.eras;
                        var $5527 = self.name;
                        var $5528 = self.term;
                        var _eras$9 = $5526;
                        var _name$10 = $5527;
                        var _xtyp$11 = $5528;
                        var _body$12 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $5524);
                        var $5529 = Kind$Term$all$(_eras$9, "", _name$10, _xtyp$11, (_s$13 => _x$14 => {
                            var $5530 = _body$12;
                            return $5530;
                        }));
                        var $5525 = $5529;
                        break;
                };
                var $5522 = $5525;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $5532 = self.name;
                        var $5533 = self.pars;
                        var self = _ctor$2;
                        switch (self._) {
                            case 'Kind.Constructor.new':
                                var $5535 = self.name;
                                var $5536 = self.args;
                                var $5537 = self.inds;
                                var _ret$11 = Kind$Term$ref$(Kind$Name$read$("P"));
                                var _ret$12 = (() => {
                                    var $5540 = _ret$11;
                                    var $5541 = $5537;
                                    let _ret$13 = $5540;
                                    let _v$12;
                                    while ($5541._ === 'List.cons') {
                                        _v$12 = $5541.head;
                                        var $5540 = Kind$Term$app$(_ret$13, (() => {
                                            var self = _v$12;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $5542 = self.term;
                                                    var $5543 = $5542;
                                                    return $5543;
                                            };
                                        })());
                                        _ret$13 = $5540;
                                        $5541 = $5541.tail;
                                    }
                                    return _ret$13;
                                })();
                                var _ctr$13 = String$flatten$(List$cons$($5532, List$cons$(Kind$Name$read$("."), List$cons$($5535, List$nil))));
                                var _slf$14 = Kind$Term$ref$(_ctr$13);
                                var _slf$15 = (() => {
                                    var $5545 = _slf$14;
                                    var $5546 = $5533;
                                    let _slf$16 = $5545;
                                    let _v$15;
                                    while ($5546._ === 'List.cons') {
                                        _v$15 = $5546.head;
                                        var $5545 = Kind$Term$app$(_slf$16, Kind$Term$ref$((() => {
                                            var self = _v$15;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $5547 = self.name;
                                                    var $5548 = $5547;
                                                    return $5548;
                                            };
                                        })()));
                                        _slf$16 = $5545;
                                        $5546 = $5546.tail;
                                    }
                                    return _slf$16;
                                })();
                                var _slf$16 = (() => {
                                    var $5550 = _slf$15;
                                    var $5551 = $5536;
                                    let _slf$17 = $5550;
                                    let _v$16;
                                    while ($5551._ === 'List.cons') {
                                        _v$16 = $5551.head;
                                        var $5550 = Kind$Term$app$(_slf$17, Kind$Term$ref$((() => {
                                            var self = _v$16;
                                            switch (self._) {
                                                case 'Kind.Binder.new':
                                                    var $5552 = self.name;
                                                    var $5553 = $5552;
                                                    return $5553;
                                            };
                                        })()));
                                        _slf$17 = $5550;
                                        $5551 = $5551.tail;
                                    }
                                    return _slf$17;
                                })();
                                var $5538 = Kind$Term$app$(_ret$12, _slf$16);
                                var $5534 = $5538;
                                break;
                        };
                        var $5531 = $5534;
                        break;
                };
                var $5522 = $5531;
                break;
        };
        return $5522;
    };
    const Kind$Datatype$build_term$constructor$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructor$go$(x0, x1, x2);

    function Kind$Datatype$build_term$constructor$(_type$1, _ctor$2) {
        var self = _ctor$2;
        switch (self._) {
            case 'Kind.Constructor.new':
                var $5555 = self.args;
                var $5556 = Kind$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $5555);
                var $5554 = $5556;
                break;
        };
        return $5554;
    };
    const Kind$Datatype$build_term$constructor = x0 => x1 => Kind$Datatype$build_term$constructor$(x0, x1);

    function Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.cons':
                var $5558 = self.head;
                var $5559 = self.tail;
                var self = $5558;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5561 = self.name;
                        var $5562 = Kind$Term$all$(Bool$false, "", $5561, Kind$Datatype$build_term$constructor$(_type$1, $5558), (_s$9 => _x$10 => {
                            var $5563 = Kind$Datatype$build_term$constructors$go$(_type$1, _name$2, $5559);
                            return $5563;
                        }));
                        var $5560 = $5562;
                        break;
                };
                var $5557 = $5560;
                break;
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Kind.Datatype.new':
                        var $5565 = self.inds;
                        var _ret$8 = Kind$Term$ref$(Kind$Name$read$("P"));
                        var _ret$9 = (() => {
                            var $5568 = _ret$8;
                            var $5569 = $5565;
                            let _ret$10 = $5568;
                            let _v$9;
                            while ($5569._ === 'List.cons') {
                                _v$9 = $5569.head;
                                var $5568 = Kind$Term$app$(_ret$10, Kind$Term$ref$((() => {
                                    var self = _v$9;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $5570 = self.name;
                                            var $5571 = $5570;
                                            return $5571;
                                    };
                                })()));
                                _ret$10 = $5568;
                                $5569 = $5569.tail;
                            }
                            return _ret$10;
                        })();
                        var $5566 = Kind$Term$app$(_ret$9, Kind$Term$ref$((_name$2 + ".Self")));
                        var $5564 = $5566;
                        break;
                };
                var $5557 = $5564;
                break;
        };
        return $5557;
    };
    const Kind$Datatype$build_term$constructors$go = x0 => x1 => x2 => Kind$Datatype$build_term$constructors$go$(x0, x1, x2);

    function Kind$Datatype$build_term$constructors$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5573 = self.name;
                var $5574 = self.ctrs;
                var $5575 = Kind$Datatype$build_term$constructors$go$(_type$1, $5573, $5574);
                var $5572 = $5575;
                break;
        };
        return $5572;
    };
    const Kind$Datatype$build_term$constructors = x0 => Kind$Datatype$build_term$constructors$(x0);

    function Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.cons':
                var $5577 = self.head;
                var $5578 = self.tail;
                var self = $5577;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5580 = self.name;
                        var $5581 = Kind$Term$lam$($5580, (_x$10 => {
                            var $5582 = Kind$Datatype$build_term$go$(_type$1, _name$2, $5578, _inds$4);
                            return $5582;
                        }));
                        var $5579 = $5581;
                        break;
                };
                var $5576 = $5579;
                break;
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.cons':
                        var $5584 = self.head;
                        var $5585 = self.tail;
                        var self = $5584;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $5587 = self.name;
                                var $5588 = Kind$Term$lam$($5587, (_x$10 => {
                                    var $5589 = Kind$Datatype$build_term$go$(_type$1, _name$2, _pars$3, $5585);
                                    return $5589;
                                }));
                                var $5586 = $5588;
                                break;
                        };
                        var $5583 = $5586;
                        break;
                    case 'List.nil':
                        var $5590 = Kind$Term$all$(Bool$true, (_name$2 + ".Self"), Kind$Name$read$("P"), Kind$Datatype$build_term$motive$(_type$1), (_s$5 => _x$6 => {
                            var $5591 = Kind$Datatype$build_term$constructors$(_type$1);
                            return $5591;
                        }));
                        var $5583 = $5590;
                        break;
                };
                var $5576 = $5583;
                break;
        };
        return $5576;
    };
    const Kind$Datatype$build_term$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_term$go$(x0, x1, x2, x3);

    function Kind$Datatype$build_term$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5593 = self.name;
                var $5594 = self.pars;
                var $5595 = self.inds;
                var $5596 = Kind$Datatype$build_term$go$(_type$1, $5593, $5594, $5595);
                var $5592 = $5596;
                break;
        };
        return $5592;
    };
    const Kind$Datatype$build_term = x0 => Kind$Datatype$build_term$(x0);

    function Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.cons':
                var $5598 = self.head;
                var $5599 = self.tail;
                var self = $5598;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5601 = self.name;
                        var $5602 = self.term;
                        var $5603 = Kind$Term$all$(Bool$false, "", $5601, $5602, (_s$10 => _x$11 => {
                            var $5604 = Kind$Datatype$build_type$go$(_type$1, _name$2, $5599, _inds$4);
                            return $5604;
                        }));
                        var $5600 = $5603;
                        break;
                };
                var $5597 = $5600;
                break;
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.cons':
                        var $5606 = self.head;
                        var $5607 = self.tail;
                        var self = $5606;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $5609 = self.name;
                                var $5610 = self.term;
                                var $5611 = Kind$Term$all$(Bool$false, "", $5609, $5610, (_s$10 => _x$11 => {
                                    var $5612 = Kind$Datatype$build_type$go$(_type$1, _name$2, _pars$3, $5607);
                                    return $5612;
                                }));
                                var $5608 = $5611;
                                break;
                        };
                        var $5605 = $5608;
                        break;
                    case 'List.nil':
                        var $5613 = Kind$Term$typ;
                        var $5605 = $5613;
                        break;
                };
                var $5597 = $5605;
                break;
        };
        return $5597;
    };
    const Kind$Datatype$build_type$go = x0 => x1 => x2 => x3 => Kind$Datatype$build_type$go$(x0, x1, x2, x3);

    function Kind$Datatype$build_type$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5615 = self.name;
                var $5616 = self.pars;
                var $5617 = self.inds;
                var $5618 = Kind$Datatype$build_type$go$(_type$1, $5615, $5616, $5617);
                var $5614 = $5618;
                break;
        };
        return $5614;
    };
    const Kind$Datatype$build_type = x0 => Kind$Datatype$build_type$(x0);

    function Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.cons':
                var $5620 = self.head;
                var $5621 = self.tail;
                var self = $5620;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5623 = self.name;
                        var $5624 = Kind$Term$lam$($5623, (_x$9 => {
                            var $5625 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $5621);
                            return $5625;
                        }));
                        var $5622 = $5624;
                        break;
                };
                var $5619 = $5622;
                break;
            case 'List.nil':
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5627 = self.name;
                        var $5628 = self.args;
                        var _ret$7 = Kind$Term$ref$($5627);
                        var _ret$8 = (() => {
                            var $5631 = _ret$7;
                            var $5632 = $5628;
                            let _ret$9 = $5631;
                            let _arg$8;
                            while ($5632._ === 'List.cons') {
                                _arg$8 = $5632.head;
                                var $5631 = Kind$Term$app$(_ret$9, Kind$Term$ref$((() => {
                                    var self = _arg$8;
                                    switch (self._) {
                                        case 'Kind.Binder.new':
                                            var $5633 = self.name;
                                            var $5634 = $5633;
                                            return $5634;
                                    };
                                })()));
                                _ret$9 = $5631;
                                $5632 = $5632.tail;
                            }
                            return _ret$9;
                        })();
                        var $5629 = _ret$8;
                        var $5626 = $5629;
                        break;
                };
                var $5619 = $5626;
                break;
        };
        return $5619;
    };
    const Kind$Constructor$build_term$opt$go = x0 => x1 => x2 => Kind$Constructor$build_term$opt$go$(x0, x1, x2);

    function Kind$Constructor$build_term$opt$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5636 = self.ctrs;
                var $5637 = Kind$Constructor$build_term$opt$go$(_type$1, _ctor$2, $5636);
                var $5635 = $5637;
                break;
        };
        return $5635;
    };
    const Kind$Constructor$build_term$opt = x0 => x1 => Kind$Constructor$build_term$opt$(x0, x1);

    function Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.cons':
                var $5639 = self.head;
                var $5640 = self.tail;
                var self = $5639;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5642 = self.name;
                        var $5643 = Kind$Term$lam$($5642, (_x$11 => {
                            var $5644 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, $5640, _args$5);
                            return $5644;
                        }));
                        var $5641 = $5643;
                        break;
                };
                var $5638 = $5641;
                break;
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.cons':
                        var $5646 = self.head;
                        var $5647 = self.tail;
                        var self = $5646;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $5649 = self.name;
                                var $5650 = Kind$Term$lam$($5649, (_x$11 => {
                                    var $5651 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, $5647);
                                    return $5651;
                                }));
                                var $5648 = $5650;
                                break;
                        };
                        var $5645 = $5648;
                        break;
                    case 'List.nil':
                        var $5652 = Kind$Term$lam$(Kind$Name$read$("P"), (_x$6 => {
                            var $5653 = Kind$Constructor$build_term$opt$(_type$1, _ctor$2);
                            return $5653;
                        }));
                        var $5645 = $5652;
                        break;
                };
                var $5638 = $5645;
                break;
        };
        return $5638;
    };
    const Kind$Constructor$build_term$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_term$go$(x0, x1, x2, x3, x4);

    function Kind$Constructor$build_term$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5655 = self.name;
                var $5656 = self.pars;
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5658 = self.args;
                        var $5659 = Kind$Constructor$build_term$go$(_type$1, _ctor$2, $5655, $5656, $5658);
                        var $5657 = $5659;
                        break;
                };
                var $5654 = $5657;
                break;
        };
        return $5654;
    };
    const Kind$Constructor$build_term = x0 => x1 => Kind$Constructor$build_term$(x0, x1);

    function Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.cons':
                var $5661 = self.head;
                var $5662 = self.tail;
                var self = $5661;
                switch (self._) {
                    case 'Kind.Binder.new':
                        var $5664 = self.eras;
                        var $5665 = self.name;
                        var $5666 = self.term;
                        var $5667 = Kind$Term$all$($5664, "", $5665, $5666, (_s$11 => _x$12 => {
                            var $5668 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, $5662, _args$5);
                            return $5668;
                        }));
                        var $5663 = $5667;
                        break;
                };
                var $5660 = $5663;
                break;
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.cons':
                        var $5670 = self.head;
                        var $5671 = self.tail;
                        var self = $5670;
                        switch (self._) {
                            case 'Kind.Binder.new':
                                var $5673 = self.eras;
                                var $5674 = self.name;
                                var $5675 = self.term;
                                var $5676 = Kind$Term$all$($5673, "", $5674, $5675, (_s$11 => _x$12 => {
                                    var $5677 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, $5671);
                                    return $5677;
                                }));
                                var $5672 = $5676;
                                break;
                        };
                        var $5669 = $5672;
                        break;
                    case 'List.nil':
                        var self = _type$1;
                        switch (self._) {
                            case 'Kind.Datatype.new':
                                var $5679 = self.pars;
                                var self = _ctor$2;
                                switch (self._) {
                                    case 'Kind.Constructor.new':
                                        var $5681 = self.inds;
                                        var _type$13 = Kind$Term$ref$(_name$3);
                                        var _type$14 = (() => {
                                            var $5684 = _type$13;
                                            var $5685 = $5679;
                                            let _type$15 = $5684;
                                            let _v$14;
                                            while ($5685._ === 'List.cons') {
                                                _v$14 = $5685.head;
                                                var $5684 = Kind$Term$app$(_type$15, Kind$Term$ref$((() => {
                                                    var self = _v$14;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $5686 = self.name;
                                                            var $5687 = $5686;
                                                            return $5687;
                                                    };
                                                })()));
                                                _type$15 = $5684;
                                                $5685 = $5685.tail;
                                            }
                                            return _type$15;
                                        })();
                                        var _type$15 = (() => {
                                            var $5689 = _type$14;
                                            var $5690 = $5681;
                                            let _type$16 = $5689;
                                            let _v$15;
                                            while ($5690._ === 'List.cons') {
                                                _v$15 = $5690.head;
                                                var $5689 = Kind$Term$app$(_type$16, (() => {
                                                    var self = _v$15;
                                                    switch (self._) {
                                                        case 'Kind.Binder.new':
                                                            var $5691 = self.term;
                                                            var $5692 = $5691;
                                                            return $5692;
                                                    };
                                                })());
                                                _type$16 = $5689;
                                                $5690 = $5690.tail;
                                            }
                                            return _type$16;
                                        })();
                                        var $5682 = _type$15;
                                        var $5680 = $5682;
                                        break;
                                };
                                var $5678 = $5680;
                                break;
                        };
                        var $5669 = $5678;
                        break;
                };
                var $5660 = $5669;
                break;
        };
        return $5660;
    };
    const Kind$Constructor$build_type$go = x0 => x1 => x2 => x3 => x4 => Kind$Constructor$build_type$go$(x0, x1, x2, x3, x4);

    function Kind$Constructor$build_type$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Kind.Datatype.new':
                var $5694 = self.name;
                var $5695 = self.pars;
                var self = _ctor$2;
                switch (self._) {
                    case 'Kind.Constructor.new':
                        var $5697 = self.args;
                        var $5698 = Kind$Constructor$build_type$go$(_type$1, _ctor$2, $5694, $5695, $5697);
                        var $5696 = $5698;
                        break;
                };
                var $5693 = $5696;
                break;
        };
        return $5693;
    };
    const Kind$Constructor$build_type = x0 => x1 => Kind$Constructor$build_type$(x0, x1);

    function Kind$Parser$file$adt$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5700 = self.idx;
                var $5701 = self.code;
                var $5702 = self.err;
                var $5703 = Parser$Reply$error$($5700, $5701, $5702);
                var $5699 = $5703;
                break;
            case 'Parser.Reply.value':
                var $5704 = self.idx;
                var $5705 = self.code;
                var $5706 = self.val;
                var self = Kind$Parser$datatype$($5704, $5705);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5708 = self.idx;
                        var $5709 = self.code;
                        var $5710 = self.err;
                        var $5711 = Parser$Reply$error$($5708, $5709, $5710);
                        var $5707 = $5711;
                        break;
                    case 'Parser.Reply.value':
                        var $5712 = self.idx;
                        var $5713 = self.code;
                        var $5714 = self.val;
                        var self = Kind$Parser$stop$($5706, $5712, $5713);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5716 = self.idx;
                                var $5717 = self.code;
                                var $5718 = self.err;
                                var $5719 = Parser$Reply$error$($5716, $5717, $5718);
                                var $5715 = $5719;
                                break;
                            case 'Parser.Reply.value':
                                var $5720 = self.idx;
                                var $5721 = self.code;
                                var $5722 = self.val;
                                var self = $5714;
                                switch (self._) {
                                    case 'Kind.Datatype.new':
                                        var $5724 = self.name;
                                        var $5725 = self.pars;
                                        var $5726 = self.inds;
                                        var $5727 = self.ctrs;
                                        var _term$19 = Kind$Datatype$build_term$($5714);
                                        var _term$20 = Kind$Term$bind$(List$nil, (_x$20 => {
                                            var $5729 = (_x$20 + '1');
                                            return $5729;
                                        }), _term$19);
                                        var _type$21 = Kind$Datatype$build_type$($5714);
                                        var _type$22 = Kind$Term$bind$(List$nil, (_x$22 => {
                                            var $5730 = (_x$22 + '0');
                                            return $5730;
                                        }), _type$21);
                                        var _arit$23 = ((list_length($5725)) + (list_length($5726)));
                                        var _defs$24 = Kind$Map$def$(_file$1, _code$2, $5722, $5724, _term$20, _type$22, Bool$false, _arit$23, Bool$false, _defs$3);
                                        var _defs$25 = List$fold$($5727, _defs$24, (_ctr$25 => _defs$26 => {
                                            var _typ_name$27 = $5724;
                                            var _ctr_arit$28 = (_arit$23 + (list_length((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Kind.Constructor.new':
                                                        var $5732 = self.args;
                                                        var $5733 = $5732;
                                                        return $5733;
                                                };
                                            })())));
                                            var _ctr_name$29 = String$flatten$(List$cons$(_typ_name$27, List$cons$(Kind$Name$read$("."), List$cons$((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Kind.Constructor.new':
                                                        var $5734 = self.name;
                                                        var $5735 = $5734;
                                                        return $5735;
                                                };
                                            })(), List$nil))));
                                            var _ctr_term$30 = Kind$Constructor$build_term$($5714, _ctr$25);
                                            var _ctr_term$31 = Kind$Term$bind$(List$nil, (_x$31 => {
                                                var $5736 = (_x$31 + '1');
                                                return $5736;
                                            }), _ctr_term$30);
                                            var _ctr_type$32 = Kind$Constructor$build_type$($5714, _ctr$25);
                                            var _ctr_type$33 = Kind$Term$bind$(List$nil, (_x$33 => {
                                                var $5737 = (_x$33 + '0');
                                                return $5737;
                                            }), _ctr_type$32);
                                            var $5731 = Kind$Map$def$(_file$1, _code$2, $5722, _ctr_name$29, _ctr_term$31, _ctr_type$33, Bool$true, _ctr_arit$28, Bool$false, _defs$26);
                                            return $5731;
                                        }));
                                        var $5728 = (_idx$26 => _code$27 => {
                                            var $5738 = Parser$Reply$value$(_idx$26, _code$27, _defs$25);
                                            return $5738;
                                        });
                                        var $5723 = $5728;
                                        break;
                                };
                                var $5723 = $5723($5720)($5721);
                                var $5715 = $5723;
                                break;
                        };
                        var $5707 = $5715;
                        break;
                };
                var $5699 = $5707;
                break;
        };
        return $5699;
    };
    const Kind$Parser$file$adt = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$adt$(x0, x1, x2, x3, x4);

    function Kind$Parser$file$end$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Kind$Parser$spaces(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5740 = self.idx;
                var $5741 = self.code;
                var $5742 = self.err;
                var $5743 = Parser$Reply$error$($5740, $5741, $5742);
                var $5739 = $5743;
                break;
            case 'Parser.Reply.value':
                var $5744 = self.idx;
                var $5745 = self.code;
                var self = Parser$eof$($5744, $5745);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $5747 = self.idx;
                        var $5748 = self.code;
                        var $5749 = self.err;
                        var $5750 = Parser$Reply$error$($5747, $5748, $5749);
                        var $5746 = $5750;
                        break;
                    case 'Parser.Reply.value':
                        var $5751 = self.idx;
                        var $5752 = self.code;
                        var $5753 = Parser$Reply$value$($5751, $5752, _defs$3);
                        var $5746 = $5753;
                        break;
                };
                var $5739 = $5746;
                break;
        };
        return $5739;
    };
    const Kind$Parser$file$end = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$end$(x0, x1, x2, x3, x4);

    function Kind$Parser$file$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Parser$is_eof$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5755 = self.idx;
                var $5756 = self.code;
                var $5757 = self.err;
                var $5758 = Parser$Reply$error$($5755, $5756, $5757);
                var $5754 = $5758;
                break;
            case 'Parser.Reply.value':
                var $5759 = self.idx;
                var $5760 = self.code;
                var $5761 = self.val;
                var self = $5761;
                if (self) {
                    var $5763 = (_idx$9 => _code$10 => {
                        var $5764 = Parser$Reply$value$(_idx$9, _code$10, _defs$3);
                        return $5764;
                    });
                    var $5762 = $5763;
                } else {
                    var $5765 = (_idx$9 => _code$10 => {
                        var self = Parser$first_of$(List$cons$(Kind$Parser$file$def(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$adt(_file$1)(_code$2)(_defs$3), List$cons$(Kind$Parser$file$end(_file$1)(_code$2)(_defs$3), List$nil))))(_idx$9)(_code$10);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $5767 = self.idx;
                                var $5768 = self.code;
                                var $5769 = self.err;
                                var $5770 = Parser$Reply$error$($5767, $5768, $5769);
                                var $5766 = $5770;
                                break;
                            case 'Parser.Reply.value':
                                var $5771 = self.idx;
                                var $5772 = self.code;
                                var $5773 = self.val;
                                var $5774 = Kind$Parser$file$(_file$1, _code$2, $5773, $5771, $5772);
                                var $5766 = $5774;
                                break;
                        };
                        return $5766;
                    });
                    var $5762 = $5765;
                };
                var $5762 = $5762($5759)($5760);
                var $5754 = $5762;
                break;
        };
        return $5754;
    };
    const Kind$Parser$file = x0 => x1 => x2 => x3 => x4 => Kind$Parser$file$(x0, x1, x2, x3, x4);

    function String$join$go$(_sep$1, _list$2, _fst$3) {
        var self = _list$2;
        switch (self._) {
            case 'List.cons':
                var $5776 = self.head;
                var $5777 = self.tail;
                var $5778 = String$flatten$(List$cons$((() => {
                    var self = _fst$3;
                    if (self) {
                        var $5779 = "";
                        return $5779;
                    } else {
                        var $5780 = _sep$1;
                        return $5780;
                    };
                })(), List$cons$($5776, List$cons$(String$join$go$(_sep$1, $5777, Bool$false), List$nil))));
                var $5775 = $5778;
                break;
            case 'List.nil':
                var $5781 = "";
                var $5775 = $5781;
                break;
        };
        return $5775;
    };
    const String$join$go = x0 => x1 => x2 => String$join$go$(x0, x1, x2);

    function String$join$(_sep$1, _list$2) {
        var $5782 = String$join$go$(_sep$1, _list$2, Bool$true);
        return $5782;
    };
    const String$join = x0 => x1 => String$join$(x0, x1);

    function Kind$Code$highlight$end$(_col$1, _row$2, _res$3) {
        var $5783 = String$join$("\u{a}", _res$3);
        return $5783;
    };
    const Kind$Code$highlight$end = x0 => x1 => x2 => Kind$Code$highlight$end$(x0, x1, x2);

    function Maybe$extract$(_m$2, _a$4, _f$5) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $5785 = self.value;
                var $5786 = _f$5($5785);
                var $5784 = $5786;
                break;
            case 'Maybe.none':
                var $5787 = _a$4;
                var $5784 = $5787;
                break;
        };
        return $5784;
    };
    const Maybe$extract = x0 => x1 => x2 => Maybe$extract$(x0, x1, x2);

    function Nat$is_zero$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $5789 = Bool$true;
            var $5788 = $5789;
        } else {
            var $5790 = (self - 1n);
            var $5791 = Bool$false;
            var $5788 = $5791;
        };
        return $5788;
    };
    const Nat$is_zero = x0 => Nat$is_zero$(x0);

    function Nat$double$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $5793 = Nat$zero;
            var $5792 = $5793;
        } else {
            var $5794 = (self - 1n);
            var $5795 = Nat$succ$(Nat$succ$(Nat$double$($5794)));
            var $5792 = $5795;
        };
        return $5792;
    };
    const Nat$double = x0 => Nat$double$(x0);

    function Nat$pred$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $5797 = Nat$zero;
            var $5796 = $5797;
        } else {
            var $5798 = (self - 1n);
            var $5799 = $5798;
            var $5796 = $5799;
        };
        return $5796;
    };
    const Nat$pred = x0 => Nat$pred$(x0);

    function String$pad_right$(_size$1, _chr$2, _str$3) {
        var self = _size$1;
        if (self === 0n) {
            var $5801 = _str$3;
            var $5800 = $5801;
        } else {
            var $5802 = (self - 1n);
            var self = _str$3;
            if (self.length === 0) {
                var $5804 = String$cons$(_chr$2, String$pad_right$($5802, _chr$2, ""));
                var $5803 = $5804;
            } else {
                var $5805 = self.charCodeAt(0);
                var $5806 = self.slice(1);
                var $5807 = String$cons$($5805, String$pad_right$($5802, _chr$2, $5806));
                var $5803 = $5807;
            };
            var $5800 = $5803;
        };
        return $5800;
    };
    const String$pad_right = x0 => x1 => x2 => String$pad_right$(x0, x1, x2);

    function String$pad_left$(_size$1, _chr$2, _str$3) {
        var $5808 = String$reverse$(String$pad_right$(_size$1, _chr$2, String$reverse$(_str$3)));
        return $5808;
    };
    const String$pad_left = x0 => x1 => x2 => String$pad_left$(x0, x1, x2);
    const Bool$not = a0 => (!a0);

    function Kind$Code$color$(_col$1, _str$2) {
        var $5809 = String$cons$(27, String$cons$(91, (_col$1 + String$cons$(109, (_str$2 + String$cons$(27, String$cons$(91, String$cons$(48, String$cons$(109, String$nil)))))))));
        return $5809;
    };
    const Kind$Code$color = x0 => x1 => Kind$Code$color$(x0, x1);
    const Nat$eql = a0 => a1 => (a0 === a1);

    function List$take$(_n$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.cons':
                var $5811 = self.head;
                var $5812 = self.tail;
                var self = _n$2;
                if (self === 0n) {
                    var $5814 = List$nil;
                    var $5813 = $5814;
                } else {
                    var $5815 = (self - 1n);
                    var $5816 = List$cons$($5811, List$take$($5815, $5812));
                    var $5813 = $5816;
                };
                var $5810 = $5813;
                break;
            case 'List.nil':
                var $5817 = List$nil;
                var $5810 = $5817;
                break;
        };
        return $5810;
    };
    const List$take = x0 => x1 => List$take$(x0, x1);

    function Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) {
        var Kind$Code$highlight$go$ = (_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) => ({
            ctr: 'TCO',
            arg: [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8]
        });
        var Kind$Code$highlight$go = _code$1 => _ix0$2 => _ix1$3 => _col$4 => _row$5 => _lft$6 => _lin$7 => _res$8 => Kind$Code$highlight$go$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8);
        var arg = [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8];
        while (true) {
            let [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8] = arg;
            var R = (() => {
                var _spa$9 = 3n;
                var self = _code$1;
                if (self.length === 0) {
                    var $5819 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                    var $5818 = $5819;
                } else {
                    var $5820 = self.charCodeAt(0);
                    var $5821 = self.slice(1);
                    var self = ($5820 === 10);
                    if (self) {
                        var _stp$12 = Maybe$extract$(_lft$6, Bool$false, Nat$is_zero);
                        var self = _stp$12;
                        if (self) {
                            var $5824 = Kind$Code$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                            var $5823 = $5824;
                        } else {
                            var _siz$13 = Nat$succ$(Nat$double$(_spa$9));
                            var self = _ix1$3;
                            if (self === 0n) {
                                var self = _lft$6;
                                switch (self._) {
                                    case 'Maybe.some':
                                        var $5827 = self.value;
                                        var $5828 = Maybe$some$(Nat$pred$($5827));
                                        var $5826 = $5828;
                                        break;
                                    case 'Maybe.none':
                                        var $5829 = Maybe$some$(_spa$9);
                                        var $5826 = $5829;
                                        break;
                                };
                                var _lft$14 = $5826;
                            } else {
                                var $5830 = (self - 1n);
                                var $5831 = _lft$6;
                                var _lft$14 = $5831;
                            };
                            var _ix0$15 = Nat$pred$(_ix0$2);
                            var _ix1$16 = Nat$pred$(_ix1$3);
                            var _col$17 = 0n;
                            var _row$18 = Nat$succ$(_row$5);
                            var _res$19 = List$cons$(String$reverse$(_lin$7), _res$8);
                            var _lin$20 = String$reverse$(String$flatten$(List$cons$(String$pad_left$(4n, 32, Nat$show$(_row$18)), List$cons$(" | ", List$nil))));
                            var $5825 = Kind$Code$highlight$go$($5821, _ix0$15, _ix1$16, _col$17, _row$18, _lft$14, _lin$20, _res$19);
                            var $5823 = $5825;
                        };
                        var $5822 = $5823;
                    } else {
                        var _chr$12 = String$cons$($5820, String$nil);
                        var self = (Nat$is_zero$(_ix0$2) && (!Nat$is_zero$(_ix1$3)));
                        if (self) {
                            var $5833 = String$reverse$(Kind$Code$color$("31", Kind$Code$color$("4", _chr$12)));
                            var _chr$13 = $5833;
                        } else {
                            var $5834 = _chr$12;
                            var _chr$13 = $5834;
                        };
                        var self = (_ix0$2 === 1n);
                        if (self) {
                            var $5835 = List$take$(_spa$9, _res$8);
                            var _res$14 = $5835;
                        } else {
                            var $5836 = _res$8;
                            var _res$14 = $5836;
                        };
                        var _ix0$15 = Nat$pred$(_ix0$2);
                        var _ix1$16 = Nat$pred$(_ix1$3);
                        var _col$17 = Nat$succ$(_col$4);
                        var _lin$18 = String$flatten$(List$cons$(_chr$13, List$cons$(_lin$7, List$nil)));
                        var $5832 = Kind$Code$highlight$go$($5821, _ix0$15, _ix1$16, _col$17, _row$5, _lft$6, _lin$18, _res$14);
                        var $5822 = $5832;
                    };
                    var $5818 = $5822;
                };
                return $5818;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Code$highlight$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Code$highlight$go$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Kind$Code$highlight$(_code$1, _idx0$2, _idx1$3) {
        var $5837 = Kind$Code$highlight$go$(_code$1, _idx0$2, _idx1$3, 0n, 1n, Maybe$none, String$reverse$("   1 | "), List$nil);
        return $5837;
    };
    const Kind$Code$highlight = x0 => x1 => x2 => Kind$Code$highlight$(x0, x1, x2);

    function Kind$Defs$read$(_file$1, _code$2, _defs$3) {
        var self = Kind$Parser$file$(_file$1, _code$2, _defs$3, 0n, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $5839 = self.idx;
                var $5840 = self.err;
                var _err$7 = $5840;
                var _hig$8 = Kind$Code$highlight$(_code$2, $5839, Nat$succ$($5839));
                var _str$9 = String$flatten$(List$cons$(_err$7, List$cons$("\u{a}", List$cons$(_hig$8, List$nil))));
                var $5841 = Either$left$(_str$9);
                var $5838 = $5841;
                break;
            case 'Parser.Reply.value':
                var $5842 = self.val;
                var $5843 = Either$right$($5842);
                var $5838 = $5843;
                break;
        };
        return $5838;
    };
    const Kind$Defs$read = x0 => x1 => x2 => Kind$Defs$read$(x0, x1, x2);

    function Kind$Synth$load$go$(_name$1, _files$2, _defs$3) {
        var self = _files$2;
        switch (self._) {
            case 'List.cons':
                var $5845 = self.head;
                var $5846 = self.tail;
                var $5847 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                    var $5848 = _m$bind$6;
                    return $5848;
                }))(IO$get_file$($5845))((_code$6 => {
                    var _read$7 = Kind$Defs$read$($5845, _code$6, _defs$3);
                    var self = _read$7;
                    switch (self._) {
                        case 'Either.right':
                            var $5850 = self.value;
                            var _defs$9 = $5850;
                            var self = Kind$Map$get$(_name$1, _defs$9);
                            switch (self._) {
                                case 'Maybe.none':
                                    var $5852 = Kind$Synth$load$go$(_name$1, $5846, _defs$9);
                                    var $5851 = $5852;
                                    break;
                                case 'Maybe.some':
                                    var $5853 = IO$monad$((_m$bind$11 => _m$pure$12 => {
                                        var $5854 = _m$pure$12;
                                        return $5854;
                                    }))(Maybe$some$(_defs$9));
                                    var $5851 = $5853;
                                    break;
                            };
                            var $5849 = $5851;
                            break;
                        case 'Either.left':
                            var $5855 = Kind$Synth$load$go$(_name$1, $5846, _defs$3);
                            var $5849 = $5855;
                            break;
                    };
                    return $5849;
                }));
                var $5844 = $5847;
                break;
            case 'List.nil':
                var $5856 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                    var $5857 = _m$pure$5;
                    return $5857;
                }))(Maybe$none);
                var $5844 = $5856;
                break;
        };
        return $5844;
    };
    const Kind$Synth$load$go = x0 => x1 => x2 => Kind$Synth$load$go$(x0, x1, x2);

    function Kind$Synth$files_of$make$(_names$1, _last$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $5859 = self.head;
                var $5860 = self.tail;
                var _head$5 = (_last$2 + ($5859 + ".kind"));
                var _tail$6 = Kind$Synth$files_of$make$($5860, (_last$2 + ($5859 + "/")));
                var $5861 = List$cons$(_head$5, _tail$6);
                var $5858 = $5861;
                break;
            case 'List.nil':
                var $5862 = List$nil;
                var $5858 = $5862;
                break;
        };
        return $5858;
    };
    const Kind$Synth$files_of$make = x0 => x1 => Kind$Synth$files_of$make$(x0, x1);

    function Char$eql$(_a$1, _b$2) {
        var $5863 = (_a$1 === _b$2);
        return $5863;
    };
    const Char$eql = x0 => x1 => Char$eql$(x0, x1);

    function String$starts_with$(_xs$1, _match$2) {
        var String$starts_with$ = (_xs$1, _match$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _match$2]
        });
        var String$starts_with = _xs$1 => _match$2 => String$starts_with$(_xs$1, _match$2);
        var arg = [_xs$1, _match$2];
        while (true) {
            let [_xs$1, _match$2] = arg;
            var R = (() => {
                var self = _match$2;
                if (self.length === 0) {
                    var $5864 = Bool$true;
                    return $5864;
                } else {
                    var $5865 = self.charCodeAt(0);
                    var $5866 = self.slice(1);
                    var self = _xs$1;
                    if (self.length === 0) {
                        var $5868 = Bool$false;
                        var $5867 = $5868;
                    } else {
                        var $5869 = self.charCodeAt(0);
                        var $5870 = self.slice(1);
                        var self = Char$eql$($5865, $5869);
                        if (self) {
                            var $5872 = String$starts_with$($5870, $5866);
                            var $5871 = $5872;
                        } else {
                            var $5873 = Bool$false;
                            var $5871 = $5873;
                        };
                        var $5867 = $5871;
                    };
                    return $5867;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$starts_with = x0 => x1 => String$starts_with$(x0, x1);

    function String$drop$(_n$1, _xs$2) {
        var String$drop$ = (_n$1, _xs$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _xs$2]
        });
        var String$drop = _n$1 => _xs$2 => String$drop$(_n$1, _xs$2);
        var arg = [_n$1, _xs$2];
        while (true) {
            let [_n$1, _xs$2] = arg;
            var R = (() => {
                var self = _n$1;
                if (self === 0n) {
                    var $5874 = _xs$2;
                    return $5874;
                } else {
                    var $5875 = (self - 1n);
                    var self = _xs$2;
                    if (self.length === 0) {
                        var $5877 = String$nil;
                        var $5876 = $5877;
                    } else {
                        var $5878 = self.charCodeAt(0);
                        var $5879 = self.slice(1);
                        var $5880 = String$drop$($5875, $5879);
                        var $5876 = $5880;
                    };
                    return $5876;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$drop = x0 => x1 => String$drop$(x0, x1);

    function String$length$go$(_xs$1, _n$2) {
        var String$length$go$ = (_xs$1, _n$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _n$2]
        });
        var String$length$go = _xs$1 => _n$2 => String$length$go$(_xs$1, _n$2);
        var arg = [_xs$1, _n$2];
        while (true) {
            let [_xs$1, _n$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $5881 = _n$2;
                    return $5881;
                } else {
                    var $5882 = self.charCodeAt(0);
                    var $5883 = self.slice(1);
                    var $5884 = String$length$go$($5883, Nat$succ$(_n$2));
                    return $5884;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$length$go = x0 => x1 => String$length$go$(x0, x1);

    function String$length$(_xs$1) {
        var $5885 = String$length$go$(_xs$1, 0n);
        return $5885;
    };
    const String$length = x0 => String$length$(x0);

    function String$split$go$(_xs$1, _match$2, _last$3) {
        var self = _xs$1;
        if (self.length === 0) {
            var $5887 = List$cons$(_last$3, List$nil);
            var $5886 = $5887;
        } else {
            var $5888 = self.charCodeAt(0);
            var $5889 = self.slice(1);
            var self = String$starts_with$(_xs$1, _match$2);
            if (self) {
                var _rest$6 = String$drop$(String$length$(_match$2), _xs$1);
                var $5891 = List$cons$(_last$3, String$split$go$(_rest$6, _match$2, ""));
                var $5890 = $5891;
            } else {
                var _next$6 = String$cons$($5888, String$nil);
                var $5892 = String$split$go$($5889, _match$2, (_last$3 + _next$6));
                var $5890 = $5892;
            };
            var $5886 = $5890;
        };
        return $5886;
    };
    const String$split$go = x0 => x1 => x2 => String$split$go$(x0, x1, x2);

    function String$split$(_xs$1, _match$2) {
        var $5893 = String$split$go$(_xs$1, _match$2, "");
        return $5893;
    };
    const String$split = x0 => x1 => String$split$(x0, x1);

    function Kind$Synth$files_of$(_name$1) {
        var $5894 = List$reverse$(Kind$Synth$files_of$make$(String$split$(_name$1, "."), ""));
        return $5894;
    };
    const Kind$Synth$files_of = x0 => Kind$Synth$files_of$(x0);

    function Kind$Synth$load$(_name$1, _defs$2) {
        var $5895 = Kind$Synth$load$go$(_name$1, Kind$Synth$files_of$(_name$1), _defs$2);
        return $5895;
    };
    const Kind$Synth$load = x0 => x1 => Kind$Synth$load$(x0, x1);
    const Kind$Status$wait = ({
        _: 'Kind.Status.wait'
    });

    function Kind$Check$(_V$1) {
        var $5896 = null;
        return $5896;
    };
    const Kind$Check = x0 => Kind$Check$(x0);

    function Kind$Check$result$(_value$2, _errors$3) {
        var $5897 = ({
            _: 'Kind.Check.result',
            'value': _value$2,
            'errors': _errors$3
        });
        return $5897;
    };
    const Kind$Check$result = x0 => x1 => Kind$Check$result$(x0, x1);

    function Kind$Error$undefined_reference$(_origin$1, _name$2) {
        var $5898 = ({
            _: 'Kind.Error.undefined_reference',
            'origin': _origin$1,
            'name': _name$2
        });
        return $5898;
    };
    const Kind$Error$undefined_reference = x0 => x1 => Kind$Error$undefined_reference$(x0, x1);

    function Kind$Error$waiting$(_name$1) {
        var $5899 = ({
            _: 'Kind.Error.waiting',
            'name': _name$1
        });
        return $5899;
    };
    const Kind$Error$waiting = x0 => Kind$Error$waiting$(x0);

    function Kind$Error$indirect$(_name$1) {
        var $5900 = ({
            _: 'Kind.Error.indirect',
            'name': _name$1
        });
        return $5900;
    };
    const Kind$Error$indirect = x0 => Kind$Error$indirect$(x0);

    function Maybe$mapped$(_m$2, _f$4) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.some':
                var $5902 = self.value;
                var $5903 = Maybe$some$(_f$4($5902));
                var $5901 = $5903;
                break;
            case 'Maybe.none':
                var $5904 = Maybe$none;
                var $5901 = $5904;
                break;
        };
        return $5901;
    };
    const Maybe$mapped = x0 => x1 => Maybe$mapped$(x0, x1);

    function Kind$MPath$o$(_path$1) {
        var $5905 = Maybe$mapped$(_path$1, Kind$Path$o);
        return $5905;
    };
    const Kind$MPath$o = x0 => Kind$MPath$o$(x0);

    function Kind$MPath$i$(_path$1) {
        var $5906 = Maybe$mapped$(_path$1, Kind$Path$i);
        return $5906;
    };
    const Kind$MPath$i = x0 => Kind$MPath$i$(x0);

    function Kind$Error$patch$(_path$1, _term$2) {
        var $5907 = ({
            _: 'Kind.Error.patch',
            'path': _path$1,
            'term': _term$2
        });
        return $5907;
    };
    const Kind$Error$patch = x0 => x1 => Kind$Error$patch$(x0, x1);

    function Kind$MPath$to_bits$(_path$1) {
        var self = _path$1;
        switch (self._) {
            case 'Maybe.some':
                var $5909 = self.value;
                var $5910 = $5909(Bits$e);
                var $5908 = $5910;
                break;
            case 'Maybe.none':
                var $5911 = Bits$e;
                var $5908 = $5911;
                break;
        };
        return $5908;
    };
    const Kind$MPath$to_bits = x0 => Kind$MPath$to_bits$(x0);

    function Kind$Error$type_mismatch$(_origin$1, _expected$2, _detected$3, _context$4) {
        var $5912 = ({
            _: 'Kind.Error.type_mismatch',
            'origin': _origin$1,
            'expected': _expected$2,
            'detected': _detected$3,
            'context': _context$4
        });
        return $5912;
    };
    const Kind$Error$type_mismatch = x0 => x1 => x2 => x3 => Kind$Error$type_mismatch$(x0, x1, x2, x3);

    function Kind$Error$show_goal$(_name$1, _dref$2, _verb$3, _goal$4, _context$5) {
        var $5913 = ({
            _: 'Kind.Error.show_goal',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3,
            'goal': _goal$4,
            'context': _context$5
        });
        return $5913;
    };
    const Kind$Error$show_goal = x0 => x1 => x2 => x3 => x4 => Kind$Error$show_goal$(x0, x1, x2, x3, x4);

    function Kind$Term$check$infer_with_types$(_vars$1, _defs$2, _ctx$3, _path$4, _orig$5) {
        var self = _vars$1;
        switch (self._) {
            case 'List.cons':
                var $5915 = self.head;
                var $5916 = self.tail;
                var self = $5915;
                switch (self._) {
                    case 'Kind.Ann.new':
                        var $5918 = self.name;
                        var $5919 = self.term;
                        var $5920 = self.type;
                        var self = $5920;
                        switch (self._) {
                            case 'Maybe.some':
                                var $5922 = self.value;
                                var $5923 = Kind$Check$result$(Maybe$some$(Maybe$some$($5922)), List$nil);
                                var self = $5923;
                                break;
                            case 'Maybe.none':
                                var self = Kind$Term$check$($5919, Maybe$none, _defs$2, _ctx$3, _path$4, _orig$5);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $5925 = self.value;
                                        var $5926 = self.errors;
                                        var self = $5925;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $5928 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$(Maybe$some$($5928)), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $5930 = self.value;
                                                        var $5931 = self.errors;
                                                        var $5932 = Kind$Check$result$($5930, List$concat$($5926, $5931));
                                                        var $5929 = $5932;
                                                        break;
                                                };
                                                var $5927 = $5929;
                                                break;
                                            case 'Maybe.none':
                                                var $5933 = Kind$Check$result$(Maybe$none, $5926);
                                                var $5927 = $5933;
                                                break;
                                        };
                                        var $5924 = $5927;
                                        break;
                                };
                                var self = $5924;
                                break;
                        };
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $5934 = self.value;
                                var $5935 = self.errors;
                                var self = $5934;
                                switch (self._) {
                                    case 'Maybe.some':
                                        var $5937 = self.value;
                                        var self = Kind$Term$check$infer_with_types$($5916, _defs$2, _ctx$3, _path$4, _orig$5);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5939 = self.value;
                                                var $5940 = self.errors;
                                                var self = $5939;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $5942 = self.value;
                                                        var self = Kind$Check$result$(Maybe$some$(List$cons$(Kind$Ann$new$($5918, $5919, $5937), $5942)), List$nil);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $5944 = self.value;
                                                                var $5945 = self.errors;
                                                                var $5946 = Kind$Check$result$($5944, List$concat$($5940, $5945));
                                                                var $5943 = $5946;
                                                                break;
                                                        };
                                                        var $5941 = $5943;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $5947 = Kind$Check$result$(Maybe$none, $5940);
                                                        var $5941 = $5947;
                                                        break;
                                                };
                                                var self = $5941;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $5948 = self.value;
                                                var $5949 = self.errors;
                                                var $5950 = Kind$Check$result$($5948, List$concat$($5935, $5949));
                                                var $5938 = $5950;
                                                break;
                                        };
                                        var $5936 = $5938;
                                        break;
                                    case 'Maybe.none':
                                        var $5951 = Kind$Check$result$(Maybe$none, $5935);
                                        var $5936 = $5951;
                                        break;
                                };
                                var $5921 = $5936;
                                break;
                        };
                        var $5917 = $5921;
                        break;
                };
                var $5914 = $5917;
                break;
            case 'List.nil':
                var $5952 = Kind$Check$result$(Maybe$some$(List$nil), List$nil);
                var $5914 = $5952;
                break;
        };
        return $5914;
    };
    const Kind$Term$check$infer_with_types = x0 => x1 => x2 => x3 => x4 => Kind$Term$check$infer_with_types$(x0, x1, x2, x3, x4);

    function Kind$Term$normalize$(_term$1, _defs$2) {
        var self = Kind$Term$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Kind.Term.var':
                var $5954 = self.name;
                var $5955 = self.indx;
                var $5956 = Kind$Term$var$($5954, $5955);
                var $5953 = $5956;
                break;
            case 'Kind.Term.ref':
                var $5957 = self.name;
                var $5958 = Kind$Term$ref$($5957);
                var $5953 = $5958;
                break;
            case 'Kind.Term.all':
                var $5959 = self.eras;
                var $5960 = self.self;
                var $5961 = self.name;
                var $5962 = self.xtyp;
                var $5963 = self.body;
                var $5964 = Kind$Term$all$($5959, $5960, $5961, Kind$Term$normalize$($5962, _defs$2), (_s$8 => _x$9 => {
                    var $5965 = Kind$Term$normalize$($5963(_s$8)(_x$9), _defs$2);
                    return $5965;
                }));
                var $5953 = $5964;
                break;
            case 'Kind.Term.lam':
                var $5966 = self.name;
                var $5967 = self.body;
                var $5968 = Kind$Term$lam$($5966, (_x$5 => {
                    var $5969 = Kind$Term$normalize$($5967(_x$5), _defs$2);
                    return $5969;
                }));
                var $5953 = $5968;
                break;
            case 'Kind.Term.app':
                var $5970 = self.func;
                var $5971 = self.argm;
                var $5972 = Kind$Term$app$(Kind$Term$normalize$($5970, _defs$2), Kind$Term$normalize$($5971, _defs$2));
                var $5953 = $5972;
                break;
            case 'Kind.Term.let':
                var $5973 = self.name;
                var $5974 = self.expr;
                var $5975 = self.body;
                var $5976 = Kind$Term$let$($5973, Kind$Term$normalize$($5974, _defs$2), (_x$6 => {
                    var $5977 = Kind$Term$normalize$($5975(_x$6), _defs$2);
                    return $5977;
                }));
                var $5953 = $5976;
                break;
            case 'Kind.Term.def':
                var $5978 = self.name;
                var $5979 = self.expr;
                var $5980 = self.body;
                var $5981 = Kind$Term$def$($5978, Kind$Term$normalize$($5979, _defs$2), (_x$6 => {
                    var $5982 = Kind$Term$normalize$($5980(_x$6), _defs$2);
                    return $5982;
                }));
                var $5953 = $5981;
                break;
            case 'Kind.Term.ann':
                var $5983 = self.done;
                var $5984 = self.term;
                var $5985 = self.type;
                var $5986 = Kind$Term$ann$($5983, Kind$Term$normalize$($5984, _defs$2), Kind$Term$normalize$($5985, _defs$2));
                var $5953 = $5986;
                break;
            case 'Kind.Term.gol':
                var $5987 = self.name;
                var $5988 = self.dref;
                var $5989 = self.verb;
                var $5990 = Kind$Term$gol$($5987, $5988, $5989);
                var $5953 = $5990;
                break;
            case 'Kind.Term.hol':
                var $5991 = self.path;
                var $5992 = Kind$Term$hol$($5991);
                var $5953 = $5992;
                break;
            case 'Kind.Term.nat':
                var $5993 = self.natx;
                var $5994 = Kind$Term$nat$($5993);
                var $5953 = $5994;
                break;
            case 'Kind.Term.chr':
                var $5995 = self.chrx;
                var $5996 = Kind$Term$chr$($5995);
                var $5953 = $5996;
                break;
            case 'Kind.Term.str':
                var $5997 = self.strx;
                var $5998 = Kind$Term$str$($5997);
                var $5953 = $5998;
                break;
            case 'Kind.Term.ori':
                var $5999 = self.expr;
                var $6000 = Kind$Term$normalize$($5999, _defs$2);
                var $5953 = $6000;
                break;
            case 'Kind.Term.typ':
                var $6001 = Kind$Term$typ;
                var $5953 = $6001;
                break;
            case 'Kind.Term.cse':
                var $6002 = _term$1;
                var $5953 = $6002;
                break;
        };
        return $5953;
    };
    const Kind$Term$normalize = x0 => x1 => Kind$Term$normalize$(x0, x1);

    function Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {
        var self = _wyth$1;
        switch (self._) {
            case 'List.cons':
                var $6004 = self.head;
                var $6005 = self.tail;
                var self = $6004;
                switch (self._) {
                    case 'Kind.Ann.new':
                        var $6007 = self.name;
                        var $6008 = self.type;
                        var $6009 = Kind$Term$all$(Bool$false, "", $6007, Maybe$default$($6008, Kind$Term$hol$(Bits$e)), (_s$14 => _x$15 => {
                            var $6010 = Kind$Term$desugar_cse$motive$($6005, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, Nat$succ$(Nat$succ$(_size$8)));
                            return $6010;
                        }));
                        var $6006 = $6009;
                        break;
                };
                var $6003 = $6006;
                break;
            case 'List.nil':
                var self = _moti$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $6012 = self.value;
                        var $6013 = $6012;
                        var $6011 = $6013;
                        break;
                    case 'Maybe.none':
                        var self = _rtyp$6;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6015 = self.value;
                                var $6016 = Kind$Term$normalize$($6015, Kind$Map$new);
                                var $6014 = $6016;
                                break;
                            case 'Maybe.none':
                                var $6017 = Kind$Term$hol$(Bits$e);
                                var $6014 = $6017;
                                break;
                        };
                        var $6011 = $6014;
                        break;
                };
                var $6003 = $6011;
                break;
        };
        return $6003;
    };
    const Kind$Term$desugar_cse$motive$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$go$(x0, x1, x2, x3, x4, x5, x6, x7);

    function List$tail$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $6019 = self.tail;
                var $6020 = $6019;
                var $6018 = $6020;
                break;
            case 'List.nil':
                var $6021 = List$nil;
                var $6018 = $6021;
                break;
        };
        return $6018;
    };
    const List$tail = x0 => List$tail$(x0);

    function Kind$Term$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4) {
        var Kind$Term$SmartMotive$vals$cont$ = (_expr$1, _term$2, _args$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_expr$1, _term$2, _args$3, _defs$4]
        });
        var Kind$Term$SmartMotive$vals$cont = _expr$1 => _term$2 => _args$3 => _defs$4 => Kind$Term$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4);
        var arg = [_expr$1, _term$2, _args$3, _defs$4];
        while (true) {
            let [_expr$1, _term$2, _args$3, _defs$4] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Kind.Term.app':
                        var $6022 = self.func;
                        var $6023 = self.argm;
                        var $6024 = Kind$Term$SmartMotive$vals$cont$(_expr$1, $6022, List$cons$($6023, _args$3), _defs$4);
                        return $6024;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6025 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $6025;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$vals$cont = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$vals$cont$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$vals$(_expr$1, _type$2, _defs$3) {
        var Kind$Term$SmartMotive$vals$ = (_expr$1, _type$2, _defs$3) => ({
            ctr: 'TCO',
            arg: [_expr$1, _type$2, _defs$3]
        });
        var Kind$Term$SmartMotive$vals = _expr$1 => _type$2 => _defs$3 => Kind$Term$SmartMotive$vals$(_expr$1, _type$2, _defs$3);
        var arg = [_expr$1, _type$2, _defs$3];
        while (true) {
            let [_expr$1, _type$2, _defs$3] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_type$2, _defs$3);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6026 = self.body;
                        var $6027 = Kind$Term$SmartMotive$vals$(_expr$1, $6026(Kind$Term$typ)(Kind$Term$typ), _defs$3);
                        return $6027;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6028 = Kind$Term$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $6028;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$vals = x0 => x1 => x2 => Kind$Term$SmartMotive$vals$(x0, x1, x2);

    function Kind$Term$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4) {
        var Kind$Term$SmartMotive$nams$cont$ = (_name$1, _term$2, _binds$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_name$1, _term$2, _binds$3, _defs$4]
        });
        var Kind$Term$SmartMotive$nams$cont = _name$1 => _term$2 => _binds$3 => _defs$4 => Kind$Term$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4);
        var arg = [_name$1, _term$2, _binds$3, _defs$4];
        while (true) {
            let [_name$1, _term$2, _binds$3, _defs$4] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6029 = self.self;
                        var $6030 = self.name;
                        var $6031 = self.body;
                        var $6032 = Kind$Term$SmartMotive$nams$cont$(_name$1, $6031(Kind$Term$ref$($6029))(Kind$Term$ref$($6030)), List$cons$(String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($6030, List$nil)))), _binds$3), _defs$4);
                        return $6032;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $6033 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $6033;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$SmartMotive$nams$cont = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$nams$cont$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$nams$(_name$1, _type$2, _defs$3) {
        var self = Kind$Term$reduce$(_type$2, _defs$3);
        switch (self._) {
            case 'Kind.Term.all':
                var $6035 = self.xtyp;
                var $6036 = Kind$Term$SmartMotive$nams$cont$(_name$1, $6035, List$nil, _defs$3);
                var $6034 = $6036;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $6037 = List$nil;
                var $6034 = $6037;
                break;
        };
        return $6034;
    };
    const Kind$Term$SmartMotive$nams = x0 => x1 => x2 => Kind$Term$SmartMotive$nams$(x0, x1, x2);

    function List$zip$(_as$3, _bs$4) {
        var self = _as$3;
        switch (self._) {
            case 'List.cons':
                var $6039 = self.head;
                var $6040 = self.tail;
                var self = _bs$4;
                switch (self._) {
                    case 'List.cons':
                        var $6042 = self.head;
                        var $6043 = self.tail;
                        var $6044 = List$cons$(Pair$new$($6039, $6042), List$zip$($6040, $6043));
                        var $6041 = $6044;
                        break;
                    case 'List.nil':
                        var $6045 = List$nil;
                        var $6041 = $6045;
                        break;
                };
                var $6038 = $6041;
                break;
            case 'List.nil':
                var $6046 = List$nil;
                var $6038 = $6046;
                break;
        };
        return $6038;
    };
    const List$zip = x0 => x1 => List$zip$(x0, x1);
    const Nat$gte = a0 => a1 => (a0 >= a1);
    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);

    function Kind$Term$serialize$go$(_term$1, _depth$2, _init$3, _diff$4, _x$5) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $6048 = self.indx;
                var self = ($6048 >= _init$3);
                if (self) {
                    var _name$8 = a1 => (a1 + (nat_to_bits(Nat$pred$((_depth$2 - $6048 <= 0n ? 0n : _depth$2 - $6048)))));
                    var $6050 = (((_name$8(_x$5) + '1') + '0') + '0');
                    var $6049 = $6050;
                } else {
                    var _name$8 = a1 => (a1 + (nat_to_bits($6048)));
                    var $6051 = (((_name$8(_x$5) + '0') + '1') + '0');
                    var $6049 = $6051;
                };
                var $6047 = $6049;
                break;
            case 'Kind.Term.ref':
                var $6052 = self.name;
                var _name$7 = a1 => (a1 + (kind_name_to_bits($6052)));
                var $6053 = (((_name$7(_x$5) + '0') + '0') + '0');
                var $6047 = $6053;
                break;
            case 'Kind.Term.all':
                var $6054 = self.eras;
                var $6055 = self.self;
                var $6056 = self.name;
                var $6057 = self.xtyp;
                var $6058 = self.body;
                var self = $6054;
                if (self) {
                    var $6060 = Bits$i;
                    var _eras$11 = $6060;
                } else {
                    var $6061 = Bits$o;
                    var _eras$11 = $6061;
                };
                var _self$12 = a1 => (a1 + (kind_name_to_bits($6055)));
                var _xtyp$13 = Kind$Term$serialize$go($6057)(_depth$2)(_init$3)(_diff$4);
                var _body$14 = Kind$Term$serialize$go($6058(Kind$Term$var$($6055, _depth$2))(Kind$Term$var$($6056, Nat$succ$(_depth$2))))(Nat$succ$(Nat$succ$(_depth$2)))(_init$3)(_diff$4);
                var $6059 = (((_eras$11(_self$12(_xtyp$13(_body$14(_x$5)))) + '0') + '0') + '1');
                var $6047 = $6059;
                break;
            case 'Kind.Term.lam':
                var $6062 = self.name;
                var $6063 = self.body;
                var _body$8 = Kind$Term$serialize$go($6063(Kind$Term$var$($6062, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $6064 = (((_body$8(_x$5) + '1') + '0') + '1');
                var $6047 = $6064;
                break;
            case 'Kind.Term.app':
                var $6065 = self.func;
                var $6066 = self.argm;
                var _func$8 = Kind$Term$serialize$go($6065)(_depth$2)(_init$3)(_diff$4);
                var _argm$9 = Kind$Term$serialize$go($6066)(_depth$2)(_init$3)(_diff$4);
                var $6067 = (((_func$8(_argm$9(_x$5)) + '0') + '1') + '1');
                var $6047 = $6067;
                break;
            case 'Kind.Term.let':
                var $6068 = self.name;
                var $6069 = self.expr;
                var $6070 = self.body;
                var _expr$9 = Kind$Term$serialize$go($6069)(_depth$2)(_init$3)(_diff$4);
                var _body$10 = Kind$Term$serialize$go($6070(Kind$Term$var$($6068, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $6071 = (((_expr$9(_body$10(_x$5)) + '1') + '1') + '1');
                var $6047 = $6071;
                break;
            case 'Kind.Term.def':
                var $6072 = self.expr;
                var $6073 = self.body;
                var $6074 = Kind$Term$serialize$go$($6073($6072), _depth$2, _init$3, _diff$4, _x$5);
                var $6047 = $6074;
                break;
            case 'Kind.Term.ann':
                var $6075 = self.term;
                var $6076 = Kind$Term$serialize$go$($6075, _depth$2, _init$3, _diff$4, _x$5);
                var $6047 = $6076;
                break;
            case 'Kind.Term.gol':
                var $6077 = self.name;
                var _name$9 = a1 => (a1 + (kind_name_to_bits($6077)));
                var $6078 = (((_name$9(_x$5) + '0') + '0') + '0');
                var $6047 = $6078;
                break;
            case 'Kind.Term.nat':
                var $6079 = self.natx;
                var $6080 = Kind$Term$serialize$go$(Kind$Term$unroll_nat$($6079), _depth$2, _init$3, _diff$4, _x$5);
                var $6047 = $6080;
                break;
            case 'Kind.Term.chr':
                var $6081 = self.chrx;
                var $6082 = Kind$Term$serialize$go$(Kind$Term$unroll_chr$($6081), _depth$2, _init$3, _diff$4, _x$5);
                var $6047 = $6082;
                break;
            case 'Kind.Term.str':
                var $6083 = self.strx;
                var $6084 = Kind$Term$serialize$go$(Kind$Term$unroll_str$($6083), _depth$2, _init$3, _diff$4, _x$5);
                var $6047 = $6084;
                break;
            case 'Kind.Term.ori':
                var $6085 = self.expr;
                var $6086 = Kind$Term$serialize$go$($6085, _depth$2, _init$3, _diff$4, _x$5);
                var $6047 = $6086;
                break;
            case 'Kind.Term.typ':
                var $6087 = (((_x$5 + '1') + '1') + '0');
                var $6047 = $6087;
                break;
            case 'Kind.Term.hol':
                var $6088 = _x$5;
                var $6047 = $6088;
                break;
            case 'Kind.Term.cse':
                var $6089 = _diff$4(_x$5);
                var $6047 = $6089;
                break;
        };
        return $6047;
    };
    const Kind$Term$serialize$go = x0 => x1 => x2 => x3 => x4 => Kind$Term$serialize$go$(x0, x1, x2, x3, x4);

    function Kind$Term$serialize$(_term$1, _depth$2, _side$3) {
        var self = _side$3;
        if (self) {
            var $6091 = Bits$o;
            var _diff$4 = $6091;
        } else {
            var $6092 = Bits$i;
            var _diff$4 = $6092;
        };
        var $6090 = Kind$Term$serialize$go$(_term$1, _depth$2, _depth$2, _diff$4, Bits$e);
        return $6090;
    };
    const Kind$Term$serialize = x0 => x1 => x2 => Kind$Term$serialize$(x0, x1, x2);
    const Bits$eql = a0 => a1 => (a1 === a0);

    function Kind$Term$identical$(_a$1, _b$2, _lv$3) {
        var _ah$4 = Kind$Term$serialize$(_a$1, _lv$3, Bool$false);
        var _bh$5 = Kind$Term$serialize$(_b$2, _lv$3, Bool$true);
        var $6093 = (_bh$5 === _ah$4);
        return $6093;
    };
    const Kind$Term$identical = x0 => x1 => x2 => Kind$Term$identical$(x0, x1, x2);

    function Kind$Term$SmartMotive$replace$(_term$1, _from$2, _to$3, _lv$4) {
        var self = Kind$Term$identical$(_term$1, _from$2, _lv$4);
        if (self) {
            var $6095 = _to$3;
            var $6094 = $6095;
        } else {
            var self = _term$1;
            switch (self._) {
                case 'Kind.Term.var':
                    var $6097 = self.name;
                    var $6098 = self.indx;
                    var $6099 = Kind$Term$var$($6097, $6098);
                    var $6096 = $6099;
                    break;
                case 'Kind.Term.ref':
                    var $6100 = self.name;
                    var $6101 = Kind$Term$ref$($6100);
                    var $6096 = $6101;
                    break;
                case 'Kind.Term.all':
                    var $6102 = self.eras;
                    var $6103 = self.self;
                    var $6104 = self.name;
                    var $6105 = self.xtyp;
                    var $6106 = self.body;
                    var _xtyp$10 = Kind$Term$SmartMotive$replace$($6105, _from$2, _to$3, _lv$4);
                    var _body$11 = $6106(Kind$Term$ref$($6103))(Kind$Term$ref$($6104));
                    var _body$12 = Kind$Term$SmartMotive$replace$(_body$11, _from$2, _to$3, Nat$succ$(Nat$succ$(_lv$4)));
                    var $6107 = Kind$Term$all$($6102, $6103, $6104, _xtyp$10, (_s$13 => _x$14 => {
                        var $6108 = _body$12;
                        return $6108;
                    }));
                    var $6096 = $6107;
                    break;
                case 'Kind.Term.lam':
                    var $6109 = self.name;
                    var $6110 = self.body;
                    var _body$7 = $6110(Kind$Term$ref$($6109));
                    var _body$8 = Kind$Term$SmartMotive$replace$(_body$7, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6111 = Kind$Term$lam$($6109, (_x$9 => {
                        var $6112 = _body$8;
                        return $6112;
                    }));
                    var $6096 = $6111;
                    break;
                case 'Kind.Term.app':
                    var $6113 = self.func;
                    var $6114 = self.argm;
                    var _func$7 = Kind$Term$SmartMotive$replace$($6113, _from$2, _to$3, _lv$4);
                    var _argm$8 = Kind$Term$SmartMotive$replace$($6114, _from$2, _to$3, _lv$4);
                    var $6115 = Kind$Term$app$(_func$7, _argm$8);
                    var $6096 = $6115;
                    break;
                case 'Kind.Term.let':
                    var $6116 = self.name;
                    var $6117 = self.expr;
                    var $6118 = self.body;
                    var _expr$8 = Kind$Term$SmartMotive$replace$($6117, _from$2, _to$3, _lv$4);
                    var _body$9 = $6118(Kind$Term$ref$($6116));
                    var _body$10 = Kind$Term$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6119 = Kind$Term$let$($6116, _expr$8, (_x$11 => {
                        var $6120 = _body$10;
                        return $6120;
                    }));
                    var $6096 = $6119;
                    break;
                case 'Kind.Term.def':
                    var $6121 = self.name;
                    var $6122 = self.expr;
                    var $6123 = self.body;
                    var _expr$8 = Kind$Term$SmartMotive$replace$($6122, _from$2, _to$3, _lv$4);
                    var _body$9 = $6123(Kind$Term$ref$($6121));
                    var _body$10 = Kind$Term$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $6124 = Kind$Term$def$($6121, _expr$8, (_x$11 => {
                        var $6125 = _body$10;
                        return $6125;
                    }));
                    var $6096 = $6124;
                    break;
                case 'Kind.Term.ann':
                    var $6126 = self.done;
                    var $6127 = self.term;
                    var $6128 = self.type;
                    var _term$8 = Kind$Term$SmartMotive$replace$($6127, _from$2, _to$3, _lv$4);
                    var _type$9 = Kind$Term$SmartMotive$replace$($6128, _from$2, _to$3, _lv$4);
                    var $6129 = Kind$Term$ann$($6126, _term$8, _type$9);
                    var $6096 = $6129;
                    break;
                case 'Kind.Term.ori':
                    var $6130 = self.expr;
                    var $6131 = Kind$Term$SmartMotive$replace$($6130, _from$2, _to$3, _lv$4);
                    var $6096 = $6131;
                    break;
                case 'Kind.Term.typ':
                    var $6132 = Kind$Term$typ;
                    var $6096 = $6132;
                    break;
                case 'Kind.Term.gol':
                case 'Kind.Term.hol':
                case 'Kind.Term.nat':
                case 'Kind.Term.chr':
                case 'Kind.Term.str':
                case 'Kind.Term.cse':
                    var $6133 = _term$1;
                    var $6096 = $6133;
                    break;
            };
            var $6094 = $6096;
        };
        return $6094;
    };
    const Kind$Term$SmartMotive$replace = x0 => x1 => x2 => x3 => Kind$Term$SmartMotive$replace$(x0, x1, x2, x3);

    function Kind$Term$SmartMotive$make$(_name$1, _expr$2, _type$3, _moti$4, _size$5, _defs$6) {
        var _vals$7 = Kind$Term$SmartMotive$vals$(_expr$2, _type$3, _defs$6);
        var _nams$8 = Kind$Term$SmartMotive$nams$(_name$1, _type$3, _defs$6);
        var _subs$9 = List$zip$(_nams$8, _vals$7);
        var $6134 = List$fold$(_subs$9, _moti$4, (_sub$10 => _moti$11 => {
            var self = _sub$10;
            switch (self._) {
                case 'Pair.new':
                    var $6136 = self.fst;
                    var $6137 = self.snd;
                    var $6138 = Kind$Term$SmartMotive$replace$(_moti$11, $6137, Kind$Term$ref$($6136), _size$5);
                    var $6135 = $6138;
                    break;
            };
            return $6135;
        }));
        return $6134;
    };
    const Kind$Term$SmartMotive$make = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$SmartMotive$make$(x0, x1, x2, x3, x4, x5);

    function Kind$Term$desugar_cse$motive$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8) {
        var _done$9 = Kind$Term$desugar_cse$motive$go$(_wyth$1, _moti$2, _name$3, _expr$4, _etyp$5, _rtyp$6, _defs$7, _size$8);
        var self = _moti$2;
        switch (self._) {
            case 'Maybe.none':
                var $6140 = Kind$Term$SmartMotive$make$(_name$3, _expr$4, _etyp$5, _done$9, _size$8, _defs$7);
                var $6139 = $6140;
                break;
            case 'Maybe.some':
                var $6141 = _done$9;
                var $6139 = $6141;
                break;
        };
        return $6139;
    };
    const Kind$Term$desugar_cse$motive = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Kind$Term$desugar_cse$motive$(x0, x1, x2, x3, x4, x5, x6, x7);

    function String$is_empty$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $6143 = Bool$true;
            var $6142 = $6143;
        } else {
            var $6144 = self.charCodeAt(0);
            var $6145 = self.slice(1);
            var $6146 = Bool$false;
            var $6142 = $6146;
        };
        return $6142;
    };
    const String$is_empty = x0 => String$is_empty$(x0);

    function Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, _type$3, _body$4, _defs$5) {
        var self = Kind$Term$reduce$(_type$3, _defs$5);
        switch (self._) {
            case 'Kind.Term.all':
                var $6148 = self.self;
                var $6149 = self.name;
                var $6150 = self.body;
                var $6151 = Kind$Term$lam$((() => {
                    var self = String$is_empty$($6149);
                    if (self) {
                        var $6152 = _name$1;
                        return $6152;
                    } else {
                        var $6153 = String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($6149, List$nil))));
                        return $6153;
                    };
                })(), (_x$11 => {
                    var $6154 = Kind$Term$desugar_cse$argument$(_name$1, _wyth$2, $6150(Kind$Term$var$($6148, 0n))(Kind$Term$var$($6149, 0n)), _body$4, _defs$5);
                    return $6154;
                }));
                var $6147 = $6151;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.ori':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6156 = self.head;
                        var $6157 = self.tail;
                        var self = $6156;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6159 = self.name;
                                var $6160 = Kind$Term$lam$($6159, (_x$13 => {
                                    var $6161 = Kind$Term$desugar_cse$argument$(_name$1, $6157, _type$3, _body$4, _defs$5);
                                    return $6161;
                                }));
                                var $6158 = $6160;
                                break;
                        };
                        var $6155 = $6158;
                        break;
                    case 'List.nil':
                        var $6162 = _body$4;
                        var $6155 = $6162;
                        break;
                };
                var $6147 = $6155;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6164 = self.head;
                        var $6165 = self.tail;
                        var self = $6164;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6167 = self.name;
                                var $6168 = Kind$Term$lam$($6167, (_x$12 => {
                                    var $6169 = Kind$Term$desugar_cse$argument$(_name$1, $6165, _type$3, _body$4, _defs$5);
                                    return $6169;
                                }));
                                var $6166 = $6168;
                                break;
                        };
                        var $6163 = $6166;
                        break;
                    case 'List.nil':
                        var $6170 = _body$4;
                        var $6163 = $6170;
                        break;
                };
                var $6147 = $6163;
                break;
            case 'Kind.Term.typ':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6172 = self.head;
                        var $6173 = self.tail;
                        var self = $6172;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6175 = self.name;
                                var $6176 = Kind$Term$lam$($6175, (_x$11 => {
                                    var $6177 = Kind$Term$desugar_cse$argument$(_name$1, $6173, _type$3, _body$4, _defs$5);
                                    return $6177;
                                }));
                                var $6174 = $6176;
                                break;
                        };
                        var $6171 = $6174;
                        break;
                    case 'List.nil':
                        var $6178 = _body$4;
                        var $6171 = $6178;
                        break;
                };
                var $6147 = $6171;
                break;
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6180 = self.head;
                        var $6181 = self.tail;
                        var self = $6180;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6183 = self.name;
                                var $6184 = Kind$Term$lam$($6183, (_x$14 => {
                                    var $6185 = Kind$Term$desugar_cse$argument$(_name$1, $6181, _type$3, _body$4, _defs$5);
                                    return $6185;
                                }));
                                var $6182 = $6184;
                                break;
                        };
                        var $6179 = $6182;
                        break;
                    case 'List.nil':
                        var $6186 = _body$4;
                        var $6179 = $6186;
                        break;
                };
                var $6147 = $6179;
                break;
            case 'Kind.Term.cse':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.cons':
                        var $6188 = self.head;
                        var $6189 = self.tail;
                        var self = $6188;
                        switch (self._) {
                            case 'Kind.Ann.new':
                                var $6191 = self.name;
                                var $6192 = Kind$Term$lam$($6191, (_x$17 => {
                                    var $6193 = Kind$Term$desugar_cse$argument$(_name$1, $6189, _type$3, _body$4, _defs$5);
                                    return $6193;
                                }));
                                var $6190 = $6192;
                                break;
                        };
                        var $6187 = $6190;
                        break;
                    case 'List.nil':
                        var $6194 = _body$4;
                        var $6187 = $6194;
                        break;
                };
                var $6147 = $6187;
                break;
        };
        return $6147;
    };
    const Kind$Term$desugar_cse$argument = x0 => x1 => x2 => x3 => x4 => Kind$Term$desugar_cse$argument$(x0, x1, x2, x3, x4);

    function Maybe$or$(_a$2, _b$3) {
        var self = _a$2;
        switch (self._) {
            case 'Maybe.some':
                var $6196 = self.value;
                var $6197 = Maybe$some$($6196);
                var $6195 = $6197;
                break;
            case 'Maybe.none':
                var $6198 = _b$3;
                var $6195 = $6198;
                break;
        };
        return $6195;
    };
    const Maybe$or = x0 => x1 => Maybe$or$(x0, x1);

    function Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) {
        var Kind$Term$desugar_cse$cases$ = (_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) => ({
            ctr: 'TCO',
            arg: [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7]
        });
        var Kind$Term$desugar_cse$cases = _expr$1 => _name$2 => _wyth$3 => _cses$4 => _type$5 => _defs$6 => _ctxt$7 => Kind$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7);
        var arg = [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7];
        while (true) {
            let [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7] = arg;
            var R = (() => {
                var self = Kind$Term$reduce$(_type$5, _defs$6);
                switch (self._) {
                    case 'Kind.Term.all':
                        var $6199 = self.self;
                        var $6200 = self.name;
                        var $6201 = self.xtyp;
                        var $6202 = self.body;
                        var _argm$13 = Maybe$or$(Kind$Map$get$($6200, _cses$4), Kind$Map$get$("_", _cses$4));
                        var _argm$14 = Maybe$default$(_argm$13, Kind$Term$ref$((_name$2 + ("_" + ($6200 + "_case")))));
                        var _argm$15 = Kind$Term$desugar_cse$argument$(_name$2, _wyth$3, $6201, _argm$14, _defs$6);
                        var _expr$16 = Kind$Term$app$(_expr$1, _argm$15);
                        var _type$17 = $6202(Kind$Term$var$($6199, 0n))(Kind$Term$var$($6200, 0n));
                        var $6203 = Kind$Term$desugar_cse$cases$(_expr$16, _name$2, _wyth$3, _cses$4, _type$17, _defs$6, _ctxt$7);
                        return $6203;
                    case 'Kind.Term.var':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.ori':
                        var _expr$10 = (() => {
                            var $6206 = _expr$1;
                            var $6207 = _wyth$3;
                            let _expr$11 = $6206;
                            let _defn$10;
                            while ($6207._ === 'List.cons') {
                                _defn$10 = $6207.head;
                                var $6206 = Kind$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6208 = self.term;
                                            var $6209 = $6208;
                                            return $6209;
                                    };
                                })());
                                _expr$11 = $6206;
                                $6207 = $6207.tail;
                            }
                            return _expr$11;
                        })();
                        var $6204 = _expr$10;
                        return $6204;
                    case 'Kind.Term.ref':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                        var _expr$9 = (() => {
                            var $6212 = _expr$1;
                            var $6213 = _wyth$3;
                            let _expr$10 = $6212;
                            let _defn$9;
                            while ($6213._ === 'List.cons') {
                                _defn$9 = $6213.head;
                                var $6212 = Kind$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6214 = self.term;
                                            var $6215 = $6214;
                                            return $6215;
                                    };
                                })());
                                _expr$10 = $6212;
                                $6213 = $6213.tail;
                            }
                            return _expr$10;
                        })();
                        var $6210 = _expr$9;
                        return $6210;
                    case 'Kind.Term.typ':
                        var _expr$8 = (() => {
                            var $6218 = _expr$1;
                            var $6219 = _wyth$3;
                            let _expr$9 = $6218;
                            let _defn$8;
                            while ($6219._ === 'List.cons') {
                                _defn$8 = $6219.head;
                                var $6218 = Kind$Term$app$(_expr$9, (() => {
                                    var self = _defn$8;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6220 = self.term;
                                            var $6221 = $6220;
                                            return $6221;
                                    };
                                })());
                                _expr$9 = $6218;
                                $6219 = $6219.tail;
                            }
                            return _expr$9;
                        })();
                        var $6216 = _expr$8;
                        return $6216;
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                        var _expr$11 = (() => {
                            var $6224 = _expr$1;
                            var $6225 = _wyth$3;
                            let _expr$12 = $6224;
                            let _defn$11;
                            while ($6225._ === 'List.cons') {
                                _defn$11 = $6225.head;
                                var $6224 = Kind$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6226 = self.term;
                                            var $6227 = $6226;
                                            return $6227;
                                    };
                                })());
                                _expr$12 = $6224;
                                $6225 = $6225.tail;
                            }
                            return _expr$12;
                        })();
                        var $6222 = _expr$11;
                        return $6222;
                    case 'Kind.Term.cse':
                        var _expr$14 = (() => {
                            var $6230 = _expr$1;
                            var $6231 = _wyth$3;
                            let _expr$15 = $6230;
                            let _defn$14;
                            while ($6231._ === 'List.cons') {
                                _defn$14 = $6231.head;
                                var $6230 = Kind$Term$app$(_expr$15, (() => {
                                    var self = _defn$14;
                                    switch (self._) {
                                        case 'Kind.Ann.new':
                                            var $6232 = self.term;
                                            var $6233 = $6232;
                                            return $6233;
                                    };
                                })());
                                _expr$15 = $6230;
                                $6231 = $6231.tail;
                            }
                            return _expr$15;
                        })();
                        var $6228 = _expr$14;
                        return $6228;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$desugar_cse$cases = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Kind$Term$desugar_cse$cases$(x0, x1, x2, x3, x4, x5, x6);

    function Kind$Term$desugar_cse$(_expr$1, _name$2, _wyth$3, _cses$4, _moti$5, _etyp$6, _rtyp$7, _defs$8, _ctxt$9) {
        var self = Kind$Term$reduce$(_etyp$6, _defs$8);
        switch (self._) {
            case 'Kind.Term.all':
                var $6235 = self.self;
                var $6236 = self.name;
                var $6237 = self.xtyp;
                var $6238 = self.body;
                var _moti$15 = Kind$Term$desugar_cse$motive$(_wyth$3, _moti$5, _name$2, _expr$1, _etyp$6, _rtyp$7, _defs$8, (list_length(_ctxt$9)));
                var _argm$16 = Kind$Term$desugar_cse$argument$(_name$2, List$nil, $6237, _moti$15, _defs$8);
                var _expr$17 = Kind$Term$app$(_expr$1, _argm$16);
                var _type$18 = $6238(Kind$Term$var$($6235, 0n))(Kind$Term$var$($6236, 0n));
                var $6239 = Maybe$some$(Kind$Term$desugar_cse$cases$(_expr$17, _name$2, _wyth$3, _cses$4, _type$18, _defs$8, _ctxt$9));
                var $6234 = $6239;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $6240 = Maybe$none;
                var $6234 = $6240;
                break;
        };
        return $6234;
    };
    const Kind$Term$desugar_cse = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Kind$Term$desugar_cse$(x0, x1, x2, x3, x4, x5, x6, x7, x8);

    function Kind$Error$cant_infer$(_origin$1, _term$2, _context$3) {
        var $6241 = ({
            _: 'Kind.Error.cant_infer',
            'origin': _origin$1,
            'term': _term$2,
            'context': _context$3
        });
        return $6241;
    };
    const Kind$Error$cant_infer = x0 => x1 => x2 => Kind$Error$cant_infer$(x0, x1, x2);

    function BitsSet$has$(_bits$1, _set$2) {
        var self = BitsMap$get$(_bits$1, _set$2);
        switch (self._) {
            case 'Maybe.none':
                var $6243 = Bool$false;
                var $6242 = $6243;
                break;
            case 'Maybe.some':
                var $6244 = Bool$true;
                var $6242 = $6244;
                break;
        };
        return $6242;
    };
    const BitsSet$has = x0 => x1 => BitsSet$has$(x0, x1);

    function BitsSet$mut$has$(_bits$1, _set$2) {
        var $6245 = BitsSet$has$(_bits$1, _set$2);
        return $6245;
    };
    const BitsSet$mut$has = x0 => x1 => BitsSet$mut$has$(x0, x1);

    function Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2) {
        var Kind$Term$equal$extra_holes$funari$ = (_term$1, _arity$2) => ({
            ctr: 'TCO',
            arg: [_term$1, _arity$2]
        });
        var Kind$Term$equal$extra_holes$funari = _term$1 => _arity$2 => Kind$Term$equal$extra_holes$funari$(_term$1, _arity$2);
        var arg = [_term$1, _arity$2];
        while (true) {
            let [_term$1, _arity$2] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.var':
                        var $6246 = self.name;
                        var $6247 = Maybe$some$(Pair$new$($6246, _arity$2));
                        return $6247;
                    case 'Kind.Term.ref':
                        var $6248 = self.name;
                        var $6249 = Maybe$some$(Pair$new$($6248, _arity$2));
                        return $6249;
                    case 'Kind.Term.app':
                        var $6250 = self.func;
                        var $6251 = Kind$Term$equal$extra_holes$funari$($6250, Nat$succ$(_arity$2));
                        return $6251;
                    case 'Kind.Term.ori':
                        var $6252 = self.expr;
                        var $6253 = Kind$Term$equal$extra_holes$funari$($6252, _arity$2);
                        return $6253;
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6254 = Maybe$none;
                        return $6254;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$equal$extra_holes$funari = x0 => x1 => Kind$Term$equal$extra_holes$funari$(x0, x1);
    const Bool$or = a0 => a1 => (a0 || a1);

    function Kind$Term$has_holes$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.all':
                var $6256 = self.xtyp;
                var $6257 = self.body;
                var $6258 = (Kind$Term$has_holes$($6256) || Kind$Term$has_holes$($6257(Kind$Term$typ)(Kind$Term$typ)));
                var $6255 = $6258;
                break;
            case 'Kind.Term.lam':
                var $6259 = self.body;
                var $6260 = Kind$Term$has_holes$($6259(Kind$Term$typ));
                var $6255 = $6260;
                break;
            case 'Kind.Term.app':
                var $6261 = self.func;
                var $6262 = self.argm;
                var $6263 = (Kind$Term$has_holes$($6261) || Kind$Term$has_holes$($6262));
                var $6255 = $6263;
                break;
            case 'Kind.Term.let':
                var $6264 = self.expr;
                var $6265 = self.body;
                var $6266 = (Kind$Term$has_holes$($6264) || Kind$Term$has_holes$($6265(Kind$Term$typ)));
                var $6255 = $6266;
                break;
            case 'Kind.Term.def':
                var $6267 = self.expr;
                var $6268 = self.body;
                var $6269 = (Kind$Term$has_holes$($6267) || Kind$Term$has_holes$($6268(Kind$Term$typ)));
                var $6255 = $6269;
                break;
            case 'Kind.Term.ann':
                var $6270 = self.term;
                var $6271 = self.type;
                var $6272 = (Kind$Term$has_holes$($6270) || Kind$Term$has_holes$($6271));
                var $6255 = $6272;
                break;
            case 'Kind.Term.ori':
                var $6273 = self.expr;
                var $6274 = Kind$Term$has_holes$($6273);
                var $6255 = $6274;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.gol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
                var $6275 = Bool$false;
                var $6255 = $6275;
                break;
            case 'Kind.Term.hol':
                var $6276 = Bool$true;
                var $6255 = $6276;
                break;
        };
        return $6255;
    };
    const Kind$Term$has_holes = x0 => Kind$Term$has_holes$(x0);

    function Kind$Term$equal$hole$(_path$1, _term$2) {
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.var':
            case 'Kind.Term.ref':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var self = Kind$Term$has_holes$(_term$2);
                if (self) {
                    var $6279 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                    var $6278 = $6279;
                } else {
                    var $6280 = Kind$Check$result$(Maybe$some$(Bool$true), List$cons$(Kind$Error$patch$(_path$1, Kind$Term$normalize$(_term$2, Kind$Map$new)), List$nil));
                    var $6278 = $6280;
                };
                var $6277 = $6278;
                break;
            case 'Kind.Term.hol':
                var $6281 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $6277 = $6281;
                break;
        };
        return $6277;
    };
    const Kind$Term$equal$hole = x0 => x1 => Kind$Term$equal$hole$(x0, x1);

    function Kind$Term$equal$extra_holes$filler$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Kind.Term.app':
                var $6283 = self.func;
                var $6284 = self.argm;
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.app':
                        var $6286 = self.func;
                        var $6287 = self.argm;
                        var self = Kind$Term$equal$extra_holes$filler$($6283, $6286);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6289 = self.value;
                                var $6290 = self.errors;
                                var self = $6289;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6292 = Kind$Check$result$(Maybe$none, $6290);
                                        var $6291 = $6292;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Term$equal$extra_holes$filler$($6284, $6287);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6294 = self.value;
                                                var $6295 = self.errors;
                                                var $6296 = Kind$Check$result$($6294, List$concat$($6290, $6295));
                                                var $6293 = $6296;
                                                break;
                                        };
                                        var $6291 = $6293;
                                        break;
                                };
                                var $6288 = $6291;
                                break;
                        };
                        var $6285 = $6288;
                        break;
                    case 'Kind.Term.hol':
                        var $6297 = self.path;
                        var self = Kind$Term$equal$hole$($6297, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6299 = self.value;
                                var $6300 = self.errors;
                                var self = $6299;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6302 = Kind$Check$result$(Maybe$none, $6300);
                                        var $6301 = $6302;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6304 = self.value;
                                                var $6305 = self.errors;
                                                var $6306 = Kind$Check$result$($6304, List$concat$($6300, $6305));
                                                var $6303 = $6306;
                                                break;
                                        };
                                        var $6301 = $6303;
                                        break;
                                };
                                var $6298 = $6301;
                                break;
                        };
                        var $6285 = $6298;
                        break;
                    case 'Kind.Term.ori':
                        var $6307 = self.expr;
                        var $6308 = Kind$Term$equal$extra_holes$filler$(_a$1, $6307);
                        var $6285 = $6308;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6309 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6285 = $6309;
                        break;
                };
                var $6282 = $6285;
                break;
            case 'Kind.Term.hol':
                var $6310 = self.path;
                var self = Kind$Term$equal$hole$($6310, _b$2);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6312 = self.value;
                        var $6313 = self.errors;
                        var self = $6312;
                        switch (self._) {
                            case 'Maybe.none':
                                var $6315 = Kind$Check$result$(Maybe$none, $6313);
                                var $6314 = $6315;
                                break;
                            case 'Maybe.some':
                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6317 = self.value;
                                        var $6318 = self.errors;
                                        var $6319 = Kind$Check$result$($6317, List$concat$($6313, $6318));
                                        var $6316 = $6319;
                                        break;
                                };
                                var $6314 = $6316;
                                break;
                        };
                        var $6311 = $6314;
                        break;
                };
                var $6282 = $6311;
                break;
            case 'Kind.Term.ori':
                var $6320 = self.expr;
                var $6321 = Kind$Term$equal$extra_holes$filler$($6320, _b$2);
                var $6282 = $6321;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.lam':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6323 = self.path;
                        var self = Kind$Term$equal$hole$($6323, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6325 = self.value;
                                var $6326 = self.errors;
                                var self = $6325;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6328 = Kind$Check$result$(Maybe$none, $6326);
                                        var $6327 = $6328;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6330 = self.value;
                                                var $6331 = self.errors;
                                                var $6332 = Kind$Check$result$($6330, List$concat$($6326, $6331));
                                                var $6329 = $6332;
                                                break;
                                        };
                                        var $6327 = $6329;
                                        break;
                                };
                                var $6324 = $6327;
                                break;
                        };
                        var $6322 = $6324;
                        break;
                    case 'Kind.Term.ori':
                        var $6333 = self.expr;
                        var $6334 = Kind$Term$equal$extra_holes$filler$(_a$1, $6333);
                        var $6322 = $6334;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6335 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6322 = $6335;
                        break;
                };
                var $6282 = $6322;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6337 = self.path;
                        var self = Kind$Term$equal$hole$($6337, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6339 = self.value;
                                var $6340 = self.errors;
                                var self = $6339;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6342 = Kind$Check$result$(Maybe$none, $6340);
                                        var $6341 = $6342;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6344 = self.value;
                                                var $6345 = self.errors;
                                                var $6346 = Kind$Check$result$($6344, List$concat$($6340, $6345));
                                                var $6343 = $6346;
                                                break;
                                        };
                                        var $6341 = $6343;
                                        break;
                                };
                                var $6338 = $6341;
                                break;
                        };
                        var $6336 = $6338;
                        break;
                    case 'Kind.Term.ori':
                        var $6347 = self.expr;
                        var $6348 = Kind$Term$equal$extra_holes$filler$(_a$1, $6347);
                        var $6336 = $6348;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6349 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6336 = $6349;
                        break;
                };
                var $6282 = $6336;
                break;
            case 'Kind.Term.typ':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6351 = self.path;
                        var self = Kind$Term$equal$hole$($6351, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6353 = self.value;
                                var $6354 = self.errors;
                                var self = $6353;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6356 = Kind$Check$result$(Maybe$none, $6354);
                                        var $6355 = $6356;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6358 = self.value;
                                                var $6359 = self.errors;
                                                var $6360 = Kind$Check$result$($6358, List$concat$($6354, $6359));
                                                var $6357 = $6360;
                                                break;
                                        };
                                        var $6355 = $6357;
                                        break;
                                };
                                var $6352 = $6355;
                                break;
                        };
                        var $6350 = $6352;
                        break;
                    case 'Kind.Term.ori':
                        var $6361 = self.expr;
                        var $6362 = Kind$Term$equal$extra_holes$filler$(_a$1, $6361);
                        var $6350 = $6362;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6363 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6350 = $6363;
                        break;
                };
                var $6282 = $6350;
                break;
            case 'Kind.Term.all':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6365 = self.path;
                        var self = Kind$Term$equal$hole$($6365, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6367 = self.value;
                                var $6368 = self.errors;
                                var self = $6367;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6370 = Kind$Check$result$(Maybe$none, $6368);
                                        var $6369 = $6370;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6372 = self.value;
                                                var $6373 = self.errors;
                                                var $6374 = Kind$Check$result$($6372, List$concat$($6368, $6373));
                                                var $6371 = $6374;
                                                break;
                                        };
                                        var $6369 = $6371;
                                        break;
                                };
                                var $6366 = $6369;
                                break;
                        };
                        var $6364 = $6366;
                        break;
                    case 'Kind.Term.ori':
                        var $6375 = self.expr;
                        var $6376 = Kind$Term$equal$extra_holes$filler$(_a$1, $6375);
                        var $6364 = $6376;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6377 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6364 = $6377;
                        break;
                };
                var $6282 = $6364;
                break;
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6379 = self.path;
                        var self = Kind$Term$equal$hole$($6379, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6381 = self.value;
                                var $6382 = self.errors;
                                var self = $6381;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6384 = Kind$Check$result$(Maybe$none, $6382);
                                        var $6383 = $6384;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6386 = self.value;
                                                var $6387 = self.errors;
                                                var $6388 = Kind$Check$result$($6386, List$concat$($6382, $6387));
                                                var $6385 = $6388;
                                                break;
                                        };
                                        var $6383 = $6385;
                                        break;
                                };
                                var $6380 = $6383;
                                break;
                        };
                        var $6378 = $6380;
                        break;
                    case 'Kind.Term.ori':
                        var $6389 = self.expr;
                        var $6390 = Kind$Term$equal$extra_holes$filler$(_a$1, $6389);
                        var $6378 = $6390;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6391 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6378 = $6391;
                        break;
                };
                var $6282 = $6378;
                break;
            case 'Kind.Term.cse':
                var self = _b$2;
                switch (self._) {
                    case 'Kind.Term.hol':
                        var $6393 = self.path;
                        var self = Kind$Term$equal$hole$($6393, _a$1);
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6395 = self.value;
                                var $6396 = self.errors;
                                var self = $6395;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6398 = Kind$Check$result$(Maybe$none, $6396);
                                        var $6397 = $6398;
                                        break;
                                    case 'Maybe.some':
                                        var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6400 = self.value;
                                                var $6401 = self.errors;
                                                var $6402 = Kind$Check$result$($6400, List$concat$($6396, $6401));
                                                var $6399 = $6402;
                                                break;
                                        };
                                        var $6397 = $6399;
                                        break;
                                };
                                var $6394 = $6397;
                                break;
                        };
                        var $6392 = $6394;
                        break;
                    case 'Kind.Term.ori':
                        var $6403 = self.expr;
                        var $6404 = Kind$Term$equal$extra_holes$filler$(_a$1, $6403);
                        var $6392 = $6404;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $6405 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6392 = $6405;
                        break;
                };
                var $6282 = $6392;
                break;
        };
        return $6282;
    };
    const Kind$Term$equal$extra_holes$filler = x0 => x1 => Kind$Term$equal$extra_holes$filler$(x0, x1);

    function Kind$Term$equal$extra_holes$(_a$1, _b$2) {
        var self = Kind$Term$equal$extra_holes$funari$(_a$1, 0n);
        switch (self._) {
            case 'Maybe.some':
                var $6407 = self.value;
                var self = Kind$Term$equal$extra_holes$funari$(_b$2, 0n);
                switch (self._) {
                    case 'Maybe.some':
                        var $6409 = self.value;
                        var self = $6407;
                        switch (self._) {
                            case 'Pair.new':
                                var $6411 = self.fst;
                                var $6412 = self.snd;
                                var self = $6409;
                                switch (self._) {
                                    case 'Pair.new':
                                        var $6414 = self.fst;
                                        var $6415 = self.snd;
                                        var _same_fun$9 = ($6411 === $6414);
                                        var _same_ari$10 = ($6412 === $6415);
                                        var self = (_same_fun$9 && _same_ari$10);
                                        if (self) {
                                            var $6417 = Kind$Term$equal$extra_holes$filler$(_a$1, _b$2);
                                            var $6416 = $6417;
                                        } else {
                                            var $6418 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                            var $6416 = $6418;
                                        };
                                        var $6413 = $6416;
                                        break;
                                };
                                var $6410 = $6413;
                                break;
                        };
                        var $6408 = $6410;
                        break;
                    case 'Maybe.none':
                        var $6419 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6408 = $6419;
                        break;
                };
                var $6406 = $6408;
                break;
            case 'Maybe.none':
                var $6420 = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                var $6406 = $6420;
                break;
        };
        return $6406;
    };
    const Kind$Term$equal$extra_holes = x0 => x1 => Kind$Term$equal$extra_holes$(x0, x1);

    function BitsSet$set$(_bits$1, _set$2) {
        var $6421 = BitsMap$set$(_bits$1, Unit$new, _set$2);
        return $6421;
    };
    const BitsSet$set = x0 => x1 => BitsSet$set$(x0, x1);

    function BitsSet$mut$set$(_bits$1, _set$2) {
        var $6422 = BitsSet$set$(_bits$1, _set$2);
        return $6422;
    };
    const BitsSet$mut$set = x0 => x1 => BitsSet$mut$set$(x0, x1);

    function Bool$eql$(_a$1, _b$2) {
        var self = _a$1;
        if (self) {
            var $6424 = _b$2;
            var $6423 = $6424;
        } else {
            var $6425 = (!_b$2);
            var $6423 = $6425;
        };
        return $6423;
    };
    const Bool$eql = x0 => x1 => Bool$eql$(x0, x1);

    function Kind$Term$equal$(_a$1, _b$2, _defs$3, _lv$4, _seen$5) {
        var _ah$6 = Kind$Term$serialize$(Kind$Term$reduce$(_a$1, Kind$Map$new), _lv$4, Bool$false);
        var _bh$7 = Kind$Term$serialize$(Kind$Term$reduce$(_b$2, Kind$Map$new), _lv$4, Bool$true);
        var self = (_bh$7 === _ah$6);
        if (self) {
            var $6427 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
            var $6426 = $6427;
        } else {
            var _a1$8 = Kind$Term$reduce$(_a$1, _defs$3);
            var _b1$9 = Kind$Term$reduce$(_b$2, _defs$3);
            var _ah$10 = Kind$Term$serialize$(_a1$8, _lv$4, Bool$false);
            var _bh$11 = Kind$Term$serialize$(_b1$9, _lv$4, Bool$true);
            var self = (_bh$11 === _ah$10);
            if (self) {
                var $6429 = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $6428 = $6429;
            } else {
                var _id$12 = (_bh$11 + _ah$10);
                var self = BitsSet$mut$has$(_id$12, _seen$5);
                if (self) {
                    var self = Kind$Term$equal$extra_holes$(_a$1, _b$2);
                    switch (self._) {
                        case 'Kind.Check.result':
                            var $6432 = self.value;
                            var $6433 = self.errors;
                            var self = $6432;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $6435 = Kind$Check$result$(Maybe$none, $6433);
                                    var $6434 = $6435;
                                    break;
                                case 'Maybe.some':
                                    var self = Kind$Check$result$(Maybe$some$(Bool$true), List$nil);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6437 = self.value;
                                            var $6438 = self.errors;
                                            var $6439 = Kind$Check$result$($6437, List$concat$($6433, $6438));
                                            var $6436 = $6439;
                                            break;
                                    };
                                    var $6434 = $6436;
                                    break;
                            };
                            var $6431 = $6434;
                            break;
                    };
                    var $6430 = $6431;
                } else {
                    var self = _a1$8;
                    switch (self._) {
                        case 'Kind.Term.all':
                            var $6441 = self.eras;
                            var $6442 = self.self;
                            var $6443 = self.name;
                            var $6444 = self.xtyp;
                            var $6445 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.all':
                                    var $6447 = self.eras;
                                    var $6448 = self.self;
                                    var $6449 = self.name;
                                    var $6450 = self.xtyp;
                                    var $6451 = self.body;
                                    var _seen$23 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$24 = $6445(Kind$Term$var$($6442, _lv$4))(Kind$Term$var$($6443, Nat$succ$(_lv$4)));
                                    var _b1_body$25 = $6451(Kind$Term$var$($6448, _lv$4))(Kind$Term$var$($6449, Nat$succ$(_lv$4)));
                                    var _eq_self$26 = ($6442 === $6448);
                                    var _eq_eras$27 = Bool$eql$($6441, $6447);
                                    var self = (_eq_self$26 && _eq_eras$27);
                                    if (self) {
                                        var self = Kind$Term$equal$($6444, $6450, _defs$3, _lv$4, _seen$23);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6454 = self.value;
                                                var $6455 = self.errors;
                                                var self = $6454;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $6457 = self.value;
                                                        var self = Kind$Term$equal$(_a1_body$24, _b1_body$25, _defs$3, Nat$succ$(Nat$succ$(_lv$4)), _seen$23);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6459 = self.value;
                                                                var $6460 = self.errors;
                                                                var self = $6459;
                                                                switch (self._) {
                                                                    case 'Maybe.some':
                                                                        var $6462 = self.value;
                                                                        var self = Kind$Check$result$(Maybe$some$(($6457 && $6462)), List$nil);
                                                                        switch (self._) {
                                                                            case 'Kind.Check.result':
                                                                                var $6464 = self.value;
                                                                                var $6465 = self.errors;
                                                                                var $6466 = Kind$Check$result$($6464, List$concat$($6460, $6465));
                                                                                var $6463 = $6466;
                                                                                break;
                                                                        };
                                                                        var $6461 = $6463;
                                                                        break;
                                                                    case 'Maybe.none':
                                                                        var $6467 = Kind$Check$result$(Maybe$none, $6460);
                                                                        var $6461 = $6467;
                                                                        break;
                                                                };
                                                                var self = $6461;
                                                                break;
                                                        };
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6468 = self.value;
                                                                var $6469 = self.errors;
                                                                var $6470 = Kind$Check$result$($6468, List$concat$($6455, $6469));
                                                                var $6458 = $6470;
                                                                break;
                                                        };
                                                        var $6456 = $6458;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $6471 = Kind$Check$result$(Maybe$none, $6455);
                                                        var $6456 = $6471;
                                                        break;
                                                };
                                                var $6453 = $6456;
                                                break;
                                        };
                                        var $6452 = $6453;
                                    } else {
                                        var $6472 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6452 = $6472;
                                    };
                                    var $6446 = $6452;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6473 = self.path;
                                    var $6474 = Kind$Term$equal$hole$($6473, _a$1);
                                    var $6446 = $6474;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6475 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6446 = $6475;
                                    break;
                            };
                            var $6440 = $6446;
                            break;
                        case 'Kind.Term.lam':
                            var $6476 = self.name;
                            var $6477 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.lam':
                                    var $6479 = self.name;
                                    var $6480 = self.body;
                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$18 = $6477(Kind$Term$var$($6476, _lv$4));
                                    var _b1_body$19 = $6480(Kind$Term$var$($6479, _lv$4));
                                    var self = Kind$Term$equal$(_a1_body$18, _b1_body$19, _defs$3, Nat$succ$(_lv$4), _seen$17);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6482 = self.value;
                                            var $6483 = self.errors;
                                            var self = $6482;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $6485 = self.value;
                                                    var self = Kind$Check$result$(Maybe$some$($6485), List$nil);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6487 = self.value;
                                                            var $6488 = self.errors;
                                                            var $6489 = Kind$Check$result$($6487, List$concat$($6483, $6488));
                                                            var $6486 = $6489;
                                                            break;
                                                    };
                                                    var $6484 = $6486;
                                                    break;
                                                case 'Maybe.none':
                                                    var $6490 = Kind$Check$result$(Maybe$none, $6483);
                                                    var $6484 = $6490;
                                                    break;
                                            };
                                            var $6481 = $6484;
                                            break;
                                    };
                                    var $6478 = $6481;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6491 = self.path;
                                    var $6492 = Kind$Term$equal$hole$($6491, _a$1);
                                    var $6478 = $6492;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6493 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6478 = $6493;
                                    break;
                            };
                            var $6440 = $6478;
                            break;
                        case 'Kind.Term.app':
                            var $6494 = self.func;
                            var $6495 = self.argm;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.app':
                                    var $6497 = self.func;
                                    var $6498 = self.argm;
                                    var _seen$17 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var self = Kind$Term$equal$($6494, $6497, _defs$3, _lv$4, _seen$17);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6500 = self.value;
                                            var $6501 = self.errors;
                                            var self = $6500;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $6503 = self.value;
                                                    var self = Kind$Term$equal$($6495, $6498, _defs$3, _lv$4, _seen$17);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6505 = self.value;
                                                            var $6506 = self.errors;
                                                            var self = $6505;
                                                            switch (self._) {
                                                                case 'Maybe.some':
                                                                    var $6508 = self.value;
                                                                    var self = Kind$Check$result$(Maybe$some$(($6503 && $6508)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Kind.Check.result':
                                                                            var $6510 = self.value;
                                                                            var $6511 = self.errors;
                                                                            var $6512 = Kind$Check$result$($6510, List$concat$($6506, $6511));
                                                                            var $6509 = $6512;
                                                                            break;
                                                                    };
                                                                    var $6507 = $6509;
                                                                    break;
                                                                case 'Maybe.none':
                                                                    var $6513 = Kind$Check$result$(Maybe$none, $6506);
                                                                    var $6507 = $6513;
                                                                    break;
                                                            };
                                                            var self = $6507;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6514 = self.value;
                                                            var $6515 = self.errors;
                                                            var $6516 = Kind$Check$result$($6514, List$concat$($6501, $6515));
                                                            var $6504 = $6516;
                                                            break;
                                                    };
                                                    var $6502 = $6504;
                                                    break;
                                                case 'Maybe.none':
                                                    var $6517 = Kind$Check$result$(Maybe$none, $6501);
                                                    var $6502 = $6517;
                                                    break;
                                            };
                                            var $6499 = $6502;
                                            break;
                                    };
                                    var $6496 = $6499;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6518 = self.path;
                                    var $6519 = Kind$Term$equal$hole$($6518, _a$1);
                                    var $6496 = $6519;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6520 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6496 = $6520;
                                    break;
                            };
                            var $6440 = $6496;
                            break;
                        case 'Kind.Term.let':
                            var $6521 = self.name;
                            var $6522 = self.expr;
                            var $6523 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.let':
                                    var $6525 = self.name;
                                    var $6526 = self.expr;
                                    var $6527 = self.body;
                                    var _seen$19 = BitsSet$mut$set$(_id$12, _seen$5);
                                    var _a1_body$20 = $6523(Kind$Term$var$($6521, _lv$4));
                                    var _b1_body$21 = $6527(Kind$Term$var$($6525, _lv$4));
                                    var self = Kind$Term$equal$($6522, $6526, _defs$3, _lv$4, _seen$19);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6529 = self.value;
                                            var $6530 = self.errors;
                                            var self = $6529;
                                            switch (self._) {
                                                case 'Maybe.some':
                                                    var $6532 = self.value;
                                                    var self = Kind$Term$equal$(_a1_body$20, _b1_body$21, _defs$3, Nat$succ$(_lv$4), _seen$19);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6534 = self.value;
                                                            var $6535 = self.errors;
                                                            var self = $6534;
                                                            switch (self._) {
                                                                case 'Maybe.some':
                                                                    var $6537 = self.value;
                                                                    var self = Kind$Check$result$(Maybe$some$(($6532 && $6537)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Kind.Check.result':
                                                                            var $6539 = self.value;
                                                                            var $6540 = self.errors;
                                                                            var $6541 = Kind$Check$result$($6539, List$concat$($6535, $6540));
                                                                            var $6538 = $6541;
                                                                            break;
                                                                    };
                                                                    var $6536 = $6538;
                                                                    break;
                                                                case 'Maybe.none':
                                                                    var $6542 = Kind$Check$result$(Maybe$none, $6535);
                                                                    var $6536 = $6542;
                                                                    break;
                                                            };
                                                            var self = $6536;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6543 = self.value;
                                                            var $6544 = self.errors;
                                                            var $6545 = Kind$Check$result$($6543, List$concat$($6530, $6544));
                                                            var $6533 = $6545;
                                                            break;
                                                    };
                                                    var $6531 = $6533;
                                                    break;
                                                case 'Maybe.none':
                                                    var $6546 = Kind$Check$result$(Maybe$none, $6530);
                                                    var $6531 = $6546;
                                                    break;
                                            };
                                            var $6528 = $6531;
                                            break;
                                    };
                                    var $6524 = $6528;
                                    break;
                                case 'Kind.Term.hol':
                                    var $6547 = self.path;
                                    var $6548 = Kind$Term$equal$hole$($6547, _a$1);
                                    var $6524 = $6548;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6549 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6524 = $6549;
                                    break;
                            };
                            var $6440 = $6524;
                            break;
                        case 'Kind.Term.hol':
                            var $6550 = self.path;
                            var $6551 = Kind$Term$equal$hole$($6550, _b$2);
                            var $6440 = $6551;
                            break;
                        case 'Kind.Term.var':
                        case 'Kind.Term.ori':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6553 = self.path;
                                    var $6554 = Kind$Term$equal$hole$($6553, _a$1);
                                    var $6552 = $6554;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6555 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6552 = $6555;
                                    break;
                            };
                            var $6440 = $6552;
                            break;
                        case 'Kind.Term.ref':
                        case 'Kind.Term.nat':
                        case 'Kind.Term.chr':
                        case 'Kind.Term.str':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6557 = self.path;
                                    var $6558 = Kind$Term$equal$hole$($6557, _a$1);
                                    var $6556 = $6558;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6559 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6556 = $6559;
                                    break;
                            };
                            var $6440 = $6556;
                            break;
                        case 'Kind.Term.typ':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6561 = self.path;
                                    var $6562 = Kind$Term$equal$hole$($6561, _a$1);
                                    var $6560 = $6562;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6563 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6560 = $6563;
                                    break;
                            };
                            var $6440 = $6560;
                            break;
                        case 'Kind.Term.def':
                        case 'Kind.Term.ann':
                        case 'Kind.Term.gol':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6565 = self.path;
                                    var $6566 = Kind$Term$equal$hole$($6565, _a$1);
                                    var $6564 = $6566;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6567 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6564 = $6567;
                                    break;
                            };
                            var $6440 = $6564;
                            break;
                        case 'Kind.Term.cse':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Kind.Term.hol':
                                    var $6569 = self.path;
                                    var $6570 = Kind$Term$equal$hole$($6569, _a$1);
                                    var $6568 = $6570;
                                    break;
                                case 'Kind.Term.var':
                                case 'Kind.Term.ref':
                                case 'Kind.Term.typ':
                                case 'Kind.Term.all':
                                case 'Kind.Term.lam':
                                case 'Kind.Term.app':
                                case 'Kind.Term.let':
                                case 'Kind.Term.def':
                                case 'Kind.Term.ann':
                                case 'Kind.Term.gol':
                                case 'Kind.Term.nat':
                                case 'Kind.Term.chr':
                                case 'Kind.Term.str':
                                case 'Kind.Term.cse':
                                case 'Kind.Term.ori':
                                    var $6571 = Kind$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6568 = $6571;
                                    break;
                            };
                            var $6440 = $6568;
                            break;
                    };
                    var $6430 = $6440;
                };
                var $6428 = $6430;
            };
            var $6426 = $6428;
        };
        return $6426;
    };
    const Kind$Term$equal = x0 => x1 => x2 => x3 => x4 => Kind$Term$equal$(x0, x1, x2, x3, x4);
    const BitsSet$new = BitsMap$new;

    function BitsSet$mut$new$(_a$1) {
        var $6572 = BitsSet$new;
        return $6572;
    };
    const BitsSet$mut$new = x0 => BitsSet$mut$new$(x0);

    function Kind$Term$check$(_term$1, _type$2, _defs$3, _ctx$4, _path$5, _orig$6) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $6574 = self.name;
                var $6575 = self.indx;
                var self = List$at_last$($6575, _ctx$4);
                switch (self._) {
                    case 'Maybe.some':
                        var $6577 = self.value;
                        var $6578 = Kind$Check$result$(Maybe$some$((() => {
                            var self = $6577;
                            switch (self._) {
                                case 'Pair.new':
                                    var $6579 = self.snd;
                                    var $6580 = $6579;
                                    return $6580;
                            };
                        })()), List$nil);
                        var $6576 = $6578;
                        break;
                    case 'Maybe.none':
                        var $6581 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $6574), List$nil));
                        var $6576 = $6581;
                        break;
                };
                var self = $6576;
                break;
            case 'Kind.Term.ref':
                var $6582 = self.name;
                var self = Kind$Map$get$($6582, _defs$3);
                switch (self._) {
                    case 'Maybe.some':
                        var $6584 = self.value;
                        var self = $6584;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $6586 = self.name;
                                var $6587 = self.term;
                                var $6588 = self.type;
                                var $6589 = self.stat;
                                var _ref_name$18 = $6586;
                                var _ref_type$19 = $6588;
                                var _ref_term$20 = $6587;
                                var _ref_stat$21 = $6589;
                                var self = _ref_stat$21;
                                switch (self._) {
                                    case 'Kind.Status.init':
                                        var $6591 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$waiting$(_ref_name$18), List$nil));
                                        var $6590 = $6591;
                                        break;
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.done':
                                        var $6592 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$nil);
                                        var $6590 = $6592;
                                        break;
                                    case 'Kind.Status.fail':
                                        var $6593 = Kind$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Kind$Error$indirect$(_ref_name$18), List$nil));
                                        var $6590 = $6593;
                                        break;
                                };
                                var $6585 = $6590;
                                break;
                        };
                        var $6583 = $6585;
                        break;
                    case 'Maybe.none':
                        var $6594 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$undefined_reference$(_orig$6, $6582), List$nil));
                        var $6583 = $6594;
                        break;
                };
                var self = $6583;
                break;
            case 'Kind.Term.all':
                var $6595 = self.self;
                var $6596 = self.name;
                var $6597 = self.xtyp;
                var $6598 = self.body;
                var _ctx_size$12 = (list_length(_ctx$4));
                var _self_var$13 = Kind$Term$var$($6595, _ctx_size$12);
                var _body_var$14 = Kind$Term$var$($6596, Nat$succ$(_ctx_size$12));
                var _body_ctx$15 = List$cons$(Pair$new$($6596, $6597), List$cons$(Pair$new$($6595, _term$1), _ctx$4));
                var self = Kind$Term$check$($6597, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6600 = self.value;
                        var $6601 = self.errors;
                        var self = $6600;
                        switch (self._) {
                            case 'Maybe.none':
                                var $6603 = Kind$Check$result$(Maybe$none, $6601);
                                var $6602 = $6603;
                                break;
                            case 'Maybe.some':
                                var self = Kind$Term$check$($6598(_self_var$13)(_body_var$14), Maybe$some$(Kind$Term$typ), _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6605 = self.value;
                                        var $6606 = self.errors;
                                        var self = $6605;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $6608 = Kind$Check$result$(Maybe$none, $6606);
                                                var $6607 = $6608;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6610 = self.value;
                                                        var $6611 = self.errors;
                                                        var $6612 = Kind$Check$result$($6610, List$concat$($6606, $6611));
                                                        var $6609 = $6612;
                                                        break;
                                                };
                                                var $6607 = $6609;
                                                break;
                                        };
                                        var self = $6607;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6613 = self.value;
                                        var $6614 = self.errors;
                                        var $6615 = Kind$Check$result$($6613, List$concat$($6601, $6614));
                                        var $6604 = $6615;
                                        break;
                                };
                                var $6602 = $6604;
                                break;
                        };
                        var $6599 = $6602;
                        break;
                };
                var self = $6599;
                break;
            case 'Kind.Term.lam':
                var $6616 = self.name;
                var $6617 = self.body;
                var self = _type$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $6619 = self.value;
                        var _typv$10 = Kind$Term$reduce$($6619, _defs$3);
                        var self = _typv$10;
                        switch (self._) {
                            case 'Kind.Term.all':
                                var $6621 = self.xtyp;
                                var $6622 = self.body;
                                var _ctx_size$16 = (list_length(_ctx$4));
                                var _self_var$17 = _term$1;
                                var _body_var$18 = Kind$Term$var$($6616, _ctx_size$16);
                                var _body_typ$19 = $6622(_self_var$17)(_body_var$18);
                                var _body_ctx$20 = List$cons$(Pair$new$($6616, $6621), _ctx$4);
                                var self = Kind$Term$check$($6617(_body_var$18), Maybe$some$(_body_typ$19), _defs$3, _body_ctx$20, Kind$MPath$o$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6624 = self.value;
                                        var $6625 = self.errors;
                                        var self = $6624;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $6627 = Kind$Check$result$(Maybe$none, $6625);
                                                var $6626 = $6627;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Check$result$(Maybe$some$($6619), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6629 = self.value;
                                                        var $6630 = self.errors;
                                                        var $6631 = Kind$Check$result$($6629, List$concat$($6625, $6630));
                                                        var $6628 = $6631;
                                                        break;
                                                };
                                                var $6626 = $6628;
                                                break;
                                        };
                                        var $6623 = $6626;
                                        break;
                                };
                                var $6620 = $6623;
                                break;
                            case 'Kind.Term.var':
                            case 'Kind.Term.lam':
                            case 'Kind.Term.app':
                            case 'Kind.Term.ori':
                                var _expected$13 = Either$left$("function");
                                var _detected$14 = Either$right$($6619);
                                var $6632 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $6620 = $6632;
                                break;
                            case 'Kind.Term.ref':
                            case 'Kind.Term.hol':
                            case 'Kind.Term.nat':
                            case 'Kind.Term.chr':
                            case 'Kind.Term.str':
                                var _expected$12 = Either$left$("function");
                                var _detected$13 = Either$right$($6619);
                                var $6633 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $6620 = $6633;
                                break;
                            case 'Kind.Term.typ':
                                var _expected$11 = Either$left$("function");
                                var _detected$12 = Either$right$($6619);
                                var $6634 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$11, _detected$12, _ctx$4), List$nil));
                                var $6620 = $6634;
                                break;
                            case 'Kind.Term.let':
                            case 'Kind.Term.def':
                            case 'Kind.Term.ann':
                            case 'Kind.Term.gol':
                                var _expected$14 = Either$left$("function");
                                var _detected$15 = Either$right$($6619);
                                var $6635 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $6620 = $6635;
                                break;
                            case 'Kind.Term.cse':
                                var _expected$17 = Either$left$("function");
                                var _detected$18 = Either$right$($6619);
                                var $6636 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, _expected$17, _detected$18, _ctx$4), List$nil));
                                var $6620 = $6636;
                                break;
                        };
                        var $6618 = $6620;
                        break;
                    case 'Maybe.none':
                        var _lam_type$9 = Kind$Term$hol$(Bits$e);
                        var _lam_term$10 = Kind$Term$ann$(Bool$false, _term$1, _lam_type$9);
                        var $6637 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), _lam_term$10), List$nil));
                        var $6618 = $6637;
                        break;
                };
                var self = $6618;
                break;
            case 'Kind.Term.app':
                var $6638 = self.func;
                var $6639 = self.argm;
                var self = Kind$Term$check$($6638, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6641 = self.value;
                        var $6642 = self.errors;
                        var self = $6641;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6644 = self.value;
                                var _func_typ$12 = Kind$Term$reduce$($6644, _defs$3);
                                var self = _func_typ$12;
                                switch (self._) {
                                    case 'Kind.Term.all':
                                        var $6646 = self.xtyp;
                                        var $6647 = self.body;
                                        var self = Kind$Term$check$($6639, Maybe$some$($6646), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);
                                        switch (self._) {
                                            case 'Kind.Check.result':
                                                var $6649 = self.value;
                                                var $6650 = self.errors;
                                                var self = $6649;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $6652 = Kind$Check$result$(Maybe$none, $6650);
                                                        var $6651 = $6652;
                                                        break;
                                                    case 'Maybe.some':
                                                        var self = Kind$Check$result$(Maybe$some$($6647($6638)($6639)), List$nil);
                                                        switch (self._) {
                                                            case 'Kind.Check.result':
                                                                var $6654 = self.value;
                                                                var $6655 = self.errors;
                                                                var $6656 = Kind$Check$result$($6654, List$concat$($6650, $6655));
                                                                var $6653 = $6656;
                                                                break;
                                                        };
                                                        var $6651 = $6653;
                                                        break;
                                                };
                                                var $6648 = $6651;
                                                break;
                                        };
                                        var self = $6648;
                                        break;
                                    case 'Kind.Term.var':
                                    case 'Kind.Term.lam':
                                    case 'Kind.Term.app':
                                    case 'Kind.Term.ori':
                                        var _expected$15 = Either$left$("function");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var self = $6638;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $6658 = self.orig;
                                                var $6659 = Maybe$some$($6658);
                                                var _orig$17 = $6659;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $6660 = _orig$6;
                                                var _orig$17 = $6660;
                                                break;
                                        };
                                        var $6657 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$17, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $6657;
                                        break;
                                    case 'Kind.Term.ref':
                                    case 'Kind.Term.hol':
                                    case 'Kind.Term.nat':
                                    case 'Kind.Term.chr':
                                    case 'Kind.Term.str':
                                        var _expected$14 = Either$left$("function");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var self = $6638;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $6662 = self.orig;
                                                var $6663 = Maybe$some$($6662);
                                                var _orig$16 = $6663;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $6664 = _orig$6;
                                                var _orig$16 = $6664;
                                                break;
                                        };
                                        var $6661 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$16, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $6661;
                                        break;
                                    case 'Kind.Term.typ':
                                        var _expected$13 = Either$left$("function");
                                        var _detected$14 = Either$right$(_func_typ$12);
                                        var self = $6638;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $6666 = self.orig;
                                                var $6667 = Maybe$some$($6666);
                                                var _orig$15 = $6667;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $6668 = _orig$6;
                                                var _orig$15 = $6668;
                                                break;
                                        };
                                        var $6665 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$15, _expected$13, _detected$14, _ctx$4), List$nil));
                                        var self = $6665;
                                        break;
                                    case 'Kind.Term.let':
                                    case 'Kind.Term.def':
                                    case 'Kind.Term.ann':
                                    case 'Kind.Term.gol':
                                        var _expected$16 = Either$left$("function");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var self = $6638;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $6670 = self.orig;
                                                var $6671 = Maybe$some$($6670);
                                                var _orig$18 = $6671;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $6672 = _orig$6;
                                                var _orig$18 = $6672;
                                                break;
                                        };
                                        var $6669 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$18, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $6669;
                                        break;
                                    case 'Kind.Term.cse':
                                        var _expected$19 = Either$left$("function");
                                        var _detected$20 = Either$right$(_func_typ$12);
                                        var self = $6638;
                                        switch (self._) {
                                            case 'Kind.Term.ori':
                                                var $6674 = self.orig;
                                                var $6675 = Maybe$some$($6674);
                                                var _orig$21 = $6675;
                                                break;
                                            case 'Kind.Term.var':
                                            case 'Kind.Term.ref':
                                            case 'Kind.Term.typ':
                                            case 'Kind.Term.all':
                                            case 'Kind.Term.lam':
                                            case 'Kind.Term.app':
                                            case 'Kind.Term.let':
                                            case 'Kind.Term.def':
                                            case 'Kind.Term.ann':
                                            case 'Kind.Term.gol':
                                            case 'Kind.Term.hol':
                                            case 'Kind.Term.nat':
                                            case 'Kind.Term.chr':
                                            case 'Kind.Term.str':
                                            case 'Kind.Term.cse':
                                                var $6676 = _orig$6;
                                                var _orig$21 = $6676;
                                                break;
                                        };
                                        var $6673 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$21, _expected$19, _detected$20, _ctx$4), List$nil));
                                        var self = $6673;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6677 = self.value;
                                        var $6678 = self.errors;
                                        var $6679 = Kind$Check$result$($6677, List$concat$($6642, $6678));
                                        var $6645 = $6679;
                                        break;
                                };
                                var $6643 = $6645;
                                break;
                            case 'Maybe.none':
                                var $6680 = Kind$Check$result$(Maybe$none, $6642);
                                var $6643 = $6680;
                                break;
                        };
                        var $6640 = $6643;
                        break;
                };
                var self = $6640;
                break;
            case 'Kind.Term.let':
                var $6681 = self.name;
                var $6682 = self.expr;
                var $6683 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Kind$Term$check$($6682, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6685 = self.value;
                        var $6686 = self.errors;
                        var self = $6685;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6688 = self.value;
                                var _body_val$14 = $6683(Kind$Term$var$($6681, _ctx_size$10));
                                var _body_ctx$15 = List$cons$(Pair$new$($6681, $6688), _ctx$4);
                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6690 = self.value;
                                        var $6691 = self.errors;
                                        var self = $6690;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6693 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$($6693), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6695 = self.value;
                                                        var $6696 = self.errors;
                                                        var $6697 = Kind$Check$result$($6695, List$concat$($6691, $6696));
                                                        var $6694 = $6697;
                                                        break;
                                                };
                                                var $6692 = $6694;
                                                break;
                                            case 'Maybe.none':
                                                var $6698 = Kind$Check$result$(Maybe$none, $6691);
                                                var $6692 = $6698;
                                                break;
                                        };
                                        var self = $6692;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6699 = self.value;
                                        var $6700 = self.errors;
                                        var $6701 = Kind$Check$result$($6699, List$concat$($6686, $6700));
                                        var $6689 = $6701;
                                        break;
                                };
                                var $6687 = $6689;
                                break;
                            case 'Maybe.none':
                                var $6702 = Kind$Check$result$(Maybe$none, $6686);
                                var $6687 = $6702;
                                break;
                        };
                        var $6684 = $6687;
                        break;
                };
                var self = $6684;
                break;
            case 'Kind.Term.def':
                var $6703 = self.name;
                var $6704 = self.expr;
                var $6705 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Kind$Term$check$($6704, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6707 = self.value;
                        var $6708 = self.errors;
                        var self = $6707;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6710 = self.value;
                                var _body_val$14 = $6705(Kind$Term$ann$(Bool$true, $6704, $6710));
                                var _body_ctx$15 = List$cons$(Pair$new$($6703, $6710), _ctx$4);
                                var self = Kind$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Kind$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6712 = self.value;
                                        var $6713 = self.errors;
                                        var self = $6712;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6715 = self.value;
                                                var self = Kind$Check$result$(Maybe$some$($6715), List$nil);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6717 = self.value;
                                                        var $6718 = self.errors;
                                                        var $6719 = Kind$Check$result$($6717, List$concat$($6713, $6718));
                                                        var $6716 = $6719;
                                                        break;
                                                };
                                                var $6714 = $6716;
                                                break;
                                            case 'Maybe.none':
                                                var $6720 = Kind$Check$result$(Maybe$none, $6713);
                                                var $6714 = $6720;
                                                break;
                                        };
                                        var self = $6714;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6721 = self.value;
                                        var $6722 = self.errors;
                                        var $6723 = Kind$Check$result$($6721, List$concat$($6708, $6722));
                                        var $6711 = $6723;
                                        break;
                                };
                                var $6709 = $6711;
                                break;
                            case 'Maybe.none':
                                var $6724 = Kind$Check$result$(Maybe$none, $6708);
                                var $6709 = $6724;
                                break;
                        };
                        var $6706 = $6709;
                        break;
                };
                var self = $6706;
                break;
            case 'Kind.Term.ann':
                var $6725 = self.done;
                var $6726 = self.term;
                var $6727 = self.type;
                var self = $6725;
                if (self) {
                    var $6729 = Kind$Check$result$(Maybe$some$($6727), List$nil);
                    var $6728 = $6729;
                } else {
                    var self = Kind$Term$check$($6726, Maybe$some$($6727), _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                    switch (self._) {
                        case 'Kind.Check.result':
                            var $6731 = self.value;
                            var $6732 = self.errors;
                            var self = $6731;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $6734 = Kind$Check$result$(Maybe$none, $6732);
                                    var $6733 = $6734;
                                    break;
                                case 'Maybe.some':
                                    var self = Kind$Term$check$($6727, Maybe$some$(Kind$Term$typ), _defs$3, _ctx$4, Kind$MPath$i$(_path$5), _orig$6);
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6736 = self.value;
                                            var $6737 = self.errors;
                                            var self = $6736;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $6739 = Kind$Check$result$(Maybe$none, $6737);
                                                    var $6738 = $6739;
                                                    break;
                                                case 'Maybe.some':
                                                    var self = Kind$Check$result$(Maybe$some$($6727), List$nil);
                                                    switch (self._) {
                                                        case 'Kind.Check.result':
                                                            var $6741 = self.value;
                                                            var $6742 = self.errors;
                                                            var $6743 = Kind$Check$result$($6741, List$concat$($6737, $6742));
                                                            var $6740 = $6743;
                                                            break;
                                                    };
                                                    var $6738 = $6740;
                                                    break;
                                            };
                                            var self = $6738;
                                            break;
                                    };
                                    switch (self._) {
                                        case 'Kind.Check.result':
                                            var $6744 = self.value;
                                            var $6745 = self.errors;
                                            var $6746 = Kind$Check$result$($6744, List$concat$($6732, $6745));
                                            var $6735 = $6746;
                                            break;
                                    };
                                    var $6733 = $6735;
                                    break;
                            };
                            var $6730 = $6733;
                            break;
                    };
                    var $6728 = $6730;
                };
                var self = $6728;
                break;
            case 'Kind.Term.gol':
                var $6747 = self.name;
                var $6748 = self.dref;
                var $6749 = self.verb;
                var $6750 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$show_goal$($6747, $6748, $6749, _type$2, _ctx$4), List$nil));
                var self = $6750;
                break;
            case 'Kind.Term.cse':
                var $6751 = self.expr;
                var $6752 = self.name;
                var $6753 = self.with;
                var $6754 = self.cses;
                var $6755 = self.moti;
                var _expr$13 = $6751;
                var self = Kind$Term$check$(_expr$13, Maybe$none, _defs$3, _ctx$4, Kind$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Kind.Check.result':
                        var $6757 = self.value;
                        var $6758 = self.errors;
                        var self = $6757;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6760 = self.value;
                                var self = Kind$Term$check$infer_with_types$($6753, _defs$3, _ctx$4, _path$5, _orig$6);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6762 = self.value;
                                        var $6763 = self.errors;
                                        var self = $6762;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6765 = self.value;
                                                var _dsug$20 = Kind$Term$desugar_cse$($6751, $6752, $6765, $6754, $6755, $6760, _type$2, _defs$3, _ctx$4);
                                                var self = _dsug$20;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $6767 = self.value;
                                                        var $6768 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$patch$(Kind$MPath$to_bits$(_path$5), $6767), List$nil));
                                                        var self = $6768;
                                                        break;
                                                    case 'Maybe.none':
                                                        var $6769 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$cant_infer$(_orig$6, _term$1, _ctx$4), List$nil));
                                                        var self = $6769;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6770 = self.value;
                                                        var $6771 = self.errors;
                                                        var $6772 = Kind$Check$result$($6770, List$concat$($6763, $6771));
                                                        var $6766 = $6772;
                                                        break;
                                                };
                                                var $6764 = $6766;
                                                break;
                                            case 'Maybe.none':
                                                var $6773 = Kind$Check$result$(Maybe$none, $6763);
                                                var $6764 = $6773;
                                                break;
                                        };
                                        var self = $6764;
                                        break;
                                };
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6774 = self.value;
                                        var $6775 = self.errors;
                                        var $6776 = Kind$Check$result$($6774, List$concat$($6758, $6775));
                                        var $6761 = $6776;
                                        break;
                                };
                                var $6759 = $6761;
                                break;
                            case 'Maybe.none':
                                var $6777 = Kind$Check$result$(Maybe$none, $6758);
                                var $6759 = $6777;
                                break;
                        };
                        var $6756 = $6759;
                        break;
                };
                var self = $6756;
                break;
            case 'Kind.Term.ori':
                var $6778 = self.orig;
                var $6779 = self.expr;
                var $6780 = Kind$Term$check$($6779, _type$2, _defs$3, _ctx$4, _path$5, Maybe$some$($6778));
                var self = $6780;
                break;
            case 'Kind.Term.typ':
                var $6781 = Kind$Check$result$(Maybe$some$(Kind$Term$typ), List$nil);
                var self = $6781;
                break;
            case 'Kind.Term.hol':
                var $6782 = Kind$Check$result$(_type$2, List$nil);
                var self = $6782;
                break;
            case 'Kind.Term.nat':
                var $6783 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Nat")), List$nil);
                var self = $6783;
                break;
            case 'Kind.Term.chr':
                var $6784 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("Char")), List$nil);
                var self = $6784;
                break;
            case 'Kind.Term.str':
                var $6785 = Kind$Check$result$(Maybe$some$(Kind$Term$ref$("String")), List$nil);
                var self = $6785;
                break;
        };
        switch (self._) {
            case 'Kind.Check.result':
                var $6786 = self.value;
                var $6787 = self.errors;
                var self = $6786;
                switch (self._) {
                    case 'Maybe.some':
                        var $6789 = self.value;
                        var self = _type$2;
                        switch (self._) {
                            case 'Maybe.some':
                                var $6791 = self.value;
                                var self = Kind$Term$equal$($6791, $6789, _defs$3, (list_length(_ctx$4)), BitsSet$mut$new$(Unit$new));
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6793 = self.value;
                                        var $6794 = self.errors;
                                        var self = $6793;
                                        switch (self._) {
                                            case 'Maybe.some':
                                                var $6796 = self.value;
                                                var self = $6796;
                                                if (self) {
                                                    var $6798 = Kind$Check$result$(Maybe$some$($6791), List$nil);
                                                    var self = $6798;
                                                } else {
                                                    var $6799 = Kind$Check$result$(_type$2, List$cons$(Kind$Error$type_mismatch$(_orig$6, Either$right$($6791), Either$right$($6789), _ctx$4), List$nil));
                                                    var self = $6799;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6800 = self.value;
                                                        var $6801 = self.errors;
                                                        var $6802 = Kind$Check$result$($6800, List$concat$($6794, $6801));
                                                        var $6797 = $6802;
                                                        break;
                                                };
                                                var $6795 = $6797;
                                                break;
                                            case 'Maybe.none':
                                                var $6803 = Kind$Check$result$(Maybe$none, $6794);
                                                var $6795 = $6803;
                                                break;
                                        };
                                        var $6792 = $6795;
                                        break;
                                };
                                var self = $6792;
                                break;
                            case 'Maybe.none':
                                var $6804 = Kind$Check$result$(Maybe$some$($6789), List$nil);
                                var self = $6804;
                                break;
                        };
                        switch (self._) {
                            case 'Kind.Check.result':
                                var $6805 = self.value;
                                var $6806 = self.errors;
                                var $6807 = Kind$Check$result$($6805, List$concat$($6787, $6806));
                                var $6790 = $6807;
                                break;
                        };
                        var $6788 = $6790;
                        break;
                    case 'Maybe.none':
                        var $6808 = Kind$Check$result$(Maybe$none, $6787);
                        var $6788 = $6808;
                        break;
                };
                var $6573 = $6788;
                break;
        };
        return $6573;
    };
    const Kind$Term$check = x0 => x1 => x2 => x3 => x4 => x5 => Kind$Term$check$(x0, x1, x2, x3, x4, x5);

    function Kind$Path$nil$(_x$1) {
        var $6809 = _x$1;
        return $6809;
    };
    const Kind$Path$nil = x0 => Kind$Path$nil$(x0);
    const Kind$MPath$nil = Maybe$some$(Kind$Path$nil);

    function List$is_empty$(_list$2) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $6811 = Bool$true;
                var $6810 = $6811;
                break;
            case 'List.cons':
                var $6812 = Bool$false;
                var $6810 = $6812;
                break;
        };
        return $6810;
    };
    const List$is_empty = x0 => List$is_empty$(x0);

    function Kind$Term$patch_at$(_path$1, _term$2, _fn$3) {
        var self = _term$2;
        switch (self._) {
            case 'Kind.Term.all':
                var $6814 = self.eras;
                var $6815 = self.self;
                var $6816 = self.name;
                var $6817 = self.xtyp;
                var $6818 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6820 = self.slice(0, -1);
                        var $6821 = Kind$Term$all$($6814, $6815, $6816, Kind$Term$patch_at$($6820, $6817, _fn$3), $6818);
                        var $6819 = $6821;
                        break;
                    case 'i':
                        var $6822 = self.slice(0, -1);
                        var $6823 = Kind$Term$all$($6814, $6815, $6816, $6817, (_s$10 => _x$11 => {
                            var $6824 = Kind$Term$patch_at$($6822, $6818(_s$10)(_x$11), _fn$3);
                            return $6824;
                        }));
                        var $6819 = $6823;
                        break;
                    case 'e':
                        var $6825 = _fn$3(_term$2);
                        var $6819 = $6825;
                        break;
                };
                var $6813 = $6819;
                break;
            case 'Kind.Term.lam':
                var $6826 = self.name;
                var $6827 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6829 = _fn$3(_term$2);
                        var $6828 = $6829;
                        break;
                    case 'o':
                    case 'i':
                        var $6830 = Kind$Term$lam$($6826, (_x$7 => {
                            var $6831 = Kind$Term$patch_at$(Bits$tail$(_path$1), $6827(_x$7), _fn$3);
                            return $6831;
                        }));
                        var $6828 = $6830;
                        break;
                };
                var $6813 = $6828;
                break;
            case 'Kind.Term.app':
                var $6832 = self.func;
                var $6833 = self.argm;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6835 = self.slice(0, -1);
                        var $6836 = Kind$Term$app$(Kind$Term$patch_at$($6835, $6832, _fn$3), $6833);
                        var $6834 = $6836;
                        break;
                    case 'i':
                        var $6837 = self.slice(0, -1);
                        var $6838 = Kind$Term$app$($6832, Kind$Term$patch_at$($6837, $6833, _fn$3));
                        var $6834 = $6838;
                        break;
                    case 'e':
                        var $6839 = _fn$3(_term$2);
                        var $6834 = $6839;
                        break;
                };
                var $6813 = $6834;
                break;
            case 'Kind.Term.let':
                var $6840 = self.name;
                var $6841 = self.expr;
                var $6842 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6844 = self.slice(0, -1);
                        var $6845 = Kind$Term$let$($6840, Kind$Term$patch_at$($6844, $6841, _fn$3), $6842);
                        var $6843 = $6845;
                        break;
                    case 'i':
                        var $6846 = self.slice(0, -1);
                        var $6847 = Kind$Term$let$($6840, $6841, (_x$8 => {
                            var $6848 = Kind$Term$patch_at$($6846, $6842(_x$8), _fn$3);
                            return $6848;
                        }));
                        var $6843 = $6847;
                        break;
                    case 'e':
                        var $6849 = _fn$3(_term$2);
                        var $6843 = $6849;
                        break;
                };
                var $6813 = $6843;
                break;
            case 'Kind.Term.def':
                var $6850 = self.name;
                var $6851 = self.expr;
                var $6852 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6854 = self.slice(0, -1);
                        var $6855 = Kind$Term$def$($6850, Kind$Term$patch_at$($6854, $6851, _fn$3), $6852);
                        var $6853 = $6855;
                        break;
                    case 'i':
                        var $6856 = self.slice(0, -1);
                        var $6857 = Kind$Term$def$($6850, $6851, (_x$8 => {
                            var $6858 = Kind$Term$patch_at$($6856, $6852(_x$8), _fn$3);
                            return $6858;
                        }));
                        var $6853 = $6857;
                        break;
                    case 'e':
                        var $6859 = _fn$3(_term$2);
                        var $6853 = $6859;
                        break;
                };
                var $6813 = $6853;
                break;
            case 'Kind.Term.ann':
                var $6860 = self.done;
                var $6861 = self.term;
                var $6862 = self.type;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'o':
                        var $6864 = self.slice(0, -1);
                        var $6865 = Kind$Term$ann$($6860, Kind$Term$patch_at$($6864, $6861, _fn$3), $6862);
                        var $6863 = $6865;
                        break;
                    case 'i':
                        var $6866 = self.slice(0, -1);
                        var $6867 = Kind$Term$ann$($6860, $6861, Kind$Term$patch_at$($6866, $6862, _fn$3));
                        var $6863 = $6867;
                        break;
                    case 'e':
                        var $6868 = _fn$3(_term$2);
                        var $6863 = $6868;
                        break;
                };
                var $6813 = $6863;
                break;
            case 'Kind.Term.ori':
                var $6869 = self.orig;
                var $6870 = self.expr;
                var $6871 = Kind$Term$ori$($6869, Kind$Term$patch_at$(_path$1, $6870, _fn$3));
                var $6813 = $6871;
                break;
            case 'Kind.Term.var':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6873 = _fn$3(_term$2);
                        var $6872 = $6873;
                        break;
                    case 'o':
                    case 'i':
                        var $6874 = _term$2;
                        var $6872 = $6874;
                        break;
                };
                var $6813 = $6872;
                break;
            case 'Kind.Term.ref':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6876 = _fn$3(_term$2);
                        var $6875 = $6876;
                        break;
                    case 'o':
                    case 'i':
                        var $6877 = _term$2;
                        var $6875 = $6877;
                        break;
                };
                var $6813 = $6875;
                break;
            case 'Kind.Term.typ':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6879 = _fn$3(_term$2);
                        var $6878 = $6879;
                        break;
                    case 'o':
                    case 'i':
                        var $6880 = _term$2;
                        var $6878 = $6880;
                        break;
                };
                var $6813 = $6878;
                break;
            case 'Kind.Term.gol':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6882 = _fn$3(_term$2);
                        var $6881 = $6882;
                        break;
                    case 'o':
                    case 'i':
                        var $6883 = _term$2;
                        var $6881 = $6883;
                        break;
                };
                var $6813 = $6881;
                break;
            case 'Kind.Term.cse':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $6885 = _fn$3(_term$2);
                        var $6884 = $6885;
                        break;
                    case 'o':
                    case 'i':
                        var $6886 = _term$2;
                        var $6884 = $6886;
                        break;
                };
                var $6813 = $6884;
                break;
        };
        return $6813;
    };
    const Kind$Term$patch_at = x0 => x1 => x2 => Kind$Term$patch_at$(x0, x1, x2);

    function Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, _errs$10, _fixd$11) {
        var self = _errs$10;
        switch (self._) {
            case 'List.cons':
                var $6888 = self.head;
                var $6889 = self.tail;
                var self = $6888;
                switch (self._) {
                    case 'Kind.Error.waiting':
                        var $6891 = self.name;
                        var $6892 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                            var $6893 = _m$bind$15;
                            return $6893;
                        }))(Kind$Synth$one$($6891, _defs$9))((_new_defs$15 => {
                            var self = _new_defs$15;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $6895 = self.value;
                                    var $6896 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $6895, $6889, Bool$true);
                                    var $6894 = $6896;
                                    break;
                                case 'Maybe.none':
                                    var $6897 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $6889, _fixd$11);
                                    var $6894 = $6897;
                                    break;
                            };
                            return $6894;
                        }));
                        var $6890 = $6892;
                        break;
                    case 'Kind.Error.patch':
                        var $6898 = self.path;
                        var $6899 = self.term;
                        var self = $6898;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'o':
                                var $6901 = self.slice(0, -1);
                                var _term$17 = Kind$Term$patch_at$($6901, _term$5, (_x$17 => {
                                    var $6903 = $6899;
                                    return $6903;
                                }));
                                var $6902 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$17, _type$6, _isct$7, _arit$8, _defs$9, $6889, Bool$true);
                                var $6900 = $6902;
                                break;
                            case 'i':
                                var $6904 = self.slice(0, -1);
                                var _type$17 = Kind$Term$patch_at$($6904, _type$6, (_x$17 => {
                                    var $6906 = $6899;
                                    return $6906;
                                }));
                                var $6905 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$17, _isct$7, _arit$8, _defs$9, $6889, Bool$true);
                                var $6900 = $6905;
                                break;
                            case 'e':
                                var $6907 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                    var $6908 = _m$pure$17;
                                    return $6908;
                                }))(Maybe$none);
                                var $6900 = $6907;
                                break;
                        };
                        var $6890 = $6900;
                        break;
                    case 'Kind.Error.undefined_reference':
                        var $6909 = self.name;
                        var $6910 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                            var $6911 = _m$bind$16;
                            return $6911;
                        }))(Kind$Synth$one$($6909, _defs$9))((_new_defs$16 => {
                            var self = _new_defs$16;
                            switch (self._) {
                                case 'Maybe.some':
                                    var $6913 = self.value;
                                    var $6914 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $6913, $6889, Bool$true);
                                    var $6912 = $6914;
                                    break;
                                case 'Maybe.none':
                                    var $6915 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $6889, _fixd$11);
                                    var $6912 = $6915;
                                    break;
                            };
                            return $6912;
                        }));
                        var $6890 = $6910;
                        break;
                    case 'Kind.Error.type_mismatch':
                    case 'Kind.Error.show_goal':
                    case 'Kind.Error.indirect':
                    case 'Kind.Error.cant_infer':
                        var $6916 = Kind$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $6889, _fixd$11);
                        var $6890 = $6916;
                        break;
                };
                var $6887 = $6890;
                break;
            case 'List.nil':
                var self = _fixd$11;
                if (self) {
                    var _type$12 = Kind$Term$bind$(List$nil, (_x$12 => {
                        var $6919 = (_x$12 + '1');
                        return $6919;
                    }), _type$6);
                    var _term$13 = Kind$Term$bind$(List$nil, (_x$13 => {
                        var $6920 = (_x$13 + '0');
                        return $6920;
                    }), _term$5);
                    var _defs$14 = Kind$Map$set$(_name$4, Kind$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$13, _type$12, _isct$7, _arit$8, Kind$Status$init), _defs$9);
                    var $6918 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                        var $6921 = _m$pure$16;
                        return $6921;
                    }))(Maybe$some$(_defs$14));
                    var $6917 = $6918;
                } else {
                    var $6922 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                        var $6923 = _m$pure$13;
                        return $6923;
                    }))(Maybe$none);
                    var $6917 = $6922;
                };
                var $6887 = $6917;
                break;
        };
        return $6887;
    };
    const Kind$Synth$fix = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => x10 => Kind$Synth$fix$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);

    function Kind$Status$fail$(_errors$1) {
        var $6924 = ({
            _: 'Kind.Status.fail',
            'errors': _errors$1
        });
        return $6924;
    };
    const Kind$Status$fail = x0 => Kind$Status$fail$(x0);

    function Kind$Synth$one$(_name$1, _defs$2) {
        var self = Kind$Map$get$(_name$1, _defs$2);
        switch (self._) {
            case 'Maybe.some':
                var $6926 = self.value;
                var self = $6926;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $6928 = self.file;
                        var $6929 = self.code;
                        var $6930 = self.orig;
                        var $6931 = self.name;
                        var $6932 = self.term;
                        var $6933 = self.type;
                        var $6934 = self.isct;
                        var $6935 = self.arit;
                        var $6936 = self.stat;
                        var _file$13 = $6928;
                        var _code$14 = $6929;
                        var _orig$15 = $6930;
                        var _name$16 = $6931;
                        var _term$17 = $6932;
                        var _type$18 = $6933;
                        var _isct$19 = $6934;
                        var _arit$20 = $6935;
                        var _stat$21 = $6936;
                        var self = _stat$21;
                        switch (self._) {
                            case 'Kind.Status.init':
                                var _defs$22 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Kind$Status$wait), _defs$2);
                                var self = Kind$Term$check$(_type$18, Maybe$some$(Kind$Term$typ), _defs$22, List$nil, Kind$MPath$i$(Kind$MPath$nil), Maybe$none);
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6939 = self.value;
                                        var $6940 = self.errors;
                                        var self = $6939;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $6942 = Kind$Check$result$(Maybe$none, $6940);
                                                var $6941 = $6942;
                                                break;
                                            case 'Maybe.some':
                                                var self = Kind$Term$check$(_term$17, Maybe$some$(_type$18), _defs$22, List$nil, Kind$MPath$o$(Kind$MPath$nil), Maybe$none);
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6944 = self.value;
                                                        var $6945 = self.errors;
                                                        var self = $6944;
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var $6947 = Kind$Check$result$(Maybe$none, $6945);
                                                                var $6946 = $6947;
                                                                break;
                                                            case 'Maybe.some':
                                                                var self = Kind$Check$result$(Maybe$some$(Unit$new), List$nil);
                                                                switch (self._) {
                                                                    case 'Kind.Check.result':
                                                                        var $6949 = self.value;
                                                                        var $6950 = self.errors;
                                                                        var $6951 = Kind$Check$result$($6949, List$concat$($6945, $6950));
                                                                        var $6948 = $6951;
                                                                        break;
                                                                };
                                                                var $6946 = $6948;
                                                                break;
                                                        };
                                                        var self = $6946;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Kind.Check.result':
                                                        var $6952 = self.value;
                                                        var $6953 = self.errors;
                                                        var $6954 = Kind$Check$result$($6952, List$concat$($6940, $6953));
                                                        var $6943 = $6954;
                                                        break;
                                                };
                                                var $6941 = $6943;
                                                break;
                                        };
                                        var _checked$23 = $6941;
                                        break;
                                };
                                var self = _checked$23;
                                switch (self._) {
                                    case 'Kind.Check.result':
                                        var $6955 = self.errors;
                                        var self = List$is_empty$($6955);
                                        if (self) {
                                            var _defs$26 = Kind$Map$def$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Bool$true, _defs$22);
                                            var $6957 = IO$monad$((_m$bind$27 => _m$pure$28 => {
                                                var $6958 = _m$pure$28;
                                                return $6958;
                                            }))(Maybe$some$(_defs$26));
                                            var $6956 = $6957;
                                        } else {
                                            var $6959 = IO$monad$((_m$bind$26 => _m$pure$27 => {
                                                var $6960 = _m$bind$26;
                                                return $6960;
                                            }))(Kind$Synth$fix$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _defs$22, $6955, Bool$false))((_fixed$26 => {
                                                var self = _fixed$26;
                                                switch (self._) {
                                                    case 'Maybe.some':
                                                        var $6962 = self.value;
                                                        var $6963 = Kind$Synth$one$(_name$16, $6962);
                                                        var $6961 = $6963;
                                                        break;
                                                    case 'Maybe.none':
                                                        var _stat$27 = Kind$Status$fail$($6955);
                                                        var _defs$28 = Kind$Map$set$(_name$16, Kind$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _stat$27), _defs$22);
                                                        var $6964 = IO$monad$((_m$bind$29 => _m$pure$30 => {
                                                            var $6965 = _m$pure$30;
                                                            return $6965;
                                                        }))(Maybe$some$(_defs$28));
                                                        var $6961 = $6964;
                                                        break;
                                                };
                                                return $6961;
                                            }));
                                            var $6956 = $6959;
                                        };
                                        var $6938 = $6956;
                                        break;
                                };
                                var $6937 = $6938;
                                break;
                            case 'Kind.Status.wait':
                            case 'Kind.Status.done':
                                var $6966 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                    var $6967 = _m$pure$23;
                                    return $6967;
                                }))(Maybe$some$(_defs$2));
                                var $6937 = $6966;
                                break;
                            case 'Kind.Status.fail':
                                var $6968 = IO$monad$((_m$bind$23 => _m$pure$24 => {
                                    var $6969 = _m$pure$24;
                                    return $6969;
                                }))(Maybe$some$(_defs$2));
                                var $6937 = $6968;
                                break;
                        };
                        var $6927 = $6937;
                        break;
                };
                var $6925 = $6927;
                break;
            case 'Maybe.none':
                var $6970 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $6971 = _m$bind$3;
                    return $6971;
                }))(Kind$Synth$load$(_name$1, _defs$2))((_loaded$3 => {
                    var self = _loaded$3;
                    switch (self._) {
                        case 'Maybe.some':
                            var $6973 = self.value;
                            var $6974 = Kind$Synth$one$(_name$1, $6973);
                            var $6972 = $6974;
                            break;
                        case 'Maybe.none':
                            var $6975 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                                var $6976 = _m$pure$5;
                                return $6976;
                            }))(Maybe$none);
                            var $6972 = $6975;
                            break;
                    };
                    return $6972;
                }));
                var $6925 = $6970;
                break;
        };
        return $6925;
    };
    const Kind$Synth$one = x0 => x1 => Kind$Synth$one$(x0, x1);

    function BitsMap$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $6978 = self.head;
                var $6979 = self.tail;
                var self = $6978;
                switch (self._) {
                    case 'Pair.new':
                        var $6981 = self.fst;
                        var $6982 = self.snd;
                        var $6983 = BitsMap$set$($6981, $6982, BitsMap$from_list$($6979));
                        var $6980 = $6983;
                        break;
                };
                var $6977 = $6980;
                break;
            case 'List.nil':
                var $6984 = BitsMap$new;
                var $6977 = $6984;
                break;
        };
        return $6977;
    };
    const BitsMap$from_list = x0 => BitsMap$from_list$(x0);
    const Kind$Term$inline$names = (() => {
        var _inl$1 = List$cons$("Monad.pure", List$cons$("Monad.bind", List$cons$("Monad.new", List$cons$("Parser.monad", List$cons$("Parser.bind", List$cons$("Parser.pure", List$cons$("Kind.Check.pure", List$cons$("Kind.Check.bind", List$cons$("Kind.Check.monad", List$cons$("Kind.Check.value", List$cons$("Kind.Check.none", List$nil)))))))))));
        var _kvs$2 = List$mapped$(_inl$1, (_x$2 => {
            var $6986 = Pair$new$((kind_name_to_bits(_x$2)), Unit$new);
            return $6986;
        }));
        var $6985 = BitsMap$from_list$(_kvs$2);
        return $6985;
    })();

    function Kind$Term$inline$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $6988 = self.name;
                var _inli$4 = BitsSet$has$((kind_name_to_bits($6988)), Kind$Term$inline$names);
                var self = _inli$4;
                if (self) {
                    var self = Kind$Map$get$($6988, _defs$2);
                    switch (self._) {
                        case 'Maybe.some':
                            var $6991 = self.value;
                            var self = $6991;
                            switch (self._) {
                                case 'Kind.Def.new':
                                    var $6993 = self.term;
                                    var $6994 = Kind$Term$inline$reduce$($6993, _defs$2);
                                    var $6992 = $6994;
                                    break;
                            };
                            var $6990 = $6992;
                            break;
                        case 'Maybe.none':
                            var $6995 = Kind$Term$ref$($6988);
                            var $6990 = $6995;
                            break;
                    };
                    var $6989 = $6990;
                } else {
                    var $6996 = _term$1;
                    var $6989 = $6996;
                };
                var $6987 = $6989;
                break;
            case 'Kind.Term.app':
                var $6997 = self.func;
                var $6998 = self.argm;
                var _func$5 = Kind$Term$inline$reduce$($6997, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Kind.Term.lam':
                        var $7000 = self.body;
                        var $7001 = Kind$Term$inline$reduce$($7000($6998), _defs$2);
                        var $6999 = $7001;
                        break;
                    case 'Kind.Term.let':
                        var $7002 = self.name;
                        var $7003 = self.expr;
                        var $7004 = self.body;
                        var $7005 = Kind$Term$let$($7002, $7003, (_x$9 => {
                            var $7006 = Kind$Term$inline$reduce$(Kind$Term$app$($7004(_x$9), $6998), _defs$2);
                            return $7006;
                        }));
                        var $6999 = $7005;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.app':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $7007 = _term$1;
                        var $6999 = $7007;
                        break;
                };
                var $6987 = $6999;
                break;
            case 'Kind.Term.ori':
                var $7008 = self.expr;
                var $7009 = Kind$Term$inline$reduce$($7008, _defs$2);
                var $6987 = $7009;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
                var $7010 = _term$1;
                var $6987 = $7010;
                break;
        };
        return $6987;
    };
    const Kind$Term$inline$reduce = x0 => x1 => Kind$Term$inline$reduce$(x0, x1);

    function Kind$Term$inline$(_term$1, _defs$2) {
        var self = Kind$Term$inline$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Kind.Term.var':
                var $7012 = self.name;
                var $7013 = self.indx;
                var $7014 = Kind$Term$var$($7012, $7013);
                var $7011 = $7014;
                break;
            case 'Kind.Term.ref':
                var $7015 = self.name;
                var $7016 = Kind$Term$ref$($7015);
                var $7011 = $7016;
                break;
            case 'Kind.Term.all':
                var $7017 = self.eras;
                var $7018 = self.self;
                var $7019 = self.name;
                var $7020 = self.xtyp;
                var $7021 = self.body;
                var $7022 = Kind$Term$all$($7017, $7018, $7019, Kind$Term$inline$($7020, _defs$2), (_s$8 => _x$9 => {
                    var $7023 = Kind$Term$inline$($7021(_s$8)(_x$9), _defs$2);
                    return $7023;
                }));
                var $7011 = $7022;
                break;
            case 'Kind.Term.lam':
                var $7024 = self.name;
                var $7025 = self.body;
                var $7026 = Kind$Term$lam$($7024, (_x$5 => {
                    var $7027 = Kind$Term$inline$($7025(_x$5), _defs$2);
                    return $7027;
                }));
                var $7011 = $7026;
                break;
            case 'Kind.Term.app':
                var $7028 = self.func;
                var $7029 = self.argm;
                var $7030 = Kind$Term$app$(Kind$Term$inline$($7028, _defs$2), Kind$Term$inline$($7029, _defs$2));
                var $7011 = $7030;
                break;
            case 'Kind.Term.let':
                var $7031 = self.name;
                var $7032 = self.expr;
                var $7033 = self.body;
                var $7034 = Kind$Term$let$($7031, Kind$Term$inline$($7032, _defs$2), (_x$6 => {
                    var $7035 = Kind$Term$inline$($7033(_x$6), _defs$2);
                    return $7035;
                }));
                var $7011 = $7034;
                break;
            case 'Kind.Term.def':
                var $7036 = self.name;
                var $7037 = self.expr;
                var $7038 = self.body;
                var $7039 = Kind$Term$def$($7036, Kind$Term$inline$($7037, _defs$2), (_x$6 => {
                    var $7040 = Kind$Term$inline$($7038(_x$6), _defs$2);
                    return $7040;
                }));
                var $7011 = $7039;
                break;
            case 'Kind.Term.ann':
                var $7041 = self.done;
                var $7042 = self.term;
                var $7043 = self.type;
                var $7044 = Kind$Term$ann$($7041, Kind$Term$inline$($7042, _defs$2), Kind$Term$inline$($7043, _defs$2));
                var $7011 = $7044;
                break;
            case 'Kind.Term.gol':
                var $7045 = self.name;
                var $7046 = self.dref;
                var $7047 = self.verb;
                var $7048 = Kind$Term$gol$($7045, $7046, $7047);
                var $7011 = $7048;
                break;
            case 'Kind.Term.hol':
                var $7049 = self.path;
                var $7050 = Kind$Term$hol$($7049);
                var $7011 = $7050;
                break;
            case 'Kind.Term.nat':
                var $7051 = self.natx;
                var $7052 = Kind$Term$nat$($7051);
                var $7011 = $7052;
                break;
            case 'Kind.Term.chr':
                var $7053 = self.chrx;
                var $7054 = Kind$Term$chr$($7053);
                var $7011 = $7054;
                break;
            case 'Kind.Term.str':
                var $7055 = self.strx;
                var $7056 = Kind$Term$str$($7055);
                var $7011 = $7056;
                break;
            case 'Kind.Term.ori':
                var $7057 = self.expr;
                var $7058 = Kind$Term$inline$($7057, _defs$2);
                var $7011 = $7058;
                break;
            case 'Kind.Term.typ':
                var $7059 = Kind$Term$typ;
                var $7011 = $7059;
                break;
            case 'Kind.Term.cse':
                var $7060 = _term$1;
                var $7011 = $7060;
                break;
        };
        return $7011;
    };
    const Kind$Term$inline = x0 => x1 => Kind$Term$inline$(x0, x1);

    function BitsMap$values$go$(_xs$2, _list$3) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $7062 = self.val;
                var $7063 = self.lft;
                var $7064 = self.rgt;
                var self = $7062;
                switch (self._) {
                    case 'Maybe.some':
                        var $7066 = self.value;
                        var $7067 = List$cons$($7066, _list$3);
                        var _list0$7 = $7067;
                        break;
                    case 'Maybe.none':
                        var $7068 = _list$3;
                        var _list0$7 = $7068;
                        break;
                };
                var _list1$8 = BitsMap$values$go$($7063, _list0$7);
                var _list2$9 = BitsMap$values$go$($7064, _list1$8);
                var $7065 = _list2$9;
                var $7061 = $7065;
                break;
            case 'BitsMap.new':
                var $7069 = _list$3;
                var $7061 = $7069;
                break;
        };
        return $7061;
    };
    const BitsMap$values$go = x0 => x1 => BitsMap$values$go$(x0, x1);

    function BitsMap$values$(_xs$2) {
        var $7070 = BitsMap$values$go$(_xs$2, List$nil);
        return $7070;
    };
    const BitsMap$values = x0 => BitsMap$values$(x0);

    function Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4) {
        var Kind$Core$var_name$ = (_indx$1, _name$2, _brui$3, _vars$4) => ({
            ctr: 'TCO',
            arg: [_indx$1, _name$2, _brui$3, _vars$4]
        });
        var Kind$Core$var_name = _indx$1 => _name$2 => _brui$3 => _vars$4 => Kind$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4);
        var arg = [_indx$1, _name$2, _brui$3, _vars$4];
        while (true) {
            let [_indx$1, _name$2, _brui$3, _vars$4] = arg;
            var R = (() => {
                var self = _indx$1;
                if (self === 0n) {
                    var self = _brui$3;
                    if (self === 0n) {
                        var $7072 = _name$2;
                        var $7071 = $7072;
                    } else {
                        var $7073 = (self - 1n);
                        var $7074 = (_name$2 + ("^" + Nat$show$(_brui$3)));
                        var $7071 = $7074;
                    };
                    return $7071;
                } else {
                    var $7075 = (self - 1n);
                    var self = _vars$4;
                    switch (self._) {
                        case 'List.cons':
                            var $7077 = self.head;
                            var $7078 = self.tail;
                            var self = (_name$2 === $7077);
                            if (self) {
                                var $7080 = Nat$succ$(_brui$3);
                                var _brui$8 = $7080;
                            } else {
                                var $7081 = _brui$3;
                                var _brui$8 = $7081;
                            };
                            var $7079 = Kind$Core$var_name$($7075, _name$2, _brui$8, $7078);
                            var $7076 = $7079;
                            break;
                        case 'List.nil':
                            var $7082 = "unbound";
                            var $7076 = $7082;
                            break;
                    };
                    return $7076;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Core$var_name = x0 => x1 => x2 => x3 => Kind$Core$var_name$(x0, x1, x2, x3);

    function Kind$Name$show$(_name$1) {
        var $7083 = _name$1;
        return $7083;
    };
    const Kind$Name$show = x0 => Kind$Name$show$(x0);

    function Bits$to_nat$(_b$1) {
        var self = _b$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $7085 = self.slice(0, -1);
                var $7086 = (2n * Bits$to_nat$($7085));
                var $7084 = $7086;
                break;
            case 'i':
                var $7087 = self.slice(0, -1);
                var $7088 = Nat$succ$((2n * Bits$to_nat$($7087)));
                var $7084 = $7088;
                break;
            case 'e':
                var $7089 = 0n;
                var $7084 = $7089;
                break;
        };
        return $7084;
    };
    const Bits$to_nat = x0 => Bits$to_nat$(x0);

    function U16$show_hex$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $7091 = u16_to_word(self);
                var $7092 = Nat$to_string_base$(16n, Bits$to_nat$(Word$to_bits$($7091)));
                var $7090 = $7092;
                break;
        };
        return $7090;
    };
    const U16$show_hex = x0 => U16$show_hex$(x0);

    function Kind$Code$escape$char$(_chr$1) {
        var self = (_chr$1 === Kind$Code$backslash);
        if (self) {
            var $7094 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
            var $7093 = $7094;
        } else {
            var self = (_chr$1 === 34);
            if (self) {
                var $7096 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
                var $7095 = $7096;
            } else {
                var self = (_chr$1 === 39);
                if (self) {
                    var $7098 = String$cons$(Kind$Code$backslash, String$cons$(_chr$1, String$nil));
                    var $7097 = $7098;
                } else {
                    var self = U16$btw$(32, _chr$1, 126);
                    if (self) {
                        var $7100 = String$cons$(_chr$1, String$nil);
                        var $7099 = $7100;
                    } else {
                        var $7101 = (String$cons$(Kind$Code$backslash, String$nil) + ("u{" + (U16$show_hex$(_chr$1) + "}")));
                        var $7099 = $7101;
                    };
                    var $7097 = $7099;
                };
                var $7095 = $7097;
            };
            var $7093 = $7095;
        };
        return $7093;
    };
    const Kind$Code$escape$char = x0 => Kind$Code$escape$char$(x0);

    function Kind$Code$escape$go$(_str$1, _result$2) {
        var Kind$Code$escape$go$ = (_str$1, _result$2) => ({
            ctr: 'TCO',
            arg: [_str$1, _result$2]
        });
        var Kind$Code$escape$go = _str$1 => _result$2 => Kind$Code$escape$go$(_str$1, _result$2);
        var arg = [_str$1, _result$2];
        while (true) {
            let [_str$1, _result$2] = arg;
            var R = (() => {
                var self = _str$1;
                if (self.length === 0) {
                    var $7102 = String$reverse$(_result$2);
                    return $7102;
                } else {
                    var $7103 = self.charCodeAt(0);
                    var $7104 = self.slice(1);
                    var $7105 = Kind$Code$escape$go$($7104, (String$reverse$(Kind$Code$escape$char$($7103)) + _result$2));
                    return $7105;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Code$escape$go = x0 => x1 => Kind$Code$escape$go$(x0, x1);

    function Kind$Code$escape$(_str$1) {
        var $7106 = Kind$Code$escape$go$(_str$1, "");
        return $7106;
    };
    const Kind$Code$escape = x0 => Kind$Code$escape$(x0);

    function Kind$Core$show$(_term$1, _indx$2, _vars$3) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $7108 = self.name;
                var $7109 = self.indx;
                var $7110 = Kind$Core$var_name$(Nat$pred$((_indx$2 - $7109 <= 0n ? 0n : _indx$2 - $7109)), $7108, 0n, _vars$3);
                var $7107 = $7110;
                break;
            case 'Kind.Term.ref':
                var $7111 = self.name;
                var $7112 = Kind$Name$show$($7111);
                var $7107 = $7112;
                break;
            case 'Kind.Term.all':
                var $7113 = self.eras;
                var $7114 = self.self;
                var $7115 = self.name;
                var $7116 = self.xtyp;
                var $7117 = self.body;
                var _eras$9 = $7113;
                var self = _eras$9;
                if (self) {
                    var $7119 = "%";
                    var _init$10 = $7119;
                } else {
                    var $7120 = "@";
                    var _init$10 = $7120;
                };
                var _self$11 = Kind$Name$show$($7114);
                var _name$12 = Kind$Name$show$($7115);
                var _xtyp$13 = Kind$Core$show$($7116, _indx$2, _vars$3);
                var _body$14 = Kind$Core$show$($7117(Kind$Term$var$($7114, _indx$2))(Kind$Term$var$($7115, Nat$succ$(_indx$2))), Nat$succ$(Nat$succ$(_indx$2)), List$cons$($7115, List$cons$($7114, _vars$3)));
                var $7118 = String$flatten$(List$cons$(_init$10, List$cons$(_self$11, List$cons$("(", List$cons$(_name$12, List$cons$(":", List$cons$(_xtyp$13, List$cons$(") ", List$cons$(_body$14, List$nil)))))))));
                var $7107 = $7118;
                break;
            case 'Kind.Term.lam':
                var $7121 = self.name;
                var $7122 = self.body;
                var _name$6 = Kind$Name$show$($7121);
                var _body$7 = Kind$Core$show$($7122(Kind$Term$var$($7121, _indx$2)), Nat$succ$(_indx$2), List$cons$($7121, _vars$3));
                var $7123 = String$flatten$(List$cons$("#", List$cons$(_name$6, List$cons$(" ", List$cons$(_body$7, List$nil)))));
                var $7107 = $7123;
                break;
            case 'Kind.Term.app':
                var $7124 = self.func;
                var $7125 = self.argm;
                var _func$6 = Kind$Core$show$($7124, _indx$2, _vars$3);
                var _argm$7 = Kind$Core$show$($7125, _indx$2, _vars$3);
                var $7126 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(" ", List$cons$(_argm$7, List$cons$(")", List$nil))))));
                var $7107 = $7126;
                break;
            case 'Kind.Term.let':
                var $7127 = self.name;
                var $7128 = self.expr;
                var $7129 = self.body;
                var _name$7 = Kind$Name$show$($7127);
                var _expr$8 = Kind$Core$show$($7128, _indx$2, _vars$3);
                var _body$9 = Kind$Core$show$($7129(Kind$Term$var$($7127, _indx$2)), Nat$succ$(_indx$2), List$cons$($7127, _vars$3));
                var $7130 = String$flatten$(List$cons$("!", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $7107 = $7130;
                break;
            case 'Kind.Term.def':
                var $7131 = self.name;
                var $7132 = self.expr;
                var $7133 = self.body;
                var _name$7 = Kind$Name$show$($7131);
                var _expr$8 = Kind$Core$show$($7132, _indx$2, _vars$3);
                var _body$9 = Kind$Core$show$($7133(Kind$Term$var$($7131, _indx$2)), Nat$succ$(_indx$2), List$cons$($7131, _vars$3));
                var $7134 = String$flatten$(List$cons$("$", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $7107 = $7134;
                break;
            case 'Kind.Term.ann':
                var $7135 = self.term;
                var $7136 = self.type;
                var _term$7 = Kind$Core$show$($7135, _indx$2, _vars$3);
                var _type$8 = Kind$Core$show$($7136, _indx$2, _vars$3);
                var $7137 = String$flatten$(List$cons$("{", List$cons$(_term$7, List$cons$(":", List$cons$(_type$8, List$cons$("}", List$nil))))));
                var $7107 = $7137;
                break;
            case 'Kind.Term.nat':
                var $7138 = self.natx;
                var $7139 = String$flatten$(List$cons$("+", List$cons$(Nat$show$($7138), List$nil)));
                var $7107 = $7139;
                break;
            case 'Kind.Term.chr':
                var $7140 = self.chrx;
                var $7141 = String$flatten$(List$cons$("\'", List$cons$(Kind$Code$escape$char$($7140), List$cons$("\'", List$nil))));
                var $7107 = $7141;
                break;
            case 'Kind.Term.str':
                var $7142 = self.strx;
                var $7143 = String$flatten$(List$cons$("\"", List$cons$(Kind$Code$escape$($7142), List$cons$("\"", List$nil))));
                var $7107 = $7143;
                break;
            case 'Kind.Term.ori':
                var $7144 = self.expr;
                var $7145 = Kind$Core$show$($7144, _indx$2, _vars$3);
                var $7107 = $7145;
                break;
            case 'Kind.Term.typ':
                var $7146 = "*";
                var $7107 = $7146;
                break;
            case 'Kind.Term.gol':
                var $7147 = "<GOL>";
                var $7107 = $7147;
                break;
            case 'Kind.Term.hol':
                var $7148 = "<HOL>";
                var $7107 = $7148;
                break;
            case 'Kind.Term.cse':
                var $7149 = "<CSE>";
                var $7107 = $7149;
                break;
        };
        return $7107;
    };
    const Kind$Core$show = x0 => x1 => x2 => Kind$Core$show$(x0, x1, x2);

    function Kind$Defs$core$(_defs$1) {
        var _result$2 = "";
        var _result$3 = (() => {
            var $7152 = _result$2;
            var $7153 = BitsMap$values$(_defs$1);
            let _result$4 = $7152;
            let _defn$3;
            while ($7153._ === 'List.cons') {
                _defn$3 = $7153.head;
                var self = _defn$3;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $7154 = self.name;
                        var $7155 = self.term;
                        var $7156 = self.type;
                        var $7157 = self.stat;
                        var self = $7157;
                        switch (self._) {
                            case 'Kind.Status.init':
                            case 'Kind.Status.wait':
                            case 'Kind.Status.fail':
                                var $7159 = _result$4;
                                var $7158 = $7159;
                                break;
                            case 'Kind.Status.done':
                                var _name$14 = $7154;
                                var _term$15 = Kind$Core$show$($7155, 0n, List$nil);
                                var _type$16 = Kind$Core$show$($7156, 0n, List$nil);
                                var $7160 = String$flatten$(List$cons$(_result$4, List$cons$(_name$14, List$cons$(" : ", List$cons$(_type$16, List$cons$(" = ", List$cons$(_term$15, List$cons$(";\u{a}", List$nil))))))));
                                var $7158 = $7160;
                                break;
                        };
                        var $7152 = $7158;
                        break;
                };
                _result$4 = $7152;
                $7153 = $7153.tail;
            }
            return _result$4;
        })();
        var $7150 = _result$3;
        return $7150;
    };
    const Kind$Defs$core = x0 => Kind$Defs$core$(x0);

    function Kind$api$io$term_to_core$(_name$1) {
        var $7161 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7162 = _m$bind$2;
            return $7162;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.some':
                    var $7164 = self.value;
                    var $7165 = $7164;
                    var _defs$3 = $7165;
                    break;
                case 'Maybe.none':
                    var $7166 = Kind$Map$new;
                    var _defs$3 = $7166;
                    break;
            };
            var _defs$4 = BitsMap$map$((_defn$4 => {
                var self = _defn$4;
                switch (self._) {
                    case 'Kind.Def.new':
                        var $7168 = self.file;
                        var $7169 = self.code;
                        var $7170 = self.orig;
                        var $7171 = self.name;
                        var $7172 = self.term;
                        var $7173 = self.type;
                        var $7174 = self.isct;
                        var $7175 = self.arit;
                        var $7176 = self.stat;
                        var _term$14 = Kind$Term$inline$($7172, _defs$3);
                        var _type$15 = Kind$Term$inline$($7173, _defs$3);
                        var $7177 = Kind$Def$new$($7168, $7169, $7170, $7171, _term$14, _type$15, $7174, $7175, $7176);
                        var $7167 = $7177;
                        break;
                };
                return $7167;
            }), _defs$3);
            var $7163 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                var $7178 = _m$pure$6;
                return $7178;
            }))(Kind$Defs$core$(_defs$4));
            return $7163;
        }));
        return $7161;
    };
    const Kind$api$io$term_to_core = x0 => Kind$api$io$term_to_core$(x0);

    function BitsMap$keys$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $7180 = self.val;
                var $7181 = self.lft;
                var $7182 = self.rgt;
                var self = $7180;
                switch (self._) {
                    case 'Maybe.none':
                        var $7184 = _list$4;
                        var _list0$8 = $7184;
                        break;
                    case 'Maybe.some':
                        var $7185 = List$cons$(Bits$reverse$(_key$3), _list$4);
                        var _list0$8 = $7185;
                        break;
                };
                var _list1$9 = BitsMap$keys$go$($7181, (_key$3 + '0'), _list0$8);
                var _list2$10 = BitsMap$keys$go$($7182, (_key$3 + '1'), _list1$9);
                var $7183 = _list2$10;
                var $7179 = $7183;
                break;
            case 'BitsMap.new':
                var $7186 = _list$4;
                var $7179 = $7186;
                break;
        };
        return $7179;
    };
    const BitsMap$keys$go = x0 => x1 => x2 => BitsMap$keys$go$(x0, x1, x2);

    function BitsMap$keys$(_xs$2) {
        var $7187 = List$reverse$(BitsMap$keys$go$(_xs$2, Bits$e, List$nil));
        return $7187;
    };
    const BitsMap$keys = x0 => BitsMap$keys$(x0);

    function Bits$chunks_of$go$(_len$1, _bits$2, _need$3, _chunk$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'o':
                var $7189 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $7191 = List$cons$(_head$6, _tail$7);
                    var $7190 = $7191;
                } else {
                    var $7192 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '0');
                    var $7193 = Bits$chunks_of$go$(_len$1, $7189, $7192, _chunk$7);
                    var $7190 = $7193;
                };
                var $7188 = $7190;
                break;
            case 'i':
                var $7194 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $7196 = List$cons$(_head$6, _tail$7);
                    var $7195 = $7196;
                } else {
                    var $7197 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '1');
                    var $7198 = Bits$chunks_of$go$(_len$1, $7194, $7197, _chunk$7);
                    var $7195 = $7198;
                };
                var $7188 = $7195;
                break;
            case 'e':
                var $7199 = List$cons$(Bits$reverse$(_chunk$4), List$nil);
                var $7188 = $7199;
                break;
        };
        return $7188;
    };
    const Bits$chunks_of$go = x0 => x1 => x2 => x3 => Bits$chunks_of$go$(x0, x1, x2, x3);

    function Bits$chunks_of$(_len$1, _bits$2) {
        var $7200 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
        return $7200;
    };
    const Bits$chunks_of = x0 => x1 => Bits$chunks_of$(x0, x1);

    function Word$from_bits$(_size$1, _bits$2) {
        var self = _size$1;
        if (self === 0n) {
            var $7202 = Word$e;
            var $7201 = $7202;
        } else {
            var $7203 = (self - 1n);
            var self = _bits$2;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'o':
                    var $7205 = self.slice(0, -1);
                    var $7206 = Word$o$(Word$from_bits$($7203, $7205));
                    var $7204 = $7206;
                    break;
                case 'i':
                    var $7207 = self.slice(0, -1);
                    var $7208 = Word$i$(Word$from_bits$($7203, $7207));
                    var $7204 = $7208;
                    break;
                case 'e':
                    var $7209 = Word$o$(Word$from_bits$($7203, Bits$e));
                    var $7204 = $7209;
                    break;
            };
            var $7201 = $7204;
        };
        return $7201;
    };
    const Word$from_bits = x0 => x1 => Word$from_bits$(x0, x1);

    function Kind$Name$from_bits$(_bits$1) {
        var _list$2 = Bits$chunks_of$(6n, _bits$1);
        var _name$3 = List$fold$(_list$2, String$nil, (_bts$3 => _name$4 => {
            var _u16$5 = U16$new$(Word$from_bits$(16n, Bits$reverse$(_bts$3)));
            var self = U16$btw$(0, _u16$5, 25);
            if (self) {
                var $7212 = ((_u16$5 + 65) & 0xFFFF);
                var _chr$6 = $7212;
            } else {
                var self = U16$btw$(26, _u16$5, 51);
                if (self) {
                    var $7214 = ((_u16$5 + 71) & 0xFFFF);
                    var $7213 = $7214;
                } else {
                    var self = U16$btw$(52, _u16$5, 61);
                    if (self) {
                        var $7216 = (Math.max(_u16$5 - 4, 0));
                        var $7215 = $7216;
                    } else {
                        var self = (62 === _u16$5);
                        if (self) {
                            var $7218 = 46;
                            var $7217 = $7218;
                        } else {
                            var $7219 = 95;
                            var $7217 = $7219;
                        };
                        var $7215 = $7217;
                    };
                    var $7213 = $7215;
                };
                var _chr$6 = $7213;
            };
            var $7211 = String$cons$(_chr$6, _name$4);
            return $7211;
        }));
        var $7210 = _name$3;
        return $7210;
    };
    const Kind$Name$from_bits = x0 => Kind$Name$from_bits$(x0);

    function Kind$Synth$many$(_names$1, _defs$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.cons':
                var $7221 = self.head;
                var $7222 = self.tail;
                var $7223 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $7224 = _m$bind$5;
                    return $7224;
                }))(Kind$Synth$one$($7221, _defs$2))((_new_defs$5 => {
                    var self = _new_defs$5;
                    switch (self._) {
                        case 'Maybe.some':
                            var $7226 = self.value;
                            var $7227 = Kind$Synth$many$($7222, $7226);
                            var $7225 = $7227;
                            break;
                        case 'Maybe.none':
                            var $7228 = Kind$Synth$many$($7222, _defs$2);
                            var $7225 = $7228;
                            break;
                    };
                    return $7225;
                }));
                var $7220 = $7223;
                break;
            case 'List.nil':
                var $7229 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $7230 = _m$pure$4;
                    return $7230;
                }))(_defs$2);
                var $7220 = $7229;
                break;
        };
        return $7220;
    };
    const Kind$Synth$many = x0 => x1 => Kind$Synth$many$(x0, x1);

    function Kind$Synth$file$(_file$1, _defs$2) {
        var $7231 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $7232 = _m$bind$3;
            return $7232;
        }))(IO$get_file$(_file$1))((_code$3 => {
            var _read$4 = Kind$Defs$read$(_file$1, _code$3, _defs$2);
            var self = _read$4;
            switch (self._) {
                case 'Either.left':
                    var $7234 = self.value;
                    var $7235 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                        var $7236 = _m$pure$7;
                        return $7236;
                    }))(Either$left$($7234));
                    var $7233 = $7235;
                    break;
                case 'Either.right':
                    var $7237 = self.value;
                    var _file_defs$6 = $7237;
                    var _file_keys$7 = BitsMap$keys$(_file_defs$6);
                    var _file_nams$8 = List$mapped$(_file_keys$7, Kind$Name$from_bits);
                    var $7238 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                        var $7239 = _m$bind$9;
                        return $7239;
                    }))(Kind$Synth$many$(_file_nams$8, _file_defs$6))((_defs$9 => {
                        var $7240 = IO$monad$((_m$bind$10 => _m$pure$11 => {
                            var $7241 = _m$pure$11;
                            return $7241;
                        }))(Either$right$(Pair$new$(_file_nams$8, _defs$9)));
                        return $7240;
                    }));
                    var $7233 = $7238;
                    break;
            };
            return $7233;
        }));
        return $7231;
    };
    const Kind$Synth$file = x0 => x1 => Kind$Synth$file$(x0, x1);

    function IO$put_string$(_text$1) {
        var $7242 = IO$ask$("put_string", _text$1, (_skip$2 => {
            var $7243 = IO$end$(Unit$new);
            return $7243;
        }));
        return $7242;
    };
    const IO$put_string = x0 => IO$put_string$(x0);

    function IO$print$(_text$1) {
        var $7244 = IO$put_string$((_text$1 + "\u{a}"));
        return $7244;
    };
    const IO$print = x0 => IO$print$(x0);

    function Maybe$bind$(_m$3, _f$4) {
        var self = _m$3;
        switch (self._) {
            case 'Maybe.some':
                var $7246 = self.value;
                var $7247 = _f$4($7246);
                var $7245 = $7247;
                break;
            case 'Maybe.none':
                var $7248 = Maybe$none;
                var $7245 = $7248;
                break;
        };
        return $7245;
    };
    const Maybe$bind = x0 => x1 => Maybe$bind$(x0, x1);

    function Maybe$monad$(_new$2) {
        var $7249 = _new$2(Maybe$bind)(Maybe$some);
        return $7249;
    };
    const Maybe$monad = x0 => Maybe$monad$(x0);

    function Kind$Term$show$as_nat$go$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $7251 = self.name;
                var self = ($7251 === "Nat.zero");
                if (self) {
                    var $7253 = Maybe$some$(0n);
                    var $7252 = $7253;
                } else {
                    var $7254 = Maybe$none;
                    var $7252 = $7254;
                };
                var $7250 = $7252;
                break;
            case 'Kind.Term.app':
                var $7255 = self.func;
                var $7256 = self.argm;
                var self = $7255;
                switch (self._) {
                    case 'Kind.Term.ref':
                        var $7258 = self.name;
                        var self = ($7258 === "Nat.succ");
                        if (self) {
                            var $7260 = Maybe$monad$((_m$bind$5 => _m$pure$6 => {
                                var $7261 = _m$bind$5;
                                return $7261;
                            }))(Kind$Term$show$as_nat$go$($7256))((_pred$5 => {
                                var $7262 = Maybe$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $7263 = _m$pure$7;
                                    return $7263;
                                }))(Nat$succ$(_pred$5));
                                return $7262;
                            }));
                            var $7259 = $7260;
                        } else {
                            var $7264 = Maybe$none;
                            var $7259 = $7264;
                        };
                        var $7257 = $7259;
                        break;
                    case 'Kind.Term.var':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.app':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                    case 'Kind.Term.ori':
                        var $7265 = Maybe$none;
                        var $7257 = $7265;
                        break;
                };
                var $7250 = $7257;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $7266 = Maybe$none;
                var $7250 = $7266;
                break;
        };
        return $7250;
    };
    const Kind$Term$show$as_nat$go = x0 => Kind$Term$show$as_nat$go$(x0);

    function Kind$Term$show$as_nat$(_term$1) {
        var $7267 = Maybe$mapped$(Kind$Term$show$as_nat$go$(_term$1), Nat$show);
        return $7267;
    };
    const Kind$Term$show$as_nat = x0 => Kind$Term$show$as_nat$(x0);

    function Kind$Term$show$is_ref$(_term$1, _name$2) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.ref':
                var $7269 = self.name;
                var $7270 = (_name$2 === $7269);
                var $7268 = $7270;
                break;
            case 'Kind.Term.var':
            case 'Kind.Term.typ':
            case 'Kind.Term.all':
            case 'Kind.Term.lam':
            case 'Kind.Term.app':
            case 'Kind.Term.let':
            case 'Kind.Term.def':
            case 'Kind.Term.ann':
            case 'Kind.Term.gol':
            case 'Kind.Term.hol':
            case 'Kind.Term.nat':
            case 'Kind.Term.chr':
            case 'Kind.Term.str':
            case 'Kind.Term.cse':
            case 'Kind.Term.ori':
                var $7271 = Bool$false;
                var $7268 = $7271;
                break;
        };
        return $7268;
    };
    const Kind$Term$show$is_ref = x0 => x1 => Kind$Term$show$is_ref$(x0, x1);

    function Kind$Term$show$app$done$(_term$1, _path$2, _args$3) {
        var _arity$4 = (list_length(_args$3));
        var self = (Kind$Term$show$is_ref$(_term$1, "Equal") && (_arity$4 === 3n));
        if (self) {
            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);
            var _eq_lft$6 = Maybe$default$(List$at$(1n, _args$3), "?");
            var _eq_rgt$7 = Maybe$default$(List$at$(2n, _args$3), "?");
            var $7273 = String$flatten$(List$cons$(_eq_lft$6, List$cons$(" == ", List$cons$(_eq_rgt$7, List$nil))));
            var $7272 = $7273;
        } else {
            var _func$5 = Kind$Term$show$go$(_term$1, _path$2);
            var self = _func$5;
            if (self.length === 0) {
                var $7275 = Bool$false;
                var _wrap$6 = $7275;
            } else {
                var $7276 = self.charCodeAt(0);
                var $7277 = self.slice(1);
                var $7278 = ($7276 === 40);
                var _wrap$6 = $7278;
            };
            var _args$7 = String$join$(",", _args$3);
            var self = _wrap$6;
            if (self) {
                var $7279 = String$flatten$(List$cons$("(", List$cons$(_func$5, List$cons$(")", List$nil))));
                var _func$8 = $7279;
            } else {
                var $7280 = _func$5;
                var _func$8 = $7280;
            };
            var $7274 = String$flatten$(List$cons$(_func$8, List$cons$("(", List$cons$(_args$7, List$cons$(")", List$nil)))));
            var $7272 = $7274;
        };
        return $7272;
    };
    const Kind$Term$show$app$done = x0 => x1 => x2 => Kind$Term$show$app$done$(x0, x1, x2);

    function Kind$Term$show$app$(_term$1, _path$2, _args$3) {
        var Kind$Term$show$app$ = (_term$1, _path$2, _args$3) => ({
            ctr: 'TCO',
            arg: [_term$1, _path$2, _args$3]
        });
        var Kind$Term$show$app = _term$1 => _path$2 => _args$3 => Kind$Term$show$app$(_term$1, _path$2, _args$3);
        var arg = [_term$1, _path$2, _args$3];
        while (true) {
            let [_term$1, _path$2, _args$3] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.app':
                        var $7281 = self.func;
                        var $7282 = self.argm;
                        var $7283 = Kind$Term$show$app$($7281, Kind$MPath$o$(_path$2), List$cons$(Kind$Term$show$go$($7282, Kind$MPath$i$(_path$2)), _args$3));
                        return $7283;
                    case 'Kind.Term.ori':
                        var $7284 = self.expr;
                        var $7285 = Kind$Term$show$app$($7284, _path$2, _args$3);
                        return $7285;
                    case 'Kind.Term.var':
                    case 'Kind.Term.ref':
                    case 'Kind.Term.typ':
                    case 'Kind.Term.all':
                    case 'Kind.Term.lam':
                    case 'Kind.Term.let':
                    case 'Kind.Term.def':
                    case 'Kind.Term.ann':
                    case 'Kind.Term.gol':
                    case 'Kind.Term.hol':
                    case 'Kind.Term.nat':
                    case 'Kind.Term.chr':
                    case 'Kind.Term.str':
                    case 'Kind.Term.cse':
                        var $7286 = Kind$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $7286;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Kind$Term$show$app = x0 => x1 => x2 => Kind$Term$show$app$(x0, x1, x2);

    function BitsMap$to_list$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'BitsMap.tie':
                var $7288 = self.val;
                var $7289 = self.lft;
                var $7290 = self.rgt;
                var self = $7288;
                switch (self._) {
                    case 'Maybe.some':
                        var $7292 = self.value;
                        var $7293 = List$cons$(Pair$new$(Bits$reverse$(_key$3), $7292), _list$4);
                        var _list0$8 = $7293;
                        break;
                    case 'Maybe.none':
                        var $7294 = _list$4;
                        var _list0$8 = $7294;
                        break;
                };
                var _list1$9 = BitsMap$to_list$go$($7289, (_key$3 + '0'), _list0$8);
                var _list2$10 = BitsMap$to_list$go$($7290, (_key$3 + '1'), _list1$9);
                var $7291 = _list2$10;
                var $7287 = $7291;
                break;
            case 'BitsMap.new':
                var $7295 = _list$4;
                var $7287 = $7295;
                break;
        };
        return $7287;
    };
    const BitsMap$to_list$go = x0 => x1 => x2 => BitsMap$to_list$go$(x0, x1, x2);

    function BitsMap$to_list$(_xs$2) {
        var $7296 = List$reverse$(BitsMap$to_list$go$(_xs$2, Bits$e, List$nil));
        return $7296;
    };
    const BitsMap$to_list = x0 => BitsMap$to_list$(x0);

    function Kind$Term$show$go$(_term$1, _path$2) {
        var self = Kind$Term$show$as_nat$(_term$1);
        switch (self._) {
            case 'Maybe.some':
                var $7298 = self.value;
                var $7299 = $7298;
                var $7297 = $7299;
                break;
            case 'Maybe.none':
                var self = _term$1;
                switch (self._) {
                    case 'Kind.Term.var':
                        var $7301 = self.name;
                        var $7302 = Kind$Name$show$($7301);
                        var $7300 = $7302;
                        break;
                    case 'Kind.Term.ref':
                        var $7303 = self.name;
                        var _name$4 = Kind$Name$show$($7303);
                        var self = _path$2;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7305 = self.value;
                                var _path_val$6 = ((Bits$e + '1') + Kind$Path$to_bits$($7305));
                                var _path_str$7 = Nat$show$(Bits$to_nat$(_path_val$6));
                                var $7306 = String$flatten$(List$cons$(_name$4, List$cons$(Kind$Code$color$("2", ("-" + _path_str$7)), List$nil)));
                                var $7304 = $7306;
                                break;
                            case 'Maybe.none':
                                var $7307 = _name$4;
                                var $7304 = $7307;
                                break;
                        };
                        var $7300 = $7304;
                        break;
                    case 'Kind.Term.all':
                        var $7308 = self.eras;
                        var $7309 = self.self;
                        var $7310 = self.name;
                        var $7311 = self.xtyp;
                        var $7312 = self.body;
                        var _eras$8 = $7308;
                        var _self$9 = Kind$Name$show$($7309);
                        var _name$10 = Kind$Name$show$($7310);
                        var _type$11 = Kind$Term$show$go$($7311, Kind$MPath$o$(_path$2));
                        var self = _eras$8;
                        if (self) {
                            var $7314 = "<";
                            var _open$12 = $7314;
                        } else {
                            var $7315 = "(";
                            var _open$12 = $7315;
                        };
                        var self = _eras$8;
                        if (self) {
                            var $7316 = ">";
                            var _clos$13 = $7316;
                        } else {
                            var $7317 = ")";
                            var _clos$13 = $7317;
                        };
                        var _body$14 = Kind$Term$show$go$($7312(Kind$Term$var$($7309, 0n))(Kind$Term$var$($7310, 0n)), Kind$MPath$i$(_path$2));
                        var $7313 = String$flatten$(List$cons$(_self$9, List$cons$(_open$12, List$cons$(_name$10, List$cons$(":", List$cons$(_type$11, List$cons$(_clos$13, List$cons$(" ", List$cons$(_body$14, List$nil)))))))));
                        var $7300 = $7313;
                        break;
                    case 'Kind.Term.lam':
                        var $7318 = self.name;
                        var $7319 = self.body;
                        var _name$5 = Kind$Name$show$($7318);
                        var _body$6 = Kind$Term$show$go$($7319(Kind$Term$var$($7318, 0n)), Kind$MPath$o$(_path$2));
                        var $7320 = String$flatten$(List$cons$("(", List$cons$(_name$5, List$cons$(") ", List$cons$(_body$6, List$nil)))));
                        var $7300 = $7320;
                        break;
                    case 'Kind.Term.let':
                        var $7321 = self.name;
                        var $7322 = self.expr;
                        var $7323 = self.body;
                        var _name$6 = Kind$Name$show$($7321);
                        var _expr$7 = Kind$Term$show$go$($7322, Kind$MPath$o$(_path$2));
                        var _body$8 = Kind$Term$show$go$($7323(Kind$Term$var$($7321, 0n)), Kind$MPath$i$(_path$2));
                        var $7324 = String$flatten$(List$cons$("let ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $7300 = $7324;
                        break;
                    case 'Kind.Term.def':
                        var $7325 = self.name;
                        var $7326 = self.expr;
                        var $7327 = self.body;
                        var _name$6 = Kind$Name$show$($7325);
                        var _expr$7 = Kind$Term$show$go$($7326, Kind$MPath$o$(_path$2));
                        var _body$8 = Kind$Term$show$go$($7327(Kind$Term$var$($7325, 0n)), Kind$MPath$i$(_path$2));
                        var $7328 = String$flatten$(List$cons$("def ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $7300 = $7328;
                        break;
                    case 'Kind.Term.ann':
                        var $7329 = self.term;
                        var $7330 = self.type;
                        var _term$6 = Kind$Term$show$go$($7329, Kind$MPath$o$(_path$2));
                        var _type$7 = Kind$Term$show$go$($7330, Kind$MPath$i$(_path$2));
                        var $7331 = String$flatten$(List$cons$(_term$6, List$cons$("::", List$cons$(_type$7, List$nil))));
                        var $7300 = $7331;
                        break;
                    case 'Kind.Term.gol':
                        var $7332 = self.name;
                        var _name$6 = Kind$Name$show$($7332);
                        var $7333 = String$flatten$(List$cons$("?", List$cons$(_name$6, List$nil)));
                        var $7300 = $7333;
                        break;
                    case 'Kind.Term.nat':
                        var $7334 = self.natx;
                        var $7335 = String$flatten$(List$cons$(Nat$show$($7334), List$nil));
                        var $7300 = $7335;
                        break;
                    case 'Kind.Term.chr':
                        var $7336 = self.chrx;
                        var $7337 = String$flatten$(List$cons$("\'", List$cons$(Kind$Code$escape$char$($7336), List$cons$("\'", List$nil))));
                        var $7300 = $7337;
                        break;
                    case 'Kind.Term.str':
                        var $7338 = self.strx;
                        var $7339 = String$flatten$(List$cons$("\"", List$cons$(Kind$Code$escape$($7338), List$cons$("\"", List$nil))));
                        var $7300 = $7339;
                        break;
                    case 'Kind.Term.cse':
                        var $7340 = self.expr;
                        var $7341 = self.name;
                        var $7342 = self.with;
                        var $7343 = self.cses;
                        var $7344 = self.moti;
                        var _expr$9 = Kind$Term$show$go$($7340, Kind$MPath$o$(_path$2));
                        var _name$10 = Kind$Name$show$($7341);
                        var _wyth$11 = String$join$("; ", List$mapped$($7342, (_with_var$11 => {
                            var self = _with_var$11;
                            switch (self._) {
                                case 'Kind.Ann.new':
                                    var $7347 = self.name;
                                    var $7348 = self.type;
                                    var self = $7348;
                                    switch (self._) {
                                        case 'Maybe.some':
                                            var $7350 = self.value;
                                            var $7351 = ($7347 + (": " + Kind$Term$show$go$($7350, Maybe$none)));
                                            var $7349 = $7351;
                                            break;
                                        case 'Maybe.none':
                                            var $7352 = $7347;
                                            var $7349 = $7352;
                                            break;
                                    };
                                    var $7346 = $7349;
                                    break;
                            };
                            return $7346;
                        })));
                        var _cses$12 = BitsMap$to_list$($7343);
                        var _cses$13 = String$join$("", List$mapped$(_cses$12, (_x$13 => {
                            var _name$14 = Kind$Name$from_bits$(Pair$fst$(_x$13));
                            var _term$15 = Kind$Term$show$go$(Pair$snd$(_x$13), Maybe$none);
                            var $7353 = String$flatten$(List$cons$(_name$14, List$cons$(": ", List$cons$(_term$15, List$cons$("; ", List$nil)))));
                            return $7353;
                        })));
                        var self = $7344;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7354 = self.value;
                                var $7355 = String$flatten$(List$cons$(": ", List$cons$(Kind$Term$show$go$($7354, Maybe$none), List$nil)));
                                var _moti$14 = $7355;
                                break;
                            case 'Maybe.none':
                                var $7356 = "";
                                var _moti$14 = $7356;
                                break;
                        };
                        var $7345 = String$flatten$(List$cons$("case ", List$cons$(_expr$9, List$cons$(" as ", List$cons$(_name$10, List$cons$(_wyth$11, List$cons$(" { ", List$cons$(_cses$13, List$cons$("}", List$cons$(_moti$14, List$nil))))))))));
                        var $7300 = $7345;
                        break;
                    case 'Kind.Term.ori':
                        var $7357 = self.expr;
                        var $7358 = Kind$Term$show$go$($7357, _path$2);
                        var $7300 = $7358;
                        break;
                    case 'Kind.Term.typ':
                        var $7359 = "Type";
                        var $7300 = $7359;
                        break;
                    case 'Kind.Term.app':
                        var $7360 = Kind$Term$show$app$(_term$1, _path$2, List$nil);
                        var $7300 = $7360;
                        break;
                    case 'Kind.Term.hol':
                        var $7361 = "_";
                        var $7300 = $7361;
                        break;
                };
                var $7297 = $7300;
                break;
        };
        return $7297;
    };
    const Kind$Term$show$go = x0 => x1 => Kind$Term$show$go$(x0, x1);

    function Kind$Term$show$(_term$1) {
        var $7362 = Kind$Term$show$go$(_term$1, Maybe$none);
        return $7362;
    };
    const Kind$Term$show = x0 => Kind$Term$show$(x0);

    function Kind$Defs$report$types$(_defs$1, _names$2) {
        var _types$3 = "";
        var _types$4 = (() => {
            var $7365 = _types$3;
            var $7366 = _names$2;
            let _types$5 = $7365;
            let _name$4;
            while ($7366._ === 'List.cons') {
                _name$4 = $7366.head;
                var self = Kind$Map$get$(_name$4, _defs$1);
                switch (self._) {
                    case 'Maybe.some':
                        var $7367 = self.value;
                        var self = $7367;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7369 = self.type;
                                var $7370 = (_types$5 + (_name$4 + (": " + (Kind$Term$show$($7369) + "\u{a}"))));
                                var $7368 = $7370;
                                break;
                        };
                        var $7365 = $7368;
                        break;
                    case 'Maybe.none':
                        var $7371 = _types$5;
                        var $7365 = $7371;
                        break;
                };
                _types$5 = $7365;
                $7366 = $7366.tail;
            }
            return _types$5;
        })();
        var $7363 = _types$4;
        return $7363;
    };
    const Kind$Defs$report$types = x0 => x1 => Kind$Defs$report$types$(x0, x1);

    function List$filter$(_f$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.cons':
                var $7373 = self.head;
                var $7374 = self.tail;
                var self = _f$2($7373);
                if (self) {
                    var $7376 = List$cons$($7373, List$filter$(_f$2, $7374));
                    var $7375 = $7376;
                } else {
                    var $7377 = List$filter$(_f$2, $7374);
                    var $7375 = $7377;
                };
                var $7372 = $7375;
                break;
            case 'List.nil':
                var $7378 = List$nil;
                var $7372 = $7378;
                break;
        };
        return $7372;
    };
    const List$filter = x0 => x1 => List$filter$(x0, x1);

    function Kind$Error$is_undef$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.cant_infer':
                var $7380 = Bool$false;
                var $7379 = $7380;
                break;
            case 'Kind.Error.undefined_reference':
                var $7381 = Bool$true;
                var $7379 = $7381;
                break;
        };
        return $7379;
    };
    const Kind$Error$is_undef = x0 => Kind$Error$is_undef$(x0);

    function Kind$Error$is_mistake$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.cant_infer':
                var $7383 = Bool$true;
                var $7382 = $7383;
                break;
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.undefined_reference':
                var $7384 = Bool$false;
                var $7382 = $7384;
                break;
        };
        return $7382;
    };
    const Kind$Error$is_mistake = x0 => Kind$Error$is_mistake$(x0);

    function Kind$Error$is_goal$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
            case 'Kind.Error.undefined_reference':
            case 'Kind.Error.cant_infer':
                var $7386 = Bool$false;
                var $7385 = $7386;
                break;
            case 'Kind.Error.show_goal':
                var $7387 = Bool$true;
                var $7385 = $7387;
                break;
        };
        return $7385;
    };
    const Kind$Error$is_goal = x0 => Kind$Error$is_goal$(x0);

    function Kind$Error$relevant$(_errors$1) {
        var _undefs$2 = List$filter$(Kind$Error$is_undef, _errors$1);
        var _mistakes$3 = List$filter$(Kind$Error$is_mistake, _errors$1);
        var _goals$4 = List$filter$(Kind$Error$is_goal, _errors$1);
        var self = _undefs$2;
        switch (self._) {
            case 'List.nil':
                var self = _mistakes$3;
                switch (self._) {
                    case 'List.cons':
                        var $7390 = self.head;
                        var $7391 = List$concat$(List$cons$($7390, List$nil), _goals$4);
                        var $7389 = $7391;
                        break;
                    case 'List.nil':
                        var $7392 = _goals$4;
                        var $7389 = $7392;
                        break;
                };
                var $7388 = $7389;
                break;
            case 'List.cons':
                var $7393 = List$concat$(_undefs$2, _goals$4);
                var $7388 = $7393;
                break;
        };
        return $7388;
    };
    const Kind$Error$relevant = x0 => Kind$Error$relevant$(x0);

    function Map$(_V$1) {
        var $7394 = null;
        return $7394;
    };
    const Map = x0 => Map$(x0);

    function String$to_bits$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $7396 = Bits$e;
            var $7395 = $7396;
        } else {
            var $7397 = self.charCodeAt(0);
            var $7398 = self.slice(1);
            var $7399 = (String$to_bits$($7398) + (u16_to_bits($7397)));
            var $7395 = $7399;
        };
        return $7395;
    };
    const String$to_bits = x0 => String$to_bits$(x0);

    function Map$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.cons':
                var $7401 = self.head;
                var $7402 = self.tail;
                var self = $7401;
                switch (self._) {
                    case 'Pair.new':
                        var $7404 = self.fst;
                        var $7405 = self.snd;
                        var $7406 = BitsMap$set$(String$to_bits$($7404), $7405, Map$from_list$($7402));
                        var $7403 = $7406;
                        break;
                };
                var $7400 = $7403;
                break;
            case 'List.nil':
                var $7407 = BitsMap$new;
                var $7400 = $7407;
                break;
        };
        return $7400;
    };
    const Map$from_list = x0 => Map$from_list$(x0);

    function Kind$Context$show$(_context$1) {
        var self = _context$1;
        switch (self._) {
            case 'List.cons':
                var $7409 = self.head;
                var $7410 = self.tail;
                var self = $7409;
                switch (self._) {
                    case 'Pair.new':
                        var $7412 = self.fst;
                        var $7413 = self.snd;
                        var _name$6 = Kind$Name$show$($7412);
                        var _type$7 = Kind$Term$show$(Kind$Term$normalize$($7413, Kind$Map$new));
                        var _rest$8 = Kind$Context$show$($7410);
                        var $7414 = (_rest$8 + ("- " + (_name$6 + (": " + (_type$7 + "\u{a}")))));
                        var $7411 = $7414;
                        break;
                };
                var $7408 = $7411;
                break;
            case 'List.nil':
                var $7415 = "";
                var $7408 = $7415;
                break;
        };
        return $7408;
    };
    const Kind$Context$show = x0 => Kind$Context$show$(x0);

    function Kind$Term$expand_at$(_path$1, _term$2, _defs$3) {
        var $7416 = Kind$Term$patch_at$(_path$1, _term$2, (_term$4 => {
            var self = _term$4;
            switch (self._) {
                case 'Kind.Term.ref':
                    var $7418 = self.name;
                    var self = Kind$Map$get$($7418, _defs$3);
                    switch (self._) {
                        case 'Maybe.some':
                            var $7420 = self.value;
                            var self = $7420;
                            switch (self._) {
                                case 'Kind.Def.new':
                                    var $7422 = self.term;
                                    var $7423 = $7422;
                                    var $7421 = $7423;
                                    break;
                            };
                            var $7419 = $7421;
                            break;
                        case 'Maybe.none':
                            var $7424 = Kind$Term$ref$($7418);
                            var $7419 = $7424;
                            break;
                    };
                    var $7417 = $7419;
                    break;
                case 'Kind.Term.var':
                case 'Kind.Term.typ':
                case 'Kind.Term.all':
                case 'Kind.Term.lam':
                case 'Kind.Term.app':
                case 'Kind.Term.let':
                case 'Kind.Term.def':
                case 'Kind.Term.ann':
                case 'Kind.Term.gol':
                case 'Kind.Term.hol':
                case 'Kind.Term.nat':
                case 'Kind.Term.chr':
                case 'Kind.Term.str':
                case 'Kind.Term.cse':
                case 'Kind.Term.ori':
                    var $7425 = _term$4;
                    var $7417 = $7425;
                    break;
            };
            return $7417;
        }));
        return $7416;
    };
    const Kind$Term$expand_at = x0 => x1 => x2 => Kind$Term$expand_at$(x0, x1, x2);

    function Kind$Term$expand_ct$(_term$1, _defs$2, _arity$3) {
        var self = _term$1;
        switch (self._) {
            case 'Kind.Term.var':
                var $7427 = self.name;
                var $7428 = self.indx;
                var $7429 = Kind$Term$var$($7427, $7428);
                var $7426 = $7429;
                break;
            case 'Kind.Term.ref':
                var $7430 = self.name;
                var self = Kind$Map$get$($7430, _defs$2);
                switch (self._) {
                    case 'Maybe.some':
                        var $7432 = self.value;
                        var self = $7432;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7434 = self.term;
                                var $7435 = self.isct;
                                var $7436 = self.arit;
                                var self = ($7435 && (_arity$3 > $7436));
                                if (self) {
                                    var $7438 = $7434;
                                    var $7437 = $7438;
                                } else {
                                    var $7439 = Kind$Term$ref$($7430);
                                    var $7437 = $7439;
                                };
                                var $7433 = $7437;
                                break;
                        };
                        var $7431 = $7433;
                        break;
                    case 'Maybe.none':
                        var $7440 = Kind$Term$ref$($7430);
                        var $7431 = $7440;
                        break;
                };
                var $7426 = $7431;
                break;
            case 'Kind.Term.all':
                var $7441 = self.eras;
                var $7442 = self.self;
                var $7443 = self.name;
                var $7444 = self.xtyp;
                var $7445 = self.body;
                var $7446 = Kind$Term$all$($7441, $7442, $7443, Kind$Term$expand_ct$($7444, _defs$2, 0n), (_s$9 => _x$10 => {
                    var $7447 = Kind$Term$expand_ct$($7445(_s$9)(_x$10), _defs$2, 0n);
                    return $7447;
                }));
                var $7426 = $7446;
                break;
            case 'Kind.Term.lam':
                var $7448 = self.name;
                var $7449 = self.body;
                var $7450 = Kind$Term$lam$($7448, (_x$6 => {
                    var $7451 = Kind$Term$expand_ct$($7449(_x$6), _defs$2, 0n);
                    return $7451;
                }));
                var $7426 = $7450;
                break;
            case 'Kind.Term.app':
                var $7452 = self.func;
                var $7453 = self.argm;
                var $7454 = Kind$Term$app$(Kind$Term$expand_ct$($7452, _defs$2, Nat$succ$(_arity$3)), Kind$Term$expand_ct$($7453, _defs$2, 0n));
                var $7426 = $7454;
                break;
            case 'Kind.Term.let':
                var $7455 = self.name;
                var $7456 = self.expr;
                var $7457 = self.body;
                var $7458 = Kind$Term$let$($7455, Kind$Term$expand_ct$($7456, _defs$2, 0n), (_x$7 => {
                    var $7459 = Kind$Term$expand_ct$($7457(_x$7), _defs$2, 0n);
                    return $7459;
                }));
                var $7426 = $7458;
                break;
            case 'Kind.Term.def':
                var $7460 = self.name;
                var $7461 = self.expr;
                var $7462 = self.body;
                var $7463 = Kind$Term$def$($7460, Kind$Term$expand_ct$($7461, _defs$2, 0n), (_x$7 => {
                    var $7464 = Kind$Term$expand_ct$($7462(_x$7), _defs$2, 0n);
                    return $7464;
                }));
                var $7426 = $7463;
                break;
            case 'Kind.Term.ann':
                var $7465 = self.done;
                var $7466 = self.term;
                var $7467 = self.type;
                var $7468 = Kind$Term$ann$($7465, Kind$Term$expand_ct$($7466, _defs$2, 0n), Kind$Term$expand_ct$($7467, _defs$2, 0n));
                var $7426 = $7468;
                break;
            case 'Kind.Term.gol':
                var $7469 = self.name;
                var $7470 = self.dref;
                var $7471 = self.verb;
                var $7472 = Kind$Term$gol$($7469, $7470, $7471);
                var $7426 = $7472;
                break;
            case 'Kind.Term.hol':
                var $7473 = self.path;
                var $7474 = Kind$Term$hol$($7473);
                var $7426 = $7474;
                break;
            case 'Kind.Term.nat':
                var $7475 = self.natx;
                var $7476 = Kind$Term$nat$($7475);
                var $7426 = $7476;
                break;
            case 'Kind.Term.chr':
                var $7477 = self.chrx;
                var $7478 = Kind$Term$chr$($7477);
                var $7426 = $7478;
                break;
            case 'Kind.Term.str':
                var $7479 = self.strx;
                var $7480 = Kind$Term$str$($7479);
                var $7426 = $7480;
                break;
            case 'Kind.Term.ori':
                var $7481 = self.orig;
                var $7482 = self.expr;
                var $7483 = Kind$Term$ori$($7481, $7482);
                var $7426 = $7483;
                break;
            case 'Kind.Term.typ':
                var $7484 = Kind$Term$typ;
                var $7426 = $7484;
                break;
            case 'Kind.Term.cse':
                var $7485 = _term$1;
                var $7426 = $7485;
                break;
        };
        return $7426;
    };
    const Kind$Term$expand_ct = x0 => x1 => x2 => Kind$Term$expand_ct$(x0, x1, x2);

    function Kind$Term$expand$(_dref$1, _term$2, _defs$3) {
        var _term$4 = Kind$Term$normalize$(_term$2, Kind$Map$new);
        var _term$5 = (() => {
            var $7488 = _term$4;
            var $7489 = _dref$1;
            let _term$6 = $7488;
            let _path$5;
            while ($7489._ === 'List.cons') {
                _path$5 = $7489.head;
                var _term$7 = Kind$Term$expand_at$(_path$5, _term$6, _defs$3);
                var _term$8 = Kind$Term$normalize$(_term$7, Kind$Map$new);
                var _term$9 = Kind$Term$expand_ct$(_term$8, _defs$3, 0n);
                var _term$10 = Kind$Term$normalize$(_term$9, Kind$Map$new);
                var $7488 = _term$10;
                _term$6 = $7488;
                $7489 = $7489.tail;
            }
            return _term$6;
        })();
        var $7486 = _term$5;
        return $7486;
    };
    const Kind$Term$expand = x0 => x1 => x2 => Kind$Term$expand$(x0, x1, x2);

    function Kind$Error$show$(_error$1, _defs$2) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
                var $7491 = self.expected;
                var $7492 = self.detected;
                var $7493 = self.context;
                var self = $7491;
                switch (self._) {
                    case 'Either.left':
                        var $7495 = self.value;
                        var $7496 = $7495;
                        var _expected$7 = $7496;
                        break;
                    case 'Either.right':
                        var $7497 = self.value;
                        var $7498 = Kind$Term$show$(Kind$Term$normalize$($7497, Map$from_list$(List$nil)));
                        var _expected$7 = $7498;
                        break;
                };
                var self = $7492;
                switch (self._) {
                    case 'Either.left':
                        var $7499 = self.value;
                        var $7500 = $7499;
                        var _detected$8 = $7500;
                        break;
                    case 'Either.right':
                        var $7501 = self.value;
                        var $7502 = Kind$Term$show$(Kind$Term$normalize$($7501, Map$from_list$(List$nil)));
                        var _detected$8 = $7502;
                        break;
                };
                var $7494 = ("Type mismatch.\u{a}" + ("- Expected: " + (_expected$7 + ("\u{a}" + ("- Detected: " + (_detected$8 + ("\u{a}" + (() => {
                    var self = $7493;
                    switch (self._) {
                        case 'List.nil':
                            var $7503 = "";
                            return $7503;
                        case 'List.cons':
                            var $7504 = ("With context:\u{a}" + Kind$Context$show$($7493));
                            return $7504;
                    };
                })())))))));
                var $7490 = $7494;
                break;
            case 'Kind.Error.show_goal':
                var $7505 = self.name;
                var $7506 = self.dref;
                var $7507 = self.verb;
                var $7508 = self.goal;
                var $7509 = self.context;
                var _goal_name$8 = ("Goal ?" + (Kind$Name$show$($7505) + ":\u{a}"));
                var self = $7508;
                switch (self._) {
                    case 'Maybe.some':
                        var $7511 = self.value;
                        var _goal$10 = Kind$Term$expand$($7506, $7511, _defs$2);
                        var $7512 = ("With type: " + ((() => {
                            var self = $7507;
                            if (self) {
                                var $7513 = Kind$Term$show$go$(_goal$10, Maybe$some$((_x$11 => {
                                    var $7514 = _x$11;
                                    return $7514;
                                })));
                                return $7513;
                            } else {
                                var $7515 = Kind$Term$show$(_goal$10);
                                return $7515;
                            };
                        })() + "\u{a}"));
                        var _with_type$9 = $7512;
                        break;
                    case 'Maybe.none':
                        var $7516 = "";
                        var _with_type$9 = $7516;
                        break;
                };
                var self = $7509;
                switch (self._) {
                    case 'List.nil':
                        var $7517 = "";
                        var _with_ctxt$10 = $7517;
                        break;
                    case 'List.cons':
                        var $7518 = ("With context:\u{a}" + Kind$Context$show$($7509));
                        var _with_ctxt$10 = $7518;
                        break;
                };
                var $7510 = String$flatten$(List$cons$(_goal_name$8, List$cons$(_with_type$9, List$cons$(_with_ctxt$10, List$nil))));
                var $7490 = $7510;
                break;
            case 'Kind.Error.waiting':
                var $7519 = self.name;
                var $7520 = ("Waiting for \'" + ($7519 + "\'."));
                var $7490 = $7520;
                break;
            case 'Kind.Error.indirect':
                var $7521 = self.name;
                var $7522 = ("Error on dependency \'" + ($7521 + "\'."));
                var $7490 = $7522;
                break;
            case 'Kind.Error.patch':
                var $7523 = self.term;
                var $7524 = ("Patching: " + Kind$Term$show$($7523));
                var $7490 = $7524;
                break;
            case 'Kind.Error.undefined_reference':
                var $7525 = self.name;
                var $7526 = ("Undefined reference: " + (Kind$Name$show$($7525) + "\u{a}"));
                var $7490 = $7526;
                break;
            case 'Kind.Error.cant_infer':
                var $7527 = self.term;
                var $7528 = self.context;
                var _term$6 = Kind$Term$show$($7527);
                var _context$7 = Kind$Context$show$($7528);
                var $7529 = ("Can\'t infer type of: " + (_term$6 + ("\u{a}" + ("With context:\u{a}" + _context$7))));
                var $7490 = $7529;
                break;
        };
        return $7490;
    };
    const Kind$Error$show = x0 => x1 => Kind$Error$show$(x0, x1);

    function Kind$Error$origin$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Kind.Error.type_mismatch':
                var $7531 = self.origin;
                var $7532 = $7531;
                var $7530 = $7532;
                break;
            case 'Kind.Error.undefined_reference':
                var $7533 = self.origin;
                var $7534 = $7533;
                var $7530 = $7534;
                break;
            case 'Kind.Error.cant_infer':
                var $7535 = self.origin;
                var $7536 = $7535;
                var $7530 = $7536;
                break;
            case 'Kind.Error.show_goal':
            case 'Kind.Error.waiting':
            case 'Kind.Error.indirect':
            case 'Kind.Error.patch':
                var $7537 = Maybe$none;
                var $7530 = $7537;
                break;
        };
        return $7530;
    };
    const Kind$Error$origin = x0 => Kind$Error$origin$(x0);

    function Kind$Defs$report$errors$(_defs$1) {
        var _errors$2 = "";
        var _errors$3 = (() => {
            var $7540 = _errors$2;
            var $7541 = BitsMap$keys$(_defs$1);
            let _errors$4 = $7540;
            let _key$3;
            while ($7541._ === 'List.cons') {
                _key$3 = $7541.head;
                var _name$5 = Kind$Name$from_bits$(_key$3);
                var _defn$6 = Kind$Map$get$(_name$5, _defs$1);
                var self = _defn$6;
                switch (self._) {
                    case 'Maybe.some':
                        var $7542 = self.value;
                        var self = $7542;
                        switch (self._) {
                            case 'Kind.Def.new':
                                var $7544 = self.file;
                                var $7545 = self.code;
                                var $7546 = self.name;
                                var $7547 = self.stat;
                                var self = $7547;
                                switch (self._) {
                                    case 'Kind.Status.fail':
                                        var $7549 = self.errors;
                                        var self = $7549;
                                        switch (self._) {
                                            case 'List.nil':
                                                var $7551 = _errors$4;
                                                var $7550 = $7551;
                                                break;
                                            case 'List.cons':
                                                var _name_str$20 = $7546;
                                                var _rel_errs$21 = Kind$Error$relevant$($7549);
                                                var _errors$22 = (() => {
                                                    var $7554 = _errors$4;
                                                    var $7555 = _rel_errs$21;
                                                    let _errors$23 = $7554;
                                                    let _err$22;
                                                    while ($7555._ === 'List.cons') {
                                                        _err$22 = $7555.head;
                                                        var _err_msg$24 = Kind$Error$show$(_err$22, _defs$1);
                                                        var _ori_val$25 = Kind$Error$origin$(_err$22);
                                                        var self = _ori_val$25;
                                                        switch (self._) {
                                                            case 'Maybe.some':
                                                                var $7556 = self.value;
                                                                var self = $7556;
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $7558 = self.fst;
                                                                        var $7559 = self.snd;
                                                                        var _inside$29 = ("Inside \'" + ($7544 + "\':\u{a}"));
                                                                        var _source$30 = Kind$Code$highlight$($7545, $7558, $7559);
                                                                        var $7560 = (_errors$23 + (_err_msg$24 + (_inside$29 + (_source$30 + ("\u{a}" + "\u{a}")))));
                                                                        var $7557 = $7560;
                                                                        break;
                                                                };
                                                                var $7554 = $7557;
                                                                break;
                                                            case 'Maybe.none':
                                                                var $7561 = (_errors$23 + (_err_msg$24 + "\u{a}"));
                                                                var $7554 = $7561;
                                                                break;
                                                        };
                                                        _errors$23 = $7554;
                                                        $7555 = $7555.tail;
                                                    }
                                                    return _errors$23;
                                                })();
                                                var $7552 = _errors$22;
                                                var $7550 = $7552;
                                                break;
                                        };
                                        var $7548 = $7550;
                                        break;
                                    case 'Kind.Status.init':
                                    case 'Kind.Status.wait':
                                    case 'Kind.Status.done':
                                        var $7562 = _errors$4;
                                        var $7548 = $7562;
                                        break;
                                };
                                var $7543 = $7548;
                                break;
                        };
                        var $7540 = $7543;
                        break;
                    case 'Maybe.none':
                        var $7563 = _errors$4;
                        var $7540 = $7563;
                        break;
                };
                _errors$4 = $7540;
                $7541 = $7541.tail;
            }
            return _errors$4;
        })();
        var $7538 = _errors$3;
        return $7538;
    };
    const Kind$Defs$report$errors = x0 => Kind$Defs$report$errors$(x0);

    function Kind$Defs$report$(_defs$1, _names$2) {
        var _types$3 = Kind$Defs$report$types$(_defs$1, _names$2);
        var _errors$4 = Kind$Defs$report$errors$(_defs$1);
        var self = _errors$4;
        if (self.length === 0) {
            var $7565 = "All terms check.";
            var _errors$5 = $7565;
        } else {
            var $7566 = self.charCodeAt(0);
            var $7567 = self.slice(1);
            var $7568 = _errors$4;
            var _errors$5 = $7568;
        };
        var $7564 = (_types$3 + ("\u{a}" + _errors$5));
        return $7564;
    };
    const Kind$Defs$report = x0 => x1 => Kind$Defs$report$(x0, x1);

    function Kind$api$io$check_file$(_file$1) {
        var $7569 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7570 = _m$bind$2;
            return $7570;
        }))(Kind$Synth$file$(_file$1, Kind$Map$new))((_loaded$2 => {
            var self = _loaded$2;
            switch (self._) {
                case 'Either.left':
                    var $7572 = self.value;
                    var $7573 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $7574 = _m$bind$4;
                        return $7574;
                    }))(IO$print$(String$flatten$(List$cons$("On \'", List$cons$(_file$1, List$cons$("\':", List$nil))))))((_$4 => {
                        var $7575 = IO$print$($7572);
                        return $7575;
                    }));
                    var $7571 = $7573;
                    break;
                case 'Either.right':
                    var $7576 = self.value;
                    var self = $7576;
                    switch (self._) {
                        case 'Pair.new':
                            var $7578 = self.fst;
                            var $7579 = self.snd;
                            var _nams$6 = $7578;
                            var _defs$7 = $7579;
                            var self = _nams$6;
                            switch (self._) {
                                case 'List.nil':
                                    var $7581 = IO$print$(("File not found or empty: \'" + (_file$1 + "\'.")));
                                    var $7580 = $7581;
                                    break;
                                case 'List.cons':
                                    var $7582 = IO$print$(Kind$Defs$report$(_defs$7, _nams$6));
                                    var $7580 = $7582;
                                    break;
                            };
                            var $7577 = $7580;
                            break;
                    };
                    var $7571 = $7577;
                    break;
            };
            return $7571;
        }));
        return $7569;
    };
    const Kind$api$io$check_file = x0 => Kind$api$io$check_file$(x0);

    function Kind$Synth$files$go$(_files$1, _defs$2) {
        var self = _files$1;
        switch (self._) {
            case 'List.cons':
                var $7584 = self.head;
                var $7585 = self.tail;
                var $7586 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $7587 = _m$bind$5;
                    return $7587;
                }))(Kind$Synth$file$($7584, _defs$2))((_file_synth$5 => {
                    var self = _file_synth$5;
                    switch (self._) {
                        case 'Either.right':
                            var $7589 = self.value;
                            var _nams$7 = Pair$fst$($7589);
                            var _defs$8 = Pair$snd$($7589);
                            var $7590 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                var $7591 = _m$bind$9;
                                return $7591;
                            }))(Kind$Synth$files$go$($7585, _defs$8))((_rest$9 => {
                                var _nams$10 = List$concat$(_nams$7, Pair$fst$(_rest$9));
                                var _defs$11 = Pair$snd$(_rest$9);
                                var $7592 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                                    var $7593 = _m$pure$13;
                                    return $7593;
                                }))(Pair$new$(_nams$10, _defs$11));
                                return $7592;
                            }));
                            var $7588 = $7590;
                            break;
                        case 'Either.left':
                            var $7594 = Kind$Synth$files$go$($7585, _defs$2);
                            var $7588 = $7594;
                            break;
                    };
                    return $7588;
                }));
                var $7583 = $7586;
                break;
            case 'List.nil':
                var $7595 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $7596 = _m$pure$4;
                    return $7596;
                }))(Pair$new$(List$nil, _defs$2));
                var $7583 = $7595;
                break;
        };
        return $7583;
    };
    const Kind$Synth$files$go = x0 => x1 => Kind$Synth$files$go$(x0, x1);

    function Kind$Synth$remove_duplicate_names$(_names$1) {
        var _map$2 = List$fold$(_names$1, Kind$Map$new, (_name$2 => {
            var $7598 = Kind$Map$set(_name$2)(Unit$new);
            return $7598;
        }));
        var $7597 = List$mapped$(BitsMap$keys$(_map$2), Kind$Name$from_bits);
        return $7597;
    };
    const Kind$Synth$remove_duplicate_names = x0 => Kind$Synth$remove_duplicate_names$(x0);

    function Kind$Synth$files$(_files$1, _defs$2) {
        var $7599 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $7600 = _m$bind$3;
            return $7600;
        }))(Kind$Synth$files$go$(_files$1, _defs$2))((_got$3 => {
            var _nams$4 = Kind$Synth$remove_duplicate_names$(Pair$fst$(_got$3));
            var _defs$5 = Pair$snd$(_got$3);
            var $7601 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                var $7602 = _m$pure$7;
                return $7602;
            }))(Pair$new$(_nams$4, _defs$5));
            return $7601;
        }));
        return $7599;
    };
    const Kind$Synth$files = x0 => x1 => Kind$Synth$files$(x0, x1);

    function Kind$api$io$check_files$(_files$1) {
        var $7603 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7604 = _m$bind$2;
            return $7604;
        }))(Kind$Synth$files$(_files$1, Kind$Map$new))((_loaded$2 => {
            var _nams$3 = Pair$fst$(_loaded$2);
            var _defs$4 = Pair$snd$(_loaded$2);
            var self = _nams$3;
            switch (self._) {
                case 'List.nil':
                    var $7606 = IO$print$("No valid Kind file found.");
                    var $7605 = $7606;
                    break;
                case 'List.cons':
                    var $7607 = IO$print$(Kind$Defs$report$(_defs$4, _nams$3));
                    var $7605 = $7607;
                    break;
            };
            return $7605;
        }));
        return $7603;
    };
    const Kind$api$io$check_files = x0 => Kind$api$io$check_files$(x0);

    function Kind$api$io$check_term$(_name$1) {
        var $7608 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7609 = _m$bind$2;
            return $7609;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.some':
                    var $7611 = self.value;
                    var $7612 = IO$print$(Kind$Defs$report$($7611, List$cons$(_name$1, List$nil)));
                    var $7610 = $7612;
                    break;
                case 'Maybe.none':
                    var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                    var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                        var $7614 = ("\'" + (_x$4 + "\'"));
                        return $7614;
                    }));
                    var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                    var $7613 = IO$print$((_notfound$3 + ("\u{a}" + _searched$5)));
                    var $7610 = $7613;
                    break;
            };
            return $7610;
        }));
        return $7608;
    };
    const Kind$api$io$check_term = x0 => Kind$api$io$check_term$(x0);

    function Kind$api$io$show_term$(_name$1) {
        var $7615 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7616 = _m$bind$2;
            return $7616;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var $7617 = IO$print$((() => {
                var self = _new_defs$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $7618 = self.value;
                        var _defs$4 = $7618;
                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);
                        var self = _defn$5;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7620 = self.value;
                                var self = $7620;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $7622 = self.term;
                                        var _term$16 = $7622;
                                        var $7623 = Kind$Term$show$(_term$16);
                                        var $7621 = $7623;
                                        break;
                                };
                                var $7619 = $7621;
                                break;
                            case 'Maybe.none':
                                var $7624 = ("Term not found: \'" + (_name$1 + "\'."));
                                var $7619 = $7624;
                                break;
                        };
                        return $7619;
                    case 'Maybe.none':
                        var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                            var $7626 = ("\'" + (_x$4 + "\'"));
                            return $7626;
                        }));
                        var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                        var $7625 = (_notfound$3 + ("\u{a}" + _searched$5));
                        return $7625;
                };
            })());
            return $7617;
        }));
        return $7615;
    };
    const Kind$api$io$show_term = x0 => Kind$api$io$show_term$(x0);

    function Kind$api$io$show_term_normal$(_name$1) {
        var $7627 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $7628 = _m$bind$2;
            return $7628;
        }))(Kind$Synth$one$(_name$1, Kind$Map$new))((_new_defs$2 => {
            var $7629 = IO$print$((() => {
                var self = _new_defs$2;
                switch (self._) {
                    case 'Maybe.some':
                        var $7630 = self.value;
                        var _defs$4 = $7630;
                        var _defn$5 = Kind$Map$get$(_name$1, _defs$4);
                        var self = _defn$5;
                        switch (self._) {
                            case 'Maybe.some':
                                var $7632 = self.value;
                                var self = $7632;
                                switch (self._) {
                                    case 'Kind.Def.new':
                                        var $7634 = self.term;
                                        var _term$16 = $7634;
                                        var _norm$17 = Kind$Term$normalize$(_term$16, _defs$4);
                                        var $7635 = Kind$Term$show$(_norm$17);
                                        var $7633 = $7635;
                                        break;
                                };
                                var $7631 = $7633;
                                break;
                            case 'Maybe.none':
                                var $7636 = ("Term not found: \'" + (_name$1 + "\'."));
                                var $7631 = $7636;
                                break;
                        };
                        return $7631;
                    case 'Maybe.none':
                        var _notfound$3 = ("Term not found: \'" + (_name$1 + "\'."));
                        var _filelist$4 = List$mapped$(Kind$Synth$files_of$(_name$1), (_x$4 => {
                            var $7638 = ("\'" + (_x$4 + "\'"));
                            return $7638;
                        }));
                        var _searched$5 = ("Searched on: " + (String$join$(", ", _filelist$4) + "."));
                        var $7637 = (_notfound$3 + ("\u{a}" + _searched$5));
                        return $7637;
                };
            })());
            return $7629;
        }));
        return $7627;
    };
    const Kind$api$io$show_term_normal = x0 => Kind$api$io$show_term_normal$(x0);

    function IO$purify$(_io$2) {
        var IO$purify$ = (_io$2) => ({
            ctr: 'TCO',
            arg: [_io$2]
        });
        var IO$purify = _io$2 => IO$purify$(_io$2);
        var arg = [_io$2];
        while (true) {
            let [_io$2] = arg;
            var R = (() => {
                var self = _io$2;
                switch (self._) {
                    case 'IO.end':
                        var $7639 = self.value;
                        var $7640 = $7639;
                        return $7640;
                    case 'IO.ask':
                        var $7641 = self.then;
                        var $7642 = IO$purify$($7641(""));
                        return $7642;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const IO$purify = x0 => IO$purify$(x0);

    function Kind$api$check_code$(_code$1) {
        var self = Kind$Defs$read$("Main.kind", _code$1, Kind$Map$new);
        switch (self._) {
            case 'Either.left':
                var $7644 = self.value;
                var $7645 = $7644;
                var $7643 = $7645;
                break;
            case 'Either.right':
                var $7646 = self.value;
                var $7647 = IO$purify$((() => {
                    var _defs$3 = $7646;
                    var _nams$4 = List$mapped$(BitsMap$keys$(_defs$3), Kind$Name$from_bits);
                    var $7648 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                        var $7649 = _m$bind$5;
                        return $7649;
                    }))(Kind$Synth$many$(_nams$4, _defs$3))((_defs$5 => {
                        var $7650 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                            var $7651 = _m$pure$7;
                            return $7651;
                        }))(Kind$Defs$report$(_defs$5, _nams$4));
                        return $7650;
                    }));
                    return $7648;
                })());
                var $7643 = $7647;
                break;
        };
        return $7643;
    };
    const Kind$api$check_code = x0 => Kind$api$check_code$(x0);

    function Kind$Term$read$(_code$1) {
        var self = Kind$Parser$term$(0n, _code$1);
        switch (self._) {
            case 'Parser.Reply.value':
                var $7653 = self.val;
                var $7654 = Maybe$some$($7653);
                var $7652 = $7654;
                break;
            case 'Parser.Reply.error':
                var $7655 = Maybe$none;
                var $7652 = $7655;
                break;
        };
        return $7652;
    };
    const Kind$Term$read = x0 => Kind$Term$read$(x0);
    const Kind$api$export = (() => {
        var _e$1 = Kind$api$io$term_to_core;
        var _e$2 = Kind$api$io$check_file;
        var _e$3 = Kind$api$io$check_files;
        var _e$4 = Kind$api$io$check_term;
        var _e$5 = Kind$api$io$show_term;
        var _e$6 = Kind$api$io$show_term_normal;
        var _e$7 = Kind$api$check_code;
        var _e$8 = Kind$Term$read;
        var $7656 = IO$monad$((_m$bind$9 => _m$pure$10 => {
            var $7657 = _m$pure$10;
            return $7657;
        }))(Unit$new);
        return $7656;
    })();
    return {
        '$main$': () => run(Kind$api$export),
        'run': run,
        'IO': IO,
        'IO.ask': IO$ask,
        'IO.bind': IO$bind,
        'IO.end': IO$end,
        'IO.monad': IO$monad,
        'Maybe': Maybe,
        'BitsMap': BitsMap,
        'Maybe.none': Maybe$none,
        'BitsMap.get': BitsMap$get,
        'Bits.e': Bits$e,
        'Bool.false': Bool$false,
        'Bool.and': Bool$and,
        'Bool.true': Bool$true,
        'Cmp.as_lte': Cmp$as_lte,
        'Cmp.ltn': Cmp$ltn,
        'Cmp.gtn': Cmp$gtn,
        'Word.cmp.go': Word$cmp$go,
        'Cmp.eql': Cmp$eql,
        'Word.cmp': Word$cmp,
        'Nat.succ': Nat$succ,
        'Nat.zero': Nat$zero,
        'U16.cmp': U16$cmp,
        'U16.lte': U16$lte,
        'U16.btw': U16$btw,
        'U16.new': U16$new,
        'Word.e': Word$e,
        'Word': Word,
        'Word.i': Word$i,
        'Word.o': Word$o,
        'Word.subber': Word$subber,
        'Word.sub': Word$sub,
        'U16.sub': U16$sub,
        'Nat.apply': Nat$apply,
        'Word.inc': Word$inc,
        'Word.zero': Word$zero,
        'Nat.to_word': Nat$to_word,
        'Nat.to_u16': Nat$to_u16,
        'Word.adder': Word$adder,
        'Word.add': Word$add,
        'U16.add': U16$add,
        'Cmp.as_eql': Cmp$as_eql,
        'U16.eql': U16$eql,
        'Bits.o': Bits$o,
        'Bits.i': Bits$i,
        'Word.to_bits': Word$to_bits,
        'Word.trim': Word$trim,
        'Bits.concat': Bits$concat,
        'Bits.reverse.tco': Bits$reverse$tco,
        'Bits.reverse': Bits$reverse,
        'Kind.Name.to_bits': Kind$Name$to_bits,
        'Kind.Map.get': Kind$Map$get,
        'IO.get_file': IO$get_file,
        'Parser.Reply': Parser$Reply,
        'Parser.Reply.value': Parser$Reply$value,
        'Parser.is_eof': Parser$is_eof,
        'Parser.Reply.error': Parser$Reply$error,
        'Parser': Parser,
        'Maybe.some': Maybe$some,
        'Parser.ErrorAt.new': Parser$ErrorAt$new,
        'Nat.gtn': Nat$gtn,
        'Parser.ErrorAt.combine': Parser$ErrorAt$combine,
        'Parser.first_of.go': Parser$first_of$go,
        'Parser.first_of': Parser$first_of,
        'List.cons': List$cons,
        'List': List,
        'List.nil': List$nil,
        'Parser.many.go': Parser$many$go,
        'Parser.many': Parser$many,
        'Unit.new': Unit$new,
        'String.cons': String$cons,
        'String.concat': String$concat,
        'String.flatten.go': String$flatten$go,
        'String.flatten': String$flatten,
        'String.nil': String$nil,
        'Parser.text.go': Parser$text$go,
        'Parser.text': Parser$text,
        'Parser.eof': Parser$eof,
        'List.reverse.go': List$reverse$go,
        'List.reverse': List$reverse,
        'Parser.until.go': Parser$until$go,
        'Parser.until': Parser$until,
        'Parser.one': Parser$one,
        'Kind.Parser.spaces': Kind$Parser$spaces,
        'Parser.get_index': Parser$get_index,
        'Kind.Parser.init': Kind$Parser$init,
        'Parser.many1': Parser$many1,
        'Kind.Name.is_letter': Kind$Name$is_letter,
        'Kind.Parser.letter': Kind$Parser$letter,
        'List.fold': List$fold,
        'Kind.Parser.name1': Kind$Parser$name1,
        'Kind.Parser.text': Kind$Parser$text,
        'Parser.until1': Parser$until1,
        'Pair': Pair,
        'Parser.maybe': Parser$maybe,
        'Kind.Parser.item': Kind$Parser$item,
        'Kind.Parser.name': Kind$Parser$name,
        'Kind.Term.all': Kind$Term$all,
        'Pair.new': Pair$new,
        'Kind.Parser.stop': Kind$Parser$stop,
        'Kind.Term.ori': Kind$Term$ori,
        'Kind.Parser.forall': Kind$Parser$forall,
        'Kind.Term.lam': Kind$Term$lam,
        'Kind.Parser.make_lambda': Kind$Parser$make_lambda,
        'Kind.Parser.lambda': Kind$Parser$lambda,
        'Kind.Parser.lambda.erased': Kind$Parser$lambda$erased,
        'Kind.Parser.lambda.nameless': Kind$Parser$lambda$nameless,
        'Kind.Parser.parenthesis': Kind$Parser$parenthesis,
        'Kind.Term.ref': Kind$Term$ref,
        'Kind.Term.app': Kind$Term$app,
        'Kind.Term.hol': Kind$Term$hol,
        'Kind.Term.let': Kind$Term$let,
        'Kind.Parser.letforrange.u32': Kind$Parser$letforrange$u32,
        'Kind.Parser.letforrange.u32.with': Kind$Parser$letforrange$u32$with,
        'Kind.Parser.letforrange.nat': Kind$Parser$letforrange$nat,
        'Kind.Parser.letforrange.nat.with': Kind$Parser$letforrange$nat$with,
        'Kind.Parser.letforin': Kind$Parser$letforin,
        'Kind.Parser.letforin.with': Kind$Parser$letforin$with,
        'Kind.Parser.letwhile': Kind$Parser$letwhile,
        'Kind.Parser.letwhile.with': Kind$Parser$letwhile$with,
        'Kind.Parser.let': Kind$Parser$let,
        'Kind.Parser.let.omit': Kind$Parser$let$omit,
        'Kind.Parser.getwhile': Kind$Parser$getwhile,
        'Kind.Parser.getwhile.with': Kind$Parser$getwhile$with,
        'Kind.Parser.get': Kind$Parser$get,
        'Kind.Parser.get.omit': Kind$Parser$get$omit,
        'Kind.Term.def': Kind$Term$def,
        'Kind.Parser.def': Kind$Parser$def,
        'Kind.Parser.goal_rewrite': Kind$Parser$goal_rewrite,
        'Kind.Parser.if': Kind$Parser$if,
        'List.mapped': List$mapped,
        'Kind.Code.backslash': Kind$Code$backslash,
        'Kind.Code.escapes': Kind$Code$escapes,
        'Kind.Parser.char.single': Kind$Parser$char$single,
        'Kind.Term.chr': Kind$Term$chr,
        'Kind.Parser.char': Kind$Parser$char,
        'String.reverse.go': String$reverse$go,
        'String.reverse': String$reverse,
        'Kind.Parser.string.go': Kind$Parser$string$go,
        'Kind.Term.str': Kind$Term$str,
        'Kind.Parser.string': Kind$Parser$string,
        'Kind.Parser.pair': Kind$Parser$pair,
        'Kind.Parser.sigma.type': Kind$Parser$sigma$type,
        'Kind.Parser.some': Kind$Parser$some,
        'Kind.Parser.not': Kind$Parser$not,
        'Kind.Parser.left': Kind$Parser$left,
        'Kind.Parser.right': Kind$Parser$right,
        'Kind.Parser.apply': Kind$Parser$apply,
        'Kind.Parser.chain': Kind$Parser$chain,
        'Kind.Parser.mirror': Kind$Parser$mirror,
        'Kind.Name.read': Kind$Name$read,
        'Kind.Parser.list': Kind$Parser$list,
        'Kind.Parser.map': Kind$Parser$map,
        'Kind.Parser.log': Kind$Parser$log,
        'Kind.Parser.do.statements': Kind$Parser$do$statements,
        'Kind.Parser.do': Kind$Parser$do,
        'Parser.try': Parser$try,
        'Parser.fail': Parser$fail,
        'Parser.avoiding': Parser$avoiding,
        'Maybe.default': Maybe$default,
        'Kind.Term.nat': Kind$Term$nat,
        'Kind.Term.unroll_nat': Kind$Term$unroll_nat,
        'U16.to_bits': U16$to_bits,
        'Kind.Term.unroll_chr.bits': Kind$Term$unroll_chr$bits,
        'Kind.Term.unroll_chr': Kind$Term$unroll_chr,
        'Kind.Term.unroll_str': Kind$Term$unroll_str,
        'Kind.Term.reduce': Kind$Term$reduce,
        'BitsMap.new': BitsMap$new,
        'Kind.Map.new': Kind$Map$new,
        'Kind.Term.extract_name': Kind$Term$extract_name,
        'Kind.Ann.new': Kind$Ann$new,
        'Kind.Parser.case.with': Kind$Parser$case$with,
        'Kind.Parser.case.case': Kind$Parser$case$case,
        'Debug.log': Debug$log,
        'Pair.snd': Pair$snd,
        'Kind.Map': Kind$Map,
        'BitsMap.tie': BitsMap$tie,
        'BitsMap.set': BitsMap$set,
        'Kind.Map.set': Kind$Map$set,
        'Kind.Parser.case.group': Kind$Parser$case$group,
        'Pair.fst': Pair$fst,
        'BitsMap.map': BitsMap$map,
        'Kind.Map.map': Kind$Map$map,
        'Kind.Term.cse': Kind$Term$cse,
        'Kind.Parser.case.build': Kind$Parser$case$build,
        'Kind.Parser.case': Kind$Parser$case,
        'Kind.Parser.open': Kind$Parser$open,
        'Kind.Parser.without': Kind$Parser$without,
        'Kind.Parser.switch.case': Kind$Parser$switch$case,
        'Kind.Parser.switch': Kind$Parser$switch,
        'Parser.digit': Parser$digit,
        'Nat.add': Nat$add,
        'Nat.mul': Nat$mul,
        'Nat.from_base.go': Nat$from_base$go,
        'Nat.from_base': Nat$from_base,
        'Parser.nat': Parser$nat,
        'Bits.tail': Bits$tail,
        'Bits.inc': Bits$inc,
        'Nat.to_bits': Nat$to_bits,
        'Maybe.is_some': Maybe$is_some,
        'Kind.Term.gol': Kind$Term$gol,
        'Kind.Parser.goal': Kind$Parser$goal,
        'Kind.Parser.hole': Kind$Parser$hole,
        'List.any': List$any,
        'Kind.Parser.float.str_digit': Kind$Parser$float$str_digit,
        'String.from_list': String$from_list,
        'Kind.Parser.float.64': Kind$Parser$float$64,
        'Kind.Parser.float.32': Kind$Parser$float$32,
        'Either': Either,
        'Either.left': Either$left,
        'Either.right': Either$right,
        'Nat.sub_rem': Nat$sub_rem,
        'Nat.div_mod.go': Nat$div_mod$go,
        'Nat.div_mod': Nat$div_mod,
        'Nat.to_base.go': Nat$to_base$go,
        'Nat.to_base': Nat$to_base,
        'Nat.mod.go': Nat$mod$go,
        'Nat.mod': Nat$mod,
        'Nat.lte': Nat$lte,
        'List.at': List$at,
        'Nat.show_digit': Nat$show_digit,
        'Nat.to_string_base': Nat$to_string_base,
        'Nat.show': Nat$show,
        'Kind.Parser.int_pos': Kind$Parser$int_pos,
        'Kind.Parser.int_neg': Kind$Parser$int_neg,
        'Kind.Parser.int': Kind$Parser$int,
        'Kind.Parser.machine_integer.signed': Kind$Parser$machine_integer$signed,
        'Parser.hex_digit': Parser$hex_digit,
        'Parser.hex_nat': Parser$hex_nat,
        'Kind.Parser.nat': Kind$Parser$nat,
        'Kind.Parser.machine_integer.unsigned': Kind$Parser$machine_integer$unsigned,
        'Kind.Parser.u64': Kind$Parser$u64,
        'Kind.Parser.u32': Kind$Parser$u32,
        'Kind.Parser.u16': Kind$Parser$u16,
        'Kind.Parser.u8': Kind$Parser$u8,
        'String.eql': String$eql,
        'Kind.Term.typ': Kind$Term$typ,
        'Kind.Parser.reference': Kind$Parser$reference,
        'List.for': List$for,
        'Kind.Parser.application': Kind$Parser$application,
        'Parser.spaces': Parser$spaces,
        'Parser.spaces_text': Parser$spaces_text,
        'Kind.Parser.application.erased': Kind$Parser$application$erased,
        'Kind.Parser.list_set': Kind$Parser$list_set,
        'Kind.Parser.list_get': Kind$Parser$list_get,
        'Kind.Parser.map_set': Kind$Parser$map_set,
        'Kind.Parser.map_get': Kind$Parser$map_get,
        'Kind.Parser.arrow': Kind$Parser$arrow,
        'Kind.Parser.op': Kind$Parser$op,
        'Kind.Parser.add': Kind$Parser$add,
        'Kind.Parser.sub': Kind$Parser$sub,
        'Kind.Parser.mul': Kind$Parser$mul,
        'Kind.Parser.div': Kind$Parser$div,
        'Kind.Parser.mod': Kind$Parser$mod,
        'Kind.Parser.ltn': Kind$Parser$ltn,
        'Kind.Parser.lte': Kind$Parser$lte,
        'Kind.Parser.eql': Kind$Parser$eql,
        'Kind.Parser.gte': Kind$Parser$gte,
        'Kind.Parser.gtn': Kind$Parser$gtn,
        'Kind.Parser.and': Kind$Parser$and,
        'Kind.Parser.or': Kind$Parser$or,
        'Kind.Parser.default': Kind$Parser$default,
        'Kind.Parser.cons': Kind$Parser$cons,
        'Kind.Parser.concat': Kind$Parser$concat,
        'Kind.Parser.string_concat': Kind$Parser$string_concat,
        'Kind.Parser.sigma': Kind$Parser$sigma,
        'Kind.Parser.equality': Kind$Parser$equality,
        'Kind.Parser.inequality': Kind$Parser$inequality,
        'Kind.Parser.rewrite': Kind$Parser$rewrite,
        'Kind.Term.ann': Kind$Term$ann,
        'Kind.Parser.annotation': Kind$Parser$annotation,
        'Kind.Parser.application.hole': Kind$Parser$application$hole,
        'Kind.Parser.suffix': Kind$Parser$suffix,
        'Kind.Parser.term': Kind$Parser$term,
        'Kind.Parser.name_term': Kind$Parser$name_term,
        'Kind.Binder.new': Kind$Binder$new,
        'Kind.Parser.binder.homo': Kind$Parser$binder$homo,
        'List.concat': List$concat,
        'List.flatten': List$flatten,
        'Kind.Parser.binder': Kind$Parser$binder,
        'List.length': List$length,
        'Kind.Parser.make_forall': Kind$Parser$make_forall,
        'List.at_last': List$at_last,
        'Kind.Term.var': Kind$Term$var,
        'Kind.Context.get_name_skips': Kind$Context$get_name_skips,
        'Kind.Name.eql': Kind$Name$eql,
        'Kind.Context.find.go': Kind$Context$find$go,
        'Kind.Context.find': Kind$Context$find,
        'Kind.Path.o': Kind$Path$o,
        'Kind.Path.i': Kind$Path$i,
        'Kind.Path.to_bits': Kind$Path$to_bits,
        'Kind.Term.bind': Kind$Term$bind,
        'Kind.Status.done': Kind$Status$done,
        'Kind.Status.init': Kind$Status$init,
        'Kind.Def.new': Kind$Def$new,
        'Kind.Map.def': Kind$Map$def,
        'Kind.Parser.file.def': Kind$Parser$file$def,
        'Kind.Constructor.new': Kind$Constructor$new,
        'Kind.Parser.constructor': Kind$Parser$constructor,
        'Kind.Datatype.new': Kind$Datatype$new,
        'Kind.Parser.datatype': Kind$Parser$datatype,
        'Kind.Datatype.build_term.motive.go': Kind$Datatype$build_term$motive$go,
        'Kind.Datatype.build_term.motive': Kind$Datatype$build_term$motive,
        'Kind.Datatype.build_term.constructor.go': Kind$Datatype$build_term$constructor$go,
        'Kind.Datatype.build_term.constructor': Kind$Datatype$build_term$constructor,
        'Kind.Datatype.build_term.constructors.go': Kind$Datatype$build_term$constructors$go,
        'Kind.Datatype.build_term.constructors': Kind$Datatype$build_term$constructors,
        'Kind.Datatype.build_term.go': Kind$Datatype$build_term$go,
        'Kind.Datatype.build_term': Kind$Datatype$build_term,
        'Kind.Datatype.build_type.go': Kind$Datatype$build_type$go,
        'Kind.Datatype.build_type': Kind$Datatype$build_type,
        'Kind.Constructor.build_term.opt.go': Kind$Constructor$build_term$opt$go,
        'Kind.Constructor.build_term.opt': Kind$Constructor$build_term$opt,
        'Kind.Constructor.build_term.go': Kind$Constructor$build_term$go,
        'Kind.Constructor.build_term': Kind$Constructor$build_term,
        'Kind.Constructor.build_type.go': Kind$Constructor$build_type$go,
        'Kind.Constructor.build_type': Kind$Constructor$build_type,
        'Kind.Parser.file.adt': Kind$Parser$file$adt,
        'Kind.Parser.file.end': Kind$Parser$file$end,
        'Kind.Parser.file': Kind$Parser$file,
        'String.join.go': String$join$go,
        'String.join': String$join,
        'Kind.Code.highlight.end': Kind$Code$highlight$end,
        'Maybe.extract': Maybe$extract,
        'Nat.is_zero': Nat$is_zero,
        'Nat.double': Nat$double,
        'Nat.pred': Nat$pred,
        'String.pad_right': String$pad_right,
        'String.pad_left': String$pad_left,
        'Bool.not': Bool$not,
        'Kind.Code.color': Kind$Code$color,
        'Nat.eql': Nat$eql,
        'List.take': List$take,
        'Kind.Code.highlight.go': Kind$Code$highlight$go,
        'Kind.Code.highlight': Kind$Code$highlight,
        'Kind.Defs.read': Kind$Defs$read,
        'Kind.Synth.load.go': Kind$Synth$load$go,
        'Kind.Synth.files_of.make': Kind$Synth$files_of$make,
        'Char.eql': Char$eql,
        'String.starts_with': String$starts_with,
        'String.drop': String$drop,
        'String.length.go': String$length$go,
        'String.length': String$length,
        'String.split.go': String$split$go,
        'String.split': String$split,
        'Kind.Synth.files_of': Kind$Synth$files_of,
        'Kind.Synth.load': Kind$Synth$load,
        'Kind.Status.wait': Kind$Status$wait,
        'Kind.Check': Kind$Check,
        'Kind.Check.result': Kind$Check$result,
        'Kind.Error.undefined_reference': Kind$Error$undefined_reference,
        'Kind.Error.waiting': Kind$Error$waiting,
        'Kind.Error.indirect': Kind$Error$indirect,
        'Maybe.mapped': Maybe$mapped,
        'Kind.MPath.o': Kind$MPath$o,
        'Kind.MPath.i': Kind$MPath$i,
        'Kind.Error.patch': Kind$Error$patch,
        'Kind.MPath.to_bits': Kind$MPath$to_bits,
        'Kind.Error.type_mismatch': Kind$Error$type_mismatch,
        'Kind.Error.show_goal': Kind$Error$show_goal,
        'Kind.Term.check.infer_with_types': Kind$Term$check$infer_with_types,
        'Kind.Term.normalize': Kind$Term$normalize,
        'Kind.Term.desugar_cse.motive.go': Kind$Term$desugar_cse$motive$go,
        'List.tail': List$tail,
        'Kind.Term.SmartMotive.vals.cont': Kind$Term$SmartMotive$vals$cont,
        'Kind.Term.SmartMotive.vals': Kind$Term$SmartMotive$vals,
        'Kind.Term.SmartMotive.nams.cont': Kind$Term$SmartMotive$nams$cont,
        'Kind.Term.SmartMotive.nams': Kind$Term$SmartMotive$nams,
        'List.zip': List$zip,
        'Nat.gte': Nat$gte,
        'Nat.sub': Nat$sub,
        'Kind.Term.serialize.go': Kind$Term$serialize$go,
        'Kind.Term.serialize': Kind$Term$serialize,
        'Bits.eql': Bits$eql,
        'Kind.Term.identical': Kind$Term$identical,
        'Kind.Term.SmartMotive.replace': Kind$Term$SmartMotive$replace,
        'Kind.Term.SmartMotive.make': Kind$Term$SmartMotive$make,
        'Kind.Term.desugar_cse.motive': Kind$Term$desugar_cse$motive,
        'String.is_empty': String$is_empty,
        'Kind.Term.desugar_cse.argument': Kind$Term$desugar_cse$argument,
        'Maybe.or': Maybe$or,
        'Kind.Term.desugar_cse.cases': Kind$Term$desugar_cse$cases,
        'Kind.Term.desugar_cse': Kind$Term$desugar_cse,
        'Kind.Error.cant_infer': Kind$Error$cant_infer,
        'BitsSet.has': BitsSet$has,
        'BitsSet.mut.has': BitsSet$mut$has,
        'Kind.Term.equal.extra_holes.funari': Kind$Term$equal$extra_holes$funari,
        'Bool.or': Bool$or,
        'Kind.Term.has_holes': Kind$Term$has_holes,
        'Kind.Term.equal.hole': Kind$Term$equal$hole,
        'Kind.Term.equal.extra_holes.filler': Kind$Term$equal$extra_holes$filler,
        'Kind.Term.equal.extra_holes': Kind$Term$equal$extra_holes,
        'BitsSet.set': BitsSet$set,
        'BitsSet.mut.set': BitsSet$mut$set,
        'Bool.eql': Bool$eql,
        'Kind.Term.equal': Kind$Term$equal,
        'BitsSet.new': BitsSet$new,
        'BitsSet.mut.new': BitsSet$mut$new,
        'Kind.Term.check': Kind$Term$check,
        'Kind.Path.nil': Kind$Path$nil,
        'Kind.MPath.nil': Kind$MPath$nil,
        'List.is_empty': List$is_empty,
        'Kind.Term.patch_at': Kind$Term$patch_at,
        'Kind.Synth.fix': Kind$Synth$fix,
        'Kind.Status.fail': Kind$Status$fail,
        'Kind.Synth.one': Kind$Synth$one,
        'BitsMap.from_list': BitsMap$from_list,
        'Kind.Term.inline.names': Kind$Term$inline$names,
        'Kind.Term.inline.reduce': Kind$Term$inline$reduce,
        'Kind.Term.inline': Kind$Term$inline,
        'BitsMap.values.go': BitsMap$values$go,
        'BitsMap.values': BitsMap$values,
        'Kind.Core.var_name': Kind$Core$var_name,
        'Kind.Name.show': Kind$Name$show,
        'Bits.to_nat': Bits$to_nat,
        'U16.show_hex': U16$show_hex,
        'Kind.Code.escape.char': Kind$Code$escape$char,
        'Kind.Code.escape.go': Kind$Code$escape$go,
        'Kind.Code.escape': Kind$Code$escape,
        'Kind.Core.show': Kind$Core$show,
        'Kind.Defs.core': Kind$Defs$core,
        'Kind.api.io.term_to_core': Kind$api$io$term_to_core,
        'BitsMap.keys.go': BitsMap$keys$go,
        'BitsMap.keys': BitsMap$keys,
        'Bits.chunks_of.go': Bits$chunks_of$go,
        'Bits.chunks_of': Bits$chunks_of,
        'Word.from_bits': Word$from_bits,
        'Kind.Name.from_bits': Kind$Name$from_bits,
        'Kind.Synth.many': Kind$Synth$many,
        'Kind.Synth.file': Kind$Synth$file,
        'IO.put_string': IO$put_string,
        'IO.print': IO$print,
        'Maybe.bind': Maybe$bind,
        'Maybe.monad': Maybe$monad,
        'Kind.Term.show.as_nat.go': Kind$Term$show$as_nat$go,
        'Kind.Term.show.as_nat': Kind$Term$show$as_nat,
        'Kind.Term.show.is_ref': Kind$Term$show$is_ref,
        'Kind.Term.show.app.done': Kind$Term$show$app$done,
        'Kind.Term.show.app': Kind$Term$show$app,
        'BitsMap.to_list.go': BitsMap$to_list$go,
        'BitsMap.to_list': BitsMap$to_list,
        'Kind.Term.show.go': Kind$Term$show$go,
        'Kind.Term.show': Kind$Term$show,
        'Kind.Defs.report.types': Kind$Defs$report$types,
        'List.filter': List$filter,
        'Kind.Error.is_undef': Kind$Error$is_undef,
        'Kind.Error.is_mistake': Kind$Error$is_mistake,
        'Kind.Error.is_goal': Kind$Error$is_goal,
        'Kind.Error.relevant': Kind$Error$relevant,
        'Map': Map,
        'String.to_bits': String$to_bits,
        'Map.from_list': Map$from_list,
        'Kind.Context.show': Kind$Context$show,
        'Kind.Term.expand_at': Kind$Term$expand_at,
        'Kind.Term.expand_ct': Kind$Term$expand_ct,
        'Kind.Term.expand': Kind$Term$expand,
        'Kind.Error.show': Kind$Error$show,
        'Kind.Error.origin': Kind$Error$origin,
        'Kind.Defs.report.errors': Kind$Defs$report$errors,
        'Kind.Defs.report': Kind$Defs$report,
        'Kind.api.io.check_file': Kind$api$io$check_file,
        'Kind.Synth.files.go': Kind$Synth$files$go,
        'Kind.Synth.remove_duplicate_names': Kind$Synth$remove_duplicate_names,
        'Kind.Synth.files': Kind$Synth$files,
        'Kind.api.io.check_files': Kind$api$io$check_files,
        'Kind.api.io.check_term': Kind$api$io$check_term,
        'Kind.api.io.show_term': Kind$api$io$show_term,
        'Kind.api.io.show_term_normal': Kind$api$io$show_term_normal,
        'IO.purify': IO$purify,
        'Kind.api.check_code': Kind$api$check_code,
        'Kind.Term.read': Kind$Term$read,
        'Kind.api.export': Kind$api$export,
    };
})();