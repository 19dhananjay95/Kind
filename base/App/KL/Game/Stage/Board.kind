// BOARD DRAWING
// ====================


// draw all the screen (round, seconds, canvas, list of skills)
App.KL.Game.Stage.Board.draw(img: VoxBox, local: App.KL.Game.State.Local, game: App.KL.Game): DOM
  // let seconds = case global.stage { planning: some(global.stage.seconds) } default none  TODO timer and round
  
  <div style={ 
    "width": "100vw", 
    "height": "100vh", 
    "display": "flex", 
    "flex-direction": "column", 
    "justify-content": "center", 
    "align-items": "center",
    "position": "relative"
  }>
    <div style={"margin-bottom": "10px"}> 
      <div> "seconds here" </div>
      // for div in App.Kaelin.Draw.game.round(seconds, global.round)): div TODO show seconds
    </div>
    <div>
      { 
        DOM.vbox(
          {"width": "512"}, 
          {"border": "none", "image-rendering": "pixelated"}, 
          App.KL.Game.Stage.Board.draw.canvas(img, local, game)
        ) 
      }
    </div>

    // TODO show list of skills?
    // <div style={
    //   "position": "absolute", 
    //   "bottom": "0px",
    //   "right": "0px",
    //   "margin": "15px"
    //   "display": "flex",
    //   "flex-direction": "column-reverse"
    // }>
    //   {
    //     let skills_text = List.map!!(App.Kaelin.Draw.game.skill_list(local.user, local.team, global.map, is_planning), global.skills_list)
    //     for skill in skills_text: skill
    //   }
    // </div>
  </div>

// CANVAS DRAWING
// ================

// draw canvas
App.KL.Game.Stage.Board.draw.canvas(
  img : VoxBox,
  local: App.KL.Game.State.Local,
  game: App.KL.Game
): VoxBox
  let img = App.KL.Game.Stage.Board.draw.board(game@board, local@casts, local@env_info, img) 
  let img = App.KL.Game.Stage.Board.draw.mouse_ui(local@env_info, img)
  img

// draw canvas board
// TODO 
// add cast_info
App.KL.Game.Stage.Board.draw.board(
  map: App.KL.Game.Board
  casts: Maybe<App.KL.Game.Casts>
  env_info: App.EnvInfo
  img: VoxBox
): VoxBox

  map = App.KL.Game.Map.to_list!(map)
  mouse_coord = Hexagonal.Axial.from_screen_xy(env_info@mouse_pos, App.KL.Constants.hexagon_radius, App.KL.Constants.center_x, App.KL.Constants.center_y)

  for pos in map with img:
    {coord, tile} = pos
    img = App.KL.Game.Stage.Board.draw.tile.terrain(tile@terrain, casts, coord, mouse_coord, img)
    img = App.KL.Game.Stage.Board.draw.tile.creature(tile@creature, coord, img)
    // img = App.KL.Game.Stage.Board.draw.tile.animation(tile@animation, coord, internal, img) TODO animation
    img
  img

// draw mouse indicator
App.KL.Game.Stage.Board.draw.mouse_ui(
  info: App.EnvInfo,
  img: VoxBox
): VoxBox

  open info 
  coord = Hexagonal.Axial.from_screen_xy(info.mouse_pos, App.KL.Constants.hexagon_radius, App.KL.Constants.center_x, App.KL.Constants.center_y)
  {x,y} = App.KL.Game.Stage.Board.draw.centralize(coord)
  VoxBox.Draw.image(x, y, 0#32, App.Kaelin.Assets.tile.mouse_ui, img) // TODO move to use KL assets?

// TODO 
// add cast_info
// draws tile terrain
App.KL.Game.Stage.Board.draw.tile.terrain(
  terrain: App.KL.Game.Terrain,
  casts: Maybe<App.KL.Game.Casts>
  tile_coord: Hexagonal.Axial
  mouse_coord: Hexagonal.Axial
  img: VoxBox
): VoxBox
  // get indicator to draw
  indicator = App.KL.Game.Stage.Board.draw.get_indicator(tile_coord, mouse_coord, casts) // TODO add castinfo
  // get centralized position to draw hexagon tile
  {i, j}    = App.KL.Game.Stage.Board.draw.centralize(tile_coord)

  // get fields voxbox based on indicator and draws it
  field = App.KL.Game.Field.get_by_id.default(terrain@field_id)
  field_drawing = field@draw(terrain, indicator)
  tile_drawing  = VoxBox.Draw.image(i, j, 0#32, field_drawing, img)
  
  // draw picks' letters of cast
  tile_drawing  = App.KL.Game.Stage.Board.draw.pick_letter(tile_coord, casts, tile_drawing)
  // returns all together
  tile_drawing

// draws tile creature if any
App.KL.Game.Stage.Board.draw.tile.creature(
  creature: Maybe<App.KL.Game.Creature>,
  coord: Hexagonal.Axial,
  img: VoxBox
): VoxBox
  case creature {
    none: img
    some:
      {cx, cy} = Hexagonal.Axial.to_screen_xy(coord, App.KL.Constants.hexagon_radius, App.KL.Constants.center_x, App.KL.Constants.center_y)
      
      // draw creature
      img = App.KL.Game.Stage.Board.draw.hero(cx, cy, 0u, creature.value, img)

      // TODO draw creature hp and ap
      // if I32.gtn(creature.value@hp, 0) then
      //   IO {
      //     hp = App.Kaelin.Draw.creature.hp(cx - 5, cy - 31, creature.value, img)
      //     ap = App.Kaelin.Draw.creature.ap(cx - 5, cy - 25, creature.value, img)
      //     ap
      //   }
      // else
      //   img
      
      img
  }

// draw hero img in some canvas coordinate (allows pass hexagons)
App.KL.Game.Stage.Board.draw.hero(
  cx: U32,
  cy: U32,
  z : U32,
  creature: App.KL.Game.Creature,
  img: VoxBox
): VoxBox

  let hero    = creature@hero
  let drawing = hero@draw(creature)

  aux = I32.to_u32(App.KL.Constants.hexagon_radius) //U32
  cy  = cy - (aux * 2) //U32
  cx  = cx - aux //U32
  
  VoxBox.Draw.image(cx, cy, 0u, drawing, img)


// AUX FUNCTIONS
// =================

App.KL.Game.Stage.Board.draw.pick_letter(
  tile_coord: Hexagonal.Axial
  casts: Maybe<App.KL.Game.Casts>
  img: VoxBox
): VoxBox
  without casts: img
  open casts
  
  case App.KL.Game.Map.find!(tile_coord, casts.picks) as got {
    none: img
    some: 
      screen_coord = Hexagonal.Axial.to_screen_xy(tile_coord, App.KL.Constants.hexagon_radius, App.KL.Constants.center_x, App.KL.Constants.center_y)
      {cx, cy}     = App.KL.Game.Stage.Board.draw.centralize_letter(screen_coord)
      VoxBox.Draw.text(got.value, PixelFont.black, Pos32.new(cx,cy,0u), img)
  }

App.KL.Game.Stage.Board.draw.centralize_letter(screen_coord: Pair<U32, U32>): Pair<U32, U32>
  { screen_coord@fst - 2, screen_coord@snd - 6 }

// TODO 
// add cast_info
App.KL.Game.Stage.Board.draw.get_indicator(
  tile_coord: Hexagonal.Axial
  mouse_coord: Hexagonal.Axial
  casts: Maybe<App.KL.Game.Casts>
): App.KL.Game.Indicator
  let indicator = App.KL.Game.Indicator.background
  //let indicator =
    //if Hexagonal.Axial.eql(tile_coord, mouse_coord)
    //then App.KL.Game.Indicator.blue
    //else App.KL.Game.Indicator.background
  without casts: indicator
  open casts
  without casts.areas: indicator
  case App.KL.Game.Map.find!(tile_coord, casts.areas) as got {
    none: indicator
    some: got.value
  }

  
// Centralizes an image in the hexagon 
App.KL.Game.Stage.Board.draw.centralize(
  coord: Hexagonal.Axial
): Pair(U32, U32)
  let {i, j} = Hexagonal.Axial.to_screen_xy(coord, App.KL.Constants.hexagon_radius, App.KL.Constants.center_x, App.KL.Constants.center_y)
  let aux = I32.to_u32(App.KL.Constants.hexagon_radius)
  let i   = i - aux
  let j   = j - aux
  {i, j}


// When
// ====

App.KL.Game.Stage.Board.when(
  local: App.KL.Game.State.Local
  global: App.KL.Game
  event: App.Event,
): IO<Maybe<App.State.local<App.KL.State>>>
  case event {
    frame:
      App.set_local!(App.KL.State.Local.game(local@env_info <- event.info))
    key_down:
      log("Key down " | Char.to_string(event.code))
      switch U16.eql(event.code) {
        'X':
          log("Setting casts.")
          let coord = Hexagonal.Axial.from_screen_xy(local@env_info@mouse_pos, App.KL.Constants.hexagon_radius, App.KL.Constants.center_x, App.KL.Constants.center_y)
          let casts = local@casts <> App.KL.Game.Casts.new(some(App.KL.Game.Map.new!), App.KL.Game.Map.new!)
          let casts = casts@areas <- some(App.KL.Game.Map.from_list!([{coord, App.KL.Game.Indicator.blue}]))
          App.set_local!(App.KL.State.Local.game(local@casts <- some(casts)))
      } default App.pass!
    key_up:
      log("Key up " | Char.to_string(event.code))
      let coord = Hexagonal.Axial.from_screen_xy(local@env_info@mouse_pos, App.KL.Constants.hexagon_radius, App.KL.Constants.center_x, App.KL.Constants.center_y)
      let casts = local@casts <> App.KL.Game.Casts.new(some(App.KL.Game.Map.new!), App.KL.Game.Map.new!)
      let casts = casts@picks <- App.KL.Game.Map.insert!(coord, Char.to_string(event.code), casts@picks)
      let casts = casts@areas <- none
      App.set_local!(App.KL.State.Local.game(local@casts <- some(casts)))
  } default App.pass!


//type App.KL.Game.CastInfo.Area {
  //new(
    //center: Hexagonal.Axial
    //range: Nat
    //letter: String
  //)
//}

//type App.KL.Game.CastInfo {
  //new(
    //areas: List<App.KL.Game.CastInfo.Area>
    //casts: List<Pair<Hexagonal.Axial, String>>
  //)
//}

