((((((Monad.bind Parser) Parser.monad) Nat) Kind.Term) Kind.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "rewrite ")) # ((((((Monad.bind Parser) Parser.monad) Kind.Name) Kind.Term) Kind.Parser.name1) #name ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "in")) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) Kind.Parser.term) #type ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "with")) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) Kind.Parser.term) #iseq ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) Kind.Parser.term) #body ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Kind.Term) (Kind.Parser.stop init)) #orig !moti = ((Kind.Term.lam name) #s ((Kind.Term.lam "") #x type)); !term = (Kind.Term.ref "Equal.mirror"); !term = ((Kind.Term.app term) (Kind.Term.hol Bits.e)); !term = ((Kind.Term.app term) (Kind.Term.hol Bits.e)); !term = ((Kind.Term.app term) (Kind.Term.hol Bits.e)); !term = ((Kind.Term.app term) iseq); !term = ((Kind.Term.app term) moti); !term = ((Kind.Term.app term) body); ((((Monad.pure Parser) Parser.monad) Kind.Term) ((Kind.Term.ori orig) term)))))))))))