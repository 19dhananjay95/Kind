// Assumes timestamps are syncronized
// Assumes keccak inversion is unfeasible

type Neutralis.Peer {
  new(
    addr: String
    port: Nat
  )
}

type Neutralis.Node {
  new(
    port: Nat
    peers: List<Neutralis.Peer>
  )
}

type Neutralis.Message {
  im_alone
  meet_them
  are_you_there
  yes_i_am
  did_you_know
  tell_me_more
} deriving (serializer, deserializer)

Neutralis.main.loop(port: Nat): IO<Unit>
  let peers = [
    Neutralis.Peer.new("127.0.0.1", 42000)
    Neutralis.Peer.new("127.0.0.1", 42001)
  ]
  Neutralis.main(Neutralis.Node.new(port, peers))

Neutralis.main(node: Neutralis.Node): IO<Unit>
  open node
  IO {
    IO.init_udp(node.port)
  }

