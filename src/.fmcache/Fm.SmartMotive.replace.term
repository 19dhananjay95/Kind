#term #from #to #lv ((((((Fm.Term.identical term) from) lv) # Fm.Term) to) (((((((((((((((((term #term Fm.Term) #term.name #term.indx ((Fm.Term.var term.name) term.indx)) #term.name (Fm.Term.ref term.name)) Fm.Term.typ) #term.eras #term.self #term.name #term.xtyp #term.body !xtyp = ((((Fm.SmartMotive.replace term.xtyp) from) to) lv); !body = ((term.body (Fm.Term.ref term.self)) (Fm.Term.ref term.name)); !body = ((((Fm.SmartMotive.replace body) from) to) (Nat.succ (Nat.succ lv))); (((((Fm.Term.all term.eras) term.self) term.name) xtyp) #s #x body)) #term.name #term.body !body = (term.body (Fm.Term.ref term.name)); !body = ((((Fm.SmartMotive.replace body) from) to) (Nat.succ lv)); ((Fm.Term.lam term.name) #x body)) #term.func #term.argm !func = ((((Fm.SmartMotive.replace term.func) from) to) lv); !argm = ((((Fm.SmartMotive.replace term.argm) from) to) lv); ((Fm.Term.app func) argm)) #term.name #term.expr #term.body !expr = ((((Fm.SmartMotive.replace term.expr) from) to) lv); !body = (term.body (Fm.Term.ref term.name)); !body = ((((Fm.SmartMotive.replace body) from) to) (Nat.succ lv)); (((Fm.Term.let term.name) expr) #x body)) #term.name #term.expr #term.body !expr = ((((Fm.SmartMotive.replace term.expr) from) to) lv); !body = (term.body (Fm.Term.ref term.name)); !body = ((((Fm.SmartMotive.replace body) from) to) (Nat.succ lv)); (((Fm.Term.def term.name) expr) #x body)) #term.done #term.term #term.type !term = ((((Fm.SmartMotive.replace term.term) from) to) lv); !type = ((((Fm.SmartMotive.replace term.type) from) to) lv); (((Fm.Term.ann term.done) term) type)) #term.name #term.dref #term.verb term) #term.path term) #term.natx term) #term.chrx term) #term.strx term) #term.path #term.expr #term.name #term.with #term.cses #term.moti term) #term.orig #term.expr ((((Fm.SmartMotive.replace term.expr) from) to) lv)))