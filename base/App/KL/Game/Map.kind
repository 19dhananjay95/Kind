App.KL.Game.Map.insert<A : Type>(key : Hexagonal.Axial, val : A, map : App.KL.Game.Map<A>) :  App.KL.Game.Map<A>
    Avl.insert!!(Hexagonal.Axial.cmp, key, val, map)

App.KL.Game.Map.find<A : Type>(key : Hexagonal.Axial, map : App.KL.Game.Map<A>) : Maybe<A>
    Avl.lookup!!(Hexagonal.Axial.cmp, key map)

App.KL.Game.Map.delete<A : Type>(key : Hexagonal.Axial, map : App.KL.Game.Map<A>) : App.KL.Game.Map<A>
    Avl.delete!!(Hexagonal.Axial.cmp, key, map)

App.KL.Game.Map.union<A : Type>(map : App.KL.Game.Map<A>) : App.KL.Game.Map<A> -> App.KL.Game.Map<A>
    Avl.union!!(Hexagonal.Axial.cmp, map)

App.KL.Game.Map.keys<A : Type>(map : App.KL.Game.Map<A>) : List<Hexagonal.Axial>
    Avl.foldr_with_key!!!((key, value, list) key & list, [], map)

App.KL.Game.Map.values<A : Type>(map : App.KL.Game.Map<A>) : List<A>
    Avl.foldr_with_key!!!((key, value, list) value & list, [], map)

App.KL.Game.Map.values<A : Type, B : Type>(f : A -> B, map : App.KL.Game.Map<A>) : List<B>
    Avl.map!!(f, map)

App.KL.Game.Map.to_list<A: Type>(map: App.KL.Game.Map<A>): List<Pair<Hexagonal.Axial,A>>
    Avl.to_list!!(map)

App.KL.Game.Map.from_list<A: Type>(list: List<Pair<Hexagonal.Axial,A>>): App.KL.Game.Map<A>
  Avl.from_list!!(Hexagonal.Axial.cmp, list)

App.KL.Game.Map.new<A : Type> : App.KL.Game.Map<A>
    Avl.tip!!

App.KL.Game.Map<A : Type> : Type
   Avl<Hexagonal.Axial, A>

