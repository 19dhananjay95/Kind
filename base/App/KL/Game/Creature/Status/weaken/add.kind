App.KL.Game.Creature.Status.weaken.add(
  creature: App.KL.Game.Creature
  caster_id: String
  duration: I32
  amount: I32
): App.KL.Game.Creature
  
  let weaken_added = App.KL.Game.Creature.Status.weaken.add.aux(caster_id, duration, amount, creature@status)
  creature@status <- weaken_added

App.KL.Game.Creature.Status.weaken.add.aux(
  caster_id: String
  duration: I32
  amount: I32
  status: List<App.KL.Game.Creature.Status>
): List<App.KL.Game.Creature.Status>

  let new_weaken = App.KL.Game.Creature.Status.weaken(caster_id, duration, amount)
  case status { 
    nil:
      new_weaken & status
    cons:
      case status.head { 
        weaken: 
          let old_duration = status.head.duration
          let next_weaken = I32.cmp(old_duration, duration)
          case next_weaken {
            gtn: 
              new_weaken & status.tail
          }default status.head & App.KL.Game.Creature.Status.weaken.add.aux(caster_id, duration, amount, status.tail)
      }default status.head & App.KL.Game.Creature.Status.weaken.add.aux(caster_id, duration, amount, status.tail)
  }
