// CHOICE OF COORDINATES 
// -------

// draw coord positions on the left of top layout
App.KL.Game.Draft.coordinates(players: Map<App.KL.Game.Player>, user: String): DOM
  <div style={ 
    "width": "30%"
    "height": "100%"
    "display": "flex"
    "align-items": "center"
    "padding": "10% 0px 10% 2%"
  }>
    {App.KL.Game.draft.map_space(players, user)}
  </div>

// wrap hexagons in a div
App.KL.Game.draft.map_space(players: Map<App.KL.Game.Player>, user: String): DOM
  <div style={ 
    "width": "100%"
    "height": "0"
    "border": "5px solid #d6dadc"
    "border-radius": "15px"
    "background-color": "#d6dadc"
    "position": "relative"
    "padding-top": "100%"
  }>  
    for div in App.KL.Game.Draft.tiles(players, user): div
  </div>

// get all positions of the hexagons that will be draw
// based on the user team
App.KL.Game.Draft.tiles.get_pos(team: App.KL.Game.Team): List<App.KL.Game.Coord>
      
  let a = App.KL.Game.Coord.new(1,-2)
  let b = App.KL.Game.Coord.new(0,-1)
  let c = App.KL.Game.Coord.new(1,-1)
  let d = App.KL.Game.Coord.new(0, 0)
  let e = App.KL.Game.Coord.new(-1,1)
  let f = App.KL.Game.Coord.new(0, 1)
  let g = App.KL.Game.Coord.new(-1,2)

  let one = App.KL.Game.Coord.new(-1,0) // Team 1's edge
  let two = App.KL.Game.Coord.new(1, 0) // Team 2's edge

  case team {
    blue: List.map!!(App.KL.Game.Draft.tiles.get_pos.offset(App.KL.Game.Team.blue), [a,b,c,d,e,f,g,one])
    red : List.map!!(App.KL.Game.Draft.tiles.get_pos.offset(App.KL.Game.Team.red ), [a,b,c,d,e,f,g,two])
  } default []


// offset coords to respective team's corners
App.KL.Game.Draft.tiles.get_pos.offset(team: App.KL.Game.Team, coord: App.KL.Game.Coord): App.KL.Game.Coord
  open coord
  map_size = U32.to_i32(4#32 - 1) //TODO  4 - > App.KL.Constants.map_size 
  case team{
    blue: App.KL.Game.Coord.new(coord.i - map_size, coord.j)
    red : App.KL.Game.Coord.new(coord.i + map_size, coord.j)
  } default coord

// get player at `coord` coordinate
App.KL.Game.Draft.get_player_at(players: Map<App.KL.Game.Player>, coord: App.KL.Game.Coord): Maybe<Pair<String, App.KL.Game.Player>>
  let fun = 
    (x)
      open x
      App.KL.Game.Coord.eql(x.snd@init_pos, coord)
  List.find!(fun, Map.to_list!(players)) 

// create all hexagons that will be draw
App.KL.Game.Draft.tiles(players: Map<App.KL.Game.Player>, user: String): List<DOM> //tiles or tiles
  team        = App.KL.Game.Draft.to_team(players, user) <> App.KL.Game.Team.neutral
  coords      = App.KL.Game.Draft.tiles.get_pos(team)
  player_list = []
  list        = []

  // Filtering players with coords
  for coord in coords with player_list:
    player = App.KL.Game.Draft.get_player_at(players, coord)
    case player {
      none: {coord, none} & player_list
      some: {coord, some(player.value@fst)} & player_list
    }
  
  for pair in player_list with list:
    open pair
    let coord = App.KL.Game.Coord.axial_to_nat(pair.fst)
    App.KL.Game.Draft.tiles.go(team, pair.fst, pair.snd, user) & list
  
  list

// create one hexagon the will be draw
App.KL.Game.Draft.tiles.go(team: App.KL.Game.Team, coord: App.KL.Game.Coord, id: Maybe(String), user: String): DOM
  let nat    =  App.KL.Game.Coord.axial_to_nat(coord)
  let {x, y} =  App.KL.Game.Draft.tiles.to_xy(coord, team) // calculate x,y position based on i,j coord
  let top    =  Nat.show(U32.to_nat(y)) | "%"
  let left   =  Nat.show(U32.to_nat(x)) | "%"
  let size   =  Nat.show(U32.to_nat((8#32*2) -1)) | "%" // TODO 8 -> App.KL.Game.Constants.draft_hexagon_radius
  let margin =  Nat.show(U32.to_nat((8#32)))
  let color  =  
    case id {
      none: "#B97A57"
      some: 
        if String.eql(user, id.value) then "#0FB735"
        else "#4B97E2"
    }
  
  <div id="C" | Nat.show(nat) style={
    "width": size
    "height": size
    "margin": "-" | margin | "% 0px 0px -" | margin | "%"
    "position": "absolute"
    "top":  top
    "left": left
    "clip-path": "polygon(0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0%)"
    "background": color
  }></div>

// calculate x,y position based on i,j coord
App.KL.Game.Draft.tiles.to_xy(
  coord: App.KL.Game.Coord,
  team: App.KL.Game.Team
): Pair<U32,U32>

  let centralizer = switch String.eql(App.KL.Game.Draft.Team.show(team)) {
    "blue": U32.to_i32(4#32 - 1) // TODO 4 - > App.KL.Game.Constants.map_size
    "red" : I32.neg(U32.to_i32(4#32 -1 ))
  } default +0#32

  open coord
  i = coord.i + centralizer
  j = coord.j
  
  i = I32.to_f64(i)
  j = I32.to_f64(j)

  int_rad = U32.to_f64(8#32) // TODO 8 -> App.KL.Game.Constants.draft_hexagon_radius
  hlf     = F64.div(int_rad, 2.0#64)
  int_screen_center_x = 50.0
  int_screen_center_y = 50.0
  
  cx = int_screen_center_x + j * int_rad  // screen_center + j * rad
  cx = cx + i * int_rad * 2 // screen_center + j * rad + i * 2rad
  cy = int_screen_center_y + j * hlf * 3 // screen_center + j * (3rad/2)
  // let cy = F64.add(cy, j)
  cx = F64.to_u32(cx)
  y  = cy + 0.5 // to round correctly
  cy = F64.to_u32(cy)
  {cx, cy}
