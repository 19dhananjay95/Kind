. true  [t] [f] t
. false [t] [f] f
. not   [b] [t] [f] (b f t)

. zero [s] # [z] z
. succ [n] [s] [s = s] [k = (n #s)] # [z] (s (k z))
. mul  [a] [b] [s] [S = s] [A = [B = (b #S)] (a #B)] # [z] (A z)

. cons [x] [xs] [c] [n] (c x xs)
. nil  [c] [n] n
. head [x] [xs] (xs [x] [xs] x x)
. tail [xs] (xs [x] [xs] xs nil)
. concat [a] [b] [cons] [cons = cons] [nil] (a #[h] [t] (cons h t) (b #cons nil))

. pair [a] [b] [pair] (pair a b)
. fst  [a] [b] a
. snd  [a] [b] b

. SUCC [n] [s] [z] (s n)
. ZERO     [s] [z] z

. fib [n]
  let init (pair #0 #1)
  let next [p] [pair] (p [a] [b] [A = a] [B = b] (pair #B #{A + B}))
  [F = (n #next)] # (F init [a] [b] a)

// outputs 832827963 (which is fib(65536) % 2^32), in 393481 graph rewrites
. fib_test
  (fib ~65536)

. add_test
  {3 + 2}

. mul_test
  {3 * 2}

. fun_test
  ([x] {x + 7} 1)

. inc_test
  [F = (n2 #[x]{x + 1})]
  # (F 0)

. get_fst_char_test
  [F = ("test" #cons)]
  # {(head 0 (tail (F nil))) >> 24}

. incs_test
  [F = (~256 #[x]{x + 1})]
  # (F 0)

. Lam [body]        [Lam] [App] (Lam body)
. App [func] [argm] [Lam] [App] (App func argm)

. redex [term]
  let lam [body]
    (Lam body)
  let app [func]
    let app-lam [lam-body] [argm]
      (lam-body argm) 
    let app-app [app-func] [app-argm] [argm]
      (App (App app-func app-argm) argm)
    (func app-lam app-app)
  (term lam app)

. main
  fib_test
