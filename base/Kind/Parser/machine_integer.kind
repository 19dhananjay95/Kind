Kind.Parser.machine_integer.unsigned(size: Nat): Parser(Kind.Term)
  Kind.Parser.block("int", Parser {
    let size_str = Nat.show(size)
    Kind.Parser.spaces
    get natx = Kind.Parser.nat
    Parser.text("#" | Nat.show(size))
    let term = Kind.Term.ref("Nat.to_u" | Nat.show(size))
    let term = Kind.Term.app(term, natx)
    return term
  })

Kind.Parser.machine_integer.signed(size: Nat): Parser(Kind.Term)
  Kind.Parser.block("int", Parser {
    let size_str = Nat.show(size)

    // TODO: shouldn't need, can the int parser return something different?
    get intx = Kind.Parser.int;
    let intx = case intx {
      ori: case intx.expr {
        app: intx.expr.argm
      } default Kind.Term.ref("?")
    } default Kind.Term.ref("?")

    Parser.text("#" | size_str);
    let term = Kind.Term.ref("Nat.to_i" | size_str);
    let term = Kind.Term.app(term, intx);
    return term
  })
