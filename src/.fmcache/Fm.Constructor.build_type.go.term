#type #ctor #name #pars #args (((pars #pars Fm.Term) (((args #args Fm.Term) ((type #type Fm.Term) #type.name #type.pars #type.inds #type.ctrs ((ctor #ctor Fm.Term) #ctor.name #ctor.args #ctor.inds !type = (Fm.Term.ref name); !type = (((((List.for Fm.Binder) type.pars) Fm.Term) type) #var #type ((Fm.Term.app type) (Fm.Term.ref ((var #var Fm.Name) #var.eras #var.name #var.term var.name)))); !type = (((((List.for Fm.Binder) ctor.inds) Fm.Term) type) #var #type ((Fm.Term.app type) ((var #var Fm.Term) #var.eras #var.name #var.term var.term))); type))) #args.head #args.tail ((args.head #args.head Fm.Term) #args.head.eras #args.head.name #args.head.term $ctr_eras = args.head.eras; $ctr_name = args.head.name; $ctr_xtyp = args.head.term; $ctr_body = {#s #x (((((Fm.Constructor.build_type.go type) ctor) name) pars) args.tail):@(:Fm.Term) @(:Fm.Term) Fm.Term}; (((((Fm.Term.all ctr_eras) "") ctr_name) ctr_xtyp) ctr_body)))) #pars.head #pars.tail ((pars.head #pars.head Fm.Term) #pars.head.eras #pars.head.name #pars.head.term $pars_eras = pars.head.eras; $pars_name = pars.head.name; $pars_xtyp = pars.head.term; $pars_body = {#s #x (((((Fm.Constructor.build_type.go type) ctor) name) pars.tail) args):@(:Fm.Term) @(:Fm.Term) Fm.Term}; (((((Fm.Term.all pars_eras) "") pars_name) pars_xtyp) pars_body)))