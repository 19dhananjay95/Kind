// init:
// Bem-vindo ao Kaelin!
// Digite uma sala e aperte enter: 0x108309300

// void:
// Sala vazia. Digite um DraftString para começar um jogo:
// sipher@Croni, sejagentil@Zeralul / stanci@Murlok, derenash@Keropao

// for test
// TODO: serialize and deserialize
Web.Kaelin.Command.create_hero(hero_name: String) : String
  switch String.eql(hero_name) {
    "croni" : "0x1000000000000000000000000000000000000000000000000000000000000001"    
  } default   "0x0000000000000000000000000000000000000000000000000000000000000000"

// A demo application that renders a square on the screen
Web.Kaelin: App(Web.Kaelin.State)
  let img = Image3D.alloc_capacity(65536u)
  // Initial state
  let init = 
    let map = {}
    let map = Web.Kaelin.Draw.initial_ent(map)
    Web.Kaelin.State.game(Web.Kaelin.Resources.room, 0, {}, map)

  // Render function
  //  0s - 10s: contagem regressiva
  // 10s - 20s: escolha do turno 0
  // 20s - 30s: animação do turno 0
  // 30s - 40s: escolha do turno 1
  // 40s - 50s: animação do turno 1
  // 50s - 60s: escolha do turno 2
  let draw = (state)
    case state {
      game: 
        let map = state.map
        // TODO: resolve background in front of entity
        let img = Web.Kaelin.Draw.map(img, map)
        let img = Web.Kaelin.Draw.state(img, state)
        App.Render.pix(img)
    } default App.Render.txt("TODO: create the renderer for this game state mode")

  // Event handler
  let when = (event, state)
    case event state {
      init game: [
        App.Action.print!("Kaelin started!!!")
        App.Action.watch!(Web.Kaelin.Resources.room)
      ]
      xkey game:
        if event.down then 
          switch U16.eql(event.code) {
            48s: [App.Action.post!(state.room, Web.Kaelin.Command.create_hero("croni"))]
          } default []
        else []
      post game:
        log(event.data)
        switch String.starts_with(event.data) {
          "0x1": [App.Action.state!(Web.Kaelin.Action.create_player(event.addr, "croni", state))]
        } default []
    } default []

  // The application
  App.new!(init, draw, when)
