App.KL.Game.Hero.Fields.hero: App.KL.Game.Hero
  let name = "Fields"

  let vbox_img = (pose)
    {none, App.KL.Game.Hero.Fields.Assets.vbox_img}

  let b64_portrait = (bool, time)
    App.KL.Game.Hero.Fields.Assets.b64_portrait

  let b64_img = (time, time)
    App.KL.Game.Hero.Fields.Assets.b64_img
  
  let height = 40 :: I32 // Distance from center of image to the top of it

  let draw = App.KL.Game.Entity.Draw.new(vbox_img, b64_portrait, b64_img, height)

  let max_hp = 10 :: I32

  let max_ap = 3 :: I32

  let walk_range = {1,1} ::Pair<U64, I32>
  let summon_move_terry = {2, 3} ::Pair<I32, I32>

  let skills = {
    "X": App.KL.Game.Skill.new("Walk", 500, 8, walk_range@fst, App.KL.Game.Skill.Pattern.single, App.KL.Game.Effect.common.walk(walk_range@snd, 1),
    "Walk to another tile within 2 range from " | name |".", App.KL.Game.Cursor.move)

    "Q": App.KL.Game.Skill.new("Summon/Move Terry", 93, 48, 0, App.KL.Game.Skill.Pattern.single, App.KL.Game.Hero.Fields.Skills.summon_move_terry(summon_move_terry@fst, summon_move_terry@snd, 1),
    "Fields summons or moves Terry.", App.KL.Game.Cursor.move)

    "W": App.KL.Game.Skill.new("Rawr", 701, 48, 0, App.KL.Game.Skill.Pattern.single, App.KL.Game.Hero.Fields.Skills.rawr(2, 1),
    "Fields creates a slipping surface around him, pulling enemies nearby.", App.KL.Game.Cursor.attack)

    "E": App.KL.Game.Skill.new("Ravenous Bite", 702, 48, 1, App.KL.Game.Skill.Pattern.single, App.KL.Game.Hero.Fields.Skills.ravenous_bite(3, 1),
    "Fields quickly bites all enemies in front of him, dealing 3 damage.", App.KL.Game.Cursor.attack)
  }

   let attributes =
    App.KL.Game.Hero.Attributes.set(
      1 // Damage
      4 // Resistance
      2 // Mobility
      3 // Range
      4 // Utility
      4 // Difficulty
  )

  let role = App.KL.Game.Hero.Role.tank

  let description = "Fields is a resistant warrior with several different crowd control skills."

  App.KL.Game.Hero.new(name, draw, max_hp, max_ap, skills, attributes, role, description)


// SKILLS

App.KL.Game.Hero.Fields.Skills.ravenous_bite(dmg: I32, ap_cost: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect { 
    App.KL.Game.Effect.ap.use(ap_cost)
    get target = App.KL.Game.Effect.coord.get_target
    get center = App.KL.Game.Effect.coord.get_center
    let clamp = Hexagonal.Axial.clamp(1, center, target)
    let area = App.KL.Game.Areas.semi_circle(center, clamp)
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.red_fill, area)
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.blue_fill, [center])
    let enemy = App.KL.Game.Effect.At.enemy!
    let eff = App.KL.Game.Effect.hp.damage_at(dmg)
    App.KL.Game.Effect.area!(enemy(eff), area)
    return unit
  }

App.KL.Game.Hero.Fields.Skills.summon_move_terry(summon_range: I32, movement_range: I32, ap_cost: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect {
    get target = App.KL.Game.Effect.coord.get_target
    get center = App.KL.Game.Effect.coord.get_center
    get caster = App.KL.Game.Effect.board.creature.caster
    let player = case caster {none: none, some: caster.value@player}
    case player {
      none: App.KL.Game.Effect.fail("no Player"),
      some: App.KL.Game.Effect {
        get board = App.KL.Game.Effect.board.get
        let summon = App.KL.Game.Board.find_summon_coord(player.value, board)
        case summon {
          none: App.KL.Game.Effect { 
            App.KL.Game.Effect.limit_range(summon_range)
            let team = case caster { none: App.KL.Game.Team.neutral, some: caster.value@team }
            let category = App.KL.Game.Creature.Category.summon(App.KL.Game.Hero.Fields.summon.terry)
            let terry = App.KL.Game.Creature.new(some(player.value), category, team, [], App.KL.Game.Hero.Fields.summon.terry@max_hp)
            App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.green_fill, [target])
            App.KL.Game.Effect.ap.use(ap_cost)
            App.KL.Game.Effect.board.summon(terry, target)
          }
          some: App.KL.Game.Effect {
            App.KL.Game.Effect.limit_range_at(movement_range, summon.value)
            App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.green_fill, [target])
            App.KL.Game.Effect.ap.use(ap_cost)
            App.KL.Game.Effect.movement.move_to(summon.value, target, false)
            return unit
          }
        }
      }
    }
  }

App.KL.Game.Hero.Fields.Skills.ice_fall(area: I32, ap_cost: I32): App.KL.Game.Effect<Unit>
  App.KL.Game.Effect {
    App.KL.Game.Effect.ap.use(ap_cost)
    get center = App.KL.Game.Effect.coord.get_center
    get target = App.KL.Game.Effect.coord.get_target

    let ring = App.KL.Game.Areas.ring(center, 1)
    let area = []
    let area = for direction_coord in ring:
      App.KL.Game.Areas.straight_line(2, center, direction_coord) ++ area

    App.KL.Game.Effect.ap.use(ap_cost)
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.red_fill, area)
    App.KL.Game.Effect.indicators.list(App.KL.Game.Indicator.blue_fill, [center])
    let enemy = App.KL.Game.Effect.At.enemy!
    let pull = App.KL.Game.Effect.movement.pull_at(false)
    App.KL.Game.Effect.area!(enemy(pull), area)
    return unit
  }


App.KL.Game.Hero.Fields.summon.terry: App.KL.Game.Summon
  let name = "Terry"
  let vbox_img = (pose) {none, App.KL.Game.Hero.Fields.Assets.minion_img}
  let b64_portrait = (bool, time) App.KL.Game.Hero.Fields.Assets.b64_portrait
  let b64_img = (bool, time) App.KL.Game.Hero.Fields.Assets.b64_portrait
  let height = 20 :: I32
  let draw = App.KL.Game.Entity.Draw.new(vbox_img, b64_portrait, b64_img, height)
  let max_hp = 12 :: I32
  let on_stepped = none
  let description = "Fields' best friend"
  App.KL.Game.Summon.new(name, draw, max_hp, on_stepped, description)

