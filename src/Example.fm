// Random examples

// Formality's "Hello, World" as a String
Example.hello_world: String
  "Hello, world!"

// A program that asks the user's name forever
Example.greet: IO(Unit)
  do IO {
    IO.print("What is your name?")
    var name = IO.get_line
    IO.print("Hello, " | name | "!")
    Example.greet
  }

// The suit of a card
type Example.Suit {
  diamonds
  clubs
  hearts
  spades
}

// Stringifies a suit
Example.suit_to_string(suit: Example.Suit): String
  case suit {
    diamonds: "diamonds"
    clubs: "clubs"
    hearts: "hearts"
    spades: "spades"
  }

// A natural number is either zero or the successor of a natural number
type Example.Nat {
  zero
  succ(pred: Nat)
}

// Doubles a natural number
Example.double(n: Nat): Nat
  case n {
    zero: 0
    succ: Nat.succ(Nat.succ(Nat.double(n.pred)))
  }

// A proof that n+0 == n
Example.theorem(n: Nat): Nat.add(n,0) == n
  case n {
    zero: refl
    succ: apply(Nat.succ, Example.theorem(n.pred))
  }!

// An even number is a positive integer such that Nat.is_even(x) is true
Example.IsEven.A(n: Nat): Type
  {x: Nat} Nat.is_even(x) == true

// Proof that two is even
Example.two_is_even.A: Example.IsEven.A(2)
  2 ~ refl

// Zero is even. For any even n, 2+n is even.
type Example.IsEven.B ~ (n: Nat) {
  zero                              ~ (n: 0)
  succ(n: Nat, e: Example.IsEven.B(n)) ~ (n: Nat.add(2,n))
}

// Proof that 2 is even
Example.two_is_even.B: Example.IsEven.B(2)
  Example.IsEven.B.succ(_, Example.IsEven.B.zero)

// Example usage of open and let
Example.open_and_let: Pair(Nat, String)
  let a = {5, "foo"}
  let b = {7, "bar"}
  open a
  let {b_fst, b_snd} = b
  {Nat.add(a.fst, b_fst), a.snd | b_snd}

Example.half(n: Nat): Nat
  case n {
    zero: 0
    succ: case n.pred {
      zero: 0
      succ: Nat.succ(Example.half(n.pred.pred))
    }
  }

Example.double(n: Nat): Nat
  case n {
    zero: 0
    succ: Nat.succ(Nat.succ(Example.double(n.pred)))
  }

Example.black_friday_theorem(n: Nat): Example.half(Example.double(n)) == n
  case n {
    zero: refl
    succ: apply(Nat.succ, Example.black_friday_theorem(n.pred))
  }!

Example.sum(n: Nat): Nat
  case n {
    zero: 0
    succ: n + Example.sum(n.pred)
  }
