Word.zero : @(size:Nat) (Word size) = #size (((size #size (Word size)) Word.e) #size.pred ((Word.o size.pred) (Word.zero size.pred)));
Word.to_bits : %(size:Nat) @(a:(Word size)) Bits = #size #a ((((a #a.size #a Bits) Bits.e) #a.size #a.pred (Bits.o ((Word.to_bits a.size) a.pred))) #a.size #a.pred (Bits.i ((Word.to_bits a.size) a.pred)));
Word.o : %(size:Nat) @(pred:(Word size)) (Word (Nat.succ size)) = #size #pred #P #e #o #i ((o size) pred);
Word.inc : %(size:Nat) @(word:(Word size)) (Word size) = #size #word ((((word #word.size #word (Word word.size)) Word.e) #word.size #word.pred ((Word.i word.size) word.pred)) #word.size #word.pred ((Word.o word.size) ((Word.inc word.size) word.pred)));
Word.i : %(size:Nat) @(pred:(Word size)) (Word (Nat.succ size)) = #size #pred #P #e #o #i ((i size) pred);
Word.eql : %(size:Nat) @(a:(Word size)) @(b:(Word size)) Bool = #size #a #b (Cmp.as_eql (((Word.cmp size) a) b));
Word.e : (Word Nat.zero) = #P #e #o #i e;
Word.cmp.go : %(size:Nat) @(a:(Word size)) @(b:(Word size)) @(c:Cmp) Cmp = #size #a #b #c (((((a #a.size #a @(b:(Word a.size)) Cmp) #b c) #a.size #a.pred #b (((((b #b.size #b @(a.pred:(Word (Nat.pred b.size))) Cmp) #a.pred c) #b.size #b.pred #a.pred ((((Word.cmp.go b.size) a.pred) b.pred) c)) #b.size #b.pred #a.pred ((((Word.cmp.go b.size) a.pred) b.pred) Cmp.ltn)) a.pred)) #a.size #a.pred #b (((((b #b.size #b @(a.pred:(Word (Nat.pred b.size))) Cmp) #a.pred c) #b.size #b.pred #a.pred ((((Word.cmp.go b.size) a.pred) b.pred) Cmp.gtn)) #b.size #b.pred #a.pred ((((Word.cmp.go b.size) a.pred) b.pred) c)) a.pred)) b);
Word.cmp : %(size:Nat) @(a:(Word size)) @(b:(Word size)) Cmp = #size #a #b ((((Word.cmp.go size) a) b) Cmp.eql);
Word : @(size:Nat) * = #size %Word.Self(P:@(size:Nat) @(:(Word size)) *) @(e:((P Nat.zero) Word.e)) @(o:%(size:Nat) @(pred:(Word size)) ((P (Nat.succ size)) ((Word.o size) pred))) @(i:%(size:Nat) @(pred:(Word size)) ((P (Nat.succ size)) ((Word.i size) pred))) ((P size) Word.Self);
VoxBox.new : @(length:U32) @(capacity:U32) @(buffer:Buffer32) VoxBox = #length #capacity #buffer #P #new (((new length) capacity) buffer);
VoxBox : * = %VoxBox.Self(P:@(:VoxBox) *) @(new:@(length:U32) @(capacity:U32) @(buffer:Buffer32) (P (((VoxBox.new length) capacity) buffer))) (P VoxBox.Self);
U64.new : @(value:(Word +64)) U64 = #value #P #new (new value);
U64 : * = %U64.Self(P:@(:U64) *) @(new:@(value:(Word +64)) (P (U64.new value))) (P U64.Self);
U32.new : @(value:(Word +32)) U32 = #value #P #new (new value);
U32.from_nat : @(n:Nat) U32 = #n (U32.new ((Nat.to_word (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero))))))))))))))))))))))))))))))))) n));
U32 : * = %U32.Self(P:@(:U32) *) @(new:@(value:(Word +32)) (P (U32.new value))) (P U32.Self);
U16.to_bits : @(a:U16) Bits = #a ((a #a Bits) #a.value ((Word.to_bits (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero))))))))))))))))) a.value));
U16.new : @(value:(Word +16)) U16 = #value #P #new (new value);
U16.eql : @(a:U16) @(b:U16) Bool = #a #b ((a #a Bool) #a.value ((b #b Bool) #b.value (((Word.eql (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero))))))))))))))))) a.value) b.value)));
U16 : * = %U16.Self(P:@(:U16) *) @(new:@(value:(Word +16)) (P (U16.new value))) (P U16.Self);
Unit.new : Unit = #P #new new;
Unit : * = %Unit.Self(P:@(:Unit) *) @(new:(P Unit.new)) (P Unit.Self);
String.to_bits : @(str:String) Bits = #str (((str #str Bits) Bits.e) #str.head #str.tail ((Bits.concat (U16.to_bits str.head)) (String.to_bits str.tail)));
String.nil : String = #P #nil #cons nil;
String.eql : @(a:String) @(b:String) Bool = #a #b (((a #a Bool) (((b #b Bool) Bool.true) #b.head #b.tail Bool.false)) #a.head #a.tail (((b #b Bool) Bool.false) #b.head #b.tail ((Bool.and ((U16.eql a.head) b.head)) ((String.eql a.tail) b.tail))));
String.cons : @(head:Char) @(tail:String) String = #head #tail #P #nil #cons ((cons head) tail);
String.concat : @(as:String) @(bs:String) String = #as #bs (((as #as String) bs) #as.head #as.tail ((String.cons as.head) ((String.concat as.tail) bs)));
String : * = %String.Self(P:@(:String) *) @(nil:(P String.nil)) @(cons:@(head:Char) @(tail:String) (P ((String.cons head) tail))) (P String.Self);
Pair.snd : %(A:*) %(B:*) @(pair:((Pair A) B)) B = #A #B #pair ((pair #pair B) #pair.fst #pair.snd pair.snd);
Pair.new : %(A:*) %(B:*) @(fst:A) @(snd:B) ((Pair A) B) = #A #B #fst #snd #P #new ((new fst) snd);
Pair.fst : %(A:*) %(B:*) @(pair:((Pair A) B)) A = #A #B #pair ((pair #pair A) #pair.fst #pair.snd pair.fst);
Pair : @(A:*) @(B:*) * = #A #B %Pair.Self(P:@(:((Pair A) B)) *) @(new:@(fst:A) @(snd:B) (P ((((Pair.new A) B) fst) snd))) (P Pair.Self);
Nat.zero : Nat = #P #zero #succ zero;
Nat.to_word : @(size:Nat) @(n:Nat) (Word size) = #size #n ((((Nat.apply (Word size)) n) (Word.inc size)) (Word.zero size));
Nat.succ : @(pred:Nat) Nat = #pred #P #zero #succ (succ pred);
Nat.pred : @(n:Nat) Nat = #n (((n #n Nat) Nat.zero) #n.pred n.pred);
Nat.apply : %(A:*) @(n:Nat) @(f:@(x:A) A) @(x:A) A = #A #n #f #x (((n #n A) x) #n.pred ((((Nat.apply A) n.pred) f) (f x)));
Nat : * = %Nat.Self(P:@(:Nat) *) @(zero:(P Nat.zero)) @(succ:@(pred:Nat) (P (Nat.succ pred))) (P Nat.Self);
Monad.pure : %(M:@(:*) *) @(m:(Monad M)) %(A:*) @(:A) (M A) = #M #m ((m #m %(A:*) @(:A) (M A)) #m.bind #m.pure m.pure);
Monad.new : %(M:@(:*) *) @(bind:%(A:*) %(B:*) @(m:(M A)) @(f:@(x:A) (M B)) (M B)) @(pure:%(A:*) @(x:A) (M A)) (Monad M) = #M #bind #pure #P #new ((new bind) pure);
Monad.bind : %(M:@(:*) *) @(m:(Monad M)) %(A:*) %(B:*) @(:(M A)) @(:@(:A) (M B)) (M B) = #M #m ((m #m %(A:*) %(B:*) @(:(M A)) @(:@(:A) (M B)) (M B)) #m.bind #m.pure m.bind);
Monad : @(M:@(:*) *) * = #M %Monad.Self(P:@(:(Monad M)) *) @(new:@(bind:%(A:*) %(B:*) @(m:(M A)) @(f:@(x:A) (M B)) (M B)) @(pure:%(A:*) @(x:A) (M A)) (P #P #new ((new bind) pure))) (P Monad.Self);
Maybe.some : %(A:*) @(value:A) (Maybe A) = #A #value #P #none #some (some value);
Maybe.none : %(A:*) (Maybe A) = #A #P #none #some none;
Maybe : @(A:*) * = #A %Maybe.Self(P:@(:(Maybe A)) *) @(none:(P (Maybe.none A))) @(some:@(value:A) (P ((Maybe.some A) value))) (P Maybe.Self);
Map.set : %(A:*) @(key:String) @(val:A) @(map:(Map A)) (Map A) = #A #key #val #map ((((BitsMap.set A) (String.to_bits key)) val) map);
Map.get : %(A:*) @(key:String) @(map:(Map A)) (Maybe A) = #A #key #map (((BitsMap.get A) (String.to_bits key)) map);
Map.from_list : %(A:*) @(xs:(List ((Pair String) A))) (Map A) = #A #xs (((xs #xs (Map A)) (BitsMap.new A)) #xs.head #xs.tail ((xs.head #p (Map A)) #p.fst #p.snd ((((BitsMap.set A) (String.to_bits p.fst)) p.snd) ((Map.from_list A) xs.tail))));
Map : @(V:*) * = #V (BitsMap V);
List.nil : %(A:*) (List A) = #A #P #nil #cons nil;
List.cons : %(A:*) @(head:A) @(tail:(List A)) (List A) = #A #head #tail #P #nil #cons ((cons head) tail);
List : @(A:*) * = #A %List.Self(P:@(:(List A)) *) @(nil:(P (List.nil A))) @(cons:@(head:A) @(tail:(List A)) (P (((List.cons A) head) tail))) (P List.Self);
IO.monad : (Monad IO) = #P #new ((new IO.bind) IO.end);
IO.end : %(A:*) @(value:A) (IO A) = #A #value #P #end #ask (end value);
IO.do : @(call:String) @(param:String) (IO Unit) = #call #param ((((IO.ask Unit) call) param) #answer ((IO.end Unit) Unit.new));
IO.bind : %(A:*) %(B:*) @(a:(IO A)) @(f:@(:A) (IO B)) (IO B) = #A #B #a #f (((a #a (IO B)) #a.value (f a.value)) #a.query #a.param #a.then ((((IO.ask B) a.query) a.param) #x ((((IO.bind A) B) (a.then x)) f)));
IO.ask : %(A:*) @(query:String) @(param:String) @(then:@(response:String) (IO A)) (IO A) = #A #query #param #then #P #end #ask (((ask query) param) then);
IO : @(A:*) * = #A %IO.Self(P:@(:(IO A)) *) @(end:@(value:A) (P ((IO.end A) value))) @(ask:@(query:String) @(param:String) @(then:@(response:String) (IO A)) (P ((((IO.ask A) query) param) then))) (P IO.Self);
DOM.vbox : @(props:(Map String)) @(style:(Map String)) @(value:VoxBox) DOM = #props #style #value #P #node #vbox #text (((vbox props) style) value);
DOM.text : @(value:String) DOM = #value #P #node #vbox #text (text value);
DOM.node : @(tag:String) @(props:(Map String)) @(style:(Map String)) @(children:(List DOM)) DOM = #tag #props #style #children #P #node #vbox #text ((((node tag) props) style) children);
DOM : * = %DOM.Self(P:@(:DOM) *) @(node:@(tag:String) @(props:(Map String)) @(style:(Map String)) @(children:(List DOM)) (P ((((DOM.node tag) props) style) children))) @(vbox:@(props:(Map String)) @(style:(Map String)) @(value:VoxBox) (P (((DOM.vbox props) style) value))) @(text:@(value:String) (P (DOM.text value))) (P DOM.Self);
Cmp.ltn : Cmp = #P #ltn #eql #gtn ltn;
Cmp.gtn : Cmp = #P #ltn #eql #gtn gtn;
Cmp.eql : Cmp = #P #ltn #eql #gtn eql;
Cmp.as_eql : @(cmp:Cmp) Bool = #cmp ((((cmp #cmp Bool) Bool.false) Bool.true) Bool.false);
Cmp : * = %Cmp.Self(P:@(:Cmp) *) @(ltn:(P Cmp.ltn)) @(eql:(P Cmp.eql)) @(gtn:(P Cmp.gtn)) (P Cmp.Self);
Char : * = U16;
Buffer32.new : @(depth:Nat) @(array:((Array U32) depth)) Buffer32 = #depth #array #P #new ((new depth) array);
Buffer32 : * = %Buffer32.Self(P:@(:Buffer32) *) @(new:@(depth:Nat) @(array:((Array U32) depth)) (P ((Buffer32.new depth) array))) (P Buffer32.Self);
Bool.true : Bool = #P #true #false true;
Bool.false : Bool = #P #true #false false;
Bool.and : @(a:Bool) @(b:Bool) Bool = #a #b (((a #a Bool) b) Bool.false);
Bool : * = %Bool.Self(P:@(:Bool) *) @(true:(P Bool.true)) @(false:(P Bool.false)) (P Bool.Self);
Bits.o : @(pred:Bits) Bits = #pred #P #e #o #i (o pred);
Bits.i : @(pred:Bits) Bits = #pred #P #e #o #i (i pred);
Bits.e : Bits = #P #e #o #i e;
Bits.concat : @(a:Bits) @(b:Bits) Bits = #a #b ((((a #a Bits) b) #a.pred (Bits.o ((Bits.concat a.pred) b))) #a.pred (Bits.i ((Bits.concat a.pred) b)));
BitsMap.tie : %(A:*) @(val:(Maybe A)) @(lft:(BitsMap A)) @(rgt:(BitsMap A)) (BitsMap A) = #A #val #lft #rgt #P #new #tie (((tie val) lft) rgt);
BitsMap.set : %(A:*) @(bits:Bits) @(val:A) @(map:(BitsMap A)) (BitsMap A) = #A #bits #val #map ((((bits #bits (BitsMap A)) (((map #map (BitsMap A)) ((((BitsMap.tie A) ((Maybe.some A) val)) (BitsMap.new A)) (BitsMap.new A))) #map.val #map.lft #map.rgt ((((BitsMap.tie A) ((Maybe.some A) val)) map.lft) map.rgt))) #bits.pred (((map #map (BitsMap A)) ((((BitsMap.tie A) (Maybe.none A)) ((((BitsMap.set A) bits.pred) val) (BitsMap.new A))) (BitsMap.new A))) #map.val #map.lft #map.rgt ((((BitsMap.tie A) map.val) ((((BitsMap.set A) bits.pred) val) map.lft)) map.rgt))) #bits.pred (((map #map (BitsMap A)) ((((BitsMap.tie A) (Maybe.none A)) (BitsMap.new A)) ((((BitsMap.set A) bits.pred) val) (BitsMap.new A)))) #map.val #map.lft #map.rgt ((((BitsMap.tie A) map.val) map.lft) ((((BitsMap.set A) bits.pred) val) map.rgt))));
BitsMap.new : %(A:*) (BitsMap A) = #A #P #new #tie new;
BitsMap.get : %(A:*) @(bits:Bits) @(map:(BitsMap A)) (Maybe A) = #A #bits #map ((((bits #bits (Maybe A)) (((map #map (Maybe A)) (Maybe.none A)) #map.val #map.lft #map.rgt map.val)) #bits.pred (((map #map (Maybe A)) (Maybe.none A)) #map.val #map.lft #map.rgt (((BitsMap.get A) bits.pred) map.lft))) #bits.pred (((map #map (Maybe A)) (Maybe.none A)) #map.val #map.lft #map.rgt (((BitsMap.get A) bits.pred) map.rgt)));
BitsMap : @(A:*) * = #A %BitsMap.Self(P:@(:(BitsMap A)) *) @(new:(P (BitsMap.new A))) @(tie:@(val:(Maybe A)) @(lft:(BitsMap A)) @(rgt:(BitsMap A)) (P ((((BitsMap.tie A) val) lft) rgt))) (P BitsMap.Self);
Bits : * = %Bits.Self(P:@(:Bits) *) @(e:(P Bits.e)) @(o:@(pred:Bits) (P (Bits.o pred))) @(i:@(pred:Bits) (P (Bits.i pred))) (P Bits.Self);
Array.tip : %(A:*) @(value:A) ((Array A) Nat.zero) = #A #value #P #tip #tie (tip value);
Array.tie : %(A:*) %(depth:Nat) @(lft:((Array A) depth)) @(rgt:((Array A) depth)) ((Array A) (Nat.succ depth)) = #A #depth #lft #rgt #P #tip #tie (((tie depth) lft) rgt);
Array : @(A:*) @(depth:Nat) * = #A #depth %Array.Self(P:@(depth:Nat) @(:((Array A) depth)) *) @(tip:@(value:A) ((P Nat.zero) ((Array.tip A) value))) @(tie:%(depth:Nat) @(lft:((Array A) depth)) @(rgt:((Array A) depth)) ((P (Nat.succ depth)) ((((Array.tie A) depth) lft) rgt))) ((P depth) Array.Self);
App.watch : %(S:App.State) @(room:String) (IO (Maybe (App.State.local S))) = #S #room (((App.do S) "watch") room);
App.pass : %(S:App.State) (IO (Maybe (App.State.local S))) = #S ((((IO.monad #m %(A:*) @(:A) (IO A)) #m.bind #m.pure m.pure) (Maybe (App.State.local S))) (Maybe.none (App.State.local S)));
App.new_post : %(S:App.State) @(room:String) @(data:String) (IO (Maybe (App.State.local S))) = #S #room #data ((((((IO.monad #m %(A:*) %(B:*) @(:(IO A)) @(:@(:A) (IO B)) (IO B)) #m.bind #m.pure m.bind) (Maybe (App.State.local S))) (Maybe (App.State.local S))) (((App.do S) "post") ((String.concat room) ((String.concat ";") data)))) # (App.pass S));
App.new : %(S:App.State) @(init:(App.Init S)) @(draw:(App.Draw S)) @(when:(App.When S)) @(tick:(App.Tick S)) @(post:(App.Post S)) (App S) = #S #init #draw #when #tick #post #P #new (((((new init) draw) when) tick) post);
App.do : %(S:App.State) @(call:String) @(param:String) (IO (Maybe (App.State.local S))) = #S #call #param ((((((IO.monad #m %(A:*) %(B:*) @(:(IO A)) @(:@(:A) (IO B)) (IO B)) #m.bind #m.pure m.bind) Unit) (Maybe (App.State.local S))) ((IO.do call) param)) # (App.pass S));
App.When : %(S:App.State) * = #S @(event:App.Event) @(state:(App.Store S)) (IO (Maybe (App.State.local S)));
App.UserAddress : * = String;
App.Tick : %(S:App.State) * = #S @(from:U64) @(to:U64) @(glob:(App.State.global S)) (App.State.global S);
App.Store.new : %(S:App.State) @(local:(App.State.local S)) @(global:(App.State.global S)) (App.Store S) = #S #local #global #P #new ((new local) global);
App.Store : %(S:App.State) @(value:(App.State.local S)) (IO (Maybe (App.State.local S))) = #S #value ((((IO.monad #m %(A:*) @(:A) (IO A)) #m.bind #m.pure m.pure) (Maybe (App.State.local S))) ((Maybe.some (App.State.local S)) value));
App.State.new : %(A:*) %(B:*) App.State = #A #B ((((Pair.new *) *) A) B);
App.State.local : @(:App.State) * = ((Pair.fst *) *);
App.State.global : @(:App.State) * = ((Pair.snd *) *);
App.State : * = ((Pair *) *);
App.Post : %(S:App.State) * = #S @(time:U64) @(room:String) @(addr:String) @(data:String) @(glob:(App.State.global S)) (App.State.global S);
App.MiniMMO.when : (App.When App.MiniMMO.State) = #event #state ((((((((((event #event (IO (Maybe (App.State.local App.MiniMMO.State)))) #event.time #event.user #event.info ((App.watch App.MiniMMO.State) App.MiniMMO.room)) #event.time #event.info (App.pass App.MiniMMO.State)) #event.time #event.button (App.pass App.MiniMMO.State)) #event.time #event.button (App.pass App.MiniMMO.State)) #event.time #event.code (((((U16.eql event.code) 'A') # (IO (Maybe (App.State.local App.MiniMMO.State)))) (((App.new_post App.MiniMMO.State) App.MiniMMO.room) App.MiniMMO.command.a_down)) (((((U16.eql event.code) 'D') # (IO (Maybe (App.State.local App.MiniMMO.State)))) (((App.new_post App.MiniMMO.State) App.MiniMMO.room) App.MiniMMO.command.d_down)) (((((U16.eql event.code) 'W') # (IO (Maybe (App.State.local App.MiniMMO.State)))) (((App.new_post App.MiniMMO.State) App.MiniMMO.room) App.MiniMMO.command.w_down)) (((((U16.eql event.code) 'S') # (IO (Maybe (App.State.local App.MiniMMO.State)))) (((App.new_post App.MiniMMO.State) App.MiniMMO.room) App.MiniMMO.command.s_down)) (App.pass App.MiniMMO.State)))))) #event.time #event.code (((((U16.eql event.code) 'A') # (IO (Maybe (App.State.local App.MiniMMO.State)))) (((App.new_post App.MiniMMO.State) App.MiniMMO.room) App.MiniMMO.command.a_up)) (((((U16.eql event.code) 'D') # (IO (Maybe (App.State.local App.MiniMMO.State)))) (((App.new_post App.MiniMMO.State) App.MiniMMO.room) App.MiniMMO.command.d_up)) (((((U16.eql event.code) 'W') # (IO (Maybe (App.State.local App.MiniMMO.State)))) (((App.new_post App.MiniMMO.State) App.MiniMMO.room) App.MiniMMO.command.w_up)) (((((U16.eql event.code) 'S') # (IO (Maybe (App.State.local App.MiniMMO.State)))) (((App.new_post App.MiniMMO.State) App.MiniMMO.room) App.MiniMMO.command.s_up)) (App.pass App.MiniMMO.State)))))) #event.time #event.id (App.pass App.MiniMMO.State)) #event.time #event.id #event.action (App.pass App.MiniMMO.State)) #event.time #event.id #event.text (App.pass App.MiniMMO.State));
App.MiniMMO.tick : (App.Tick App.MiniMMO.State) = #from #to #glob glob;
App.MiniMMO.room : String = "0xc910a02b7c8a05";
App.MiniMMO.post : (App.Post App.MiniMMO.State) = #time #room #addr #data #map !player = ((((((Map.get App.MiniMMO.Player) addr) map) #player App.MiniMMO.Player) ((((((App.MiniMMO.Player.new Bool.false) Bool.false) Bool.false) Bool.false) (U32.from_nat +0)) (U32.from_nat +0))) #player.value !player = player.value; !player = (((((String.eql data) App.MiniMMO.command.a_down) # App.MiniMMO.Player) ((player # App.MiniMMO.Player) #w #a #s #d #x #y ((((((App.MiniMMO.Player.new w) Bool.true) s) d) x) y))) (((((String.eql data) App.MiniMMO.command.s_down) # App.MiniMMO.Player) ((player # App.MiniMMO.Player) #w #a #s #d #x #y ((((((App.MiniMMO.Player.new w) a) Bool.true) d) x) y))) (((((String.eql data) App.MiniMMO.command.d_down) # App.MiniMMO.Player) ((player # App.MiniMMO.Player) #w #a #s #d #x #y ((((((App.MiniMMO.Player.new w) a) s) Bool.true) x) y))) (((((String.eql data) App.MiniMMO.command.w_down) # App.MiniMMO.Player) ((player # App.MiniMMO.Player) #w #a #s #d #x #y ((((((App.MiniMMO.Player.new Bool.true) a) s) d) x) y))) (((((String.eql data) App.MiniMMO.command.a_up) # App.MiniMMO.Player) ((player # App.MiniMMO.Player) #w #a #s #d #x #y ((((((App.MiniMMO.Player.new w) Bool.false) s) d) x) y))) (((((String.eql data) App.MiniMMO.command.s_up) # App.MiniMMO.Player) ((player # App.MiniMMO.Player) #w #a #s #d #x #y ((((((App.MiniMMO.Player.new w) a) Bool.false) d) x) y))) (((((String.eql data) App.MiniMMO.command.d_up) # App.MiniMMO.Player) ((player # App.MiniMMO.Player) #w #a #s #d #x #y ((((((App.MiniMMO.Player.new w) a) s) Bool.false) x) y))) (((((String.eql data) App.MiniMMO.command.w_up) # App.MiniMMO.Player) ((player # App.MiniMMO.Player) #w #a #s #d #x #y ((((((App.MiniMMO.Player.new Bool.false) a) s) d) x) y))) player)))))))); player); ((((Map.set App.MiniMMO.Player) addr) player) map);
App.MiniMMO.init : (App.Init App.MiniMMO.State) = (((App.Store.new App.MiniMMO.State) Unit.new) ((Map.from_list App.MiniMMO.Player) (List.nil ((Pair String) App.MiniMMO.Player))));
App.MiniMMO.draw : (App.Draw App.MiniMMO.State) = #state ((((DOM.node "div") ((Map.from_list String) (List.nil ((Pair String) String)))) ((Map.from_list String) (List.nil ((Pair String) String)))) (((List.cons DOM) (DOM.text "X")) (List.nil DOM)));
App.MiniMMO.command.w_up : String = "0x0000000000000000000000000000000000000000000000000000000000000006";
App.MiniMMO.command.w_down : String = "0x0000000000000000000000000000000000000000000000000000000000000007";
App.MiniMMO.command.s_up : String = "0x0000000000000000000000000000000000000000000000000000000000000004";
App.MiniMMO.command.s_down : String = "0x0000000000000000000000000000000000000000000000000000000000000005";
App.MiniMMO.command.d_up : String = "0x0000000000000000000000000000000000000000000000000000000000000002";
App.MiniMMO.command.d_down : String = "0x0000000000000000000000000000000000000000000000000000000000000003";
App.MiniMMO.command.a_up : String = "0x0000000000000000000000000000000000000000000000000000000000000000";
App.MiniMMO.command.a_down : String = "0x0000000000000000000000000000000000000000000000000000000000000001";
App.MiniMMO.State : App.State = ((App.State.new Unit) (Map App.MiniMMO.Player));
App.MiniMMO.Player.new : @(w:Bool) @(a:Bool) @(s:Bool) @(d:Bool) @(x:U32) @(y:U32) App.MiniMMO.Player = #w #a #s #d #x #y #P #new ((((((new w) a) s) d) x) y);
App.MiniMMO.Player : * = %App.MiniMMO.Player.Self(P:@(:App.MiniMMO.Player) *) @(new:@(w:Bool) @(a:Bool) @(s:Bool) @(d:Bool) @(x:U32) @(y:U32) (P ((((((App.MiniMMO.Player.new w) a) s) d) x) y))) (P App.MiniMMO.Player.Self);
App.MiniMMO : (App App.MiniMMO.State) = ((((((App.new App.MiniMMO.State) App.MiniMMO.init) App.MiniMMO.draw) App.MiniMMO.when) App.MiniMMO.tick) App.MiniMMO.post);
App.Init : %(S:App.State) * = #S (App.Store S);
App.Event.mouse_up : @(time:U64) @(button:U16) App.Event = #time #button #P #init #frame #mouse_down #mouse_up #key_down #key_up #mouse_over #mouse_click #input ((mouse_up time) button);
App.Event.mouse_over : @(time:U64) @(id:String) App.Event = #time #id #P #init #frame #mouse_down #mouse_up #key_down #key_up #mouse_over #mouse_click #input ((mouse_over time) id);
App.Event.mouse_down : @(time:U64) @(button:U16) App.Event = #time #button #P #init #frame #mouse_down #mouse_up #key_down #key_up #mouse_over #mouse_click #input ((mouse_down time) button);
App.Event.mouse_click : @(time:U64) @(id:String) @(action:String) App.Event = #time #id #action #P #init #frame #mouse_down #mouse_up #key_down #key_up #mouse_over #mouse_click #input (((mouse_click time) id) action);
App.Event.key_up : @(time:U64) @(code:U16) App.Event = #time #code #P #init #frame #mouse_down #mouse_up #key_down #key_up #mouse_over #mouse_click #input ((key_up time) code);
App.Event.key_down : @(time:U64) @(code:U16) App.Event = #time #code #P #init #frame #mouse_down #mouse_up #key_down #key_up #mouse_over #mouse_click #input ((key_down time) code);
App.Event.input : @(time:U64) @(id:String) @(text:String) App.Event = #time #id #text #P #init #frame #mouse_down #mouse_up #key_down #key_up #mouse_over #mouse_click #input (((input time) id) text);
App.Event.init : @(time:U64) @(user:App.UserAddress) @(info:App.EnvInfo) App.Event = #time #user #info #P #init #frame #mouse_down #mouse_up #key_down #key_up #mouse_over #mouse_click #input (((init time) user) info);
App.Event.frame : @(time:U64) @(info:App.EnvInfo) App.Event = #time #info #P #init #frame #mouse_down #mouse_up #key_down #key_up #mouse_over #mouse_click #input ((frame time) info);
App.Event : * = %App.Event.Self(P:@(:App.Event) *) @(init:@(time:U64) @(user:App.UserAddress) @(info:App.EnvInfo) (P (((App.Event.init time) user) info))) @(frame:@(time:U64) @(info:App.EnvInfo) (P ((App.Event.frame time) info))) @(mouse_down:@(time:U64) @(button:U16) (P ((App.Event.mouse_down time) button))) @(mouse_up:@(time:U64) @(button:U16) (P ((App.Event.mouse_up time) button))) @(key_down:@(time:U64) @(code:U16) (P ((App.Event.key_down time) code))) @(key_up:@(time:U64) @(code:U16) (P ((App.Event.key_up time) code))) @(mouse_over:@(time:U64) @(id:String) (P ((App.Event.mouse_over time) id))) @(mouse_click:@(time:U64) @(id:String) @(action:String) (P (((App.Event.mouse_click time) id) action))) @(input:@(time:U64) @(id:String) @(text:String) (P (((App.Event.input time) id) text))) (P App.Event.Self);
App.EnvInfo.new : @(screen_size:((Pair U32) U32)) @(mouse_pos:((Pair U32) U32)) App.EnvInfo = #screen_size #mouse_pos #P #new ((new screen_size) mouse_pos);
App.EnvInfo : * = %App.EnvInfo.Self(P:@(:App.EnvInfo) *) @(new:@(screen_size:((Pair U32) U32)) @(mouse_pos:((Pair U32) U32)) (P ((App.EnvInfo.new screen_size) mouse_pos))) (P App.EnvInfo.Self);
App.Draw : %(S:App.State) * = #S @(state:(App.Store S)) DOM;
App : @(S:App.State) * = #S %App.Self(P:@(:(App S)) *) @(new:@(init:(App.Init S)) @(draw:(App.Draw S)) @(when:(App.When S)) @(tick:(App.Tick S)) @(post:(App.Post S)) (P ((((((App.new S) init) draw) when) tick) post))) (P App.Self);

