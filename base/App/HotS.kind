// App states (local = clicks, global = visitors)
App.HotS.State: App.State
  App.State.new(String, App.HotS.State.Global)

// Initial state
App.HotS.init: App.Init<App.HotS.State>
  let bids = {} :: Map<App.HotS.Bid>
  let cash = {
    "toph": 25
    "arluki": 25
    "derenash": 25
    "gunnar": 25
    "katson": 25
  } :: Map<Nat>
  App.Store.new<App.HotS.State>("", App.HotS.State.Global.new(bids, cash))

type App.HotS.State.Global {
  new(
    bids: Map<App.HotS.Bid>
    cash: Map<Nat>
  )
}

type App.HotS.Player {
  new(
    rank: String
  )
}

type App.HotS.Bid {
  new(
    value: Nat
    team: String
  )
}

type App.HotS.Action {
  buy(
    team: String
    player: String
  )
} deriving (serializer, deserializer)

App.HotS.players: Map<App.HotS.Player>
  {
    "Adones": App.HotS.Player.new("sla")
    "AnneO": App.HotS.Player.new("sla")
    "Arluki": App.HotS.Player.new("sla")
    "ChampofHorde": App.HotS.Player.new("sla")
    "Crono": App.HotS.Player.new("sla")
    "Dashblue": App.HotS.Player.new("sla")
    "Derenash": App.HotS.Player.new("sla")
    "Drau": App.HotS.Player.new("sla")
    "Dugalle": App.HotS.Player.new("sla")
    "Entropy": App.HotS.Player.new("sla")
    "Escondidinho": App.HotS.Player.new("sla")
    "Exorr": App.HotS.Player.new("sla")
    "FFJujubaKid": App.HotS.Player.new("sla")
    "Focofi": App.HotS.Player.new("sla")
    "GiantAxe": App.HotS.Player.new("sla")
    "Goddan": App.HotS.Player.new("sla")
    "Josuecs": App.HotS.Player.new("sla")
    "Juzehlito": App.HotS.Player.new("sla")
    "Katson": App.HotS.Player.new("sla")
    "KchoXs": App.HotS.Player.new("sla")
    "Korhal": App.HotS.Player.new("sla")
    "Kristrex": App.HotS.Player.new("sla")
    "MacSF": App.HotS.Player.new("sla")
    "MatadorFivee": App.HotS.Player.new("sla")
    "Monthoros": App.HotS.Player.new("sla")
    "Moonlight": App.HotS.Player.new("sla")
    "Motta": App.HotS.Player.new("sla")
    "MrNewVegas": App.HotS.Player.new("sla")
    "Patoshin": App.HotS.Player.new("sla")
    "Pitchulinha": App.HotS.Player.new("sla")
    "Player": App.HotS.Player.new("sla")
    "Predator": App.HotS.Player.new("sla")
    "Psycho": App.HotS.Player.new("sla")
    "RamonBR": App.HotS.Player.new("sla")
    "Rooxyz": App.HotS.Player.new("sla")
    "Simon": App.HotS.Player.new("sla")
    "Sipher": App.HotS.Player.new("sla")
    "SpyGames": App.HotS.Player.new("sla")
    "Talicwolf": App.HotS.Player.new("sla")
    "Thunder": App.HotS.Player.new("sla")
    "Zaryanova": App.HotS.Player.new("sla")
    "Zuiurac": App.HotS.Player.new("sla")
  }












// Render function
App.HotS.draw: App.Draw<App.HotS.State>
  (state)
  open state
  open state.global
  let bids = state.global.bids
  let cash = state.global.cash
  let team = state.local
  <div>
    <div>
      "Team: "
      <input id="YourTeam"></input>
    </div>
    <div>
      "Cash: " | Nat.show(cash{team} <> 0)
    </div>
    <table>
      <tr style={"font-weight": "bold"}>
        <td style={"width": "100px"}>"Player"</td>
        <td style={"width": "100px"}>"Rank"</td>
        <td style={"width": "100px"}>"Value"</td>
        <td style={"width": "100px"}>"Team"</td>
        <td style={"width": "100px"}>"Buy"</td>
      </tr>
      for entry in Map.to_list!(App.HotS.players): 
        let {name, player} = entry
        open player
        use bid = bids{name} <> App.HotS.Bid.new(0, "none") 
        <tr>
          <td>name</td>
          <td>player.rank</td>
          <td>Nat.show(bid.value)</td>
          <td>bid.team</td>
          <td id=name style={"cursor": "pointer"}>"[buy]"</td>
        </tr>
    </table>
  </div>

App.HotS.room: String
  "e3ba48bd5379e903"

// Event handler
App.HotS.when: App.When<App.HotS.State>
  (event, state)
  let team = state@local
  case event {
    init: IO {
      App.watch!(App.HotS.room)
      App.new_post!(App.HotS.room, "")
    }
    input: IO {
      App.set_local!(event.text)
    }
    mouse_click: IO {
      log(event.id)
      let has_player = case App.HotS.players{event.id} as got { none: false, some: true }
      let has_team = case state@global@cash{team} as got { none: false, some: true }
      if has_player && has_team then IO {
        //IO.print("clicked: " | event.id)
        let action = App.HotS.Action.buy(team, event.id)
        let serial = Bits.hex.encode(Serializer.run!(App.HotS.Action.serializer, action))
        let serial = if Nat.mod(String.length(serial),2) =? 0 then serial else serial | "0"
        //log("sent-action:" | action@team | " <- " | action@player)
        //log("sent-serial:" | serial)
        App.new_post!(App.HotS.room, serial)
        App.pass!
      } else App.pass!
    }
  } default App.pass!

// Global ticker: not used
App.HotS.tick: App.Tick<App.HotS.State>
  App.no_tick<App.HotS.State>

// Global visitor: counts posts to room_zero
App.HotS.post: App.Post<App.HotS.State>
  (time, room, addr, data, global)
  open global
  //log("recv-serial:" | data)
  let post = Deserializer.run!(App.HotS.Action.deserializer, Bits.hex.decode(data)) abort global
  case post {
    buy:
      log(post.team | " purchased " | post.player)
      let player_value = (case global.bids{post.player} as bid { none: 0, some: bid.value@value })
      let last_team = (case global.bids{post.player} as bid { none: "", some: bid.value@team })
      let team_cash = global.cash{post.team} <> 0
      log(Nat.show(team_cash) | " >=? " | Nat.show(player_value))
      if team_cash >? player_value then
        let bids = global.bids{post.player} <- App.HotS.Bid.new(player_value + 1, post.team)
        let cash = global.cash
        let cash = cash{post.team} <- team_cash - (player_value + 1)
        let cash = cash{last_team} <- (cash{last_team} <> 0) + player_value
        App.HotS.State.Global.new(bids, cash)
      else
        global
  }

// A "HotS, world!" + counter application
App.HotS: App<App.HotS.State>
  App.new<App.HotS.State>(
    App.HotS.init
    App.HotS.draw
    App.HotS.when
    App.HotS.tick
    App.HotS.post
  )
