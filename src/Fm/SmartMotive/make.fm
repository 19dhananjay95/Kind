Fm.SmartMotive.make(
  name: Fm.Name,
  expr: Fm.Term, 
  type: Fm.Term,
  moti: Fm.Term,
  lv  : Nat,
  defs: Fm.Defs,
): Fm.Term
  let vals = Fm.SmartMotive.vals(expr,type,defs);
  let nams = Fm.SmartMotive.nams(name,type,defs);
  let subs = List.zip!!(nams,vals);
  //let skip = Debug.log!(String.flatten(["-expr: ", Fm.Term.show(expr)]), (x) Unit.new);
  //let skip = Debug.log!(String.flatten(["-type: ", Fm.Term.show(type)]), (x) Unit.new);
  //let skip = Debug.log!(String.flatten(["-type: ", Fm.Term.show(Fm.Term.reduce(type,defs))]), (x) Unit.new);
  //let skip = Debug.log!(String.flatten(["-vals: ", String.join(", ", List.mapped!(vals)!(Fm.Term.show))]), (x) Unit.new);
  //let skip = Debug.log!(String.flatten(["-nams: ", String.join(", ", nams)]), (x) Unit.new);
  //let skip = Debug.log!(String.flatten(["-moti: ", Fm.Term.show(moti)]), (x) Unit.new);
  let moti = List.fold!(subs)!(moti, (sub,moti) case sub {
    new: Fm.SmartMotive.replace(moti, sub.snd, Fm.Term.ref(sub.fst), lv),
  });
  //let skip = Debug.log!(String.flatten(["+moti: ", Fm.Term.show(moti)]), (x) Unit.new);
  moti