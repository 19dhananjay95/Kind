type App.Sharmi.State.global {
  new
}

type App.Sharmi.Game.State.local {
  new(
    players: List<App.Sharmi.Player>
    bodies: List<App.Sharmi.Body>
    goals: List<App.Sharmi.Goal>
    camera: Pair<V2, V2>
  )
}
type App.Sharmi.State.local {
  home
  game(
    state: App.Sharmi.Game.State.local
  )
}

App.Sharmi.room: String
  App.room("alsllsslsldlallsldkakdlslfls")

type App.Sharmi.Goal {
  new(
    pos: Physics.Verlet
  )
}

type App.Sharmi.Body {
  new(
    radius: F64
    mass: F64
    pos: Physics.Verlet
  )
}

type App.Sharmi.Player {
  new(
    name: String
    dir: V2
    pos: Physics.Verlet
  )
}

App.Sharmi.Field: Type
  (V2 -> V2)

App.Sharmi.Body.Gravity(body: App.Sharmi.Body): App.Sharmi.Field
  (p)
    open body; open body.pos;
    Physics.Gravity(body.pos.pos, body.mass, p)

App.Sharmi.Gravity(local: App.Sharmi.Game.State.local): App.Sharmi.Field
  (p)
  open local
  let acc = {0, 0} :: V2
  for body in local.bodies with acc:
    acc + App.Sharmi.Body.Gravity(body, p)
  acc

App.Sharmi.State: App.State
  App.State.new(App.Sharmi.State.local, App.Sharmi.State.global)

// Initial state
App.Sharmi.init: App.Init<App.Sharmi.State>
  let local = 
    App.Sharmi.State.local.game(
      App.Sharmi.Game.State.local.new(
        [] // List<App.Sharmi.Player>
        [] // List<App.Sharmi.Body>
        [] // List<App.Sharmi.Goal>
        {{0.0, 0.0} :: V2, {0.0, 0.0} :: V2} // Pair<V2, V2>
      )
    )
  App.Store.new<App.Sharmi.State>(local, App.Sharmi.State.global.new)

// Render function
App.Sharmi.draw: App.Draw<App.Sharmi.State>
   App.no_draw!
//  (state)
//  <div style={"border": "1px solid black"}>
//    <div style={"font-weight": "bold"}>"Sharmi, world!"</div>
//    <div>"Clicks: " | Nat.show(state@local)</div>
//    <div>"Visits: " | Nat.show(state@global)</div>
//  </div>
  //DOM.node("div", {}, {"border": "1px solid black"}, [
    //DOM.node("div", {}, {"font-weight": "bold"}, [DOM.text("Sharmi, world!")])
    //DOM.node("div", {}, {}, [DOM.text("Clicks: " | Nat.show(state@local))])
    //DOM.node("div", {}, {}, [DOM.text("Visits: " | Nat.show(state@global))])
  //])

// Event handler
App.Sharmi.when: App.When<App.Sharmi.State>
  (event, state)
  open state;
  case state.local {
    game:
      case event {
    //    init: IO {
    //      //App.watch!(App.Sharmi.room)
    //      //App.new_post!(App.room_zero, "")
    //    }
        frame: IO {
          open state.local.state;
          let new_bodies = []
          // apply gravity
          for body in state.local.state.bodies with new_bodies:
            open body; open body.pos
            let new_acc = App.Sharmi.Gravity(state.local.state, body.pos.pos)
            let new_pos = body.pos@acc <- new_acc
            let new_body = body@pos <- new_pos
            new_body & new_bodies
          let new_players = []
          for player in state.local.state.players with new_players:
            open player; open player.pos
            let new_acc = App.Sharmi.Gravity(state.local.state, player.pos.pos)
            let new_pos = player.pos@acc <- new_acc
            let new_player = player@pos <- new_pos
            new_player & new_players
          App.pass!
        }
      } default App.pass!
  } default App.pass!

// Global ticker: not used
App.Sharmi.tick: App.Tick<App.Sharmi.State>
  App.no_tick<App.Sharmi.State>

// Global visitor: counts posts to room_zero
App.Sharmi.post: App.Post<App.Sharmi.State>
  App.no_post<App.Sharmi.State>
//  (time, room, addr, data, global_state)
//  global_state + 1

// A "Sharmi, world!" + counter application
App.Sharmi: App<App.Sharmi.State>
  App.new<App.Sharmi.State>(
    App.Sharmi.init
    App.Sharmi.draw
    App.Sharmi.when
    App.Sharmi.tick
    App.Sharmi.post
  )

App.Sharmi.test_state: App.Sharmi.State.local
  let player0 = App.Sharmi.Player.new("Stanci", {0, 1}, Physics.Verlet.still({0, 20})) // x:0 y:20
  let player1 = App.Sharmi.Player.new("Rigi", {0, 1}, Physics.Verlet.still({10, -30.0})) // x:10 y:-30
  let ring0 = App.Sharmi.Goal.new(Physics.Verlet.still({10, 30})) // x:10 y:30
  let ring1 = App.Sharmi.Goal.new(Physics.Verlet.still({40, 0})) // x:40 y:0
  let body = App.Sharmi.Body.new(5, 50, Physics.Verlet.still({0, 0}))
  let camera = {{-40.0, -40.0} :: V2, {40, 40} :: V2}
  App.Sharmi.State.local.game(
    App.Sharmi.Game.State.local.new(
      [player0, player1] // List<App.Sharmi.Player>
      [body] // List<App.Sharmi.Body>
      [ring0, ring1] // List<App.Sharmi.Goal>
      camera // Pair<V2, V2>
    )
  )
