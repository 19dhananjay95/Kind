App.GG.Effect.projectile.add_at(pos: App.GG.Coord, projectile: App.GG.Projectile): App.GG.Effect<Unit>
  (center, origin, local)
  let new_grid = App.GG.Projectile.create(pos, projectile, local@grid)
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(unit, center, origin, new_local, (enemy, img) img, 0, "")


App.GG.Effect.projectile.get: App.GG.Effect<Maybe<App.GG.Projectile>>
  (center, origin, local)
  let projectile = App.GG.Projectile.get(center, origin, local@grid)
  App.GG.Effect.Result.new!(projectile, center, origin, local, (enemy, img) img, 0, "")


App.GG.Effect.projectile.move(new_pos: App.GG.Coord): App.GG.Effect<Bool>
  (center, origin, local)
  let grid = local@grid
  let {bool, new_grid} = 
    case origin {
      creature: {false, grid}
      projectile:
        let tile_exists =
          Maybe.is_some!(App.GG.Grid.get(new_pos, grid))
        let new_grid = App.GG.Projectile.move(center, new_pos, origin.id, grid)
        {tile_exists, new_grid}
    }
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(bool, center, origin, new_local, (enemy, img) img, 0, "")

App.GG.Effect.projectile.add_hit(pos: App.GG.Coord): App.GG.Effect<Unit>
  (center, origin, local)
  let grid = local@grid
  let new_grid =
    let creature = App.GG.Creature.get(pos, grid)
    without creature: grid
    let id = creature@id
    case origin {
      creature: grid
      projectile:
        App.GG.Projectile.add_hit(id, center, origin.id, grid)
    }
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(unit, center, origin, new_local, (enemy, img) img, 0, "")

App.GG.Effect.projectile.has_hit(pos: App.GG.Coord): App.GG.Effect<Bool>
  (center, origin, local)
  let grid = local@grid
  let bool =
    Maybe {
      get creature = App.GG.Creature.get(pos, grid)
      get projectile = App.GG.Projectile.get(center, origin, grid)
      let info = projectile@info
      let bool = NatSet.has(creature@id, info@hits)
      return bool
    } <> false
  App.GG.Effect.Result.new!(bool, center, origin, local, (enemy, img) img, 0, "")

App.GG.Effect.projectile.delete: App.GG.Effect<Unit>
  (center, origin, local)
  let grid = local@grid
  let new_grid = 
    case origin {
      creature: grid
      projectile: 
        App.GG.Projectile.delete(center, origin.id, grid)
    }
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(unit, center, origin, new_local, (enemy, img) img, 0, "")

App.GG.Effect.projectile.hit(dmg: I32, coord: App.GG.Coord): App.GG.Effect<I32>
  App.GG.Effect {
    get can_hit = App.GG.Effect.projectile.can_hit(coord)
    if can_hit then
      App.GG.Effect {
        App.GG.Effect.projectile.add_hit(coord) // Adds enemy to list of targets hit by projectile
        get dmg = App.GG.Effect.damage(dmg, true, true, coord) // TODO - change second true
        return dmg
      }
    else
      App.GG.Effect {return +0#32}
  } 

App.GG.Effect.projectile.can_hit(coord: App.GG.Coord): App.GG.Effect<Bool>
  App.GG.Effect {
    get has_hit  = App.GG.Effect.projectile.has_hit(coord) // Checks if projectile has already hit that enemy
    get is_enemy = App.GG.Effect.creature.is_enemy(coord) // Checks if projectile is over an enemy
    let is_invulnerable = false //App.GG.Effect.status.is_invulnerable(coord) // Checks if projectile is trying to affect an invulnerable enemy
    let is_noname = false //App.GG.Effect.status.is_noname(coord) // Checks if projectile is trying to affect a creature with noname
    return not(is_noname) && not(is_invulnerable) && not(has_hit) && is_enemy
  }
