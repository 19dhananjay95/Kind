#error #defs ((((((((error #error String) #error.origin #error.expected #error.detected #error.context !expected = (((error.expected #error.expected String) #error.expected.value error.expected.value) #error.expected.value (Fm.Term.show ((Fm.Term.normalize error.expected.value) (Map.new Fm.Def)))); !detected = (((error.detected #error.detected String) #error.detected.value error.detected.value) #error.detected.value (Fm.Term.show ((Fm.Term.normalize error.detected.value) (Map.new Fm.Def)))); (String.flatten (((List.cons String) "Type mismatch.\u{A}") (((List.cons String) "- Expected: ") (((List.cons String) expected) (((List.cons String) "\u{A}") (((List.cons String) "- Detected: ") (((List.cons String) detected) (((List.cons String) "\u{A}") (((List.cons String) (((error.context #error.context String) "") #error.context.head #error.context.tail (String.flatten (((List.cons String) "With context:\u{A}") (((List.cons String) (Fm.Context.show error.context)) (List.nil String)))))) (List.nil String))))))))))) #error.name #error.dref #error.verb #error.goal #error.context !goal_name = (String.flatten (((List.cons String) "Goal ?") (((List.cons String) (Fm.Name.show error.name)) (((List.cons String) ":\u{A}") (List.nil String))))); !with_type = (((error.goal #error.goal String) "") #error.goal.value !goal = (((Fm.Term.expand error.dref) error.goal.value) defs); (String.flatten (((List.cons String) "With type: ") (((List.cons String) (((error.verb # String) ((Fm.Term.show.go goal) ((Maybe.some @(:Bits) Bits) #x x))) (Fm.Term.show goal))) (((List.cons String) "\u{A}") (List.nil String)))))); !with_ctxt = (((error.context #error.context String) "") #error.context.head #error.context.tail (String.flatten (((List.cons String) "With ctxt:\u{A}") (((List.cons String) (Fm.Context.show error.context)) (List.nil String))))); (String.flatten (((List.cons String) goal_name) (((List.cons String) with_type) (((List.cons String) with_ctxt) (List.nil String)))))) #error.name (String.flatten (((List.cons String) "Waiting for \'") (((List.cons Fm.Name) error.name) (((List.cons String) "\'.") (List.nil String)))))) #error.name (String.flatten (((List.cons String) "Error on dependency \'") (((List.cons Fm.Name) error.name) (((List.cons String) "\'.") (List.nil String)))))) #error.path #error.term (String.flatten (((List.cons String) "Patching: ") (((List.cons String) (Fm.Term.show error.term)) (List.nil String))))) #error.origin #error.name (String.flatten (((List.cons String) "Undefined reference: ") (((List.cons String) (Fm.Name.show error.name)) (((List.cons String) "\u{A}") (List.nil String)))))) #error.origin #error.term #error.context !term = (Fm.Term.show error.term); !context = (Fm.Context.show error.context); (String.flatten (((List.cons String) "Can\'t infer type of: ") (((List.cons String) term) (((List.cons String) "\u{A}") (((List.cons String) "With ctxt:\u{A}") (((List.cons String) context) (List.nil String))))))))