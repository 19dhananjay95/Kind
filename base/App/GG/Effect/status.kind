// //TODO
// App.GG.Effect.status.is_invulnerable(pos: App.GG.Coord): App.GG.Effect<Bool>
//   (center, origin, local)
//   let bool = 
//     Maybe { 
//       get creature = App.GG.Creature.get(pos, grid)
//       return App.GG.Creature.status_check_invulnerable(creature)
//     } <> false
//   App.GG.Effect.Result.new!(bool, center, origin, grid, (enemy, img) img, 0, "")


// App.GG.Effect.status.is_noname(pos: App.GG.Coord): App.GG.Effect<Bool>
//   (center, origin, local)
//   let bool = 
//     Maybe { 
//       get creature = App.GG.Creature.get(pos, grid)
//       return App.GG.Creature.status_check_noname(creature)
//     } <> false
//   App.GG.Effect.Result.new!(bool, center, origin, grid, (enemy, img) img, 0, "")


// App.GG.Effect.status.add_noname(duration: U64): App.GG.Effect<Unit>
//   App.GG.Effect {
//     get frame = App.GG.Effect.frame.get
//     get center = App.GG.Effect.coord.get_center
//     let status = App.GG.Creature.Status.noname(duration)
//     let mod = App.GG.Creature.modify_at(App.GG.Creature.add_status(status), center)
//     App.GG.Effect.grid.modify(mod)
//   }

// App.GG.Effect.status.noname(
//   iframe: Bool
// ): App.GG.Effect<Unit>

//   App.GG.Effect { 
//     let animation = App.GG.Animation.damage
//     App.GG.Effect.stun(App.GG.Creature.Status.flinch, animation, 24)
//     if iframe then
//       App.GG.Effect.status.add_noname(1)
//     else
//       App.GG.Effect.pass
//   }

App.GG.Effect.status.get_at(id: Nat, pos: App.GG.Coord): App.GG.Effect<Maybe<Maybe<App.GG.Creature.Status>>>
  App.GG.Effect {
    get creature = App.GG.Effect.creature.get_at(pos)
    without creature: App.GG.Effect {return none}
    App.GG.Effect {
      return App.GG.Creature.Status.get_from_nat(id, creature@statuses)
    }
  }


App.GG.Effect.status.add_at(
  status: App.GG.Creature.Status
  pos: App.GG.Coord
): App.GG.Effect<Unit>
  let status_add = App.GG.Creature.Status.add(status)
  let mod = App.GG.Creature.modify_at(status_add, pos)
  App.GG.Effect.grid.modify(mod)


// App.GG.Effect.status.add_poison_at(
//   damage: I32
//   duration: U64
//   pos: App.GG.Coord
// ): App.GG.Effect<Unit>

//   App.GG.Effect {
//     get creature = App.GG.Effect.creature.get_at(pos)
//     without creature: App.GG.Effect.pass
//     let poison = App.GG.Creature.Status.poison(duration, damage)
//     App.GG.Effect.status.add_at(poison, pos)
//   }

// App.GG.Effect.status.poison_apply_at(
//   damage: I32
//   duration: U64
//   pos: App.GG.Coord
// ): App.GG.Effect<I32>
  
//   App.GG.Effect {
//     if duration >? 0 then
//       App.GG.Effect.creature.damage_at(damage, pos, false)
//     else
//       App.GG.Effect { return +0#32 }
//   }

// App.GG.Effect.status.apply_ot(
//   creature: App.GG.Creature
// ): App.GG.Effect<Unit>
  
//   App.GG.Effect {
//     let status = creature@status
//     case status { 
//       poison: App.GG.Effect.creature.damage_at(status.head.damage, status.head.duration, false)
//     }default  App.GG.Effect.pass
//   }
  

