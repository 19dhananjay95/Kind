Kind.Parser.letforrange.nat(body: Unit -> Parser(Kind.Term)): Parser(Kind.Term)
  Kind.Parser.block("let-for", Parser {
    Kind.Parser.text("let ")
    get name = Kind.Parser.name1
    Kind.Parser.text("=")
    Kind.Parser.text("for ")
    get elem = Kind.Parser.name1
    Kind.Parser.text("from")
    get idx0 = Kind.Parser.term
    Kind.Parser.text("to")
    get idx1 = Kind.Parser.term
    Kind.Parser.text(":")
    get loop = Kind.Parser.term
    Parser.maybe!(Kind.Parser.text(";"))
    get body = body(unit)
    let term = Kind.Term.ref("Nat.for")
    let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
    let term = Kind.Term.app(term, Kind.Term.ref(name))
    let term = Kind.Term.app(term, idx0)
    let term = Kind.Term.app(term, idx1)
    let lamb = Kind.Term.lam(elem, (e) Kind.Term.lam(name, (s) loop))
    let term = Kind.Term.app(term, lamb)
    let term = Kind.Term.let(name, term, (x) body)
    return term
  })

Kind.Parser.letforrange.nat.with(body: Unit -> Parser(Kind.Term)): Parser(Kind.Term)
  Kind.Parser.block("for", Parser {
    Kind.Parser.text("for ")
    get elem = Kind.Parser.name1
    Kind.Parser.text("from")
    get idx0 = Kind.Parser.term
    Kind.Parser.text("to")
    get idx1 = Kind.Parser.term
    Kind.Parser.text("with ")
    get name = Kind.Parser.name1
    Kind.Parser.text(":")
    get loop = Kind.Parser.term
    Parser.maybe!(Kind.Parser.text(";"))
    get body = body(unit)
    let term = Kind.Term.ref("Nat.for")
    let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
    let term = Kind.Term.app(term, Kind.Term.ref(name))
    let term = Kind.Term.app(term, idx0)
    let term = Kind.Term.app(term, idx1)
    let lamb = Kind.Term.lam(elem, (e) Kind.Term.lam(name, (s) loop))
    let term = Kind.Term.app(term, lamb)
    let term = Kind.Term.let(name, term, (x) body)
    return term
  })

Kind.Parser.letforrange(typename: String, body: Unit -> Parser(Kind.Term)): Parser(Kind.Term)
  Kind.Parser.block("let-for", Parser {
    Kind.Parser.text("let ")
    get name = Kind.Parser.name1
    Kind.Parser.text("=")
    Kind.Parser.text("for ")
    get elem = Kind.Parser.name1
    Kind.Parser.text(":")
    Kind.Parser.text(typename)
    Kind.Parser.text("from")
    get idx0 = Kind.Parser.term
    Kind.Parser.text("to")
    get idx1 = Kind.Parser.term
    Kind.Parser.text(":")
    get loop = Kind.Parser.term
    Parser.maybe!(Kind.Parser.text(";"))
    get body = body(unit)
    let term = Kind.Term.ref(typename|".for")
    let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
    let term = Kind.Term.app(term, Kind.Term.ref(name))
    let term = Kind.Term.app(term, idx0)
    let term = Kind.Term.app(term, idx1)
    let lamb = Kind.Term.lam(elem, (e) Kind.Term.lam(name, (s) loop))
    let term = Kind.Term.app(term, lamb)
    let term = Kind.Term.let(name, term, (x) body)
    return term
  })

Kind.Parser.letforrange.with(typename: String, body: Unit -> Parser(Kind.Term)): Parser(Kind.Term)
  Kind.Parser.block("for", Parser {
    Kind.Parser.text("for ")
    get elem = Kind.Parser.name1
    Kind.Parser.text(":")
    Kind.Parser.text(typename)
    Kind.Parser.text("from")
    get idx0 = Kind.Parser.term
    Kind.Parser.text("to")
    get idx1 = Kind.Parser.term
    Kind.Parser.text("with ")
    get name = Kind.Parser.name1
    Kind.Parser.text(":")
    get loop = Kind.Parser.term
    Parser.maybe!(Kind.Parser.text(";"))
    get body = body(unit)
    let term = Kind.Term.ref(typename|".for")
    let term = Kind.Term.app(term, Kind.Term.hol(Bits.e))
    let term = Kind.Term.app(term, Kind.Term.ref(name))
    let term = Kind.Term.app(term, idx0)
    let term = Kind.Term.app(term, idx1)
    let lamb = Kind.Term.lam(elem, (e) Kind.Term.lam(name, (s) loop))
    let term = Kind.Term.app(term, lamb)
    let term = Kind.Term.let(name, term, (x) body)
    return term
  })

Kind.Parser.letforrange.u32.with(body: Unit -> Parser(Kind.Term)): Parser(Kind.Term)
  Kind.Parser.letforrange.with("U32", body)

Kind.Parser.letforrange.u32(body: Unit -> Parser(Kind.Term)): Parser(Kind.Term)
  Kind.Parser.letforrange("U32", body)

Kind.Parser.letforrange.i32.with(body: Unit -> Parser(Kind.Term)): Parser(Kind.Term)
  Kind.Parser.letforrange.with("I32", body)

Kind.Parser.letforrange.i32(body: Unit -> Parser(Kind.Term)): Parser(Kind.Term)
  Kind.Parser.letforrange("I32", body)
