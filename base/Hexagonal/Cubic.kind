// Type for Cubic coordinates in an Hexagon
type Hexagonal.Cubic { 
    new(x:I32, y:I32, z:I32)
} deriving(stringifier)


// GENERAL FUNCTIONS
//===============================================

// Verifies the distance between two distinct Cubic coordinates
Hexagonal.Cubic.distance(
  coord_a: Hexagonal.Cubic
  coord_b: Hexagonal.Cubic
): I32

    open coord_a as axis_a
    open coord_b as axis_b
    subx = I32.sub(axis_a.x, axis_b.x)
    suby = I32.sub(axis_a.y, axis_b.y)
    subz = I32.sub(axis_a.z, axis_b.z)
    I32.max(I32.max(I32.abs(subx), I32.abs(suby)), I32.abs(subz))


// Returns a list of coordinates within a given range
Hexagonal.Cubic.range(
  coord: Hexagonal.Cubic
  distance: I32
): List<Hexagonal.Cubic>

  distance_32 = I32.to_u32(distance)
  double_distance = U32.add(U32.mul(distance_32, 2), 1) // distance * 2 + 1
  result = []
  for actual_distance : U32 from 0 to double_distance with result:
    negative_distance = I32.neg(distance)
    positive_distance = distance
    actual_distance = U32.to_i32(actual_distance)
    x = I32.sub(actual_distance, positive_distance)
    max = I32.max(negative_distance, I32.add(I32.neg(x), negative_distance)) //-1  1-1 0
    min = I32.min(positive_distance, I32.add(I32.neg(x), positive_distance)) //1   2   1
    distance_between_max_min = U32.add(1, I32.to_u32(I32.abs(I32.sub(max, min)))) // 1    
    for range : U32 from 0 to distance_between_max_min with result:
      y = I32.add(U32.to_i32(range), max)
      z = I32.sub(I32.neg(x), y)
      new_coord = Hexagonal.Cubic.add(coord, Hexagonal.Cubic.new(x,y,z))
      List.cons!(new_coord, result)
    result
  result

// Returns the sum of two points given two coordinates
Hexagonal.Cubic.add(
  coord_a: Hexagonal.Cubic,
  coord_b: Hexagonal.Cubic
): Hexagonal.Cubic

  open coord_a
  open coord_b
  x = coord_a.x + coord_b.x // I32
  y = coord_a.y + coord_b.y // I32
  z = coord_a.z + coord_b.z // I32
  Hexagonal.Cubic.new(x, y, z)


// Returns a Cubic coordinate as a String
Hexagonal.Cubic.show(
  coord: Hexagonal.Cubic
): String

  Stringifier.run!(Hexagonal.Cubic.stringifier, coord)


// CONVERSIONS
//===============================================

Hexagonal.Cubic.to_axial(
  coord: Hexagonal.Cubic
): Hexagonal.Axial

    open coord
    i = coord.x
    j = coord.z
    Hexagonal.Axial.new(i, j)
