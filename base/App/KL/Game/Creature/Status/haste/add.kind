App.KL.Game.Creature.Status.haste.add(
  creature: App.KL.Game.Creature
  duration: I32
  amount: I32
): App.KL.Game.Creature
  
  let haste_added = App.KL.Game.Creature.Status.haste.add.aux(duration, amount, creature@status)
  creature@status <- haste_added

App.KL.Game.Creature.Status.haste.add.aux(
  duration: I32
  amount: I32
  status: List<App.KL.Game.Creature.Status>
): List<App.KL.Game.Creature.Status>

  let new_haste = App.KL.Game.Creature.Status.haste(duration, amount)
  case status { 
    nil:
      new_haste & status
    cons:
      case status.head { 
        haste: 
          let new_amount = status.head.amount + amount
          if I32.gtn(new_amount, 2) then 
            let limit_haste = App.KL.Game.Creature.Status.haste(status.head.duration, 2)
            limit_haste & status.tail
          else
            let add_haste = App.KL.Game.Creature.Status.haste(duration, new_amount)
            add_haste & status.tail
      }default status.head & App.KL.Game.Creature.Status.haste.add.aux(duration, amount, status.tail)
  }
