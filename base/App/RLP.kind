App.RLP.article: DOM
  <article> 
  <h3>` Kind is amazing ^-^ `</h3>
  <p>`
  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
  incididunt ut labore et dolore magna aliqua. Nibh ipsum consequat nisl vel
  pretium lectus quam id. Tempor orci eu lobortis elementum nibh. Nulla facilisi
  cras fermentum odio eu feugiat. Est velit egestas dui id. Blandit aliquam
  etiam erat velit. 
  `</p>
  <p>`
  Donec ultrices tincidunt arcu non. Eu nisl nunc mi ipsum faucibus vitae
  aliquet nec. Duis tristique sollicitudin nibh sit amet commodo nulla facilisi
  nullam. Malesuada bibendum arcu vitae elementum curabitur vitae nunc sed
  velit. Nullam eget felis eget nunc lobortis mattis aliquam faucibus purus. 
  `</p>
  </article>

App.RLP.State: App.State
  App.State.new(App.RLP.State.Local, App.RLP.State.Global)

type App.RLP.State.Local {
  new(
    decoded_text: String
    encoded_text: String
  )
}

App.RLP.State.Local.default: App.RLP.State.Local
  App.RLP.State.Local.new("", "")

App.RLP.State.Global: Type
  Unit

App.RLP.draw(local_state: App.RLP.State.Local): DOM
  <div>
  <style>`
    .center-box {
      margin: auto;
      max-width: 512px;
    }
    main > * {
      margin-bottom: 1em;
    }
    main hr {
      border-color: #FDFDFD;
    }
    .page-block {
      width: 100%;
      padding: 16px;
    }
    .page-block.bg {
      border-radius: 8px;
      background-color: rgb(245,245,245);
    }
    .block-label {
      padding-bottom: 0.5em;
    }
    textarea.text-input {
      width: 100%;
      min-height: 10em;
    }
    .button-wrapper button {
      display: inline-block;
      margin-left: auto;
      margin-right: 0;
    }
    article * {
      margin-bottom: 1em;
    }
    footer {
      display: flex;
      justify-content: space-between;
      padding: 2em 1em;
    }
  `</style>
  <main class="center-box">
    <div class="page-block">
      <h1> "RLP encoder/decoder" </h1>
      <p class="subtitle"> "Formally verified with Kind!" </p>
    </div>
    <div class="page-block bg">
      <p class="block-label"> "Input:" </p>
      <textarea id="decoded-text" class="text-input" value=local_state@decoded_text>
      </textarea>
      <div class="button-wrapper">
        <button id="btn-encode">` Encode `</button>
      </div>
    </div>
    <div class="page-block bg">
      <p class="block-label"> "Output:" </p>
      <textarea id="encoded-text" class="text-input" value=local_state@encoded_text>
      </textarea>
      <div class="button-wrapper">
        <button id="btn-decode">` Decode `</button>
      </div>
    </div>
    <hr></hr>
    <div class="page-block bg">
      { App.RLP.article }
    </div>
  </main>
  <footer class="center-box">
    <div id="join-us">
      <p><strong>` Join Us `</strong></p>
      <p><a href="https://github.com/kind-lang/Kind">
        `Github`
      </a></p>
      <p><a href="https://t.me/formality_lang">
        `Telegram`
      </a></p>
    </div>
    <div>
      `made with ‚ù§ using `
      <a href="https://github.com/kind-lang/Kind">
        `Kind-lang`
      </a>
      // ` by ??`
    </div>
  </footer>
  </div>
 
App.RLP.when(
  event: App.Event
  store: App.Store<App.RLP.State>
): IO<Maybe<App.State.local(App.RLP.State)>>
  let state = store@local
  case event {
    input:
      switch String.eql(event.id) {
        "decoded-text":
          log("decoded: "|event.text)
          let state = state@decoded_text <- event.text
          case Parser.run!(Ether.RLP.parser, event.text) {
            none:
              App.set_local!(state)
            some:
              App.set_local!(state@encoded_text <- Bytes.to_hex(Ether.RLP.encode(self.value)))
          }
        "encoded-text":
          log("encoded: "|event.text)
          let state = state@encoded_text <- event.text
          let cond = (Nat.mod(String.length(event.text), 2) =? 0) && String.is_hex(event.text)
          if cond then
            App.set_local!(state@decoded_text <- Ether.RLP.show(Ether.RLP.decode(Bytes.from_hex(event.text))))
          else
            App.set_local!(state)
          //App.set_local!(state@decoded_text <- Ether.RLP.show(Ether.RLP.decode(Bytes.from_hex(event.text))))
      } default App.pass!
    mouse_click:
      switch String.eql(event.id) {
        "btn-encode":
          App.set_local!(state@encoded_text <- "NEW")
        "btn-decode":
          App.set_local!(state@decoded_text <- "NEW")
      } default App.pass!
  } default App.pass!

App.RLP: App(App.RLP.State)
  let init =
    App.Store.new!(
      App.RLP.State.Local.default
      Unit.new
    )
  def St = App.RLP.State
  let draw = (state) App.RLP.draw(state@local)
  let when = App.RLP.when
  let tick = App.no_tick<St>
  let post = App.no_post<St>
  App.new!(init, draw, when, tick, post)
