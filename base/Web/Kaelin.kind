// init:
// Bem-vindo ao Kaelin!
// Digite uma sala e aperte enter: 0x108309300

// void:
// Sala vazia. Digite um DraftString para começar um jogo:
// sipher@Croni, sejagentil@Zeralul / stanci@Murlok, derenash@Keropao

// A demo application that renders a square on the screen
Web.Kaelin: App(Web.Kaelin.State)
  let img = Image3D.alloc_capacity(65536u)

  let ent_r = Web.Kaelin.Entity.new(Col32.new(255u,0u,0u,255u))
  let ent_g = Web.Kaelin.Entity.new(Col32.new(0u,255u,0u,255u))
  let ent_b = Web.Kaelin.Entity.new(Col32.new(0u,0u,255u,255u))

  // Initial state
  let init = 
    let Pos = Web.Kaelin.Coord.new
    let pos = Pos(Int.new(0, 0), Int.new(0, 2))
    let map = {}
    let map = Web.Kaelin.Map.push( Pos( Int.new(0, 0) ,Int.new(0, 0) ),ent_r,map)
    let map = Web.Kaelin.Map.push( Pos( Int.new(0, 1) ,Int.new(0, 0) ),ent_g,map)
    let map = Web.Kaelin.Map.push(pos,ent_b,map)
    Web.Kaelin.State.game("0x000000000000", 0, pos, map)

  // Render function
  //  0s - 10s: contagem regressiva
  // 10s - 20s: escolha do turno 0
  // 20s - 30s: animação do turno 0
  // 30s - 40s: escolha do turno 1
  // 40s - 50s: animação do turno 1
  // 50s - 60s: escolha do turno 2
  let draw = (state)
    case state {
      game: 
        let map = state.map
        let img = Image3D.clear(img) // O(1)
        let col = Col32.new(0u, 0u, 255u, 255u)
        let rad = 10u
        for j : U32 from 0u to 5u with img:
          for i : U32 from 0u to 5u with img:
            let half = U32.div(5u, 2u)
            let coord_i = Int.sub(Int.new(0, U32.to_nat(i)), Int.new(0, U32.to_nat(half)))
            let coord_j = Int.sub(Int.new(0, U32.to_nat(j)), Int.new(0, U32.to_nat(half)))
            let coord = Web.Kaelin.Coord.new( coord_i, coord_j)
            // Draws the hexagon border
            let {cx,cy} = Web.Kaelin.Coord.to_screen_xy(coord)
            let draw_e = Bool.or(Bool.and(U32.eql(U32.mod(j,2u),0u),U32.eql(i,0u)),U32.eql(j,4u))
            let draw_f = Bool.or(Bool.and(U32.eql(U32.mod(j,2u),1u),U32.eql(i,4u)),U32.eql(j,4u))
            let img    = Image3D.Draw.deresagon(cx,cy,0u,rad,col,true,true,true,true,draw_e,draw_f,img)
            // Draws the entities
            let img = Web.Kaelin.Draw.tile(coord, map, img)
            img
          img
        App.Render.pix(img)
    } default App.Render.txt("TODO: create the renderer for this game state mode")

  // Event handler
  let when = (event, state)
    case event {
      xkey:
        if event.down then
          switch U16.eql(event.code) {
            'D':
              case state {
                init: []
                void: []
                game:
                  // TODO: Web.Kaelin.Map.swap(i, ca, cb, map)
                  // let old_pos = state.pos
                  // let new_pos = case old_pos {
                  //   new: Web.Kaelin.Coord.new(U32.add(old_pos.i,1u),old_pos.j)
                  // }
                  // let {map,ent} = Web.Kaelin.Map.pop(old_pos, state.map)
                  // let map = case ent {
                  //   none: map
                  //   some: Web.Kaelin.Map.push(new_pos, ent.value, map)
                  // }
                  //let state = Web.Kaelin.State.game(state.room, state.tick, new_pos, map)
                  [App.Action.state!(state)]
              }
          } default []
        else []
    } default []

  // The application
  App.new!(init, draw, when)
