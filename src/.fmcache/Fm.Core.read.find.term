#A #list #cond #indx #skip (((list #list (Maybe ((Pair A) Nat))) (Maybe.none ((Pair A) Nat))) #list.head #list.tail (((((cond list.head) indx) # (Maybe ((Pair A) Nat))) (((((Nat.eql skip) +0) # (Maybe ((Pair A) Nat))) ((Maybe.some ((Pair A) Nat)) ((((Pair.new A) Nat) list.head) indx))) (((((Fm.Core.read.find A) list.tail) cond) (Nat.succ indx)) (Nat.pred skip)))) (((((Fm.Core.read.find A) list.tail) cond) (Nat.succ indx)) skip)))