// Gets the nth number of the Fibonacci sequence
def fib: {n}
  let init = [0,1]
  let loop = {state}
    get [a, b] = state
    cpy b      = b
    [b, |a + b|]
  let stop = {state}
    (snd state)
  (for n #init #loop #stop)

// `inf` is an external utility for non-termination and constant-space loops
inf fib1m:
  init:
    [0, [0, 1]]
  step:
    get [i, p] = self
    cpy b      = b
    [|i + 1|, [b, |a + b|]]
  stop:
    get [i, p] = self
    |i == 1000000|
  done:
    snd snd self

inf fact1m:
  init: [1, 1]
  step:
    get [i, n] = self
    cpy i      = i
    [|i + 1|, |n * i|]
  stop: |fst self == 1000000|
  done: snd self

def boxed_add: {x y}
  dup x = x
  dup y = y
  # |x + y|
