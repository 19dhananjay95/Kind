// Renders App
App.GG.draw(img: VoxBox): App.Draw<App.GG.State>
  (state)
  <div style={
    "height": "100vh"
    "width": "100vw"
  }>
    <div style={
        "max-height": "100%",
        "max-width": "100%",
        "display": "flex",
        "overflow": "hidden",
        "align-items": "center",
        "justify-content": "center"
      }>{
        DOM.vbox({
            "class": "pixel-art" 
            "id": "game_screen",
            "width": "1024px",
            "height": "1024px",
            "scale": "4"
          },
          {},
          App.GG.draw.grid(state@local@grid, img)) 
      }</div>
  </div>

// Draws the grid
App.GG.draw.grid(
  grid: App.GG.Grid
  img: VoxBox
): VoxBox
  for key:val in grid with img:
    App.GG.draw.tile(key, val, {32,32}, {40,40}, grid, img)
  img

// Draws a tile and its contents
App.GG.draw.tile(
  coord: App.GG.Coord,
  tile: App.GG.Tile,
  tile_size: Pair<U32, U32>,
  start: Pair<U32, U32>
  grid: App.GG.Grid
  img: VoxBox
): VoxBox
  let {x, y} = App.GG.Coord.to_xy(coord)
  let tile_img = 
    case tile@owner {
      blue:     App.GG.img.ally_tile
      red:      App.GG.img.enemy_tile
      neutral:  App.GG.img.target_tile
    }
  let creature = tile@creature
  let img = 
    VoxBox.Draw.image(x, y, 0, tile_img, img)
  let img =
    case creature {
      none:
        img
      some:
        let f = App.GG.Monster.to_vbox(creature.value@category)
        let sprite = f(creature.value@animation@fst, creature.value@animation@snd)
        let img = VoxBox.Draw.image_colorize(x, y, 20, Col32.new_hue(F64.to_u32(U64.to_f64((creature.value@animation@snd % 1024) / 4))), sprite, img)
        let img = VoxBox.Draw.text(I32.show(creature.value@hp), PixelFont.small_black, Pos32.new(x + 122,y + 100, 200), img)
        img
    }
  
  let pair = {0, img}
  for projectile in tile@projectiles with pair:
    let {idx, img} = pair
    let origin = App.GG.Effect.Origin.projectile(idx)
    let result = projectile@effect(coord, origin, grid)
    case result {
      err: {idx + 1, img}
      new: {idx + 1, result.img(img)}
    }
  img
