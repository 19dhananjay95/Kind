// This function is fully expanded for max performance
Bits.hex.encode(x: Bits): String
  Bits.hex.encode.go("", x)

Bits.hex.encode.go(acc: String, x: Bits): String
  case x {
    e: acc
    o: case x.pred as x {
      e: acc|"0"
      o: case x.pred as x {
        e: acc|"0"
        o: case x.pred as x {
          e: acc|"0"
          o: Bits.hex.encode.go(acc|"0", x.pred)
          i: Bits.hex.encode.go(acc|"8", x.pred)
        }
        i: case x.pred as x {
          e: acc|"4"
          o: Bits.hex.encode.go(acc|"4", x.pred)
          i: Bits.hex.encode.go(acc|"c", x.pred)
        }
      }
      i: case x.pred as x {
        e: acc|"2"
        o: case x.pred as x {
          e: acc|"2" 
          o: Bits.hex.encode.go(acc|"2", x.pred)
          i: Bits.hex.encode.go(acc|"a", x.pred)
        }
        i: case x.pred as x {
          e: acc|"6"
          o: Bits.hex.encode.go(acc|"6", x.pred)
          i: Bits.hex.encode.go(acc|"e", x.pred)
        }
      }
    }
    i: case x.pred as x {
      e: acc|"1"
      o: case x.pred as x {
        e: acc|"1"
        o: case x.pred as x {
          e: acc|"1"
          o: Bits.hex.encode.go(acc|"1", x.pred)
          i: Bits.hex.encode.go(acc|"9", x.pred)
        }
        i: case x.pred as x {
          e: acc|"5"
          o: Bits.hex.encode.go(acc|"5", x.pred)
          i: Bits.hex.encode.go(acc|"d", x.pred)
        }
      }
      i: case x.pred as x {
        e: acc|"3"
        o: case x.pred as x {
          e: acc|"3" 
          o: Bits.hex.encode.go(acc|"3", x.pred)
          i: Bits.hex.encode.go(acc|"b", x.pred)
        }
        i: case x.pred as x {
          e: acc|"7"
          o: Bits.hex.encode.go(acc|"7", x.pred)
          i: Bits.hex.encode.go(acc|"f", x.pred)
        }
      }
    }
  }

Bits.hex.decode(x: String): Bits
  case x {
    nil: Bits.e
    cons:
      switch U16.eql(x.head) {
        '0': Bits.o(Bits.o(Bits.o(Bits.o(Bits.hex.decode(x.tail)))))
        '1': Bits.i(Bits.o(Bits.o(Bits.o(Bits.hex.decode(x.tail)))))
        '2': Bits.o(Bits.i(Bits.o(Bits.o(Bits.hex.decode(x.tail)))))
        '3': Bits.i(Bits.i(Bits.o(Bits.o(Bits.hex.decode(x.tail)))))
        '4': Bits.o(Bits.o(Bits.i(Bits.o(Bits.hex.decode(x.tail)))))
        '5': Bits.i(Bits.o(Bits.i(Bits.o(Bits.hex.decode(x.tail)))))
        '6': Bits.o(Bits.i(Bits.i(Bits.o(Bits.hex.decode(x.tail)))))
        '7': Bits.i(Bits.i(Bits.i(Bits.o(Bits.hex.decode(x.tail)))))
        '8': Bits.o(Bits.o(Bits.o(Bits.i(Bits.hex.decode(x.tail)))))
        '9': Bits.i(Bits.o(Bits.o(Bits.i(Bits.hex.decode(x.tail)))))
        'a': Bits.o(Bits.i(Bits.o(Bits.i(Bits.hex.decode(x.tail)))))
        'b': Bits.i(Bits.i(Bits.o(Bits.i(Bits.hex.decode(x.tail)))))
        'c': Bits.o(Bits.o(Bits.i(Bits.i(Bits.hex.decode(x.tail)))))
        'd': Bits.i(Bits.o(Bits.i(Bits.i(Bits.hex.decode(x.tail)))))
        'e': Bits.o(Bits.i(Bits.i(Bits.i(Bits.hex.decode(x.tail)))))
        'f': Bits.i(Bits.i(Bits.i(Bits.i(Bits.hex.decode(x.tail)))))
        'A': Bits.o(Bits.i(Bits.o(Bits.i(Bits.hex.decode(x.tail)))))
        'B': Bits.i(Bits.i(Bits.o(Bits.i(Bits.hex.decode(x.tail)))))
        'C': Bits.o(Bits.o(Bits.i(Bits.i(Bits.hex.decode(x.tail)))))
        'D': Bits.i(Bits.o(Bits.i(Bits.i(Bits.hex.decode(x.tail)))))
        'E': Bits.o(Bits.i(Bits.i(Bits.i(Bits.hex.decode(x.tail)))))
        'F': Bits.i(Bits.i(Bits.i(Bits.i(Bits.hex.decode(x.tail)))))
      } default Bits.e
  }
