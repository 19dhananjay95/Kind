// Can we...
// 1. Use only 32 bit per nasic node?
// 2. Keeps wired nodes at a distance < 128 through all the reduction?
// Seems like yes, kinda. Probably 64 bit would be ideal. This would allow us
// to fit a slice of the graph on a single streaming multiprocessor! The main
// challenge will be efficiently moving nodes to keep the distance minimal.

function draw(nums, cols) {
  return nums.map((x,i) => {
    var num = Math.max(Math.min(x, 1), 0);
    var chr = ",▁▂▃▄▅▆▇█"[Math.floor(num * 8)];
    var col = cols[i] == 0 ? "\x1b[33m" : cols[i] == 1 ? "\x1b[32m" : "\x1b[31m";
    var res = "\x1b[0m";
    return col + chr + res;
  }).join("");
};

var MODE = "Normal";

if (MODE === "32bit") {
  // 32-bit
  var nod = (k,ad,as,bd,bs,cd,cs) => (1<<31)|(k<<30)|(as<<28)|((ad+128)<<20)|(bs<<18)|((bd+128)<<10)|(cs<<8)|(cd+128);
  var kin = (nod) => (nod >>> 30) & 0x1; // get kind
  var dst = (nod,s) => ((nod >>> (20 - s * 10)) & 0xFF) - 128; // get target distance of port `s`
  var slt = (nod,s) => ((nod >>> (28 - s * 10)) & 0x3); // get target slot of port `s`
  var add = (nod,s,k) => nod + (k << (20 - s * 10)); // add k to slot s
  var mov = (nod,d) => nod + (-d << 20) + (-d << 10) + -d; // dd d to all slots
  var set = (nod,s,D,S) => nod&~(0x3FF<<(20-s*10))|(((S<<8)|(D+128))<<(20-s*10)); // set ptr on slot s to ti,ts
  var eql = (a,b) => a === b;
} else {
  // Normal
  var nod = (k,ad,as,bd,bs,cd,cs) => [k,ad,as,bd,bs,cd,cs];
  var kin = (nod) => nod[0]; // get kind
  var dst = (nod,s) => nod[1 + s * 2]; // get target distance of port `s`
  var slt = (nod,s) => nod[2 + s * 2]; // get target slot of port `s`
  var add = (nod,s,k) => { var nod = nod.slice(0); nod[1 + s * 2] += k; return nod; }// add k to slot s
  var mov = (nod,d) => add(add(add(nod,0,-d),1,-d),2,-d); // dd d to all slots
  var set = (nod,s,D,S) => { var nod = nod.slice(0); nod[1 + s * 2] = D; nod[2 + s * 2] = S; return nod; } // set ptr on slot s to ti,ts
  var eql = (a,b) => JSON.stringify(a) === JSON.stringify(b);
}

var air = nod(0, 0,0, 0,1, 0,2);
var ela = (n) => Math.sign(n) * n * n;
var pow = (nod) => ela(dst(nod,0)) + ela(dst(nod,1)) + ela(dst(nod,2));
var max = (nod) => Math.max(Math.abs(dst(nod,0)), Math.max(Math.abs(dst(nod,1)), Math.abs(dst(nod,2))));
var sho = (nod) => eql(nod, air) ? "~" : kin(nod) + "[" + dst(nod,0) + "abc"[slt(nod,0)] + "|" + dst(nod,1) + "abc"[slt(nod,1)] + "|" + dst(nod,2) + "abc"[slt(nod,2)] + "] " + "{" + pow(nod).toFixed(2) + "}";
var str = net => net.map((k,i) => "| " + ("0000" + i).slice(-4) + " : " + sho(k)).join("\n");

var alloc = (net) => {
  net.push(air);
  return net.length - 1;
};

var alloc_4_near = (net, i) => {
  var k = 0;
  var I = [];
  do {
    var k = k + 1;
    var n = i + ((k % 2) * 2 - 1) * Math.floor(k / 2);
    var a = n >= 0 && n < net.length ? net[n] : 0;
    if (eql(a, air)) {
      I.push(n);
    }
  } while (k < 32 && I.length < 4);
  return I.length === 4 ? I : null;
};

var link = (net, ai, as, bi, bs) => {
  net[ai] = set(net[ai], as, bi - ai, bs);
  net[bi] = set(net[bi], bs, ai - bi, as);
};

var unlink = (net, ai, as) => {
  var an = net[ai];
  var bi = dst(an,as) + ai;
  var bs = slt(an,as);
  var bn = net[bi];
  if (dst(bn,bs) + bi === ai && slt(bn,bs) === as) {
    net[ai] = set(an, as, 0, as);
    net[bi] = set(bn, bs, 0, bs);
  }
};

var rewrite = (net, ai) => {
  var as = 0;
  var an = net[ai];
  var bi = ai + dst(an,0);
  var bs = 0;
  var bn = net[bi];
  if (redex_type(net, ai) === 0) { return false; }
  if (kin(an) === kin(bn)) {
    var a1i = dst(net[ai], 1) + ai;
    var a1s = slt(net[ai], 1);
    var b1i = dst(net[bi], 1) + bi;
    var b1s = slt(net[bi], 1);
    link(net, a1i, a1s, b1i, b1s);
    var a2i = dst(net[ai], 2) + ai;
    var a2s = slt(net[ai], 2);
    var b2i = dst(net[bi], 2) + bi;
    var b2s = slt(net[bi], 2);
    link(net, a2i, a2s, b2i, b2s);
  } else {
    var ki = Math.floor((ai + bi) / 2);
    var al = alloc_4_near(net, ki);
    if (al === null) { return false; }
    var [ci, di, ei, fi] = al;
    net[ci] = nod(kin(bn), 0,0, fi - ci, 1, ei - ci, 1); 
    net[di] = nod(kin(bn), 0,0, fi - di, 2, ei - di, 2); 
    net[ei] = nod(kin(an), 0,0, ci - ei, 2, di - ei, 2);
    net[fi] = nod(kin(an), 0,0, ci - fi, 1, di - fi, 1);
    link(net, ci, 0, dst(net[ai],1) + ai, slt(net[ai],1));
    link(net, di, 0, dst(net[ai],2) + ai, slt(net[ai],2));
    link(net, ei, 0, dst(net[bi],2) + bi, slt(net[bi],2));
    link(net, fi, 0, dst(net[bi],1) + bi, slt(net[bi],1));
  }
  for (var s = 0; s < 3; s++) {
    unlink(net, ai, s);
    unlink(net, bi, s);
  }
  net[ai] = air;
  net[bi] = air;
  return true;
};

var redex_type = (net, ai) => {
  var an = net[ai];
  var bi = dst(an, 0) + ai;
  var bn = net[bi];
  if (slt(an, 0) === 0 && dst(an, 0) + dst(bn, 0) === 0 && !eql(an,air)) {
    return kin(an) === kin(bn) ? 1 : 2;
  } else {
    return 0;
  }
};

var redexes = (net) => {
  var redexes = [];
  for (var ai = 0; ai < net.length; ++ai) {
    var bi = dst(net[ai], 0) + ai;
    if (ai <= bi && redex_type(net, ai) > 0) {
      redexes.push([ai,bi]);
    }
  }
  return redexes;
};

var move = (net, ai, bi) => {
  var an = net[ai];
  var bn = net[bi]; 
  net[bi] = mov(an, bi - ai);
  net[ai] = mov(bn, ai - bi);
  for (var s = 0; s < 3; ++s) {
    var ad = dst(an, s);
    var as = slt(an, s);
    var bd = dst(bn, s);
    var bs = slt(bn, s);
    var ci = ad === 0 ? bi : ad === bi - ai ? ai : ai + ad;
    var di = bd === 0 ? ai : bd === ai - bi ? bi : bi + bd;
    net[ci] = add(net[ci], as, bi - ai);
    net[di] = add(net[di], bs, ai - bi);
  }
};

var valid = (net) => {
  for (var ai = 0; ai < net.length; ++ai) {
    for (var as = 0; as < 3; ++as) {
      var an = net[ai];
      var bi = dst(an, as) + ai;
      var bs = slt(an, as);
      var bn = net[bi];
      if (dst(bn,bs) !== ai - bi || slt(bn,bs) !== as) {
        return ["no", [[ai, as], [bi, bs]]];
      }
    }
  }
  return ["yes"];
};

var temperature = (net) => {
  var t = 0;
  for (var i = 0; i < net.length; ++i) {
   t += Math.abs(pow(net[i]));
  }
  return t / net.length;
};

var maximum = (net) => {
  var m = 0;
  for (var i = 0; i < net.length; ++i) {
    m = Math.max(max(net[i]), m);
  }
  return m;
};

var chill = (net) => {
  for (var i = 0; i < net.length - 1; i += 2) {
    if (pow(net[i]) > pow(net[i+1])) {
      move(net, i, i + 1);
    }
  }
  for (var i = 1; i < net.length - 1; i += 2) {
    if (pow(net[i]) > pow(net[i+1])) {
      move(net, i, i + 1);
    }
  }
};

var shrink = (net) => {
  for (var i = 0; i < net.length; ++i) {
    if (!eql(net[i], air)) break;
  }
  for (var j = net.length - 1; j >= 0; --j) {
    if (!eql(net[j], air)) break;
  }
  for (var q = i; q < j + 1; ++q) {
    move(net, q, q - i);
  }
  net.length = j - i + 1;
};

var expand = (net, ratio = 2) => {
  var len = net.length;
  for (var i = 0; i < len * (ratio - 1); ++i) {
    net.push(air);
  };
  for (var i = 0; i < len; ++i) {
    move(net, (len - i - 1), (len - i - 1) * ratio);
  }
};

var collapse = (net) => {
  for (var i = 0; i < net.length; ++i) {
    if (eql(net[i], air)) {
      var j = i + 1;
      while (eql(net[j], air)) {
        ++j;
      }
      if (j === net.length) {
        net.length = i;
        return;
      } else {
        move(net, i, j);
      }
    }
  };
};

function plot(nums, cols) {
  return nums.map((x,i) => {
    var ryg = ["\x1b[31m", "\x1b[33m", "\x1b[32m", "\x1b[32m"];
    var num = Math.max(Math.min(x, 1), 0);
    var chr = " ▁▂▃▄▅▆▇█"[Math.floor(x * 8)];
    var col = ryg[Math.floor((cols ? Math.max(Math.min(cols[i], 1), 0) : num) * 3)];
    var res = "\x1b[0m";
    return col + chr + res;
  }).join("");
};

var print = (net, show = {nodes: 1, stats: 1, heat: 1}) => {
  if (show.stats) {
    console.log("________");
    console.log("| Len  : " + net.length);
    console.log("| Chk  : " + valid(net)[0]);
    console.log("| Tmp  : " + temperature(net).toFixed(2));
    console.log("| Max  : " + maximum(net).toFixed(2));
    console.log("| Rdx  : " + redexes(net).filter(([ai,bi]) => kin(net[ai]) === kin(net[bi])).length + " - " + redexes(net).filter(([ai,bi]) => kin(net[ai]) !== kin(net[bi])).length);
  }
  if (show.nodes) {
    console.log(str(net));
  }
  if (show.stats) {
    console.log("________");
  }
  if (show.heat) {
    console.log(draw(net.map(nod => eql(nod,air) ? 0 : 1/8 + Math.sqrt(Math.abs(pow(nod))) / 64), net.map((an,ai) => redex_type(net,  ai))));
  }
};

var tree = (net, d, pi, ps) => {
  var ai = alloc(net);
  net[ai] = air;
  link(net, ai, 0, pi, ps);
  if (d > 0) {
    var li = tree(net, d - 1, ai, 1);
    var ri = tree(net, d - 1, ai, 2);
  }
  return ai;
};

var reduce_pass = (net, only_ani = false) => {
  var rdx = redexes(net);
  var rwt = 0;
  for (var i = 0; i < rdx.length; ++i) {
    if (!only_ani || kin(net[rdx[i][0]]) === kin(net[rdx[i][1]])) {
      var done = rewrite(net, rdx[i][0]);
      if (done) {
        rwt += 1;
      }
    }
  }
  return rwt;
};

var reduce = (net) => {
  var rwt = 0;
  var aux = 0;
  while ((aux = reduce_pass(net)) > 0) {
    rwt += aux;
  }
  return rwt;
};

var from_diffnet = (diffnet) => {
  return diffnet.map(([k,ad,as,bd,bs,cd,cs]) => nod(k,ad,as,bd,bs,cd,cs));
}

var count = net => {
  var k = 0;
  for (var i = 0; i < net.length; ++i) {
    if (JSON.stringify(net[i]) !== JSON.stringify(air)) {
      ++k;
    }
  }
  return k;
};

var semantic = (net, ai, as, exit = ["",""]) => {
  if (ai === undefined) { [ai,as] = find_root(net); }
  var an = net[ai];
  var ak = kin(an);
  if (as === 0) {
    if (exit[ak].length > 0) {
      var new_exit = exit.slice(0);
      new_exit[ak] = new_exit[ak].slice(1);
      return semantic(net, dst(an, Number(exit[ak][0])) + ai, slt(an, Number(exit[ak][0])), new_exit);
    } else {
      return "(" + ak + " " + semantic(net,dst(an,1)+ai,slt(an,1),exit) + " " + semantic(net,dst(an,2)+ai,slt(an, 2),exit) + ")";
    }
  } else {
    if (dst(an, 0) === 0 && slt(an, 0) !== 0) {
      return "[" + exit.map(x => "{"+x+"}").join("") + "]";
    } else {
      var new_exit = exit.slice(0);
      new_exit[ak] = String(as) + new_exit[ak];
      return semantic(net, dst(an, 0) + ai, slt(an, 0), new_exit);
    }
  }
};

var find_root = net => {
  for (var ai = 0; ai < net.length; ++ai) {
    var an = net[ai];
    if (dst(an,0) === 0 && slt(an,0) !== 0) {
      var s = [0,2,1][slt(an,0)];
      return [dst(an,s) + ai, slt(an,s)]; 
    }
  }
  return null;
};


var to_cpp = net => {
  var bit = (n, len) => {
    var str = "";
    for (var i = 0; i < len; ++i) {
      str = ((n >>> i) % 2 ? "1" : "0") + str;
    }
    return str;
  };
  var hex = (bit) => {
    var str = "";
    for (var i = 0; i < bit.length / 4; ++i) {
      str = str + parseInt(bit.slice(i * 4, i * 4 + 4), 2).toString(16);
    }
    return "0x" + str;
  };
  var nod = (kind, a_dist, a_slot, b_dist, b_slot, c_dist, c_slot) => {
    return hex("00" + bit(kind, 8)
      + bit(a_slot, 2) + bit(a_dist + 32768, 16)
      + bit(b_slot, 2) + bit(b_dist + 32768, 16)
      + bit(c_slot, 2) + bit(c_dist + 32768, 16));
  };
  return "{" + net.map(([k,ad,as,bd,bs,cd,cs]) => {
    var n = nod(k,ad,as,bd,bs,cd,cs);
    console.log([k,as,ad,bs,bd,cs,cd], n);
    return n;
  }).join(",") + "}";
};

var pad = (str, n) => ("                " + str).slice(-n);

var ex0 = [nod(0,  0,1,  0,0,  1,2), nod(0,  1,0,  6,0, -1,2), nod(0, -1,0,  1,0,  2,0), nod(1, -1,1,  2,0,  3,0), nod(0, -2,2,  2,1,  1,2), nod(0, -2,1,  1,2, -1,2), nod(0, -3,2, -2,1, -1,1), nod(0, -6,1,  0,2,  0,1) ]; 
var ex1 = [[0,0,2,1,2,0,0], [0,1,0,6,0,-1,1], [0,-1,0,4,0,1,0], [0,-1,2,2,1,1,2], [0,2,1,1,2,-1,2], [0,1,2,-2,1,-1,1], [1,-4,1,-2,0,-1,0], [0,-6,1,0,2,0,1]];
var ex2 = [[0,0,2,60,2,0,0],[0,1,2,46,0,59,0],[0,1,2,27,2,-1,0],[0,1,0,8,2,-1,0],[0,-1,0,4,0,1,0],[0,-1,2,2,0,1,0],[0,-1,2,1,1,3,0],[0,-2,1,-1,1,1,1],[0,-4,1,-1,2,2,0],[0,-3,2,1,1,1,2],[0,-2,2,-1,1,-1,2],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,0,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,-8,1,0,1,1,0],[0,-1,2,0,2,0,1],[0,1,0,8,2,-27,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,0,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,-8,1,0,1,1,0],[0,-1,2,0,2,0,1],[0,-46,1,3,1,1,2],[0,1,2,10,0,-1,2],[0,1,2,7,0,-1,0],[0,1,0,-3,1,-1,0],[0,-1,0,4,0,1,0],[0,-1,2,3,1,1,0],[0,-1,2,1,1,1,2],[0,1,2,-1,1,-1,2],[0,-4,1,-3,1,-1,0],[0,-7,1,0,1,1,0],[0,-1,2,0,2,0,1],[0,-10,1,1,2,1,0],[0,-1,2,0,1,-1,1],[0,-59,2,1,0,-60,1],[0,-1,1,1,2,1,0],[0,-1,2,0,1,-1,1]];
var ex3 = [[0,0,2,224,2,0,0],[0,1,2,73,2,223,0],[0,1,2,54,2,-1,0],[0,1,0,8,2,-1,0],[0,-1,0,4,0,1,0],[0,-1,2,2,0,1,0],[0,-1,2,1,1,3,0],[0,-2,1,-1,1,1,1],[0,-4,1,-1,2,2,0],[0,-3,2,1,1,1,2],[0,-2,2,-1,1,-1,2],[0,1,2,27,2,-8,1],[0,1,0,8,2,-1,0],[0,-1,0,4,0,1,0],[0,-1,2,2,0,1,0],[0,-1,2,1,1,3,0],[0,-2,1,-1,1,1,1],[0,-4,1,-1,2,2,0],[0,-3,2,1,1,1,2],[0,-2,2,-1,1,-1,2],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,0,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,-8,1,0,1,1,0],[0,-1,2,0,2,0,1],[0,1,0,8,2,-27,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,0,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,-8,1,0,1,1,0],[0,-1,2,0,2,0,1],[0,1,0,8,2,-54,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,0,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,-8,1,0,1,1,0],[0,-1,2,0,2,0,1],[0,1,0,20,2,-73,1],[0,-1,0,1,0,17,2],[0,-1,1,1,0,16,0],[0,-1,1,2,1,1,0],[0,-1,2,2,1,1,2],[0,1,2,-2,1,-1,2],[0,1,0,-2,1,-1,0],[0,-1,0,7,0,1,0],[0,-1,2,9,0,1,0],[0,-1,2,7,0,1,0],[0,-1,2,4,1,1,0],[0,-1,2,1,1,1,2],[0,1,2,-1,1,-1,2],[0,1,2,2,0,-1,0],[0,-7,1,-4,1,-1,0],[0,-2,1,2,1,1,2],[0,-7,1,1,2,-1,2],[0,-9,1,-2,1,-1,1],[0,-16,2,1,0,-17,2],[0,-1,1,0,2,0,1],[0,1,0,8,2,-20,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,0,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,-8,1,0,1,1,0],[0,-1,2,0,2,0,1],[0,-223,2,1,2,-224,1],[0,1,0,6,2,-1,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,0,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,-6,1,0,1,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,2,0,1]];
var ex4 = [[0,0,2,359,2,0,0],[0,1,2,208,2,358,0],[0,1,2,189,2,-1,0],[0,1,0,8,2,-1,0],[0,-1,0,4,0,1,0],[0,-1,2,2,0,1,0],[0,-1,2,1,1,3,0],[0,-2,1,-1,1,1,1],[0,-4,1,-1,2,2,0],[0,-3,2,1,1,1,2],[0,-2,2,-1,1,-1,2],[0,1,2,162,2,-8,1],[0,1,0,8,2,-1,0],[0,-1,0,4,0,1,0],[0,-1,2,2,0,1,0],[0,-1,2,1,1,3,0],[0,-2,1,-1,1,1,1],[0,-4,1,-1,2,2,0],[0,-3,2,1,1,1,2],[0,-2,2,-1,1,-1,2],[0,1,2,135,2,-8,1],[0,1,0,8,2,-1,0],[0,-1,0,4,0,1,0],[0,-1,2,2,0,1,0],[0,-1,2,1,1,3,0],[0,-2,1,-1,1,1,1],[0,-4,1,-1,2,2,0],[0,-3,2,1,1,1,2],[0,-2,2,-1,1,-1,2],[0,1,2,108,2,-8,1],[0,1,0,8,2,-1,0],[0,-1,0,4,0,1,0],[0,-1,2,2,0,1,0],[0,-1,2,1,1,3,0],[0,-2,1,-1,1,1,1],[0,-4,1,-1,2,2,0],[0,-3,2,1,1,1,2],[0,-2,2,-1,1,-1,2],[0,1,2,81,2,-8,1],[0,1,0,8,2,-1,0],[0,-1,0,4,0,1,0],[0,-1,2,2,0,1,0],[0,-1,2,1,1,3,0],[0,-2,1,-1,1,1,1],[0,-4,1,-1,2,2,0],[0,-3,2,1,1,1,2],[0,-2,2,-1,1,-1,2],[0,1,2,54,2,-8,1],[0,1,0,8,2,-1,0],[0,-1,0,4,0,1,0],[0,-1,2,2,0,1,0],[0,-1,2,1,1,3,0],[0,-2,1,-1,1,1,1],[0,-4,1,-1,2,2,0],[0,-3,2,1,1,1,2],[0,-2,2,-1,1,-1,2],[0,1,2,27,2,-8,1],[0,1,0,8,2,-1,0],[0,-1,0,4,0,1,0],[0,-1,2,2,0,1,0],[0,-1,2,1,1,3,0],[0,-2,1,-1,1,1,1],[0,-4,1,-1,2,2,0],[0,-3,2,1,1,1,2],[0,-2,2,-1,1,-1,2],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,0,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,-8,1,0,1,1,0],[0,-1,2,0,2,0,1],[0,1,0,8,2,-27,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,0,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,-8,1,0,1,1,0],[0,-1,2,0,2,0,1],[0,1,0,8,2,-54,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,0,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,-8,1,0,1,1,0],[0,-1,2,0,2,0,1],[0,1,0,8,2,-81,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,0,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,-8,1,0,1,1,0],[0,-1,2,0,2,0,1],[0,1,0,8,2,-108,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,0,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,-8,1,0,1,1,0],[0,-1,2,0,2,0,1],[0,1,0,8,2,-135,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,0,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,-8,1,0,1,1,0],[0,-1,2,0,2,0,1],[0,1,0,8,2,-162,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,0,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,-8,1,0,1,1,0],[0,-1,2,0,2,0,1],[0,1,0,8,2,-189,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,0,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,-8,1,0,1,1,0],[0,-1,2,0,2,0,1],[0,1,0,20,2,-208,1],[0,-1,0,1,0,17,2],[0,-1,1,1,0,16,0],[0,-1,1,2,1,1,0],[0,-1,2,2,1,1,2],[0,1,2,-2,1,-1,2],[0,1,0,-2,1,-1,0],[0,-1,0,7,0,1,0],[0,-1,2,9,0,1,0],[0,-1,2,7,0,1,0],[0,-1,2,4,1,1,0],[0,-1,2,1,1,1,2],[0,1,2,-1,1,-1,2],[0,1,2,2,0,-1,0],[0,-7,1,-4,1,-1,0],[0,-2,1,2,1,1,2],[0,-7,1,1,2,-1,2],[0,-9,1,-2,1,-1,1],[0,-16,2,1,0,-17,2],[0,-1,1,0,2,0,1],[0,1,0,8,2,-20,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,2,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,1,0,8,0,-8,1],[0,-1,0,2,0,1,0],[0,-1,2,4,0,2,0],[0,-2,1,3,1,4,0],[0,-2,2,3,1,1,2],[0,1,2,2,2,-1,2],[1,-4,1,-3,1,-1,0],[0,-4,2,-3,1,-2,1],[0,-8,1,0,1,1,0],[0,-1,2,0,2,0,1],[0,-358,2,1,2,-359,1],[0,1,0,6,2,-1,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,2,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,1,0,6,0,-6,1],[0,-1,0,4,1,1,0],[0,-1,2,3,0,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,1,1,2],[0,-3,1,-4,1,-1,2],[0,-6,1,0,1,1,0],[0,-1,2,0,1,1,0],[0,-1,2,0,2,0,1]];

console.log(to_cpp(ex2));
var net = from_diffnet(ex2);
while (net.length < 128) net.push(air);

// Reduces
print(net, {nodes:0, heat: 1, stats: 1});
console.log("");

var rwt = 0;
var mxm = 0;
for (var i = 0; i < 22; ++i) {
  console.log("Pass " + i + " " + " Valid: " + valid(net));

  //expand(net);
  rwt += reduce_pass(net);
  //collapse(net);
  print(net, {nodes:0, heat: 1, stats: 0});
  //console.log("");
  for (var k = 0; k < 4; ++k) {
    chill(net);
  }
  mxm = Math.max(maximum(net), mxm);
  print(net, {nodes:0, heat: 1, stats: 0});
  console.log(semantic(net));
  //console.log("");
}

//print(net, {nodes:1, heat: 1, stats: 1});
console.log(rwt, mxm);
