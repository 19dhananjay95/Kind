type App.GG.Creature { 
  new(
    category: App.GG.Monster
    team: App.GG.Team
    animation: Pair<App.GG.Animation, U64>
    actions: App.GG.Actions
    status: List<App.GG.Creature.Status>
    hp: I32
    id: Nat
  )
}


type App.GG.Creature.Dna {
  new(
    alteration: String //TODO
    attributes: App.GG.Creature.Attributes
    body: App.GG.Body
  )
}

type App.GG.Creature.Attributes {
  new(
    hp:I32
    energy:I32
    damage:I32
    corruption: I32
  )
}


App.GG.Creature.Attributes.add(
  a: App.GG.Creature.Attributes
  b: App.GG.Creature.Attributes
): App.GG.Creature.Attributes

  let hp = a@hp + b@hp
  let energy = a@energy + b@energy
  let damage = a@damage + b@damage
  let corruption = a@corruption + b@corruption
  App.GG.Creature.Attributes.new(hp, energy, damage, corruption)

App.GG.Creature.Attributes.base: App.GG.Creature.Attributes
  App.GG.Creature.Attributes.new(
    25 // hp
    25 // energy
    25 // damage
    25 // corruption
  )

//===========================================================
//Creature Management

App.GG.Creature.modify_at(
  mod: App.GG.Creature -> App.GG.Creature
  pos: App.GG.Coord
  grid: App.GG.Grid
): App.GG.Grid
  
  let result = Maybe { 
    get creature = App.GG.Creature.get(pos, grid)
    let mod = App.GG.Tile.update_creature(mod)
    let new_grid = App.GG.Grid.update(pos, mod, grid)
    return new_grid
  }
  result <> grid


App.GG.Creature.get(
  place: App.GG.Coord
  grid: App.GG.Grid
): Maybe<App.GG.Creature>

  let tile = App.GG.Grid.get(place, grid)
  case tile { 
    none:
      none
    some:
      tile.value@creature
  }


//===========================================================
//Status Management

type App.GG.Creature.Status {
  stun(duration: U64)
}

App.GG.Creature.status_update(
  creature: App.GG.Creature
): App.GG.Creature
  
  let status_update = App.GG.Creature.status_update_aux(creature@status)
  creature@status <- status_update

App.GG.Creature.status_update_aux(
  status: List<App.GG.Creature.Status>
):List<App.GG.Creature.Status>

  case status { 
    nil:
      []
    cons:
      let head = case status.head { 
        stun: App.GG.Creature.Status.stun(U64.sub(status.head.duration, 60))
      }
      let tail = App.GG.Creature.status_update_aux(status.tail)
      case head { 
        stun: if U64.gtn(head.duration, 0) then head & tail else tail
      }
  }

  
App.GG.Creature.status_add_stun(
  creature: App.GG.Creature
  duration: U64
): App.GG.Creature
  
  let new_status = App.GG.Creature.status_add_stun_aux(duration, creature@status)
  creature@status <- new_status


App.GG.Creature.status_add_stun_aux(
  duration: U64
  status: List<App.GG.Creature.Status>
): List<App.GG.Creature.Status>

  let new_stun = App.GG.Creature.Status.stun(duration)
  case status {
    nil: new_stun & status
    cons:
      case status.head { 
        stun:
          if U64.gtn(status.head.duration, duration) then
            status
          else
            new_stun & status.tail
      }default status.head & App.GG.Creature.status_add_stun_aux(duration, status.tail)
  }

App.GG.Creature.sub_folder(quantity: Nat, creature: App.GG.Creature): App.GG.Creature
  case creature@category as monster {
    minion: creature
    slime:
      creature@category <- App.GG.Monster.slime(monster.data, monster.hand, List.drop!(quantity, monster.folder), monster.energy)
  }

App.GG.Creature.shuffle_folder(seed: Nat, creature: App.GG.Creature): App.GG.Creature
  case creature@category as monster {
    minion: creature
    slime:
      let new_folder = App.GG.Chips.shuffle(seed, monster.folder)
      creature@category <- App.GG.Monster.slime(monster.data, monster.hand, new_folder, monster.energy)
  }

App.GG.Creature.add_chip(chip: App.GG.Chip, creature: App.GG.Creature): App.GG.Creature
  case creature@category as monster {
    minion: creature
    slime:
      let category = App.GG.Monster.slime(monster.data, chip & monster.hand, monster.folder, monster.energy)
      creature@category <- category
  }

App.GG.Creature.delete(coord: App.GG.Coord, grid: App.GG.Grid): App.GG.Grid
  let tile = App.GG.Grid.get(coord, grid)
  without tile: grid
  let new_tile = tile@creature <- none
  App.GG.Grid.set(coord, new_tile, grid)

// App.GG.Creature.create_from_monster(monster: App.GG.Monster, team: App.GG.Team,)
//   case monster {
//     slime:

//     minion:
//   }

// // type App.GG.Creature { 
//   new(
//     category: App.GG.Monster
//     team: App.GG.Team
//     animation: Pair<App.GG.Animation, U64>
//     actions: App.GG.Actions
//     status: List<App.GG.Creature.Status>
//     hp: I32
//     id: Nat
//   )
// }