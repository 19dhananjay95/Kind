module.exports = (function() {
    function word_to_u16(w) {
        var u = 0;
        for (var i = 0; i < 16; ++i) {
            u = u | (w._ === 'Word.i' ? 1 << i : 0);
            w = w.pred;
        };
        return u;
    };

    function u16_to_word(u) {
        var w = {
            _: 'Word.e'
        };
        for (var i = 0; i < 16; ++i) {
            w = {
                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',
                pred: w
            };
        };
        return w;
    };

    function u16_to_bits(x) {
        var s = '';
        for (var i = 0; i < 16; ++i) {
            s = (x & 1 ? '1' : '0') + s;
            x = x >>> 1;
        }
        return s;
    };
    var list_for = list => nil => cons => {
        while (list._ !== 'List.nil') {
            nil = cons(list.head)(nil);
            list = list.tail;
        }
        return nil;
    };
    var list_length = list => {
        var len = 0;
        while (list._ === 'List.cons') {
            len += 1;
            list = list.tail;
        };
        return BigInt(len);
    };
    var nat_to_bits = n => {
        return n === 0n ? '' : n.toString(2);
    };
    var fm_name_to_bits = name => {
        const TABLE = {
            'A': '000000',
            'B': '100000',
            'C': '010000',
            'D': '110000',
            'E': '001000',
            'F': '101000',
            'G': '011000',
            'H': '111000',
            'I': '000100',
            'J': '100100',
            'K': '010100',
            'L': '110100',
            'M': '001100',
            'N': '101100',
            'O': '011100',
            'P': '111100',
            'Q': '000010',
            'R': '100010',
            'S': '010010',
            'T': '110010',
            'U': '001010',
            'V': '101010',
            'W': '011010',
            'X': '111010',
            'Y': '000110',
            'Z': '100110',
            'a': '010110',
            'b': '110110',
            'c': '001110',
            'd': '101110',
            'e': '011110',
            'f': '111110',
            'g': '000001',
            'h': '100001',
            'i': '010001',
            'j': '110001',
            'k': '001001',
            'l': '101001',
            'm': '011001',
            'n': '111001',
            'o': '000101',
            'p': '100101',
            'q': '010101',
            'r': '110101',
            's': '001101',
            't': '101101',
            'u': '011101',
            'v': '111101',
            'w': '000011',
            'x': '100011',
            'y': '010011',
            'z': '110011',
            '0': '001011',
            '1': '101011',
            '2': '011011',
            '3': '111011',
            '4': '000111',
            '5': '100111',
            '6': '010111',
            '7': '110111',
            '8': '001111',
            '9': '101111',
            '.': '011111',
            '_': '111111',
        }
        var a = '';
        for (var i = name.length - 1; i >= 0; --i) {
            a += TABLE[name[i]];
        }
        return a;
    };
    const inst_unit = x => x(1);
    const elim_unit = (x => {
        var $1 = (() => c0 => {
            var self = x;
            switch ("unit") {
                case 'unit':
                    var $0 = c0;
                    return $0;
            };
        })();
        return $1;
    });
    const inst_bool = x => x(true)(false);
    const elim_bool = (x => {
        var $4 = (() => c0 => c1 => {
            var self = x;
            if (self) {
                var $2 = c2;
                return $2;
            } else {
                var $3 = c2;
                return $3;
            };
        })();
        return $4;
    });
    const inst_nat = x => x(0n)(x0 => 1n + x0);
    const elim_nat = (x => {
        var $8 = (() => c0 => c1 => {
            var self = x;
            if (self === 0n) {
                var $5 = c2;
                return $5;
            } else {
                var $6 = (self - 1n);
                var $7 = c2($6);
                return $7;
            };
        })();
        return $8;
    });
    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');
    const elim_bits = (x => {
        var $14 = (() => c0 => c1 => c2 => {
            var self = x;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'e':
                    var $9 = c0;
                    return $9;
                case 'o':
                    var $10 = self.slice(0, -1);
                    var $11 = c1($10);
                    return $11;
                case 'i':
                    var $12 = self.slice(0, -1);
                    var $13 = c2($12);
                    return $13;
            };
        })();
        return $14;
    });
    const inst_u16 = x => x(x0 => word_to_u16(x0));
    const elim_u16 = (x => {
        var $17 = (() => c0 => {
            var self = x;
            switch ('u16') {
                case 'u16':
                    var $15 = u16_to_word(self);
                    var $16 = c0($15);
                    return $16;
            };
        })();
        return $17;
    });
    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));
    const elim_string = (x => {
        var $22 = (() => c0 => c1 => {
            var self = x;
            if (self.length === 0) {
                var $18 = c2;
                return $18;
            } else {
                var $19 = self.charCodeAt(0);
                var $20 = self.slice(1);
                var $21 = c2($19)($20);
                return $21;
            };
        })();
        return $22;
    });
    var run = (p) => {
        if (typeof window === 'undefined') {
            var rl = eval("require('readline')").createInterface({
                input: process.stdin,
                output: process.stdout,
                terminal: false
            });
            var fs = eval("require('fs')");
            var pc = eval("process");
        } else {
            var rl = {
                question: (x, f) => f(''),
                close: () => {}
            };
            var fs = {
                readFileSync: () => ''
            };
            var pc = {
                exit: () => {},
                argv: []
            };
        };
        return run_io({
            rl,
            fs,
            pc
        }, p).then((x) => {
            rl.close();
            return x;
        }).catch((e) => {
            rl.close();
            throw e;
        });
    };
    var get_file = (lib, param) => {
        return lib.fs.readFileSync(param, 'utf8');
    }
    var set_file = (lib, param) => {
        var path = '';
        for (var i = 0; i < param.length && param[i] !== '='; ++i) {
            path += param[i];
        };
        var data = param.slice(i + 1);
        lib.fs.mkdirSync(path.split('/').slice(0, -1).join('/'), {
            recursive: true
        });
        lib.fs.writeFileSync(path, data);
        return '';
    };
    var del_file = (lib, param) => {
        try {
            lib.fs.unlinkSync(param);
            return '';
        } catch (e) {
            if (e.message.indexOf('EPERM') !== -1) {
                lib.fs.rmdirSync(param);
                return '';
            } else {
                throw e;
            }
        }
    };
    var get_dir = (lib, param) => {
        return lib.fs.readdirSync(param).join(';');
    };
    var run_io = (lib, p) => {
        switch (p._) {
            case 'IO.end':
                return Promise.resolve(p.value);
            case 'IO.ask':
                return new Promise((res, err) => {
                    switch (p.query) {
                        case 'print':
                            console.log(p.param);
                            run_io(lib, p.then(1)).then(res).catch(err);
                            break;
                        case 'exit':
                            lib.pc.exit();
                            break;
                        case 'get_line':
                            lib.rl.question('', (line) => run_io(lib, p.then(line)).then(res).catch(err));
                            break;
                        case 'get_file':
                            try {
                                run_io(lib, p.then(get_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'set_file':
                            try {
                                run_io(lib, p.then(set_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'del_file':
                            try {
                                run_io(lib, p.then(del_file(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'get_dir':
                            try {
                                run_io(lib, p.then(get_dir(lib, p.param))).then(res).catch(err);
                            } catch (e) {
                                if (e.message.indexOf('NOENT') !== -1) {
                                    run_io(lib, p.then('')).then(res).catch(err);
                                } else {
                                    err(e);
                                }
                            };
                            break;
                        case 'get_args':
                            run_io(lib, p.then(lib.pc.argv[2] || '')).then(res).catch(err);
                            break;
                    }
                });
        }
    };

    function IO$(_A$1) {
        var $23 = null;
        return $23;
    };
    const IO = x0 => IO$(x0);

    function IO$ask$(_query$2, _param$3, _then$4) {
        var $24 = ({
            _: 'IO.ask',
            'query': _query$2,
            'param': _param$3,
            'then': _then$4
        });
        return $24;
    };
    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);

    function IO$bind$(_a$3, _f$4) {
        var self = _a$3;
        switch (self._) {
            case 'IO.end':
                var $26 = self.value;
                var $27 = _f$4($26);
                var $25 = $27;
                break;
            case 'IO.ask':
                var $28 = self.query;
                var $29 = self.param;
                var $30 = self.then;
                var $31 = IO$ask$($28, $29, (_x$8 => {
                    var $32 = IO$bind$($30(_x$8), _f$4);
                    return $32;
                }));
                var $25 = $31;
                break;
        };
        return $25;
    };
    const IO$bind = x0 => x1 => IO$bind$(x0, x1);

    function IO$end$(_value$2) {
        var $33 = ({
            _: 'IO.end',
            'value': _value$2
        });
        return $33;
    };
    const IO$end = x0 => IO$end$(x0);

    function IO$monad$(_new$2) {
        var $34 = _new$2(IO$bind)(IO$end);
        return $34;
    };
    const IO$monad = x0 => IO$monad$(x0);

    function Maybe$(_A$1) {
        var $35 = null;
        return $35;
    };
    const Maybe = x0 => Maybe$(x0);

    function Map$(_A$1) {
        var $36 = null;
        return $36;
    };
    const Map = x0 => Map$(x0);
    const Maybe$none = ({
        _: 'Maybe.none'
    });

    function Map$get$(_bits$2, _map$3) {
        var Map$get$ = (_bits$2, _map$3) => ({
            ctr: 'TCO',
            arg: [_bits$2, _map$3]
        });
        var Map$get = _bits$2 => _map$3 => Map$get$(_bits$2, _map$3);
        var arg = [_bits$2, _map$3];
        while (true) {
            let [_bits$2, _map$3] = arg;
            var R = (() => {
                var self = _bits$2;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var self = _map$3;
                        switch (self._) {
                            case 'Map.new':
                                var $38 = Maybe$none;
                                var $37 = $38;
                                break;
                            case 'Map.tie':
                                var $39 = self.val;
                                var $40 = self.lft;
                                var $41 = self.rgt;
                                var $42 = $39;
                                var $37 = $42;
                                break;
                        };
                        return $37;
                    case 'o':
                        var $43 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'Map.new':
                                var $45 = Maybe$none;
                                var $44 = $45;
                                break;
                            case 'Map.tie':
                                var $46 = self.val;
                                var $47 = self.lft;
                                var $48 = self.rgt;
                                var $49 = Map$get$($43, $47);
                                var $44 = $49;
                                break;
                        };
                        return $44;
                    case 'i':
                        var $50 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'Map.new':
                                var $52 = Maybe$none;
                                var $51 = $52;
                                break;
                            case 'Map.tie':
                                var $53 = self.val;
                                var $54 = self.lft;
                                var $55 = self.rgt;
                                var $56 = Map$get$($50, $55);
                                var $51 = $56;
                                break;
                        };
                        return $51;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Map$get = x0 => x1 => Map$get$(x0, x1);
    const Bits$e = '';
    const Bool$false = false;
    const Bool$and = a0 => a1 => (a0 && a1);
    const Bool$true = true;

    function Cmp$as_lte$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $58 = Bool$true;
                var $57 = $58;
                break;
            case 'Cmp.eql':
                var $59 = Bool$true;
                var $57 = $59;
                break;
            case 'Cmp.gtn':
                var $60 = Bool$false;
                var $57 = $60;
                break;
        };
        return $57;
    };
    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);
    const Cmp$ltn = ({
        _: 'Cmp.ltn'
    });
    const Cmp$gtn = ({
        _: 'Cmp.gtn'
    });

    function Word$cmp$go$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $62 = (_b$5 => {
                    var $63 = _c$4;
                    return $63;
                });
                var $61 = $62;
                break;
            case 'Word.o':
                var $64 = self.pred;
                var $65 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $67 = (_a$pred$8 => {
                                var $68 = _c$4;
                                return $68;
                            });
                            var $66 = $67;
                            break;
                        case 'Word.o':
                            var $69 = self.pred;
                            var $70 = (_a$pred$10 => {
                                var $71 = Word$cmp$go$(_a$pred$10, $69, _c$4);
                                return $71;
                            });
                            var $66 = $70;
                            break;
                        case 'Word.i':
                            var $72 = self.pred;
                            var $73 = (_a$pred$10 => {
                                var $74 = Word$cmp$go$(_a$pred$10, $72, Cmp$ltn);
                                return $74;
                            });
                            var $66 = $73;
                            break;
                    };
                    var $66 = $66($64);
                    return $66;
                });
                var $61 = $65;
                break;
            case 'Word.i':
                var $75 = self.pred;
                var $76 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $78 = (_a$pred$8 => {
                                var $79 = _c$4;
                                return $79;
                            });
                            var $77 = $78;
                            break;
                        case 'Word.o':
                            var $80 = self.pred;
                            var $81 = (_a$pred$10 => {
                                var $82 = Word$cmp$go$(_a$pred$10, $80, Cmp$gtn);
                                return $82;
                            });
                            var $77 = $81;
                            break;
                        case 'Word.i':
                            var $83 = self.pred;
                            var $84 = (_a$pred$10 => {
                                var $85 = Word$cmp$go$(_a$pred$10, $83, _c$4);
                                return $85;
                            });
                            var $77 = $84;
                            break;
                    };
                    var $77 = $77($75);
                    return $77;
                });
                var $61 = $76;
                break;
        };
        var $61 = $61(_b$3);
        return $61;
    };
    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);
    const Cmp$eql = ({
        _: 'Cmp.eql'
    });

    function Word$cmp$(_a$2, _b$3) {
        var $86 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);
        return $86;
    };
    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);

    function Word$lte$(_a$2, _b$3) {
        var $87 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));
        return $87;
    };
    const Word$lte = x0 => x1 => Word$lte$(x0, x1);

    function Nat$succ$(_pred$1) {
        var $88 = 1n + _pred$1;
        return $88;
    };
    const Nat$succ = x0 => Nat$succ$(x0);
    const Nat$zero = 0n;
    const U16$lte = a0 => a1 => (a0 <= a1);

    function U16$btw$(_a$1, _b$2, _c$3) {
        var $89 = ((_a$1 <= _b$2) && (_b$2 <= _c$3));
        return $89;
    };
    const U16$btw = x0 => x1 => x2 => U16$btw$(x0, x1, x2);

    function U16$new$(_value$1) {
        var $90 = word_to_u16(_value$1);
        return $90;
    };
    const U16$new = x0 => U16$new$(x0);
    const Word$e = ({
        _: 'Word.e'
    });

    function Word$(_size$1) {
        var $91 = null;
        return $91;
    };
    const Word = x0 => Word$(x0);

    function Word$i$(_pred$2) {
        var $92 = ({
            _: 'Word.i',
            'pred': _pred$2
        });
        return $92;
    };
    const Word$i = x0 => Word$i$(x0);

    function Word$o$(_pred$2) {
        var $93 = ({
            _: 'Word.o',
            'pred': _pred$2
        });
        return $93;
    };
    const Word$o = x0 => Word$o$(x0);

    function Word$subber$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $95 = (_b$5 => {
                    var $96 = Word$e;
                    return $96;
                });
                var $94 = $95;
                break;
            case 'Word.o':
                var $97 = self.pred;
                var $98 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $100 = (_a$pred$8 => {
                                var $101 = Word$e;
                                return $101;
                            });
                            var $99 = $100;
                            break;
                        case 'Word.o':
                            var $102 = self.pred;
                            var $103 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $105 = Word$i$(Word$subber$(_a$pred$10, $102, Bool$true));
                                    var $104 = $105;
                                } else {
                                    var $106 = Word$o$(Word$subber$(_a$pred$10, $102, Bool$false));
                                    var $104 = $106;
                                };
                                return $104;
                            });
                            var $99 = $103;
                            break;
                        case 'Word.i':
                            var $107 = self.pred;
                            var $108 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $110 = Word$o$(Word$subber$(_a$pred$10, $107, Bool$true));
                                    var $109 = $110;
                                } else {
                                    var $111 = Word$i$(Word$subber$(_a$pred$10, $107, Bool$true));
                                    var $109 = $111;
                                };
                                return $109;
                            });
                            var $99 = $108;
                            break;
                    };
                    var $99 = $99($97);
                    return $99;
                });
                var $94 = $98;
                break;
            case 'Word.i':
                var $112 = self.pred;
                var $113 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $115 = (_a$pred$8 => {
                                var $116 = Word$e;
                                return $116;
                            });
                            var $114 = $115;
                            break;
                        case 'Word.o':
                            var $117 = self.pred;
                            var $118 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $120 = Word$o$(Word$subber$(_a$pred$10, $117, Bool$false));
                                    var $119 = $120;
                                } else {
                                    var $121 = Word$i$(Word$subber$(_a$pred$10, $117, Bool$false));
                                    var $119 = $121;
                                };
                                return $119;
                            });
                            var $114 = $118;
                            break;
                        case 'Word.i':
                            var $122 = self.pred;
                            var $123 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $125 = Word$i$(Word$subber$(_a$pred$10, $122, Bool$true));
                                    var $124 = $125;
                                } else {
                                    var $126 = Word$o$(Word$subber$(_a$pred$10, $122, Bool$false));
                                    var $124 = $126;
                                };
                                return $124;
                            });
                            var $114 = $123;
                            break;
                    };
                    var $114 = $114($112);
                    return $114;
                });
                var $94 = $113;
                break;
        };
        var $94 = $94(_b$3);
        return $94;
    };
    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);

    function Word$sub$(_a$2, _b$3) {
        var $127 = Word$subber$(_a$2, _b$3, Bool$false);
        return $127;
    };
    const Word$sub = x0 => x1 => Word$sub$(x0, x1);
    const U16$sub = a0 => a1 => (Math.max(a0 - a1, 0));

    function Nat$apply$(_n$2, _f$3, _x$4) {
        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({
            ctr: 'TCO',
            arg: [_n$2, _f$3, _x$4]
        });
        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);
        var arg = [_n$2, _f$3, _x$4];
        while (true) {
            let [_n$2, _f$3, _x$4] = arg;
            var R = (() => {
                var self = _n$2;
                if (self === 0n) {
                    var $128 = _x$4;
                    return $128;
                } else {
                    var $129 = (self - 1n);
                    var $130 = Nat$apply$($129, _f$3, _f$3(_x$4));
                    return $130;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);

    function Word$inc$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.e':
                var $132 = Word$e;
                var $131 = $132;
                break;
            case 'Word.o':
                var $133 = self.pred;
                var $134 = Word$i$($133);
                var $131 = $134;
                break;
            case 'Word.i':
                var $135 = self.pred;
                var $136 = Word$o$(Word$inc$($135));
                var $131 = $136;
                break;
        };
        return $131;
    };
    const Word$inc = x0 => Word$inc$(x0);

    function U16$inc$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $138 = u16_to_word(self);
                var $139 = U16$new$(Word$inc$($138));
                var $137 = $139;
                break;
        };
        return $137;
    };
    const U16$inc = x0 => U16$inc$(x0);

    function Word$zero$(_size$1) {
        var self = _size$1;
        if (self === 0n) {
            var $141 = Word$e;
            var $140 = $141;
        } else {
            var $142 = (self - 1n);
            var $143 = Word$o$(Word$zero$($142));
            var $140 = $143;
        };
        return $140;
    };
    const Word$zero = x0 => Word$zero$(x0);
    const U16$zero = U16$new$(Word$zero$(16n));
    const Nat$to_u16 = a0 => (Number(a0));

    function Word$adder$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $145 = (_b$5 => {
                    var $146 = Word$e;
                    return $146;
                });
                var $144 = $145;
                break;
            case 'Word.o':
                var $147 = self.pred;
                var $148 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $150 = (_a$pred$8 => {
                                var $151 = Word$e;
                                return $151;
                            });
                            var $149 = $150;
                            break;
                        case 'Word.o':
                            var $152 = self.pred;
                            var $153 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $155 = Word$i$(Word$adder$(_a$pred$10, $152, Bool$false));
                                    var $154 = $155;
                                } else {
                                    var $156 = Word$o$(Word$adder$(_a$pred$10, $152, Bool$false));
                                    var $154 = $156;
                                };
                                return $154;
                            });
                            var $149 = $153;
                            break;
                        case 'Word.i':
                            var $157 = self.pred;
                            var $158 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $160 = Word$o$(Word$adder$(_a$pred$10, $157, Bool$true));
                                    var $159 = $160;
                                } else {
                                    var $161 = Word$i$(Word$adder$(_a$pred$10, $157, Bool$false));
                                    var $159 = $161;
                                };
                                return $159;
                            });
                            var $149 = $158;
                            break;
                    };
                    var $149 = $149($147);
                    return $149;
                });
                var $144 = $148;
                break;
            case 'Word.i':
                var $162 = self.pred;
                var $163 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $165 = (_a$pred$8 => {
                                var $166 = Word$e;
                                return $166;
                            });
                            var $164 = $165;
                            break;
                        case 'Word.o':
                            var $167 = self.pred;
                            var $168 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $170 = Word$o$(Word$adder$(_a$pred$10, $167, Bool$true));
                                    var $169 = $170;
                                } else {
                                    var $171 = Word$i$(Word$adder$(_a$pred$10, $167, Bool$false));
                                    var $169 = $171;
                                };
                                return $169;
                            });
                            var $164 = $168;
                            break;
                        case 'Word.i':
                            var $172 = self.pred;
                            var $173 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $175 = Word$i$(Word$adder$(_a$pred$10, $172, Bool$true));
                                    var $174 = $175;
                                } else {
                                    var $176 = Word$o$(Word$adder$(_a$pred$10, $172, Bool$true));
                                    var $174 = $176;
                                };
                                return $174;
                            });
                            var $164 = $173;
                            break;
                    };
                    var $164 = $164($162);
                    return $164;
                });
                var $144 = $163;
                break;
        };
        var $144 = $144(_b$3);
        return $144;
    };
    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);

    function Word$add$(_a$2, _b$3) {
        var $177 = Word$adder$(_a$2, _b$3, Bool$false);
        return $177;
    };
    const Word$add = x0 => x1 => Word$add$(x0, x1);
    const U16$add = a0 => a1 => ((a0 + a1) & 0xFFFF);

    function Cmp$as_eql$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $179 = Bool$false;
                var $178 = $179;
                break;
            case 'Cmp.eql':
                var $180 = Bool$true;
                var $178 = $180;
                break;
            case 'Cmp.gtn':
                var $181 = Bool$false;
                var $178 = $181;
                break;
        };
        return $178;
    };
    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);

    function Word$eql$(_a$2, _b$3) {
        var $182 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));
        return $182;
    };
    const Word$eql = x0 => x1 => Word$eql$(x0, x1);
    const U16$eql = a0 => a1 => (a0 === a1);
    const Bits$o = a0 => (a0 + '0');
    const Bits$i = a0 => (a0 + '1');

    function Word$to_bits$(_a$2) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $184 = Bits$e;
                var $183 = $184;
                break;
            case 'Word.o':
                var $185 = self.pred;
                var $186 = (Word$to_bits$($185) + '0');
                var $183 = $186;
                break;
            case 'Word.i':
                var $187 = self.pred;
                var $188 = (Word$to_bits$($187) + '1');
                var $183 = $188;
                break;
        };
        return $183;
    };
    const Word$to_bits = x0 => Word$to_bits$(x0);

    function Word$trim$(_new_size$2, _word$3) {
        var self = _new_size$2;
        if (self === 0n) {
            var $190 = Word$e;
            var $189 = $190;
        } else {
            var $191 = (self - 1n);
            var self = _word$3;
            switch (self._) {
                case 'Word.e':
                    var $193 = Word$o$(Word$trim$($191, Word$e));
                    var $192 = $193;
                    break;
                case 'Word.o':
                    var $194 = self.pred;
                    var $195 = Word$o$(Word$trim$($191, $194));
                    var $192 = $195;
                    break;
                case 'Word.i':
                    var $196 = self.pred;
                    var $197 = Word$i$(Word$trim$($191, $196));
                    var $192 = $197;
                    break;
            };
            var $189 = $192;
        };
        return $189;
    };
    const Word$trim = x0 => x1 => Word$trim$(x0, x1);
    const Bits$concat = a0 => a1 => (a1 + a0);

    function Bits$reverse$tco$(_a$1, _r$2) {
        var Bits$reverse$tco$ = (_a$1, _r$2) => ({
            ctr: 'TCO',
            arg: [_a$1, _r$2]
        });
        var Bits$reverse$tco = _a$1 => _r$2 => Bits$reverse$tco$(_a$1, _r$2);
        var arg = [_a$1, _r$2];
        while (true) {
            let [_a$1, _r$2] = arg;
            var R = (() => {
                var self = _a$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $198 = _r$2;
                        return $198;
                    case 'o':
                        var $199 = self.slice(0, -1);
                        var $200 = Bits$reverse$tco$($199, (_r$2 + '0'));
                        return $200;
                    case 'i':
                        var $201 = self.slice(0, -1);
                        var $202 = Bits$reverse$tco$($201, (_r$2 + '1'));
                        return $202;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Bits$reverse$tco = x0 => x1 => Bits$reverse$tco$(x0, x1);

    function Bits$reverse$(_a$1) {
        var $203 = Bits$reverse$tco$(_a$1, Bits$e);
        return $203;
    };
    const Bits$reverse = x0 => Bits$reverse$(x0);
    const Fm$Name$to_bits = a0 => (fm_name_to_bits(a0));

    function Fm$get$(_name$2, _map$3) {
        var $204 = Map$get$((fm_name_to_bits(_name$2)), _map$3);
        return $204;
    };
    const Fm$get = x0 => x1 => Fm$get$(x0, x1);

    function IO$get_file$(_name$1) {
        var $205 = IO$ask$("get_file", _name$1, (_file$2 => {
            var $206 = IO$end$(_file$2);
            return $206;
        }));
        return $205;
    };
    const IO$get_file = x0 => IO$get_file$(x0);

    function Parser$Reply$(_V$1) {
        var $207 = null;
        return $207;
    };
    const Parser$Reply = x0 => Parser$Reply$(x0);

    function Parser$Reply$value$(_idx$2, _code$3, _val$4) {
        var $208 = ({
            _: 'Parser.Reply.value',
            'idx': _idx$2,
            'code': _code$3,
            'val': _val$4
        });
        return $208;
    };
    const Parser$Reply$value = x0 => x1 => x2 => Parser$Reply$value$(x0, x1, x2);

    function Parser$is_eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $210 = Parser$Reply$value$(_idx$1, _code$2, Bool$true);
            var $209 = $210;
        } else {
            var $211 = self.charCodeAt(0);
            var $212 = self.slice(1);
            var $213 = Parser$Reply$value$(_idx$1, _code$2, Bool$false);
            var $209 = $213;
        };
        return $209;
    };
    const Parser$is_eof = x0 => x1 => Parser$is_eof$(x0, x1);

    function Parser$Reply$error$(_idx$2, _code$3, _err$4) {
        var $214 = ({
            _: 'Parser.Reply.error',
            'idx': _idx$2,
            'code': _code$3,
            'err': _err$4
        });
        return $214;
    };
    const Parser$Reply$error = x0 => x1 => x2 => Parser$Reply$error$(x0, x1, x2);

    function Parser$(_V$1) {
        var $215 = null;
        return $215;
    };
    const Parser = x0 => Parser$(x0);

    function Maybe$some$(_value$2) {
        var $216 = ({
            _: 'Maybe.some',
            'value': _value$2
        });
        return $216;
    };
    const Maybe$some = x0 => Maybe$some$(x0);

    function Parser$ErrorAt$new$(_idx$1, _code$2, _err$3) {
        var $217 = ({
            _: 'Parser.ErrorAt.new',
            'idx': _idx$1,
            'code': _code$2,
            'err': _err$3
        });
        return $217;
    };
    const Parser$ErrorAt$new = x0 => x1 => x2 => Parser$ErrorAt$new$(x0, x1, x2);
    const Nat$gtn = a0 => a1 => (a0 > a1);

    function Parser$ErrorAt$combine$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Maybe.none':
                var $219 = _b$2;
                var $218 = $219;
                break;
            case 'Maybe.some':
                var $220 = self.value;
                var self = _b$2;
                switch (self._) {
                    case 'Maybe.none':
                        var $222 = _a$1;
                        var $221 = $222;
                        break;
                    case 'Maybe.some':
                        var $223 = self.value;
                        var self = $220;
                        switch (self._) {
                            case 'Parser.ErrorAt.new':
                                var $225 = self.idx;
                                var $226 = self.code;
                                var $227 = self.err;
                                var self = $223;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $229 = self.idx;
                                        var $230 = self.code;
                                        var $231 = self.err;
                                        var self = ($225 > $229);
                                        if (self) {
                                            var $233 = _a$1;
                                            var $232 = $233;
                                        } else {
                                            var $234 = _b$2;
                                            var $232 = $234;
                                        };
                                        var $228 = $232;
                                        break;
                                };
                                var $224 = $228;
                                break;
                        };
                        var $221 = $224;
                        break;
                };
                var $218 = $221;
                break;
        };
        return $218;
    };
    const Parser$ErrorAt$combine = x0 => x1 => Parser$ErrorAt$combine$(x0, x1);

    function Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5) {
        var Parser$first_of$go$ = (_pars$2, _err$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_pars$2, _err$3, _idx$4, _code$5]
        });
        var Parser$first_of$go = _pars$2 => _err$3 => _idx$4 => _code$5 => Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5);
        var arg = [_pars$2, _err$3, _idx$4, _code$5];
        while (true) {
            let [_pars$2, _err$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _pars$2;
                switch (self._) {
                    case 'List.nil':
                        var self = _err$3;
                        switch (self._) {
                            case 'Maybe.none':
                                var $236 = Parser$Reply$error$(_idx$4, _code$5, "No parse.");
                                var $235 = $236;
                                break;
                            case 'Maybe.some':
                                var $237 = self.value;
                                var self = $237;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $239 = self.idx;
                                        var $240 = self.code;
                                        var $241 = self.err;
                                        var $242 = Parser$Reply$error$($239, $240, $241);
                                        var $238 = $242;
                                        break;
                                };
                                var $235 = $238;
                                break;
                        };
                        return $235;
                    case 'List.cons':
                        var $243 = self.head;
                        var $244 = self.tail;
                        var _parsed$8 = $243(_idx$4)(_code$5);
                        var self = _parsed$8;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $246 = self.idx;
                                var $247 = self.code;
                                var $248 = self.err;
                                var _neo$12 = Maybe$some$(Parser$ErrorAt$new$($246, $247, $248));
                                var _err$13 = Parser$ErrorAt$combine$(_neo$12, _err$3);
                                var $249 = Parser$first_of$go$($244, _err$13, _idx$4, _code$5);
                                var $245 = $249;
                                break;
                            case 'Parser.Reply.value':
                                var $250 = self.idx;
                                var $251 = self.code;
                                var $252 = self.val;
                                var $253 = Parser$Reply$value$($250, $251, $252);
                                var $245 = $253;
                                break;
                        };
                        return $245;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$first_of$go = x0 => x1 => x2 => x3 => Parser$first_of$go$(x0, x1, x2, x3);

    function Parser$first_of$(_pars$2) {
        var $254 = Parser$first_of$go(_pars$2)(Maybe$none);
        return $254;
    };
    const Parser$first_of = x0 => Parser$first_of$(x0);

    function List$cons$(_head$2, _tail$3) {
        var $255 = ({
            _: 'List.cons',
            'head': _head$2,
            'tail': _tail$3
        });
        return $255;
    };
    const List$cons = x0 => x1 => List$cons$(x0, x1);

    function List$(_A$1) {
        var $256 = null;
        return $256;
    };
    const List = x0 => List$(x0);
    const List$nil = ({
        _: 'List.nil'
    });

    function Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5) {
        var Parser$many$go$ = (_parse$2, _values$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_parse$2, _values$3, _idx$4, _code$5]
        });
        var Parser$many$go = _parse$2 => _values$3 => _idx$4 => _code$5 => Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5);
        var arg = [_parse$2, _values$3, _idx$4, _code$5];
        while (true) {
            let [_parse$2, _values$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _parse$2(_idx$4)(_code$5);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $257 = self.idx;
                        var $258 = self.code;
                        var $259 = self.err;
                        var $260 = Parser$Reply$value$(_idx$4, _code$5, _values$3(List$nil));
                        return $260;
                    case 'Parser.Reply.value':
                        var $261 = self.idx;
                        var $262 = self.code;
                        var $263 = self.val;
                        var $264 = Parser$many$go$(_parse$2, (_xs$9 => {
                            var $265 = _values$3(List$cons$($263, _xs$9));
                            return $265;
                        }), $261, $262);
                        return $264;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$many$go = x0 => x1 => x2 => x3 => Parser$many$go$(x0, x1, x2, x3);

    function Parser$many$(_parser$2) {
        var $266 = Parser$many$go(_parser$2)((_x$3 => {
            var $267 = _x$3;
            return $267;
        }));
        return $266;
    };
    const Parser$many = x0 => Parser$many$(x0);
    const Unit$new = 1;

    function String$cons$(_head$1, _tail$2) {
        var $268 = (String.fromCharCode(_head$1) + _tail$2);
        return $268;
    };
    const String$cons = x0 => x1 => String$cons$(x0, x1);
    const String$concat = a0 => a1 => (a0 + a1);

    function String$flatten$go$(_xs$1, _res$2) {
        var String$flatten$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                switch (self._) {
                    case 'List.nil':
                        var $269 = _res$2;
                        return $269;
                    case 'List.cons':
                        var $270 = self.head;
                        var $271 = self.tail;
                        var $272 = String$flatten$go$($271, (_res$2 + $270));
                        return $272;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);

    function String$flatten$(_xs$1) {
        var $273 = String$flatten$go$(_xs$1, "");
        return $273;
    };
    const String$flatten = x0 => String$flatten$(x0);
    const String$nil = '';

    function Parser$text$go$(_text$1, _idx$2, _code$3) {
        var self = _text$1;
        if (self.length === 0) {
            var $275 = Parser$Reply$value$(_idx$2, _code$3, Unit$new);
            var $274 = $275;
        } else {
            var $276 = self.charCodeAt(0);
            var $277 = self.slice(1);
            var self = _code$3;
            if (self.length === 0) {
                var _error$6 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found end of file.", List$nil))));
                var $279 = Parser$Reply$error$(_idx$2, _code$3, _error$6);
                var $278 = $279;
            } else {
                var $280 = self.charCodeAt(0);
                var $281 = self.slice(1);
                var self = ($276 === $280);
                if (self) {
                    var $283 = Parser$text$($277, Nat$succ$(_idx$2), $281);
                    var $282 = $283;
                } else {
                    var _error$8 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found \'", List$cons$(String$cons$($280, String$nil), List$cons$("\'.", List$nil))))));
                    var $284 = Parser$Reply$error$(_idx$2, _code$3, _error$8);
                    var $282 = $284;
                };
                var $278 = $282;
            };
            var $274 = $278;
        };
        return $274;
    };
    const Parser$text$go = x0 => x1 => x2 => Parser$text$go$(x0, x1, x2);

    function Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Parser$text$go$(_text$1, _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $286 = self.idx;
                var $287 = self.code;
                var $288 = self.err;
                var $289 = Parser$Reply$error$(_idx$2, _code$3, $288);
                var $285 = $289;
                break;
            case 'Parser.Reply.value':
                var $290 = self.idx;
                var $291 = self.code;
                var $292 = self.val;
                var $293 = Parser$Reply$value$($290, $291, $292);
                var $285 = $293;
                break;
        };
        return $285;
    };
    const Parser$text = x0 => x1 => x2 => Parser$text$(x0, x1, x2);

    function Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6) {
        var Parser$until$go$ = (_until$2, _parse$3, _values$4, _idx$5, _code$6) => ({
            ctr: 'TCO',
            arg: [_until$2, _parse$3, _values$4, _idx$5, _code$6]
        });
        var Parser$until$go = _until$2 => _parse$3 => _values$4 => _idx$5 => _code$6 => Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6);
        var arg = [_until$2, _parse$3, _values$4, _idx$5, _code$6];
        while (true) {
            let [_until$2, _parse$3, _values$4, _idx$5, _code$6] = arg;
            var R = (() => {
                var _until_reply$7 = _until$2(_idx$5)(_code$6);
                var self = _until_reply$7;
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $295 = self.idx;
                        var $296 = self.code;
                        var $297 = self.err;
                        var _reply$11 = _parse$3(_idx$5)(_code$6);
                        var self = _reply$11;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $299 = self.idx;
                                var $300 = self.code;
                                var $301 = self.err;
                                var $302 = Parser$Reply$error$($299, $300, $301);
                                var $298 = $302;
                                break;
                            case 'Parser.Reply.value':
                                var $303 = self.idx;
                                var $304 = self.code;
                                var $305 = self.val;
                                var $306 = Parser$until$go$(_until$2, _parse$3, (_xs$15 => {
                                    var $307 = _values$4(List$cons$($305, _xs$15));
                                    return $307;
                                }), $303, $304);
                                var $298 = $306;
                                break;
                        };
                        var $294 = $298;
                        break;
                    case 'Parser.Reply.value':
                        var $308 = self.idx;
                        var $309 = self.code;
                        var $310 = self.val;
                        var $311 = Parser$Reply$value$($308, $309, _values$4(List$nil));
                        var $294 = $311;
                        break;
                };
                return $294;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$until$go = x0 => x1 => x2 => x3 => x4 => Parser$until$go$(x0, x1, x2, x3, x4);

    function Parser$until$(_until$2, _parse$3) {
        var $312 = Parser$until$go(_until$2)(_parse$3)((_x$4 => {
            var $313 = _x$4;
            return $313;
        }));
        return $312;
    };
    const Parser$until = x0 => x1 => Parser$until$(x0, x1);

    function Parser$one$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $315 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected end of file.");
            var $314 = $315;
        } else {
            var $316 = self.charCodeAt(0);
            var $317 = self.slice(1);
            var $318 = Parser$Reply$value$(Nat$succ$(_idx$1), $317, $316);
            var $314 = $318;
        };
        return $314;
    };
    const Parser$one = x0 => x1 => Parser$one$(x0, x1);
    const Fm$Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{9}"), List$cons$(Parser$text("\u{a}"), List$cons$((_idx$1 => _code$2 => {
        var self = Parser$text$("//", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $320 = self.idx;
                var $321 = self.code;
                var $322 = self.err;
                var $323 = Parser$Reply$error$($320, $321, $322);
                var $319 = $323;
                break;
            case 'Parser.Reply.value':
                var $324 = self.idx;
                var $325 = self.code;
                var $326 = self.val;
                var self = Parser$until$(Parser$text("\u{a}"), Parser$one)($324)($325);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $328 = self.idx;
                        var $329 = self.code;
                        var $330 = self.err;
                        var $331 = Parser$Reply$error$($328, $329, $330);
                        var $327 = $331;
                        break;
                    case 'Parser.Reply.value':
                        var $332 = self.idx;
                        var $333 = self.code;
                        var $334 = self.val;
                        var $335 = Parser$Reply$value$($332, $333, Unit$new);
                        var $327 = $335;
                        break;
                };
                var $319 = $327;
                break;
        };
        return $319;
    }), List$nil))))));

    function Parser$get_index$(_idx$1, _code$2) {
        var $336 = Parser$Reply$value$(_idx$1, _code$2, _idx$1);
        return $336;
    };
    const Parser$get_index = x0 => x1 => Parser$get_index$(x0, x1);

    function Fm$Parser$init$(_idx$1, _code$2) {
        var self = Fm$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $338 = self.idx;
                var $339 = self.code;
                var $340 = self.err;
                var $341 = Parser$Reply$error$($338, $339, $340);
                var $337 = $341;
                break;
            case 'Parser.Reply.value':
                var $342 = self.idx;
                var $343 = self.code;
                var $344 = self.val;
                var self = Parser$get_index$($342, $343);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $346 = self.idx;
                        var $347 = self.code;
                        var $348 = self.err;
                        var $349 = Parser$Reply$error$($346, $347, $348);
                        var $345 = $349;
                        break;
                    case 'Parser.Reply.value':
                        var $350 = self.idx;
                        var $351 = self.code;
                        var $352 = self.val;
                        var $353 = Parser$Reply$value$($350, $351, $352);
                        var $345 = $353;
                        break;
                };
                var $337 = $345;
                break;
        };
        return $337;
    };
    const Fm$Parser$init = x0 => x1 => Fm$Parser$init$(x0, x1);

    function Parser$many1$(_parser$2, _idx$3, _code$4) {
        var self = _parser$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $355 = self.idx;
                var $356 = self.code;
                var $357 = self.err;
                var $358 = Parser$Reply$error$($355, $356, $357);
                var $354 = $358;
                break;
            case 'Parser.Reply.value':
                var $359 = self.idx;
                var $360 = self.code;
                var $361 = self.val;
                var self = Parser$many$(_parser$2)($359)($360);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $363 = self.idx;
                        var $364 = self.code;
                        var $365 = self.err;
                        var $366 = Parser$Reply$error$($363, $364, $365);
                        var $362 = $366;
                        break;
                    case 'Parser.Reply.value':
                        var $367 = self.idx;
                        var $368 = self.code;
                        var $369 = self.val;
                        var $370 = Parser$Reply$value$($367, $368, List$cons$($361, $369));
                        var $362 = $370;
                        break;
                };
                var $354 = $362;
                break;
        };
        return $354;
    };
    const Parser$many1 = x0 => x1 => x2 => Parser$many1$(x0, x1, x2);

    function Fm$Name$is_letter$(_chr$1) {
        var self = U16$btw$(65, _chr$1, 90);
        if (self) {
            var $372 = Bool$true;
            var $371 = $372;
        } else {
            var self = U16$btw$(97, _chr$1, 122);
            if (self) {
                var $374 = Bool$true;
                var $373 = $374;
            } else {
                var self = U16$btw$(48, _chr$1, 57);
                if (self) {
                    var $376 = Bool$true;
                    var $375 = $376;
                } else {
                    var self = (46 === _chr$1);
                    if (self) {
                        var $378 = Bool$true;
                        var $377 = $378;
                    } else {
                        var self = (95 === _chr$1);
                        if (self) {
                            var $380 = Bool$true;
                            var $379 = $380;
                        } else {
                            var self = (94 === _chr$1);
                            if (self) {
                                var $382 = Bool$true;
                                var $381 = $382;
                            } else {
                                var $383 = Bool$false;
                                var $381 = $383;
                            };
                            var $379 = $381;
                        };
                        var $377 = $379;
                    };
                    var $375 = $377;
                };
                var $373 = $375;
            };
            var $371 = $373;
        };
        return $371;
    };
    const Fm$Name$is_letter = x0 => Fm$Name$is_letter$(x0);

    function Fm$Parser$letter$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $385 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected eof.");
            var $384 = $385;
        } else {
            var $386 = self.charCodeAt(0);
            var $387 = self.slice(1);
            var self = Fm$Name$is_letter$($386);
            if (self) {
                var $389 = Parser$Reply$value$(Nat$succ$(_idx$1), $387, $386);
                var $388 = $389;
            } else {
                var $390 = Parser$Reply$error$(_idx$1, _code$2, "Expected letter.");
                var $388 = $390;
            };
            var $384 = $388;
        };
        return $384;
    };
    const Fm$Parser$letter = x0 => x1 => Fm$Parser$letter$(x0, x1);

    function List$fold$(_list$2, _nil$4, _cons$5) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $392 = _nil$4;
                var $391 = $392;
                break;
            case 'List.cons':
                var $393 = self.head;
                var $394 = self.tail;
                var $395 = _cons$5($393)(List$fold$($394, _nil$4, _cons$5));
                var $391 = $395;
                break;
        };
        return $391;
    };
    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);

    function Fm$Parser$name1$(_idx$1, _code$2) {
        var self = Fm$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $397 = self.idx;
                var $398 = self.code;
                var $399 = self.err;
                var $400 = Parser$Reply$error$($397, $398, $399);
                var $396 = $400;
                break;
            case 'Parser.Reply.value':
                var $401 = self.idx;
                var $402 = self.code;
                var $403 = self.val;
                var self = Parser$many1$(Fm$Parser$letter, $401, $402);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $405 = self.idx;
                        var $406 = self.code;
                        var $407 = self.err;
                        var $408 = Parser$Reply$error$($405, $406, $407);
                        var $404 = $408;
                        break;
                    case 'Parser.Reply.value':
                        var $409 = self.idx;
                        var $410 = self.code;
                        var $411 = self.val;
                        var $412 = Parser$Reply$value$($409, $410, List$fold$($411, String$nil, String$cons));
                        var $404 = $412;
                        break;
                };
                var $396 = $404;
                break;
        };
        return $396;
    };
    const Fm$Parser$name1 = x0 => x1 => Fm$Parser$name1$(x0, x1);

    function Fm$Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Fm$Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $414 = self.idx;
                var $415 = self.code;
                var $416 = self.err;
                var $417 = Parser$Reply$error$($414, $415, $416);
                var $413 = $417;
                break;
            case 'Parser.Reply.value':
                var $418 = self.idx;
                var $419 = self.code;
                var $420 = self.val;
                var $421 = Parser$text$(_text$1, $418, $419);
                var $413 = $421;
                break;
        };
        return $413;
    };
    const Fm$Parser$text = x0 => x1 => x2 => Fm$Parser$text$(x0, x1, x2);

    function Parser$until1$(_cond$2, _parser$3, _idx$4, _code$5) {
        var self = _parser$3(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $423 = self.idx;
                var $424 = self.code;
                var $425 = self.err;
                var $426 = Parser$Reply$error$($423, $424, $425);
                var $422 = $426;
                break;
            case 'Parser.Reply.value':
                var $427 = self.idx;
                var $428 = self.code;
                var $429 = self.val;
                var self = Parser$until$(_cond$2, _parser$3)($427)($428);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $431 = self.idx;
                        var $432 = self.code;
                        var $433 = self.err;
                        var $434 = Parser$Reply$error$($431, $432, $433);
                        var $430 = $434;
                        break;
                    case 'Parser.Reply.value':
                        var $435 = self.idx;
                        var $436 = self.code;
                        var $437 = self.val;
                        var $438 = Parser$Reply$value$($435, $436, List$cons$($429, $437));
                        var $430 = $438;
                        break;
                };
                var $422 = $430;
                break;
        };
        return $422;
    };
    const Parser$until1 = x0 => x1 => x2 => x3 => Parser$until1$(x0, x1, x2, x3);

    function Pair$(_A$1, _B$2) {
        var $439 = null;
        return $439;
    };
    const Pair = x0 => x1 => Pair$(x0, x1);

    function Parser$maybe$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $441 = self.idx;
                var $442 = self.code;
                var $443 = self.err;
                var $444 = Parser$Reply$value$(_idx$3, _code$4, Maybe$none);
                var $440 = $444;
                break;
            case 'Parser.Reply.value':
                var $445 = self.idx;
                var $446 = self.code;
                var $447 = self.val;
                var $448 = Parser$Reply$value$($445, $446, Maybe$some$($447));
                var $440 = $448;
                break;
        };
        return $440;
    };
    const Parser$maybe = x0 => x1 => x2 => Parser$maybe$(x0, x1, x2);

    function Fm$Parser$item$(_parser$2, _idx$3, _code$4) {
        var self = Fm$Parser$spaces(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $450 = self.idx;
                var $451 = self.code;
                var $452 = self.err;
                var $453 = Parser$Reply$error$($450, $451, $452);
                var $449 = $453;
                break;
            case 'Parser.Reply.value':
                var $454 = self.idx;
                var $455 = self.code;
                var $456 = self.val;
                var self = _parser$2($454)($455);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $458 = self.idx;
                        var $459 = self.code;
                        var $460 = self.err;
                        var $461 = Parser$Reply$error$($458, $459, $460);
                        var $457 = $461;
                        break;
                    case 'Parser.Reply.value':
                        var $462 = self.idx;
                        var $463 = self.code;
                        var $464 = self.val;
                        var self = Parser$maybe$(Fm$Parser$text(","), $462, $463);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $466 = self.idx;
                                var $467 = self.code;
                                var $468 = self.err;
                                var $469 = Parser$Reply$error$($466, $467, $468);
                                var $465 = $469;
                                break;
                            case 'Parser.Reply.value':
                                var $470 = self.idx;
                                var $471 = self.code;
                                var $472 = self.val;
                                var $473 = Parser$Reply$value$($470, $471, $464);
                                var $465 = $473;
                                break;
                        };
                        var $457 = $465;
                        break;
                };
                var $449 = $457;
                break;
        };
        return $449;
    };
    const Fm$Parser$item = x0 => x1 => x2 => Fm$Parser$item$(x0, x1, x2);

    function Fm$Parser$name$(_idx$1, _code$2) {
        var self = Fm$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $475 = self.idx;
                var $476 = self.code;
                var $477 = self.err;
                var $478 = Parser$Reply$error$($475, $476, $477);
                var $474 = $478;
                break;
            case 'Parser.Reply.value':
                var $479 = self.idx;
                var $480 = self.code;
                var $481 = self.val;
                var self = Parser$many$(Fm$Parser$letter)($479)($480);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $483 = self.idx;
                        var $484 = self.code;
                        var $485 = self.err;
                        var $486 = Parser$Reply$error$($483, $484, $485);
                        var $482 = $486;
                        break;
                    case 'Parser.Reply.value':
                        var $487 = self.idx;
                        var $488 = self.code;
                        var $489 = self.val;
                        var $490 = Parser$Reply$value$($487, $488, List$fold$($489, String$nil, String$cons));
                        var $482 = $490;
                        break;
                };
                var $474 = $482;
                break;
        };
        return $474;
    };
    const Fm$Parser$name = x0 => x1 => Fm$Parser$name$(x0, x1);

    function Pair$new$(_fst$3, _snd$4) {
        var $491 = ({
            _: 'Pair.new',
            'fst': _fst$3,
            'snd': _snd$4
        });
        return $491;
    };
    const Pair$new = x0 => x1 => Pair$new$(x0, x1);

    function Fm$Parser$stop$(_from$1, _idx$2, _code$3) {
        var self = Parser$get_index$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $493 = self.idx;
                var $494 = self.code;
                var $495 = self.err;
                var $496 = Parser$Reply$error$($493, $494, $495);
                var $492 = $496;
                break;
            case 'Parser.Reply.value':
                var $497 = self.idx;
                var $498 = self.code;
                var $499 = self.val;
                var _orig$7 = Pair$new$(_from$1, $499);
                var $500 = Parser$Reply$value$($497, $498, _orig$7);
                var $492 = $500;
                break;
        };
        return $492;
    };
    const Fm$Parser$stop = x0 => x1 => x2 => Fm$Parser$stop$(x0, x1, x2);

    function Fm$Term$ori$(_orig$1, _expr$2) {
        var $501 = ({
            _: 'Fm.Term.ori',
            'orig': _orig$1,
            'expr': _expr$2
        });
        return $501;
    };
    const Fm$Term$ori = x0 => x1 => Fm$Term$ori$(x0, x1);
    const Fm$Term$typ = ({
        _: 'Fm.Term.typ'
    });

    function Fm$Parser$type$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $503 = self.idx;
                var $504 = self.code;
                var $505 = self.err;
                var $506 = Parser$Reply$error$($503, $504, $505);
                var $502 = $506;
                break;
            case 'Parser.Reply.value':
                var $507 = self.idx;
                var $508 = self.code;
                var $509 = self.val;
                var self = Fm$Parser$text$("Type", $507, $508);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $511 = self.idx;
                        var $512 = self.code;
                        var $513 = self.err;
                        var $514 = Parser$Reply$error$($511, $512, $513);
                        var $510 = $514;
                        break;
                    case 'Parser.Reply.value':
                        var $515 = self.idx;
                        var $516 = self.code;
                        var $517 = self.val;
                        var self = Fm$Parser$stop$($509, $515, $516);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $519 = self.idx;
                                var $520 = self.code;
                                var $521 = self.err;
                                var $522 = Parser$Reply$error$($519, $520, $521);
                                var $518 = $522;
                                break;
                            case 'Parser.Reply.value':
                                var $523 = self.idx;
                                var $524 = self.code;
                                var $525 = self.val;
                                var $526 = Parser$Reply$value$($523, $524, Fm$Term$ori$($525, Fm$Term$typ));
                                var $518 = $526;
                                break;
                        };
                        var $510 = $518;
                        break;
                };
                var $502 = $510;
                break;
        };
        return $502;
    };
    const Fm$Parser$type = x0 => x1 => Fm$Parser$type$(x0, x1);

    function Fm$Term$all$(_eras$1, _self$2, _name$3, _xtyp$4, _body$5) {
        var $527 = ({
            _: 'Fm.Term.all',
            'eras': _eras$1,
            'self': _self$2,
            'name': _name$3,
            'xtyp': _xtyp$4,
            'body': _body$5
        });
        return $527;
    };
    const Fm$Term$all = x0 => x1 => x2 => x3 => x4 => Fm$Term$all$(x0, x1, x2, x3, x4);

    function Fm$Parser$forall$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $529 = self.idx;
                var $530 = self.code;
                var $531 = self.err;
                var $532 = Parser$Reply$error$($529, $530, $531);
                var $528 = $532;
                break;
            case 'Parser.Reply.value':
                var $533 = self.idx;
                var $534 = self.code;
                var $535 = self.val;
                var self = Fm$Parser$name$($533, $534);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $537 = self.idx;
                        var $538 = self.code;
                        var $539 = self.err;
                        var $540 = Parser$Reply$error$($537, $538, $539);
                        var $536 = $540;
                        break;
                    case 'Parser.Reply.value':
                        var $541 = self.idx;
                        var $542 = self.code;
                        var $543 = self.val;
                        var self = Fm$Parser$binder$($541, $542);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $545 = self.idx;
                                var $546 = self.code;
                                var $547 = self.err;
                                var $548 = Parser$Reply$error$($545, $546, $547);
                                var $544 = $548;
                                break;
                            case 'Parser.Reply.value':
                                var $549 = self.idx;
                                var $550 = self.code;
                                var $551 = self.val;
                                var self = Parser$maybe$(Fm$Parser$text("->"), $549, $550);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $553 = self.idx;
                                        var $554 = self.code;
                                        var $555 = self.err;
                                        var $556 = Parser$Reply$error$($553, $554, $555);
                                        var $552 = $556;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $557 = self.idx;
                                        var $558 = self.code;
                                        var $559 = self.val;
                                        var self = Fm$Parser$term$($557, $558);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $561 = self.idx;
                                                var $562 = self.code;
                                                var $563 = self.err;
                                                var $564 = Parser$Reply$error$($561, $562, $563);
                                                var $560 = $564;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $565 = self.idx;
                                                var $566 = self.code;
                                                var $567 = self.val;
                                                var _term$18 = List$fold$($551, $567, (_x$18 => _t$19 => {
                                                    var self = _x$18;
                                                    switch (self._) {
                                                        case 'Fm.Binder.new':
                                                            var $570 = self.eras;
                                                            var $571 = self.name;
                                                            var $572 = self.term;
                                                            var $573 = Fm$Term$all$($570, "", $571, $572, (_s$23 => _x$24 => {
                                                                var $574 = _t$19;
                                                                return $574;
                                                            }));
                                                            var $569 = $573;
                                                            break;
                                                    };
                                                    return $569;
                                                }));
                                                var self = Fm$Parser$stop$($535, $565, $566);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $575 = self.idx;
                                                        var $576 = self.code;
                                                        var $577 = self.err;
                                                        var $578 = Parser$Reply$error$($575, $576, $577);
                                                        var $568 = $578;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $579 = self.idx;
                                                        var $580 = self.code;
                                                        var $581 = self.val;
                                                        var $582 = Parser$Reply$value$($579, $580, (() => {
                                                            var self = _term$18;
                                                            switch (self._) {
                                                                case 'Fm.Term.var':
                                                                    var $583 = self.name;
                                                                    var $584 = self.indx;
                                                                    var $585 = _term$18;
                                                                    return $585;
                                                                case 'Fm.Term.ref':
                                                                    var $586 = self.name;
                                                                    var $587 = _term$18;
                                                                    return $587;
                                                                case 'Fm.Term.typ':
                                                                    var $588 = _term$18;
                                                                    return $588;
                                                                case 'Fm.Term.all':
                                                                    var $589 = self.eras;
                                                                    var $590 = self.self;
                                                                    var $591 = self.name;
                                                                    var $592 = self.xtyp;
                                                                    var $593 = self.body;
                                                                    var $594 = Fm$Term$ori$($581, Fm$Term$all$($589, $543, $591, $592, $593));
                                                                    return $594;
                                                                case 'Fm.Term.lam':
                                                                    var $595 = self.name;
                                                                    var $596 = self.body;
                                                                    var $597 = _term$18;
                                                                    return $597;
                                                                case 'Fm.Term.app':
                                                                    var $598 = self.func;
                                                                    var $599 = self.argm;
                                                                    var $600 = _term$18;
                                                                    return $600;
                                                                case 'Fm.Term.let':
                                                                    var $601 = self.name;
                                                                    var $602 = self.expr;
                                                                    var $603 = self.body;
                                                                    var $604 = _term$18;
                                                                    return $604;
                                                                case 'Fm.Term.def':
                                                                    var $605 = self.name;
                                                                    var $606 = self.expr;
                                                                    var $607 = self.body;
                                                                    var $608 = _term$18;
                                                                    return $608;
                                                                case 'Fm.Term.ann':
                                                                    var $609 = self.done;
                                                                    var $610 = self.term;
                                                                    var $611 = self.type;
                                                                    var $612 = _term$18;
                                                                    return $612;
                                                                case 'Fm.Term.gol':
                                                                    var $613 = self.name;
                                                                    var $614 = self.dref;
                                                                    var $615 = self.verb;
                                                                    var $616 = _term$18;
                                                                    return $616;
                                                                case 'Fm.Term.hol':
                                                                    var $617 = self.path;
                                                                    var $618 = _term$18;
                                                                    return $618;
                                                                case 'Fm.Term.nat':
                                                                    var $619 = self.natx;
                                                                    var $620 = _term$18;
                                                                    return $620;
                                                                case 'Fm.Term.chr':
                                                                    var $621 = self.chrx;
                                                                    var $622 = _term$18;
                                                                    return $622;
                                                                case 'Fm.Term.str':
                                                                    var $623 = self.strx;
                                                                    var $624 = _term$18;
                                                                    return $624;
                                                                case 'Fm.Term.cse':
                                                                    var $625 = self.path;
                                                                    var $626 = self.expr;
                                                                    var $627 = self.name;
                                                                    var $628 = self.with;
                                                                    var $629 = self.cses;
                                                                    var $630 = self.moti;
                                                                    var $631 = _term$18;
                                                                    return $631;
                                                                case 'Fm.Term.ori':
                                                                    var $632 = self.orig;
                                                                    var $633 = self.expr;
                                                                    var $634 = _term$18;
                                                                    return $634;
                                                            };
                                                        })());
                                                        var $568 = $582;
                                                        break;
                                                };
                                                var $560 = $568;
                                                break;
                                        };
                                        var $552 = $560;
                                        break;
                                };
                                var $544 = $552;
                                break;
                        };
                        var $536 = $544;
                        break;
                };
                var $528 = $536;
                break;
        };
        return $528;
    };
    const Fm$Parser$forall = x0 => x1 => Fm$Parser$forall$(x0, x1);

    function Fm$Term$lam$(_name$1, _body$2) {
        var $635 = ({
            _: 'Fm.Term.lam',
            'name': _name$1,
            'body': _body$2
        });
        return $635;
    };
    const Fm$Term$lam = x0 => x1 => Fm$Term$lam$(x0, x1);

    function Fm$Parser$make_lambda$(_names$1, _body$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.nil':
                var $637 = _body$2;
                var $636 = $637;
                break;
            case 'List.cons':
                var $638 = self.head;
                var $639 = self.tail;
                var $640 = Fm$Term$lam$($638, (_x$5 => {
                    var $641 = Fm$Parser$make_lambda$($639, _body$2);
                    return $641;
                }));
                var $636 = $640;
                break;
        };
        return $636;
    };
    const Fm$Parser$make_lambda = x0 => x1 => Fm$Parser$make_lambda$(x0, x1);

    function Fm$Parser$lambda$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $643 = self.idx;
                var $644 = self.code;
                var $645 = self.err;
                var $646 = Parser$Reply$error$($643, $644, $645);
                var $642 = $646;
                break;
            case 'Parser.Reply.value':
                var $647 = self.idx;
                var $648 = self.code;
                var $649 = self.val;
                var self = Fm$Parser$text$("(", $647, $648);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $651 = self.idx;
                        var $652 = self.code;
                        var $653 = self.err;
                        var $654 = Parser$Reply$error$($651, $652, $653);
                        var $650 = $654;
                        break;
                    case 'Parser.Reply.value':
                        var $655 = self.idx;
                        var $656 = self.code;
                        var $657 = self.val;
                        var self = Parser$until1$(Fm$Parser$text(")"), Fm$Parser$item(Fm$Parser$name1), $655, $656);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $659 = self.idx;
                                var $660 = self.code;
                                var $661 = self.err;
                                var $662 = Parser$Reply$error$($659, $660, $661);
                                var $658 = $662;
                                break;
                            case 'Parser.Reply.value':
                                var $663 = self.idx;
                                var $664 = self.code;
                                var $665 = self.val;
                                var self = Fm$Parser$term$($663, $664);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $667 = self.idx;
                                        var $668 = self.code;
                                        var $669 = self.err;
                                        var $670 = Parser$Reply$error$($667, $668, $669);
                                        var $666 = $670;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $671 = self.idx;
                                        var $672 = self.code;
                                        var $673 = self.val;
                                        var self = Fm$Parser$stop$($649, $671, $672);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $675 = self.idx;
                                                var $676 = self.code;
                                                var $677 = self.err;
                                                var $678 = Parser$Reply$error$($675, $676, $677);
                                                var $674 = $678;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $679 = self.idx;
                                                var $680 = self.code;
                                                var $681 = self.val;
                                                var _expr$18 = Fm$Parser$make_lambda$($665, $673);
                                                var $682 = Parser$Reply$value$($679, $680, Fm$Term$ori$($681, _expr$18));
                                                var $674 = $682;
                                                break;
                                        };
                                        var $666 = $674;
                                        break;
                                };
                                var $658 = $666;
                                break;
                        };
                        var $650 = $658;
                        break;
                };
                var $642 = $650;
                break;
        };
        return $642;
    };
    const Fm$Parser$lambda = x0 => x1 => Fm$Parser$lambda$(x0, x1);

    function Fm$Parser$lambda$erased$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $684 = self.idx;
                var $685 = self.code;
                var $686 = self.err;
                var $687 = Parser$Reply$error$($684, $685, $686);
                var $683 = $687;
                break;
            case 'Parser.Reply.value':
                var $688 = self.idx;
                var $689 = self.code;
                var $690 = self.val;
                var self = Fm$Parser$text$("<", $688, $689);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $692 = self.idx;
                        var $693 = self.code;
                        var $694 = self.err;
                        var $695 = Parser$Reply$error$($692, $693, $694);
                        var $691 = $695;
                        break;
                    case 'Parser.Reply.value':
                        var $696 = self.idx;
                        var $697 = self.code;
                        var $698 = self.val;
                        var self = Parser$until1$(Fm$Parser$text(">"), Fm$Parser$item(Fm$Parser$name1), $696, $697);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $700 = self.idx;
                                var $701 = self.code;
                                var $702 = self.err;
                                var $703 = Parser$Reply$error$($700, $701, $702);
                                var $699 = $703;
                                break;
                            case 'Parser.Reply.value':
                                var $704 = self.idx;
                                var $705 = self.code;
                                var $706 = self.val;
                                var self = Fm$Parser$term$($704, $705);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $708 = self.idx;
                                        var $709 = self.code;
                                        var $710 = self.err;
                                        var $711 = Parser$Reply$error$($708, $709, $710);
                                        var $707 = $711;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $712 = self.idx;
                                        var $713 = self.code;
                                        var $714 = self.val;
                                        var self = Fm$Parser$stop$($690, $712, $713);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $716 = self.idx;
                                                var $717 = self.code;
                                                var $718 = self.err;
                                                var $719 = Parser$Reply$error$($716, $717, $718);
                                                var $715 = $719;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $720 = self.idx;
                                                var $721 = self.code;
                                                var $722 = self.val;
                                                var _expr$18 = Fm$Parser$make_lambda$($706, $714);
                                                var $723 = Parser$Reply$value$($720, $721, Fm$Term$ori$($722, _expr$18));
                                                var $715 = $723;
                                                break;
                                        };
                                        var $707 = $715;
                                        break;
                                };
                                var $699 = $707;
                                break;
                        };
                        var $691 = $699;
                        break;
                };
                var $683 = $691;
                break;
        };
        return $683;
    };
    const Fm$Parser$lambda$erased = x0 => x1 => Fm$Parser$lambda$erased$(x0, x1);

    function Fm$Parser$lambda$nameless$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $725 = self.idx;
                var $726 = self.code;
                var $727 = self.err;
                var $728 = Parser$Reply$error$($725, $726, $727);
                var $724 = $728;
                break;
            case 'Parser.Reply.value':
                var $729 = self.idx;
                var $730 = self.code;
                var $731 = self.val;
                var self = Fm$Parser$text$("()", $729, $730);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $733 = self.idx;
                        var $734 = self.code;
                        var $735 = self.err;
                        var $736 = Parser$Reply$error$($733, $734, $735);
                        var $732 = $736;
                        break;
                    case 'Parser.Reply.value':
                        var $737 = self.idx;
                        var $738 = self.code;
                        var $739 = self.val;
                        var self = Fm$Parser$term$($737, $738);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $741 = self.idx;
                                var $742 = self.code;
                                var $743 = self.err;
                                var $744 = Parser$Reply$error$($741, $742, $743);
                                var $740 = $744;
                                break;
                            case 'Parser.Reply.value':
                                var $745 = self.idx;
                                var $746 = self.code;
                                var $747 = self.val;
                                var self = Fm$Parser$stop$($731, $745, $746);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $749 = self.idx;
                                        var $750 = self.code;
                                        var $751 = self.err;
                                        var $752 = Parser$Reply$error$($749, $750, $751);
                                        var $748 = $752;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $753 = self.idx;
                                        var $754 = self.code;
                                        var $755 = self.val;
                                        var _expr$15 = Fm$Term$lam$("", (_x$15 => {
                                            var $757 = $747;
                                            return $757;
                                        }));
                                        var $756 = Parser$Reply$value$($753, $754, Fm$Term$ori$($755, _expr$15));
                                        var $748 = $756;
                                        break;
                                };
                                var $740 = $748;
                                break;
                        };
                        var $732 = $740;
                        break;
                };
                var $724 = $732;
                break;
        };
        return $724;
    };
    const Fm$Parser$lambda$nameless = x0 => x1 => Fm$Parser$lambda$nameless$(x0, x1);

    function Fm$Parser$parenthesis$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("(", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $759 = self.idx;
                var $760 = self.code;
                var $761 = self.err;
                var $762 = Parser$Reply$error$($759, $760, $761);
                var $758 = $762;
                break;
            case 'Parser.Reply.value':
                var $763 = self.idx;
                var $764 = self.code;
                var $765 = self.val;
                var self = Fm$Parser$term$($763, $764);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $767 = self.idx;
                        var $768 = self.code;
                        var $769 = self.err;
                        var $770 = Parser$Reply$error$($767, $768, $769);
                        var $766 = $770;
                        break;
                    case 'Parser.Reply.value':
                        var $771 = self.idx;
                        var $772 = self.code;
                        var $773 = self.val;
                        var self = Fm$Parser$text$(")", $771, $772);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $775 = self.idx;
                                var $776 = self.code;
                                var $777 = self.err;
                                var $778 = Parser$Reply$error$($775, $776, $777);
                                var $774 = $778;
                                break;
                            case 'Parser.Reply.value':
                                var $779 = self.idx;
                                var $780 = self.code;
                                var $781 = self.val;
                                var $782 = Parser$Reply$value$($779, $780, $773);
                                var $774 = $782;
                                break;
                        };
                        var $766 = $774;
                        break;
                };
                var $758 = $766;
                break;
        };
        return $758;
    };
    const Fm$Parser$parenthesis = x0 => x1 => Fm$Parser$parenthesis$(x0, x1);

    function Fm$Term$ref$(_name$1) {
        var $783 = ({
            _: 'Fm.Term.ref',
            'name': _name$1
        });
        return $783;
    };
    const Fm$Term$ref = x0 => Fm$Term$ref$(x0);

    function Fm$Term$app$(_func$1, _argm$2) {
        var $784 = ({
            _: 'Fm.Term.app',
            'func': _func$1,
            'argm': _argm$2
        });
        return $784;
    };
    const Fm$Term$app = x0 => x1 => Fm$Term$app$(x0, x1);

    function Fm$Term$hol$(_path$1) {
        var $785 = ({
            _: 'Fm.Term.hol',
            'path': _path$1
        });
        return $785;
    };
    const Fm$Term$hol = x0 => Fm$Term$hol$(x0);

    function Fm$Term$let$(_name$1, _expr$2, _body$3) {
        var $786 = ({
            _: 'Fm.Term.let',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $786;
    };
    const Fm$Term$let = x0 => x1 => x2 => Fm$Term$let$(x0, x1, x2);

    function Fm$Parser$letforrange$u32$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $788 = self.idx;
                var $789 = self.code;
                var $790 = self.err;
                var $791 = Parser$Reply$error$($788, $789, $790);
                var $787 = $791;
                break;
            case 'Parser.Reply.value':
                var $792 = self.idx;
                var $793 = self.code;
                var $794 = self.val;
                var self = Fm$Parser$text$("let ", $792, $793);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $796 = self.idx;
                        var $797 = self.code;
                        var $798 = self.err;
                        var $799 = Parser$Reply$error$($796, $797, $798);
                        var $795 = $799;
                        break;
                    case 'Parser.Reply.value':
                        var $800 = self.idx;
                        var $801 = self.code;
                        var $802 = self.val;
                        var self = Fm$Parser$name1$($800, $801);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $804 = self.idx;
                                var $805 = self.code;
                                var $806 = self.err;
                                var $807 = Parser$Reply$error$($804, $805, $806);
                                var $803 = $807;
                                break;
                            case 'Parser.Reply.value':
                                var $808 = self.idx;
                                var $809 = self.code;
                                var $810 = self.val;
                                var self = Fm$Parser$text$("=", $808, $809);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $812 = self.idx;
                                        var $813 = self.code;
                                        var $814 = self.err;
                                        var $815 = Parser$Reply$error$($812, $813, $814);
                                        var $811 = $815;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $816 = self.idx;
                                        var $817 = self.code;
                                        var $818 = self.val;
                                        var self = Fm$Parser$text$("for ", $816, $817);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $820 = self.idx;
                                                var $821 = self.code;
                                                var $822 = self.err;
                                                var $823 = Parser$Reply$error$($820, $821, $822);
                                                var $819 = $823;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $824 = self.idx;
                                                var $825 = self.code;
                                                var $826 = self.val;
                                                var self = Fm$Parser$name1$($824, $825);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $828 = self.idx;
                                                        var $829 = self.code;
                                                        var $830 = self.err;
                                                        var $831 = Parser$Reply$error$($828, $829, $830);
                                                        var $827 = $831;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $832 = self.idx;
                                                        var $833 = self.code;
                                                        var $834 = self.val;
                                                        var self = Fm$Parser$text$(":", $832, $833);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $836 = self.idx;
                                                                var $837 = self.code;
                                                                var $838 = self.err;
                                                                var $839 = Parser$Reply$error$($836, $837, $838);
                                                                var $835 = $839;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $840 = self.idx;
                                                                var $841 = self.code;
                                                                var $842 = self.val;
                                                                var self = Fm$Parser$text$("U32", $840, $841);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $844 = self.idx;
                                                                        var $845 = self.code;
                                                                        var $846 = self.err;
                                                                        var $847 = Parser$Reply$error$($844, $845, $846);
                                                                        var $843 = $847;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $848 = self.idx;
                                                                        var $849 = self.code;
                                                                        var $850 = self.val;
                                                                        var self = Fm$Parser$text$("=", $848, $849);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $852 = self.idx;
                                                                                var $853 = self.code;
                                                                                var $854 = self.err;
                                                                                var $855 = Parser$Reply$error$($852, $853, $854);
                                                                                var $851 = $855;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $856 = self.idx;
                                                                                var $857 = self.code;
                                                                                var $858 = self.val;
                                                                                var self = Fm$Parser$term$($856, $857);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $860 = self.idx;
                                                                                        var $861 = self.code;
                                                                                        var $862 = self.err;
                                                                                        var $863 = Parser$Reply$error$($860, $861, $862);
                                                                                        var $859 = $863;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $864 = self.idx;
                                                                                        var $865 = self.code;
                                                                                        var $866 = self.val;
                                                                                        var self = Fm$Parser$text$("..", $864, $865);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $868 = self.idx;
                                                                                                var $869 = self.code;
                                                                                                var $870 = self.err;
                                                                                                var $871 = Parser$Reply$error$($868, $869, $870);
                                                                                                var $867 = $871;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $872 = self.idx;
                                                                                                var $873 = self.code;
                                                                                                var $874 = self.val;
                                                                                                var self = Fm$Parser$term$($872, $873);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $876 = self.idx;
                                                                                                        var $877 = self.code;
                                                                                                        var $878 = self.err;
                                                                                                        var $879 = Parser$Reply$error$($876, $877, $878);
                                                                                                        var $875 = $879;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $880 = self.idx;
                                                                                                        var $881 = self.code;
                                                                                                        var $882 = self.val;
                                                                                                        var self = Fm$Parser$text$(":", $880, $881);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $884 = self.idx;
                                                                                                                var $885 = self.code;
                                                                                                                var $886 = self.err;
                                                                                                                var $887 = Parser$Reply$error$($884, $885, $886);
                                                                                                                var $883 = $887;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $888 = self.idx;
                                                                                                                var $889 = self.code;
                                                                                                                var $890 = self.val;
                                                                                                                var self = Fm$Parser$term$($888, $889);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $892 = self.idx;
                                                                                                                        var $893 = self.code;
                                                                                                                        var $894 = self.err;
                                                                                                                        var $895 = Parser$Reply$error$($892, $893, $894);
                                                                                                                        var $891 = $895;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $896 = self.idx;
                                                                                                                        var $897 = self.code;
                                                                                                                        var $898 = self.val;
                                                                                                                        var self = Parser$maybe$(Fm$Parser$text(";"), $896, $897);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $900 = self.idx;
                                                                                                                                var $901 = self.code;
                                                                                                                                var $902 = self.err;
                                                                                                                                var $903 = Parser$Reply$error$($900, $901, $902);
                                                                                                                                var $899 = $903;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $904 = self.idx;
                                                                                                                                var $905 = self.code;
                                                                                                                                var $906 = self.val;
                                                                                                                                var self = Fm$Parser$term$($904, $905);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $908 = self.idx;
                                                                                                                                        var $909 = self.code;
                                                                                                                                        var $910 = self.err;
                                                                                                                                        var $911 = Parser$Reply$error$($908, $909, $910);
                                                                                                                                        var $907 = $911;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $912 = self.idx;
                                                                                                                                        var $913 = self.code;
                                                                                                                                        var $914 = self.val;
                                                                                                                                        var self = Fm$Parser$stop$($794, $912, $913);
                                                                                                                                        switch (self._) {
                                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                                var $916 = self.idx;
                                                                                                                                                var $917 = self.code;
                                                                                                                                                var $918 = self.err;
                                                                                                                                                var $919 = Parser$Reply$error$($916, $917, $918);
                                                                                                                                                var $915 = $919;
                                                                                                                                                break;
                                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                                var $920 = self.idx;
                                                                                                                                                var $921 = self.code;
                                                                                                                                                var $922 = self.val;
                                                                                                                                                var _term$54 = Fm$Term$ref$("U32.for");
                                                                                                                                                var _term$55 = Fm$Term$app$(_term$54, Fm$Term$hol$(Bits$e));
                                                                                                                                                var _term$56 = Fm$Term$app$(_term$55, Fm$Term$ref$($810));
                                                                                                                                                var _term$57 = Fm$Term$app$(_term$56, $866);
                                                                                                                                                var _term$58 = Fm$Term$app$(_term$57, $882);
                                                                                                                                                var _lamb$59 = Fm$Term$lam$($834, (_e$59 => {
                                                                                                                                                    var $924 = Fm$Term$lam$($810, (_s$60 => {
                                                                                                                                                        var $925 = $898;
                                                                                                                                                        return $925;
                                                                                                                                                    }));
                                                                                                                                                    return $924;
                                                                                                                                                }));
                                                                                                                                                var _term$60 = Fm$Term$app$(_term$58, _lamb$59);
                                                                                                                                                var _term$61 = Fm$Term$let$($810, _term$60, (_x$61 => {
                                                                                                                                                    var $926 = $914;
                                                                                                                                                    return $926;
                                                                                                                                                }));
                                                                                                                                                var $923 = Parser$Reply$value$($920, $921, Fm$Term$ori$($922, _term$61));
                                                                                                                                                var $915 = $923;
                                                                                                                                                break;
                                                                                                                                        };
                                                                                                                                        var $907 = $915;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $899 = $907;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $891 = $899;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $883 = $891;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $875 = $883;
                                                                                                        break;
                                                                                                };
                                                                                                var $867 = $875;
                                                                                                break;
                                                                                        };
                                                                                        var $859 = $867;
                                                                                        break;
                                                                                };
                                                                                var $851 = $859;
                                                                                break;
                                                                        };
                                                                        var $843 = $851;
                                                                        break;
                                                                };
                                                                var $835 = $843;
                                                                break;
                                                        };
                                                        var $827 = $835;
                                                        break;
                                                };
                                                var $819 = $827;
                                                break;
                                        };
                                        var $811 = $819;
                                        break;
                                };
                                var $803 = $811;
                                break;
                        };
                        var $795 = $803;
                        break;
                };
                var $787 = $795;
                break;
        };
        return $787;
    };
    const Fm$Parser$letforrange$u32 = x0 => x1 => Fm$Parser$letforrange$u32$(x0, x1);

    function Fm$Parser$letforin$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $928 = self.idx;
                var $929 = self.code;
                var $930 = self.err;
                var $931 = Parser$Reply$error$($928, $929, $930);
                var $927 = $931;
                break;
            case 'Parser.Reply.value':
                var $932 = self.idx;
                var $933 = self.code;
                var $934 = self.val;
                var self = Fm$Parser$text$("let ", $932, $933);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $936 = self.idx;
                        var $937 = self.code;
                        var $938 = self.err;
                        var $939 = Parser$Reply$error$($936, $937, $938);
                        var $935 = $939;
                        break;
                    case 'Parser.Reply.value':
                        var $940 = self.idx;
                        var $941 = self.code;
                        var $942 = self.val;
                        var self = Fm$Parser$name1$($940, $941);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $944 = self.idx;
                                var $945 = self.code;
                                var $946 = self.err;
                                var $947 = Parser$Reply$error$($944, $945, $946);
                                var $943 = $947;
                                break;
                            case 'Parser.Reply.value':
                                var $948 = self.idx;
                                var $949 = self.code;
                                var $950 = self.val;
                                var self = Fm$Parser$text$("=", $948, $949);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $952 = self.idx;
                                        var $953 = self.code;
                                        var $954 = self.err;
                                        var $955 = Parser$Reply$error$($952, $953, $954);
                                        var $951 = $955;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $956 = self.idx;
                                        var $957 = self.code;
                                        var $958 = self.val;
                                        var self = Fm$Parser$text$("for ", $956, $957);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $960 = self.idx;
                                                var $961 = self.code;
                                                var $962 = self.err;
                                                var $963 = Parser$Reply$error$($960, $961, $962);
                                                var $959 = $963;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $964 = self.idx;
                                                var $965 = self.code;
                                                var $966 = self.val;
                                                var self = Fm$Parser$name1$($964, $965);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $968 = self.idx;
                                                        var $969 = self.code;
                                                        var $970 = self.err;
                                                        var $971 = Parser$Reply$error$($968, $969, $970);
                                                        var $967 = $971;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $972 = self.idx;
                                                        var $973 = self.code;
                                                        var $974 = self.val;
                                                        var self = Fm$Parser$text$("in", $972, $973);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $976 = self.idx;
                                                                var $977 = self.code;
                                                                var $978 = self.err;
                                                                var $979 = Parser$Reply$error$($976, $977, $978);
                                                                var $975 = $979;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $980 = self.idx;
                                                                var $981 = self.code;
                                                                var $982 = self.val;
                                                                var self = Fm$Parser$term$($980, $981);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $984 = self.idx;
                                                                        var $985 = self.code;
                                                                        var $986 = self.err;
                                                                        var $987 = Parser$Reply$error$($984, $985, $986);
                                                                        var $983 = $987;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $988 = self.idx;
                                                                        var $989 = self.code;
                                                                        var $990 = self.val;
                                                                        var self = Fm$Parser$text$(":", $988, $989);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $992 = self.idx;
                                                                                var $993 = self.code;
                                                                                var $994 = self.err;
                                                                                var $995 = Parser$Reply$error$($992, $993, $994);
                                                                                var $991 = $995;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $996 = self.idx;
                                                                                var $997 = self.code;
                                                                                var $998 = self.val;
                                                                                var self = Fm$Parser$term$($996, $997);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1000 = self.idx;
                                                                                        var $1001 = self.code;
                                                                                        var $1002 = self.err;
                                                                                        var $1003 = Parser$Reply$error$($1000, $1001, $1002);
                                                                                        var $999 = $1003;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1004 = self.idx;
                                                                                        var $1005 = self.code;
                                                                                        var $1006 = self.val;
                                                                                        var self = Parser$maybe$(Fm$Parser$text(";"), $1004, $1005);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1008 = self.idx;
                                                                                                var $1009 = self.code;
                                                                                                var $1010 = self.err;
                                                                                                var $1011 = Parser$Reply$error$($1008, $1009, $1010);
                                                                                                var $1007 = $1011;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1012 = self.idx;
                                                                                                var $1013 = self.code;
                                                                                                var $1014 = self.val;
                                                                                                var self = Fm$Parser$term$($1012, $1013);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1016 = self.idx;
                                                                                                        var $1017 = self.code;
                                                                                                        var $1018 = self.err;
                                                                                                        var $1019 = Parser$Reply$error$($1016, $1017, $1018);
                                                                                                        var $1015 = $1019;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1020 = self.idx;
                                                                                                        var $1021 = self.code;
                                                                                                        var $1022 = self.val;
                                                                                                        var self = Fm$Parser$stop$($934, $1020, $1021);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1024 = self.idx;
                                                                                                                var $1025 = self.code;
                                                                                                                var $1026 = self.err;
                                                                                                                var $1027 = Parser$Reply$error$($1024, $1025, $1026);
                                                                                                                var $1023 = $1027;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1028 = self.idx;
                                                                                                                var $1029 = self.code;
                                                                                                                var $1030 = self.val;
                                                                                                                var _term$42 = Fm$Term$ref$("List.for");
                                                                                                                var _term$43 = Fm$Term$app$(_term$42, Fm$Term$hol$(Bits$e));
                                                                                                                var _term$44 = Fm$Term$app$(_term$43, $990);
                                                                                                                var _term$45 = Fm$Term$app$(_term$44, Fm$Term$hol$(Bits$e));
                                                                                                                var _term$46 = Fm$Term$app$(_term$45, Fm$Term$ref$($950));
                                                                                                                var _lamb$47 = Fm$Term$lam$($974, (_i$47 => {
                                                                                                                    var $1032 = Fm$Term$lam$($950, (_x$48 => {
                                                                                                                        var $1033 = $1006;
                                                                                                                        return $1033;
                                                                                                                    }));
                                                                                                                    return $1032;
                                                                                                                }));
                                                                                                                var _term$48 = Fm$Term$app$(_term$46, _lamb$47);
                                                                                                                var _term$49 = Fm$Term$let$($950, _term$48, (_x$49 => {
                                                                                                                    var $1034 = $1022;
                                                                                                                    return $1034;
                                                                                                                }));
                                                                                                                var $1031 = Parser$Reply$value$($1028, $1029, Fm$Term$ori$($1030, _term$49));
                                                                                                                var $1023 = $1031;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1015 = $1023;
                                                                                                        break;
                                                                                                };
                                                                                                var $1007 = $1015;
                                                                                                break;
                                                                                        };
                                                                                        var $999 = $1007;
                                                                                        break;
                                                                                };
                                                                                var $991 = $999;
                                                                                break;
                                                                        };
                                                                        var $983 = $991;
                                                                        break;
                                                                };
                                                                var $975 = $983;
                                                                break;
                                                        };
                                                        var $967 = $975;
                                                        break;
                                                };
                                                var $959 = $967;
                                                break;
                                        };
                                        var $951 = $959;
                                        break;
                                };
                                var $943 = $951;
                                break;
                        };
                        var $935 = $943;
                        break;
                };
                var $927 = $935;
                break;
        };
        return $927;
    };
    const Fm$Parser$letforin = x0 => x1 => Fm$Parser$letforin$(x0, x1);

    function Fm$Parser$let$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1036 = self.idx;
                var $1037 = self.code;
                var $1038 = self.err;
                var $1039 = Parser$Reply$error$($1036, $1037, $1038);
                var $1035 = $1039;
                break;
            case 'Parser.Reply.value':
                var $1040 = self.idx;
                var $1041 = self.code;
                var $1042 = self.val;
                var self = Fm$Parser$text$("let ", $1040, $1041);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1044 = self.idx;
                        var $1045 = self.code;
                        var $1046 = self.err;
                        var $1047 = Parser$Reply$error$($1044, $1045, $1046);
                        var $1043 = $1047;
                        break;
                    case 'Parser.Reply.value':
                        var $1048 = self.idx;
                        var $1049 = self.code;
                        var $1050 = self.val;
                        var self = Fm$Parser$name$($1048, $1049);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1052 = self.idx;
                                var $1053 = self.code;
                                var $1054 = self.err;
                                var $1055 = Parser$Reply$error$($1052, $1053, $1054);
                                var $1051 = $1055;
                                break;
                            case 'Parser.Reply.value':
                                var $1056 = self.idx;
                                var $1057 = self.code;
                                var $1058 = self.val;
                                var self = Fm$Parser$text$("=", $1056, $1057);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1060 = self.idx;
                                        var $1061 = self.code;
                                        var $1062 = self.err;
                                        var $1063 = Parser$Reply$error$($1060, $1061, $1062);
                                        var $1059 = $1063;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1064 = self.idx;
                                        var $1065 = self.code;
                                        var $1066 = self.val;
                                        var self = Fm$Parser$term$($1064, $1065);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1068 = self.idx;
                                                var $1069 = self.code;
                                                var $1070 = self.err;
                                                var $1071 = Parser$Reply$error$($1068, $1069, $1070);
                                                var $1067 = $1071;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1072 = self.idx;
                                                var $1073 = self.code;
                                                var $1074 = self.val;
                                                var self = Parser$maybe$(Fm$Parser$text(";"), $1072, $1073);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1076 = self.idx;
                                                        var $1077 = self.code;
                                                        var $1078 = self.err;
                                                        var $1079 = Parser$Reply$error$($1076, $1077, $1078);
                                                        var $1075 = $1079;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1080 = self.idx;
                                                        var $1081 = self.code;
                                                        var $1082 = self.val;
                                                        var self = Fm$Parser$term$($1080, $1081);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1084 = self.idx;
                                                                var $1085 = self.code;
                                                                var $1086 = self.err;
                                                                var $1087 = Parser$Reply$error$($1084, $1085, $1086);
                                                                var $1083 = $1087;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1088 = self.idx;
                                                                var $1089 = self.code;
                                                                var $1090 = self.val;
                                                                var self = Fm$Parser$stop$($1042, $1088, $1089);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1092 = self.idx;
                                                                        var $1093 = self.code;
                                                                        var $1094 = self.err;
                                                                        var $1095 = Parser$Reply$error$($1092, $1093, $1094);
                                                                        var $1091 = $1095;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1096 = self.idx;
                                                                        var $1097 = self.code;
                                                                        var $1098 = self.val;
                                                                        var $1099 = Parser$Reply$value$($1096, $1097, Fm$Term$ori$($1098, Fm$Term$let$($1058, $1074, (_x$27 => {
                                                                            var $1100 = $1090;
                                                                            return $1100;
                                                                        }))));
                                                                        var $1091 = $1099;
                                                                        break;
                                                                };
                                                                var $1083 = $1091;
                                                                break;
                                                        };
                                                        var $1075 = $1083;
                                                        break;
                                                };
                                                var $1067 = $1075;
                                                break;
                                        };
                                        var $1059 = $1067;
                                        break;
                                };
                                var $1051 = $1059;
                                break;
                        };
                        var $1043 = $1051;
                        break;
                };
                var $1035 = $1043;
                break;
        };
        return $1035;
    };
    const Fm$Parser$let = x0 => x1 => Fm$Parser$let$(x0, x1);

    function Fm$Parser$get$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1102 = self.idx;
                var $1103 = self.code;
                var $1104 = self.err;
                var $1105 = Parser$Reply$error$($1102, $1103, $1104);
                var $1101 = $1105;
                break;
            case 'Parser.Reply.value':
                var $1106 = self.idx;
                var $1107 = self.code;
                var $1108 = self.val;
                var self = Fm$Parser$text$("let ", $1106, $1107);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1110 = self.idx;
                        var $1111 = self.code;
                        var $1112 = self.err;
                        var $1113 = Parser$Reply$error$($1110, $1111, $1112);
                        var $1109 = $1113;
                        break;
                    case 'Parser.Reply.value':
                        var $1114 = self.idx;
                        var $1115 = self.code;
                        var $1116 = self.val;
                        var self = Fm$Parser$text$("{", $1114, $1115);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1118 = self.idx;
                                var $1119 = self.code;
                                var $1120 = self.err;
                                var $1121 = Parser$Reply$error$($1118, $1119, $1120);
                                var $1117 = $1121;
                                break;
                            case 'Parser.Reply.value':
                                var $1122 = self.idx;
                                var $1123 = self.code;
                                var $1124 = self.val;
                                var self = Fm$Parser$name$($1122, $1123);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1126 = self.idx;
                                        var $1127 = self.code;
                                        var $1128 = self.err;
                                        var $1129 = Parser$Reply$error$($1126, $1127, $1128);
                                        var $1125 = $1129;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1130 = self.idx;
                                        var $1131 = self.code;
                                        var $1132 = self.val;
                                        var self = Fm$Parser$text$(",", $1130, $1131);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1134 = self.idx;
                                                var $1135 = self.code;
                                                var $1136 = self.err;
                                                var $1137 = Parser$Reply$error$($1134, $1135, $1136);
                                                var $1133 = $1137;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1138 = self.idx;
                                                var $1139 = self.code;
                                                var $1140 = self.val;
                                                var self = Fm$Parser$name$($1138, $1139);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1142 = self.idx;
                                                        var $1143 = self.code;
                                                        var $1144 = self.err;
                                                        var $1145 = Parser$Reply$error$($1142, $1143, $1144);
                                                        var $1141 = $1145;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1146 = self.idx;
                                                        var $1147 = self.code;
                                                        var $1148 = self.val;
                                                        var self = Fm$Parser$text$("}", $1146, $1147);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1150 = self.idx;
                                                                var $1151 = self.code;
                                                                var $1152 = self.err;
                                                                var $1153 = Parser$Reply$error$($1150, $1151, $1152);
                                                                var $1149 = $1153;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1154 = self.idx;
                                                                var $1155 = self.code;
                                                                var $1156 = self.val;
                                                                var self = Fm$Parser$text$("=", $1154, $1155);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1158 = self.idx;
                                                                        var $1159 = self.code;
                                                                        var $1160 = self.err;
                                                                        var $1161 = Parser$Reply$error$($1158, $1159, $1160);
                                                                        var $1157 = $1161;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1162 = self.idx;
                                                                        var $1163 = self.code;
                                                                        var $1164 = self.val;
                                                                        var self = Fm$Parser$term$($1162, $1163);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1166 = self.idx;
                                                                                var $1167 = self.code;
                                                                                var $1168 = self.err;
                                                                                var $1169 = Parser$Reply$error$($1166, $1167, $1168);
                                                                                var $1165 = $1169;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1170 = self.idx;
                                                                                var $1171 = self.code;
                                                                                var $1172 = self.val;
                                                                                var self = Parser$maybe$(Fm$Parser$text(";"), $1170, $1171);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1174 = self.idx;
                                                                                        var $1175 = self.code;
                                                                                        var $1176 = self.err;
                                                                                        var $1177 = Parser$Reply$error$($1174, $1175, $1176);
                                                                                        var $1173 = $1177;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1178 = self.idx;
                                                                                        var $1179 = self.code;
                                                                                        var $1180 = self.val;
                                                                                        var self = Fm$Parser$term$($1178, $1179);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1182 = self.idx;
                                                                                                var $1183 = self.code;
                                                                                                var $1184 = self.err;
                                                                                                var $1185 = Parser$Reply$error$($1182, $1183, $1184);
                                                                                                var $1181 = $1185;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1186 = self.idx;
                                                                                                var $1187 = self.code;
                                                                                                var $1188 = self.val;
                                                                                                var self = Fm$Parser$stop$($1108, $1186, $1187);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1190 = self.idx;
                                                                                                        var $1191 = self.code;
                                                                                                        var $1192 = self.err;
                                                                                                        var $1193 = Parser$Reply$error$($1190, $1191, $1192);
                                                                                                        var $1189 = $1193;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1194 = self.idx;
                                                                                                        var $1195 = self.code;
                                                                                                        var $1196 = self.val;
                                                                                                        var _term$39 = $1172;
                                                                                                        var _term$40 = Fm$Term$app$(_term$39, Fm$Term$lam$("x", (_x$40 => {
                                                                                                            var $1198 = Fm$Term$hol$(Bits$e);
                                                                                                            return $1198;
                                                                                                        })));
                                                                                                        var _term$41 = Fm$Term$app$(_term$40, Fm$Term$lam$($1132, (_x$41 => {
                                                                                                            var $1199 = Fm$Term$lam$($1148, (_y$42 => {
                                                                                                                var $1200 = $1188;
                                                                                                                return $1200;
                                                                                                            }));
                                                                                                            return $1199;
                                                                                                        })));
                                                                                                        var $1197 = Parser$Reply$value$($1194, $1195, Fm$Term$ori$($1196, _term$41));
                                                                                                        var $1189 = $1197;
                                                                                                        break;
                                                                                                };
                                                                                                var $1181 = $1189;
                                                                                                break;
                                                                                        };
                                                                                        var $1173 = $1181;
                                                                                        break;
                                                                                };
                                                                                var $1165 = $1173;
                                                                                break;
                                                                        };
                                                                        var $1157 = $1165;
                                                                        break;
                                                                };
                                                                var $1149 = $1157;
                                                                break;
                                                        };
                                                        var $1141 = $1149;
                                                        break;
                                                };
                                                var $1133 = $1141;
                                                break;
                                        };
                                        var $1125 = $1133;
                                        break;
                                };
                                var $1117 = $1125;
                                break;
                        };
                        var $1109 = $1117;
                        break;
                };
                var $1101 = $1109;
                break;
        };
        return $1101;
    };
    const Fm$Parser$get = x0 => x1 => Fm$Parser$get$(x0, x1);

    function Fm$Term$def$(_name$1, _expr$2, _body$3) {
        var $1201 = ({
            _: 'Fm.Term.def',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $1201;
    };
    const Fm$Term$def = x0 => x1 => x2 => Fm$Term$def$(x0, x1, x2);

    function Fm$Parser$def$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1203 = self.idx;
                var $1204 = self.code;
                var $1205 = self.err;
                var $1206 = Parser$Reply$error$($1203, $1204, $1205);
                var $1202 = $1206;
                break;
            case 'Parser.Reply.value':
                var $1207 = self.idx;
                var $1208 = self.code;
                var $1209 = self.val;
                var self = Fm$Parser$text$("def ", $1207, $1208);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1211 = self.idx;
                        var $1212 = self.code;
                        var $1213 = self.err;
                        var $1214 = Parser$Reply$error$($1211, $1212, $1213);
                        var $1210 = $1214;
                        break;
                    case 'Parser.Reply.value':
                        var $1215 = self.idx;
                        var $1216 = self.code;
                        var $1217 = self.val;
                        var self = Fm$Parser$name$($1215, $1216);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1219 = self.idx;
                                var $1220 = self.code;
                                var $1221 = self.err;
                                var $1222 = Parser$Reply$error$($1219, $1220, $1221);
                                var $1218 = $1222;
                                break;
                            case 'Parser.Reply.value':
                                var $1223 = self.idx;
                                var $1224 = self.code;
                                var $1225 = self.val;
                                var self = Fm$Parser$text$("=", $1223, $1224);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1227 = self.idx;
                                        var $1228 = self.code;
                                        var $1229 = self.err;
                                        var $1230 = Parser$Reply$error$($1227, $1228, $1229);
                                        var $1226 = $1230;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1231 = self.idx;
                                        var $1232 = self.code;
                                        var $1233 = self.val;
                                        var self = Fm$Parser$term$($1231, $1232);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1235 = self.idx;
                                                var $1236 = self.code;
                                                var $1237 = self.err;
                                                var $1238 = Parser$Reply$error$($1235, $1236, $1237);
                                                var $1234 = $1238;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1239 = self.idx;
                                                var $1240 = self.code;
                                                var $1241 = self.val;
                                                var self = Parser$maybe$(Fm$Parser$text(";"), $1239, $1240);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1243 = self.idx;
                                                        var $1244 = self.code;
                                                        var $1245 = self.err;
                                                        var $1246 = Parser$Reply$error$($1243, $1244, $1245);
                                                        var $1242 = $1246;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1247 = self.idx;
                                                        var $1248 = self.code;
                                                        var $1249 = self.val;
                                                        var self = Fm$Parser$term$($1247, $1248);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1251 = self.idx;
                                                                var $1252 = self.code;
                                                                var $1253 = self.err;
                                                                var $1254 = Parser$Reply$error$($1251, $1252, $1253);
                                                                var $1250 = $1254;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1255 = self.idx;
                                                                var $1256 = self.code;
                                                                var $1257 = self.val;
                                                                var self = Fm$Parser$stop$($1209, $1255, $1256);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1259 = self.idx;
                                                                        var $1260 = self.code;
                                                                        var $1261 = self.err;
                                                                        var $1262 = Parser$Reply$error$($1259, $1260, $1261);
                                                                        var $1258 = $1262;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1263 = self.idx;
                                                                        var $1264 = self.code;
                                                                        var $1265 = self.val;
                                                                        var $1266 = Parser$Reply$value$($1263, $1264, Fm$Term$ori$($1265, Fm$Term$def$($1225, $1241, (_x$27 => {
                                                                            var $1267 = $1257;
                                                                            return $1267;
                                                                        }))));
                                                                        var $1258 = $1266;
                                                                        break;
                                                                };
                                                                var $1250 = $1258;
                                                                break;
                                                        };
                                                        var $1242 = $1250;
                                                        break;
                                                };
                                                var $1234 = $1242;
                                                break;
                                        };
                                        var $1226 = $1234;
                                        break;
                                };
                                var $1218 = $1226;
                                break;
                        };
                        var $1210 = $1218;
                        break;
                };
                var $1202 = $1210;
                break;
        };
        return $1202;
    };
    const Fm$Parser$def = x0 => x1 => Fm$Parser$def$(x0, x1);

    function Fm$Parser$if$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1269 = self.idx;
                var $1270 = self.code;
                var $1271 = self.err;
                var $1272 = Parser$Reply$error$($1269, $1270, $1271);
                var $1268 = $1272;
                break;
            case 'Parser.Reply.value':
                var $1273 = self.idx;
                var $1274 = self.code;
                var $1275 = self.val;
                var self = Fm$Parser$text$("if ", $1273, $1274);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1277 = self.idx;
                        var $1278 = self.code;
                        var $1279 = self.err;
                        var $1280 = Parser$Reply$error$($1277, $1278, $1279);
                        var $1276 = $1280;
                        break;
                    case 'Parser.Reply.value':
                        var $1281 = self.idx;
                        var $1282 = self.code;
                        var $1283 = self.val;
                        var self = Fm$Parser$term$($1281, $1282);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1285 = self.idx;
                                var $1286 = self.code;
                                var $1287 = self.err;
                                var $1288 = Parser$Reply$error$($1285, $1286, $1287);
                                var $1284 = $1288;
                                break;
                            case 'Parser.Reply.value':
                                var $1289 = self.idx;
                                var $1290 = self.code;
                                var $1291 = self.val;
                                var self = Fm$Parser$text$("then", $1289, $1290);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1293 = self.idx;
                                        var $1294 = self.code;
                                        var $1295 = self.err;
                                        var $1296 = Parser$Reply$error$($1293, $1294, $1295);
                                        var $1292 = $1296;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1297 = self.idx;
                                        var $1298 = self.code;
                                        var $1299 = self.val;
                                        var self = Fm$Parser$term$($1297, $1298);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1301 = self.idx;
                                                var $1302 = self.code;
                                                var $1303 = self.err;
                                                var $1304 = Parser$Reply$error$($1301, $1302, $1303);
                                                var $1300 = $1304;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1305 = self.idx;
                                                var $1306 = self.code;
                                                var $1307 = self.val;
                                                var self = Fm$Parser$text$("else", $1305, $1306);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1309 = self.idx;
                                                        var $1310 = self.code;
                                                        var $1311 = self.err;
                                                        var $1312 = Parser$Reply$error$($1309, $1310, $1311);
                                                        var $1308 = $1312;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1313 = self.idx;
                                                        var $1314 = self.code;
                                                        var $1315 = self.val;
                                                        var self = Fm$Parser$term$($1313, $1314);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1317 = self.idx;
                                                                var $1318 = self.code;
                                                                var $1319 = self.err;
                                                                var $1320 = Parser$Reply$error$($1317, $1318, $1319);
                                                                var $1316 = $1320;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1321 = self.idx;
                                                                var $1322 = self.code;
                                                                var $1323 = self.val;
                                                                var self = Fm$Parser$stop$($1275, $1321, $1322);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1325 = self.idx;
                                                                        var $1326 = self.code;
                                                                        var $1327 = self.err;
                                                                        var $1328 = Parser$Reply$error$($1325, $1326, $1327);
                                                                        var $1324 = $1328;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1329 = self.idx;
                                                                        var $1330 = self.code;
                                                                        var $1331 = self.val;
                                                                        var _term$27 = $1291;
                                                                        var _term$28 = Fm$Term$app$(_term$27, Fm$Term$lam$("", (_x$28 => {
                                                                            var $1333 = Fm$Term$hol$(Bits$e);
                                                                            return $1333;
                                                                        })));
                                                                        var _term$29 = Fm$Term$app$(_term$28, $1307);
                                                                        var _term$30 = Fm$Term$app$(_term$29, $1323);
                                                                        var $1332 = Parser$Reply$value$($1329, $1330, Fm$Term$ori$($1331, _term$30));
                                                                        var $1324 = $1332;
                                                                        break;
                                                                };
                                                                var $1316 = $1324;
                                                                break;
                                                        };
                                                        var $1308 = $1316;
                                                        break;
                                                };
                                                var $1300 = $1308;
                                                break;
                                        };
                                        var $1292 = $1300;
                                        break;
                                };
                                var $1284 = $1292;
                                break;
                        };
                        var $1276 = $1284;
                        break;
                };
                var $1268 = $1276;
                break;
        };
        return $1268;
    };
    const Fm$Parser$if = x0 => x1 => Fm$Parser$if$(x0, x1);

    function List$mapped$(_as$2, _f$4) {
        var self = _as$2;
        switch (self._) {
            case 'List.nil':
                var $1335 = List$nil;
                var $1334 = $1335;
                break;
            case 'List.cons':
                var $1336 = self.head;
                var $1337 = self.tail;
                var $1338 = List$cons$(_f$4($1336), List$mapped$($1337, _f$4));
                var $1334 = $1338;
                break;
        };
        return $1334;
    };
    const List$mapped = x0 => x1 => List$mapped$(x0, x1);
    const Fm$backslash = 92;
    const Fm$escapes = List$cons$(Pair$new$("\\b", 8), List$cons$(Pair$new$("\\f", 12), List$cons$(Pair$new$("\\n", 10), List$cons$(Pair$new$("\\r", 13), List$cons$(Pair$new$("\\t", 9), List$cons$(Pair$new$("\\v", 11), List$cons$(Pair$new$(String$cons$(Fm$backslash, String$cons$(Fm$backslash, String$nil)), Fm$backslash), List$cons$(Pair$new$("\\\"", 34), List$cons$(Pair$new$("\\0", 0), List$cons$(Pair$new$("\\\'", 39), List$nil))))))))));
    const Fm$Parser$char$single = Parser$first_of$(List$cons$(Parser$first_of$(List$mapped$(Fm$escapes, (_esc$1 => {
        var self = _esc$1;
        switch (self._) {
            case 'Pair.new':
                var $1340 = self.fst;
                var $1341 = self.snd;
                var $1342 = (_idx$4 => _code$5 => {
                    var self = Parser$text$($1340, _idx$4, _code$5);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $1344 = self.idx;
                            var $1345 = self.code;
                            var $1346 = self.err;
                            var $1347 = Parser$Reply$error$($1344, $1345, $1346);
                            var $1343 = $1347;
                            break;
                        case 'Parser.Reply.value':
                            var $1348 = self.idx;
                            var $1349 = self.code;
                            var $1350 = self.val;
                            var $1351 = Parser$Reply$value$($1348, $1349, $1341);
                            var $1343 = $1351;
                            break;
                    };
                    return $1343;
                });
                var $1339 = $1342;
                break;
        };
        return $1339;
    }))), List$cons$(Parser$one, List$nil)));

    function Fm$Term$chr$(_chrx$1) {
        var $1352 = ({
            _: 'Fm.Term.chr',
            'chrx': _chrx$1
        });
        return $1352;
    };
    const Fm$Term$chr = x0 => Fm$Term$chr$(x0);

    function Fm$Parser$char$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1354 = self.idx;
                var $1355 = self.code;
                var $1356 = self.err;
                var $1357 = Parser$Reply$error$($1354, $1355, $1356);
                var $1353 = $1357;
                break;
            case 'Parser.Reply.value':
                var $1358 = self.idx;
                var $1359 = self.code;
                var $1360 = self.val;
                var self = Fm$Parser$text$("\'", $1358, $1359);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1362 = self.idx;
                        var $1363 = self.code;
                        var $1364 = self.err;
                        var $1365 = Parser$Reply$error$($1362, $1363, $1364);
                        var $1361 = $1365;
                        break;
                    case 'Parser.Reply.value':
                        var $1366 = self.idx;
                        var $1367 = self.code;
                        var $1368 = self.val;
                        var self = Fm$Parser$char$single($1366)($1367);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1370 = self.idx;
                                var $1371 = self.code;
                                var $1372 = self.err;
                                var $1373 = Parser$Reply$error$($1370, $1371, $1372);
                                var $1369 = $1373;
                                break;
                            case 'Parser.Reply.value':
                                var $1374 = self.idx;
                                var $1375 = self.code;
                                var $1376 = self.val;
                                var self = Parser$text$("\'", $1374, $1375);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1378 = self.idx;
                                        var $1379 = self.code;
                                        var $1380 = self.err;
                                        var $1381 = Parser$Reply$error$($1378, $1379, $1380);
                                        var $1377 = $1381;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1382 = self.idx;
                                        var $1383 = self.code;
                                        var $1384 = self.val;
                                        var self = Fm$Parser$stop$($1360, $1382, $1383);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1386 = self.idx;
                                                var $1387 = self.code;
                                                var $1388 = self.err;
                                                var $1389 = Parser$Reply$error$($1386, $1387, $1388);
                                                var $1385 = $1389;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1390 = self.idx;
                                                var $1391 = self.code;
                                                var $1392 = self.val;
                                                var $1393 = Parser$Reply$value$($1390, $1391, Fm$Term$ori$($1392, Fm$Term$chr$($1376)));
                                                var $1385 = $1393;
                                                break;
                                        };
                                        var $1377 = $1385;
                                        break;
                                };
                                var $1369 = $1377;
                                break;
                        };
                        var $1361 = $1369;
                        break;
                };
                var $1353 = $1361;
                break;
        };
        return $1353;
    };
    const Fm$Parser$char = x0 => x1 => Fm$Parser$char$(x0, x1);

    function Fm$Term$str$(_strx$1) {
        var $1394 = ({
            _: 'Fm.Term.str',
            'strx': _strx$1
        });
        return $1394;
    };
    const Fm$Term$str = x0 => Fm$Term$str$(x0);

    function Fm$Parser$string$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1396 = self.idx;
                var $1397 = self.code;
                var $1398 = self.err;
                var $1399 = Parser$Reply$error$($1396, $1397, $1398);
                var $1395 = $1399;
                break;
            case 'Parser.Reply.value':
                var $1400 = self.idx;
                var $1401 = self.code;
                var $1402 = self.val;
                var _quot$6 = String$cons$(34, String$nil);
                var self = Fm$Parser$text$(_quot$6, $1400, $1401);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1404 = self.idx;
                        var $1405 = self.code;
                        var $1406 = self.err;
                        var $1407 = Parser$Reply$error$($1404, $1405, $1406);
                        var $1403 = $1407;
                        break;
                    case 'Parser.Reply.value':
                        var $1408 = self.idx;
                        var $1409 = self.code;
                        var $1410 = self.val;
                        var self = Parser$until$(Parser$text(_quot$6), Fm$Parser$char$single)($1408)($1409);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1412 = self.idx;
                                var $1413 = self.code;
                                var $1414 = self.err;
                                var $1415 = Parser$Reply$error$($1412, $1413, $1414);
                                var $1411 = $1415;
                                break;
                            case 'Parser.Reply.value':
                                var $1416 = self.idx;
                                var $1417 = self.code;
                                var $1418 = self.val;
                                var _strx$13 = List$fold$($1418, String$nil, String$cons);
                                var self = Fm$Parser$stop$($1402, $1416, $1417);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1420 = self.idx;
                                        var $1421 = self.code;
                                        var $1422 = self.err;
                                        var $1423 = Parser$Reply$error$($1420, $1421, $1422);
                                        var $1419 = $1423;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1424 = self.idx;
                                        var $1425 = self.code;
                                        var $1426 = self.val;
                                        var $1427 = Parser$Reply$value$($1424, $1425, Fm$Term$ori$($1426, Fm$Term$str$(_strx$13)));
                                        var $1419 = $1427;
                                        break;
                                };
                                var $1411 = $1419;
                                break;
                        };
                        var $1403 = $1411;
                        break;
                };
                var $1395 = $1403;
                break;
        };
        return $1395;
    };
    const Fm$Parser$string = x0 => x1 => Fm$Parser$string$(x0, x1);

    function Fm$Parser$pair$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1429 = self.idx;
                var $1430 = self.code;
                var $1431 = self.err;
                var $1432 = Parser$Reply$error$($1429, $1430, $1431);
                var $1428 = $1432;
                break;
            case 'Parser.Reply.value':
                var $1433 = self.idx;
                var $1434 = self.code;
                var $1435 = self.val;
                var self = Fm$Parser$text$("{", $1433, $1434);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1437 = self.idx;
                        var $1438 = self.code;
                        var $1439 = self.err;
                        var $1440 = Parser$Reply$error$($1437, $1438, $1439);
                        var $1436 = $1440;
                        break;
                    case 'Parser.Reply.value':
                        var $1441 = self.idx;
                        var $1442 = self.code;
                        var $1443 = self.val;
                        var self = Fm$Parser$term$($1441, $1442);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1445 = self.idx;
                                var $1446 = self.code;
                                var $1447 = self.err;
                                var $1448 = Parser$Reply$error$($1445, $1446, $1447);
                                var $1444 = $1448;
                                break;
                            case 'Parser.Reply.value':
                                var $1449 = self.idx;
                                var $1450 = self.code;
                                var $1451 = self.val;
                                var self = Fm$Parser$text$(",", $1449, $1450);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1453 = self.idx;
                                        var $1454 = self.code;
                                        var $1455 = self.err;
                                        var $1456 = Parser$Reply$error$($1453, $1454, $1455);
                                        var $1452 = $1456;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1457 = self.idx;
                                        var $1458 = self.code;
                                        var $1459 = self.val;
                                        var self = Fm$Parser$term$($1457, $1458);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1461 = self.idx;
                                                var $1462 = self.code;
                                                var $1463 = self.err;
                                                var $1464 = Parser$Reply$error$($1461, $1462, $1463);
                                                var $1460 = $1464;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1465 = self.idx;
                                                var $1466 = self.code;
                                                var $1467 = self.val;
                                                var self = Fm$Parser$text$("}", $1465, $1466);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1469 = self.idx;
                                                        var $1470 = self.code;
                                                        var $1471 = self.err;
                                                        var $1472 = Parser$Reply$error$($1469, $1470, $1471);
                                                        var $1468 = $1472;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1473 = self.idx;
                                                        var $1474 = self.code;
                                                        var $1475 = self.val;
                                                        var self = Fm$Parser$stop$($1435, $1473, $1474);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1477 = self.idx;
                                                                var $1478 = self.code;
                                                                var $1479 = self.err;
                                                                var $1480 = Parser$Reply$error$($1477, $1478, $1479);
                                                                var $1476 = $1480;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1481 = self.idx;
                                                                var $1482 = self.code;
                                                                var $1483 = self.val;
                                                                var _term$24 = Fm$Term$ref$("Pair.new");
                                                                var _term$25 = Fm$Term$app$(_term$24, Fm$Term$hol$(Bits$e));
                                                                var _term$26 = Fm$Term$app$(_term$25, Fm$Term$hol$(Bits$e));
                                                                var _term$27 = Fm$Term$app$(_term$26, $1451);
                                                                var _term$28 = Fm$Term$app$(_term$27, $1467);
                                                                var $1484 = Parser$Reply$value$($1481, $1482, Fm$Term$ori$($1483, _term$28));
                                                                var $1476 = $1484;
                                                                break;
                                                        };
                                                        var $1468 = $1476;
                                                        break;
                                                };
                                                var $1460 = $1468;
                                                break;
                                        };
                                        var $1452 = $1460;
                                        break;
                                };
                                var $1444 = $1452;
                                break;
                        };
                        var $1436 = $1444;
                        break;
                };
                var $1428 = $1436;
                break;
        };
        return $1428;
    };
    const Fm$Parser$pair = x0 => x1 => Fm$Parser$pair$(x0, x1);

    function Fm$Parser$sigma$type$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1486 = self.idx;
                var $1487 = self.code;
                var $1488 = self.err;
                var $1489 = Parser$Reply$error$($1486, $1487, $1488);
                var $1485 = $1489;
                break;
            case 'Parser.Reply.value':
                var $1490 = self.idx;
                var $1491 = self.code;
                var $1492 = self.val;
                var self = Fm$Parser$text$("{", $1490, $1491);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1494 = self.idx;
                        var $1495 = self.code;
                        var $1496 = self.err;
                        var $1497 = Parser$Reply$error$($1494, $1495, $1496);
                        var $1493 = $1497;
                        break;
                    case 'Parser.Reply.value':
                        var $1498 = self.idx;
                        var $1499 = self.code;
                        var $1500 = self.val;
                        var self = Fm$Parser$name1$($1498, $1499);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1502 = self.idx;
                                var $1503 = self.code;
                                var $1504 = self.err;
                                var $1505 = Parser$Reply$error$($1502, $1503, $1504);
                                var $1501 = $1505;
                                break;
                            case 'Parser.Reply.value':
                                var $1506 = self.idx;
                                var $1507 = self.code;
                                var $1508 = self.val;
                                var self = Fm$Parser$text$(":", $1506, $1507);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1510 = self.idx;
                                        var $1511 = self.code;
                                        var $1512 = self.err;
                                        var $1513 = Parser$Reply$error$($1510, $1511, $1512);
                                        var $1509 = $1513;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1514 = self.idx;
                                        var $1515 = self.code;
                                        var $1516 = self.val;
                                        var self = Fm$Parser$term$($1514, $1515);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1518 = self.idx;
                                                var $1519 = self.code;
                                                var $1520 = self.err;
                                                var $1521 = Parser$Reply$error$($1518, $1519, $1520);
                                                var $1517 = $1521;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1522 = self.idx;
                                                var $1523 = self.code;
                                                var $1524 = self.val;
                                                var self = Fm$Parser$text$("}", $1522, $1523);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1526 = self.idx;
                                                        var $1527 = self.code;
                                                        var $1528 = self.err;
                                                        var $1529 = Parser$Reply$error$($1526, $1527, $1528);
                                                        var $1525 = $1529;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1530 = self.idx;
                                                        var $1531 = self.code;
                                                        var $1532 = self.val;
                                                        var self = Fm$Parser$term$($1530, $1531);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1534 = self.idx;
                                                                var $1535 = self.code;
                                                                var $1536 = self.err;
                                                                var $1537 = Parser$Reply$error$($1534, $1535, $1536);
                                                                var $1533 = $1537;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1538 = self.idx;
                                                                var $1539 = self.code;
                                                                var $1540 = self.val;
                                                                var self = Fm$Parser$stop$($1492, $1538, $1539);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1542 = self.idx;
                                                                        var $1543 = self.code;
                                                                        var $1544 = self.err;
                                                                        var $1545 = Parser$Reply$error$($1542, $1543, $1544);
                                                                        var $1541 = $1545;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1546 = self.idx;
                                                                        var $1547 = self.code;
                                                                        var $1548 = self.val;
                                                                        var _term$27 = Fm$Term$ref$("Sigma");
                                                                        var _term$28 = Fm$Term$app$(_term$27, $1524);
                                                                        var _term$29 = Fm$Term$app$(_term$28, Fm$Term$lam$("x", (_x$29 => {
                                                                            var $1550 = $1540;
                                                                            return $1550;
                                                                        })));
                                                                        var $1549 = Parser$Reply$value$($1546, $1547, Fm$Term$ori$($1548, _term$29));
                                                                        var $1541 = $1549;
                                                                        break;
                                                                };
                                                                var $1533 = $1541;
                                                                break;
                                                        };
                                                        var $1525 = $1533;
                                                        break;
                                                };
                                                var $1517 = $1525;
                                                break;
                                        };
                                        var $1509 = $1517;
                                        break;
                                };
                                var $1501 = $1509;
                                break;
                        };
                        var $1493 = $1501;
                        break;
                };
                var $1485 = $1493;
                break;
        };
        return $1485;
    };
    const Fm$Parser$sigma$type = x0 => x1 => Fm$Parser$sigma$type$(x0, x1);

    function Fm$Parser$some$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1552 = self.idx;
                var $1553 = self.code;
                var $1554 = self.err;
                var $1555 = Parser$Reply$error$($1552, $1553, $1554);
                var $1551 = $1555;
                break;
            case 'Parser.Reply.value':
                var $1556 = self.idx;
                var $1557 = self.code;
                var $1558 = self.val;
                var self = Fm$Parser$text$("some(", $1556, $1557);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1560 = self.idx;
                        var $1561 = self.code;
                        var $1562 = self.err;
                        var $1563 = Parser$Reply$error$($1560, $1561, $1562);
                        var $1559 = $1563;
                        break;
                    case 'Parser.Reply.value':
                        var $1564 = self.idx;
                        var $1565 = self.code;
                        var $1566 = self.val;
                        var self = Fm$Parser$term$($1564, $1565);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1568 = self.idx;
                                var $1569 = self.code;
                                var $1570 = self.err;
                                var $1571 = Parser$Reply$error$($1568, $1569, $1570);
                                var $1567 = $1571;
                                break;
                            case 'Parser.Reply.value':
                                var $1572 = self.idx;
                                var $1573 = self.code;
                                var $1574 = self.val;
                                var self = Fm$Parser$text$(")", $1572, $1573);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1576 = self.idx;
                                        var $1577 = self.code;
                                        var $1578 = self.err;
                                        var $1579 = Parser$Reply$error$($1576, $1577, $1578);
                                        var $1575 = $1579;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1580 = self.idx;
                                        var $1581 = self.code;
                                        var $1582 = self.val;
                                        var self = Fm$Parser$stop$($1558, $1580, $1581);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1584 = self.idx;
                                                var $1585 = self.code;
                                                var $1586 = self.err;
                                                var $1587 = Parser$Reply$error$($1584, $1585, $1586);
                                                var $1583 = $1587;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1588 = self.idx;
                                                var $1589 = self.code;
                                                var $1590 = self.val;
                                                var _term$18 = Fm$Term$ref$("Maybe.some");
                                                var _term$19 = Fm$Term$app$(_term$18, Fm$Term$hol$(Bits$e));
                                                var _term$20 = Fm$Term$app$(_term$19, $1574);
                                                var $1591 = Parser$Reply$value$($1588, $1589, Fm$Term$ori$($1590, _term$20));
                                                var $1583 = $1591;
                                                break;
                                        };
                                        var $1575 = $1583;
                                        break;
                                };
                                var $1567 = $1575;
                                break;
                        };
                        var $1559 = $1567;
                        break;
                };
                var $1551 = $1559;
                break;
        };
        return $1551;
    };
    const Fm$Parser$some = x0 => x1 => Fm$Parser$some$(x0, x1);

    function Fm$Parser$apply$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1593 = self.idx;
                var $1594 = self.code;
                var $1595 = self.err;
                var $1596 = Parser$Reply$error$($1593, $1594, $1595);
                var $1592 = $1596;
                break;
            case 'Parser.Reply.value':
                var $1597 = self.idx;
                var $1598 = self.code;
                var $1599 = self.val;
                var self = Fm$Parser$text$("apply(", $1597, $1598);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1601 = self.idx;
                        var $1602 = self.code;
                        var $1603 = self.err;
                        var $1604 = Parser$Reply$error$($1601, $1602, $1603);
                        var $1600 = $1604;
                        break;
                    case 'Parser.Reply.value':
                        var $1605 = self.idx;
                        var $1606 = self.code;
                        var $1607 = self.val;
                        var self = Fm$Parser$term$($1605, $1606);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1609 = self.idx;
                                var $1610 = self.code;
                                var $1611 = self.err;
                                var $1612 = Parser$Reply$error$($1609, $1610, $1611);
                                var $1608 = $1612;
                                break;
                            case 'Parser.Reply.value':
                                var $1613 = self.idx;
                                var $1614 = self.code;
                                var $1615 = self.val;
                                var self = Fm$Parser$text$(",", $1613, $1614);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1617 = self.idx;
                                        var $1618 = self.code;
                                        var $1619 = self.err;
                                        var $1620 = Parser$Reply$error$($1617, $1618, $1619);
                                        var $1616 = $1620;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1621 = self.idx;
                                        var $1622 = self.code;
                                        var $1623 = self.val;
                                        var self = Fm$Parser$term$($1621, $1622);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1625 = self.idx;
                                                var $1626 = self.code;
                                                var $1627 = self.err;
                                                var $1628 = Parser$Reply$error$($1625, $1626, $1627);
                                                var $1624 = $1628;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1629 = self.idx;
                                                var $1630 = self.code;
                                                var $1631 = self.val;
                                                var self = Fm$Parser$text$(")", $1629, $1630);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1633 = self.idx;
                                                        var $1634 = self.code;
                                                        var $1635 = self.err;
                                                        var $1636 = Parser$Reply$error$($1633, $1634, $1635);
                                                        var $1632 = $1636;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1637 = self.idx;
                                                        var $1638 = self.code;
                                                        var $1639 = self.val;
                                                        var self = Fm$Parser$stop$($1599, $1637, $1638);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1641 = self.idx;
                                                                var $1642 = self.code;
                                                                var $1643 = self.err;
                                                                var $1644 = Parser$Reply$error$($1641, $1642, $1643);
                                                                var $1640 = $1644;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1645 = self.idx;
                                                                var $1646 = self.code;
                                                                var $1647 = self.val;
                                                                var _term$24 = Fm$Term$ref$("Equal.apply");
                                                                var _term$25 = Fm$Term$app$(_term$24, Fm$Term$hol$(Bits$e));
                                                                var _term$26 = Fm$Term$app$(_term$25, Fm$Term$hol$(Bits$e));
                                                                var _term$27 = Fm$Term$app$(_term$26, Fm$Term$hol$(Bits$e));
                                                                var _term$28 = Fm$Term$app$(_term$27, Fm$Term$hol$(Bits$e));
                                                                var _term$29 = Fm$Term$app$(_term$28, $1615);
                                                                var _term$30 = Fm$Term$app$(_term$29, $1631);
                                                                var $1648 = Parser$Reply$value$($1645, $1646, Fm$Term$ori$($1647, _term$30));
                                                                var $1640 = $1648;
                                                                break;
                                                        };
                                                        var $1632 = $1640;
                                                        break;
                                                };
                                                var $1624 = $1632;
                                                break;
                                        };
                                        var $1616 = $1624;
                                        break;
                                };
                                var $1608 = $1616;
                                break;
                        };
                        var $1600 = $1608;
                        break;
                };
                var $1592 = $1600;
                break;
        };
        return $1592;
    };
    const Fm$Parser$apply = x0 => x1 => Fm$Parser$apply$(x0, x1);

    function Fm$Parser$mirror$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1650 = self.idx;
                var $1651 = self.code;
                var $1652 = self.err;
                var $1653 = Parser$Reply$error$($1650, $1651, $1652);
                var $1649 = $1653;
                break;
            case 'Parser.Reply.value':
                var $1654 = self.idx;
                var $1655 = self.code;
                var $1656 = self.val;
                var self = Fm$Parser$text$("mirror(", $1654, $1655);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1658 = self.idx;
                        var $1659 = self.code;
                        var $1660 = self.err;
                        var $1661 = Parser$Reply$error$($1658, $1659, $1660);
                        var $1657 = $1661;
                        break;
                    case 'Parser.Reply.value':
                        var $1662 = self.idx;
                        var $1663 = self.code;
                        var $1664 = self.val;
                        var self = Fm$Parser$term$($1662, $1663);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1666 = self.idx;
                                var $1667 = self.code;
                                var $1668 = self.err;
                                var $1669 = Parser$Reply$error$($1666, $1667, $1668);
                                var $1665 = $1669;
                                break;
                            case 'Parser.Reply.value':
                                var $1670 = self.idx;
                                var $1671 = self.code;
                                var $1672 = self.val;
                                var self = Fm$Parser$text$(")", $1670, $1671);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1674 = self.idx;
                                        var $1675 = self.code;
                                        var $1676 = self.err;
                                        var $1677 = Parser$Reply$error$($1674, $1675, $1676);
                                        var $1673 = $1677;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1678 = self.idx;
                                        var $1679 = self.code;
                                        var $1680 = self.val;
                                        var self = Fm$Parser$stop$($1656, $1678, $1679);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1682 = self.idx;
                                                var $1683 = self.code;
                                                var $1684 = self.err;
                                                var $1685 = Parser$Reply$error$($1682, $1683, $1684);
                                                var $1681 = $1685;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1686 = self.idx;
                                                var $1687 = self.code;
                                                var $1688 = self.val;
                                                var _term$18 = Fm$Term$ref$("Equal.mirror");
                                                var _term$19 = Fm$Term$app$(_term$18, Fm$Term$hol$(Bits$e));
                                                var _term$20 = Fm$Term$app$(_term$19, Fm$Term$hol$(Bits$e));
                                                var _term$21 = Fm$Term$app$(_term$20, Fm$Term$hol$(Bits$e));
                                                var _term$22 = Fm$Term$app$(_term$21, $1672);
                                                var $1689 = Parser$Reply$value$($1686, $1687, Fm$Term$ori$($1688, _term$22));
                                                var $1681 = $1689;
                                                break;
                                        };
                                        var $1673 = $1681;
                                        break;
                                };
                                var $1665 = $1673;
                                break;
                        };
                        var $1657 = $1665;
                        break;
                };
                var $1649 = $1657;
                break;
        };
        return $1649;
    };
    const Fm$Parser$mirror = x0 => x1 => Fm$Parser$mirror$(x0, x1);

    function Fm$Name$read$(_str$1) {
        var $1690 = _str$1;
        return $1690;
    };
    const Fm$Name$read = x0 => Fm$Name$read$(x0);

    function Fm$Parser$list$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1692 = self.idx;
                var $1693 = self.code;
                var $1694 = self.err;
                var $1695 = Parser$Reply$error$($1692, $1693, $1694);
                var $1691 = $1695;
                break;
            case 'Parser.Reply.value':
                var $1696 = self.idx;
                var $1697 = self.code;
                var $1698 = self.val;
                var self = Fm$Parser$text$("[", $1696, $1697);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1700 = self.idx;
                        var $1701 = self.code;
                        var $1702 = self.err;
                        var $1703 = Parser$Reply$error$($1700, $1701, $1702);
                        var $1699 = $1703;
                        break;
                    case 'Parser.Reply.value':
                        var $1704 = self.idx;
                        var $1705 = self.code;
                        var $1706 = self.val;
                        var self = Parser$until$(Fm$Parser$text("]"), Fm$Parser$item(Fm$Parser$term))($1704)($1705);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1708 = self.idx;
                                var $1709 = self.code;
                                var $1710 = self.err;
                                var $1711 = Parser$Reply$error$($1708, $1709, $1710);
                                var $1707 = $1711;
                                break;
                            case 'Parser.Reply.value':
                                var $1712 = self.idx;
                                var $1713 = self.code;
                                var $1714 = self.val;
                                var self = Fm$Parser$stop$($1698, $1712, $1713);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1716 = self.idx;
                                        var $1717 = self.code;
                                        var $1718 = self.err;
                                        var $1719 = Parser$Reply$error$($1716, $1717, $1718);
                                        var $1715 = $1719;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1720 = self.idx;
                                        var $1721 = self.code;
                                        var $1722 = self.val;
                                        var $1723 = Parser$Reply$value$($1720, $1721, List$fold$($1714, Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("List.nil")), Fm$Term$hol$(Bits$e)), (_x$15 => _xs$16 => {
                                            var _term$17 = Fm$Term$ref$(Fm$Name$read$("List.cons"));
                                            var _term$18 = Fm$Term$app$(_term$17, Fm$Term$hol$(Bits$e));
                                            var _term$19 = Fm$Term$app$(_term$18, _x$15);
                                            var _term$20 = Fm$Term$app$(_term$19, _xs$16);
                                            var $1724 = Fm$Term$ori$($1722, _term$20);
                                            return $1724;
                                        })));
                                        var $1715 = $1723;
                                        break;
                                };
                                var $1707 = $1715;
                                break;
                        };
                        var $1699 = $1707;
                        break;
                };
                var $1691 = $1699;
                break;
        };
        return $1691;
    };
    const Fm$Parser$list = x0 => x1 => Fm$Parser$list$(x0, x1);

    function Fm$Parser$log$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1726 = self.idx;
                var $1727 = self.code;
                var $1728 = self.err;
                var $1729 = Parser$Reply$error$($1726, $1727, $1728);
                var $1725 = $1729;
                break;
            case 'Parser.Reply.value':
                var $1730 = self.idx;
                var $1731 = self.code;
                var $1732 = self.val;
                var self = Fm$Parser$text$("log(", $1730, $1731);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1734 = self.idx;
                        var $1735 = self.code;
                        var $1736 = self.err;
                        var $1737 = Parser$Reply$error$($1734, $1735, $1736);
                        var $1733 = $1737;
                        break;
                    case 'Parser.Reply.value':
                        var $1738 = self.idx;
                        var $1739 = self.code;
                        var $1740 = self.val;
                        var self = Parser$until$(Fm$Parser$text(")"), Fm$Parser$item(Fm$Parser$term))($1738)($1739);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1742 = self.idx;
                                var $1743 = self.code;
                                var $1744 = self.err;
                                var $1745 = Parser$Reply$error$($1742, $1743, $1744);
                                var $1741 = $1745;
                                break;
                            case 'Parser.Reply.value':
                                var $1746 = self.idx;
                                var $1747 = self.code;
                                var $1748 = self.val;
                                var self = Fm$Parser$term$($1746, $1747);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1750 = self.idx;
                                        var $1751 = self.code;
                                        var $1752 = self.err;
                                        var $1753 = Parser$Reply$error$($1750, $1751, $1752);
                                        var $1749 = $1753;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1754 = self.idx;
                                        var $1755 = self.code;
                                        var $1756 = self.val;
                                        var _term$15 = Fm$Term$ref$("Debug.log");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$hol$(Bits$e));
                                        var _args$17 = List$fold$($1748, Fm$Term$ref$("String.nil"), (_x$17 => _xs$18 => {
                                            var _arg$19 = Fm$Term$ref$("String.concat");
                                            var _arg$20 = Fm$Term$app$(_arg$19, _x$17);
                                            var _arg$21 = Fm$Term$app$(_arg$20, _xs$18);
                                            var $1758 = _arg$21;
                                            return $1758;
                                        }));
                                        var _term$18 = Fm$Term$app$(_term$16, _args$17);
                                        var _term$19 = Fm$Term$app$(_term$18, Fm$Term$lam$("x", (_x$19 => {
                                            var $1759 = $1756;
                                            return $1759;
                                        })));
                                        var self = Fm$Parser$stop$($1732, $1754, $1755);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1760 = self.idx;
                                                var $1761 = self.code;
                                                var $1762 = self.err;
                                                var $1763 = Parser$Reply$error$($1760, $1761, $1762);
                                                var $1757 = $1763;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1764 = self.idx;
                                                var $1765 = self.code;
                                                var $1766 = self.val;
                                                var $1767 = Parser$Reply$value$($1764, $1765, Fm$Term$ori$($1766, _term$19));
                                                var $1757 = $1767;
                                                break;
                                        };
                                        var $1749 = $1757;
                                        break;
                                };
                                var $1741 = $1749;
                                break;
                        };
                        var $1733 = $1741;
                        break;
                };
                var $1725 = $1733;
                break;
        };
        return $1725;
    };
    const Fm$Parser$log = x0 => x1 => Fm$Parser$log$(x0, x1);

    function Fm$Parser$forrange$u32$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1769 = self.idx;
                var $1770 = self.code;
                var $1771 = self.err;
                var $1772 = Parser$Reply$error$($1769, $1770, $1771);
                var $1768 = $1772;
                break;
            case 'Parser.Reply.value':
                var $1773 = self.idx;
                var $1774 = self.code;
                var $1775 = self.val;
                var self = Fm$Parser$text$("for ", $1773, $1774);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1777 = self.idx;
                        var $1778 = self.code;
                        var $1779 = self.err;
                        var $1780 = Parser$Reply$error$($1777, $1778, $1779);
                        var $1776 = $1780;
                        break;
                    case 'Parser.Reply.value':
                        var $1781 = self.idx;
                        var $1782 = self.code;
                        var $1783 = self.val;
                        var self = Fm$Parser$name1$($1781, $1782);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1785 = self.idx;
                                var $1786 = self.code;
                                var $1787 = self.err;
                                var $1788 = Parser$Reply$error$($1785, $1786, $1787);
                                var $1784 = $1788;
                                break;
                            case 'Parser.Reply.value':
                                var $1789 = self.idx;
                                var $1790 = self.code;
                                var $1791 = self.val;
                                var self = Fm$Parser$text$(":", $1789, $1790);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1793 = self.idx;
                                        var $1794 = self.code;
                                        var $1795 = self.err;
                                        var $1796 = Parser$Reply$error$($1793, $1794, $1795);
                                        var $1792 = $1796;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1797 = self.idx;
                                        var $1798 = self.code;
                                        var $1799 = self.val;
                                        var self = Fm$Parser$text$("U32", $1797, $1798);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1801 = self.idx;
                                                var $1802 = self.code;
                                                var $1803 = self.err;
                                                var $1804 = Parser$Reply$error$($1801, $1802, $1803);
                                                var $1800 = $1804;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1805 = self.idx;
                                                var $1806 = self.code;
                                                var $1807 = self.val;
                                                var self = Fm$Parser$text$("=", $1805, $1806);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1809 = self.idx;
                                                        var $1810 = self.code;
                                                        var $1811 = self.err;
                                                        var $1812 = Parser$Reply$error$($1809, $1810, $1811);
                                                        var $1808 = $1812;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1813 = self.idx;
                                                        var $1814 = self.code;
                                                        var $1815 = self.val;
                                                        var self = Fm$Parser$term$($1813, $1814);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1817 = self.idx;
                                                                var $1818 = self.code;
                                                                var $1819 = self.err;
                                                                var $1820 = Parser$Reply$error$($1817, $1818, $1819);
                                                                var $1816 = $1820;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1821 = self.idx;
                                                                var $1822 = self.code;
                                                                var $1823 = self.val;
                                                                var self = Fm$Parser$text$("..", $1821, $1822);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1825 = self.idx;
                                                                        var $1826 = self.code;
                                                                        var $1827 = self.err;
                                                                        var $1828 = Parser$Reply$error$($1825, $1826, $1827);
                                                                        var $1824 = $1828;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1829 = self.idx;
                                                                        var $1830 = self.code;
                                                                        var $1831 = self.val;
                                                                        var self = Fm$Parser$term$($1829, $1830);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1833 = self.idx;
                                                                                var $1834 = self.code;
                                                                                var $1835 = self.err;
                                                                                var $1836 = Parser$Reply$error$($1833, $1834, $1835);
                                                                                var $1832 = $1836;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1837 = self.idx;
                                                                                var $1838 = self.code;
                                                                                var $1839 = self.val;
                                                                                var self = Fm$Parser$text$("with", $1837, $1838);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1841 = self.idx;
                                                                                        var $1842 = self.code;
                                                                                        var $1843 = self.err;
                                                                                        var $1844 = Parser$Reply$error$($1841, $1842, $1843);
                                                                                        var $1840 = $1844;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1845 = self.idx;
                                                                                        var $1846 = self.code;
                                                                                        var $1847 = self.val;
                                                                                        var self = Fm$Parser$name1$($1845, $1846);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1849 = self.idx;
                                                                                                var $1850 = self.code;
                                                                                                var $1851 = self.err;
                                                                                                var $1852 = Parser$Reply$error$($1849, $1850, $1851);
                                                                                                var $1848 = $1852;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1853 = self.idx;
                                                                                                var $1854 = self.code;
                                                                                                var $1855 = self.val;
                                                                                                var self = Fm$Parser$text$(":", $1853, $1854);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1857 = self.idx;
                                                                                                        var $1858 = self.code;
                                                                                                        var $1859 = self.err;
                                                                                                        var $1860 = Parser$Reply$error$($1857, $1858, $1859);
                                                                                                        var $1856 = $1860;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1861 = self.idx;
                                                                                                        var $1862 = self.code;
                                                                                                        var $1863 = self.val;
                                                                                                        var self = Fm$Parser$term$($1861, $1862);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1865 = self.idx;
                                                                                                                var $1866 = self.code;
                                                                                                                var $1867 = self.err;
                                                                                                                var $1868 = Parser$Reply$error$($1865, $1866, $1867);
                                                                                                                var $1864 = $1868;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1869 = self.idx;
                                                                                                                var $1870 = self.code;
                                                                                                                var $1871 = self.val;
                                                                                                                var self = Fm$Parser$stop$($1775, $1869, $1870);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1873 = self.idx;
                                                                                                                        var $1874 = self.code;
                                                                                                                        var $1875 = self.err;
                                                                                                                        var $1876 = Parser$Reply$error$($1873, $1874, $1875);
                                                                                                                        var $1872 = $1876;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1877 = self.idx;
                                                                                                                        var $1878 = self.code;
                                                                                                                        var $1879 = self.val;
                                                                                                                        var _term$45 = Fm$Term$ref$("U32.for");
                                                                                                                        var _term$46 = Fm$Term$app$(_term$45, Fm$Term$hol$(Bits$e));
                                                                                                                        var _term$47 = Fm$Term$app$(_term$46, Fm$Term$ref$($1855));
                                                                                                                        var _term$48 = Fm$Term$app$(_term$47, $1823);
                                                                                                                        var _term$49 = Fm$Term$app$(_term$48, $1839);
                                                                                                                        var _lamb$50 = Fm$Term$lam$($1791, (_e$50 => {
                                                                                                                            var $1881 = Fm$Term$lam$($1855, (_s$51 => {
                                                                                                                                var $1882 = $1871;
                                                                                                                                return $1882;
                                                                                                                            }));
                                                                                                                            return $1881;
                                                                                                                        }));
                                                                                                                        var _term$51 = Fm$Term$app$(_term$49, _lamb$50);
                                                                                                                        var _term$52 = Fm$Term$let$($1855, _term$51, (_x$52 => {
                                                                                                                            var $1883 = Fm$Term$ref$($1855);
                                                                                                                            return $1883;
                                                                                                                        }));
                                                                                                                        var $1880 = Parser$Reply$value$($1877, $1878, Fm$Term$ori$($1879, _term$52));
                                                                                                                        var $1872 = $1880;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1864 = $1872;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1856 = $1864;
                                                                                                        break;
                                                                                                };
                                                                                                var $1848 = $1856;
                                                                                                break;
                                                                                        };
                                                                                        var $1840 = $1848;
                                                                                        break;
                                                                                };
                                                                                var $1832 = $1840;
                                                                                break;
                                                                        };
                                                                        var $1824 = $1832;
                                                                        break;
                                                                };
                                                                var $1816 = $1824;
                                                                break;
                                                        };
                                                        var $1808 = $1816;
                                                        break;
                                                };
                                                var $1800 = $1808;
                                                break;
                                        };
                                        var $1792 = $1800;
                                        break;
                                };
                                var $1784 = $1792;
                                break;
                        };
                        var $1776 = $1784;
                        break;
                };
                var $1768 = $1776;
                break;
        };
        return $1768;
    };
    const Fm$Parser$forrange$u32 = x0 => x1 => Fm$Parser$forrange$u32$(x0, x1);

    function Fm$Parser$forrange$u32$2$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1885 = self.idx;
                var $1886 = self.code;
                var $1887 = self.err;
                var $1888 = Parser$Reply$error$($1885, $1886, $1887);
                var $1884 = $1888;
                break;
            case 'Parser.Reply.value':
                var $1889 = self.idx;
                var $1890 = self.code;
                var $1891 = self.val;
                var self = Fm$Parser$text$("for ", $1889, $1890);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1893 = self.idx;
                        var $1894 = self.code;
                        var $1895 = self.err;
                        var $1896 = Parser$Reply$error$($1893, $1894, $1895);
                        var $1892 = $1896;
                        break;
                    case 'Parser.Reply.value':
                        var $1897 = self.idx;
                        var $1898 = self.code;
                        var $1899 = self.val;
                        var self = Fm$Parser$name1$($1897, $1898);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1901 = self.idx;
                                var $1902 = self.code;
                                var $1903 = self.err;
                                var $1904 = Parser$Reply$error$($1901, $1902, $1903);
                                var $1900 = $1904;
                                break;
                            case 'Parser.Reply.value':
                                var $1905 = self.idx;
                                var $1906 = self.code;
                                var $1907 = self.val;
                                var self = Fm$Parser$text$(":", $1905, $1906);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1909 = self.idx;
                                        var $1910 = self.code;
                                        var $1911 = self.err;
                                        var $1912 = Parser$Reply$error$($1909, $1910, $1911);
                                        var $1908 = $1912;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1913 = self.idx;
                                        var $1914 = self.code;
                                        var $1915 = self.val;
                                        var self = Fm$Parser$text$("U32", $1913, $1914);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1917 = self.idx;
                                                var $1918 = self.code;
                                                var $1919 = self.err;
                                                var $1920 = Parser$Reply$error$($1917, $1918, $1919);
                                                var $1916 = $1920;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1921 = self.idx;
                                                var $1922 = self.code;
                                                var $1923 = self.val;
                                                var self = Fm$Parser$text$("=", $1921, $1922);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1925 = self.idx;
                                                        var $1926 = self.code;
                                                        var $1927 = self.err;
                                                        var $1928 = Parser$Reply$error$($1925, $1926, $1927);
                                                        var $1924 = $1928;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1929 = self.idx;
                                                        var $1930 = self.code;
                                                        var $1931 = self.val;
                                                        var self = Fm$Parser$term$($1929, $1930);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1933 = self.idx;
                                                                var $1934 = self.code;
                                                                var $1935 = self.err;
                                                                var $1936 = Parser$Reply$error$($1933, $1934, $1935);
                                                                var $1932 = $1936;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1937 = self.idx;
                                                                var $1938 = self.code;
                                                                var $1939 = self.val;
                                                                var self = Fm$Parser$text$("..", $1937, $1938);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1941 = self.idx;
                                                                        var $1942 = self.code;
                                                                        var $1943 = self.err;
                                                                        var $1944 = Parser$Reply$error$($1941, $1942, $1943);
                                                                        var $1940 = $1944;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1945 = self.idx;
                                                                        var $1946 = self.code;
                                                                        var $1947 = self.val;
                                                                        var self = Fm$Parser$term$($1945, $1946);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1949 = self.idx;
                                                                                var $1950 = self.code;
                                                                                var $1951 = self.err;
                                                                                var $1952 = Parser$Reply$error$($1949, $1950, $1951);
                                                                                var $1948 = $1952;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1953 = self.idx;
                                                                                var $1954 = self.code;
                                                                                var $1955 = self.val;
                                                                                var self = Fm$Parser$text$(":", $1953, $1954);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1957 = self.idx;
                                                                                        var $1958 = self.code;
                                                                                        var $1959 = self.err;
                                                                                        var $1960 = Parser$Reply$error$($1957, $1958, $1959);
                                                                                        var $1956 = $1960;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1961 = self.idx;
                                                                                        var $1962 = self.code;
                                                                                        var $1963 = self.val;
                                                                                        var self = Fm$Parser$name1$($1961, $1962);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1965 = self.idx;
                                                                                                var $1966 = self.code;
                                                                                                var $1967 = self.err;
                                                                                                var $1968 = Parser$Reply$error$($1965, $1966, $1967);
                                                                                                var $1964 = $1968;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1969 = self.idx;
                                                                                                var $1970 = self.code;
                                                                                                var $1971 = self.val;
                                                                                                var self = Fm$Parser$text$("=", $1969, $1970);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1973 = self.idx;
                                                                                                        var $1974 = self.code;
                                                                                                        var $1975 = self.err;
                                                                                                        var $1976 = Parser$Reply$error$($1973, $1974, $1975);
                                                                                                        var $1972 = $1976;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1977 = self.idx;
                                                                                                        var $1978 = self.code;
                                                                                                        var $1979 = self.val;
                                                                                                        var self = Fm$Parser$term$($1977, $1978);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1981 = self.idx;
                                                                                                                var $1982 = self.code;
                                                                                                                var $1983 = self.err;
                                                                                                                var $1984 = Parser$Reply$error$($1981, $1982, $1983);
                                                                                                                var $1980 = $1984;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1985 = self.idx;
                                                                                                                var $1986 = self.code;
                                                                                                                var $1987 = self.val;
                                                                                                                var self = Parser$maybe$(Fm$Parser$text(";"), $1985, $1986);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1989 = self.idx;
                                                                                                                        var $1990 = self.code;
                                                                                                                        var $1991 = self.err;
                                                                                                                        var $1992 = Parser$Reply$error$($1989, $1990, $1991);
                                                                                                                        var $1988 = $1992;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1993 = self.idx;
                                                                                                                        var $1994 = self.code;
                                                                                                                        var $1995 = self.val;
                                                                                                                        var self = Fm$Parser$term$($1993, $1994);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1997 = self.idx;
                                                                                                                                var $1998 = self.code;
                                                                                                                                var $1999 = self.err;
                                                                                                                                var $2000 = Parser$Reply$error$($1997, $1998, $1999);
                                                                                                                                var $1996 = $2000;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $2001 = self.idx;
                                                                                                                                var $2002 = self.code;
                                                                                                                                var $2003 = self.val;
                                                                                                                                var self = Fm$Parser$stop$($1891, $2001, $2002);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $2005 = self.idx;
                                                                                                                                        var $2006 = self.code;
                                                                                                                                        var $2007 = self.err;
                                                                                                                                        var $2008 = Parser$Reply$error$($2005, $2006, $2007);
                                                                                                                                        var $2004 = $2008;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $2009 = self.idx;
                                                                                                                                        var $2010 = self.code;
                                                                                                                                        var $2011 = self.val;
                                                                                                                                        var _term$51 = Fm$Term$ref$("U32.for");
                                                                                                                                        var _term$52 = Fm$Term$app$(_term$51, Fm$Term$hol$(Bits$e));
                                                                                                                                        var _term$53 = Fm$Term$app$(_term$52, Fm$Term$ref$($1971));
                                                                                                                                        var _term$54 = Fm$Term$app$(_term$53, $1939);
                                                                                                                                        var _term$55 = Fm$Term$app$(_term$54, $1955);
                                                                                                                                        var _lamb$56 = Fm$Term$lam$($1907, (_e$56 => {
                                                                                                                                            var $2013 = Fm$Term$lam$($1971, (_s$57 => {
                                                                                                                                                var $2014 = $1987;
                                                                                                                                                return $2014;
                                                                                                                                            }));
                                                                                                                                            return $2013;
                                                                                                                                        }));
                                                                                                                                        var _term$57 = Fm$Term$app$(_term$55, _lamb$56);
                                                                                                                                        var _term$58 = Fm$Term$let$($1971, _term$57, (_x$58 => {
                                                                                                                                            var $2015 = $2003;
                                                                                                                                            return $2015;
                                                                                                                                        }));
                                                                                                                                        var $2012 = Parser$Reply$value$($2009, $2010, Fm$Term$ori$($2011, _term$58));
                                                                                                                                        var $2004 = $2012;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $1996 = $2004;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1988 = $1996;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1980 = $1988;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1972 = $1980;
                                                                                                        break;
                                                                                                };
                                                                                                var $1964 = $1972;
                                                                                                break;
                                                                                        };
                                                                                        var $1956 = $1964;
                                                                                        break;
                                                                                };
                                                                                var $1948 = $1956;
                                                                                break;
                                                                        };
                                                                        var $1940 = $1948;
                                                                        break;
                                                                };
                                                                var $1932 = $1940;
                                                                break;
                                                        };
                                                        var $1924 = $1932;
                                                        break;
                                                };
                                                var $1916 = $1924;
                                                break;
                                        };
                                        var $1908 = $1916;
                                        break;
                                };
                                var $1900 = $1908;
                                break;
                        };
                        var $1892 = $1900;
                        break;
                };
                var $1884 = $1892;
                break;
        };
        return $1884;
    };
    const Fm$Parser$forrange$u32$2 = x0 => x1 => Fm$Parser$forrange$u32$2$(x0, x1);

    function Fm$Parser$forin$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2017 = self.idx;
                var $2018 = self.code;
                var $2019 = self.err;
                var $2020 = Parser$Reply$error$($2017, $2018, $2019);
                var $2016 = $2020;
                break;
            case 'Parser.Reply.value':
                var $2021 = self.idx;
                var $2022 = self.code;
                var $2023 = self.val;
                var self = Fm$Parser$text$("for ", $2021, $2022);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2025 = self.idx;
                        var $2026 = self.code;
                        var $2027 = self.err;
                        var $2028 = Parser$Reply$error$($2025, $2026, $2027);
                        var $2024 = $2028;
                        break;
                    case 'Parser.Reply.value':
                        var $2029 = self.idx;
                        var $2030 = self.code;
                        var $2031 = self.val;
                        var self = Fm$Parser$name1$($2029, $2030);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2033 = self.idx;
                                var $2034 = self.code;
                                var $2035 = self.err;
                                var $2036 = Parser$Reply$error$($2033, $2034, $2035);
                                var $2032 = $2036;
                                break;
                            case 'Parser.Reply.value':
                                var $2037 = self.idx;
                                var $2038 = self.code;
                                var $2039 = self.val;
                                var self = Fm$Parser$text$("in", $2037, $2038);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2041 = self.idx;
                                        var $2042 = self.code;
                                        var $2043 = self.err;
                                        var $2044 = Parser$Reply$error$($2041, $2042, $2043);
                                        var $2040 = $2044;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2045 = self.idx;
                                        var $2046 = self.code;
                                        var $2047 = self.val;
                                        var self = Fm$Parser$term$($2045, $2046);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2049 = self.idx;
                                                var $2050 = self.code;
                                                var $2051 = self.err;
                                                var $2052 = Parser$Reply$error$($2049, $2050, $2051);
                                                var $2048 = $2052;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2053 = self.idx;
                                                var $2054 = self.code;
                                                var $2055 = self.val;
                                                var self = Fm$Parser$text$("with", $2053, $2054);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2057 = self.idx;
                                                        var $2058 = self.code;
                                                        var $2059 = self.err;
                                                        var $2060 = Parser$Reply$error$($2057, $2058, $2059);
                                                        var $2056 = $2060;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2061 = self.idx;
                                                        var $2062 = self.code;
                                                        var $2063 = self.val;
                                                        var self = Fm$Parser$name1$($2061, $2062);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2065 = self.idx;
                                                                var $2066 = self.code;
                                                                var $2067 = self.err;
                                                                var $2068 = Parser$Reply$error$($2065, $2066, $2067);
                                                                var $2064 = $2068;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2069 = self.idx;
                                                                var $2070 = self.code;
                                                                var $2071 = self.val;
                                                                var self = Fm$Parser$text$(":", $2069, $2070);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2073 = self.idx;
                                                                        var $2074 = self.code;
                                                                        var $2075 = self.err;
                                                                        var $2076 = Parser$Reply$error$($2073, $2074, $2075);
                                                                        var $2072 = $2076;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2077 = self.idx;
                                                                        var $2078 = self.code;
                                                                        var $2079 = self.val;
                                                                        var self = Fm$Parser$term$($2077, $2078);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2081 = self.idx;
                                                                                var $2082 = self.code;
                                                                                var $2083 = self.err;
                                                                                var $2084 = Parser$Reply$error$($2081, $2082, $2083);
                                                                                var $2080 = $2084;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2085 = self.idx;
                                                                                var $2086 = self.code;
                                                                                var $2087 = self.val;
                                                                                var self = Fm$Parser$stop$($2023, $2085, $2086);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2089 = self.idx;
                                                                                        var $2090 = self.code;
                                                                                        var $2091 = self.err;
                                                                                        var $2092 = Parser$Reply$error$($2089, $2090, $2091);
                                                                                        var $2088 = $2092;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2093 = self.idx;
                                                                                        var $2094 = self.code;
                                                                                        var $2095 = self.val;
                                                                                        var _term$33 = Fm$Term$ref$("List.for");
                                                                                        var _term$34 = Fm$Term$app$(_term$33, Fm$Term$hol$(Bits$e));
                                                                                        var _term$35 = Fm$Term$app$(_term$34, $2055);
                                                                                        var _term$36 = Fm$Term$app$(_term$35, Fm$Term$hol$(Bits$e));
                                                                                        var _term$37 = Fm$Term$app$(_term$36, Fm$Term$ref$($2071));
                                                                                        var _lamb$38 = Fm$Term$lam$($2039, (_i$38 => {
                                                                                            var $2097 = Fm$Term$lam$($2071, (_x$39 => {
                                                                                                var $2098 = $2087;
                                                                                                return $2098;
                                                                                            }));
                                                                                            return $2097;
                                                                                        }));
                                                                                        var _term$39 = Fm$Term$app$(_term$37, _lamb$38);
                                                                                        var _term$40 = Fm$Term$let$($2071, _term$39, (_x$40 => {
                                                                                            var $2099 = Fm$Term$ref$($2071);
                                                                                            return $2099;
                                                                                        }));
                                                                                        var $2096 = Parser$Reply$value$($2093, $2094, Fm$Term$ori$($2095, _term$40));
                                                                                        var $2088 = $2096;
                                                                                        break;
                                                                                };
                                                                                var $2080 = $2088;
                                                                                break;
                                                                        };
                                                                        var $2072 = $2080;
                                                                        break;
                                                                };
                                                                var $2064 = $2072;
                                                                break;
                                                        };
                                                        var $2056 = $2064;
                                                        break;
                                                };
                                                var $2048 = $2056;
                                                break;
                                        };
                                        var $2040 = $2048;
                                        break;
                                };
                                var $2032 = $2040;
                                break;
                        };
                        var $2024 = $2032;
                        break;
                };
                var $2016 = $2024;
                break;
        };
        return $2016;
    };
    const Fm$Parser$forin = x0 => x1 => Fm$Parser$forin$(x0, x1);

    function Fm$Parser$forin$2$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2101 = self.idx;
                var $2102 = self.code;
                var $2103 = self.err;
                var $2104 = Parser$Reply$error$($2101, $2102, $2103);
                var $2100 = $2104;
                break;
            case 'Parser.Reply.value':
                var $2105 = self.idx;
                var $2106 = self.code;
                var $2107 = self.val;
                var self = Fm$Parser$text$("for ", $2105, $2106);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2109 = self.idx;
                        var $2110 = self.code;
                        var $2111 = self.err;
                        var $2112 = Parser$Reply$error$($2109, $2110, $2111);
                        var $2108 = $2112;
                        break;
                    case 'Parser.Reply.value':
                        var $2113 = self.idx;
                        var $2114 = self.code;
                        var $2115 = self.val;
                        var self = Fm$Parser$name1$($2113, $2114);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2117 = self.idx;
                                var $2118 = self.code;
                                var $2119 = self.err;
                                var $2120 = Parser$Reply$error$($2117, $2118, $2119);
                                var $2116 = $2120;
                                break;
                            case 'Parser.Reply.value':
                                var $2121 = self.idx;
                                var $2122 = self.code;
                                var $2123 = self.val;
                                var self = Fm$Parser$text$("in", $2121, $2122);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2125 = self.idx;
                                        var $2126 = self.code;
                                        var $2127 = self.err;
                                        var $2128 = Parser$Reply$error$($2125, $2126, $2127);
                                        var $2124 = $2128;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2129 = self.idx;
                                        var $2130 = self.code;
                                        var $2131 = self.val;
                                        var self = Fm$Parser$term$($2129, $2130);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2133 = self.idx;
                                                var $2134 = self.code;
                                                var $2135 = self.err;
                                                var $2136 = Parser$Reply$error$($2133, $2134, $2135);
                                                var $2132 = $2136;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2137 = self.idx;
                                                var $2138 = self.code;
                                                var $2139 = self.val;
                                                var self = Fm$Parser$text$(":", $2137, $2138);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2141 = self.idx;
                                                        var $2142 = self.code;
                                                        var $2143 = self.err;
                                                        var $2144 = Parser$Reply$error$($2141, $2142, $2143);
                                                        var $2140 = $2144;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2145 = self.idx;
                                                        var $2146 = self.code;
                                                        var $2147 = self.val;
                                                        var self = Fm$Parser$name1$($2145, $2146);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2149 = self.idx;
                                                                var $2150 = self.code;
                                                                var $2151 = self.err;
                                                                var $2152 = Parser$Reply$error$($2149, $2150, $2151);
                                                                var $2148 = $2152;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2153 = self.idx;
                                                                var $2154 = self.code;
                                                                var $2155 = self.val;
                                                                var self = Fm$Parser$text$("=", $2153, $2154);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2157 = self.idx;
                                                                        var $2158 = self.code;
                                                                        var $2159 = self.err;
                                                                        var $2160 = Parser$Reply$error$($2157, $2158, $2159);
                                                                        var $2156 = $2160;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2161 = self.idx;
                                                                        var $2162 = self.code;
                                                                        var $2163 = self.val;
                                                                        var self = Fm$Parser$term$($2161, $2162);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2165 = self.idx;
                                                                                var $2166 = self.code;
                                                                                var $2167 = self.err;
                                                                                var $2168 = Parser$Reply$error$($2165, $2166, $2167);
                                                                                var $2164 = $2168;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2169 = self.idx;
                                                                                var $2170 = self.code;
                                                                                var $2171 = self.val;
                                                                                var self = Parser$maybe$(Fm$Parser$text(";"), $2169, $2170);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2173 = self.idx;
                                                                                        var $2174 = self.code;
                                                                                        var $2175 = self.err;
                                                                                        var $2176 = Parser$Reply$error$($2173, $2174, $2175);
                                                                                        var $2172 = $2176;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2177 = self.idx;
                                                                                        var $2178 = self.code;
                                                                                        var $2179 = self.val;
                                                                                        var self = Fm$Parser$term$($2177, $2178);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2181 = self.idx;
                                                                                                var $2182 = self.code;
                                                                                                var $2183 = self.err;
                                                                                                var $2184 = Parser$Reply$error$($2181, $2182, $2183);
                                                                                                var $2180 = $2184;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2185 = self.idx;
                                                                                                var $2186 = self.code;
                                                                                                var $2187 = self.val;
                                                                                                var self = Fm$Parser$stop$($2107, $2185, $2186);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2189 = self.idx;
                                                                                                        var $2190 = self.code;
                                                                                                        var $2191 = self.err;
                                                                                                        var $2192 = Parser$Reply$error$($2189, $2190, $2191);
                                                                                                        var $2188 = $2192;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2193 = self.idx;
                                                                                                        var $2194 = self.code;
                                                                                                        var $2195 = self.val;
                                                                                                        var _term$39 = Fm$Term$ref$("List.for");
                                                                                                        var _term$40 = Fm$Term$app$(_term$39, Fm$Term$hol$(Bits$e));
                                                                                                        var _term$41 = Fm$Term$app$(_term$40, $2139);
                                                                                                        var _term$42 = Fm$Term$app$(_term$41, Fm$Term$hol$(Bits$e));
                                                                                                        var _term$43 = Fm$Term$app$(_term$42, Fm$Term$ref$($2155));
                                                                                                        var _lamb$44 = Fm$Term$lam$($2123, (_i$44 => {
                                                                                                            var $2197 = Fm$Term$lam$($2155, (_x$45 => {
                                                                                                                var $2198 = $2171;
                                                                                                                return $2198;
                                                                                                            }));
                                                                                                            return $2197;
                                                                                                        }));
                                                                                                        var _term$45 = Fm$Term$app$(_term$43, _lamb$44);
                                                                                                        var _term$46 = Fm$Term$let$($2155, _term$45, (_x$46 => {
                                                                                                            var $2199 = $2187;
                                                                                                            return $2199;
                                                                                                        }));
                                                                                                        var $2196 = Parser$Reply$value$($2193, $2194, Fm$Term$ori$($2195, _term$46));
                                                                                                        var $2188 = $2196;
                                                                                                        break;
                                                                                                };
                                                                                                var $2180 = $2188;
                                                                                                break;
                                                                                        };
                                                                                        var $2172 = $2180;
                                                                                        break;
                                                                                };
                                                                                var $2164 = $2172;
                                                                                break;
                                                                        };
                                                                        var $2156 = $2164;
                                                                        break;
                                                                };
                                                                var $2148 = $2156;
                                                                break;
                                                        };
                                                        var $2140 = $2148;
                                                        break;
                                                };
                                                var $2132 = $2140;
                                                break;
                                        };
                                        var $2124 = $2132;
                                        break;
                                };
                                var $2116 = $2124;
                                break;
                        };
                        var $2108 = $2116;
                        break;
                };
                var $2100 = $2108;
                break;
        };
        return $2100;
    };
    const Fm$Parser$forin$2 = x0 => x1 => Fm$Parser$forin$2$(x0, x1);

    function Fm$Parser$do$statements$(_monad_name$1) {
        var $2200 = Parser$first_of$(List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2202 = self.idx;
                    var $2203 = self.code;
                    var $2204 = self.err;
                    var $2205 = Parser$Reply$error$($2202, $2203, $2204);
                    var $2201 = $2205;
                    break;
                case 'Parser.Reply.value':
                    var $2206 = self.idx;
                    var $2207 = self.code;
                    var $2208 = self.val;
                    var self = Fm$Parser$text$("var ", $2206, $2207);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2210 = self.idx;
                            var $2211 = self.code;
                            var $2212 = self.err;
                            var $2213 = Parser$Reply$error$($2210, $2211, $2212);
                            var $2209 = $2213;
                            break;
                        case 'Parser.Reply.value':
                            var $2214 = self.idx;
                            var $2215 = self.code;
                            var $2216 = self.val;
                            var self = Fm$Parser$name1$($2214, $2215);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2218 = self.idx;
                                    var $2219 = self.code;
                                    var $2220 = self.err;
                                    var $2221 = Parser$Reply$error$($2218, $2219, $2220);
                                    var $2217 = $2221;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2222 = self.idx;
                                    var $2223 = self.code;
                                    var $2224 = self.val;
                                    var self = Fm$Parser$text$("=", $2222, $2223);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2226 = self.idx;
                                            var $2227 = self.code;
                                            var $2228 = self.err;
                                            var $2229 = Parser$Reply$error$($2226, $2227, $2228);
                                            var $2225 = $2229;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2230 = self.idx;
                                            var $2231 = self.code;
                                            var $2232 = self.val;
                                            var self = Fm$Parser$term$($2230, $2231);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2234 = self.idx;
                                                    var $2235 = self.code;
                                                    var $2236 = self.err;
                                                    var $2237 = Parser$Reply$error$($2234, $2235, $2236);
                                                    var $2233 = $2237;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2238 = self.idx;
                                                    var $2239 = self.code;
                                                    var $2240 = self.val;
                                                    var self = Parser$maybe$(Fm$Parser$text(";"), $2238, $2239);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $2242 = self.idx;
                                                            var $2243 = self.code;
                                                            var $2244 = self.err;
                                                            var $2245 = Parser$Reply$error$($2242, $2243, $2244);
                                                            var $2241 = $2245;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $2246 = self.idx;
                                                            var $2247 = self.code;
                                                            var $2248 = self.val;
                                                            var self = Fm$Parser$do$statements$(_monad_name$1)($2246)($2247);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $2250 = self.idx;
                                                                    var $2251 = self.code;
                                                                    var $2252 = self.err;
                                                                    var $2253 = Parser$Reply$error$($2250, $2251, $2252);
                                                                    var $2249 = $2253;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $2254 = self.idx;
                                                                    var $2255 = self.code;
                                                                    var $2256 = self.val;
                                                                    var self = Fm$Parser$stop$($2208, $2254, $2255);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $2258 = self.idx;
                                                                            var $2259 = self.code;
                                                                            var $2260 = self.err;
                                                                            var $2261 = Parser$Reply$error$($2258, $2259, $2260);
                                                                            var $2257 = $2261;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $2262 = self.idx;
                                                                            var $2263 = self.code;
                                                                            var $2264 = self.val;
                                                                            var _term$28 = Fm$Term$app$(Fm$Term$ref$("Monad.bind"), Fm$Term$ref$(_monad_name$1));
                                                                            var _term$29 = Fm$Term$app$(_term$28, Fm$Term$ref$((_monad_name$1 + ".monad")));
                                                                            var _term$30 = Fm$Term$app$(_term$29, Fm$Term$hol$(Bits$e));
                                                                            var _term$31 = Fm$Term$app$(_term$30, Fm$Term$hol$(Bits$e));
                                                                            var _term$32 = Fm$Term$app$(_term$31, $2240);
                                                                            var _term$33 = Fm$Term$app$(_term$32, Fm$Term$lam$($2224, (_x$33 => {
                                                                                var $2266 = $2256;
                                                                                return $2266;
                                                                            })));
                                                                            var $2265 = Parser$Reply$value$($2262, $2263, Fm$Term$ori$($2264, _term$33));
                                                                            var $2257 = $2265;
                                                                            break;
                                                                    };
                                                                    var $2249 = $2257;
                                                                    break;
                                                            };
                                                            var $2241 = $2249;
                                                            break;
                                                    };
                                                    var $2233 = $2241;
                                                    break;
                                            };
                                            var $2225 = $2233;
                                            break;
                                    };
                                    var $2217 = $2225;
                                    break;
                            };
                            var $2209 = $2217;
                            break;
                    };
                    var $2201 = $2209;
                    break;
            };
            return $2201;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2268 = self.idx;
                    var $2269 = self.code;
                    var $2270 = self.err;
                    var $2271 = Parser$Reply$error$($2268, $2269, $2270);
                    var $2267 = $2271;
                    break;
                case 'Parser.Reply.value':
                    var $2272 = self.idx;
                    var $2273 = self.code;
                    var $2274 = self.val;
                    var self = Fm$Parser$text$("let ", $2272, $2273);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2276 = self.idx;
                            var $2277 = self.code;
                            var $2278 = self.err;
                            var $2279 = Parser$Reply$error$($2276, $2277, $2278);
                            var $2275 = $2279;
                            break;
                        case 'Parser.Reply.value':
                            var $2280 = self.idx;
                            var $2281 = self.code;
                            var $2282 = self.val;
                            var self = Fm$Parser$name1$($2280, $2281);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2284 = self.idx;
                                    var $2285 = self.code;
                                    var $2286 = self.err;
                                    var $2287 = Parser$Reply$error$($2284, $2285, $2286);
                                    var $2283 = $2287;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2288 = self.idx;
                                    var $2289 = self.code;
                                    var $2290 = self.val;
                                    var self = Fm$Parser$text$("=", $2288, $2289);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2292 = self.idx;
                                            var $2293 = self.code;
                                            var $2294 = self.err;
                                            var $2295 = Parser$Reply$error$($2292, $2293, $2294);
                                            var $2291 = $2295;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2296 = self.idx;
                                            var $2297 = self.code;
                                            var $2298 = self.val;
                                            var self = Fm$Parser$term$($2296, $2297);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2300 = self.idx;
                                                    var $2301 = self.code;
                                                    var $2302 = self.err;
                                                    var $2303 = Parser$Reply$error$($2300, $2301, $2302);
                                                    var $2299 = $2303;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2304 = self.idx;
                                                    var $2305 = self.code;
                                                    var $2306 = self.val;
                                                    var self = Parser$maybe$(Fm$Parser$text(";"), $2304, $2305);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $2308 = self.idx;
                                                            var $2309 = self.code;
                                                            var $2310 = self.err;
                                                            var $2311 = Parser$Reply$error$($2308, $2309, $2310);
                                                            var $2307 = $2311;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $2312 = self.idx;
                                                            var $2313 = self.code;
                                                            var $2314 = self.val;
                                                            var self = Fm$Parser$do$statements$(_monad_name$1)($2312)($2313);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $2316 = self.idx;
                                                                    var $2317 = self.code;
                                                                    var $2318 = self.err;
                                                                    var $2319 = Parser$Reply$error$($2316, $2317, $2318);
                                                                    var $2315 = $2319;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $2320 = self.idx;
                                                                    var $2321 = self.code;
                                                                    var $2322 = self.val;
                                                                    var self = Fm$Parser$stop$($2274, $2320, $2321);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $2324 = self.idx;
                                                                            var $2325 = self.code;
                                                                            var $2326 = self.err;
                                                                            var $2327 = Parser$Reply$error$($2324, $2325, $2326);
                                                                            var $2323 = $2327;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $2328 = self.idx;
                                                                            var $2329 = self.code;
                                                                            var $2330 = self.val;
                                                                            var $2331 = Parser$Reply$value$($2328, $2329, Fm$Term$ori$($2330, Fm$Term$let$($2290, $2306, (_x$28 => {
                                                                                var $2332 = $2322;
                                                                                return $2332;
                                                                            }))));
                                                                            var $2323 = $2331;
                                                                            break;
                                                                    };
                                                                    var $2315 = $2323;
                                                                    break;
                                                            };
                                                            var $2307 = $2315;
                                                            break;
                                                    };
                                                    var $2299 = $2307;
                                                    break;
                                            };
                                            var $2291 = $2299;
                                            break;
                                    };
                                    var $2283 = $2291;
                                    break;
                            };
                            var $2275 = $2283;
                            break;
                    };
                    var $2267 = $2275;
                    break;
            };
            return $2267;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2334 = self.idx;
                    var $2335 = self.code;
                    var $2336 = self.err;
                    var $2337 = Parser$Reply$error$($2334, $2335, $2336);
                    var $2333 = $2337;
                    break;
                case 'Parser.Reply.value':
                    var $2338 = self.idx;
                    var $2339 = self.code;
                    var $2340 = self.val;
                    var self = Fm$Parser$text$("return ", $2338, $2339);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2342 = self.idx;
                            var $2343 = self.code;
                            var $2344 = self.err;
                            var $2345 = Parser$Reply$error$($2342, $2343, $2344);
                            var $2341 = $2345;
                            break;
                        case 'Parser.Reply.value':
                            var $2346 = self.idx;
                            var $2347 = self.code;
                            var $2348 = self.val;
                            var self = Fm$Parser$term$($2346, $2347);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2350 = self.idx;
                                    var $2351 = self.code;
                                    var $2352 = self.err;
                                    var $2353 = Parser$Reply$error$($2350, $2351, $2352);
                                    var $2349 = $2353;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2354 = self.idx;
                                    var $2355 = self.code;
                                    var $2356 = self.val;
                                    var self = Parser$maybe$(Fm$Parser$text(";"), $2354, $2355);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2358 = self.idx;
                                            var $2359 = self.code;
                                            var $2360 = self.err;
                                            var $2361 = Parser$Reply$error$($2358, $2359, $2360);
                                            var $2357 = $2361;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2362 = self.idx;
                                            var $2363 = self.code;
                                            var $2364 = self.val;
                                            var self = Fm$Parser$stop$($2340, $2362, $2363);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2366 = self.idx;
                                                    var $2367 = self.code;
                                                    var $2368 = self.err;
                                                    var $2369 = Parser$Reply$error$($2366, $2367, $2368);
                                                    var $2365 = $2369;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2370 = self.idx;
                                                    var $2371 = self.code;
                                                    var $2372 = self.val;
                                                    var _term$19 = Fm$Term$app$(Fm$Term$ref$("Monad.pure"), Fm$Term$ref$(_monad_name$1));
                                                    var _term$20 = Fm$Term$app$(_term$19, Fm$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Fm$Term$app$(_term$20, Fm$Term$hol$(Bits$e));
                                                    var _term$22 = Fm$Term$app$(_term$21, $2356);
                                                    var $2373 = Parser$Reply$value$($2370, $2371, Fm$Term$ori$($2372, _term$22));
                                                    var $2365 = $2373;
                                                    break;
                                            };
                                            var $2357 = $2365;
                                            break;
                                    };
                                    var $2349 = $2357;
                                    break;
                            };
                            var $2341 = $2349;
                            break;
                    };
                    var $2333 = $2341;
                    break;
            };
            return $2333;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2375 = self.idx;
                    var $2376 = self.code;
                    var $2377 = self.err;
                    var $2378 = Parser$Reply$error$($2375, $2376, $2377);
                    var $2374 = $2378;
                    break;
                case 'Parser.Reply.value':
                    var $2379 = self.idx;
                    var $2380 = self.code;
                    var $2381 = self.val;
                    var self = Fm$Parser$term$($2379, $2380);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2383 = self.idx;
                            var $2384 = self.code;
                            var $2385 = self.err;
                            var $2386 = Parser$Reply$error$($2383, $2384, $2385);
                            var $2382 = $2386;
                            break;
                        case 'Parser.Reply.value':
                            var $2387 = self.idx;
                            var $2388 = self.code;
                            var $2389 = self.val;
                            var self = Parser$maybe$(Fm$Parser$text(";"), $2387, $2388);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2391 = self.idx;
                                    var $2392 = self.code;
                                    var $2393 = self.err;
                                    var $2394 = Parser$Reply$error$($2391, $2392, $2393);
                                    var $2390 = $2394;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2395 = self.idx;
                                    var $2396 = self.code;
                                    var $2397 = self.val;
                                    var self = Fm$Parser$do$statements$(_monad_name$1)($2395)($2396);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2399 = self.idx;
                                            var $2400 = self.code;
                                            var $2401 = self.err;
                                            var $2402 = Parser$Reply$error$($2399, $2400, $2401);
                                            var $2398 = $2402;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2403 = self.idx;
                                            var $2404 = self.code;
                                            var $2405 = self.val;
                                            var self = Fm$Parser$stop$($2381, $2403, $2404);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2407 = self.idx;
                                                    var $2408 = self.code;
                                                    var $2409 = self.err;
                                                    var $2410 = Parser$Reply$error$($2407, $2408, $2409);
                                                    var $2406 = $2410;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2411 = self.idx;
                                                    var $2412 = self.code;
                                                    var $2413 = self.val;
                                                    var _term$19 = Fm$Term$app$(Fm$Term$ref$("Monad.bind"), Fm$Term$ref$(_monad_name$1));
                                                    var _term$20 = Fm$Term$app$(_term$19, Fm$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Fm$Term$app$(_term$20, Fm$Term$hol$(Bits$e));
                                                    var _term$22 = Fm$Term$app$(_term$21, Fm$Term$hol$(Bits$e));
                                                    var _term$23 = Fm$Term$app$(_term$22, $2389);
                                                    var _term$24 = Fm$Term$app$(_term$23, Fm$Term$lam$("", (_x$24 => {
                                                        var $2415 = $2405;
                                                        return $2415;
                                                    })));
                                                    var $2414 = Parser$Reply$value$($2411, $2412, Fm$Term$ori$($2413, _term$24));
                                                    var $2406 = $2414;
                                                    break;
                                            };
                                            var $2398 = $2406;
                                            break;
                                    };
                                    var $2390 = $2398;
                                    break;
                            };
                            var $2382 = $2390;
                            break;
                    };
                    var $2374 = $2382;
                    break;
            };
            return $2374;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$term$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2417 = self.idx;
                    var $2418 = self.code;
                    var $2419 = self.err;
                    var $2420 = Parser$Reply$error$($2417, $2418, $2419);
                    var $2416 = $2420;
                    break;
                case 'Parser.Reply.value':
                    var $2421 = self.idx;
                    var $2422 = self.code;
                    var $2423 = self.val;
                    var self = Parser$maybe$(Fm$Parser$text(";"), $2421, $2422);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2425 = self.idx;
                            var $2426 = self.code;
                            var $2427 = self.err;
                            var $2428 = Parser$Reply$error$($2425, $2426, $2427);
                            var $2424 = $2428;
                            break;
                        case 'Parser.Reply.value':
                            var $2429 = self.idx;
                            var $2430 = self.code;
                            var $2431 = self.val;
                            var $2432 = Parser$Reply$value$($2429, $2430, $2423);
                            var $2424 = $2432;
                            break;
                    };
                    var $2416 = $2424;
                    break;
            };
            return $2416;
        }), List$nil))))));
        return $2200;
    };
    const Fm$Parser$do$statements = x0 => Fm$Parser$do$statements$(x0);

    function Fm$Parser$do$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("do ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2434 = self.idx;
                var $2435 = self.code;
                var $2436 = self.err;
                var $2437 = Parser$Reply$error$($2434, $2435, $2436);
                var $2433 = $2437;
                break;
            case 'Parser.Reply.value':
                var $2438 = self.idx;
                var $2439 = self.code;
                var $2440 = self.val;
                var self = Fm$Parser$name1$($2438, $2439);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2442 = self.idx;
                        var $2443 = self.code;
                        var $2444 = self.err;
                        var $2445 = Parser$Reply$error$($2442, $2443, $2444);
                        var $2441 = $2445;
                        break;
                    case 'Parser.Reply.value':
                        var $2446 = self.idx;
                        var $2447 = self.code;
                        var $2448 = self.val;
                        var self = Fm$Parser$text$("{", $2446, $2447);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2450 = self.idx;
                                var $2451 = self.code;
                                var $2452 = self.err;
                                var $2453 = Parser$Reply$error$($2450, $2451, $2452);
                                var $2449 = $2453;
                                break;
                            case 'Parser.Reply.value':
                                var $2454 = self.idx;
                                var $2455 = self.code;
                                var $2456 = self.val;
                                var self = Fm$Parser$do$statements$($2448)($2454)($2455);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2458 = self.idx;
                                        var $2459 = self.code;
                                        var $2460 = self.err;
                                        var $2461 = Parser$Reply$error$($2458, $2459, $2460);
                                        var $2457 = $2461;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2462 = self.idx;
                                        var $2463 = self.code;
                                        var $2464 = self.val;
                                        var self = Fm$Parser$text$("}", $2462, $2463);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2466 = self.idx;
                                                var $2467 = self.code;
                                                var $2468 = self.err;
                                                var $2469 = Parser$Reply$error$($2466, $2467, $2468);
                                                var $2465 = $2469;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2470 = self.idx;
                                                var $2471 = self.code;
                                                var $2472 = self.val;
                                                var $2473 = Parser$Reply$value$($2470, $2471, $2464);
                                                var $2465 = $2473;
                                                break;
                                        };
                                        var $2457 = $2465;
                                        break;
                                };
                                var $2449 = $2457;
                                break;
                        };
                        var $2441 = $2449;
                        break;
                };
                var $2433 = $2441;
                break;
        };
        return $2433;
    };
    const Fm$Parser$do = x0 => x1 => Fm$Parser$do$(x0, x1);

    function Fm$Term$nat$(_natx$1) {
        var $2474 = ({
            _: 'Fm.Term.nat',
            'natx': _natx$1
        });
        return $2474;
    };
    const Fm$Term$nat = x0 => Fm$Term$nat$(x0);

    function Fm$Term$unroll_nat$(_natx$1) {
        var self = _natx$1;
        if (self === 0n) {
            var $2476 = Fm$Term$ref$(Fm$Name$read$("Nat.zero"));
            var $2475 = $2476;
        } else {
            var $2477 = (self - 1n);
            var _func$3 = Fm$Term$ref$(Fm$Name$read$("Nat.succ"));
            var _argm$4 = Fm$Term$nat$($2477);
            var $2478 = Fm$Term$app$(_func$3, _argm$4);
            var $2475 = $2478;
        };
        return $2475;
    };
    const Fm$Term$unroll_nat = x0 => Fm$Term$unroll_nat$(x0);
    const U16$to_bits = a0 => (u16_to_bits(a0));

    function Fm$Term$unroll_chr$bits$(_bits$1) {
        var self = _bits$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $2480 = Fm$Term$ref$(Fm$Name$read$("Bits.e"));
                var $2479 = $2480;
                break;
            case 'o':
                var $2481 = self.slice(0, -1);
                var $2482 = Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("Bits.o")), Fm$Term$unroll_chr$bits$($2481));
                var $2479 = $2482;
                break;
            case 'i':
                var $2483 = self.slice(0, -1);
                var $2484 = Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("Bits.i")), Fm$Term$unroll_chr$bits$($2483));
                var $2479 = $2484;
                break;
        };
        return $2479;
    };
    const Fm$Term$unroll_chr$bits = x0 => Fm$Term$unroll_chr$bits$(x0);

    function Fm$Term$unroll_chr$(_chrx$1) {
        var _bits$2 = (u16_to_bits(_chrx$1));
        var _term$3 = Fm$Term$ref$(Fm$Name$read$("Word.from_bits"));
        var _term$4 = Fm$Term$app$(_term$3, Fm$Term$nat$(16n));
        var _term$5 = Fm$Term$app$(_term$4, Fm$Term$unroll_chr$bits$(_bits$2));
        var _term$6 = Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("U16.new")), _term$5);
        var $2485 = _term$6;
        return $2485;
    };
    const Fm$Term$unroll_chr = x0 => Fm$Term$unroll_chr$(x0);

    function Fm$Term$unroll_str$(_strx$1) {
        var self = _strx$1;
        if (self.length === 0) {
            var $2487 = Fm$Term$ref$(Fm$Name$read$("String.nil"));
            var $2486 = $2487;
        } else {
            var $2488 = self.charCodeAt(0);
            var $2489 = self.slice(1);
            var _char$4 = Fm$Term$chr$($2488);
            var _term$5 = Fm$Term$ref$(Fm$Name$read$("String.cons"));
            var _term$6 = Fm$Term$app$(_term$5, _char$4);
            var _term$7 = Fm$Term$app$(_term$6, Fm$Term$str$($2489));
            var $2490 = _term$7;
            var $2486 = $2490;
        };
        return $2486;
    };
    const Fm$Term$unroll_str = x0 => Fm$Term$unroll_str$(x0);

    function Fm$Term$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $2492 = self.name;
                var $2493 = self.indx;
                var $2494 = _term$1;
                var $2491 = $2494;
                break;
            case 'Fm.Term.ref':
                var $2495 = self.name;
                var self = Fm$get$($2495, _defs$2);
                switch (self._) {
                    case 'Maybe.none':
                        var $2497 = Fm$Term$ref$($2495);
                        var $2496 = $2497;
                        break;
                    case 'Maybe.some':
                        var $2498 = self.value;
                        var self = $2498;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $2500 = self.file;
                                var $2501 = self.code;
                                var $2502 = self.orig;
                                var $2503 = self.name;
                                var $2504 = self.term;
                                var $2505 = self.type;
                                var $2506 = self.isct;
                                var $2507 = self.arit;
                                var $2508 = self.stat;
                                var $2509 = Fm$Term$reduce$($2504, _defs$2);
                                var $2499 = $2509;
                                break;
                        };
                        var $2496 = $2499;
                        break;
                };
                var $2491 = $2496;
                break;
            case 'Fm.Term.typ':
                var $2510 = _term$1;
                var $2491 = $2510;
                break;
            case 'Fm.Term.all':
                var $2511 = self.eras;
                var $2512 = self.self;
                var $2513 = self.name;
                var $2514 = self.xtyp;
                var $2515 = self.body;
                var $2516 = _term$1;
                var $2491 = $2516;
                break;
            case 'Fm.Term.lam':
                var $2517 = self.name;
                var $2518 = self.body;
                var $2519 = _term$1;
                var $2491 = $2519;
                break;
            case 'Fm.Term.app':
                var $2520 = self.func;
                var $2521 = self.argm;
                var _func$5 = Fm$Term$reduce$($2520, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $2523 = self.name;
                        var $2524 = self.indx;
                        var $2525 = _term$1;
                        var $2522 = $2525;
                        break;
                    case 'Fm.Term.ref':
                        var $2526 = self.name;
                        var $2527 = _term$1;
                        var $2522 = $2527;
                        break;
                    case 'Fm.Term.typ':
                        var $2528 = _term$1;
                        var $2522 = $2528;
                        break;
                    case 'Fm.Term.all':
                        var $2529 = self.eras;
                        var $2530 = self.self;
                        var $2531 = self.name;
                        var $2532 = self.xtyp;
                        var $2533 = self.body;
                        var $2534 = _term$1;
                        var $2522 = $2534;
                        break;
                    case 'Fm.Term.lam':
                        var $2535 = self.name;
                        var $2536 = self.body;
                        var $2537 = Fm$Term$reduce$($2536($2521), _defs$2);
                        var $2522 = $2537;
                        break;
                    case 'Fm.Term.app':
                        var $2538 = self.func;
                        var $2539 = self.argm;
                        var $2540 = _term$1;
                        var $2522 = $2540;
                        break;
                    case 'Fm.Term.let':
                        var $2541 = self.name;
                        var $2542 = self.expr;
                        var $2543 = self.body;
                        var $2544 = _term$1;
                        var $2522 = $2544;
                        break;
                    case 'Fm.Term.def':
                        var $2545 = self.name;
                        var $2546 = self.expr;
                        var $2547 = self.body;
                        var $2548 = _term$1;
                        var $2522 = $2548;
                        break;
                    case 'Fm.Term.ann':
                        var $2549 = self.done;
                        var $2550 = self.term;
                        var $2551 = self.type;
                        var $2552 = _term$1;
                        var $2522 = $2552;
                        break;
                    case 'Fm.Term.gol':
                        var $2553 = self.name;
                        var $2554 = self.dref;
                        var $2555 = self.verb;
                        var $2556 = _term$1;
                        var $2522 = $2556;
                        break;
                    case 'Fm.Term.hol':
                        var $2557 = self.path;
                        var $2558 = _term$1;
                        var $2522 = $2558;
                        break;
                    case 'Fm.Term.nat':
                        var $2559 = self.natx;
                        var $2560 = _term$1;
                        var $2522 = $2560;
                        break;
                    case 'Fm.Term.chr':
                        var $2561 = self.chrx;
                        var $2562 = _term$1;
                        var $2522 = $2562;
                        break;
                    case 'Fm.Term.str':
                        var $2563 = self.strx;
                        var $2564 = _term$1;
                        var $2522 = $2564;
                        break;
                    case 'Fm.Term.cse':
                        var $2565 = self.path;
                        var $2566 = self.expr;
                        var $2567 = self.name;
                        var $2568 = self.with;
                        var $2569 = self.cses;
                        var $2570 = self.moti;
                        var $2571 = _term$1;
                        var $2522 = $2571;
                        break;
                    case 'Fm.Term.ori':
                        var $2572 = self.orig;
                        var $2573 = self.expr;
                        var $2574 = _term$1;
                        var $2522 = $2574;
                        break;
                };
                var $2491 = $2522;
                break;
            case 'Fm.Term.let':
                var $2575 = self.name;
                var $2576 = self.expr;
                var $2577 = self.body;
                var $2578 = Fm$Term$reduce$($2577($2576), _defs$2);
                var $2491 = $2578;
                break;
            case 'Fm.Term.def':
                var $2579 = self.name;
                var $2580 = self.expr;
                var $2581 = self.body;
                var $2582 = Fm$Term$reduce$($2581($2580), _defs$2);
                var $2491 = $2582;
                break;
            case 'Fm.Term.ann':
                var $2583 = self.done;
                var $2584 = self.term;
                var $2585 = self.type;
                var $2586 = Fm$Term$reduce$($2584, _defs$2);
                var $2491 = $2586;
                break;
            case 'Fm.Term.gol':
                var $2587 = self.name;
                var $2588 = self.dref;
                var $2589 = self.verb;
                var $2590 = _term$1;
                var $2491 = $2590;
                break;
            case 'Fm.Term.hol':
                var $2591 = self.path;
                var $2592 = _term$1;
                var $2491 = $2592;
                break;
            case 'Fm.Term.nat':
                var $2593 = self.natx;
                var $2594 = Fm$Term$reduce$(Fm$Term$unroll_nat$($2593), _defs$2);
                var $2491 = $2594;
                break;
            case 'Fm.Term.chr':
                var $2595 = self.chrx;
                var $2596 = Fm$Term$reduce$(Fm$Term$unroll_chr$($2595), _defs$2);
                var $2491 = $2596;
                break;
            case 'Fm.Term.str':
                var $2597 = self.strx;
                var $2598 = Fm$Term$reduce$(Fm$Term$unroll_str$($2597), _defs$2);
                var $2491 = $2598;
                break;
            case 'Fm.Term.cse':
                var $2599 = self.path;
                var $2600 = self.expr;
                var $2601 = self.name;
                var $2602 = self.with;
                var $2603 = self.cses;
                var $2604 = self.moti;
                var $2605 = _term$1;
                var $2491 = $2605;
                break;
            case 'Fm.Term.ori':
                var $2606 = self.orig;
                var $2607 = self.expr;
                var $2608 = Fm$Term$reduce$($2607, _defs$2);
                var $2491 = $2608;
                break;
        };
        return $2491;
    };
    const Fm$Term$reduce = x0 => x1 => Fm$Term$reduce$(x0, x1);
    const Map$new = ({
        _: 'Map.new'
    });

    function Fm$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _stat$9) {
        var $2609 = ({
            _: 'Fm.Def.new',
            'file': _file$1,
            'code': _code$2,
            'orig': _orig$3,
            'name': _name$4,
            'term': _term$5,
            'type': _type$6,
            'isct': _isct$7,
            'arit': _arit$8,
            'stat': _stat$9
        });
        return $2609;
    };
    const Fm$Def$new = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => Fm$Def$new$(x0, x1, x2, x3, x4, x5, x6, x7, x8);
    const Fm$Status$init = ({
        _: 'Fm.Status.init'
    });

    function Fm$Parser$case$with$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("with", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2611 = self.idx;
                var $2612 = self.code;
                var $2613 = self.err;
                var $2614 = Parser$Reply$error$($2611, $2612, $2613);
                var $2610 = $2614;
                break;
            case 'Parser.Reply.value':
                var $2615 = self.idx;
                var $2616 = self.code;
                var $2617 = self.val;
                var self = Fm$Parser$name1$($2615, $2616);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2619 = self.idx;
                        var $2620 = self.code;
                        var $2621 = self.err;
                        var $2622 = Parser$Reply$error$($2619, $2620, $2621);
                        var $2618 = $2622;
                        break;
                    case 'Parser.Reply.value':
                        var $2623 = self.idx;
                        var $2624 = self.code;
                        var $2625 = self.val;
                        var self = Fm$Parser$text$(":", $2623, $2624);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2627 = self.idx;
                                var $2628 = self.code;
                                var $2629 = self.err;
                                var $2630 = Parser$Reply$error$($2627, $2628, $2629);
                                var $2626 = $2630;
                                break;
                            case 'Parser.Reply.value':
                                var $2631 = self.idx;
                                var $2632 = self.code;
                                var $2633 = self.val;
                                var self = Fm$Parser$term$($2631, $2632);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2635 = self.idx;
                                        var $2636 = self.code;
                                        var $2637 = self.err;
                                        var $2638 = Parser$Reply$error$($2635, $2636, $2637);
                                        var $2634 = $2638;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2639 = self.idx;
                                        var $2640 = self.code;
                                        var $2641 = self.val;
                                        var self = Fm$Parser$text$("=", $2639, $2640);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2643 = self.idx;
                                                var $2644 = self.code;
                                                var $2645 = self.err;
                                                var $2646 = Parser$Reply$error$($2643, $2644, $2645);
                                                var $2642 = $2646;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2647 = self.idx;
                                                var $2648 = self.code;
                                                var $2649 = self.val;
                                                var self = Fm$Parser$term$($2647, $2648);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2651 = self.idx;
                                                        var $2652 = self.code;
                                                        var $2653 = self.err;
                                                        var $2654 = Parser$Reply$error$($2651, $2652, $2653);
                                                        var $2650 = $2654;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2655 = self.idx;
                                                        var $2656 = self.code;
                                                        var $2657 = self.val;
                                                        var $2658 = Parser$Reply$value$($2655, $2656, Fm$Def$new$("", "", Pair$new$(0n, 0n), $2625, $2657, $2641, Bool$false, 0n, Fm$Status$init));
                                                        var $2650 = $2658;
                                                        break;
                                                };
                                                var $2642 = $2650;
                                                break;
                                        };
                                        var $2634 = $2642;
                                        break;
                                };
                                var $2626 = $2634;
                                break;
                        };
                        var $2618 = $2626;
                        break;
                };
                var $2610 = $2618;
                break;
        };
        return $2610;
    };
    const Fm$Parser$case$with = x0 => x1 => Fm$Parser$case$with$(x0, x1);

    function Fm$Parser$case$case$(_idx$1, _code$2) {
        var self = Fm$Parser$name1$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2660 = self.idx;
                var $2661 = self.code;
                var $2662 = self.err;
                var $2663 = Parser$Reply$error$($2660, $2661, $2662);
                var $2659 = $2663;
                break;
            case 'Parser.Reply.value':
                var $2664 = self.idx;
                var $2665 = self.code;
                var $2666 = self.val;
                var self = Fm$Parser$text$(":", $2664, $2665);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2668 = self.idx;
                        var $2669 = self.code;
                        var $2670 = self.err;
                        var $2671 = Parser$Reply$error$($2668, $2669, $2670);
                        var $2667 = $2671;
                        break;
                    case 'Parser.Reply.value':
                        var $2672 = self.idx;
                        var $2673 = self.code;
                        var $2674 = self.val;
                        var self = Fm$Parser$term$($2672, $2673);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2676 = self.idx;
                                var $2677 = self.code;
                                var $2678 = self.err;
                                var $2679 = Parser$Reply$error$($2676, $2677, $2678);
                                var $2675 = $2679;
                                break;
                            case 'Parser.Reply.value':
                                var $2680 = self.idx;
                                var $2681 = self.code;
                                var $2682 = self.val;
                                var self = Parser$maybe$(Fm$Parser$text(","), $2680, $2681);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2684 = self.idx;
                                        var $2685 = self.code;
                                        var $2686 = self.err;
                                        var $2687 = Parser$Reply$error$($2684, $2685, $2686);
                                        var $2683 = $2687;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2688 = self.idx;
                                        var $2689 = self.code;
                                        var $2690 = self.val;
                                        var $2691 = Parser$Reply$value$($2688, $2689, Pair$new$($2666, $2682));
                                        var $2683 = $2691;
                                        break;
                                };
                                var $2675 = $2683;
                                break;
                        };
                        var $2667 = $2675;
                        break;
                };
                var $2659 = $2667;
                break;
        };
        return $2659;
    };
    const Fm$Parser$case$case = x0 => x1 => Fm$Parser$case$case$(x0, x1);

    function Map$tie$(_val$2, _lft$3, _rgt$4) {
        var $2692 = ({
            _: 'Map.tie',
            'val': _val$2,
            'lft': _lft$3,
            'rgt': _rgt$4
        });
        return $2692;
    };
    const Map$tie = x0 => x1 => x2 => Map$tie$(x0, x1, x2);

    function Map$set$(_bits$2, _val$3, _map$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var self = _map$4;
                switch (self._) {
                    case 'Map.new':
                        var $2695 = Map$tie$(Maybe$some$(_val$3), Map$new, Map$new);
                        var $2694 = $2695;
                        break;
                    case 'Map.tie':
                        var $2696 = self.val;
                        var $2697 = self.lft;
                        var $2698 = self.rgt;
                        var $2699 = Map$tie$(Maybe$some$(_val$3), $2697, $2698);
                        var $2694 = $2699;
                        break;
                };
                var $2693 = $2694;
                break;
            case 'o':
                var $2700 = self.slice(0, -1);
                var self = _map$4;
                switch (self._) {
                    case 'Map.new':
                        var $2702 = Map$tie$(Maybe$none, Map$set$($2700, _val$3, Map$new), Map$new);
                        var $2701 = $2702;
                        break;
                    case 'Map.tie':
                        var $2703 = self.val;
                        var $2704 = self.lft;
                        var $2705 = self.rgt;
                        var $2706 = Map$tie$($2703, Map$set$($2700, _val$3, $2704), $2705);
                        var $2701 = $2706;
                        break;
                };
                var $2693 = $2701;
                break;
            case 'i':
                var $2707 = self.slice(0, -1);
                var self = _map$4;
                switch (self._) {
                    case 'Map.new':
                        var $2709 = Map$tie$(Maybe$none, Map$new, Map$set$($2707, _val$3, Map$new));
                        var $2708 = $2709;
                        break;
                    case 'Map.tie':
                        var $2710 = self.val;
                        var $2711 = self.lft;
                        var $2712 = self.rgt;
                        var $2713 = Map$tie$($2710, $2711, Map$set$($2707, _val$3, $2712));
                        var $2708 = $2713;
                        break;
                };
                var $2693 = $2708;
                break;
        };
        return $2693;
    };
    const Map$set = x0 => x1 => x2 => Map$set$(x0, x1, x2);

    function Map$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.nil':
                var $2715 = Map$new;
                var $2714 = $2715;
                break;
            case 'List.cons':
                var $2716 = self.head;
                var $2717 = self.tail;
                var self = $2716;
                switch (self._) {
                    case 'Pair.new':
                        var $2719 = self.fst;
                        var $2720 = self.snd;
                        var $2721 = Map$set$($2719, $2720, Map$from_list$($2717));
                        var $2718 = $2721;
                        break;
                };
                var $2714 = $2718;
                break;
        };
        return $2714;
    };
    const Map$from_list = x0 => Map$from_list$(x0);

    function Pair$fst$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $2723 = self.fst;
                var $2724 = self.snd;
                var $2725 = $2723;
                var $2722 = $2725;
                break;
        };
        return $2722;
    };
    const Pair$fst = x0 => Pair$fst$(x0);

    function Pair$snd$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $2727 = self.fst;
                var $2728 = self.snd;
                var $2729 = $2728;
                var $2726 = $2729;
                break;
        };
        return $2726;
    };
    const Pair$snd = x0 => Pair$snd$(x0);

    function Fm$Term$cse$(_path$1, _expr$2, _name$3, _with$4, _cses$5, _moti$6) {
        var $2730 = ({
            _: 'Fm.Term.cse',
            'path': _path$1,
            'expr': _expr$2,
            'name': _name$3,
            'with': _with$4,
            'cses': _cses$5,
            'moti': _moti$6
        });
        return $2730;
    };
    const Fm$Term$cse = x0 => x1 => x2 => x3 => x4 => x5 => Fm$Term$cse$(x0, x1, x2, x3, x4, x5);

    function Fm$Parser$case$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2732 = self.idx;
                var $2733 = self.code;
                var $2734 = self.err;
                var $2735 = Parser$Reply$error$($2732, $2733, $2734);
                var $2731 = $2735;
                break;
            case 'Parser.Reply.value':
                var $2736 = self.idx;
                var $2737 = self.code;
                var $2738 = self.val;
                var self = Fm$Parser$text$("case ", $2736, $2737);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2740 = self.idx;
                        var $2741 = self.code;
                        var $2742 = self.err;
                        var $2743 = Parser$Reply$error$($2740, $2741, $2742);
                        var $2739 = $2743;
                        break;
                    case 'Parser.Reply.value':
                        var $2744 = self.idx;
                        var $2745 = self.code;
                        var $2746 = self.val;
                        var self = Fm$Parser$spaces($2744)($2745);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2748 = self.idx;
                                var $2749 = self.code;
                                var $2750 = self.err;
                                var $2751 = Parser$Reply$error$($2748, $2749, $2750);
                                var $2747 = $2751;
                                break;
                            case 'Parser.Reply.value':
                                var $2752 = self.idx;
                                var $2753 = self.code;
                                var $2754 = self.val;
                                var self = Fm$Parser$term$($2752, $2753);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2756 = self.idx;
                                        var $2757 = self.code;
                                        var $2758 = self.err;
                                        var $2759 = Parser$Reply$error$($2756, $2757, $2758);
                                        var $2755 = $2759;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2760 = self.idx;
                                        var $2761 = self.code;
                                        var $2762 = self.val;
                                        var self = Parser$maybe$((_idx$15 => _code$16 => {
                                            var self = Fm$Parser$text$("as", _idx$15, _code$16);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2765 = self.idx;
                                                    var $2766 = self.code;
                                                    var $2767 = self.err;
                                                    var $2768 = Parser$Reply$error$($2765, $2766, $2767);
                                                    var $2764 = $2768;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2769 = self.idx;
                                                    var $2770 = self.code;
                                                    var $2771 = self.val;
                                                    var $2772 = Fm$Parser$name1$($2769, $2770);
                                                    var $2764 = $2772;
                                                    break;
                                            };
                                            return $2764;
                                        }), $2760, $2761);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2773 = self.idx;
                                                var $2774 = self.code;
                                                var $2775 = self.err;
                                                var $2776 = Parser$Reply$error$($2773, $2774, $2775);
                                                var $2763 = $2776;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2777 = self.idx;
                                                var $2778 = self.code;
                                                var $2779 = self.val;
                                                var self = $2779;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var self = Fm$Term$reduce$($2762, Map$new);
                                                        switch (self._) {
                                                            case 'Fm.Term.var':
                                                                var $2782 = self.name;
                                                                var $2783 = self.indx;
                                                                var $2784 = $2782;
                                                                var $2781 = $2784;
                                                                break;
                                                            case 'Fm.Term.ref':
                                                                var $2785 = self.name;
                                                                var $2786 = $2785;
                                                                var $2781 = $2786;
                                                                break;
                                                            case 'Fm.Term.typ':
                                                                var $2787 = Fm$Name$read$("self");
                                                                var $2781 = $2787;
                                                                break;
                                                            case 'Fm.Term.all':
                                                                var $2788 = self.eras;
                                                                var $2789 = self.self;
                                                                var $2790 = self.name;
                                                                var $2791 = self.xtyp;
                                                                var $2792 = self.body;
                                                                var $2793 = Fm$Name$read$("self");
                                                                var $2781 = $2793;
                                                                break;
                                                            case 'Fm.Term.lam':
                                                                var $2794 = self.name;
                                                                var $2795 = self.body;
                                                                var $2796 = Fm$Name$read$("self");
                                                                var $2781 = $2796;
                                                                break;
                                                            case 'Fm.Term.app':
                                                                var $2797 = self.func;
                                                                var $2798 = self.argm;
                                                                var $2799 = Fm$Name$read$("self");
                                                                var $2781 = $2799;
                                                                break;
                                                            case 'Fm.Term.let':
                                                                var $2800 = self.name;
                                                                var $2801 = self.expr;
                                                                var $2802 = self.body;
                                                                var $2803 = Fm$Name$read$("self");
                                                                var $2781 = $2803;
                                                                break;
                                                            case 'Fm.Term.def':
                                                                var $2804 = self.name;
                                                                var $2805 = self.expr;
                                                                var $2806 = self.body;
                                                                var $2807 = Fm$Name$read$("self");
                                                                var $2781 = $2807;
                                                                break;
                                                            case 'Fm.Term.ann':
                                                                var $2808 = self.done;
                                                                var $2809 = self.term;
                                                                var $2810 = self.type;
                                                                var $2811 = Fm$Name$read$("self");
                                                                var $2781 = $2811;
                                                                break;
                                                            case 'Fm.Term.gol':
                                                                var $2812 = self.name;
                                                                var $2813 = self.dref;
                                                                var $2814 = self.verb;
                                                                var $2815 = Fm$Name$read$("self");
                                                                var $2781 = $2815;
                                                                break;
                                                            case 'Fm.Term.hol':
                                                                var $2816 = self.path;
                                                                var $2817 = Fm$Name$read$("self");
                                                                var $2781 = $2817;
                                                                break;
                                                            case 'Fm.Term.nat':
                                                                var $2818 = self.natx;
                                                                var $2819 = Fm$Name$read$("self");
                                                                var $2781 = $2819;
                                                                break;
                                                            case 'Fm.Term.chr':
                                                                var $2820 = self.chrx;
                                                                var $2821 = Fm$Name$read$("self");
                                                                var $2781 = $2821;
                                                                break;
                                                            case 'Fm.Term.str':
                                                                var $2822 = self.strx;
                                                                var $2823 = Fm$Name$read$("self");
                                                                var $2781 = $2823;
                                                                break;
                                                            case 'Fm.Term.cse':
                                                                var $2824 = self.path;
                                                                var $2825 = self.expr;
                                                                var $2826 = self.name;
                                                                var $2827 = self.with;
                                                                var $2828 = self.cses;
                                                                var $2829 = self.moti;
                                                                var $2830 = Fm$Name$read$("self");
                                                                var $2781 = $2830;
                                                                break;
                                                            case 'Fm.Term.ori':
                                                                var $2831 = self.orig;
                                                                var $2832 = self.expr;
                                                                var $2833 = Fm$Name$read$("self");
                                                                var $2781 = $2833;
                                                                break;
                                                        };
                                                        var _name$18 = $2781;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $2834 = self.value;
                                                        var $2835 = $2834;
                                                        var _name$18 = $2835;
                                                        break;
                                                };
                                                var self = Parser$many$(Fm$Parser$case$with)($2777)($2778);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2836 = self.idx;
                                                        var $2837 = self.code;
                                                        var $2838 = self.err;
                                                        var $2839 = Parser$Reply$error$($2836, $2837, $2838);
                                                        var $2780 = $2839;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2840 = self.idx;
                                                        var $2841 = self.code;
                                                        var $2842 = self.val;
                                                        var self = Fm$Parser$text$("{", $2840, $2841);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2844 = self.idx;
                                                                var $2845 = self.code;
                                                                var $2846 = self.err;
                                                                var $2847 = Parser$Reply$error$($2844, $2845, $2846);
                                                                var $2843 = $2847;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2848 = self.idx;
                                                                var $2849 = self.code;
                                                                var $2850 = self.val;
                                                                var self = Parser$until$(Fm$Parser$text("}"), Fm$Parser$case$case)($2848)($2849);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2852 = self.idx;
                                                                        var $2853 = self.code;
                                                                        var $2854 = self.err;
                                                                        var $2855 = Parser$Reply$error$($2852, $2853, $2854);
                                                                        var $2851 = $2855;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2856 = self.idx;
                                                                        var $2857 = self.code;
                                                                        var $2858 = self.val;
                                                                        var _cses$28 = Map$from_list$(List$mapped$($2858, (_x$28 => {
                                                                            var $2860 = Pair$new$((fm_name_to_bits(Pair$fst$(_x$28))), Pair$snd$(_x$28));
                                                                            return $2860;
                                                                        })));
                                                                        var self = Parser$first_of$(List$cons$((_idx$29 => _code$30 => {
                                                                            var self = Fm$Parser$text$(":", _idx$29, _code$30);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $2862 = self.idx;
                                                                                    var $2863 = self.code;
                                                                                    var $2864 = self.err;
                                                                                    var $2865 = Parser$Reply$error$($2862, $2863, $2864);
                                                                                    var $2861 = $2865;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $2866 = self.idx;
                                                                                    var $2867 = self.code;
                                                                                    var $2868 = self.val;
                                                                                    var self = Fm$Parser$term$($2866, $2867);
                                                                                    switch (self._) {
                                                                                        case 'Parser.Reply.error':
                                                                                            var $2870 = self.idx;
                                                                                            var $2871 = self.code;
                                                                                            var $2872 = self.err;
                                                                                            var $2873 = Parser$Reply$error$($2870, $2871, $2872);
                                                                                            var $2869 = $2873;
                                                                                            break;
                                                                                        case 'Parser.Reply.value':
                                                                                            var $2874 = self.idx;
                                                                                            var $2875 = self.code;
                                                                                            var $2876 = self.val;
                                                                                            var $2877 = Parser$Reply$value$($2874, $2875, Maybe$some$($2876));
                                                                                            var $2869 = $2877;
                                                                                            break;
                                                                                    };
                                                                                    var $2861 = $2869;
                                                                                    break;
                                                                            };
                                                                            return $2861;
                                                                        }), List$cons$((_idx$29 => _code$30 => {
                                                                            var self = Fm$Parser$text$("!", _idx$29, _code$30);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $2879 = self.idx;
                                                                                    var $2880 = self.code;
                                                                                    var $2881 = self.err;
                                                                                    var $2882 = Parser$Reply$error$($2879, $2880, $2881);
                                                                                    var $2878 = $2882;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $2883 = self.idx;
                                                                                    var $2884 = self.code;
                                                                                    var $2885 = self.val;
                                                                                    var $2886 = Parser$Reply$value$($2883, $2884, Maybe$none);
                                                                                    var $2878 = $2886;
                                                                                    break;
                                                                            };
                                                                            return $2878;
                                                                        }), List$cons$((_idx$29 => _code$30 => {
                                                                            var $2887 = Parser$Reply$value$(_idx$29, _code$30, Maybe$some$(Fm$Term$hol$(Bits$e)));
                                                                            return $2887;
                                                                        }), List$nil))))($2856)($2857);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2888 = self.idx;
                                                                                var $2889 = self.code;
                                                                                var $2890 = self.err;
                                                                                var $2891 = Parser$Reply$error$($2888, $2889, $2890);
                                                                                var $2859 = $2891;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2892 = self.idx;
                                                                                var $2893 = self.code;
                                                                                var $2894 = self.val;
                                                                                var self = Fm$Parser$stop$($2738, $2892, $2893);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2896 = self.idx;
                                                                                        var $2897 = self.code;
                                                                                        var $2898 = self.err;
                                                                                        var $2899 = Parser$Reply$error$($2896, $2897, $2898);
                                                                                        var $2895 = $2899;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2900 = self.idx;
                                                                                        var $2901 = self.code;
                                                                                        var $2902 = self.val;
                                                                                        var $2903 = Parser$Reply$value$($2900, $2901, Fm$Term$ori$($2902, Fm$Term$cse$(Bits$e, $2762, _name$18, $2842, _cses$28, $2894)));
                                                                                        var $2895 = $2903;
                                                                                        break;
                                                                                };
                                                                                var $2859 = $2895;
                                                                                break;
                                                                        };
                                                                        var $2851 = $2859;
                                                                        break;
                                                                };
                                                                var $2843 = $2851;
                                                                break;
                                                        };
                                                        var $2780 = $2843;
                                                        break;
                                                };
                                                var $2763 = $2780;
                                                break;
                                        };
                                        var $2755 = $2763;
                                        break;
                                };
                                var $2747 = $2755;
                                break;
                        };
                        var $2739 = $2747;
                        break;
                };
                var $2731 = $2739;
                break;
        };
        return $2731;
    };
    const Fm$Parser$case = x0 => x1 => Fm$Parser$case$(x0, x1);

    function Fm$set$(_name$2, _val$3, _map$4) {
        var $2904 = Map$set$((fm_name_to_bits(_name$2)), _val$3, _map$4);
        return $2904;
    };
    const Fm$set = x0 => x1 => x2 => Fm$set$(x0, x1, x2);

    function Fm$Parser$open$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2906 = self.idx;
                var $2907 = self.code;
                var $2908 = self.err;
                var $2909 = Parser$Reply$error$($2906, $2907, $2908);
                var $2905 = $2909;
                break;
            case 'Parser.Reply.value':
                var $2910 = self.idx;
                var $2911 = self.code;
                var $2912 = self.val;
                var self = Fm$Parser$text$("open ", $2910, $2911);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2914 = self.idx;
                        var $2915 = self.code;
                        var $2916 = self.err;
                        var $2917 = Parser$Reply$error$($2914, $2915, $2916);
                        var $2913 = $2917;
                        break;
                    case 'Parser.Reply.value':
                        var $2918 = self.idx;
                        var $2919 = self.code;
                        var $2920 = self.val;
                        var self = Fm$Parser$spaces($2918)($2919);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2922 = self.idx;
                                var $2923 = self.code;
                                var $2924 = self.err;
                                var $2925 = Parser$Reply$error$($2922, $2923, $2924);
                                var $2921 = $2925;
                                break;
                            case 'Parser.Reply.value':
                                var $2926 = self.idx;
                                var $2927 = self.code;
                                var $2928 = self.val;
                                var self = Fm$Parser$term$($2926, $2927);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2930 = self.idx;
                                        var $2931 = self.code;
                                        var $2932 = self.err;
                                        var $2933 = Parser$Reply$error$($2930, $2931, $2932);
                                        var $2929 = $2933;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2934 = self.idx;
                                        var $2935 = self.code;
                                        var $2936 = self.val;
                                        var self = Parser$maybe$((_idx$15 => _code$16 => {
                                            var self = Fm$Parser$text$("as", _idx$15, _code$16);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2939 = self.idx;
                                                    var $2940 = self.code;
                                                    var $2941 = self.err;
                                                    var $2942 = Parser$Reply$error$($2939, $2940, $2941);
                                                    var $2938 = $2942;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2943 = self.idx;
                                                    var $2944 = self.code;
                                                    var $2945 = self.val;
                                                    var $2946 = Fm$Parser$name1$($2943, $2944);
                                                    var $2938 = $2946;
                                                    break;
                                            };
                                            return $2938;
                                        }), $2934, $2935);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2947 = self.idx;
                                                var $2948 = self.code;
                                                var $2949 = self.err;
                                                var $2950 = Parser$Reply$error$($2947, $2948, $2949);
                                                var $2937 = $2950;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2951 = self.idx;
                                                var $2952 = self.code;
                                                var $2953 = self.val;
                                                var self = Parser$maybe$(Fm$Parser$text(";"), $2951, $2952);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2955 = self.idx;
                                                        var $2956 = self.code;
                                                        var $2957 = self.err;
                                                        var $2958 = Parser$Reply$error$($2955, $2956, $2957);
                                                        var $2954 = $2958;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2959 = self.idx;
                                                        var $2960 = self.code;
                                                        var $2961 = self.val;
                                                        var self = $2953;
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var self = Fm$Term$reduce$($2936, Map$new);
                                                                switch (self._) {
                                                                    case 'Fm.Term.var':
                                                                        var $2964 = self.name;
                                                                        var $2965 = self.indx;
                                                                        var $2966 = $2964;
                                                                        var $2963 = $2966;
                                                                        break;
                                                                    case 'Fm.Term.ref':
                                                                        var $2967 = self.name;
                                                                        var $2968 = $2967;
                                                                        var $2963 = $2968;
                                                                        break;
                                                                    case 'Fm.Term.typ':
                                                                        var $2969 = Fm$Name$read$("self");
                                                                        var $2963 = $2969;
                                                                        break;
                                                                    case 'Fm.Term.all':
                                                                        var $2970 = self.eras;
                                                                        var $2971 = self.self;
                                                                        var $2972 = self.name;
                                                                        var $2973 = self.xtyp;
                                                                        var $2974 = self.body;
                                                                        var $2975 = Fm$Name$read$("self");
                                                                        var $2963 = $2975;
                                                                        break;
                                                                    case 'Fm.Term.lam':
                                                                        var $2976 = self.name;
                                                                        var $2977 = self.body;
                                                                        var $2978 = Fm$Name$read$("self");
                                                                        var $2963 = $2978;
                                                                        break;
                                                                    case 'Fm.Term.app':
                                                                        var $2979 = self.func;
                                                                        var $2980 = self.argm;
                                                                        var $2981 = Fm$Name$read$("self");
                                                                        var $2963 = $2981;
                                                                        break;
                                                                    case 'Fm.Term.let':
                                                                        var $2982 = self.name;
                                                                        var $2983 = self.expr;
                                                                        var $2984 = self.body;
                                                                        var $2985 = Fm$Name$read$("self");
                                                                        var $2963 = $2985;
                                                                        break;
                                                                    case 'Fm.Term.def':
                                                                        var $2986 = self.name;
                                                                        var $2987 = self.expr;
                                                                        var $2988 = self.body;
                                                                        var $2989 = Fm$Name$read$("self");
                                                                        var $2963 = $2989;
                                                                        break;
                                                                    case 'Fm.Term.ann':
                                                                        var $2990 = self.done;
                                                                        var $2991 = self.term;
                                                                        var $2992 = self.type;
                                                                        var $2993 = Fm$Name$read$("self");
                                                                        var $2963 = $2993;
                                                                        break;
                                                                    case 'Fm.Term.gol':
                                                                        var $2994 = self.name;
                                                                        var $2995 = self.dref;
                                                                        var $2996 = self.verb;
                                                                        var $2997 = Fm$Name$read$("self");
                                                                        var $2963 = $2997;
                                                                        break;
                                                                    case 'Fm.Term.hol':
                                                                        var $2998 = self.path;
                                                                        var $2999 = Fm$Name$read$("self");
                                                                        var $2963 = $2999;
                                                                        break;
                                                                    case 'Fm.Term.nat':
                                                                        var $3000 = self.natx;
                                                                        var $3001 = Fm$Name$read$("self");
                                                                        var $2963 = $3001;
                                                                        break;
                                                                    case 'Fm.Term.chr':
                                                                        var $3002 = self.chrx;
                                                                        var $3003 = Fm$Name$read$("self");
                                                                        var $2963 = $3003;
                                                                        break;
                                                                    case 'Fm.Term.str':
                                                                        var $3004 = self.strx;
                                                                        var $3005 = Fm$Name$read$("self");
                                                                        var $2963 = $3005;
                                                                        break;
                                                                    case 'Fm.Term.cse':
                                                                        var $3006 = self.path;
                                                                        var $3007 = self.expr;
                                                                        var $3008 = self.name;
                                                                        var $3009 = self.with;
                                                                        var $3010 = self.cses;
                                                                        var $3011 = self.moti;
                                                                        var $3012 = Fm$Name$read$("self");
                                                                        var $2963 = $3012;
                                                                        break;
                                                                    case 'Fm.Term.ori':
                                                                        var $3013 = self.orig;
                                                                        var $3014 = self.expr;
                                                                        var $3015 = Fm$Name$read$("self");
                                                                        var $2963 = $3015;
                                                                        break;
                                                                };
                                                                var _name$21 = $2963;
                                                                break;
                                                            case 'Maybe.some':
                                                                var $3016 = self.value;
                                                                var $3017 = $3016;
                                                                var _name$21 = $3017;
                                                                break;
                                                        };
                                                        var _wyth$22 = List$nil;
                                                        var self = Fm$Parser$term$($2959, $2960);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3018 = self.idx;
                                                                var $3019 = self.code;
                                                                var $3020 = self.err;
                                                                var $3021 = Parser$Reply$error$($3018, $3019, $3020);
                                                                var $2962 = $3021;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3022 = self.idx;
                                                                var $3023 = self.code;
                                                                var $3024 = self.val;
                                                                var _cses$26 = Fm$set$("_", $3024, Map$new);
                                                                var _moti$27 = Maybe$some$(Fm$Term$hol$(Bits$e));
                                                                var self = Fm$Parser$stop$($2912, $3022, $3023);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3026 = self.idx;
                                                                        var $3027 = self.code;
                                                                        var $3028 = self.err;
                                                                        var $3029 = Parser$Reply$error$($3026, $3027, $3028);
                                                                        var $3025 = $3029;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3030 = self.idx;
                                                                        var $3031 = self.code;
                                                                        var $3032 = self.val;
                                                                        var $3033 = Parser$Reply$value$($3030, $3031, Fm$Term$ori$($3032, Fm$Term$cse$(Bits$e, $2936, _name$21, _wyth$22, _cses$26, _moti$27)));
                                                                        var $3025 = $3033;
                                                                        break;
                                                                };
                                                                var $2962 = $3025;
                                                                break;
                                                        };
                                                        var $2954 = $2962;
                                                        break;
                                                };
                                                var $2937 = $2954;
                                                break;
                                        };
                                        var $2929 = $2937;
                                        break;
                                };
                                var $2921 = $2929;
                                break;
                        };
                        var $2913 = $2921;
                        break;
                };
                var $2905 = $2913;
                break;
        };
        return $2905;
    };
    const Fm$Parser$open = x0 => x1 => Fm$Parser$open$(x0, x1);

    function Parser$digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $3035 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $3034 = $3035;
        } else {
            var $3036 = self.charCodeAt(0);
            var $3037 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($3036 === 48);
            if (self) {
                var $3039 = Parser$Reply$value$(_sidx$5, $3037, 0n);
                var $3038 = $3039;
            } else {
                var self = ($3036 === 49);
                if (self) {
                    var $3041 = Parser$Reply$value$(_sidx$5, $3037, 1n);
                    var $3040 = $3041;
                } else {
                    var self = ($3036 === 50);
                    if (self) {
                        var $3043 = Parser$Reply$value$(_sidx$5, $3037, 2n);
                        var $3042 = $3043;
                    } else {
                        var self = ($3036 === 51);
                        if (self) {
                            var $3045 = Parser$Reply$value$(_sidx$5, $3037, 3n);
                            var $3044 = $3045;
                        } else {
                            var self = ($3036 === 52);
                            if (self) {
                                var $3047 = Parser$Reply$value$(_sidx$5, $3037, 4n);
                                var $3046 = $3047;
                            } else {
                                var self = ($3036 === 53);
                                if (self) {
                                    var $3049 = Parser$Reply$value$(_sidx$5, $3037, 5n);
                                    var $3048 = $3049;
                                } else {
                                    var self = ($3036 === 54);
                                    if (self) {
                                        var $3051 = Parser$Reply$value$(_sidx$5, $3037, 6n);
                                        var $3050 = $3051;
                                    } else {
                                        var self = ($3036 === 55);
                                        if (self) {
                                            var $3053 = Parser$Reply$value$(_sidx$5, $3037, 7n);
                                            var $3052 = $3053;
                                        } else {
                                            var self = ($3036 === 56);
                                            if (self) {
                                                var $3055 = Parser$Reply$value$(_sidx$5, $3037, 8n);
                                                var $3054 = $3055;
                                            } else {
                                                var self = ($3036 === 57);
                                                if (self) {
                                                    var $3057 = Parser$Reply$value$(_sidx$5, $3037, 9n);
                                                    var $3056 = $3057;
                                                } else {
                                                    var $3058 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                    var $3056 = $3058;
                                                };
                                                var $3054 = $3056;
                                            };
                                            var $3052 = $3054;
                                        };
                                        var $3050 = $3052;
                                    };
                                    var $3048 = $3050;
                                };
                                var $3046 = $3048;
                            };
                            var $3044 = $3046;
                        };
                        var $3042 = $3044;
                    };
                    var $3040 = $3042;
                };
                var $3038 = $3040;
            };
            var $3034 = $3038;
        };
        return $3034;
    };
    const Parser$digit = x0 => x1 => Parser$digit$(x0, x1);
    const Nat$add = a0 => a1 => (a0 + a1);
    const Nat$mul = a0 => a1 => (a0 * a1);

    function Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4) {
        var Nat$from_base$go$ = (_b$1, _ds$2, _p$3, _res$4) => ({
            ctr: 'TCO',
            arg: [_b$1, _ds$2, _p$3, _res$4]
        });
        var Nat$from_base$go = _b$1 => _ds$2 => _p$3 => _res$4 => Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4);
        var arg = [_b$1, _ds$2, _p$3, _res$4];
        while (true) {
            let [_b$1, _ds$2, _p$3, _res$4] = arg;
            var R = (() => {
                var self = _ds$2;
                switch (self._) {
                    case 'List.nil':
                        var $3059 = _res$4;
                        return $3059;
                    case 'List.cons':
                        var $3060 = self.head;
                        var $3061 = self.tail;
                        var $3062 = Nat$from_base$go$(_b$1, $3061, (_b$1 * _p$3), (($3060 * _p$3) + _res$4));
                        return $3062;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$from_base$go = x0 => x1 => x2 => x3 => Nat$from_base$go$(x0, x1, x2, x3);

    function List$reverse$go$(_xs$2, _res$3) {
        var List$reverse$go$ = (_xs$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_xs$2, _res$3]
        });
        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);
        var arg = [_xs$2, _res$3];
        while (true) {
            let [_xs$2, _res$3] = arg;
            var R = (() => {
                var self = _xs$2;
                switch (self._) {
                    case 'List.nil':
                        var $3063 = _res$3;
                        return $3063;
                    case 'List.cons':
                        var $3064 = self.head;
                        var $3065 = self.tail;
                        var $3066 = List$reverse$go$($3065, List$cons$($3064, _res$3));
                        return $3066;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);

    function List$reverse$(_xs$2) {
        var $3067 = List$reverse$go$(_xs$2, List$nil);
        return $3067;
    };
    const List$reverse = x0 => List$reverse$(x0);

    function Nat$from_base$(_base$1, _ds$2) {
        var $3068 = Nat$from_base$go$(_base$1, List$reverse$(_ds$2), 1n, 0n);
        return $3068;
    };
    const Nat$from_base = x0 => x1 => Nat$from_base$(x0, x1);

    function Parser$nat$(_idx$1, _code$2) {
        var self = Parser$many1$(Parser$digit, _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3070 = self.idx;
                var $3071 = self.code;
                var $3072 = self.err;
                var $3073 = Parser$Reply$error$($3070, $3071, $3072);
                var $3069 = $3073;
                break;
            case 'Parser.Reply.value':
                var $3074 = self.idx;
                var $3075 = self.code;
                var $3076 = self.val;
                var $3077 = Parser$Reply$value$($3074, $3075, Nat$from_base$(10n, $3076));
                var $3069 = $3077;
                break;
        };
        return $3069;
    };
    const Parser$nat = x0 => x1 => Parser$nat$(x0, x1);

    function Bits$tail$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $3079 = Bits$e;
                var $3078 = $3079;
                break;
            case 'o':
                var $3080 = self.slice(0, -1);
                var $3081 = $3080;
                var $3078 = $3081;
                break;
            case 'i':
                var $3082 = self.slice(0, -1);
                var $3083 = $3082;
                var $3078 = $3083;
                break;
        };
        return $3078;
    };
    const Bits$tail = x0 => Bits$tail$(x0);

    function Bits$inc$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $3085 = (Bits$e + '1');
                var $3084 = $3085;
                break;
            case 'o':
                var $3086 = self.slice(0, -1);
                var $3087 = ($3086 + '1');
                var $3084 = $3087;
                break;
            case 'i':
                var $3088 = self.slice(0, -1);
                var $3089 = (Bits$inc$($3088) + '0');
                var $3084 = $3089;
                break;
        };
        return $3084;
    };
    const Bits$inc = x0 => Bits$inc$(x0);
    const Nat$to_bits = a0 => (nat_to_bits(a0));

    function Maybe$to_bool$(_m$2) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $3091 = Bool$false;
                var $3090 = $3091;
                break;
            case 'Maybe.some':
                var $3092 = self.value;
                var $3093 = Bool$true;
                var $3090 = $3093;
                break;
        };
        return $3090;
    };
    const Maybe$to_bool = x0 => Maybe$to_bool$(x0);

    function Fm$Term$gol$(_name$1, _dref$2, _verb$3) {
        var $3094 = ({
            _: 'Fm.Term.gol',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3
        });
        return $3094;
    };
    const Fm$Term$gol = x0 => x1 => x2 => Fm$Term$gol$(x0, x1, x2);

    function Fm$Parser$goal$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3096 = self.idx;
                var $3097 = self.code;
                var $3098 = self.err;
                var $3099 = Parser$Reply$error$($3096, $3097, $3098);
                var $3095 = $3099;
                break;
            case 'Parser.Reply.value':
                var $3100 = self.idx;
                var $3101 = self.code;
                var $3102 = self.val;
                var self = Fm$Parser$text$("?", $3100, $3101);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3104 = self.idx;
                        var $3105 = self.code;
                        var $3106 = self.err;
                        var $3107 = Parser$Reply$error$($3104, $3105, $3106);
                        var $3103 = $3107;
                        break;
                    case 'Parser.Reply.value':
                        var $3108 = self.idx;
                        var $3109 = self.code;
                        var $3110 = self.val;
                        var self = Fm$Parser$name$($3108, $3109);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3112 = self.idx;
                                var $3113 = self.code;
                                var $3114 = self.err;
                                var $3115 = Parser$Reply$error$($3112, $3113, $3114);
                                var $3111 = $3115;
                                break;
                            case 'Parser.Reply.value':
                                var $3116 = self.idx;
                                var $3117 = self.code;
                                var $3118 = self.val;
                                var self = Parser$many$((_idx$12 => _code$13 => {
                                    var self = Fm$Parser$text$("-", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3121 = self.idx;
                                            var $3122 = self.code;
                                            var $3123 = self.err;
                                            var $3124 = Parser$Reply$error$($3121, $3122, $3123);
                                            var $3120 = $3124;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3125 = self.idx;
                                            var $3126 = self.code;
                                            var $3127 = self.val;
                                            var self = Parser$nat$($3125, $3126);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3129 = self.idx;
                                                    var $3130 = self.code;
                                                    var $3131 = self.err;
                                                    var $3132 = Parser$Reply$error$($3129, $3130, $3131);
                                                    var $3128 = $3132;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3133 = self.idx;
                                                    var $3134 = self.code;
                                                    var $3135 = self.val;
                                                    var _bits$20 = Bits$reverse$(Bits$tail$(Bits$reverse$((nat_to_bits($3135)))));
                                                    var $3136 = Parser$Reply$value$($3133, $3134, _bits$20);
                                                    var $3128 = $3136;
                                                    break;
                                            };
                                            var $3120 = $3128;
                                            break;
                                    };
                                    return $3120;
                                }))($3116)($3117);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3137 = self.idx;
                                        var $3138 = self.code;
                                        var $3139 = self.err;
                                        var $3140 = Parser$Reply$error$($3137, $3138, $3139);
                                        var $3119 = $3140;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3141 = self.idx;
                                        var $3142 = self.code;
                                        var $3143 = self.val;
                                        var self = Parser$maybe$(Parser$text("-"), $3141, $3142);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3145 = self.idx;
                                                var $3146 = self.code;
                                                var $3147 = self.err;
                                                var $3148 = Parser$Reply$error$($3145, $3146, $3147);
                                                var self = $3148;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3149 = self.idx;
                                                var $3150 = self.code;
                                                var $3151 = self.val;
                                                var $3152 = Parser$Reply$value$($3149, $3150, Maybe$to_bool$($3151));
                                                var self = $3152;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3153 = self.idx;
                                                var $3154 = self.code;
                                                var $3155 = self.err;
                                                var $3156 = Parser$Reply$error$($3153, $3154, $3155);
                                                var $3144 = $3156;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3157 = self.idx;
                                                var $3158 = self.code;
                                                var $3159 = self.val;
                                                var self = Fm$Parser$stop$($3102, $3157, $3158);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3161 = self.idx;
                                                        var $3162 = self.code;
                                                        var $3163 = self.err;
                                                        var $3164 = Parser$Reply$error$($3161, $3162, $3163);
                                                        var $3160 = $3164;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3165 = self.idx;
                                                        var $3166 = self.code;
                                                        var $3167 = self.val;
                                                        var $3168 = Parser$Reply$value$($3165, $3166, Fm$Term$ori$($3167, Fm$Term$gol$($3118, $3143, $3159)));
                                                        var $3160 = $3168;
                                                        break;
                                                };
                                                var $3144 = $3160;
                                                break;
                                        };
                                        var $3119 = $3144;
                                        break;
                                };
                                var $3111 = $3119;
                                break;
                        };
                        var $3103 = $3111;
                        break;
                };
                var $3095 = $3103;
                break;
        };
        return $3095;
    };
    const Fm$Parser$goal = x0 => x1 => Fm$Parser$goal$(x0, x1);

    function Fm$Parser$hole$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3170 = self.idx;
                var $3171 = self.code;
                var $3172 = self.err;
                var $3173 = Parser$Reply$error$($3170, $3171, $3172);
                var $3169 = $3173;
                break;
            case 'Parser.Reply.value':
                var $3174 = self.idx;
                var $3175 = self.code;
                var $3176 = self.val;
                var self = Fm$Parser$text$("_", $3174, $3175);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3178 = self.idx;
                        var $3179 = self.code;
                        var $3180 = self.err;
                        var $3181 = Parser$Reply$error$($3178, $3179, $3180);
                        var $3177 = $3181;
                        break;
                    case 'Parser.Reply.value':
                        var $3182 = self.idx;
                        var $3183 = self.code;
                        var $3184 = self.val;
                        var self = Fm$Parser$stop$($3176, $3182, $3183);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3186 = self.idx;
                                var $3187 = self.code;
                                var $3188 = self.err;
                                var $3189 = Parser$Reply$error$($3186, $3187, $3188);
                                var $3185 = $3189;
                                break;
                            case 'Parser.Reply.value':
                                var $3190 = self.idx;
                                var $3191 = self.code;
                                var $3192 = self.val;
                                var $3193 = Parser$Reply$value$($3190, $3191, Fm$Term$ori$($3192, Fm$Term$hol$(Bits$e)));
                                var $3185 = $3193;
                                break;
                        };
                        var $3177 = $3185;
                        break;
                };
                var $3169 = $3177;
                break;
        };
        return $3169;
    };
    const Fm$Parser$hole = x0 => x1 => Fm$Parser$hole$(x0, x1);

    function Fm$Parser$u8$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3195 = self.idx;
                var $3196 = self.code;
                var $3197 = self.err;
                var $3198 = Parser$Reply$error$($3195, $3196, $3197);
                var $3194 = $3198;
                break;
            case 'Parser.Reply.value':
                var $3199 = self.idx;
                var $3200 = self.code;
                var $3201 = self.val;
                var self = Fm$Parser$spaces($3199)($3200);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3203 = self.idx;
                        var $3204 = self.code;
                        var $3205 = self.err;
                        var $3206 = Parser$Reply$error$($3203, $3204, $3205);
                        var $3202 = $3206;
                        break;
                    case 'Parser.Reply.value':
                        var $3207 = self.idx;
                        var $3208 = self.code;
                        var $3209 = self.val;
                        var self = Parser$nat$($3207, $3208);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3211 = self.idx;
                                var $3212 = self.code;
                                var $3213 = self.err;
                                var $3214 = Parser$Reply$error$($3211, $3212, $3213);
                                var $3210 = $3214;
                                break;
                            case 'Parser.Reply.value':
                                var $3215 = self.idx;
                                var $3216 = self.code;
                                var $3217 = self.val;
                                var self = Parser$text$("b", $3215, $3216);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3219 = self.idx;
                                        var $3220 = self.code;
                                        var $3221 = self.err;
                                        var $3222 = Parser$Reply$error$($3219, $3220, $3221);
                                        var $3218 = $3222;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3223 = self.idx;
                                        var $3224 = self.code;
                                        var $3225 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u8");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3217));
                                        var self = Fm$Parser$stop$($3201, $3223, $3224);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3227 = self.idx;
                                                var $3228 = self.code;
                                                var $3229 = self.err;
                                                var $3230 = Parser$Reply$error$($3227, $3228, $3229);
                                                var $3226 = $3230;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3231 = self.idx;
                                                var $3232 = self.code;
                                                var $3233 = self.val;
                                                var $3234 = Parser$Reply$value$($3231, $3232, Fm$Term$ori$($3233, _term$16));
                                                var $3226 = $3234;
                                                break;
                                        };
                                        var $3218 = $3226;
                                        break;
                                };
                                var $3210 = $3218;
                                break;
                        };
                        var $3202 = $3210;
                        break;
                };
                var $3194 = $3202;
                break;
        };
        return $3194;
    };
    const Fm$Parser$u8 = x0 => x1 => Fm$Parser$u8$(x0, x1);

    function Fm$Parser$u16$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3236 = self.idx;
                var $3237 = self.code;
                var $3238 = self.err;
                var $3239 = Parser$Reply$error$($3236, $3237, $3238);
                var $3235 = $3239;
                break;
            case 'Parser.Reply.value':
                var $3240 = self.idx;
                var $3241 = self.code;
                var $3242 = self.val;
                var self = Fm$Parser$spaces($3240)($3241);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3244 = self.idx;
                        var $3245 = self.code;
                        var $3246 = self.err;
                        var $3247 = Parser$Reply$error$($3244, $3245, $3246);
                        var $3243 = $3247;
                        break;
                    case 'Parser.Reply.value':
                        var $3248 = self.idx;
                        var $3249 = self.code;
                        var $3250 = self.val;
                        var self = Parser$nat$($3248, $3249);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3252 = self.idx;
                                var $3253 = self.code;
                                var $3254 = self.err;
                                var $3255 = Parser$Reply$error$($3252, $3253, $3254);
                                var $3251 = $3255;
                                break;
                            case 'Parser.Reply.value':
                                var $3256 = self.idx;
                                var $3257 = self.code;
                                var $3258 = self.val;
                                var self = Parser$text$("s", $3256, $3257);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3260 = self.idx;
                                        var $3261 = self.code;
                                        var $3262 = self.err;
                                        var $3263 = Parser$Reply$error$($3260, $3261, $3262);
                                        var $3259 = $3263;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3264 = self.idx;
                                        var $3265 = self.code;
                                        var $3266 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u16");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3258));
                                        var self = Fm$Parser$stop$($3242, $3264, $3265);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3268 = self.idx;
                                                var $3269 = self.code;
                                                var $3270 = self.err;
                                                var $3271 = Parser$Reply$error$($3268, $3269, $3270);
                                                var $3267 = $3271;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3272 = self.idx;
                                                var $3273 = self.code;
                                                var $3274 = self.val;
                                                var $3275 = Parser$Reply$value$($3272, $3273, Fm$Term$ori$($3274, _term$16));
                                                var $3267 = $3275;
                                                break;
                                        };
                                        var $3259 = $3267;
                                        break;
                                };
                                var $3251 = $3259;
                                break;
                        };
                        var $3243 = $3251;
                        break;
                };
                var $3235 = $3243;
                break;
        };
        return $3235;
    };
    const Fm$Parser$u16 = x0 => x1 => Fm$Parser$u16$(x0, x1);

    function Fm$Parser$u32$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3277 = self.idx;
                var $3278 = self.code;
                var $3279 = self.err;
                var $3280 = Parser$Reply$error$($3277, $3278, $3279);
                var $3276 = $3280;
                break;
            case 'Parser.Reply.value':
                var $3281 = self.idx;
                var $3282 = self.code;
                var $3283 = self.val;
                var self = Fm$Parser$spaces($3281)($3282);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3285 = self.idx;
                        var $3286 = self.code;
                        var $3287 = self.err;
                        var $3288 = Parser$Reply$error$($3285, $3286, $3287);
                        var $3284 = $3288;
                        break;
                    case 'Parser.Reply.value':
                        var $3289 = self.idx;
                        var $3290 = self.code;
                        var $3291 = self.val;
                        var self = Parser$nat$($3289, $3290);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3293 = self.idx;
                                var $3294 = self.code;
                                var $3295 = self.err;
                                var $3296 = Parser$Reply$error$($3293, $3294, $3295);
                                var $3292 = $3296;
                                break;
                            case 'Parser.Reply.value':
                                var $3297 = self.idx;
                                var $3298 = self.code;
                                var $3299 = self.val;
                                var self = Parser$text$("u", $3297, $3298);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3301 = self.idx;
                                        var $3302 = self.code;
                                        var $3303 = self.err;
                                        var $3304 = Parser$Reply$error$($3301, $3302, $3303);
                                        var $3300 = $3304;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3305 = self.idx;
                                        var $3306 = self.code;
                                        var $3307 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u32");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3299));
                                        var self = Fm$Parser$stop$($3283, $3305, $3306);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3309 = self.idx;
                                                var $3310 = self.code;
                                                var $3311 = self.err;
                                                var $3312 = Parser$Reply$error$($3309, $3310, $3311);
                                                var $3308 = $3312;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3313 = self.idx;
                                                var $3314 = self.code;
                                                var $3315 = self.val;
                                                var $3316 = Parser$Reply$value$($3313, $3314, Fm$Term$ori$($3315, _term$16));
                                                var $3308 = $3316;
                                                break;
                                        };
                                        var $3300 = $3308;
                                        break;
                                };
                                var $3292 = $3300;
                                break;
                        };
                        var $3284 = $3292;
                        break;
                };
                var $3276 = $3284;
                break;
        };
        return $3276;
    };
    const Fm$Parser$u32 = x0 => x1 => Fm$Parser$u32$(x0, x1);

    function Fm$Parser$u64$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3318 = self.idx;
                var $3319 = self.code;
                var $3320 = self.err;
                var $3321 = Parser$Reply$error$($3318, $3319, $3320);
                var $3317 = $3321;
                break;
            case 'Parser.Reply.value':
                var $3322 = self.idx;
                var $3323 = self.code;
                var $3324 = self.val;
                var self = Fm$Parser$spaces($3322)($3323);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3326 = self.idx;
                        var $3327 = self.code;
                        var $3328 = self.err;
                        var $3329 = Parser$Reply$error$($3326, $3327, $3328);
                        var $3325 = $3329;
                        break;
                    case 'Parser.Reply.value':
                        var $3330 = self.idx;
                        var $3331 = self.code;
                        var $3332 = self.val;
                        var self = Parser$nat$($3330, $3331);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3334 = self.idx;
                                var $3335 = self.code;
                                var $3336 = self.err;
                                var $3337 = Parser$Reply$error$($3334, $3335, $3336);
                                var $3333 = $3337;
                                break;
                            case 'Parser.Reply.value':
                                var $3338 = self.idx;
                                var $3339 = self.code;
                                var $3340 = self.val;
                                var self = Parser$text$("l", $3338, $3339);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3342 = self.idx;
                                        var $3343 = self.code;
                                        var $3344 = self.err;
                                        var $3345 = Parser$Reply$error$($3342, $3343, $3344);
                                        var $3341 = $3345;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3346 = self.idx;
                                        var $3347 = self.code;
                                        var $3348 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u64");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3340));
                                        var self = Fm$Parser$stop$($3324, $3346, $3347);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3350 = self.idx;
                                                var $3351 = self.code;
                                                var $3352 = self.err;
                                                var $3353 = Parser$Reply$error$($3350, $3351, $3352);
                                                var $3349 = $3353;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3354 = self.idx;
                                                var $3355 = self.code;
                                                var $3356 = self.val;
                                                var $3357 = Parser$Reply$value$($3354, $3355, Fm$Term$ori$($3356, _term$16));
                                                var $3349 = $3357;
                                                break;
                                        };
                                        var $3341 = $3349;
                                        break;
                                };
                                var $3333 = $3341;
                                break;
                        };
                        var $3325 = $3333;
                        break;
                };
                var $3317 = $3325;
                break;
        };
        return $3317;
    };
    const Fm$Parser$u64 = x0 => x1 => Fm$Parser$u64$(x0, x1);

    function Fm$Parser$nat$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3359 = self.idx;
                var $3360 = self.code;
                var $3361 = self.err;
                var $3362 = Parser$Reply$error$($3359, $3360, $3361);
                var $3358 = $3362;
                break;
            case 'Parser.Reply.value':
                var $3363 = self.idx;
                var $3364 = self.code;
                var $3365 = self.val;
                var self = Fm$Parser$spaces($3363)($3364);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3367 = self.idx;
                        var $3368 = self.code;
                        var $3369 = self.err;
                        var $3370 = Parser$Reply$error$($3367, $3368, $3369);
                        var $3366 = $3370;
                        break;
                    case 'Parser.Reply.value':
                        var $3371 = self.idx;
                        var $3372 = self.code;
                        var $3373 = self.val;
                        var self = Parser$nat$($3371, $3372);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3375 = self.idx;
                                var $3376 = self.code;
                                var $3377 = self.err;
                                var $3378 = Parser$Reply$error$($3375, $3376, $3377);
                                var $3374 = $3378;
                                break;
                            case 'Parser.Reply.value':
                                var $3379 = self.idx;
                                var $3380 = self.code;
                                var $3381 = self.val;
                                var self = Fm$Parser$stop$($3365, $3379, $3380);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3383 = self.idx;
                                        var $3384 = self.code;
                                        var $3385 = self.err;
                                        var $3386 = Parser$Reply$error$($3383, $3384, $3385);
                                        var $3382 = $3386;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3387 = self.idx;
                                        var $3388 = self.code;
                                        var $3389 = self.val;
                                        var $3390 = Parser$Reply$value$($3387, $3388, Fm$Term$ori$($3389, Fm$Term$nat$($3381)));
                                        var $3382 = $3390;
                                        break;
                                };
                                var $3374 = $3382;
                                break;
                        };
                        var $3366 = $3374;
                        break;
                };
                var $3358 = $3366;
                break;
        };
        return $3358;
    };
    const Fm$Parser$nat = x0 => x1 => Fm$Parser$nat$(x0, x1);
    const String$eql = a0 => a1 => (a0 === a1);

    function Parser$fail$(_error$2, _idx$3, _code$4) {
        var $3391 = Parser$Reply$error$(_idx$3, _code$4, _error$2);
        return $3391;
    };
    const Parser$fail = x0 => x1 => x2 => Parser$fail$(x0, x1, x2);

    function Fm$Parser$reference$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3393 = self.idx;
                var $3394 = self.code;
                var $3395 = self.err;
                var $3396 = Parser$Reply$error$($3393, $3394, $3395);
                var $3392 = $3396;
                break;
            case 'Parser.Reply.value':
                var $3397 = self.idx;
                var $3398 = self.code;
                var $3399 = self.val;
                var self = Fm$Parser$name1$($3397, $3398);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3401 = self.idx;
                        var $3402 = self.code;
                        var $3403 = self.err;
                        var $3404 = Parser$Reply$error$($3401, $3402, $3403);
                        var $3400 = $3404;
                        break;
                    case 'Parser.Reply.value':
                        var $3405 = self.idx;
                        var $3406 = self.code;
                        var $3407 = self.val;
                        var self = ($3407 === "case");
                        if (self) {
                            var $3409 = Parser$fail("Reserved keyword.");
                            var $3408 = $3409;
                        } else {
                            var self = ($3407 === "do");
                            if (self) {
                                var $3411 = Parser$fail("Reserved keyword.");
                                var $3410 = $3411;
                            } else {
                                var self = ($3407 === "if");
                                if (self) {
                                    var $3413 = Parser$fail("Reserved keyword.");
                                    var $3412 = $3413;
                                } else {
                                    var self = ($3407 === "with");
                                    if (self) {
                                        var $3415 = Parser$fail("Reserved keyword.");
                                        var $3414 = $3415;
                                    } else {
                                        var self = ($3407 === "let");
                                        if (self) {
                                            var $3417 = Parser$fail("Reserved keyword.");
                                            var $3416 = $3417;
                                        } else {
                                            var self = ($3407 === "def");
                                            if (self) {
                                                var $3419 = Parser$fail("Reserved keyword.");
                                                var $3418 = $3419;
                                            } else {
                                                var self = ($3407 === "true");
                                                if (self) {
                                                    var $3421 = (_idx$9 => _code$10 => {
                                                        var $3422 = Parser$Reply$value$(_idx$9, _code$10, Fm$Term$ref$("Bool.true"));
                                                        return $3422;
                                                    });
                                                    var $3420 = $3421;
                                                } else {
                                                    var self = ($3407 === "false");
                                                    if (self) {
                                                        var $3424 = (_idx$9 => _code$10 => {
                                                            var $3425 = Parser$Reply$value$(_idx$9, _code$10, Fm$Term$ref$("Bool.false"));
                                                            return $3425;
                                                        });
                                                        var $3423 = $3424;
                                                    } else {
                                                        var self = ($3407 === "unit");
                                                        if (self) {
                                                            var $3427 = (_idx$9 => _code$10 => {
                                                                var $3428 = Parser$Reply$value$(_idx$9, _code$10, Fm$Term$ref$("Unit.new"));
                                                                return $3428;
                                                            });
                                                            var $3426 = $3427;
                                                        } else {
                                                            var self = ($3407 === "none");
                                                            if (self) {
                                                                var _term$9 = Fm$Term$ref$("Maybe.none");
                                                                var _term$10 = Fm$Term$app$(_term$9, Fm$Term$hol$(Bits$e));
                                                                var $3430 = (_idx$11 => _code$12 => {
                                                                    var $3431 = Parser$Reply$value$(_idx$11, _code$12, _term$10);
                                                                    return $3431;
                                                                });
                                                                var $3429 = $3430;
                                                            } else {
                                                                var self = ($3407 === "refl");
                                                                if (self) {
                                                                    var _term$9 = Fm$Term$ref$("Equal.refl");
                                                                    var _term$10 = Fm$Term$app$(_term$9, Fm$Term$hol$(Bits$e));
                                                                    var _term$11 = Fm$Term$app$(_term$10, Fm$Term$hol$(Bits$e));
                                                                    var $3433 = (_idx$12 => _code$13 => {
                                                                        var $3434 = Parser$Reply$value$(_idx$12, _code$13, _term$11);
                                                                        return $3434;
                                                                    });
                                                                    var $3432 = $3433;
                                                                } else {
                                                                    var $3435 = (_idx$9 => _code$10 => {
                                                                        var self = Fm$Parser$stop$($3399, _idx$9, _code$10);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $3437 = self.idx;
                                                                                var $3438 = self.code;
                                                                                var $3439 = self.err;
                                                                                var $3440 = Parser$Reply$error$($3437, $3438, $3439);
                                                                                var $3436 = $3440;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $3441 = self.idx;
                                                                                var $3442 = self.code;
                                                                                var $3443 = self.val;
                                                                                var $3444 = Parser$Reply$value$($3441, $3442, Fm$Term$ori$($3443, Fm$Term$ref$($3407)));
                                                                                var $3436 = $3444;
                                                                                break;
                                                                        };
                                                                        return $3436;
                                                                    });
                                                                    var $3432 = $3435;
                                                                };
                                                                var $3429 = $3432;
                                                            };
                                                            var $3426 = $3429;
                                                        };
                                                        var $3423 = $3426;
                                                    };
                                                    var $3420 = $3423;
                                                };
                                                var $3418 = $3420;
                                            };
                                            var $3416 = $3418;
                                        };
                                        var $3414 = $3416;
                                    };
                                    var $3412 = $3414;
                                };
                                var $3410 = $3412;
                            };
                            var $3408 = $3410;
                        };
                        var $3408 = $3408($3405)($3406);
                        var $3400 = $3408;
                        break;
                };
                var $3392 = $3400;
                break;
        };
        return $3392;
    };
    const Fm$Parser$reference = x0 => x1 => Fm$Parser$reference$(x0, x1);
    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));

    function Fm$Parser$application$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$text$("(", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3446 = self.idx;
                var $3447 = self.code;
                var $3448 = self.err;
                var $3449 = Parser$Reply$error$($3446, $3447, $3448);
                var $3445 = $3449;
                break;
            case 'Parser.Reply.value':
                var $3450 = self.idx;
                var $3451 = self.code;
                var $3452 = self.val;
                var self = Parser$until1$(Fm$Parser$text(")"), Fm$Parser$item(Fm$Parser$term), $3450, $3451);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3454 = self.idx;
                        var $3455 = self.code;
                        var $3456 = self.err;
                        var $3457 = Parser$Reply$error$($3454, $3455, $3456);
                        var $3453 = $3457;
                        break;
                    case 'Parser.Reply.value':
                        var $3458 = self.idx;
                        var $3459 = self.code;
                        var $3460 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3458, $3459);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3462 = self.idx;
                                var $3463 = self.code;
                                var $3464 = self.err;
                                var $3465 = Parser$Reply$error$($3462, $3463, $3464);
                                var $3461 = $3465;
                                break;
                            case 'Parser.Reply.value':
                                var $3466 = self.idx;
                                var $3467 = self.code;
                                var $3468 = self.val;
                                var _expr$14 = (() => {
                                    var $3471 = _func$2;
                                    var $3472 = $3460;
                                    let _f$15 = $3471;
                                    let _x$14;
                                    while ($3472._ === 'List.cons') {
                                        _x$14 = $3472.head;
                                        var $3471 = Fm$Term$app$(_f$15, _x$14);
                                        _f$15 = $3471;
                                        $3472 = $3472.tail;
                                    }
                                    return _f$15;
                                })();
                                var $3469 = Parser$Reply$value$($3466, $3467, Fm$Term$ori$($3468, _expr$14));
                                var $3461 = $3469;
                                break;
                        };
                        var $3453 = $3461;
                        break;
                };
                var $3445 = $3453;
                break;
        };
        return $3445;
    };
    const Fm$Parser$application = x0 => x1 => x2 => x3 => Fm$Parser$application$(x0, x1, x2, x3);
    const Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{a}"), List$nil))));

    function Parser$spaces_text$(_text$1, _idx$2, _code$3) {
        var self = Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3474 = self.idx;
                var $3475 = self.code;
                var $3476 = self.err;
                var $3477 = Parser$Reply$error$($3474, $3475, $3476);
                var $3473 = $3477;
                break;
            case 'Parser.Reply.value':
                var $3478 = self.idx;
                var $3479 = self.code;
                var $3480 = self.val;
                var $3481 = Parser$text$(_text$1, $3478, $3479);
                var $3473 = $3481;
                break;
        };
        return $3473;
    };
    const Parser$spaces_text = x0 => x1 => x2 => Parser$spaces_text$(x0, x1, x2);

    function Fm$Parser$application$erased$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$get_index$(_idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3483 = self.idx;
                var $3484 = self.code;
                var $3485 = self.err;
                var $3486 = Parser$Reply$error$($3483, $3484, $3485);
                var $3482 = $3486;
                break;
            case 'Parser.Reply.value':
                var $3487 = self.idx;
                var $3488 = self.code;
                var $3489 = self.val;
                var self = Parser$text$("<", $3487, $3488);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3491 = self.idx;
                        var $3492 = self.code;
                        var $3493 = self.err;
                        var $3494 = Parser$Reply$error$($3491, $3492, $3493);
                        var $3490 = $3494;
                        break;
                    case 'Parser.Reply.value':
                        var $3495 = self.idx;
                        var $3496 = self.code;
                        var $3497 = self.val;
                        var self = Parser$until1$(Parser$spaces_text(">"), Fm$Parser$item(Fm$Parser$term), $3495, $3496);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3499 = self.idx;
                                var $3500 = self.code;
                                var $3501 = self.err;
                                var $3502 = Parser$Reply$error$($3499, $3500, $3501);
                                var $3498 = $3502;
                                break;
                            case 'Parser.Reply.value':
                                var $3503 = self.idx;
                                var $3504 = self.code;
                                var $3505 = self.val;
                                var self = Fm$Parser$stop$($3489, $3503, $3504);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3507 = self.idx;
                                        var $3508 = self.code;
                                        var $3509 = self.err;
                                        var $3510 = Parser$Reply$error$($3507, $3508, $3509);
                                        var $3506 = $3510;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3511 = self.idx;
                                        var $3512 = self.code;
                                        var $3513 = self.val;
                                        var _expr$17 = (() => {
                                            var $3516 = _func$2;
                                            var $3517 = $3505;
                                            let _f$18 = $3516;
                                            let _x$17;
                                            while ($3517._ === 'List.cons') {
                                                _x$17 = $3517.head;
                                                var $3516 = Fm$Term$app$(_f$18, _x$17);
                                                _f$18 = $3516;
                                                $3517 = $3517.tail;
                                            }
                                            return _f$18;
                                        })();
                                        var $3514 = Parser$Reply$value$($3511, $3512, Fm$Term$ori$($3513, _expr$17));
                                        var $3506 = $3514;
                                        break;
                                };
                                var $3498 = $3506;
                                break;
                        };
                        var $3490 = $3498;
                        break;
                };
                var $3482 = $3490;
                break;
        };
        return $3482;
    };
    const Fm$Parser$application$erased = x0 => x1 => x2 => x3 => Fm$Parser$application$erased$(x0, x1, x2, x3);

    function Fm$Parser$arrow$(_init$1, _xtyp$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("->", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3519 = self.idx;
                var $3520 = self.code;
                var $3521 = self.err;
                var $3522 = Parser$Reply$error$($3519, $3520, $3521);
                var $3518 = $3522;
                break;
            case 'Parser.Reply.value':
                var $3523 = self.idx;
                var $3524 = self.code;
                var $3525 = self.val;
                var self = Fm$Parser$term$($3523, $3524);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3527 = self.idx;
                        var $3528 = self.code;
                        var $3529 = self.err;
                        var $3530 = Parser$Reply$error$($3527, $3528, $3529);
                        var $3526 = $3530;
                        break;
                    case 'Parser.Reply.value':
                        var $3531 = self.idx;
                        var $3532 = self.code;
                        var $3533 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3531, $3532);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3535 = self.idx;
                                var $3536 = self.code;
                                var $3537 = self.err;
                                var $3538 = Parser$Reply$error$($3535, $3536, $3537);
                                var $3534 = $3538;
                                break;
                            case 'Parser.Reply.value':
                                var $3539 = self.idx;
                                var $3540 = self.code;
                                var $3541 = self.val;
                                var $3542 = Parser$Reply$value$($3539, $3540, Fm$Term$ori$($3541, Fm$Term$all$(Bool$false, "", "", _xtyp$2, (_s$14 => _x$15 => {
                                    var $3543 = $3533;
                                    return $3543;
                                }))));
                                var $3534 = $3542;
                                break;
                        };
                        var $3526 = $3534;
                        break;
                };
                var $3518 = $3526;
                break;
        };
        return $3518;
    };
    const Fm$Parser$arrow = x0 => x1 => x2 => x3 => Fm$Parser$arrow$(x0, x1, x2, x3);

    function Fm$Parser$op$(_sym$1, _ref$2, _init$3, _val0$4, _idx$5, _code$6) {
        var self = Fm$Parser$text$(_sym$1, _idx$5, _code$6);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3545 = self.idx;
                var $3546 = self.code;
                var $3547 = self.err;
                var $3548 = Parser$Reply$error$($3545, $3546, $3547);
                var $3544 = $3548;
                break;
            case 'Parser.Reply.value':
                var $3549 = self.idx;
                var $3550 = self.code;
                var $3551 = self.val;
                var self = Fm$Parser$term$($3549, $3550);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3553 = self.idx;
                        var $3554 = self.code;
                        var $3555 = self.err;
                        var $3556 = Parser$Reply$error$($3553, $3554, $3555);
                        var $3552 = $3556;
                        break;
                    case 'Parser.Reply.value':
                        var $3557 = self.idx;
                        var $3558 = self.code;
                        var $3559 = self.val;
                        var self = Fm$Parser$stop$(_init$3, $3557, $3558);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3561 = self.idx;
                                var $3562 = self.code;
                                var $3563 = self.err;
                                var $3564 = Parser$Reply$error$($3561, $3562, $3563);
                                var $3560 = $3564;
                                break;
                            case 'Parser.Reply.value':
                                var $3565 = self.idx;
                                var $3566 = self.code;
                                var $3567 = self.val;
                                var _term$16 = Fm$Term$ref$(_ref$2);
                                var _term$17 = Fm$Term$app$(_term$16, _val0$4);
                                var _term$18 = Fm$Term$app$(_term$17, $3559);
                                var $3568 = Parser$Reply$value$($3565, $3566, Fm$Term$ori$($3567, _term$18));
                                var $3560 = $3568;
                                break;
                        };
                        var $3552 = $3560;
                        break;
                };
                var $3544 = $3552;
                break;
        };
        return $3544;
    };
    const Fm$Parser$op = x0 => x1 => x2 => x3 => x4 => x5 => Fm$Parser$op$(x0, x1, x2, x3, x4, x5);
    const Fm$Parser$add = Fm$Parser$op("+")("Nat.add");
    const Fm$Parser$sub = Fm$Parser$op("+")("Nat.add");
    const Fm$Parser$mul = Fm$Parser$op("*")("Nat.mul");
    const Fm$Parser$div = Fm$Parser$op("/")("Nat.div");
    const Fm$Parser$mod = Fm$Parser$op("%")("Nat.mod");

    function Fm$Parser$cons$(_init$1, _head$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("&", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3570 = self.idx;
                var $3571 = self.code;
                var $3572 = self.err;
                var $3573 = Parser$Reply$error$($3570, $3571, $3572);
                var $3569 = $3573;
                break;
            case 'Parser.Reply.value':
                var $3574 = self.idx;
                var $3575 = self.code;
                var $3576 = self.val;
                var self = Fm$Parser$term$($3574, $3575);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3578 = self.idx;
                        var $3579 = self.code;
                        var $3580 = self.err;
                        var $3581 = Parser$Reply$error$($3578, $3579, $3580);
                        var $3577 = $3581;
                        break;
                    case 'Parser.Reply.value':
                        var $3582 = self.idx;
                        var $3583 = self.code;
                        var $3584 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3582, $3583);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3586 = self.idx;
                                var $3587 = self.code;
                                var $3588 = self.err;
                                var $3589 = Parser$Reply$error$($3586, $3587, $3588);
                                var $3585 = $3589;
                                break;
                            case 'Parser.Reply.value':
                                var $3590 = self.idx;
                                var $3591 = self.code;
                                var $3592 = self.val;
                                var _term$14 = Fm$Term$ref$("List.cons");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _head$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3584);
                                var self = Fm$Parser$stop$(_init$1, $3590, $3591);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3594 = self.idx;
                                        var $3595 = self.code;
                                        var $3596 = self.err;
                                        var $3597 = Parser$Reply$error$($3594, $3595, $3596);
                                        var $3593 = $3597;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3598 = self.idx;
                                        var $3599 = self.code;
                                        var $3600 = self.val;
                                        var $3601 = Parser$Reply$value$($3598, $3599, Fm$Term$ori$($3600, _term$17));
                                        var $3593 = $3601;
                                        break;
                                };
                                var $3585 = $3593;
                                break;
                        };
                        var $3577 = $3585;
                        break;
                };
                var $3569 = $3577;
                break;
        };
        return $3569;
    };
    const Fm$Parser$cons = x0 => x1 => x2 => x3 => Fm$Parser$cons$(x0, x1, x2, x3);

    function Fm$Parser$concat$(_init$1, _lst0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("++", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3603 = self.idx;
                var $3604 = self.code;
                var $3605 = self.err;
                var $3606 = Parser$Reply$error$($3603, $3604, $3605);
                var $3602 = $3606;
                break;
            case 'Parser.Reply.value':
                var $3607 = self.idx;
                var $3608 = self.code;
                var $3609 = self.val;
                var self = Fm$Parser$term$($3607, $3608);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3611 = self.idx;
                        var $3612 = self.code;
                        var $3613 = self.err;
                        var $3614 = Parser$Reply$error$($3611, $3612, $3613);
                        var $3610 = $3614;
                        break;
                    case 'Parser.Reply.value':
                        var $3615 = self.idx;
                        var $3616 = self.code;
                        var $3617 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3615, $3616);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3619 = self.idx;
                                var $3620 = self.code;
                                var $3621 = self.err;
                                var $3622 = Parser$Reply$error$($3619, $3620, $3621);
                                var $3618 = $3622;
                                break;
                            case 'Parser.Reply.value':
                                var $3623 = self.idx;
                                var $3624 = self.code;
                                var $3625 = self.val;
                                var _term$14 = Fm$Term$ref$("List.concat");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _lst0$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3617);
                                var self = Fm$Parser$stop$(_init$1, $3623, $3624);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3627 = self.idx;
                                        var $3628 = self.code;
                                        var $3629 = self.err;
                                        var $3630 = Parser$Reply$error$($3627, $3628, $3629);
                                        var $3626 = $3630;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3631 = self.idx;
                                        var $3632 = self.code;
                                        var $3633 = self.val;
                                        var $3634 = Parser$Reply$value$($3631, $3632, Fm$Term$ori$($3633, _term$17));
                                        var $3626 = $3634;
                                        break;
                                };
                                var $3618 = $3626;
                                break;
                        };
                        var $3610 = $3618;
                        break;
                };
                var $3602 = $3610;
                break;
        };
        return $3602;
    };
    const Fm$Parser$concat = x0 => x1 => x2 => x3 => Fm$Parser$concat$(x0, x1, x2, x3);

    function Fm$Parser$string_concat$(_init$1, _str0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("|", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3636 = self.idx;
                var $3637 = self.code;
                var $3638 = self.err;
                var $3639 = Parser$Reply$error$($3636, $3637, $3638);
                var $3635 = $3639;
                break;
            case 'Parser.Reply.value':
                var $3640 = self.idx;
                var $3641 = self.code;
                var $3642 = self.val;
                var self = Fm$Parser$term$($3640, $3641);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3644 = self.idx;
                        var $3645 = self.code;
                        var $3646 = self.err;
                        var $3647 = Parser$Reply$error$($3644, $3645, $3646);
                        var $3643 = $3647;
                        break;
                    case 'Parser.Reply.value':
                        var $3648 = self.idx;
                        var $3649 = self.code;
                        var $3650 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3648, $3649);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3652 = self.idx;
                                var $3653 = self.code;
                                var $3654 = self.err;
                                var $3655 = Parser$Reply$error$($3652, $3653, $3654);
                                var $3651 = $3655;
                                break;
                            case 'Parser.Reply.value':
                                var $3656 = self.idx;
                                var $3657 = self.code;
                                var $3658 = self.val;
                                var _term$14 = Fm$Term$ref$("String.concat");
                                var _term$15 = Fm$Term$app$(_term$14, _str0$2);
                                var _term$16 = Fm$Term$app$(_term$15, $3650);
                                var self = Fm$Parser$stop$(_init$1, $3656, $3657);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3660 = self.idx;
                                        var $3661 = self.code;
                                        var $3662 = self.err;
                                        var $3663 = Parser$Reply$error$($3660, $3661, $3662);
                                        var $3659 = $3663;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3664 = self.idx;
                                        var $3665 = self.code;
                                        var $3666 = self.val;
                                        var $3667 = Parser$Reply$value$($3664, $3665, Fm$Term$ori$($3666, _term$16));
                                        var $3659 = $3667;
                                        break;
                                };
                                var $3651 = $3659;
                                break;
                        };
                        var $3643 = $3651;
                        break;
                };
                var $3635 = $3643;
                break;
        };
        return $3635;
    };
    const Fm$Parser$string_concat = x0 => x1 => x2 => x3 => Fm$Parser$string_concat$(x0, x1, x2, x3);

    function Fm$Parser$sigma$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("~", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3669 = self.idx;
                var $3670 = self.code;
                var $3671 = self.err;
                var $3672 = Parser$Reply$error$($3669, $3670, $3671);
                var $3668 = $3672;
                break;
            case 'Parser.Reply.value':
                var $3673 = self.idx;
                var $3674 = self.code;
                var $3675 = self.val;
                var self = Fm$Parser$term$($3673, $3674);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3677 = self.idx;
                        var $3678 = self.code;
                        var $3679 = self.err;
                        var $3680 = Parser$Reply$error$($3677, $3678, $3679);
                        var $3676 = $3680;
                        break;
                    case 'Parser.Reply.value':
                        var $3681 = self.idx;
                        var $3682 = self.code;
                        var $3683 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3681, $3682);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3685 = self.idx;
                                var $3686 = self.code;
                                var $3687 = self.err;
                                var $3688 = Parser$Reply$error$($3685, $3686, $3687);
                                var $3684 = $3688;
                                break;
                            case 'Parser.Reply.value':
                                var $3689 = self.idx;
                                var $3690 = self.code;
                                var $3691 = self.val;
                                var _term$14 = Fm$Term$ref$("Sigma.new");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, Fm$Term$hol$(Bits$e));
                                var _term$17 = Fm$Term$app$(_term$16, _val0$2);
                                var _term$18 = Fm$Term$app$(_term$17, $3683);
                                var $3692 = Parser$Reply$value$($3689, $3690, Fm$Term$ori$($3691, _term$18));
                                var $3684 = $3692;
                                break;
                        };
                        var $3676 = $3684;
                        break;
                };
                var $3668 = $3676;
                break;
        };
        return $3668;
    };
    const Fm$Parser$sigma = x0 => x1 => x2 => x3 => Fm$Parser$sigma$(x0, x1, x2, x3);

    function Fm$Parser$equality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("==", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3694 = self.idx;
                var $3695 = self.code;
                var $3696 = self.err;
                var $3697 = Parser$Reply$error$($3694, $3695, $3696);
                var $3693 = $3697;
                break;
            case 'Parser.Reply.value':
                var $3698 = self.idx;
                var $3699 = self.code;
                var $3700 = self.val;
                var self = Fm$Parser$term$($3698, $3699);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3702 = self.idx;
                        var $3703 = self.code;
                        var $3704 = self.err;
                        var $3705 = Parser$Reply$error$($3702, $3703, $3704);
                        var $3701 = $3705;
                        break;
                    case 'Parser.Reply.value':
                        var $3706 = self.idx;
                        var $3707 = self.code;
                        var $3708 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3706, $3707);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3710 = self.idx;
                                var $3711 = self.code;
                                var $3712 = self.err;
                                var $3713 = Parser$Reply$error$($3710, $3711, $3712);
                                var $3709 = $3713;
                                break;
                            case 'Parser.Reply.value':
                                var $3714 = self.idx;
                                var $3715 = self.code;
                                var $3716 = self.val;
                                var _term$14 = Fm$Term$ref$("Equal");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _val0$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3708);
                                var $3717 = Parser$Reply$value$($3714, $3715, Fm$Term$ori$($3716, _term$17));
                                var $3709 = $3717;
                                break;
                        };
                        var $3701 = $3709;
                        break;
                };
                var $3693 = $3701;
                break;
        };
        return $3693;
    };
    const Fm$Parser$equality = x0 => x1 => x2 => x3 => Fm$Parser$equality$(x0, x1, x2, x3);

    function Fm$Parser$inequality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("!=", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3719 = self.idx;
                var $3720 = self.code;
                var $3721 = self.err;
                var $3722 = Parser$Reply$error$($3719, $3720, $3721);
                var $3718 = $3722;
                break;
            case 'Parser.Reply.value':
                var $3723 = self.idx;
                var $3724 = self.code;
                var $3725 = self.val;
                var self = Fm$Parser$term$($3723, $3724);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3727 = self.idx;
                        var $3728 = self.code;
                        var $3729 = self.err;
                        var $3730 = Parser$Reply$error$($3727, $3728, $3729);
                        var $3726 = $3730;
                        break;
                    case 'Parser.Reply.value':
                        var $3731 = self.idx;
                        var $3732 = self.code;
                        var $3733 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3731, $3732);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3735 = self.idx;
                                var $3736 = self.code;
                                var $3737 = self.err;
                                var $3738 = Parser$Reply$error$($3735, $3736, $3737);
                                var $3734 = $3738;
                                break;
                            case 'Parser.Reply.value':
                                var $3739 = self.idx;
                                var $3740 = self.code;
                                var $3741 = self.val;
                                var _term$14 = Fm$Term$ref$("Equal");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _val0$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3733);
                                var _term$18 = Fm$Term$app$(Fm$Term$ref$("Not"), _term$17);
                                var $3742 = Parser$Reply$value$($3739, $3740, Fm$Term$ori$($3741, _term$18));
                                var $3734 = $3742;
                                break;
                        };
                        var $3726 = $3734;
                        break;
                };
                var $3718 = $3726;
                break;
        };
        return $3718;
    };
    const Fm$Parser$inequality = x0 => x1 => x2 => x3 => Fm$Parser$inequality$(x0, x1, x2, x3);

    function Fm$Parser$rewrite$(_init$1, _subt$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3744 = self.idx;
                var $3745 = self.code;
                var $3746 = self.err;
                var $3747 = Parser$Reply$error$($3744, $3745, $3746);
                var $3743 = $3747;
                break;
            case 'Parser.Reply.value':
                var $3748 = self.idx;
                var $3749 = self.code;
                var $3750 = self.val;
                var self = Fm$Parser$text$("rewrite", $3748, $3749);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3752 = self.idx;
                        var $3753 = self.code;
                        var $3754 = self.err;
                        var $3755 = Parser$Reply$error$($3752, $3753, $3754);
                        var $3751 = $3755;
                        break;
                    case 'Parser.Reply.value':
                        var $3756 = self.idx;
                        var $3757 = self.code;
                        var $3758 = self.val;
                        var self = Fm$Parser$name1$($3756, $3757);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3760 = self.idx;
                                var $3761 = self.code;
                                var $3762 = self.err;
                                var $3763 = Parser$Reply$error$($3760, $3761, $3762);
                                var $3759 = $3763;
                                break;
                            case 'Parser.Reply.value':
                                var $3764 = self.idx;
                                var $3765 = self.code;
                                var $3766 = self.val;
                                var self = Fm$Parser$text$("in", $3764, $3765);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3768 = self.idx;
                                        var $3769 = self.code;
                                        var $3770 = self.err;
                                        var $3771 = Parser$Reply$error$($3768, $3769, $3770);
                                        var $3767 = $3771;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3772 = self.idx;
                                        var $3773 = self.code;
                                        var $3774 = self.val;
                                        var self = Fm$Parser$term$($3772, $3773);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3776 = self.idx;
                                                var $3777 = self.code;
                                                var $3778 = self.err;
                                                var $3779 = Parser$Reply$error$($3776, $3777, $3778);
                                                var $3775 = $3779;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3780 = self.idx;
                                                var $3781 = self.code;
                                                var $3782 = self.val;
                                                var self = Fm$Parser$text$("with", $3780, $3781);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3784 = self.idx;
                                                        var $3785 = self.code;
                                                        var $3786 = self.err;
                                                        var $3787 = Parser$Reply$error$($3784, $3785, $3786);
                                                        var $3783 = $3787;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3788 = self.idx;
                                                        var $3789 = self.code;
                                                        var $3790 = self.val;
                                                        var self = Fm$Parser$term$($3788, $3789);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3792 = self.idx;
                                                                var $3793 = self.code;
                                                                var $3794 = self.err;
                                                                var $3795 = Parser$Reply$error$($3792, $3793, $3794);
                                                                var $3791 = $3795;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3796 = self.idx;
                                                                var $3797 = self.code;
                                                                var $3798 = self.val;
                                                                var self = Fm$Parser$stop$(_init$1, $3796, $3797);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3800 = self.idx;
                                                                        var $3801 = self.code;
                                                                        var $3802 = self.err;
                                                                        var $3803 = Parser$Reply$error$($3800, $3801, $3802);
                                                                        var $3799 = $3803;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3804 = self.idx;
                                                                        var $3805 = self.code;
                                                                        var $3806 = self.val;
                                                                        var _term$29 = Fm$Term$ref$("Equal.rewrite");
                                                                        var _term$30 = Fm$Term$app$(_term$29, Fm$Term$hol$(Bits$e));
                                                                        var _term$31 = Fm$Term$app$(_term$30, Fm$Term$hol$(Bits$e));
                                                                        var _term$32 = Fm$Term$app$(_term$31, Fm$Term$hol$(Bits$e));
                                                                        var _term$33 = Fm$Term$app$(_term$32, $3798);
                                                                        var _term$34 = Fm$Term$app$(_term$33, Fm$Term$lam$($3766, (_x$34 => {
                                                                            var $3808 = $3782;
                                                                            return $3808;
                                                                        })));
                                                                        var _term$35 = Fm$Term$app$(_term$34, _subt$2);
                                                                        var $3807 = Parser$Reply$value$($3804, $3805, Fm$Term$ori$($3806, _term$35));
                                                                        var $3799 = $3807;
                                                                        break;
                                                                };
                                                                var $3791 = $3799;
                                                                break;
                                                        };
                                                        var $3783 = $3791;
                                                        break;
                                                };
                                                var $3775 = $3783;
                                                break;
                                        };
                                        var $3767 = $3775;
                                        break;
                                };
                                var $3759 = $3767;
                                break;
                        };
                        var $3751 = $3759;
                        break;
                };
                var $3743 = $3751;
                break;
        };
        return $3743;
    };
    const Fm$Parser$rewrite = x0 => x1 => x2 => x3 => Fm$Parser$rewrite$(x0, x1, x2, x3);

    function Fm$Term$ann$(_done$1, _term$2, _type$3) {
        var $3809 = ({
            _: 'Fm.Term.ann',
            'done': _done$1,
            'term': _term$2,
            'type': _type$3
        });
        return $3809;
    };
    const Fm$Term$ann = x0 => x1 => x2 => Fm$Term$ann$(x0, x1, x2);

    function Fm$Parser$annotation$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3811 = self.idx;
                var $3812 = self.code;
                var $3813 = self.err;
                var $3814 = Parser$Reply$error$($3811, $3812, $3813);
                var $3810 = $3814;
                break;
            case 'Parser.Reply.value':
                var $3815 = self.idx;
                var $3816 = self.code;
                var $3817 = self.val;
                var self = Fm$Parser$term$($3815, $3816);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3819 = self.idx;
                        var $3820 = self.code;
                        var $3821 = self.err;
                        var $3822 = Parser$Reply$error$($3819, $3820, $3821);
                        var $3818 = $3822;
                        break;
                    case 'Parser.Reply.value':
                        var $3823 = self.idx;
                        var $3824 = self.code;
                        var $3825 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3823, $3824);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3827 = self.idx;
                                var $3828 = self.code;
                                var $3829 = self.err;
                                var $3830 = Parser$Reply$error$($3827, $3828, $3829);
                                var $3826 = $3830;
                                break;
                            case 'Parser.Reply.value':
                                var $3831 = self.idx;
                                var $3832 = self.code;
                                var $3833 = self.val;
                                var $3834 = Parser$Reply$value$($3831, $3832, Fm$Term$ori$($3833, Fm$Term$ann$(Bool$false, _term$2, $3825)));
                                var $3826 = $3834;
                                break;
                        };
                        var $3818 = $3826;
                        break;
                };
                var $3810 = $3818;
                break;
        };
        return $3810;
    };
    const Fm$Parser$annotation = x0 => x1 => x2 => x3 => Fm$Parser$annotation$(x0, x1, x2, x3);

    function Fm$Parser$application$hole$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("!", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3836 = self.idx;
                var $3837 = self.code;
                var $3838 = self.err;
                var $3839 = Parser$Reply$error$($3836, $3837, $3838);
                var $3835 = $3839;
                break;
            case 'Parser.Reply.value':
                var $3840 = self.idx;
                var $3841 = self.code;
                var $3842 = self.val;
                var self = Fm$Parser$stop$(_init$1, $3840, $3841);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3844 = self.idx;
                        var $3845 = self.code;
                        var $3846 = self.err;
                        var $3847 = Parser$Reply$error$($3844, $3845, $3846);
                        var $3843 = $3847;
                        break;
                    case 'Parser.Reply.value':
                        var $3848 = self.idx;
                        var $3849 = self.code;
                        var $3850 = self.val;
                        var $3851 = Parser$Reply$value$($3848, $3849, Fm$Term$ori$($3850, Fm$Term$app$(_term$2, Fm$Term$hol$(Bits$e))));
                        var $3843 = $3851;
                        break;
                };
                var $3835 = $3843;
                break;
        };
        return $3835;
    };
    const Fm$Parser$application$hole = x0 => x1 => x2 => x3 => Fm$Parser$application$hole$(x0, x1, x2, x3);

    function Fm$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4) {
        var Fm$Parser$suffix$ = (_init$1, _term$2, _idx$3, _code$4) => ({
            ctr: 'TCO',
            arg: [_init$1, _term$2, _idx$3, _code$4]
        });
        var Fm$Parser$suffix = _init$1 => _term$2 => _idx$3 => _code$4 => Fm$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4);
        var arg = [_init$1, _term$2, _idx$3, _code$4];
        while (true) {
            let [_init$1, _term$2, _idx$3, _code$4] = arg;
            var R = (() => {
                var _suffix_parser$5 = Parser$first_of$(List$cons$(Fm$Parser$application(_init$1)(_term$2), List$cons$(Fm$Parser$application$erased(_init$1)(_term$2), List$cons$(Fm$Parser$arrow(_init$1)(_term$2), List$cons$(Fm$Parser$add(_init$1)(_term$2), List$cons$(Fm$Parser$sub(_init$1)(_term$2), List$cons$(Fm$Parser$mul(_init$1)(_term$2), List$cons$(Fm$Parser$div(_init$1)(_term$2), List$cons$(Fm$Parser$mod(_init$1)(_term$2), List$cons$(Fm$Parser$cons(_init$1)(_term$2), List$cons$(Fm$Parser$concat(_init$1)(_term$2), List$cons$(Fm$Parser$string_concat(_init$1)(_term$2), List$cons$(Fm$Parser$sigma(_init$1)(_term$2), List$cons$(Fm$Parser$equality(_init$1)(_term$2), List$cons$(Fm$Parser$inequality(_init$1)(_term$2), List$cons$(Fm$Parser$rewrite(_init$1)(_term$2), List$cons$(Fm$Parser$annotation(_init$1)(_term$2), List$cons$(Fm$Parser$application$hole(_init$1)(_term$2), List$nil))))))))))))))))));
                var self = _suffix_parser$5(_idx$3)(_code$4);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3853 = self.idx;
                        var $3854 = self.code;
                        var $3855 = self.err;
                        var $3856 = Parser$Reply$value$(_idx$3, _code$4, _term$2);
                        var $3852 = $3856;
                        break;
                    case 'Parser.Reply.value':
                        var $3857 = self.idx;
                        var $3858 = self.code;
                        var $3859 = self.val;
                        var $3860 = Fm$Parser$suffix$(_init$1, $3859, $3857, $3858);
                        var $3852 = $3860;
                        break;
                };
                return $3852;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Parser$suffix = x0 => x1 => x2 => x3 => Fm$Parser$suffix$(x0, x1, x2, x3);

    function Fm$Parser$term$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3862 = self.idx;
                var $3863 = self.code;
                var $3864 = self.err;
                var $3865 = Parser$Reply$error$($3862, $3863, $3864);
                var $3861 = $3865;
                break;
            case 'Parser.Reply.value':
                var $3866 = self.idx;
                var $3867 = self.code;
                var $3868 = self.val;
                var self = Parser$first_of$(List$cons$(Fm$Parser$type, List$cons$(Fm$Parser$forall, List$cons$(Fm$Parser$lambda, List$cons$(Fm$Parser$lambda$erased, List$cons$(Fm$Parser$lambda$nameless, List$cons$(Fm$Parser$parenthesis, List$cons$(Fm$Parser$letforrange$u32, List$cons$(Fm$Parser$letforin, List$cons$(Fm$Parser$let, List$cons$(Fm$Parser$get, List$cons$(Fm$Parser$def, List$cons$(Fm$Parser$if, List$cons$(Fm$Parser$char, List$cons$(Fm$Parser$string, List$cons$(Fm$Parser$pair, List$cons$(Fm$Parser$sigma$type, List$cons$(Fm$Parser$some, List$cons$(Fm$Parser$apply, List$cons$(Fm$Parser$mirror, List$cons$(Fm$Parser$list, List$cons$(Fm$Parser$log, List$cons$(Fm$Parser$forrange$u32, List$cons$(Fm$Parser$forrange$u32$2, List$cons$(Fm$Parser$forin, List$cons$(Fm$Parser$forin$2, List$cons$(Fm$Parser$do, List$cons$(Fm$Parser$case, List$cons$(Fm$Parser$open, List$cons$(Fm$Parser$goal, List$cons$(Fm$Parser$hole, List$cons$(Fm$Parser$u8, List$cons$(Fm$Parser$u16, List$cons$(Fm$Parser$u32, List$cons$(Fm$Parser$u64, List$cons$(Fm$Parser$nat, List$cons$(Fm$Parser$reference, List$nil)))))))))))))))))))))))))))))))))))))($3866)($3867);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3870 = self.idx;
                        var $3871 = self.code;
                        var $3872 = self.err;
                        var $3873 = Parser$Reply$error$($3870, $3871, $3872);
                        var $3869 = $3873;
                        break;
                    case 'Parser.Reply.value':
                        var $3874 = self.idx;
                        var $3875 = self.code;
                        var $3876 = self.val;
                        var $3877 = Fm$Parser$suffix$($3868, $3876, $3874, $3875);
                        var $3869 = $3877;
                        break;
                };
                var $3861 = $3869;
                break;
        };
        return $3861;
    };
    const Fm$Parser$term = x0 => x1 => Fm$Parser$term$(x0, x1);

    function Fm$Parser$name_term$(_idx$1, _code$2) {
        var self = Fm$Parser$name$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3879 = self.idx;
                var $3880 = self.code;
                var $3881 = self.err;
                var $3882 = Parser$Reply$error$($3879, $3880, $3881);
                var $3878 = $3882;
                break;
            case 'Parser.Reply.value':
                var $3883 = self.idx;
                var $3884 = self.code;
                var $3885 = self.val;
                var self = Fm$Parser$text$(":", $3883, $3884);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3887 = self.idx;
                        var $3888 = self.code;
                        var $3889 = self.err;
                        var $3890 = Parser$Reply$error$($3887, $3888, $3889);
                        var $3886 = $3890;
                        break;
                    case 'Parser.Reply.value':
                        var $3891 = self.idx;
                        var $3892 = self.code;
                        var $3893 = self.val;
                        var self = Fm$Parser$term$($3891, $3892);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3895 = self.idx;
                                var $3896 = self.code;
                                var $3897 = self.err;
                                var $3898 = Parser$Reply$error$($3895, $3896, $3897);
                                var $3894 = $3898;
                                break;
                            case 'Parser.Reply.value':
                                var $3899 = self.idx;
                                var $3900 = self.code;
                                var $3901 = self.val;
                                var $3902 = Parser$Reply$value$($3899, $3900, Pair$new$($3885, $3901));
                                var $3894 = $3902;
                                break;
                        };
                        var $3886 = $3894;
                        break;
                };
                var $3878 = $3886;
                break;
        };
        return $3878;
    };
    const Fm$Parser$name_term = x0 => x1 => Fm$Parser$name_term$(x0, x1);

    function Fm$Binder$new$(_eras$1, _name$2, _term$3) {
        var $3903 = ({
            _: 'Fm.Binder.new',
            'eras': _eras$1,
            'name': _name$2,
            'term': _term$3
        });
        return $3903;
    };
    const Fm$Binder$new = x0 => x1 => x2 => Fm$Binder$new$(x0, x1, x2);

    function Fm$Parser$binder$homo$(_eras$1, _idx$2, _code$3) {
        var self = Fm$Parser$text$((() => {
            var self = _eras$1;
            if (self) {
                var $3905 = "<";
                return $3905;
            } else {
                var $3906 = "(";
                return $3906;
            };
        })(), _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3907 = self.idx;
                var $3908 = self.code;
                var $3909 = self.err;
                var $3910 = Parser$Reply$error$($3907, $3908, $3909);
                var $3904 = $3910;
                break;
            case 'Parser.Reply.value':
                var $3911 = self.idx;
                var $3912 = self.code;
                var $3913 = self.val;
                var self = Parser$until1$(Fm$Parser$text((() => {
                    var self = _eras$1;
                    if (self) {
                        var $3915 = ">";
                        return $3915;
                    } else {
                        var $3916 = ")";
                        return $3916;
                    };
                })()), Fm$Parser$item(Fm$Parser$name_term), $3911, $3912);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3917 = self.idx;
                        var $3918 = self.code;
                        var $3919 = self.err;
                        var $3920 = Parser$Reply$error$($3917, $3918, $3919);
                        var $3914 = $3920;
                        break;
                    case 'Parser.Reply.value':
                        var $3921 = self.idx;
                        var $3922 = self.code;
                        var $3923 = self.val;
                        var $3924 = Parser$Reply$value$($3921, $3922, List$mapped$($3923, (_pair$10 => {
                            var self = _pair$10;
                            switch (self._) {
                                case 'Pair.new':
                                    var $3926 = self.fst;
                                    var $3927 = self.snd;
                                    var $3928 = Fm$Binder$new$(_eras$1, $3926, $3927);
                                    var $3925 = $3928;
                                    break;
                            };
                            return $3925;
                        })));
                        var $3914 = $3924;
                        break;
                };
                var $3904 = $3914;
                break;
        };
        return $3904;
    };
    const Fm$Parser$binder$homo = x0 => x1 => x2 => Fm$Parser$binder$homo$(x0, x1, x2);

    function List$concat$(_as$2, _bs$3) {
        var self = _as$2;
        switch (self._) {
            case 'List.nil':
                var $3930 = _bs$3;
                var $3929 = $3930;
                break;
            case 'List.cons':
                var $3931 = self.head;
                var $3932 = self.tail;
                var $3933 = List$cons$($3931, List$concat$($3932, _bs$3));
                var $3929 = $3933;
                break;
        };
        return $3929;
    };
    const List$concat = x0 => x1 => List$concat$(x0, x1);

    function List$flatten$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.nil':
                var $3935 = List$nil;
                var $3934 = $3935;
                break;
            case 'List.cons':
                var $3936 = self.head;
                var $3937 = self.tail;
                var $3938 = List$concat$($3936, List$flatten$($3937));
                var $3934 = $3938;
                break;
        };
        return $3934;
    };
    const List$flatten = x0 => List$flatten$(x0);

    function Fm$Parser$binder$(_idx$1, _code$2) {
        var self = Parser$many1$(Parser$first_of$(List$cons$(Fm$Parser$binder$homo(Bool$true), List$cons$(Fm$Parser$binder$homo(Bool$false), List$nil))), _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3940 = self.idx;
                var $3941 = self.code;
                var $3942 = self.err;
                var $3943 = Parser$Reply$error$($3940, $3941, $3942);
                var $3939 = $3943;
                break;
            case 'Parser.Reply.value':
                var $3944 = self.idx;
                var $3945 = self.code;
                var $3946 = self.val;
                var $3947 = Parser$Reply$value$($3944, $3945, List$flatten$($3946));
                var $3939 = $3947;
                break;
        };
        return $3939;
    };
    const Fm$Parser$binder = x0 => x1 => Fm$Parser$binder$(x0, x1);
    const List$length = a0 => (list_length(a0));

    function Fm$Parser$make_forall$(_binds$1, _body$2) {
        var self = _binds$1;
        switch (self._) {
            case 'List.nil':
                var $3949 = _body$2;
                var $3948 = $3949;
                break;
            case 'List.cons':
                var $3950 = self.head;
                var $3951 = self.tail;
                var self = $3950;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $3953 = self.eras;
                        var $3954 = self.name;
                        var $3955 = self.term;
                        var $3956 = Fm$Term$all$($3953, "", $3954, $3955, (_s$8 => _x$9 => {
                            var $3957 = Fm$Parser$make_forall$($3951, _body$2);
                            return $3957;
                        }));
                        var $3952 = $3956;
                        break;
                };
                var $3948 = $3952;
                break;
        };
        return $3948;
    };
    const Fm$Parser$make_forall = x0 => x1 => Fm$Parser$make_forall$(x0, x1);

    function List$at$(_index$2, _list$3) {
        var List$at$ = (_index$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_index$2, _list$3]
        });
        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);
        var arg = [_index$2, _list$3];
        while (true) {
            let [_index$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.nil':
                        var $3958 = Maybe$none;
                        return $3958;
                    case 'List.cons':
                        var $3959 = self.head;
                        var $3960 = self.tail;
                        var self = _index$2;
                        if (self === 0n) {
                            var $3962 = Maybe$some$($3959);
                            var $3961 = $3962;
                        } else {
                            var $3963 = (self - 1n);
                            var $3964 = List$at$($3963, $3960);
                            var $3961 = $3964;
                        };
                        return $3961;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$at = x0 => x1 => List$at$(x0, x1);

    function List$at_last$(_index$2, _list$3) {
        var $3965 = List$at$(_index$2, List$reverse$(_list$3));
        return $3965;
    };
    const List$at_last = x0 => x1 => List$at_last$(x0, x1);

    function Fm$Term$var$(_name$1, _indx$2) {
        var $3966 = ({
            _: 'Fm.Term.var',
            'name': _name$1,
            'indx': _indx$2
        });
        return $3966;
    };
    const Fm$Term$var = x0 => x1 => Fm$Term$var$(x0, x1);

    function Fm$Context$get_name_skips$(_name$1) {
        var self = _name$1;
        if (self.length === 0) {
            var $3968 = Pair$new$("", 0n);
            var $3967 = $3968;
        } else {
            var $3969 = self.charCodeAt(0);
            var $3970 = self.slice(1);
            var _name_skips$4 = Fm$Context$get_name_skips$($3970);
            var self = _name_skips$4;
            switch (self._) {
                case 'Pair.new':
                    var $3972 = self.fst;
                    var $3973 = self.snd;
                    var self = ($3969 === 94);
                    if (self) {
                        var $3975 = Pair$new$($3972, Nat$succ$($3973));
                        var $3974 = $3975;
                    } else {
                        var $3976 = Pair$new$(String$cons$($3969, $3972), $3973);
                        var $3974 = $3976;
                    };
                    var $3971 = $3974;
                    break;
            };
            var $3967 = $3971;
        };
        return $3967;
    };
    const Fm$Context$get_name_skips = x0 => Fm$Context$get_name_skips$(x0);

    function Fm$Name$eql$(_a$1, _b$2) {
        var $3977 = (_a$1 === _b$2);
        return $3977;
    };
    const Fm$Name$eql = x0 => x1 => Fm$Name$eql$(x0, x1);

    function Fm$Context$find$go$(_name$1, _skip$2, _ctx$3) {
        var Fm$Context$find$go$ = (_name$1, _skip$2, _ctx$3) => ({
            ctr: 'TCO',
            arg: [_name$1, _skip$2, _ctx$3]
        });
        var Fm$Context$find$go = _name$1 => _skip$2 => _ctx$3 => Fm$Context$find$go$(_name$1, _skip$2, _ctx$3);
        var arg = [_name$1, _skip$2, _ctx$3];
        while (true) {
            let [_name$1, _skip$2, _ctx$3] = arg;
            var R = (() => {
                var self = _ctx$3;
                switch (self._) {
                    case 'List.nil':
                        var $3978 = Maybe$none;
                        return $3978;
                    case 'List.cons':
                        var $3979 = self.head;
                        var $3980 = self.tail;
                        var self = $3979;
                        switch (self._) {
                            case 'Pair.new':
                                var $3982 = self.fst;
                                var $3983 = self.snd;
                                var self = Fm$Name$eql$(_name$1, $3982);
                                if (self) {
                                    var self = _skip$2;
                                    if (self === 0n) {
                                        var $3986 = Maybe$some$($3983);
                                        var $3985 = $3986;
                                    } else {
                                        var $3987 = (self - 1n);
                                        var $3988 = Fm$Context$find$go$(_name$1, $3987, $3980);
                                        var $3985 = $3988;
                                    };
                                    var $3984 = $3985;
                                } else {
                                    var $3989 = Fm$Context$find$go$(_name$1, _skip$2, $3980);
                                    var $3984 = $3989;
                                };
                                var $3981 = $3984;
                                break;
                        };
                        return $3981;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Context$find$go = x0 => x1 => x2 => Fm$Context$find$go$(x0, x1, x2);

    function Fm$Context$find$(_name$1, _ctx$2) {
        var self = Fm$Context$get_name_skips$(_name$1);
        switch (self._) {
            case 'Pair.new':
                var $3991 = self.fst;
                var $3992 = self.snd;
                var $3993 = Fm$Context$find$go$($3991, $3992, _ctx$2);
                var $3990 = $3993;
                break;
        };
        return $3990;
    };
    const Fm$Context$find = x0 => x1 => Fm$Context$find$(x0, x1);

    function Fm$Path$o$(_path$1, _x$2) {
        var $3994 = _path$1((_x$2 + '0'));
        return $3994;
    };
    const Fm$Path$o = x0 => x1 => Fm$Path$o$(x0, x1);

    function Fm$Path$i$(_path$1, _x$2) {
        var $3995 = _path$1((_x$2 + '1'));
        return $3995;
    };
    const Fm$Path$i = x0 => x1 => Fm$Path$i$(x0, x1);

    function Fm$Path$to_bits$(_path$1) {
        var $3996 = _path$1(Bits$e);
        return $3996;
    };
    const Fm$Path$to_bits = x0 => Fm$Path$to_bits$(x0);

    function Fm$Term$bind$(_vars$1, _path$2, _term$3) {
        var self = _term$3;
        switch (self._) {
            case 'Fm.Term.var':
                var $3998 = self.name;
                var $3999 = self.indx;
                var self = List$at_last$($3999, _vars$1);
                switch (self._) {
                    case 'Maybe.none':
                        var $4001 = Fm$Term$var$($3998, $3999);
                        var $4000 = $4001;
                        break;
                    case 'Maybe.some':
                        var $4002 = self.value;
                        var $4003 = Pair$snd$($4002);
                        var $4000 = $4003;
                        break;
                };
                var $3997 = $4000;
                break;
            case 'Fm.Term.ref':
                var $4004 = self.name;
                var self = Fm$Context$find$($4004, _vars$1);
                switch (self._) {
                    case 'Maybe.none':
                        var $4006 = Fm$Term$ref$($4004);
                        var $4005 = $4006;
                        break;
                    case 'Maybe.some':
                        var $4007 = self.value;
                        var $4008 = $4007;
                        var $4005 = $4008;
                        break;
                };
                var $3997 = $4005;
                break;
            case 'Fm.Term.typ':
                var $4009 = Fm$Term$typ;
                var $3997 = $4009;
                break;
            case 'Fm.Term.all':
                var $4010 = self.eras;
                var $4011 = self.self;
                var $4012 = self.name;
                var $4013 = self.xtyp;
                var $4014 = self.body;
                var _vlen$9 = (list_length(_vars$1));
                var $4015 = Fm$Term$all$($4010, $4011, $4012, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4013), (_s$10 => _x$11 => {
                    var $4016 = Fm$Term$bind$(List$cons$(Pair$new$($4012, _x$11), List$cons$(Pair$new$($4011, _s$10), _vars$1)), Fm$Path$i(_path$2), $4014(Fm$Term$var$($4011, _vlen$9))(Fm$Term$var$($4012, Nat$succ$(_vlen$9))));
                    return $4016;
                }));
                var $3997 = $4015;
                break;
            case 'Fm.Term.lam':
                var $4017 = self.name;
                var $4018 = self.body;
                var _vlen$6 = (list_length(_vars$1));
                var $4019 = Fm$Term$lam$($4017, (_x$7 => {
                    var $4020 = Fm$Term$bind$(List$cons$(Pair$new$($4017, _x$7), _vars$1), Fm$Path$o(_path$2), $4018(Fm$Term$var$($4017, _vlen$6)));
                    return $4020;
                }));
                var $3997 = $4019;
                break;
            case 'Fm.Term.app':
                var $4021 = self.func;
                var $4022 = self.argm;
                var $4023 = Fm$Term$app$(Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4021), Fm$Term$bind$(_vars$1, Fm$Path$i(_path$2), $4022));
                var $3997 = $4023;
                break;
            case 'Fm.Term.let':
                var $4024 = self.name;
                var $4025 = self.expr;
                var $4026 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $4027 = Fm$Term$let$($4024, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4025), (_x$8 => {
                    var $4028 = Fm$Term$bind$(List$cons$(Pair$new$($4024, _x$8), _vars$1), Fm$Path$i(_path$2), $4026(Fm$Term$var$($4024, _vlen$7)));
                    return $4028;
                }));
                var $3997 = $4027;
                break;
            case 'Fm.Term.def':
                var $4029 = self.name;
                var $4030 = self.expr;
                var $4031 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $4032 = Fm$Term$def$($4029, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4030), (_x$8 => {
                    var $4033 = Fm$Term$bind$(List$cons$(Pair$new$($4029, _x$8), _vars$1), Fm$Path$i(_path$2), $4031(Fm$Term$var$($4029, _vlen$7)));
                    return $4033;
                }));
                var $3997 = $4032;
                break;
            case 'Fm.Term.ann':
                var $4034 = self.done;
                var $4035 = self.term;
                var $4036 = self.type;
                var $4037 = Fm$Term$ann$($4034, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4035), Fm$Term$bind$(_vars$1, Fm$Path$i(_path$2), $4036));
                var $3997 = $4037;
                break;
            case 'Fm.Term.gol':
                var $4038 = self.name;
                var $4039 = self.dref;
                var $4040 = self.verb;
                var $4041 = Fm$Term$gol$($4038, $4039, $4040);
                var $3997 = $4041;
                break;
            case 'Fm.Term.hol':
                var $4042 = self.path;
                var $4043 = Fm$Term$hol$(Fm$Path$to_bits$(_path$2));
                var $3997 = $4043;
                break;
            case 'Fm.Term.nat':
                var $4044 = self.natx;
                var $4045 = Fm$Term$nat$($4044);
                var $3997 = $4045;
                break;
            case 'Fm.Term.chr':
                var $4046 = self.chrx;
                var $4047 = Fm$Term$chr$($4046);
                var $3997 = $4047;
                break;
            case 'Fm.Term.str':
                var $4048 = self.strx;
                var $4049 = Fm$Term$str$($4048);
                var $3997 = $4049;
                break;
            case 'Fm.Term.cse':
                var $4050 = self.path;
                var $4051 = self.expr;
                var $4052 = self.name;
                var $4053 = self.with;
                var $4054 = self.cses;
                var $4055 = self.moti;
                var _expr$10 = Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4051);
                var _name$11 = $4052;
                var _wyth$12 = $4053;
                var _cses$13 = $4054;
                var _moti$14 = $4055;
                var $4056 = Fm$Term$cse$(Fm$Path$to_bits$(_path$2), _expr$10, _name$11, _wyth$12, _cses$13, _moti$14);
                var $3997 = $4056;
                break;
            case 'Fm.Term.ori':
                var $4057 = self.orig;
                var $4058 = self.expr;
                var $4059 = Fm$Term$ori$($4057, Fm$Term$bind$(_vars$1, _path$2, $4058));
                var $3997 = $4059;
                break;
        };
        return $3997;
    };
    const Fm$Term$bind = x0 => x1 => x2 => Fm$Term$bind$(x0, x1, x2);
    const Fm$Status$done = ({
        _: 'Fm.Status.done'
    });

    function Fm$define$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _done$9, _defs$10) {
        var self = _done$9;
        if (self) {
            var $4061 = Fm$Status$done;
            var _stat$11 = $4061;
        } else {
            var $4062 = Fm$Status$init;
            var _stat$11 = $4062;
        };
        var $4060 = Fm$set$(_name$4, Fm$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _stat$11), _defs$10);
        return $4060;
    };
    const Fm$define = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => Fm$define$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);

    function Fm$Parser$file$def$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Fm$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4064 = self.idx;
                var $4065 = self.code;
                var $4066 = self.err;
                var $4067 = Parser$Reply$error$($4064, $4065, $4066);
                var $4063 = $4067;
                break;
            case 'Parser.Reply.value':
                var $4068 = self.idx;
                var $4069 = self.code;
                var $4070 = self.val;
                var self = Fm$Parser$name1$($4068, $4069);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4072 = self.idx;
                        var $4073 = self.code;
                        var $4074 = self.err;
                        var $4075 = Parser$Reply$error$($4072, $4073, $4074);
                        var $4071 = $4075;
                        break;
                    case 'Parser.Reply.value':
                        var $4076 = self.idx;
                        var $4077 = self.code;
                        var $4078 = self.val;
                        var self = Parser$many$(Fm$Parser$binder)($4076)($4077);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4080 = self.idx;
                                var $4081 = self.code;
                                var $4082 = self.err;
                                var $4083 = Parser$Reply$error$($4080, $4081, $4082);
                                var $4079 = $4083;
                                break;
                            case 'Parser.Reply.value':
                                var $4084 = self.idx;
                                var $4085 = self.code;
                                var $4086 = self.val;
                                var _args$15 = List$flatten$($4086);
                                var self = Fm$Parser$text$(":", $4084, $4085);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4088 = self.idx;
                                        var $4089 = self.code;
                                        var $4090 = self.err;
                                        var $4091 = Parser$Reply$error$($4088, $4089, $4090);
                                        var $4087 = $4091;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4092 = self.idx;
                                        var $4093 = self.code;
                                        var $4094 = self.val;
                                        var self = Fm$Parser$term$($4092, $4093);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4096 = self.idx;
                                                var $4097 = self.code;
                                                var $4098 = self.err;
                                                var $4099 = Parser$Reply$error$($4096, $4097, $4098);
                                                var $4095 = $4099;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4100 = self.idx;
                                                var $4101 = self.code;
                                                var $4102 = self.val;
                                                var self = Fm$Parser$term$($4100, $4101);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4104 = self.idx;
                                                        var $4105 = self.code;
                                                        var $4106 = self.err;
                                                        var $4107 = Parser$Reply$error$($4104, $4105, $4106);
                                                        var $4103 = $4107;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4108 = self.idx;
                                                        var $4109 = self.code;
                                                        var $4110 = self.val;
                                                        var self = Fm$Parser$stop$($4070, $4108, $4109);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $4112 = self.idx;
                                                                var $4113 = self.code;
                                                                var $4114 = self.err;
                                                                var $4115 = Parser$Reply$error$($4112, $4113, $4114);
                                                                var $4111 = $4115;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $4116 = self.idx;
                                                                var $4117 = self.code;
                                                                var $4118 = self.val;
                                                                var _arit$28 = (list_length(_args$15));
                                                                var _type$29 = Fm$Parser$make_forall$(_args$15, $4102);
                                                                var _term$30 = Fm$Parser$make_lambda$(List$mapped$(_args$15, (_x$30 => {
                                                                    var self = _x$30;
                                                                    switch (self._) {
                                                                        case 'Fm.Binder.new':
                                                                            var $4121 = self.eras;
                                                                            var $4122 = self.name;
                                                                            var $4123 = self.term;
                                                                            var $4124 = $4122;
                                                                            var $4120 = $4124;
                                                                            break;
                                                                    };
                                                                    return $4120;
                                                                })), $4110);
                                                                var _type$31 = Fm$Term$bind$(List$nil, (_x$31 => {
                                                                    var $4125 = (_x$31 + '1');
                                                                    return $4125;
                                                                }), _type$29);
                                                                var _term$32 = Fm$Term$bind$(List$nil, (_x$32 => {
                                                                    var $4126 = (_x$32 + '0');
                                                                    return $4126;
                                                                }), _term$30);
                                                                var _defs$33 = Fm$define$(_file$1, _code$2, $4118, $4078, _term$32, _type$31, Bool$false, _arit$28, Bool$false, _defs$3);
                                                                var $4119 = Parser$Reply$value$($4116, $4117, _defs$33);
                                                                var $4111 = $4119;
                                                                break;
                                                        };
                                                        var $4103 = $4111;
                                                        break;
                                                };
                                                var $4095 = $4103;
                                                break;
                                        };
                                        var $4087 = $4095;
                                        break;
                                };
                                var $4079 = $4087;
                                break;
                        };
                        var $4071 = $4079;
                        break;
                };
                var $4063 = $4071;
                break;
        };
        return $4063;
    };
    const Fm$Parser$file$def = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$def$(x0, x1, x2, x3, x4);

    function Maybe$default$(_a$2, _m$3) {
        var self = _m$3;
        switch (self._) {
            case 'Maybe.none':
                var $4128 = _a$2;
                var $4127 = $4128;
                break;
            case 'Maybe.some':
                var $4129 = self.value;
                var $4130 = $4129;
                var $4127 = $4130;
                break;
        };
        return $4127;
    };
    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);

    function Fm$Constructor$new$(_name$1, _args$2, _inds$3) {
        var $4131 = ({
            _: 'Fm.Constructor.new',
            'name': _name$1,
            'args': _args$2,
            'inds': _inds$3
        });
        return $4131;
    };
    const Fm$Constructor$new = x0 => x1 => x2 => Fm$Constructor$new$(x0, x1, x2);

    function Fm$Parser$constructor$(_namespace$1, _idx$2, _code$3) {
        var self = Fm$Parser$name1$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4133 = self.idx;
                var $4134 = self.code;
                var $4135 = self.err;
                var $4136 = Parser$Reply$error$($4133, $4134, $4135);
                var $4132 = $4136;
                break;
            case 'Parser.Reply.value':
                var $4137 = self.idx;
                var $4138 = self.code;
                var $4139 = self.val;
                var self = Parser$maybe$(Fm$Parser$binder, $4137, $4138);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4141 = self.idx;
                        var $4142 = self.code;
                        var $4143 = self.err;
                        var $4144 = Parser$Reply$error$($4141, $4142, $4143);
                        var $4140 = $4144;
                        break;
                    case 'Parser.Reply.value':
                        var $4145 = self.idx;
                        var $4146 = self.code;
                        var $4147 = self.val;
                        var self = Parser$maybe$((_idx$10 => _code$11 => {
                            var self = Fm$Parser$text$("~", _idx$10, _code$11);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4150 = self.idx;
                                    var $4151 = self.code;
                                    var $4152 = self.err;
                                    var $4153 = Parser$Reply$error$($4150, $4151, $4152);
                                    var $4149 = $4153;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4154 = self.idx;
                                    var $4155 = self.code;
                                    var $4156 = self.val;
                                    var $4157 = Fm$Parser$binder$($4154, $4155);
                                    var $4149 = $4157;
                                    break;
                            };
                            return $4149;
                        }), $4145, $4146);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4158 = self.idx;
                                var $4159 = self.code;
                                var $4160 = self.err;
                                var $4161 = Parser$Reply$error$($4158, $4159, $4160);
                                var $4148 = $4161;
                                break;
                            case 'Parser.Reply.value':
                                var $4162 = self.idx;
                                var $4163 = self.code;
                                var $4164 = self.val;
                                var _args$13 = Maybe$default$(List$nil, $4147);
                                var _inds$14 = Maybe$default$(List$nil, $4164);
                                var $4165 = Parser$Reply$value$($4162, $4163, Fm$Constructor$new$($4139, _args$13, _inds$14));
                                var $4148 = $4165;
                                break;
                        };
                        var $4140 = $4148;
                        break;
                };
                var $4132 = $4140;
                break;
        };
        return $4132;
    };
    const Fm$Parser$constructor = x0 => x1 => x2 => Fm$Parser$constructor$(x0, x1, x2);

    function Fm$Datatype$new$(_name$1, _pars$2, _inds$3, _ctrs$4) {
        var $4166 = ({
            _: 'Fm.Datatype.new',
            'name': _name$1,
            'pars': _pars$2,
            'inds': _inds$3,
            'ctrs': _ctrs$4
        });
        return $4166;
    };
    const Fm$Datatype$new = x0 => x1 => x2 => x3 => Fm$Datatype$new$(x0, x1, x2, x3);

    function Fm$Parser$datatype$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("type ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4168 = self.idx;
                var $4169 = self.code;
                var $4170 = self.err;
                var $4171 = Parser$Reply$error$($4168, $4169, $4170);
                var $4167 = $4171;
                break;
            case 'Parser.Reply.value':
                var $4172 = self.idx;
                var $4173 = self.code;
                var $4174 = self.val;
                var self = Fm$Parser$name1$($4172, $4173);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4176 = self.idx;
                        var $4177 = self.code;
                        var $4178 = self.err;
                        var $4179 = Parser$Reply$error$($4176, $4177, $4178);
                        var $4175 = $4179;
                        break;
                    case 'Parser.Reply.value':
                        var $4180 = self.idx;
                        var $4181 = self.code;
                        var $4182 = self.val;
                        var self = Parser$maybe$(Fm$Parser$binder, $4180, $4181);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4184 = self.idx;
                                var $4185 = self.code;
                                var $4186 = self.err;
                                var $4187 = Parser$Reply$error$($4184, $4185, $4186);
                                var $4183 = $4187;
                                break;
                            case 'Parser.Reply.value':
                                var $4188 = self.idx;
                                var $4189 = self.code;
                                var $4190 = self.val;
                                var self = Parser$maybe$((_idx$12 => _code$13 => {
                                    var self = Fm$Parser$text$("~", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4193 = self.idx;
                                            var $4194 = self.code;
                                            var $4195 = self.err;
                                            var $4196 = Parser$Reply$error$($4193, $4194, $4195);
                                            var $4192 = $4196;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4197 = self.idx;
                                            var $4198 = self.code;
                                            var $4199 = self.val;
                                            var $4200 = Fm$Parser$binder$($4197, $4198);
                                            var $4192 = $4200;
                                            break;
                                    };
                                    return $4192;
                                }), $4188, $4189);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4201 = self.idx;
                                        var $4202 = self.code;
                                        var $4203 = self.err;
                                        var $4204 = Parser$Reply$error$($4201, $4202, $4203);
                                        var $4191 = $4204;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4205 = self.idx;
                                        var $4206 = self.code;
                                        var $4207 = self.val;
                                        var _pars$15 = Maybe$default$(List$nil, $4190);
                                        var _inds$16 = Maybe$default$(List$nil, $4207);
                                        var self = Fm$Parser$text$("{", $4205, $4206);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4209 = self.idx;
                                                var $4210 = self.code;
                                                var $4211 = self.err;
                                                var $4212 = Parser$Reply$error$($4209, $4210, $4211);
                                                var $4208 = $4212;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4213 = self.idx;
                                                var $4214 = self.code;
                                                var $4215 = self.val;
                                                var self = Parser$until$(Fm$Parser$text("}"), Fm$Parser$item(Fm$Parser$constructor($4182)))($4213)($4214);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4217 = self.idx;
                                                        var $4218 = self.code;
                                                        var $4219 = self.err;
                                                        var $4220 = Parser$Reply$error$($4217, $4218, $4219);
                                                        var $4216 = $4220;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4221 = self.idx;
                                                        var $4222 = self.code;
                                                        var $4223 = self.val;
                                                        var $4224 = Parser$Reply$value$($4221, $4222, Fm$Datatype$new$($4182, _pars$15, _inds$16, $4223));
                                                        var $4216 = $4224;
                                                        break;
                                                };
                                                var $4208 = $4216;
                                                break;
                                        };
                                        var $4191 = $4208;
                                        break;
                                };
                                var $4183 = $4191;
                                break;
                        };
                        var $4175 = $4183;
                        break;
                };
                var $4167 = $4175;
                break;
        };
        return $4167;
    };
    const Fm$Parser$datatype = x0 => x1 => Fm$Parser$datatype$(x0, x1);

    function Fm$Datatype$build_term$motive$go$(_type$1, _name$2, _inds$3) {
        var self = _inds$3;
        switch (self._) {
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Fm.Datatype.new':
                        var $4227 = self.name;
                        var $4228 = self.pars;
                        var $4229 = self.inds;
                        var $4230 = self.ctrs;
                        var _slf$8 = Fm$Term$ref$(_name$2);
                        var _slf$9 = (() => {
                            var $4233 = _slf$8;
                            var $4234 = $4228;
                            let _slf$10 = $4233;
                            let _var$9;
                            while ($4234._ === 'List.cons') {
                                _var$9 = $4234.head;
                                var $4233 = Fm$Term$app$(_slf$10, Fm$Term$ref$((() => {
                                    var self = _var$9;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4235 = self.eras;
                                            var $4236 = self.name;
                                            var $4237 = self.term;
                                            var $4238 = $4236;
                                            return $4238;
                                    };
                                })()));
                                _slf$10 = $4233;
                                $4234 = $4234.tail;
                            }
                            return _slf$10;
                        })();
                        var _slf$10 = (() => {
                            var $4240 = _slf$9;
                            var $4241 = $4229;
                            let _slf$11 = $4240;
                            let _var$10;
                            while ($4241._ === 'List.cons') {
                                _var$10 = $4241.head;
                                var $4240 = Fm$Term$app$(_slf$11, Fm$Term$ref$((() => {
                                    var self = _var$10;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4242 = self.eras;
                                            var $4243 = self.name;
                                            var $4244 = self.term;
                                            var $4245 = $4243;
                                            return $4245;
                                    };
                                })()));
                                _slf$11 = $4240;
                                $4241 = $4241.tail;
                            }
                            return _slf$11;
                        })();
                        var $4231 = Fm$Term$all$(Bool$false, "", "", _slf$10, (_s$11 => _x$12 => {
                            var $4246 = Fm$Term$typ;
                            return $4246;
                        }));
                        var $4226 = $4231;
                        break;
                };
                var $4225 = $4226;
                break;
            case 'List.cons':
                var $4247 = self.head;
                var $4248 = self.tail;
                var self = $4247;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4250 = self.eras;
                        var $4251 = self.name;
                        var $4252 = self.term;
                        var $4253 = Fm$Term$all$($4250, "", $4251, $4252, (_s$9 => _x$10 => {
                            var $4254 = Fm$Datatype$build_term$motive$go$(_type$1, _name$2, $4248);
                            return $4254;
                        }));
                        var $4249 = $4253;
                        break;
                };
                var $4225 = $4249;
                break;
        };
        return $4225;
    };
    const Fm$Datatype$build_term$motive$go = x0 => x1 => x2 => Fm$Datatype$build_term$motive$go$(x0, x1, x2);

    function Fm$Datatype$build_term$motive$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4256 = self.name;
                var $4257 = self.pars;
                var $4258 = self.inds;
                var $4259 = self.ctrs;
                var $4260 = Fm$Datatype$build_term$motive$go$(_type$1, $4256, $4258);
                var $4255 = $4260;
                break;
        };
        return $4255;
    };
    const Fm$Datatype$build_term$motive = x0 => Fm$Datatype$build_term$motive$(x0);

    function Fm$Datatype$build_term$constructor$go$(_type$1, _ctor$2, _args$3) {
        var self = _args$3;
        switch (self._) {
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Fm.Datatype.new':
                        var $4263 = self.name;
                        var $4264 = self.pars;
                        var $4265 = self.inds;
                        var $4266 = self.ctrs;
                        var self = _ctor$2;
                        switch (self._) {
                            case 'Fm.Constructor.new':
                                var $4268 = self.name;
                                var $4269 = self.args;
                                var $4270 = self.inds;
                                var _ret$11 = Fm$Term$ref$(Fm$Name$read$("P"));
                                var _ret$12 = (() => {
                                    var $4273 = _ret$11;
                                    var $4274 = $4270;
                                    let _ret$13 = $4273;
                                    let _var$12;
                                    while ($4274._ === 'List.cons') {
                                        _var$12 = $4274.head;
                                        var $4273 = Fm$Term$app$(_ret$13, (() => {
                                            var self = _var$12;
                                            switch (self._) {
                                                case 'Fm.Binder.new':
                                                    var $4275 = self.eras;
                                                    var $4276 = self.name;
                                                    var $4277 = self.term;
                                                    var $4278 = $4277;
                                                    return $4278;
                                            };
                                        })());
                                        _ret$13 = $4273;
                                        $4274 = $4274.tail;
                                    }
                                    return _ret$13;
                                })();
                                var _ctr$13 = String$flatten$(List$cons$($4263, List$cons$(Fm$Name$read$("."), List$cons$($4268, List$nil))));
                                var _slf$14 = Fm$Term$ref$(_ctr$13);
                                var _slf$15 = (() => {
                                    var $4280 = _slf$14;
                                    var $4281 = $4264;
                                    let _slf$16 = $4280;
                                    let _var$15;
                                    while ($4281._ === 'List.cons') {
                                        _var$15 = $4281.head;
                                        var $4280 = Fm$Term$app$(_slf$16, Fm$Term$ref$((() => {
                                            var self = _var$15;
                                            switch (self._) {
                                                case 'Fm.Binder.new':
                                                    var $4282 = self.eras;
                                                    var $4283 = self.name;
                                                    var $4284 = self.term;
                                                    var $4285 = $4283;
                                                    return $4285;
                                            };
                                        })()));
                                        _slf$16 = $4280;
                                        $4281 = $4281.tail;
                                    }
                                    return _slf$16;
                                })();
                                var _slf$16 = (() => {
                                    var $4287 = _slf$15;
                                    var $4288 = $4269;
                                    let _slf$17 = $4287;
                                    let _var$16;
                                    while ($4288._ === 'List.cons') {
                                        _var$16 = $4288.head;
                                        var $4287 = Fm$Term$app$(_slf$17, Fm$Term$ref$((() => {
                                            var self = _var$16;
                                            switch (self._) {
                                                case 'Fm.Binder.new':
                                                    var $4289 = self.eras;
                                                    var $4290 = self.name;
                                                    var $4291 = self.term;
                                                    var $4292 = $4290;
                                                    return $4292;
                                            };
                                        })()));
                                        _slf$17 = $4287;
                                        $4288 = $4288.tail;
                                    }
                                    return _slf$17;
                                })();
                                var $4271 = Fm$Term$app$(_ret$12, _slf$16);
                                var $4267 = $4271;
                                break;
                        };
                        var $4262 = $4267;
                        break;
                };
                var $4261 = $4262;
                break;
            case 'List.cons':
                var $4293 = self.head;
                var $4294 = self.tail;
                var self = $4293;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4296 = self.eras;
                        var $4297 = self.name;
                        var $4298 = self.term;
                        var _eras$9 = $4296;
                        var _name$10 = $4297;
                        var _xtyp$11 = $4298;
                        var _body$12 = Fm$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $4294);
                        var $4299 = Fm$Term$all$(_eras$9, "", _name$10, _xtyp$11, (_s$13 => _x$14 => {
                            var $4300 = _body$12;
                            return $4300;
                        }));
                        var $4295 = $4299;
                        break;
                };
                var $4261 = $4295;
                break;
        };
        return $4261;
    };
    const Fm$Datatype$build_term$constructor$go = x0 => x1 => x2 => Fm$Datatype$build_term$constructor$go$(x0, x1, x2);

    function Fm$Datatype$build_term$constructor$(_type$1, _ctor$2) {
        var self = _ctor$2;
        switch (self._) {
            case 'Fm.Constructor.new':
                var $4302 = self.name;
                var $4303 = self.args;
                var $4304 = self.inds;
                var $4305 = Fm$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $4303);
                var $4301 = $4305;
                break;
        };
        return $4301;
    };
    const Fm$Datatype$build_term$constructor = x0 => x1 => Fm$Datatype$build_term$constructor$(x0, x1);

    function Fm$Datatype$build_term$constructors$go$(_type$1, _name$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Fm.Datatype.new':
                        var $4308 = self.name;
                        var $4309 = self.pars;
                        var $4310 = self.inds;
                        var $4311 = self.ctrs;
                        var _ret$8 = Fm$Term$ref$(Fm$Name$read$("P"));
                        var _ret$9 = (() => {
                            var $4314 = _ret$8;
                            var $4315 = $4310;
                            let _ret$10 = $4314;
                            let _var$9;
                            while ($4315._ === 'List.cons') {
                                _var$9 = $4315.head;
                                var $4314 = Fm$Term$app$(_ret$10, Fm$Term$ref$((() => {
                                    var self = _var$9;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4316 = self.eras;
                                            var $4317 = self.name;
                                            var $4318 = self.term;
                                            var $4319 = $4317;
                                            return $4319;
                                    };
                                })()));
                                _ret$10 = $4314;
                                $4315 = $4315.tail;
                            }
                            return _ret$10;
                        })();
                        var $4312 = Fm$Term$app$(_ret$9, Fm$Term$ref$((_name$2 + ".Self")));
                        var $4307 = $4312;
                        break;
                };
                var $4306 = $4307;
                break;
            case 'List.cons':
                var $4320 = self.head;
                var $4321 = self.tail;
                var self = $4320;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4323 = self.name;
                        var $4324 = self.args;
                        var $4325 = self.inds;
                        var $4326 = Fm$Term$all$(Bool$false, "", $4323, Fm$Datatype$build_term$constructor$(_type$1, $4320), (_s$9 => _x$10 => {
                            var $4327 = Fm$Datatype$build_term$constructors$go$(_type$1, _name$2, $4321);
                            return $4327;
                        }));
                        var $4322 = $4326;
                        break;
                };
                var $4306 = $4322;
                break;
        };
        return $4306;
    };
    const Fm$Datatype$build_term$constructors$go = x0 => x1 => x2 => Fm$Datatype$build_term$constructors$go$(x0, x1, x2);

    function Fm$Datatype$build_term$constructors$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4329 = self.name;
                var $4330 = self.pars;
                var $4331 = self.inds;
                var $4332 = self.ctrs;
                var $4333 = Fm$Datatype$build_term$constructors$go$(_type$1, $4329, $4332);
                var $4328 = $4333;
                break;
        };
        return $4328;
    };
    const Fm$Datatype$build_term$constructors = x0 => Fm$Datatype$build_term$constructors$(x0);

    function Fm$Datatype$build_term$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.nil':
                        var $4336 = Fm$Term$all$(Bool$true, (_name$2 + ".Self"), Fm$Name$read$("P"), Fm$Datatype$build_term$motive$(_type$1), (_s$5 => _x$6 => {
                            var $4337 = Fm$Datatype$build_term$constructors$(_type$1);
                            return $4337;
                        }));
                        var $4335 = $4336;
                        break;
                    case 'List.cons':
                        var $4338 = self.head;
                        var $4339 = self.tail;
                        var self = $4338;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4341 = self.eras;
                                var $4342 = self.name;
                                var $4343 = self.term;
                                var $4344 = Fm$Term$lam$($4342, (_x$10 => {
                                    var $4345 = Fm$Datatype$build_term$go$(_type$1, _name$2, _pars$3, $4339);
                                    return $4345;
                                }));
                                var $4340 = $4344;
                                break;
                        };
                        var $4335 = $4340;
                        break;
                };
                var $4334 = $4335;
                break;
            case 'List.cons':
                var $4346 = self.head;
                var $4347 = self.tail;
                var self = $4346;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4349 = self.eras;
                        var $4350 = self.name;
                        var $4351 = self.term;
                        var $4352 = Fm$Term$lam$($4350, (_x$10 => {
                            var $4353 = Fm$Datatype$build_term$go$(_type$1, _name$2, $4347, _inds$4);
                            return $4353;
                        }));
                        var $4348 = $4352;
                        break;
                };
                var $4334 = $4348;
                break;
        };
        return $4334;
    };
    const Fm$Datatype$build_term$go = x0 => x1 => x2 => x3 => Fm$Datatype$build_term$go$(x0, x1, x2, x3);

    function Fm$Datatype$build_term$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4355 = self.name;
                var $4356 = self.pars;
                var $4357 = self.inds;
                var $4358 = self.ctrs;
                var $4359 = Fm$Datatype$build_term$go$(_type$1, $4355, $4356, $4357);
                var $4354 = $4359;
                break;
        };
        return $4354;
    };
    const Fm$Datatype$build_term = x0 => Fm$Datatype$build_term$(x0);

    function Fm$Datatype$build_type$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.nil':
                        var $4362 = Fm$Term$typ;
                        var $4361 = $4362;
                        break;
                    case 'List.cons':
                        var $4363 = self.head;
                        var $4364 = self.tail;
                        var self = $4363;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4366 = self.eras;
                                var $4367 = self.name;
                                var $4368 = self.term;
                                var $4369 = Fm$Term$all$(Bool$false, "", $4367, $4368, (_s$10 => _x$11 => {
                                    var $4370 = Fm$Datatype$build_type$go$(_type$1, _name$2, _pars$3, $4364);
                                    return $4370;
                                }));
                                var $4365 = $4369;
                                break;
                        };
                        var $4361 = $4365;
                        break;
                };
                var $4360 = $4361;
                break;
            case 'List.cons':
                var $4371 = self.head;
                var $4372 = self.tail;
                var self = $4371;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4374 = self.eras;
                        var $4375 = self.name;
                        var $4376 = self.term;
                        var $4377 = Fm$Term$all$(Bool$false, "", $4375, $4376, (_s$10 => _x$11 => {
                            var $4378 = Fm$Datatype$build_type$go$(_type$1, _name$2, $4372, _inds$4);
                            return $4378;
                        }));
                        var $4373 = $4377;
                        break;
                };
                var $4360 = $4373;
                break;
        };
        return $4360;
    };
    const Fm$Datatype$build_type$go = x0 => x1 => x2 => x3 => Fm$Datatype$build_type$go$(x0, x1, x2, x3);

    function Fm$Datatype$build_type$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4380 = self.name;
                var $4381 = self.pars;
                var $4382 = self.inds;
                var $4383 = self.ctrs;
                var $4384 = Fm$Datatype$build_type$go$(_type$1, $4380, $4381, $4382);
                var $4379 = $4384;
                break;
        };
        return $4379;
    };
    const Fm$Datatype$build_type = x0 => Fm$Datatype$build_type$(x0);

    function Fm$Constructor$build_term$opt$go$(_type$1, _ctor$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.nil':
                var self = _ctor$2;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4387 = self.name;
                        var $4388 = self.args;
                        var $4389 = self.inds;
                        var _ret$7 = Fm$Term$ref$($4387);
                        var _ret$8 = (() => {
                            var $4392 = _ret$7;
                            var $4393 = $4388;
                            let _ret$9 = $4392;
                            let _arg$8;
                            while ($4393._ === 'List.cons') {
                                _arg$8 = $4393.head;
                                var $4392 = Fm$Term$app$(_ret$9, Fm$Term$ref$((() => {
                                    var self = _arg$8;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4394 = self.eras;
                                            var $4395 = self.name;
                                            var $4396 = self.term;
                                            var $4397 = $4395;
                                            return $4397;
                                    };
                                })()));
                                _ret$9 = $4392;
                                $4393 = $4393.tail;
                            }
                            return _ret$9;
                        })();
                        var $4390 = _ret$8;
                        var $4386 = $4390;
                        break;
                };
                var $4385 = $4386;
                break;
            case 'List.cons':
                var $4398 = self.head;
                var $4399 = self.tail;
                var self = $4398;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4401 = self.name;
                        var $4402 = self.args;
                        var $4403 = self.inds;
                        var $4404 = Fm$Term$lam$($4401, (_x$9 => {
                            var $4405 = Fm$Constructor$build_term$opt$go$(_type$1, _ctor$2, $4399);
                            return $4405;
                        }));
                        var $4400 = $4404;
                        break;
                };
                var $4385 = $4400;
                break;
        };
        return $4385;
    };
    const Fm$Constructor$build_term$opt$go = x0 => x1 => x2 => Fm$Constructor$build_term$opt$go$(x0, x1, x2);

    function Fm$Constructor$build_term$opt$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4407 = self.name;
                var $4408 = self.pars;
                var $4409 = self.inds;
                var $4410 = self.ctrs;
                var $4411 = Fm$Constructor$build_term$opt$go$(_type$1, _ctor$2, $4410);
                var $4406 = $4411;
                break;
        };
        return $4406;
    };
    const Fm$Constructor$build_term$opt = x0 => x1 => Fm$Constructor$build_term$opt$(x0, x1);

    function Fm$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.nil':
                        var $4414 = Fm$Term$lam$(Fm$Name$read$("P"), (_x$6 => {
                            var $4415 = Fm$Constructor$build_term$opt$(_type$1, _ctor$2);
                            return $4415;
                        }));
                        var $4413 = $4414;
                        break;
                    case 'List.cons':
                        var $4416 = self.head;
                        var $4417 = self.tail;
                        var self = $4416;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4419 = self.eras;
                                var $4420 = self.name;
                                var $4421 = self.term;
                                var $4422 = Fm$Term$lam$($4420, (_x$11 => {
                                    var $4423 = Fm$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, $4417);
                                    return $4423;
                                }));
                                var $4418 = $4422;
                                break;
                        };
                        var $4413 = $4418;
                        break;
                };
                var $4412 = $4413;
                break;
            case 'List.cons':
                var $4424 = self.head;
                var $4425 = self.tail;
                var self = $4424;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4427 = self.eras;
                        var $4428 = self.name;
                        var $4429 = self.term;
                        var $4430 = Fm$Term$lam$($4428, (_x$11 => {
                            var $4431 = Fm$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, $4425, _args$5);
                            return $4431;
                        }));
                        var $4426 = $4430;
                        break;
                };
                var $4412 = $4426;
                break;
        };
        return $4412;
    };
    const Fm$Constructor$build_term$go = x0 => x1 => x2 => x3 => x4 => Fm$Constructor$build_term$go$(x0, x1, x2, x3, x4);

    function Fm$Constructor$build_term$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4433 = self.name;
                var $4434 = self.pars;
                var $4435 = self.inds;
                var $4436 = self.ctrs;
                var self = _ctor$2;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4438 = self.name;
                        var $4439 = self.args;
                        var $4440 = self.inds;
                        var $4441 = Fm$Constructor$build_term$go$(_type$1, _ctor$2, $4433, $4434, $4439);
                        var $4437 = $4441;
                        break;
                };
                var $4432 = $4437;
                break;
        };
        return $4432;
    };
    const Fm$Constructor$build_term = x0 => x1 => Fm$Constructor$build_term$(x0, x1);

    function Fm$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.nil':
                        var self = _type$1;
                        switch (self._) {
                            case 'Fm.Datatype.new':
                                var $4445 = self.name;
                                var $4446 = self.pars;
                                var $4447 = self.inds;
                                var $4448 = self.ctrs;
                                var self = _ctor$2;
                                switch (self._) {
                                    case 'Fm.Constructor.new':
                                        var $4450 = self.name;
                                        var $4451 = self.args;
                                        var $4452 = self.inds;
                                        var _type$13 = Fm$Term$ref$(_name$3);
                                        var _type$14 = (() => {
                                            var $4455 = _type$13;
                                            var $4456 = $4446;
                                            let _type$15 = $4455;
                                            let _var$14;
                                            while ($4456._ === 'List.cons') {
                                                _var$14 = $4456.head;
                                                var $4455 = Fm$Term$app$(_type$15, Fm$Term$ref$((() => {
                                                    var self = _var$14;
                                                    switch (self._) {
                                                        case 'Fm.Binder.new':
                                                            var $4457 = self.eras;
                                                            var $4458 = self.name;
                                                            var $4459 = self.term;
                                                            var $4460 = $4458;
                                                            return $4460;
                                                    };
                                                })()));
                                                _type$15 = $4455;
                                                $4456 = $4456.tail;
                                            }
                                            return _type$15;
                                        })();
                                        var _type$15 = (() => {
                                            var $4462 = _type$14;
                                            var $4463 = $4452;
                                            let _type$16 = $4462;
                                            let _var$15;
                                            while ($4463._ === 'List.cons') {
                                                _var$15 = $4463.head;
                                                var $4462 = Fm$Term$app$(_type$16, (() => {
                                                    var self = _var$15;
                                                    switch (self._) {
                                                        case 'Fm.Binder.new':
                                                            var $4464 = self.eras;
                                                            var $4465 = self.name;
                                                            var $4466 = self.term;
                                                            var $4467 = $4466;
                                                            return $4467;
                                                    };
                                                })());
                                                _type$16 = $4462;
                                                $4463 = $4463.tail;
                                            }
                                            return _type$16;
                                        })();
                                        var $4453 = _type$15;
                                        var $4449 = $4453;
                                        break;
                                };
                                var $4444 = $4449;
                                break;
                        };
                        var $4443 = $4444;
                        break;
                    case 'List.cons':
                        var $4468 = self.head;
                        var $4469 = self.tail;
                        var self = $4468;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4471 = self.eras;
                                var $4472 = self.name;
                                var $4473 = self.term;
                                var $4474 = Fm$Term$all$($4471, "", $4472, $4473, (_s$11 => _x$12 => {
                                    var $4475 = Fm$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, $4469);
                                    return $4475;
                                }));
                                var $4470 = $4474;
                                break;
                        };
                        var $4443 = $4470;
                        break;
                };
                var $4442 = $4443;
                break;
            case 'List.cons':
                var $4476 = self.head;
                var $4477 = self.tail;
                var self = $4476;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4479 = self.eras;
                        var $4480 = self.name;
                        var $4481 = self.term;
                        var $4482 = Fm$Term$all$($4479, "", $4480, $4481, (_s$11 => _x$12 => {
                            var $4483 = Fm$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, $4477, _args$5);
                            return $4483;
                        }));
                        var $4478 = $4482;
                        break;
                };
                var $4442 = $4478;
                break;
        };
        return $4442;
    };
    const Fm$Constructor$build_type$go = x0 => x1 => x2 => x3 => x4 => Fm$Constructor$build_type$go$(x0, x1, x2, x3, x4);

    function Fm$Constructor$build_type$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4485 = self.name;
                var $4486 = self.pars;
                var $4487 = self.inds;
                var $4488 = self.ctrs;
                var self = _ctor$2;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4490 = self.name;
                        var $4491 = self.args;
                        var $4492 = self.inds;
                        var $4493 = Fm$Constructor$build_type$go$(_type$1, _ctor$2, $4485, $4486, $4491);
                        var $4489 = $4493;
                        break;
                };
                var $4484 = $4489;
                break;
        };
        return $4484;
    };
    const Fm$Constructor$build_type = x0 => x1 => Fm$Constructor$build_type$(x0, x1);

    function Fm$Parser$file$adt$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Fm$Parser$init$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4495 = self.idx;
                var $4496 = self.code;
                var $4497 = self.err;
                var $4498 = Parser$Reply$error$($4495, $4496, $4497);
                var $4494 = $4498;
                break;
            case 'Parser.Reply.value':
                var $4499 = self.idx;
                var $4500 = self.code;
                var $4501 = self.val;
                var self = Fm$Parser$datatype$($4499, $4500);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4503 = self.idx;
                        var $4504 = self.code;
                        var $4505 = self.err;
                        var $4506 = Parser$Reply$error$($4503, $4504, $4505);
                        var $4502 = $4506;
                        break;
                    case 'Parser.Reply.value':
                        var $4507 = self.idx;
                        var $4508 = self.code;
                        var $4509 = self.val;
                        var self = Fm$Parser$stop$($4501, $4507, $4508);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4511 = self.idx;
                                var $4512 = self.code;
                                var $4513 = self.err;
                                var $4514 = Parser$Reply$error$($4511, $4512, $4513);
                                var $4510 = $4514;
                                break;
                            case 'Parser.Reply.value':
                                var $4515 = self.idx;
                                var $4516 = self.code;
                                var $4517 = self.val;
                                var self = $4509;
                                switch (self._) {
                                    case 'Fm.Datatype.new':
                                        var $4519 = self.name;
                                        var $4520 = self.pars;
                                        var $4521 = self.inds;
                                        var $4522 = self.ctrs;
                                        var _term$19 = Fm$Datatype$build_term$($4509);
                                        var _term$20 = Fm$Term$bind$(List$nil, (_x$20 => {
                                            var $4524 = (_x$20 + '1');
                                            return $4524;
                                        }), _term$19);
                                        var _type$21 = Fm$Datatype$build_type$($4509);
                                        var _type$22 = Fm$Term$bind$(List$nil, (_x$22 => {
                                            var $4525 = (_x$22 + '0');
                                            return $4525;
                                        }), _type$21);
                                        var _arit$23 = ((list_length($4520)) + (list_length($4521)));
                                        var _defs$24 = Fm$define$(_file$1, _code$2, $4517, $4519, _term$20, _type$22, Bool$false, _arit$23, Bool$false, _defs$3);
                                        var _defs$25 = List$fold$($4522, _defs$24, (_ctr$25 => _defs$26 => {
                                            var _typ_name$27 = $4519;
                                            var _ctr_arit$28 = (_arit$23 + (list_length((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Fm.Constructor.new':
                                                        var $4527 = self.name;
                                                        var $4528 = self.args;
                                                        var $4529 = self.inds;
                                                        var $4530 = $4528;
                                                        return $4530;
                                                };
                                            })())));
                                            var _ctr_name$29 = String$flatten$(List$cons$(_typ_name$27, List$cons$(Fm$Name$read$("."), List$cons$((() => {
                                                var self = _ctr$25;
                                                switch (self._) {
                                                    case 'Fm.Constructor.new':
                                                        var $4531 = self.name;
                                                        var $4532 = self.args;
                                                        var $4533 = self.inds;
                                                        var $4534 = $4531;
                                                        return $4534;
                                                };
                                            })(), List$nil))));
                                            var _ctr_term$30 = Fm$Constructor$build_term$($4509, _ctr$25);
                                            var _ctr_term$31 = Fm$Term$bind$(List$nil, (_x$31 => {
                                                var $4535 = (_x$31 + '1');
                                                return $4535;
                                            }), _ctr_term$30);
                                            var _ctr_type$32 = Fm$Constructor$build_type$($4509, _ctr$25);
                                            var _ctr_type$33 = Fm$Term$bind$(List$nil, (_x$33 => {
                                                var $4536 = (_x$33 + '0');
                                                return $4536;
                                            }), _ctr_type$32);
                                            var $4526 = Fm$define$(_file$1, _code$2, $4517, _ctr_name$29, _ctr_term$31, _ctr_type$33, Bool$true, _ctr_arit$28, Bool$false, _defs$26);
                                            return $4526;
                                        }));
                                        var $4523 = (_idx$26 => _code$27 => {
                                            var $4537 = Parser$Reply$value$(_idx$26, _code$27, _defs$25);
                                            return $4537;
                                        });
                                        var $4518 = $4523;
                                        break;
                                };
                                var $4518 = $4518($4515)($4516);
                                var $4510 = $4518;
                                break;
                        };
                        var $4502 = $4510;
                        break;
                };
                var $4494 = $4502;
                break;
        };
        return $4494;
    };
    const Fm$Parser$file$adt = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$adt$(x0, x1, x2, x3, x4);

    function Parser$eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4539 = Parser$Reply$value$(_idx$1, _code$2, Unit$new);
            var $4538 = $4539;
        } else {
            var $4540 = self.charCodeAt(0);
            var $4541 = self.slice(1);
            var $4542 = Parser$Reply$error$(_idx$1, _code$2, "Expected end-of-file.");
            var $4538 = $4542;
        };
        return $4538;
    };
    const Parser$eof = x0 => x1 => Parser$eof$(x0, x1);

    function Fm$Parser$file$end$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Fm$Parser$spaces(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4544 = self.idx;
                var $4545 = self.code;
                var $4546 = self.err;
                var $4547 = Parser$Reply$error$($4544, $4545, $4546);
                var $4543 = $4547;
                break;
            case 'Parser.Reply.value':
                var $4548 = self.idx;
                var $4549 = self.code;
                var $4550 = self.val;
                var self = Parser$eof$($4548, $4549);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4552 = self.idx;
                        var $4553 = self.code;
                        var $4554 = self.err;
                        var $4555 = Parser$Reply$error$($4552, $4553, $4554);
                        var $4551 = $4555;
                        break;
                    case 'Parser.Reply.value':
                        var $4556 = self.idx;
                        var $4557 = self.code;
                        var $4558 = self.val;
                        var $4559 = Parser$Reply$value$($4556, $4557, _defs$3);
                        var $4551 = $4559;
                        break;
                };
                var $4543 = $4551;
                break;
        };
        return $4543;
    };
    const Fm$Parser$file$end = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$end$(x0, x1, x2, x3, x4);

    function Fm$Parser$file$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Parser$is_eof$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4561 = self.idx;
                var $4562 = self.code;
                var $4563 = self.err;
                var $4564 = Parser$Reply$error$($4561, $4562, $4563);
                var $4560 = $4564;
                break;
            case 'Parser.Reply.value':
                var $4565 = self.idx;
                var $4566 = self.code;
                var $4567 = self.val;
                var self = $4567;
                if (self) {
                    var $4569 = (_idx$9 => _code$10 => {
                        var $4570 = Parser$Reply$value$(_idx$9, _code$10, _defs$3);
                        return $4570;
                    });
                    var $4568 = $4569;
                } else {
                    var $4571 = (_idx$9 => _code$10 => {
                        var self = Parser$first_of$(List$cons$(Fm$Parser$file$def(_file$1)(_code$2)(_defs$3), List$cons$(Fm$Parser$file$adt(_file$1)(_code$2)(_defs$3), List$cons$(Fm$Parser$file$end(_file$1)(_code$2)(_defs$3), List$nil))))(_idx$9)(_code$10);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4573 = self.idx;
                                var $4574 = self.code;
                                var $4575 = self.err;
                                var $4576 = Parser$Reply$error$($4573, $4574, $4575);
                                var $4572 = $4576;
                                break;
                            case 'Parser.Reply.value':
                                var $4577 = self.idx;
                                var $4578 = self.code;
                                var $4579 = self.val;
                                var $4580 = Fm$Parser$file$(_file$1, _code$2, $4579, $4577, $4578);
                                var $4572 = $4580;
                                break;
                        };
                        return $4572;
                    });
                    var $4568 = $4571;
                };
                var $4568 = $4568($4565)($4566);
                var $4560 = $4568;
                break;
        };
        return $4560;
    };
    const Fm$Parser$file = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$(x0, x1, x2, x3, x4);

    function Either$(_A$1, _B$2) {
        var $4581 = null;
        return $4581;
    };
    const Either = x0 => x1 => Either$(x0, x1);

    function String$join$go$(_sep$1, _list$2, _fst$3) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $4583 = "";
                var $4582 = $4583;
                break;
            case 'List.cons':
                var $4584 = self.head;
                var $4585 = self.tail;
                var $4586 = String$flatten$(List$cons$((() => {
                    var self = _fst$3;
                    if (self) {
                        var $4587 = "";
                        return $4587;
                    } else {
                        var $4588 = _sep$1;
                        return $4588;
                    };
                })(), List$cons$($4584, List$cons$(String$join$go$(_sep$1, $4585, Bool$false), List$nil))));
                var $4582 = $4586;
                break;
        };
        return $4582;
    };
    const String$join$go = x0 => x1 => x2 => String$join$go$(x0, x1, x2);

    function String$join$(_sep$1, _list$2) {
        var $4589 = String$join$go$(_sep$1, _list$2, Bool$true);
        return $4589;
    };
    const String$join = x0 => x1 => String$join$(x0, x1);

    function Fm$highlight$end$(_col$1, _row$2, _res$3) {
        var $4590 = String$join$("\u{a}", _res$3);
        return $4590;
    };
    const Fm$highlight$end = x0 => x1 => x2 => Fm$highlight$end$(x0, x1, x2);

    function Maybe$extract$(_m$2, _a$4, _f$5) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $4592 = _a$4;
                var $4591 = $4592;
                break;
            case 'Maybe.some':
                var $4593 = self.value;
                var $4594 = _f$5($4593);
                var $4591 = $4594;
                break;
        };
        return $4591;
    };
    const Maybe$extract = x0 => x1 => x2 => Maybe$extract$(x0, x1, x2);

    function Nat$is_zero$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $4596 = Bool$true;
            var $4595 = $4596;
        } else {
            var $4597 = (self - 1n);
            var $4598 = Bool$false;
            var $4595 = $4598;
        };
        return $4595;
    };
    const Nat$is_zero = x0 => Nat$is_zero$(x0);

    function Nat$double$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $4600 = Nat$zero;
            var $4599 = $4600;
        } else {
            var $4601 = (self - 1n);
            var $4602 = Nat$succ$(Nat$succ$(Nat$double$($4601)));
            var $4599 = $4602;
        };
        return $4599;
    };
    const Nat$double = x0 => Nat$double$(x0);

    function Nat$pred$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $4604 = Nat$zero;
            var $4603 = $4604;
        } else {
            var $4605 = (self - 1n);
            var $4606 = $4605;
            var $4603 = $4606;
        };
        return $4603;
    };
    const Nat$pred = x0 => Nat$pred$(x0);

    function String$reverse$go$(_xs$1, _res$2) {
        var String$reverse$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$reverse$go = _xs$1 => _res$2 => String$reverse$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $4607 = _res$2;
                    return $4607;
                } else {
                    var $4608 = self.charCodeAt(0);
                    var $4609 = self.slice(1);
                    var $4610 = String$reverse$go$($4609, String$cons$($4608, _res$2));
                    return $4610;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$reverse$go = x0 => x1 => String$reverse$go$(x0, x1);

    function String$reverse$(_xs$1) {
        var $4611 = String$reverse$go$(_xs$1, String$nil);
        return $4611;
    };
    const String$reverse = x0 => String$reverse$(x0);

    function String$pad_right$(_size$1, _chr$2, _str$3) {
        var self = _size$1;
        if (self === 0n) {
            var $4613 = _str$3;
            var $4612 = $4613;
        } else {
            var $4614 = (self - 1n);
            var self = _str$3;
            if (self.length === 0) {
                var $4616 = String$cons$(_chr$2, String$pad_right$($4614, _chr$2, ""));
                var $4615 = $4616;
            } else {
                var $4617 = self.charCodeAt(0);
                var $4618 = self.slice(1);
                var $4619 = String$cons$($4617, String$pad_right$($4614, _chr$2, $4618));
                var $4615 = $4619;
            };
            var $4612 = $4615;
        };
        return $4612;
    };
    const String$pad_right = x0 => x1 => x2 => String$pad_right$(x0, x1, x2);

    function String$pad_left$(_size$1, _chr$2, _str$3) {
        var $4620 = String$reverse$(String$pad_right$(_size$1, _chr$2, String$reverse$(_str$3)));
        return $4620;
    };
    const String$pad_left = x0 => x1 => x2 => String$pad_left$(x0, x1, x2);

    function Either$left$(_value$3) {
        var $4621 = ({
            _: 'Either.left',
            'value': _value$3
        });
        return $4621;
    };
    const Either$left = x0 => Either$left$(x0);

    function Either$right$(_value$3) {
        var $4622 = ({
            _: 'Either.right',
            'value': _value$3
        });
        return $4622;
    };
    const Either$right = x0 => Either$right$(x0);

    function Nat$sub_rem$(_n$1, _m$2) {
        var Nat$sub_rem$ = (_n$1, _m$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2]
        });
        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);
        var arg = [_n$1, _m$2];
        while (true) {
            let [_n$1, _m$2] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4623 = Either$left$(_n$1);
                    return $4623;
                } else {
                    var $4624 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4626 = Either$right$(Nat$succ$($4624));
                        var $4625 = $4626;
                    } else {
                        var $4627 = (self - 1n);
                        var $4628 = Nat$sub_rem$($4627, $4624);
                        var $4625 = $4628;
                    };
                    return $4625;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);

    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {
        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _d$3]
        });
        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);
        var arg = [_n$1, _m$2, _d$3];
        while (true) {
            let [_n$1, _m$2, _d$3] = arg;
            var R = (() => {
                var self = Nat$sub_rem$(_n$1, _m$2);
                switch (self._) {
                    case 'Either.left':
                        var $4629 = self.value;
                        var $4630 = Nat$div_mod$go$($4629, _m$2, Nat$succ$(_d$3));
                        return $4630;
                    case 'Either.right':
                        var $4631 = self.value;
                        var $4632 = Pair$new$(_d$3, _n$1);
                        return $4632;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);
    const Nat$div_mod = a0 => a1 => (({
        _: 'Pair.new',
        'fst': a0 / a1,
        'snd': a0 % a1
    }));

    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {
        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_base$1, _nat$2, _res$3]
        });
        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);
        var arg = [_base$1, _nat$2, _res$3];
        while (true) {
            let [_base$1, _nat$2, _res$3] = arg;
            var R = (() => {
                var self = (({
                    _: 'Pair.new',
                    'fst': _nat$2 / _base$1,
                    'snd': _nat$2 % _base$1
                }));
                switch (self._) {
                    case 'Pair.new':
                        var $4633 = self.fst;
                        var $4634 = self.snd;
                        var self = $4633;
                        if (self === 0n) {
                            var $4636 = List$cons$($4634, _res$3);
                            var $4635 = $4636;
                        } else {
                            var $4637 = (self - 1n);
                            var $4638 = Nat$to_base$go$(_base$1, $4633, List$cons$($4634, _res$3));
                            var $4635 = $4638;
                        };
                        return $4635;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);

    function Nat$to_base$(_base$1, _nat$2) {
        var $4639 = Nat$to_base$go$(_base$1, _nat$2, List$nil);
        return $4639;
    };
    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);

    function Nat$mod$go$(_n$1, _m$2, _r$3) {
        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _r$3]
        });
        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);
        var arg = [_n$1, _m$2, _r$3];
        while (true) {
            let [_n$1, _m$2, _r$3] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4640 = Nat$mod$go$(_n$1, _r$3, _m$2);
                    return $4640;
                } else {
                    var $4641 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4643 = _r$3;
                        var $4642 = $4643;
                    } else {
                        var $4644 = (self - 1n);
                        var $4645 = Nat$mod$go$($4644, $4641, Nat$succ$(_r$3));
                        var $4642 = $4645;
                    };
                    return $4642;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);

    function Nat$mod$(_n$1, _m$2) {
        var $4646 = Nat$mod$go$(_n$1, _m$2, 0n);
        return $4646;
    };
    const Nat$mod = x0 => x1 => Nat$mod$(x0, x1);
    const Nat$lte = a0 => a1 => (a0 <= a1);

    function Nat$show_digit$(_base$1, _n$2) {
        var _m$3 = Nat$mod$(_n$2, _base$1);
        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
        var self = ((_base$1 > 0n) && (_base$1 <= 64n));
        if (self) {
            var self = List$at$(_m$3, _base64$4);
            switch (self._) {
                case 'Maybe.none':
                    var $4649 = 35;
                    var $4648 = $4649;
                    break;
                case 'Maybe.some':
                    var $4650 = self.value;
                    var $4651 = $4650;
                    var $4648 = $4651;
                    break;
            };
            var $4647 = $4648;
        } else {
            var $4652 = 35;
            var $4647 = $4652;
        };
        return $4647;
    };
    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);

    function Nat$to_string_base$(_base$1, _nat$2) {
        var $4653 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {
            var $4654 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);
            return $4654;
        }));
        return $4653;
    };
    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);

    function Nat$show$(_n$1) {
        var $4655 = Nat$to_string_base$(10n, _n$1);
        return $4655;
    };
    const Nat$show = x0 => Nat$show$(x0);
    const Bool$not = a0 => (!a0);

    function Fm$color$(_col$1, _str$2) {
        var $4656 = String$cons$(27, String$cons$(91, (_col$1 + String$cons$(109, (_str$2 + String$cons$(27, String$cons$(91, String$cons$(48, String$cons$(109, String$nil)))))))));
        return $4656;
    };
    const Fm$color = x0 => x1 => Fm$color$(x0, x1);
    const Nat$eql = a0 => a1 => (a0 === a1);

    function List$take$(_n$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.nil':
                var $4658 = List$nil;
                var $4657 = $4658;
                break;
            case 'List.cons':
                var $4659 = self.head;
                var $4660 = self.tail;
                var self = _n$2;
                if (self === 0n) {
                    var $4662 = List$nil;
                    var $4661 = $4662;
                } else {
                    var $4663 = (self - 1n);
                    var $4664 = List$cons$($4659, List$take$($4663, $4660));
                    var $4661 = $4664;
                };
                var $4657 = $4661;
                break;
        };
        return $4657;
    };
    const List$take = x0 => x1 => List$take$(x0, x1);

    function Fm$highlight$tc$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) {
        var Fm$highlight$tc$ = (_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) => ({
            ctr: 'TCO',
            arg: [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8]
        });
        var Fm$highlight$tc = _code$1 => _ix0$2 => _ix1$3 => _col$4 => _row$5 => _lft$6 => _lin$7 => _res$8 => Fm$highlight$tc$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8);
        var arg = [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8];
        while (true) {
            let [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8] = arg;
            var R = (() => {
                var _spa$9 = 3n;
                var self = _code$1;
                if (self.length === 0) {
                    var $4666 = Fm$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                    var $4665 = $4666;
                } else {
                    var $4667 = self.charCodeAt(0);
                    var $4668 = self.slice(1);
                    var self = ($4667 === 10);
                    if (self) {
                        var _stp$12 = Maybe$extract$(_lft$6, Bool$false, Nat$is_zero);
                        var self = _stp$12;
                        if (self) {
                            var $4671 = Fm$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                            var $4670 = $4671;
                        } else {
                            var _siz$13 = Nat$succ$(Nat$double$(_spa$9));
                            var self = _ix1$3;
                            if (self === 0n) {
                                var self = _lft$6;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $4674 = Maybe$some$(_spa$9);
                                        var $4673 = $4674;
                                        break;
                                    case 'Maybe.some':
                                        var $4675 = self.value;
                                        var $4676 = Maybe$some$(Nat$pred$($4675));
                                        var $4673 = $4676;
                                        break;
                                };
                                var _lft$14 = $4673;
                            } else {
                                var $4677 = (self - 1n);
                                var $4678 = _lft$6;
                                var _lft$14 = $4678;
                            };
                            var _ix0$15 = Nat$pred$(_ix0$2);
                            var _ix1$16 = Nat$pred$(_ix1$3);
                            var _col$17 = 0n;
                            var _row$18 = Nat$succ$(_row$5);
                            var _res$19 = List$cons$(String$reverse$(_lin$7), _res$8);
                            var _lin$20 = String$reverse$(String$flatten$(List$cons$(String$pad_left$(4n, 32, Nat$show$(_row$18)), List$cons$(" | ", List$nil))));
                            var $4672 = Fm$highlight$tc$($4668, _ix0$15, _ix1$16, _col$17, _row$18, _lft$14, _lin$20, _res$19);
                            var $4670 = $4672;
                        };
                        var $4669 = $4670;
                    } else {
                        var _chr$12 = String$cons$($4667, String$nil);
                        var self = (Nat$is_zero$(_ix0$2) && (!Nat$is_zero$(_ix1$3)));
                        if (self) {
                            var $4680 = String$reverse$(Fm$color$("31", Fm$color$("4", _chr$12)));
                            var _chr$13 = $4680;
                        } else {
                            var $4681 = _chr$12;
                            var _chr$13 = $4681;
                        };
                        var self = (_ix0$2 === 1n);
                        if (self) {
                            var $4682 = List$take$(_spa$9, _res$8);
                            var _res$14 = $4682;
                        } else {
                            var $4683 = _res$8;
                            var _res$14 = $4683;
                        };
                        var _ix0$15 = Nat$pred$(_ix0$2);
                        var _ix1$16 = Nat$pred$(_ix1$3);
                        var _col$17 = Nat$succ$(_col$4);
                        var _lin$18 = String$flatten$(List$cons$(_chr$13, List$cons$(_lin$7, List$nil)));
                        var $4679 = Fm$highlight$tc$($4668, _ix0$15, _ix1$16, _col$17, _row$5, _lft$6, _lin$18, _res$14);
                        var $4669 = $4679;
                    };
                    var $4665 = $4669;
                };
                return $4665;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$highlight$tc = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Fm$highlight$tc$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Fm$highlight$(_code$1, _idx0$2, _idx1$3) {
        var $4684 = Fm$highlight$tc$(_code$1, _idx0$2, _idx1$3, 0n, 1n, Maybe$none, String$reverse$("   1 | "), List$nil);
        return $4684;
    };
    const Fm$highlight = x0 => x1 => x2 => Fm$highlight$(x0, x1, x2);

    function Fm$Defs$read$(_file$1, _code$2, _defs$3) {
        var self = Fm$Parser$file$(_file$1, _code$2, _defs$3, 0n, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4686 = self.idx;
                var $4687 = self.code;
                var $4688 = self.err;
                var _err$7 = $4688;
                var _hig$8 = Fm$highlight$(_code$2, $4686, Nat$succ$($4686));
                var _str$9 = String$flatten$(List$cons$(_err$7, List$cons$("\u{a}", List$cons$(_hig$8, List$nil))));
                var $4689 = Either$left$(_str$9);
                var $4685 = $4689;
                break;
            case 'Parser.Reply.value':
                var $4690 = self.idx;
                var $4691 = self.code;
                var $4692 = self.val;
                var $4693 = Either$right$($4692);
                var $4685 = $4693;
                break;
        };
        return $4685;
    };
    const Fm$Defs$read = x0 => x1 => x2 => Fm$Defs$read$(x0, x1, x2);

    function Fm$Synth$load$go$(_name$1, _files$2, _defs$3) {
        var self = _files$2;
        switch (self._) {
            case 'List.nil':
                var $4695 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                    var $4696 = _m$pure$5;
                    return $4696;
                }))(Maybe$none);
                var $4694 = $4695;
                break;
            case 'List.cons':
                var $4697 = self.head;
                var $4698 = self.tail;
                var $4699 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                    var $4700 = _m$bind$6;
                    return $4700;
                }))(IO$get_file$($4697))((_code$6 => {
                    var _read$7 = Fm$Defs$read$($4697, _code$6, _defs$3);
                    var self = _read$7;
                    switch (self._) {
                        case 'Either.left':
                            var $4702 = self.value;
                            var $4703 = Fm$Synth$load$go$(_name$1, $4698, _defs$3);
                            var $4701 = $4703;
                            break;
                        case 'Either.right':
                            var $4704 = self.value;
                            var _defs$9 = $4704;
                            var self = Fm$get$(_name$1, _defs$9);
                            switch (self._) {
                                case 'Maybe.none':
                                    var $4706 = Fm$Synth$load$go$(_name$1, $4698, _defs$9);
                                    var $4705 = $4706;
                                    break;
                                case 'Maybe.some':
                                    var $4707 = self.value;
                                    var $4708 = IO$monad$((_m$bind$11 => _m$pure$12 => {
                                        var $4709 = _m$pure$12;
                                        return $4709;
                                    }))(Maybe$some$(_defs$9));
                                    var $4705 = $4708;
                                    break;
                            };
                            var $4701 = $4705;
                            break;
                    };
                    return $4701;
                }));
                var $4694 = $4699;
                break;
        };
        return $4694;
    };
    const Fm$Synth$load$go = x0 => x1 => x2 => Fm$Synth$load$go$(x0, x1, x2);

    function Fm$Synth$files_of$make$(_names$1, _last$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.nil':
                var $4711 = List$nil;
                var $4710 = $4711;
                break;
            case 'List.cons':
                var $4712 = self.head;
                var $4713 = self.tail;
                var _head$5 = (_last$2 + ($4712 + ".fm"));
                var _tail$6 = Fm$Synth$files_of$make$($4713, (_last$2 + ($4712 + "/")));
                var $4714 = List$cons$(_head$5, _tail$6);
                var $4710 = $4714;
                break;
        };
        return $4710;
    };
    const Fm$Synth$files_of$make = x0 => x1 => Fm$Synth$files_of$make$(x0, x1);

    function Char$eql$(_a$1, _b$2) {
        var $4715 = (_a$1 === _b$2);
        return $4715;
    };
    const Char$eql = x0 => x1 => Char$eql$(x0, x1);

    function String$starts_with$(_xs$1, _match$2) {
        var String$starts_with$ = (_xs$1, _match$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _match$2]
        });
        var String$starts_with = _xs$1 => _match$2 => String$starts_with$(_xs$1, _match$2);
        var arg = [_xs$1, _match$2];
        while (true) {
            let [_xs$1, _match$2] = arg;
            var R = (() => {
                var self = _match$2;
                if (self.length === 0) {
                    var $4716 = Bool$true;
                    return $4716;
                } else {
                    var $4717 = self.charCodeAt(0);
                    var $4718 = self.slice(1);
                    var self = _xs$1;
                    if (self.length === 0) {
                        var $4720 = Bool$false;
                        var $4719 = $4720;
                    } else {
                        var $4721 = self.charCodeAt(0);
                        var $4722 = self.slice(1);
                        var self = Char$eql$($4717, $4721);
                        if (self) {
                            var $4724 = String$starts_with$($4722, $4718);
                            var $4723 = $4724;
                        } else {
                            var $4725 = Bool$false;
                            var $4723 = $4725;
                        };
                        var $4719 = $4723;
                    };
                    return $4719;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$starts_with = x0 => x1 => String$starts_with$(x0, x1);

    function String$drop$(_n$1, _xs$2) {
        var String$drop$ = (_n$1, _xs$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _xs$2]
        });
        var String$drop = _n$1 => _xs$2 => String$drop$(_n$1, _xs$2);
        var arg = [_n$1, _xs$2];
        while (true) {
            let [_n$1, _xs$2] = arg;
            var R = (() => {
                var self = _n$1;
                if (self === 0n) {
                    var $4726 = _xs$2;
                    return $4726;
                } else {
                    var $4727 = (self - 1n);
                    var self = _xs$2;
                    if (self.length === 0) {
                        var $4729 = String$nil;
                        var $4728 = $4729;
                    } else {
                        var $4730 = self.charCodeAt(0);
                        var $4731 = self.slice(1);
                        var $4732 = String$drop$($4727, $4731);
                        var $4728 = $4732;
                    };
                    return $4728;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$drop = x0 => x1 => String$drop$(x0, x1);

    function String$length$go$(_xs$1, _n$2) {
        var String$length$go$ = (_xs$1, _n$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _n$2]
        });
        var String$length$go = _xs$1 => _n$2 => String$length$go$(_xs$1, _n$2);
        var arg = [_xs$1, _n$2];
        while (true) {
            let [_xs$1, _n$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $4733 = _n$2;
                    return $4733;
                } else {
                    var $4734 = self.charCodeAt(0);
                    var $4735 = self.slice(1);
                    var $4736 = String$length$go$($4735, Nat$succ$(_n$2));
                    return $4736;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$length$go = x0 => x1 => String$length$go$(x0, x1);

    function String$length$(_xs$1) {
        var $4737 = String$length$go$(_xs$1, 0n);
        return $4737;
    };
    const String$length = x0 => String$length$(x0);

    function String$split$go$(_xs$1, _match$2, _last$3) {
        var self = _xs$1;
        if (self.length === 0) {
            var $4739 = List$cons$(_last$3, List$nil);
            var $4738 = $4739;
        } else {
            var $4740 = self.charCodeAt(0);
            var $4741 = self.slice(1);
            var self = String$starts_with$(_xs$1, _match$2);
            if (self) {
                var _rest$6 = String$drop$(String$length$(_match$2), _xs$1);
                var $4743 = List$cons$(_last$3, String$split$go$(_rest$6, _match$2, ""));
                var $4742 = $4743;
            } else {
                var _next$6 = String$cons$($4740, String$nil);
                var $4744 = String$split$go$($4741, _match$2, (_last$3 + _next$6));
                var $4742 = $4744;
            };
            var $4738 = $4742;
        };
        return $4738;
    };
    const String$split$go = x0 => x1 => x2 => String$split$go$(x0, x1, x2);

    function String$split$(_xs$1, _match$2) {
        var $4745 = String$split$go$(_xs$1, _match$2, "");
        return $4745;
    };
    const String$split = x0 => x1 => String$split$(x0, x1);

    function Fm$Synth$files_of$(_name$1) {
        var $4746 = List$reverse$(Fm$Synth$files_of$make$(String$split$(_name$1, "."), ""));
        return $4746;
    };
    const Fm$Synth$files_of = x0 => Fm$Synth$files_of$(x0);

    function Fm$Synth$load$(_name$1, _defs$2) {
        var $4747 = Fm$Synth$load$go$(_name$1, Fm$Synth$files_of$(_name$1), _defs$2);
        return $4747;
    };
    const Fm$Synth$load = x0 => x1 => Fm$Synth$load$(x0, x1);
    const Fm$Status$wait = ({
        _: 'Fm.Status.wait'
    });

    function Fm$Check$(_V$1) {
        var $4748 = null;
        return $4748;
    };
    const Fm$Check = x0 => Fm$Check$(x0);

    function Fm$Check$result$(_value$2, _errors$3) {
        var $4749 = ({
            _: 'Fm.Check.result',
            'value': _value$2,
            'errors': _errors$3
        });
        return $4749;
    };
    const Fm$Check$result = x0 => x1 => Fm$Check$result$(x0, x1);

    function Fm$Error$undefined_reference$(_origin$1, _name$2) {
        var $4750 = ({
            _: 'Fm.Error.undefined_reference',
            'origin': _origin$1,
            'name': _name$2
        });
        return $4750;
    };
    const Fm$Error$undefined_reference = x0 => x1 => Fm$Error$undefined_reference$(x0, x1);

    function Fm$Error$waiting$(_name$1) {
        var $4751 = ({
            _: 'Fm.Error.waiting',
            'name': _name$1
        });
        return $4751;
    };
    const Fm$Error$waiting = x0 => Fm$Error$waiting$(x0);

    function Fm$Error$indirect$(_name$1) {
        var $4752 = ({
            _: 'Fm.Error.indirect',
            'name': _name$1
        });
        return $4752;
    };
    const Fm$Error$indirect = x0 => Fm$Error$indirect$(x0);

    function Maybe$mapped$(_m$2, _f$4) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $4754 = Maybe$none;
                var $4753 = $4754;
                break;
            case 'Maybe.some':
                var $4755 = self.value;
                var $4756 = Maybe$some$(_f$4($4755));
                var $4753 = $4756;
                break;
        };
        return $4753;
    };
    const Maybe$mapped = x0 => x1 => Maybe$mapped$(x0, x1);

    function Fm$MPath$o$(_path$1) {
        var $4757 = Maybe$mapped$(_path$1, Fm$Path$o);
        return $4757;
    };
    const Fm$MPath$o = x0 => Fm$MPath$o$(x0);

    function Fm$MPath$i$(_path$1) {
        var $4758 = Maybe$mapped$(_path$1, Fm$Path$i);
        return $4758;
    };
    const Fm$MPath$i = x0 => Fm$MPath$i$(x0);

    function Fm$Error$patch$(_path$1, _term$2) {
        var $4759 = ({
            _: 'Fm.Error.patch',
            'path': _path$1,
            'term': _term$2
        });
        return $4759;
    };
    const Fm$Error$patch = x0 => x1 => Fm$Error$patch$(x0, x1);

    function Fm$MPath$to_bits$(_path$1) {
        var self = _path$1;
        switch (self._) {
            case 'Maybe.none':
                var $4761 = Bits$e;
                var $4760 = $4761;
                break;
            case 'Maybe.some':
                var $4762 = self.value;
                var $4763 = $4762(Bits$e);
                var $4760 = $4763;
                break;
        };
        return $4760;
    };
    const Fm$MPath$to_bits = x0 => Fm$MPath$to_bits$(x0);

    function Fm$Error$type_mismatch$(_origin$1, _expected$2, _detected$3, _context$4) {
        var $4764 = ({
            _: 'Fm.Error.type_mismatch',
            'origin': _origin$1,
            'expected': _expected$2,
            'detected': _detected$3,
            'context': _context$4
        });
        return $4764;
    };
    const Fm$Error$type_mismatch = x0 => x1 => x2 => x3 => Fm$Error$type_mismatch$(x0, x1, x2, x3);

    function Fm$Error$show_goal$(_name$1, _dref$2, _verb$3, _goal$4, _context$5) {
        var $4765 = ({
            _: 'Fm.Error.show_goal',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3,
            'goal': _goal$4,
            'context': _context$5
        });
        return $4765;
    };
    const Fm$Error$show_goal = x0 => x1 => x2 => x3 => x4 => Fm$Error$show_goal$(x0, x1, x2, x3, x4);

    function Fm$Term$normalize$(_term$1, _defs$2) {
        var self = Fm$Term$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Fm.Term.var':
                var $4767 = self.name;
                var $4768 = self.indx;
                var $4769 = Fm$Term$var$($4767, $4768);
                var $4766 = $4769;
                break;
            case 'Fm.Term.ref':
                var $4770 = self.name;
                var $4771 = Fm$Term$ref$($4770);
                var $4766 = $4771;
                break;
            case 'Fm.Term.typ':
                var $4772 = Fm$Term$typ;
                var $4766 = $4772;
                break;
            case 'Fm.Term.all':
                var $4773 = self.eras;
                var $4774 = self.self;
                var $4775 = self.name;
                var $4776 = self.xtyp;
                var $4777 = self.body;
                var $4778 = Fm$Term$all$($4773, $4774, $4775, Fm$Term$normalize$($4776, _defs$2), (_s$8 => _x$9 => {
                    var $4779 = Fm$Term$normalize$($4777(_s$8)(_x$9), _defs$2);
                    return $4779;
                }));
                var $4766 = $4778;
                break;
            case 'Fm.Term.lam':
                var $4780 = self.name;
                var $4781 = self.body;
                var $4782 = Fm$Term$lam$($4780, (_x$5 => {
                    var $4783 = Fm$Term$normalize$($4781(_x$5), _defs$2);
                    return $4783;
                }));
                var $4766 = $4782;
                break;
            case 'Fm.Term.app':
                var $4784 = self.func;
                var $4785 = self.argm;
                var $4786 = Fm$Term$app$(Fm$Term$normalize$($4784, _defs$2), Fm$Term$normalize$($4785, _defs$2));
                var $4766 = $4786;
                break;
            case 'Fm.Term.let':
                var $4787 = self.name;
                var $4788 = self.expr;
                var $4789 = self.body;
                var $4790 = Fm$Term$let$($4787, Fm$Term$normalize$($4788, _defs$2), (_x$6 => {
                    var $4791 = Fm$Term$normalize$($4789(_x$6), _defs$2);
                    return $4791;
                }));
                var $4766 = $4790;
                break;
            case 'Fm.Term.def':
                var $4792 = self.name;
                var $4793 = self.expr;
                var $4794 = self.body;
                var $4795 = Fm$Term$def$($4792, Fm$Term$normalize$($4793, _defs$2), (_x$6 => {
                    var $4796 = Fm$Term$normalize$($4794(_x$6), _defs$2);
                    return $4796;
                }));
                var $4766 = $4795;
                break;
            case 'Fm.Term.ann':
                var $4797 = self.done;
                var $4798 = self.term;
                var $4799 = self.type;
                var $4800 = Fm$Term$ann$($4797, Fm$Term$normalize$($4798, _defs$2), Fm$Term$normalize$($4799, _defs$2));
                var $4766 = $4800;
                break;
            case 'Fm.Term.gol':
                var $4801 = self.name;
                var $4802 = self.dref;
                var $4803 = self.verb;
                var $4804 = Fm$Term$gol$($4801, $4802, $4803);
                var $4766 = $4804;
                break;
            case 'Fm.Term.hol':
                var $4805 = self.path;
                var $4806 = Fm$Term$hol$($4805);
                var $4766 = $4806;
                break;
            case 'Fm.Term.nat':
                var $4807 = self.natx;
                var $4808 = Fm$Term$nat$($4807);
                var $4766 = $4808;
                break;
            case 'Fm.Term.chr':
                var $4809 = self.chrx;
                var $4810 = Fm$Term$chr$($4809);
                var $4766 = $4810;
                break;
            case 'Fm.Term.str':
                var $4811 = self.strx;
                var $4812 = Fm$Term$str$($4811);
                var $4766 = $4812;
                break;
            case 'Fm.Term.cse':
                var $4813 = self.path;
                var $4814 = self.expr;
                var $4815 = self.name;
                var $4816 = self.with;
                var $4817 = self.cses;
                var $4818 = self.moti;
                var $4819 = _term$1;
                var $4766 = $4819;
                break;
            case 'Fm.Term.ori':
                var $4820 = self.orig;
                var $4821 = self.expr;
                var $4822 = Fm$Term$normalize$($4821, _defs$2);
                var $4766 = $4822;
                break;
        };
        return $4766;
    };
    const Fm$Term$normalize = x0 => x1 => Fm$Term$normalize$(x0, x1);

    function List$tail$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.nil':
                var $4824 = List$nil;
                var $4823 = $4824;
                break;
            case 'List.cons':
                var $4825 = self.head;
                var $4826 = self.tail;
                var $4827 = $4826;
                var $4823 = $4827;
                break;
        };
        return $4823;
    };
    const List$tail = x0 => List$tail$(x0);

    function Fm$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4) {
        var Fm$SmartMotive$vals$cont$ = (_expr$1, _term$2, _args$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_expr$1, _term$2, _args$3, _defs$4]
        });
        var Fm$SmartMotive$vals$cont = _expr$1 => _term$2 => _args$3 => _defs$4 => Fm$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4);
        var arg = [_expr$1, _term$2, _args$3, _defs$4];
        while (true) {
            let [_expr$1, _term$2, _args$3, _defs$4] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $4828 = self.name;
                        var $4829 = self.indx;
                        var $4830 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4830;
                    case 'Fm.Term.ref':
                        var $4831 = self.name;
                        var $4832 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4832;
                    case 'Fm.Term.typ':
                        var $4833 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4833;
                    case 'Fm.Term.all':
                        var $4834 = self.eras;
                        var $4835 = self.self;
                        var $4836 = self.name;
                        var $4837 = self.xtyp;
                        var $4838 = self.body;
                        var $4839 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4839;
                    case 'Fm.Term.lam':
                        var $4840 = self.name;
                        var $4841 = self.body;
                        var $4842 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4842;
                    case 'Fm.Term.app':
                        var $4843 = self.func;
                        var $4844 = self.argm;
                        var $4845 = Fm$SmartMotive$vals$cont$(_expr$1, $4843, List$cons$($4844, _args$3), _defs$4);
                        return $4845;
                    case 'Fm.Term.let':
                        var $4846 = self.name;
                        var $4847 = self.expr;
                        var $4848 = self.body;
                        var $4849 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4849;
                    case 'Fm.Term.def':
                        var $4850 = self.name;
                        var $4851 = self.expr;
                        var $4852 = self.body;
                        var $4853 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4853;
                    case 'Fm.Term.ann':
                        var $4854 = self.done;
                        var $4855 = self.term;
                        var $4856 = self.type;
                        var $4857 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4857;
                    case 'Fm.Term.gol':
                        var $4858 = self.name;
                        var $4859 = self.dref;
                        var $4860 = self.verb;
                        var $4861 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4861;
                    case 'Fm.Term.hol':
                        var $4862 = self.path;
                        var $4863 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4863;
                    case 'Fm.Term.nat':
                        var $4864 = self.natx;
                        var $4865 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4865;
                    case 'Fm.Term.chr':
                        var $4866 = self.chrx;
                        var $4867 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4867;
                    case 'Fm.Term.str':
                        var $4868 = self.strx;
                        var $4869 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4869;
                    case 'Fm.Term.cse':
                        var $4870 = self.path;
                        var $4871 = self.expr;
                        var $4872 = self.name;
                        var $4873 = self.with;
                        var $4874 = self.cses;
                        var $4875 = self.moti;
                        var $4876 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4876;
                    case 'Fm.Term.ori':
                        var $4877 = self.orig;
                        var $4878 = self.expr;
                        var $4879 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4879;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$SmartMotive$vals$cont = x0 => x1 => x2 => x3 => Fm$SmartMotive$vals$cont$(x0, x1, x2, x3);

    function Fm$SmartMotive$vals$(_expr$1, _type$2, _defs$3) {
        var Fm$SmartMotive$vals$ = (_expr$1, _type$2, _defs$3) => ({
            ctr: 'TCO',
            arg: [_expr$1, _type$2, _defs$3]
        });
        var Fm$SmartMotive$vals = _expr$1 => _type$2 => _defs$3 => Fm$SmartMotive$vals$(_expr$1, _type$2, _defs$3);
        var arg = [_expr$1, _type$2, _defs$3];
        while (true) {
            let [_expr$1, _type$2, _defs$3] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_type$2, _defs$3);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $4880 = self.name;
                        var $4881 = self.indx;
                        var $4882 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4882;
                    case 'Fm.Term.ref':
                        var $4883 = self.name;
                        var $4884 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4884;
                    case 'Fm.Term.typ':
                        var $4885 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4885;
                    case 'Fm.Term.all':
                        var $4886 = self.eras;
                        var $4887 = self.self;
                        var $4888 = self.name;
                        var $4889 = self.xtyp;
                        var $4890 = self.body;
                        var $4891 = Fm$SmartMotive$vals$(_expr$1, $4890(Fm$Term$typ)(Fm$Term$typ), _defs$3);
                        return $4891;
                    case 'Fm.Term.lam':
                        var $4892 = self.name;
                        var $4893 = self.body;
                        var $4894 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4894;
                    case 'Fm.Term.app':
                        var $4895 = self.func;
                        var $4896 = self.argm;
                        var $4897 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4897;
                    case 'Fm.Term.let':
                        var $4898 = self.name;
                        var $4899 = self.expr;
                        var $4900 = self.body;
                        var $4901 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4901;
                    case 'Fm.Term.def':
                        var $4902 = self.name;
                        var $4903 = self.expr;
                        var $4904 = self.body;
                        var $4905 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4905;
                    case 'Fm.Term.ann':
                        var $4906 = self.done;
                        var $4907 = self.term;
                        var $4908 = self.type;
                        var $4909 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4909;
                    case 'Fm.Term.gol':
                        var $4910 = self.name;
                        var $4911 = self.dref;
                        var $4912 = self.verb;
                        var $4913 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4913;
                    case 'Fm.Term.hol':
                        var $4914 = self.path;
                        var $4915 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4915;
                    case 'Fm.Term.nat':
                        var $4916 = self.natx;
                        var $4917 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4917;
                    case 'Fm.Term.chr':
                        var $4918 = self.chrx;
                        var $4919 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4919;
                    case 'Fm.Term.str':
                        var $4920 = self.strx;
                        var $4921 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4921;
                    case 'Fm.Term.cse':
                        var $4922 = self.path;
                        var $4923 = self.expr;
                        var $4924 = self.name;
                        var $4925 = self.with;
                        var $4926 = self.cses;
                        var $4927 = self.moti;
                        var $4928 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4928;
                    case 'Fm.Term.ori':
                        var $4929 = self.orig;
                        var $4930 = self.expr;
                        var $4931 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4931;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$SmartMotive$vals = x0 => x1 => x2 => Fm$SmartMotive$vals$(x0, x1, x2);

    function Fm$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4) {
        var Fm$SmartMotive$nams$cont$ = (_name$1, _term$2, _binds$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_name$1, _term$2, _binds$3, _defs$4]
        });
        var Fm$SmartMotive$nams$cont = _name$1 => _term$2 => _binds$3 => _defs$4 => Fm$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4);
        var arg = [_name$1, _term$2, _binds$3, _defs$4];
        while (true) {
            let [_name$1, _term$2, _binds$3, _defs$4] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $4932 = self.name;
                        var $4933 = self.indx;
                        var $4934 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4934;
                    case 'Fm.Term.ref':
                        var $4935 = self.name;
                        var $4936 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4936;
                    case 'Fm.Term.typ':
                        var $4937 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4937;
                    case 'Fm.Term.all':
                        var $4938 = self.eras;
                        var $4939 = self.self;
                        var $4940 = self.name;
                        var $4941 = self.xtyp;
                        var $4942 = self.body;
                        var $4943 = Fm$SmartMotive$nams$cont$(_name$1, $4942(Fm$Term$ref$($4939))(Fm$Term$ref$($4940)), List$cons$(String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($4940, List$nil)))), _binds$3), _defs$4);
                        return $4943;
                    case 'Fm.Term.lam':
                        var $4944 = self.name;
                        var $4945 = self.body;
                        var $4946 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4946;
                    case 'Fm.Term.app':
                        var $4947 = self.func;
                        var $4948 = self.argm;
                        var $4949 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4949;
                    case 'Fm.Term.let':
                        var $4950 = self.name;
                        var $4951 = self.expr;
                        var $4952 = self.body;
                        var $4953 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4953;
                    case 'Fm.Term.def':
                        var $4954 = self.name;
                        var $4955 = self.expr;
                        var $4956 = self.body;
                        var $4957 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4957;
                    case 'Fm.Term.ann':
                        var $4958 = self.done;
                        var $4959 = self.term;
                        var $4960 = self.type;
                        var $4961 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4961;
                    case 'Fm.Term.gol':
                        var $4962 = self.name;
                        var $4963 = self.dref;
                        var $4964 = self.verb;
                        var $4965 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4965;
                    case 'Fm.Term.hol':
                        var $4966 = self.path;
                        var $4967 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4967;
                    case 'Fm.Term.nat':
                        var $4968 = self.natx;
                        var $4969 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4969;
                    case 'Fm.Term.chr':
                        var $4970 = self.chrx;
                        var $4971 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4971;
                    case 'Fm.Term.str':
                        var $4972 = self.strx;
                        var $4973 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4973;
                    case 'Fm.Term.cse':
                        var $4974 = self.path;
                        var $4975 = self.expr;
                        var $4976 = self.name;
                        var $4977 = self.with;
                        var $4978 = self.cses;
                        var $4979 = self.moti;
                        var $4980 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4980;
                    case 'Fm.Term.ori':
                        var $4981 = self.orig;
                        var $4982 = self.expr;
                        var $4983 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4983;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$SmartMotive$nams$cont = x0 => x1 => x2 => x3 => Fm$SmartMotive$nams$cont$(x0, x1, x2, x3);

    function Fm$SmartMotive$nams$(_name$1, _type$2, _defs$3) {
        var self = Fm$Term$reduce$(_type$2, _defs$3);
        switch (self._) {
            case 'Fm.Term.var':
                var $4985 = self.name;
                var $4986 = self.indx;
                var $4987 = List$nil;
                var $4984 = $4987;
                break;
            case 'Fm.Term.ref':
                var $4988 = self.name;
                var $4989 = List$nil;
                var $4984 = $4989;
                break;
            case 'Fm.Term.typ':
                var $4990 = List$nil;
                var $4984 = $4990;
                break;
            case 'Fm.Term.all':
                var $4991 = self.eras;
                var $4992 = self.self;
                var $4993 = self.name;
                var $4994 = self.xtyp;
                var $4995 = self.body;
                var $4996 = Fm$SmartMotive$nams$cont$(_name$1, $4994, List$nil, _defs$3);
                var $4984 = $4996;
                break;
            case 'Fm.Term.lam':
                var $4997 = self.name;
                var $4998 = self.body;
                var $4999 = List$nil;
                var $4984 = $4999;
                break;
            case 'Fm.Term.app':
                var $5000 = self.func;
                var $5001 = self.argm;
                var $5002 = List$nil;
                var $4984 = $5002;
                break;
            case 'Fm.Term.let':
                var $5003 = self.name;
                var $5004 = self.expr;
                var $5005 = self.body;
                var $5006 = List$nil;
                var $4984 = $5006;
                break;
            case 'Fm.Term.def':
                var $5007 = self.name;
                var $5008 = self.expr;
                var $5009 = self.body;
                var $5010 = List$nil;
                var $4984 = $5010;
                break;
            case 'Fm.Term.ann':
                var $5011 = self.done;
                var $5012 = self.term;
                var $5013 = self.type;
                var $5014 = List$nil;
                var $4984 = $5014;
                break;
            case 'Fm.Term.gol':
                var $5015 = self.name;
                var $5016 = self.dref;
                var $5017 = self.verb;
                var $5018 = List$nil;
                var $4984 = $5018;
                break;
            case 'Fm.Term.hol':
                var $5019 = self.path;
                var $5020 = List$nil;
                var $4984 = $5020;
                break;
            case 'Fm.Term.nat':
                var $5021 = self.natx;
                var $5022 = List$nil;
                var $4984 = $5022;
                break;
            case 'Fm.Term.chr':
                var $5023 = self.chrx;
                var $5024 = List$nil;
                var $4984 = $5024;
                break;
            case 'Fm.Term.str':
                var $5025 = self.strx;
                var $5026 = List$nil;
                var $4984 = $5026;
                break;
            case 'Fm.Term.cse':
                var $5027 = self.path;
                var $5028 = self.expr;
                var $5029 = self.name;
                var $5030 = self.with;
                var $5031 = self.cses;
                var $5032 = self.moti;
                var $5033 = List$nil;
                var $4984 = $5033;
                break;
            case 'Fm.Term.ori':
                var $5034 = self.orig;
                var $5035 = self.expr;
                var $5036 = List$nil;
                var $4984 = $5036;
                break;
        };
        return $4984;
    };
    const Fm$SmartMotive$nams = x0 => x1 => x2 => Fm$SmartMotive$nams$(x0, x1, x2);

    function List$zip$(_as$3, _bs$4) {
        var self = _as$3;
        switch (self._) {
            case 'List.nil':
                var $5038 = List$nil;
                var $5037 = $5038;
                break;
            case 'List.cons':
                var $5039 = self.head;
                var $5040 = self.tail;
                var self = _bs$4;
                switch (self._) {
                    case 'List.nil':
                        var $5042 = List$nil;
                        var $5041 = $5042;
                        break;
                    case 'List.cons':
                        var $5043 = self.head;
                        var $5044 = self.tail;
                        var $5045 = List$cons$(Pair$new$($5039, $5043), List$zip$($5040, $5044));
                        var $5041 = $5045;
                        break;
                };
                var $5037 = $5041;
                break;
        };
        return $5037;
    };
    const List$zip = x0 => x1 => List$zip$(x0, x1);
    const Nat$gte = a0 => a1 => (a0 >= a1);
    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);

    function Fm$Term$serialize$name$(_name$1) {
        var $5046 = (fm_name_to_bits(_name$1));
        return $5046;
    };
    const Fm$Term$serialize$name = x0 => Fm$Term$serialize$name$(x0);

    function Fm$Term$serialize$(_term$1, _depth$2, _init$3, _diff$4, _x$5) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $5048 = self.name;
                var $5049 = self.indx;
                var self = ($5049 >= _init$3);
                if (self) {
                    var _name$8 = a1 => (a1 + (nat_to_bits(Nat$pred$((_depth$2 - $5049 <= 0n ? 0n : _depth$2 - $5049)))));
                    var $5051 = (((_name$8(_x$5) + '1') + '0') + '0');
                    var $5050 = $5051;
                } else {
                    var _name$8 = a1 => (a1 + (nat_to_bits($5049)));
                    var $5052 = (((_name$8(_x$5) + '0') + '1') + '0');
                    var $5050 = $5052;
                };
                var $5047 = $5050;
                break;
            case 'Fm.Term.ref':
                var $5053 = self.name;
                var _name$7 = a1 => (a1 + Fm$Term$serialize$name$($5053));
                var $5054 = (((_name$7(_x$5) + '0') + '0') + '0');
                var $5047 = $5054;
                break;
            case 'Fm.Term.typ':
                var $5055 = (((_x$5 + '1') + '1') + '0');
                var $5047 = $5055;
                break;
            case 'Fm.Term.all':
                var $5056 = self.eras;
                var $5057 = self.self;
                var $5058 = self.name;
                var $5059 = self.xtyp;
                var $5060 = self.body;
                var self = $5056;
                if (self) {
                    var $5062 = Bits$i;
                    var _eras$11 = $5062;
                } else {
                    var $5063 = Bits$o;
                    var _eras$11 = $5063;
                };
                var _self$12 = a1 => (a1 + (fm_name_to_bits($5057)));
                var _xtyp$13 = Fm$Term$serialize($5059)(_depth$2)(_init$3)(_diff$4);
                var _body$14 = Fm$Term$serialize($5060(Fm$Term$var$($5057, _depth$2))(Fm$Term$var$($5058, Nat$succ$(_depth$2))))(Nat$succ$(Nat$succ$(_depth$2)))(_init$3)(_diff$4);
                var $5061 = (((_eras$11(_self$12(_xtyp$13(_body$14(_x$5)))) + '0') + '0') + '1');
                var $5047 = $5061;
                break;
            case 'Fm.Term.lam':
                var $5064 = self.name;
                var $5065 = self.body;
                var _body$8 = Fm$Term$serialize($5065(Fm$Term$var$($5064, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $5066 = (((_body$8(_x$5) + '1') + '0') + '1');
                var $5047 = $5066;
                break;
            case 'Fm.Term.app':
                var $5067 = self.func;
                var $5068 = self.argm;
                var _func$8 = Fm$Term$serialize($5067)(_depth$2)(_init$3)(_diff$4);
                var _argm$9 = Fm$Term$serialize($5068)(_depth$2)(_init$3)(_diff$4);
                var $5069 = (((_func$8(_argm$9(_x$5)) + '0') + '1') + '1');
                var $5047 = $5069;
                break;
            case 'Fm.Term.let':
                var $5070 = self.name;
                var $5071 = self.expr;
                var $5072 = self.body;
                var _expr$9 = Fm$Term$serialize($5071)(_depth$2)(_init$3)(_diff$4);
                var _body$10 = Fm$Term$serialize($5072(Fm$Term$var$($5070, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $5073 = (((_expr$9(_body$10(_x$5)) + '1') + '1') + '1');
                var $5047 = $5073;
                break;
            case 'Fm.Term.def':
                var $5074 = self.name;
                var $5075 = self.expr;
                var $5076 = self.body;
                var $5077 = Fm$Term$serialize$($5076($5075), _depth$2, _init$3, _diff$4, _x$5);
                var $5047 = $5077;
                break;
            case 'Fm.Term.ann':
                var $5078 = self.done;
                var $5079 = self.term;
                var $5080 = self.type;
                var $5081 = Fm$Term$serialize$($5079, _depth$2, _init$3, _diff$4, _x$5);
                var $5047 = $5081;
                break;
            case 'Fm.Term.gol':
                var $5082 = self.name;
                var $5083 = self.dref;
                var $5084 = self.verb;
                var _name$9 = a1 => (a1 + (fm_name_to_bits($5082)));
                var $5085 = (((_name$9(_x$5) + '0') + '0') + '0');
                var $5047 = $5085;
                break;
            case 'Fm.Term.hol':
                var $5086 = self.path;
                var $5087 = _x$5;
                var $5047 = $5087;
                break;
            case 'Fm.Term.nat':
                var $5088 = self.natx;
                var $5089 = Fm$Term$serialize$(Fm$Term$unroll_nat$($5088), _depth$2, _init$3, _diff$4, _x$5);
                var $5047 = $5089;
                break;
            case 'Fm.Term.chr':
                var $5090 = self.chrx;
                var $5091 = Fm$Term$serialize$(Fm$Term$unroll_chr$($5090), _depth$2, _init$3, _diff$4, _x$5);
                var $5047 = $5091;
                break;
            case 'Fm.Term.str':
                var $5092 = self.strx;
                var $5093 = Fm$Term$serialize$(Fm$Term$unroll_str$($5092), _depth$2, _init$3, _diff$4, _x$5);
                var $5047 = $5093;
                break;
            case 'Fm.Term.cse':
                var $5094 = self.path;
                var $5095 = self.expr;
                var $5096 = self.name;
                var $5097 = self.with;
                var $5098 = self.cses;
                var $5099 = self.moti;
                var $5100 = _diff$4(_x$5);
                var $5047 = $5100;
                break;
            case 'Fm.Term.ori':
                var $5101 = self.orig;
                var $5102 = self.expr;
                var $5103 = Fm$Term$serialize$($5102, _depth$2, _init$3, _diff$4, _x$5);
                var $5047 = $5103;
                break;
        };
        return $5047;
    };
    const Fm$Term$serialize = x0 => x1 => x2 => x3 => x4 => Fm$Term$serialize$(x0, x1, x2, x3, x4);
    const Bits$eql = a0 => a1 => (a1 === a0);

    function Fm$Term$identical$(_a$1, _b$2, _lv$3) {
        var _ah$4 = Fm$Term$serialize$(_a$1, _lv$3, _lv$3, Bits$o, Bits$e);
        var _bh$5 = Fm$Term$serialize$(_b$2, _lv$3, _lv$3, Bits$i, Bits$e);
        var $5104 = (_bh$5 === _ah$4);
        return $5104;
    };
    const Fm$Term$identical = x0 => x1 => x2 => Fm$Term$identical$(x0, x1, x2);

    function Fm$SmartMotive$replace$(_term$1, _from$2, _to$3, _lv$4) {
        var self = Fm$Term$identical$(_term$1, _from$2, _lv$4);
        if (self) {
            var $5106 = _to$3;
            var $5105 = $5106;
        } else {
            var self = _term$1;
            switch (self._) {
                case 'Fm.Term.var':
                    var $5108 = self.name;
                    var $5109 = self.indx;
                    var $5110 = Fm$Term$var$($5108, $5109);
                    var $5107 = $5110;
                    break;
                case 'Fm.Term.ref':
                    var $5111 = self.name;
                    var $5112 = Fm$Term$ref$($5111);
                    var $5107 = $5112;
                    break;
                case 'Fm.Term.typ':
                    var $5113 = Fm$Term$typ;
                    var $5107 = $5113;
                    break;
                case 'Fm.Term.all':
                    var $5114 = self.eras;
                    var $5115 = self.self;
                    var $5116 = self.name;
                    var $5117 = self.xtyp;
                    var $5118 = self.body;
                    var _xtyp$10 = Fm$SmartMotive$replace$($5117, _from$2, _to$3, _lv$4);
                    var _body$11 = $5118(Fm$Term$ref$($5115))(Fm$Term$ref$($5116));
                    var _body$12 = Fm$SmartMotive$replace$(_body$11, _from$2, _to$3, Nat$succ$(Nat$succ$(_lv$4)));
                    var $5119 = Fm$Term$all$($5114, $5115, $5116, _xtyp$10, (_s$13 => _x$14 => {
                        var $5120 = _body$12;
                        return $5120;
                    }));
                    var $5107 = $5119;
                    break;
                case 'Fm.Term.lam':
                    var $5121 = self.name;
                    var $5122 = self.body;
                    var _body$7 = $5122(Fm$Term$ref$($5121));
                    var _body$8 = Fm$SmartMotive$replace$(_body$7, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5123 = Fm$Term$lam$($5121, (_x$9 => {
                        var $5124 = _body$8;
                        return $5124;
                    }));
                    var $5107 = $5123;
                    break;
                case 'Fm.Term.app':
                    var $5125 = self.func;
                    var $5126 = self.argm;
                    var _func$7 = Fm$SmartMotive$replace$($5125, _from$2, _to$3, _lv$4);
                    var _argm$8 = Fm$SmartMotive$replace$($5126, _from$2, _to$3, _lv$4);
                    var $5127 = Fm$Term$app$(_func$7, _argm$8);
                    var $5107 = $5127;
                    break;
                case 'Fm.Term.let':
                    var $5128 = self.name;
                    var $5129 = self.expr;
                    var $5130 = self.body;
                    var _expr$8 = Fm$SmartMotive$replace$($5129, _from$2, _to$3, _lv$4);
                    var _body$9 = $5130(Fm$Term$ref$($5128));
                    var _body$10 = Fm$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5131 = Fm$Term$let$($5128, _expr$8, (_x$11 => {
                        var $5132 = _body$10;
                        return $5132;
                    }));
                    var $5107 = $5131;
                    break;
                case 'Fm.Term.def':
                    var $5133 = self.name;
                    var $5134 = self.expr;
                    var $5135 = self.body;
                    var _expr$8 = Fm$SmartMotive$replace$($5134, _from$2, _to$3, _lv$4);
                    var _body$9 = $5135(Fm$Term$ref$($5133));
                    var _body$10 = Fm$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5136 = Fm$Term$def$($5133, _expr$8, (_x$11 => {
                        var $5137 = _body$10;
                        return $5137;
                    }));
                    var $5107 = $5136;
                    break;
                case 'Fm.Term.ann':
                    var $5138 = self.done;
                    var $5139 = self.term;
                    var $5140 = self.type;
                    var _term$8 = Fm$SmartMotive$replace$($5139, _from$2, _to$3, _lv$4);
                    var _type$9 = Fm$SmartMotive$replace$($5140, _from$2, _to$3, _lv$4);
                    var $5141 = Fm$Term$ann$($5138, _term$8, _type$9);
                    var $5107 = $5141;
                    break;
                case 'Fm.Term.gol':
                    var $5142 = self.name;
                    var $5143 = self.dref;
                    var $5144 = self.verb;
                    var $5145 = _term$1;
                    var $5107 = $5145;
                    break;
                case 'Fm.Term.hol':
                    var $5146 = self.path;
                    var $5147 = _term$1;
                    var $5107 = $5147;
                    break;
                case 'Fm.Term.nat':
                    var $5148 = self.natx;
                    var $5149 = _term$1;
                    var $5107 = $5149;
                    break;
                case 'Fm.Term.chr':
                    var $5150 = self.chrx;
                    var $5151 = _term$1;
                    var $5107 = $5151;
                    break;
                case 'Fm.Term.str':
                    var $5152 = self.strx;
                    var $5153 = _term$1;
                    var $5107 = $5153;
                    break;
                case 'Fm.Term.cse':
                    var $5154 = self.path;
                    var $5155 = self.expr;
                    var $5156 = self.name;
                    var $5157 = self.with;
                    var $5158 = self.cses;
                    var $5159 = self.moti;
                    var $5160 = _term$1;
                    var $5107 = $5160;
                    break;
                case 'Fm.Term.ori':
                    var $5161 = self.orig;
                    var $5162 = self.expr;
                    var $5163 = Fm$SmartMotive$replace$($5162, _from$2, _to$3, _lv$4);
                    var $5107 = $5163;
                    break;
            };
            var $5105 = $5107;
        };
        return $5105;
    };
    const Fm$SmartMotive$replace = x0 => x1 => x2 => x3 => Fm$SmartMotive$replace$(x0, x1, x2, x3);

    function Fm$SmartMotive$make$(_name$1, _expr$2, _type$3, _moti$4, _lv$5, _defs$6) {
        var _vals$7 = Fm$SmartMotive$vals$(_expr$2, _type$3, _defs$6);
        var _nams$8 = Fm$SmartMotive$nams$(_name$1, _type$3, _defs$6);
        var _subs$9 = List$zip$(_nams$8, _vals$7);
        var _moti$10 = List$fold$(_subs$9, _moti$4, (_sub$10 => _moti$11 => {
            var self = _sub$10;
            switch (self._) {
                case 'Pair.new':
                    var $5166 = self.fst;
                    var $5167 = self.snd;
                    var $5168 = Fm$SmartMotive$replace$(_moti$11, $5167, Fm$Term$ref$($5166), _lv$5);
                    var $5165 = $5168;
                    break;
            };
            return $5165;
        }));
        var $5164 = _moti$10;
        return $5164;
    };
    const Fm$SmartMotive$make = x0 => x1 => x2 => x3 => x4 => x5 => Fm$SmartMotive$make$(x0, x1, x2, x3, x4, x5);

    function Fm$Term$desugar_cse$motive$(_wyth$1, _moti$2) {
        var self = _wyth$1;
        switch (self._) {
            case 'List.nil':
                var $5170 = _moti$2;
                var $5169 = $5170;
                break;
            case 'List.cons':
                var $5171 = self.head;
                var $5172 = self.tail;
                var self = $5171;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $5174 = self.file;
                        var $5175 = self.code;
                        var $5176 = self.orig;
                        var $5177 = self.name;
                        var $5178 = self.term;
                        var $5179 = self.type;
                        var $5180 = self.isct;
                        var $5181 = self.arit;
                        var $5182 = self.stat;
                        var $5183 = Fm$Term$all$(Bool$false, "", $5177, $5179, (_s$14 => _x$15 => {
                            var $5184 = Fm$Term$desugar_cse$motive$($5172, _moti$2);
                            return $5184;
                        }));
                        var $5173 = $5183;
                        break;
                };
                var $5169 = $5173;
                break;
        };
        return $5169;
    };
    const Fm$Term$desugar_cse$motive = x0 => x1 => Fm$Term$desugar_cse$motive$(x0, x1);

    function String$is_empty$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $5186 = Bool$true;
            var $5185 = $5186;
        } else {
            var $5187 = self.charCodeAt(0);
            var $5188 = self.slice(1);
            var $5189 = Bool$false;
            var $5185 = $5189;
        };
        return $5185;
    };
    const String$is_empty = x0 => String$is_empty$(x0);

    function Fm$Term$desugar_cse$argument$(_name$1, _wyth$2, _type$3, _body$4, _defs$5) {
        var self = Fm$Term$reduce$(_type$3, _defs$5);
        switch (self._) {
            case 'Fm.Term.var':
                var $5191 = self.name;
                var $5192 = self.indx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5194 = _body$4;
                        var $5193 = $5194;
                        break;
                    case 'List.cons':
                        var $5195 = self.head;
                        var $5196 = self.tail;
                        var self = $5195;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5198 = self.file;
                                var $5199 = self.code;
                                var $5200 = self.orig;
                                var $5201 = self.name;
                                var $5202 = self.term;
                                var $5203 = self.type;
                                var $5204 = self.isct;
                                var $5205 = self.arit;
                                var $5206 = self.stat;
                                var $5207 = Fm$Term$lam$($5201, (_x$19 => {
                                    var $5208 = Fm$Term$desugar_cse$argument$(_name$1, $5196, _type$3, _body$4, _defs$5);
                                    return $5208;
                                }));
                                var $5197 = $5207;
                                break;
                        };
                        var $5193 = $5197;
                        break;
                };
                var $5190 = $5193;
                break;
            case 'Fm.Term.ref':
                var $5209 = self.name;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5211 = _body$4;
                        var $5210 = $5211;
                        break;
                    case 'List.cons':
                        var $5212 = self.head;
                        var $5213 = self.tail;
                        var self = $5212;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5215 = self.file;
                                var $5216 = self.code;
                                var $5217 = self.orig;
                                var $5218 = self.name;
                                var $5219 = self.term;
                                var $5220 = self.type;
                                var $5221 = self.isct;
                                var $5222 = self.arit;
                                var $5223 = self.stat;
                                var $5224 = Fm$Term$lam$($5218, (_x$18 => {
                                    var $5225 = Fm$Term$desugar_cse$argument$(_name$1, $5213, _type$3, _body$4, _defs$5);
                                    return $5225;
                                }));
                                var $5214 = $5224;
                                break;
                        };
                        var $5210 = $5214;
                        break;
                };
                var $5190 = $5210;
                break;
            case 'Fm.Term.typ':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5227 = _body$4;
                        var $5226 = $5227;
                        break;
                    case 'List.cons':
                        var $5228 = self.head;
                        var $5229 = self.tail;
                        var self = $5228;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5231 = self.file;
                                var $5232 = self.code;
                                var $5233 = self.orig;
                                var $5234 = self.name;
                                var $5235 = self.term;
                                var $5236 = self.type;
                                var $5237 = self.isct;
                                var $5238 = self.arit;
                                var $5239 = self.stat;
                                var $5240 = Fm$Term$lam$($5234, (_x$17 => {
                                    var $5241 = Fm$Term$desugar_cse$argument$(_name$1, $5229, _type$3, _body$4, _defs$5);
                                    return $5241;
                                }));
                                var $5230 = $5240;
                                break;
                        };
                        var $5226 = $5230;
                        break;
                };
                var $5190 = $5226;
                break;
            case 'Fm.Term.all':
                var $5242 = self.eras;
                var $5243 = self.self;
                var $5244 = self.name;
                var $5245 = self.xtyp;
                var $5246 = self.body;
                var $5247 = Fm$Term$lam$((() => {
                    var self = String$is_empty$($5244);
                    if (self) {
                        var $5248 = _name$1;
                        return $5248;
                    } else {
                        var $5249 = String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($5244, List$nil))));
                        return $5249;
                    };
                })(), (_x$11 => {
                    var $5250 = Fm$Term$desugar_cse$argument$(_name$1, _wyth$2, $5246(Fm$Term$var$($5243, 0n))(Fm$Term$var$($5244, 0n)), _body$4, _defs$5);
                    return $5250;
                }));
                var $5190 = $5247;
                break;
            case 'Fm.Term.lam':
                var $5251 = self.name;
                var $5252 = self.body;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5254 = _body$4;
                        var $5253 = $5254;
                        break;
                    case 'List.cons':
                        var $5255 = self.head;
                        var $5256 = self.tail;
                        var self = $5255;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5258 = self.file;
                                var $5259 = self.code;
                                var $5260 = self.orig;
                                var $5261 = self.name;
                                var $5262 = self.term;
                                var $5263 = self.type;
                                var $5264 = self.isct;
                                var $5265 = self.arit;
                                var $5266 = self.stat;
                                var $5267 = Fm$Term$lam$($5261, (_x$19 => {
                                    var $5268 = Fm$Term$desugar_cse$argument$(_name$1, $5256, _type$3, _body$4, _defs$5);
                                    return $5268;
                                }));
                                var $5257 = $5267;
                                break;
                        };
                        var $5253 = $5257;
                        break;
                };
                var $5190 = $5253;
                break;
            case 'Fm.Term.app':
                var $5269 = self.func;
                var $5270 = self.argm;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5272 = _body$4;
                        var $5271 = $5272;
                        break;
                    case 'List.cons':
                        var $5273 = self.head;
                        var $5274 = self.tail;
                        var self = $5273;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5276 = self.file;
                                var $5277 = self.code;
                                var $5278 = self.orig;
                                var $5279 = self.name;
                                var $5280 = self.term;
                                var $5281 = self.type;
                                var $5282 = self.isct;
                                var $5283 = self.arit;
                                var $5284 = self.stat;
                                var $5285 = Fm$Term$lam$($5279, (_x$19 => {
                                    var $5286 = Fm$Term$desugar_cse$argument$(_name$1, $5274, _type$3, _body$4, _defs$5);
                                    return $5286;
                                }));
                                var $5275 = $5285;
                                break;
                        };
                        var $5271 = $5275;
                        break;
                };
                var $5190 = $5271;
                break;
            case 'Fm.Term.let':
                var $5287 = self.name;
                var $5288 = self.expr;
                var $5289 = self.body;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5291 = _body$4;
                        var $5290 = $5291;
                        break;
                    case 'List.cons':
                        var $5292 = self.head;
                        var $5293 = self.tail;
                        var self = $5292;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5295 = self.file;
                                var $5296 = self.code;
                                var $5297 = self.orig;
                                var $5298 = self.name;
                                var $5299 = self.term;
                                var $5300 = self.type;
                                var $5301 = self.isct;
                                var $5302 = self.arit;
                                var $5303 = self.stat;
                                var $5304 = Fm$Term$lam$($5298, (_x$20 => {
                                    var $5305 = Fm$Term$desugar_cse$argument$(_name$1, $5293, _type$3, _body$4, _defs$5);
                                    return $5305;
                                }));
                                var $5294 = $5304;
                                break;
                        };
                        var $5290 = $5294;
                        break;
                };
                var $5190 = $5290;
                break;
            case 'Fm.Term.def':
                var $5306 = self.name;
                var $5307 = self.expr;
                var $5308 = self.body;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5310 = _body$4;
                        var $5309 = $5310;
                        break;
                    case 'List.cons':
                        var $5311 = self.head;
                        var $5312 = self.tail;
                        var self = $5311;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5314 = self.file;
                                var $5315 = self.code;
                                var $5316 = self.orig;
                                var $5317 = self.name;
                                var $5318 = self.term;
                                var $5319 = self.type;
                                var $5320 = self.isct;
                                var $5321 = self.arit;
                                var $5322 = self.stat;
                                var $5323 = Fm$Term$lam$($5317, (_x$20 => {
                                    var $5324 = Fm$Term$desugar_cse$argument$(_name$1, $5312, _type$3, _body$4, _defs$5);
                                    return $5324;
                                }));
                                var $5313 = $5323;
                                break;
                        };
                        var $5309 = $5313;
                        break;
                };
                var $5190 = $5309;
                break;
            case 'Fm.Term.ann':
                var $5325 = self.done;
                var $5326 = self.term;
                var $5327 = self.type;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5329 = _body$4;
                        var $5328 = $5329;
                        break;
                    case 'List.cons':
                        var $5330 = self.head;
                        var $5331 = self.tail;
                        var self = $5330;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5333 = self.file;
                                var $5334 = self.code;
                                var $5335 = self.orig;
                                var $5336 = self.name;
                                var $5337 = self.term;
                                var $5338 = self.type;
                                var $5339 = self.isct;
                                var $5340 = self.arit;
                                var $5341 = self.stat;
                                var $5342 = Fm$Term$lam$($5336, (_x$20 => {
                                    var $5343 = Fm$Term$desugar_cse$argument$(_name$1, $5331, _type$3, _body$4, _defs$5);
                                    return $5343;
                                }));
                                var $5332 = $5342;
                                break;
                        };
                        var $5328 = $5332;
                        break;
                };
                var $5190 = $5328;
                break;
            case 'Fm.Term.gol':
                var $5344 = self.name;
                var $5345 = self.dref;
                var $5346 = self.verb;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5348 = _body$4;
                        var $5347 = $5348;
                        break;
                    case 'List.cons':
                        var $5349 = self.head;
                        var $5350 = self.tail;
                        var self = $5349;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5352 = self.file;
                                var $5353 = self.code;
                                var $5354 = self.orig;
                                var $5355 = self.name;
                                var $5356 = self.term;
                                var $5357 = self.type;
                                var $5358 = self.isct;
                                var $5359 = self.arit;
                                var $5360 = self.stat;
                                var $5361 = Fm$Term$lam$($5355, (_x$20 => {
                                    var $5362 = Fm$Term$desugar_cse$argument$(_name$1, $5350, _type$3, _body$4, _defs$5);
                                    return $5362;
                                }));
                                var $5351 = $5361;
                                break;
                        };
                        var $5347 = $5351;
                        break;
                };
                var $5190 = $5347;
                break;
            case 'Fm.Term.hol':
                var $5363 = self.path;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5365 = _body$4;
                        var $5364 = $5365;
                        break;
                    case 'List.cons':
                        var $5366 = self.head;
                        var $5367 = self.tail;
                        var self = $5366;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5369 = self.file;
                                var $5370 = self.code;
                                var $5371 = self.orig;
                                var $5372 = self.name;
                                var $5373 = self.term;
                                var $5374 = self.type;
                                var $5375 = self.isct;
                                var $5376 = self.arit;
                                var $5377 = self.stat;
                                var $5378 = Fm$Term$lam$($5372, (_x$18 => {
                                    var $5379 = Fm$Term$desugar_cse$argument$(_name$1, $5367, _type$3, _body$4, _defs$5);
                                    return $5379;
                                }));
                                var $5368 = $5378;
                                break;
                        };
                        var $5364 = $5368;
                        break;
                };
                var $5190 = $5364;
                break;
            case 'Fm.Term.nat':
                var $5380 = self.natx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5382 = _body$4;
                        var $5381 = $5382;
                        break;
                    case 'List.cons':
                        var $5383 = self.head;
                        var $5384 = self.tail;
                        var self = $5383;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5386 = self.file;
                                var $5387 = self.code;
                                var $5388 = self.orig;
                                var $5389 = self.name;
                                var $5390 = self.term;
                                var $5391 = self.type;
                                var $5392 = self.isct;
                                var $5393 = self.arit;
                                var $5394 = self.stat;
                                var $5395 = Fm$Term$lam$($5389, (_x$18 => {
                                    var $5396 = Fm$Term$desugar_cse$argument$(_name$1, $5384, _type$3, _body$4, _defs$5);
                                    return $5396;
                                }));
                                var $5385 = $5395;
                                break;
                        };
                        var $5381 = $5385;
                        break;
                };
                var $5190 = $5381;
                break;
            case 'Fm.Term.chr':
                var $5397 = self.chrx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5399 = _body$4;
                        var $5398 = $5399;
                        break;
                    case 'List.cons':
                        var $5400 = self.head;
                        var $5401 = self.tail;
                        var self = $5400;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5403 = self.file;
                                var $5404 = self.code;
                                var $5405 = self.orig;
                                var $5406 = self.name;
                                var $5407 = self.term;
                                var $5408 = self.type;
                                var $5409 = self.isct;
                                var $5410 = self.arit;
                                var $5411 = self.stat;
                                var $5412 = Fm$Term$lam$($5406, (_x$18 => {
                                    var $5413 = Fm$Term$desugar_cse$argument$(_name$1, $5401, _type$3, _body$4, _defs$5);
                                    return $5413;
                                }));
                                var $5402 = $5412;
                                break;
                        };
                        var $5398 = $5402;
                        break;
                };
                var $5190 = $5398;
                break;
            case 'Fm.Term.str':
                var $5414 = self.strx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5416 = _body$4;
                        var $5415 = $5416;
                        break;
                    case 'List.cons':
                        var $5417 = self.head;
                        var $5418 = self.tail;
                        var self = $5417;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5420 = self.file;
                                var $5421 = self.code;
                                var $5422 = self.orig;
                                var $5423 = self.name;
                                var $5424 = self.term;
                                var $5425 = self.type;
                                var $5426 = self.isct;
                                var $5427 = self.arit;
                                var $5428 = self.stat;
                                var $5429 = Fm$Term$lam$($5423, (_x$18 => {
                                    var $5430 = Fm$Term$desugar_cse$argument$(_name$1, $5418, _type$3, _body$4, _defs$5);
                                    return $5430;
                                }));
                                var $5419 = $5429;
                                break;
                        };
                        var $5415 = $5419;
                        break;
                };
                var $5190 = $5415;
                break;
            case 'Fm.Term.cse':
                var $5431 = self.path;
                var $5432 = self.expr;
                var $5433 = self.name;
                var $5434 = self.with;
                var $5435 = self.cses;
                var $5436 = self.moti;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5438 = _body$4;
                        var $5437 = $5438;
                        break;
                    case 'List.cons':
                        var $5439 = self.head;
                        var $5440 = self.tail;
                        var self = $5439;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5442 = self.file;
                                var $5443 = self.code;
                                var $5444 = self.orig;
                                var $5445 = self.name;
                                var $5446 = self.term;
                                var $5447 = self.type;
                                var $5448 = self.isct;
                                var $5449 = self.arit;
                                var $5450 = self.stat;
                                var $5451 = Fm$Term$lam$($5445, (_x$23 => {
                                    var $5452 = Fm$Term$desugar_cse$argument$(_name$1, $5440, _type$3, _body$4, _defs$5);
                                    return $5452;
                                }));
                                var $5441 = $5451;
                                break;
                        };
                        var $5437 = $5441;
                        break;
                };
                var $5190 = $5437;
                break;
            case 'Fm.Term.ori':
                var $5453 = self.orig;
                var $5454 = self.expr;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5456 = _body$4;
                        var $5455 = $5456;
                        break;
                    case 'List.cons':
                        var $5457 = self.head;
                        var $5458 = self.tail;
                        var self = $5457;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5460 = self.file;
                                var $5461 = self.code;
                                var $5462 = self.orig;
                                var $5463 = self.name;
                                var $5464 = self.term;
                                var $5465 = self.type;
                                var $5466 = self.isct;
                                var $5467 = self.arit;
                                var $5468 = self.stat;
                                var $5469 = Fm$Term$lam$($5463, (_x$19 => {
                                    var $5470 = Fm$Term$desugar_cse$argument$(_name$1, $5458, _type$3, _body$4, _defs$5);
                                    return $5470;
                                }));
                                var $5459 = $5469;
                                break;
                        };
                        var $5455 = $5459;
                        break;
                };
                var $5190 = $5455;
                break;
        };
        return $5190;
    };
    const Fm$Term$desugar_cse$argument = x0 => x1 => x2 => x3 => x4 => Fm$Term$desugar_cse$argument$(x0, x1, x2, x3, x4);

    function Maybe$or$(_a$2, _b$3) {
        var self = _a$2;
        switch (self._) {
            case 'Maybe.none':
                var $5472 = _b$3;
                var $5471 = $5472;
                break;
            case 'Maybe.some':
                var $5473 = self.value;
                var $5474 = Maybe$some$($5473);
                var $5471 = $5474;
                break;
        };
        return $5471;
    };
    const Maybe$or = x0 => x1 => Maybe$or$(x0, x1);

    function Fm$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) {
        var Fm$Term$desugar_cse$cases$ = (_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) => ({
            ctr: 'TCO',
            arg: [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7]
        });
        var Fm$Term$desugar_cse$cases = _expr$1 => _name$2 => _wyth$3 => _cses$4 => _type$5 => _defs$6 => _ctxt$7 => Fm$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7);
        var arg = [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7];
        while (true) {
            let [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_type$5, _defs$6);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5475 = self.name;
                        var $5476 = self.indx;
                        var _expr$10 = (() => {
                            var $5479 = _expr$1;
                            var $5480 = _wyth$3;
                            let _expr$11 = $5479;
                            let _defn$10;
                            while ($5480._ === 'List.cons') {
                                _defn$10 = $5480.head;
                                var $5479 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5481 = self.file;
                                            var $5482 = self.code;
                                            var $5483 = self.orig;
                                            var $5484 = self.name;
                                            var $5485 = self.term;
                                            var $5486 = self.type;
                                            var $5487 = self.isct;
                                            var $5488 = self.arit;
                                            var $5489 = self.stat;
                                            var $5490 = $5485;
                                            return $5490;
                                    };
                                })());
                                _expr$11 = $5479;
                                $5480 = $5480.tail;
                            }
                            return _expr$11;
                        })();
                        var $5477 = _expr$10;
                        return $5477;
                    case 'Fm.Term.ref':
                        var $5491 = self.name;
                        var _expr$9 = (() => {
                            var $5494 = _expr$1;
                            var $5495 = _wyth$3;
                            let _expr$10 = $5494;
                            let _defn$9;
                            while ($5495._ === 'List.cons') {
                                _defn$9 = $5495.head;
                                var $5494 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5496 = self.file;
                                            var $5497 = self.code;
                                            var $5498 = self.orig;
                                            var $5499 = self.name;
                                            var $5500 = self.term;
                                            var $5501 = self.type;
                                            var $5502 = self.isct;
                                            var $5503 = self.arit;
                                            var $5504 = self.stat;
                                            var $5505 = $5500;
                                            return $5505;
                                    };
                                })());
                                _expr$10 = $5494;
                                $5495 = $5495.tail;
                            }
                            return _expr$10;
                        })();
                        var $5492 = _expr$9;
                        return $5492;
                    case 'Fm.Term.typ':
                        var _expr$8 = (() => {
                            var $5508 = _expr$1;
                            var $5509 = _wyth$3;
                            let _expr$9 = $5508;
                            let _defn$8;
                            while ($5509._ === 'List.cons') {
                                _defn$8 = $5509.head;
                                var $5508 = Fm$Term$app$(_expr$9, (() => {
                                    var self = _defn$8;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5510 = self.file;
                                            var $5511 = self.code;
                                            var $5512 = self.orig;
                                            var $5513 = self.name;
                                            var $5514 = self.term;
                                            var $5515 = self.type;
                                            var $5516 = self.isct;
                                            var $5517 = self.arit;
                                            var $5518 = self.stat;
                                            var $5519 = $5514;
                                            return $5519;
                                    };
                                })());
                                _expr$9 = $5508;
                                $5509 = $5509.tail;
                            }
                            return _expr$9;
                        })();
                        var $5506 = _expr$8;
                        return $5506;
                    case 'Fm.Term.all':
                        var $5520 = self.eras;
                        var $5521 = self.self;
                        var $5522 = self.name;
                        var $5523 = self.xtyp;
                        var $5524 = self.body;
                        var _got$13 = Maybe$or$(Fm$get$($5522, _cses$4), Fm$get$("_", _cses$4));
                        var self = _got$13;
                        switch (self._) {
                            case 'Maybe.none':
                                var _expr$14 = (() => {
                                    var $5528 = _expr$1;
                                    var $5529 = _wyth$3;
                                    let _expr$15 = $5528;
                                    let _defn$14;
                                    while ($5529._ === 'List.cons') {
                                        _defn$14 = $5529.head;
                                        var self = _defn$14;
                                        switch (self._) {
                                            case 'Fm.Def.new':
                                                var $5530 = self.file;
                                                var $5531 = self.code;
                                                var $5532 = self.orig;
                                                var $5533 = self.name;
                                                var $5534 = self.term;
                                                var $5535 = self.type;
                                                var $5536 = self.isct;
                                                var $5537 = self.arit;
                                                var $5538 = self.stat;
                                                var $5539 = Fm$Term$app$(_expr$15, $5534);
                                                var $5528 = $5539;
                                                break;
                                        };
                                        _expr$15 = $5528;
                                        $5529 = $5529.tail;
                                    }
                                    return _expr$15;
                                })();
                                var $5526 = _expr$14;
                                var $5525 = $5526;
                                break;
                            case 'Maybe.some':
                                var $5540 = self.value;
                                var _argm$15 = Fm$Term$desugar_cse$argument$(_name$2, _wyth$3, $5523, $5540, _defs$6);
                                var _expr$16 = Fm$Term$app$(_expr$1, _argm$15);
                                var _type$17 = $5524(Fm$Term$var$($5521, 0n))(Fm$Term$var$($5522, 0n));
                                var $5541 = Fm$Term$desugar_cse$cases$(_expr$16, _name$2, _wyth$3, _cses$4, _type$17, _defs$6, _ctxt$7);
                                var $5525 = $5541;
                                break;
                        };
                        return $5525;
                    case 'Fm.Term.lam':
                        var $5542 = self.name;
                        var $5543 = self.body;
                        var _expr$10 = (() => {
                            var $5546 = _expr$1;
                            var $5547 = _wyth$3;
                            let _expr$11 = $5546;
                            let _defn$10;
                            while ($5547._ === 'List.cons') {
                                _defn$10 = $5547.head;
                                var $5546 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5548 = self.file;
                                            var $5549 = self.code;
                                            var $5550 = self.orig;
                                            var $5551 = self.name;
                                            var $5552 = self.term;
                                            var $5553 = self.type;
                                            var $5554 = self.isct;
                                            var $5555 = self.arit;
                                            var $5556 = self.stat;
                                            var $5557 = $5552;
                                            return $5557;
                                    };
                                })());
                                _expr$11 = $5546;
                                $5547 = $5547.tail;
                            }
                            return _expr$11;
                        })();
                        var $5544 = _expr$10;
                        return $5544;
                    case 'Fm.Term.app':
                        var $5558 = self.func;
                        var $5559 = self.argm;
                        var _expr$10 = (() => {
                            var $5562 = _expr$1;
                            var $5563 = _wyth$3;
                            let _expr$11 = $5562;
                            let _defn$10;
                            while ($5563._ === 'List.cons') {
                                _defn$10 = $5563.head;
                                var $5562 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5564 = self.file;
                                            var $5565 = self.code;
                                            var $5566 = self.orig;
                                            var $5567 = self.name;
                                            var $5568 = self.term;
                                            var $5569 = self.type;
                                            var $5570 = self.isct;
                                            var $5571 = self.arit;
                                            var $5572 = self.stat;
                                            var $5573 = $5568;
                                            return $5573;
                                    };
                                })());
                                _expr$11 = $5562;
                                $5563 = $5563.tail;
                            }
                            return _expr$11;
                        })();
                        var $5560 = _expr$10;
                        return $5560;
                    case 'Fm.Term.let':
                        var $5574 = self.name;
                        var $5575 = self.expr;
                        var $5576 = self.body;
                        var _expr$11 = (() => {
                            var $5579 = _expr$1;
                            var $5580 = _wyth$3;
                            let _expr$12 = $5579;
                            let _defn$11;
                            while ($5580._ === 'List.cons') {
                                _defn$11 = $5580.head;
                                var $5579 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5581 = self.file;
                                            var $5582 = self.code;
                                            var $5583 = self.orig;
                                            var $5584 = self.name;
                                            var $5585 = self.term;
                                            var $5586 = self.type;
                                            var $5587 = self.isct;
                                            var $5588 = self.arit;
                                            var $5589 = self.stat;
                                            var $5590 = $5585;
                                            return $5590;
                                    };
                                })());
                                _expr$12 = $5579;
                                $5580 = $5580.tail;
                            }
                            return _expr$12;
                        })();
                        var $5577 = _expr$11;
                        return $5577;
                    case 'Fm.Term.def':
                        var $5591 = self.name;
                        var $5592 = self.expr;
                        var $5593 = self.body;
                        var _expr$11 = (() => {
                            var $5596 = _expr$1;
                            var $5597 = _wyth$3;
                            let _expr$12 = $5596;
                            let _defn$11;
                            while ($5597._ === 'List.cons') {
                                _defn$11 = $5597.head;
                                var $5596 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5598 = self.file;
                                            var $5599 = self.code;
                                            var $5600 = self.orig;
                                            var $5601 = self.name;
                                            var $5602 = self.term;
                                            var $5603 = self.type;
                                            var $5604 = self.isct;
                                            var $5605 = self.arit;
                                            var $5606 = self.stat;
                                            var $5607 = $5602;
                                            return $5607;
                                    };
                                })());
                                _expr$12 = $5596;
                                $5597 = $5597.tail;
                            }
                            return _expr$12;
                        })();
                        var $5594 = _expr$11;
                        return $5594;
                    case 'Fm.Term.ann':
                        var $5608 = self.done;
                        var $5609 = self.term;
                        var $5610 = self.type;
                        var _expr$11 = (() => {
                            var $5613 = _expr$1;
                            var $5614 = _wyth$3;
                            let _expr$12 = $5613;
                            let _defn$11;
                            while ($5614._ === 'List.cons') {
                                _defn$11 = $5614.head;
                                var $5613 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5615 = self.file;
                                            var $5616 = self.code;
                                            var $5617 = self.orig;
                                            var $5618 = self.name;
                                            var $5619 = self.term;
                                            var $5620 = self.type;
                                            var $5621 = self.isct;
                                            var $5622 = self.arit;
                                            var $5623 = self.stat;
                                            var $5624 = $5619;
                                            return $5624;
                                    };
                                })());
                                _expr$12 = $5613;
                                $5614 = $5614.tail;
                            }
                            return _expr$12;
                        })();
                        var $5611 = _expr$11;
                        return $5611;
                    case 'Fm.Term.gol':
                        var $5625 = self.name;
                        var $5626 = self.dref;
                        var $5627 = self.verb;
                        var _expr$11 = (() => {
                            var $5630 = _expr$1;
                            var $5631 = _wyth$3;
                            let _expr$12 = $5630;
                            let _defn$11;
                            while ($5631._ === 'List.cons') {
                                _defn$11 = $5631.head;
                                var $5630 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5632 = self.file;
                                            var $5633 = self.code;
                                            var $5634 = self.orig;
                                            var $5635 = self.name;
                                            var $5636 = self.term;
                                            var $5637 = self.type;
                                            var $5638 = self.isct;
                                            var $5639 = self.arit;
                                            var $5640 = self.stat;
                                            var $5641 = $5636;
                                            return $5641;
                                    };
                                })());
                                _expr$12 = $5630;
                                $5631 = $5631.tail;
                            }
                            return _expr$12;
                        })();
                        var $5628 = _expr$11;
                        return $5628;
                    case 'Fm.Term.hol':
                        var $5642 = self.path;
                        var _expr$9 = (() => {
                            var $5645 = _expr$1;
                            var $5646 = _wyth$3;
                            let _expr$10 = $5645;
                            let _defn$9;
                            while ($5646._ === 'List.cons') {
                                _defn$9 = $5646.head;
                                var $5645 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5647 = self.file;
                                            var $5648 = self.code;
                                            var $5649 = self.orig;
                                            var $5650 = self.name;
                                            var $5651 = self.term;
                                            var $5652 = self.type;
                                            var $5653 = self.isct;
                                            var $5654 = self.arit;
                                            var $5655 = self.stat;
                                            var $5656 = $5651;
                                            return $5656;
                                    };
                                })());
                                _expr$10 = $5645;
                                $5646 = $5646.tail;
                            }
                            return _expr$10;
                        })();
                        var $5643 = _expr$9;
                        return $5643;
                    case 'Fm.Term.nat':
                        var $5657 = self.natx;
                        var _expr$9 = (() => {
                            var $5660 = _expr$1;
                            var $5661 = _wyth$3;
                            let _expr$10 = $5660;
                            let _defn$9;
                            while ($5661._ === 'List.cons') {
                                _defn$9 = $5661.head;
                                var $5660 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5662 = self.file;
                                            var $5663 = self.code;
                                            var $5664 = self.orig;
                                            var $5665 = self.name;
                                            var $5666 = self.term;
                                            var $5667 = self.type;
                                            var $5668 = self.isct;
                                            var $5669 = self.arit;
                                            var $5670 = self.stat;
                                            var $5671 = $5666;
                                            return $5671;
                                    };
                                })());
                                _expr$10 = $5660;
                                $5661 = $5661.tail;
                            }
                            return _expr$10;
                        })();
                        var $5658 = _expr$9;
                        return $5658;
                    case 'Fm.Term.chr':
                        var $5672 = self.chrx;
                        var _expr$9 = (() => {
                            var $5675 = _expr$1;
                            var $5676 = _wyth$3;
                            let _expr$10 = $5675;
                            let _defn$9;
                            while ($5676._ === 'List.cons') {
                                _defn$9 = $5676.head;
                                var $5675 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5677 = self.file;
                                            var $5678 = self.code;
                                            var $5679 = self.orig;
                                            var $5680 = self.name;
                                            var $5681 = self.term;
                                            var $5682 = self.type;
                                            var $5683 = self.isct;
                                            var $5684 = self.arit;
                                            var $5685 = self.stat;
                                            var $5686 = $5681;
                                            return $5686;
                                    };
                                })());
                                _expr$10 = $5675;
                                $5676 = $5676.tail;
                            }
                            return _expr$10;
                        })();
                        var $5673 = _expr$9;
                        return $5673;
                    case 'Fm.Term.str':
                        var $5687 = self.strx;
                        var _expr$9 = (() => {
                            var $5690 = _expr$1;
                            var $5691 = _wyth$3;
                            let _expr$10 = $5690;
                            let _defn$9;
                            while ($5691._ === 'List.cons') {
                                _defn$9 = $5691.head;
                                var $5690 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5692 = self.file;
                                            var $5693 = self.code;
                                            var $5694 = self.orig;
                                            var $5695 = self.name;
                                            var $5696 = self.term;
                                            var $5697 = self.type;
                                            var $5698 = self.isct;
                                            var $5699 = self.arit;
                                            var $5700 = self.stat;
                                            var $5701 = $5696;
                                            return $5701;
                                    };
                                })());
                                _expr$10 = $5690;
                                $5691 = $5691.tail;
                            }
                            return _expr$10;
                        })();
                        var $5688 = _expr$9;
                        return $5688;
                    case 'Fm.Term.cse':
                        var $5702 = self.path;
                        var $5703 = self.expr;
                        var $5704 = self.name;
                        var $5705 = self.with;
                        var $5706 = self.cses;
                        var $5707 = self.moti;
                        var _expr$14 = (() => {
                            var $5710 = _expr$1;
                            var $5711 = _wyth$3;
                            let _expr$15 = $5710;
                            let _defn$14;
                            while ($5711._ === 'List.cons') {
                                _defn$14 = $5711.head;
                                var $5710 = Fm$Term$app$(_expr$15, (() => {
                                    var self = _defn$14;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5712 = self.file;
                                            var $5713 = self.code;
                                            var $5714 = self.orig;
                                            var $5715 = self.name;
                                            var $5716 = self.term;
                                            var $5717 = self.type;
                                            var $5718 = self.isct;
                                            var $5719 = self.arit;
                                            var $5720 = self.stat;
                                            var $5721 = $5716;
                                            return $5721;
                                    };
                                })());
                                _expr$15 = $5710;
                                $5711 = $5711.tail;
                            }
                            return _expr$15;
                        })();
                        var $5708 = _expr$14;
                        return $5708;
                    case 'Fm.Term.ori':
                        var $5722 = self.orig;
                        var $5723 = self.expr;
                        var _expr$10 = (() => {
                            var $5726 = _expr$1;
                            var $5727 = _wyth$3;
                            let _expr$11 = $5726;
                            let _defn$10;
                            while ($5727._ === 'List.cons') {
                                _defn$10 = $5727.head;
                                var $5726 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5728 = self.file;
                                            var $5729 = self.code;
                                            var $5730 = self.orig;
                                            var $5731 = self.name;
                                            var $5732 = self.term;
                                            var $5733 = self.type;
                                            var $5734 = self.isct;
                                            var $5735 = self.arit;
                                            var $5736 = self.stat;
                                            var $5737 = $5732;
                                            return $5737;
                                    };
                                })());
                                _expr$11 = $5726;
                                $5727 = $5727.tail;
                            }
                            return _expr$11;
                        })();
                        var $5724 = _expr$10;
                        return $5724;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Term$desugar_cse$cases = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Fm$Term$desugar_cse$cases$(x0, x1, x2, x3, x4, x5, x6);

    function Fm$Term$desugar_cse$(_expr$1, _name$2, _wyth$3, _cses$4, _moti$5, _type$6, _defs$7, _ctxt$8) {
        var self = Fm$Term$reduce$(_type$6, _defs$7);
        switch (self._) {
            case 'Fm.Term.var':
                var $5739 = self.name;
                var $5740 = self.indx;
                var $5741 = Maybe$none;
                var $5738 = $5741;
                break;
            case 'Fm.Term.ref':
                var $5742 = self.name;
                var $5743 = Maybe$none;
                var $5738 = $5743;
                break;
            case 'Fm.Term.typ':
                var $5744 = Maybe$none;
                var $5738 = $5744;
                break;
            case 'Fm.Term.all':
                var $5745 = self.eras;
                var $5746 = self.self;
                var $5747 = self.name;
                var $5748 = self.xtyp;
                var $5749 = self.body;
                var _moti$14 = Fm$Term$desugar_cse$motive$(_wyth$3, _moti$5);
                var _argm$15 = Fm$Term$desugar_cse$argument$(_name$2, List$nil, $5748, _moti$14, _defs$7);
                var _expr$16 = Fm$Term$app$(_expr$1, _argm$15);
                var _type$17 = $5749(Fm$Term$var$($5746, 0n))(Fm$Term$var$($5747, 0n));
                var $5750 = Maybe$some$(Fm$Term$desugar_cse$cases$(_expr$16, _name$2, _wyth$3, _cses$4, _type$17, _defs$7, _ctxt$8));
                var $5738 = $5750;
                break;
            case 'Fm.Term.lam':
                var $5751 = self.name;
                var $5752 = self.body;
                var $5753 = Maybe$none;
                var $5738 = $5753;
                break;
            case 'Fm.Term.app':
                var $5754 = self.func;
                var $5755 = self.argm;
                var $5756 = Maybe$none;
                var $5738 = $5756;
                break;
            case 'Fm.Term.let':
                var $5757 = self.name;
                var $5758 = self.expr;
                var $5759 = self.body;
                var $5760 = Maybe$none;
                var $5738 = $5760;
                break;
            case 'Fm.Term.def':
                var $5761 = self.name;
                var $5762 = self.expr;
                var $5763 = self.body;
                var $5764 = Maybe$none;
                var $5738 = $5764;
                break;
            case 'Fm.Term.ann':
                var $5765 = self.done;
                var $5766 = self.term;
                var $5767 = self.type;
                var $5768 = Maybe$none;
                var $5738 = $5768;
                break;
            case 'Fm.Term.gol':
                var $5769 = self.name;
                var $5770 = self.dref;
                var $5771 = self.verb;
                var $5772 = Maybe$none;
                var $5738 = $5772;
                break;
            case 'Fm.Term.hol':
                var $5773 = self.path;
                var $5774 = Maybe$none;
                var $5738 = $5774;
                break;
            case 'Fm.Term.nat':
                var $5775 = self.natx;
                var $5776 = Maybe$none;
                var $5738 = $5776;
                break;
            case 'Fm.Term.chr':
                var $5777 = self.chrx;
                var $5778 = Maybe$none;
                var $5738 = $5778;
                break;
            case 'Fm.Term.str':
                var $5779 = self.strx;
                var $5780 = Maybe$none;
                var $5738 = $5780;
                break;
            case 'Fm.Term.cse':
                var $5781 = self.path;
                var $5782 = self.expr;
                var $5783 = self.name;
                var $5784 = self.with;
                var $5785 = self.cses;
                var $5786 = self.moti;
                var $5787 = Maybe$none;
                var $5738 = $5787;
                break;
            case 'Fm.Term.ori':
                var $5788 = self.orig;
                var $5789 = self.expr;
                var $5790 = Maybe$none;
                var $5738 = $5790;
                break;
        };
        return $5738;
    };
    const Fm$Term$desugar_cse = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Fm$Term$desugar_cse$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Fm$Error$cant_infer$(_origin$1, _term$2, _context$3) {
        var $5791 = ({
            _: 'Fm.Error.cant_infer',
            'origin': _origin$1,
            'term': _term$2,
            'context': _context$3
        });
        return $5791;
    };
    const Fm$Error$cant_infer = x0 => x1 => x2 => Fm$Error$cant_infer$(x0, x1, x2);

    function Set$has$(_bits$1, _set$2) {
        var self = Map$get$(_bits$1, _set$2);
        switch (self._) {
            case 'Maybe.none':
                var $5793 = Bool$false;
                var $5792 = $5793;
                break;
            case 'Maybe.some':
                var $5794 = self.value;
                var $5795 = Bool$true;
                var $5792 = $5795;
                break;
        };
        return $5792;
    };
    const Set$has = x0 => x1 => Set$has$(x0, x1);
    const Bool$or = a0 => a1 => (a0 || a1);

    function Fm$Term$has_holes$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $5797 = self.name;
                var $5798 = self.indx;
                var $5799 = Bool$false;
                var $5796 = $5799;
                break;
            case 'Fm.Term.ref':
                var $5800 = self.name;
                var $5801 = Bool$false;
                var $5796 = $5801;
                break;
            case 'Fm.Term.typ':
                var $5802 = Bool$false;
                var $5796 = $5802;
                break;
            case 'Fm.Term.all':
                var $5803 = self.eras;
                var $5804 = self.self;
                var $5805 = self.name;
                var $5806 = self.xtyp;
                var $5807 = self.body;
                var $5808 = (Fm$Term$has_holes$($5806) || Fm$Term$has_holes$($5807(Fm$Term$typ)(Fm$Term$typ)));
                var $5796 = $5808;
                break;
            case 'Fm.Term.lam':
                var $5809 = self.name;
                var $5810 = self.body;
                var $5811 = Fm$Term$has_holes$($5810(Fm$Term$typ));
                var $5796 = $5811;
                break;
            case 'Fm.Term.app':
                var $5812 = self.func;
                var $5813 = self.argm;
                var $5814 = (Fm$Term$has_holes$($5812) || Fm$Term$has_holes$($5813));
                var $5796 = $5814;
                break;
            case 'Fm.Term.let':
                var $5815 = self.name;
                var $5816 = self.expr;
                var $5817 = self.body;
                var $5818 = (Fm$Term$has_holes$($5816) || Fm$Term$has_holes$($5817(Fm$Term$typ)));
                var $5796 = $5818;
                break;
            case 'Fm.Term.def':
                var $5819 = self.name;
                var $5820 = self.expr;
                var $5821 = self.body;
                var $5822 = (Fm$Term$has_holes$($5820) || Fm$Term$has_holes$($5821(Fm$Term$typ)));
                var $5796 = $5822;
                break;
            case 'Fm.Term.ann':
                var $5823 = self.done;
                var $5824 = self.term;
                var $5825 = self.type;
                var $5826 = (Fm$Term$has_holes$($5824) || Fm$Term$has_holes$($5825));
                var $5796 = $5826;
                break;
            case 'Fm.Term.gol':
                var $5827 = self.name;
                var $5828 = self.dref;
                var $5829 = self.verb;
                var $5830 = Bool$false;
                var $5796 = $5830;
                break;
            case 'Fm.Term.hol':
                var $5831 = self.path;
                var $5832 = Bool$true;
                var $5796 = $5832;
                break;
            case 'Fm.Term.nat':
                var $5833 = self.natx;
                var $5834 = Bool$false;
                var $5796 = $5834;
                break;
            case 'Fm.Term.chr':
                var $5835 = self.chrx;
                var $5836 = Bool$false;
                var $5796 = $5836;
                break;
            case 'Fm.Term.str':
                var $5837 = self.strx;
                var $5838 = Bool$false;
                var $5796 = $5838;
                break;
            case 'Fm.Term.cse':
                var $5839 = self.path;
                var $5840 = self.expr;
                var $5841 = self.name;
                var $5842 = self.with;
                var $5843 = self.cses;
                var $5844 = self.moti;
                var $5845 = Bool$false;
                var $5796 = $5845;
                break;
            case 'Fm.Term.ori':
                var $5846 = self.orig;
                var $5847 = self.expr;
                var $5848 = Fm$Term$has_holes$($5847);
                var $5796 = $5848;
                break;
        };
        return $5796;
    };
    const Fm$Term$has_holes = x0 => Fm$Term$has_holes$(x0);

    function Fm$Term$equal$hole$(_path$1, _term$2) {
        var self = _term$2;
        switch (self._) {
            case 'Fm.Term.var':
                var $5850 = self.name;
                var $5851 = self.indx;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5853 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5852 = $5853;
                } else {
                    var $5854 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5852 = $5854;
                };
                var $5849 = $5852;
                break;
            case 'Fm.Term.ref':
                var $5855 = self.name;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5857 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5856 = $5857;
                } else {
                    var $5858 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5856 = $5858;
                };
                var $5849 = $5856;
                break;
            case 'Fm.Term.typ':
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5860 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5859 = $5860;
                } else {
                    var $5861 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5859 = $5861;
                };
                var $5849 = $5859;
                break;
            case 'Fm.Term.all':
                var $5862 = self.eras;
                var $5863 = self.self;
                var $5864 = self.name;
                var $5865 = self.xtyp;
                var $5866 = self.body;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5868 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5867 = $5868;
                } else {
                    var $5869 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5867 = $5869;
                };
                var $5849 = $5867;
                break;
            case 'Fm.Term.lam':
                var $5870 = self.name;
                var $5871 = self.body;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5873 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5872 = $5873;
                } else {
                    var $5874 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5872 = $5874;
                };
                var $5849 = $5872;
                break;
            case 'Fm.Term.app':
                var $5875 = self.func;
                var $5876 = self.argm;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5878 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5877 = $5878;
                } else {
                    var $5879 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5877 = $5879;
                };
                var $5849 = $5877;
                break;
            case 'Fm.Term.let':
                var $5880 = self.name;
                var $5881 = self.expr;
                var $5882 = self.body;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5884 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5883 = $5884;
                } else {
                    var $5885 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5883 = $5885;
                };
                var $5849 = $5883;
                break;
            case 'Fm.Term.def':
                var $5886 = self.name;
                var $5887 = self.expr;
                var $5888 = self.body;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5890 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5889 = $5890;
                } else {
                    var $5891 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5889 = $5891;
                };
                var $5849 = $5889;
                break;
            case 'Fm.Term.ann':
                var $5892 = self.done;
                var $5893 = self.term;
                var $5894 = self.type;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5896 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5895 = $5896;
                } else {
                    var $5897 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5895 = $5897;
                };
                var $5849 = $5895;
                break;
            case 'Fm.Term.gol':
                var $5898 = self.name;
                var $5899 = self.dref;
                var $5900 = self.verb;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5902 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5901 = $5902;
                } else {
                    var $5903 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5901 = $5903;
                };
                var $5849 = $5901;
                break;
            case 'Fm.Term.hol':
                var $5904 = self.path;
                var $5905 = Fm$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $5849 = $5905;
                break;
            case 'Fm.Term.nat':
                var $5906 = self.natx;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5908 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5907 = $5908;
                } else {
                    var $5909 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5907 = $5909;
                };
                var $5849 = $5907;
                break;
            case 'Fm.Term.chr':
                var $5910 = self.chrx;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5912 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5911 = $5912;
                } else {
                    var $5913 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5911 = $5913;
                };
                var $5849 = $5911;
                break;
            case 'Fm.Term.str':
                var $5914 = self.strx;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5916 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5915 = $5916;
                } else {
                    var $5917 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5915 = $5917;
                };
                var $5849 = $5915;
                break;
            case 'Fm.Term.cse':
                var $5918 = self.path;
                var $5919 = self.expr;
                var $5920 = self.name;
                var $5921 = self.with;
                var $5922 = self.cses;
                var $5923 = self.moti;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5925 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5924 = $5925;
                } else {
                    var $5926 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5924 = $5926;
                };
                var $5849 = $5924;
                break;
            case 'Fm.Term.ori':
                var $5927 = self.orig;
                var $5928 = self.expr;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5930 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5929 = $5930;
                } else {
                    var $5931 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5929 = $5931;
                };
                var $5849 = $5929;
                break;
        };
        return $5849;
    };
    const Fm$Term$equal$hole = x0 => x1 => Fm$Term$equal$hole$(x0, x1);

    function Fm$Term$equal$extra_holes$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $5933 = self.name;
                var $5934 = self.indx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5936 = self.name;
                        var $5937 = self.indx;
                        var $5938 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5935 = $5938;
                        break;
                    case 'Fm.Term.ref':
                        var $5939 = self.name;
                        var $5940 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5935 = $5940;
                        break;
                    case 'Fm.Term.typ':
                        var $5941 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5935 = $5941;
                        break;
                    case 'Fm.Term.all':
                        var $5942 = self.eras;
                        var $5943 = self.self;
                        var $5944 = self.name;
                        var $5945 = self.xtyp;
                        var $5946 = self.body;
                        var $5947 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5935 = $5947;
                        break;
                    case 'Fm.Term.lam':
                        var $5948 = self.name;
                        var $5949 = self.body;
                        var $5950 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5935 = $5950;
                        break;
                    case 'Fm.Term.app':
                        var $5951 = self.func;
                        var $5952 = self.argm;
                        var $5953 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5935 = $5953;
                        break;
                    case 'Fm.Term.let':
                        var $5954 = self.name;
                        var $5955 = self.expr;
                        var $5956 = self.body;
                        var $5957 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5935 = $5957;
                        break;
                    case 'Fm.Term.def':
                        var $5958 = self.name;
                        var $5959 = self.expr;
                        var $5960 = self.body;
                        var $5961 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5935 = $5961;
                        break;
                    case 'Fm.Term.ann':
                        var $5962 = self.done;
                        var $5963 = self.term;
                        var $5964 = self.type;
                        var $5965 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5935 = $5965;
                        break;
                    case 'Fm.Term.gol':
                        var $5966 = self.name;
                        var $5967 = self.dref;
                        var $5968 = self.verb;
                        var $5969 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5935 = $5969;
                        break;
                    case 'Fm.Term.hol':
                        var $5970 = self.path;
                        var self = Fm$Term$equal$hole$($5970, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $5972 = self.value;
                                var $5973 = self.errors;
                                var self = $5972;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5975 = Fm$Check$result$(Maybe$none, $5973);
                                        var $5974 = $5975;
                                        break;
                                    case 'Maybe.some':
                                        var $5976 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $5978 = self.value;
                                                var $5979 = self.errors;
                                                var $5980 = Fm$Check$result$($5978, List$concat$($5973, $5979));
                                                var $5977 = $5980;
                                                break;
                                        };
                                        var $5974 = $5977;
                                        break;
                                };
                                var $5971 = $5974;
                                break;
                        };
                        var $5935 = $5971;
                        break;
                    case 'Fm.Term.nat':
                        var $5981 = self.natx;
                        var $5982 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5935 = $5982;
                        break;
                    case 'Fm.Term.chr':
                        var $5983 = self.chrx;
                        var $5984 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5935 = $5984;
                        break;
                    case 'Fm.Term.str':
                        var $5985 = self.strx;
                        var $5986 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5935 = $5986;
                        break;
                    case 'Fm.Term.cse':
                        var $5987 = self.path;
                        var $5988 = self.expr;
                        var $5989 = self.name;
                        var $5990 = self.with;
                        var $5991 = self.cses;
                        var $5992 = self.moti;
                        var $5993 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5935 = $5993;
                        break;
                    case 'Fm.Term.ori':
                        var $5994 = self.orig;
                        var $5995 = self.expr;
                        var $5996 = Fm$Term$equal$extra_holes$(_a$1, $5995);
                        var $5935 = $5996;
                        break;
                };
                var $5932 = $5935;
                break;
            case 'Fm.Term.ref':
                var $5997 = self.name;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5999 = self.name;
                        var $6000 = self.indx;
                        var $6001 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5998 = $6001;
                        break;
                    case 'Fm.Term.ref':
                        var $6002 = self.name;
                        var $6003 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5998 = $6003;
                        break;
                    case 'Fm.Term.typ':
                        var $6004 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5998 = $6004;
                        break;
                    case 'Fm.Term.all':
                        var $6005 = self.eras;
                        var $6006 = self.self;
                        var $6007 = self.name;
                        var $6008 = self.xtyp;
                        var $6009 = self.body;
                        var $6010 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5998 = $6010;
                        break;
                    case 'Fm.Term.lam':
                        var $6011 = self.name;
                        var $6012 = self.body;
                        var $6013 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5998 = $6013;
                        break;
                    case 'Fm.Term.app':
                        var $6014 = self.func;
                        var $6015 = self.argm;
                        var $6016 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5998 = $6016;
                        break;
                    case 'Fm.Term.let':
                        var $6017 = self.name;
                        var $6018 = self.expr;
                        var $6019 = self.body;
                        var $6020 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5998 = $6020;
                        break;
                    case 'Fm.Term.def':
                        var $6021 = self.name;
                        var $6022 = self.expr;
                        var $6023 = self.body;
                        var $6024 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5998 = $6024;
                        break;
                    case 'Fm.Term.ann':
                        var $6025 = self.done;
                        var $6026 = self.term;
                        var $6027 = self.type;
                        var $6028 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5998 = $6028;
                        break;
                    case 'Fm.Term.gol':
                        var $6029 = self.name;
                        var $6030 = self.dref;
                        var $6031 = self.verb;
                        var $6032 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5998 = $6032;
                        break;
                    case 'Fm.Term.hol':
                        var $6033 = self.path;
                        var self = Fm$Term$equal$hole$($6033, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6035 = self.value;
                                var $6036 = self.errors;
                                var self = $6035;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6038 = Fm$Check$result$(Maybe$none, $6036);
                                        var $6037 = $6038;
                                        break;
                                    case 'Maybe.some':
                                        var $6039 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6041 = self.value;
                                                var $6042 = self.errors;
                                                var $6043 = Fm$Check$result$($6041, List$concat$($6036, $6042));
                                                var $6040 = $6043;
                                                break;
                                        };
                                        var $6037 = $6040;
                                        break;
                                };
                                var $6034 = $6037;
                                break;
                        };
                        var $5998 = $6034;
                        break;
                    case 'Fm.Term.nat':
                        var $6044 = self.natx;
                        var $6045 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5998 = $6045;
                        break;
                    case 'Fm.Term.chr':
                        var $6046 = self.chrx;
                        var $6047 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5998 = $6047;
                        break;
                    case 'Fm.Term.str':
                        var $6048 = self.strx;
                        var $6049 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5998 = $6049;
                        break;
                    case 'Fm.Term.cse':
                        var $6050 = self.path;
                        var $6051 = self.expr;
                        var $6052 = self.name;
                        var $6053 = self.with;
                        var $6054 = self.cses;
                        var $6055 = self.moti;
                        var $6056 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5998 = $6056;
                        break;
                    case 'Fm.Term.ori':
                        var $6057 = self.orig;
                        var $6058 = self.expr;
                        var $6059 = Fm$Term$equal$extra_holes$(_a$1, $6058);
                        var $5998 = $6059;
                        break;
                };
                var $5932 = $5998;
                break;
            case 'Fm.Term.typ':
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6061 = self.name;
                        var $6062 = self.indx;
                        var $6063 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6060 = $6063;
                        break;
                    case 'Fm.Term.ref':
                        var $6064 = self.name;
                        var $6065 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6060 = $6065;
                        break;
                    case 'Fm.Term.typ':
                        var $6066 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6060 = $6066;
                        break;
                    case 'Fm.Term.all':
                        var $6067 = self.eras;
                        var $6068 = self.self;
                        var $6069 = self.name;
                        var $6070 = self.xtyp;
                        var $6071 = self.body;
                        var $6072 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6060 = $6072;
                        break;
                    case 'Fm.Term.lam':
                        var $6073 = self.name;
                        var $6074 = self.body;
                        var $6075 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6060 = $6075;
                        break;
                    case 'Fm.Term.app':
                        var $6076 = self.func;
                        var $6077 = self.argm;
                        var $6078 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6060 = $6078;
                        break;
                    case 'Fm.Term.let':
                        var $6079 = self.name;
                        var $6080 = self.expr;
                        var $6081 = self.body;
                        var $6082 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6060 = $6082;
                        break;
                    case 'Fm.Term.def':
                        var $6083 = self.name;
                        var $6084 = self.expr;
                        var $6085 = self.body;
                        var $6086 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6060 = $6086;
                        break;
                    case 'Fm.Term.ann':
                        var $6087 = self.done;
                        var $6088 = self.term;
                        var $6089 = self.type;
                        var $6090 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6060 = $6090;
                        break;
                    case 'Fm.Term.gol':
                        var $6091 = self.name;
                        var $6092 = self.dref;
                        var $6093 = self.verb;
                        var $6094 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6060 = $6094;
                        break;
                    case 'Fm.Term.hol':
                        var $6095 = self.path;
                        var self = Fm$Term$equal$hole$($6095, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6097 = self.value;
                                var $6098 = self.errors;
                                var self = $6097;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6100 = Fm$Check$result$(Maybe$none, $6098);
                                        var $6099 = $6100;
                                        break;
                                    case 'Maybe.some':
                                        var $6101 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6103 = self.value;
                                                var $6104 = self.errors;
                                                var $6105 = Fm$Check$result$($6103, List$concat$($6098, $6104));
                                                var $6102 = $6105;
                                                break;
                                        };
                                        var $6099 = $6102;
                                        break;
                                };
                                var $6096 = $6099;
                                break;
                        };
                        var $6060 = $6096;
                        break;
                    case 'Fm.Term.nat':
                        var $6106 = self.natx;
                        var $6107 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6060 = $6107;
                        break;
                    case 'Fm.Term.chr':
                        var $6108 = self.chrx;
                        var $6109 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6060 = $6109;
                        break;
                    case 'Fm.Term.str':
                        var $6110 = self.strx;
                        var $6111 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6060 = $6111;
                        break;
                    case 'Fm.Term.cse':
                        var $6112 = self.path;
                        var $6113 = self.expr;
                        var $6114 = self.name;
                        var $6115 = self.with;
                        var $6116 = self.cses;
                        var $6117 = self.moti;
                        var $6118 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6060 = $6118;
                        break;
                    case 'Fm.Term.ori':
                        var $6119 = self.orig;
                        var $6120 = self.expr;
                        var $6121 = Fm$Term$equal$extra_holes$(_a$1, $6120);
                        var $6060 = $6121;
                        break;
                };
                var $5932 = $6060;
                break;
            case 'Fm.Term.all':
                var $6122 = self.eras;
                var $6123 = self.self;
                var $6124 = self.name;
                var $6125 = self.xtyp;
                var $6126 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6128 = self.name;
                        var $6129 = self.indx;
                        var $6130 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6127 = $6130;
                        break;
                    case 'Fm.Term.ref':
                        var $6131 = self.name;
                        var $6132 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6127 = $6132;
                        break;
                    case 'Fm.Term.typ':
                        var $6133 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6127 = $6133;
                        break;
                    case 'Fm.Term.all':
                        var $6134 = self.eras;
                        var $6135 = self.self;
                        var $6136 = self.name;
                        var $6137 = self.xtyp;
                        var $6138 = self.body;
                        var $6139 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6127 = $6139;
                        break;
                    case 'Fm.Term.lam':
                        var $6140 = self.name;
                        var $6141 = self.body;
                        var $6142 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6127 = $6142;
                        break;
                    case 'Fm.Term.app':
                        var $6143 = self.func;
                        var $6144 = self.argm;
                        var $6145 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6127 = $6145;
                        break;
                    case 'Fm.Term.let':
                        var $6146 = self.name;
                        var $6147 = self.expr;
                        var $6148 = self.body;
                        var $6149 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6127 = $6149;
                        break;
                    case 'Fm.Term.def':
                        var $6150 = self.name;
                        var $6151 = self.expr;
                        var $6152 = self.body;
                        var $6153 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6127 = $6153;
                        break;
                    case 'Fm.Term.ann':
                        var $6154 = self.done;
                        var $6155 = self.term;
                        var $6156 = self.type;
                        var $6157 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6127 = $6157;
                        break;
                    case 'Fm.Term.gol':
                        var $6158 = self.name;
                        var $6159 = self.dref;
                        var $6160 = self.verb;
                        var $6161 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6127 = $6161;
                        break;
                    case 'Fm.Term.hol':
                        var $6162 = self.path;
                        var self = Fm$Term$equal$hole$($6162, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6164 = self.value;
                                var $6165 = self.errors;
                                var self = $6164;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6167 = Fm$Check$result$(Maybe$none, $6165);
                                        var $6166 = $6167;
                                        break;
                                    case 'Maybe.some':
                                        var $6168 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6170 = self.value;
                                                var $6171 = self.errors;
                                                var $6172 = Fm$Check$result$($6170, List$concat$($6165, $6171));
                                                var $6169 = $6172;
                                                break;
                                        };
                                        var $6166 = $6169;
                                        break;
                                };
                                var $6163 = $6166;
                                break;
                        };
                        var $6127 = $6163;
                        break;
                    case 'Fm.Term.nat':
                        var $6173 = self.natx;
                        var $6174 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6127 = $6174;
                        break;
                    case 'Fm.Term.chr':
                        var $6175 = self.chrx;
                        var $6176 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6127 = $6176;
                        break;
                    case 'Fm.Term.str':
                        var $6177 = self.strx;
                        var $6178 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6127 = $6178;
                        break;
                    case 'Fm.Term.cse':
                        var $6179 = self.path;
                        var $6180 = self.expr;
                        var $6181 = self.name;
                        var $6182 = self.with;
                        var $6183 = self.cses;
                        var $6184 = self.moti;
                        var $6185 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6127 = $6185;
                        break;
                    case 'Fm.Term.ori':
                        var $6186 = self.orig;
                        var $6187 = self.expr;
                        var $6188 = Fm$Term$equal$extra_holes$(_a$1, $6187);
                        var $6127 = $6188;
                        break;
                };
                var $5932 = $6127;
                break;
            case 'Fm.Term.lam':
                var $6189 = self.name;
                var $6190 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6192 = self.name;
                        var $6193 = self.indx;
                        var $6194 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6191 = $6194;
                        break;
                    case 'Fm.Term.ref':
                        var $6195 = self.name;
                        var $6196 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6191 = $6196;
                        break;
                    case 'Fm.Term.typ':
                        var $6197 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6191 = $6197;
                        break;
                    case 'Fm.Term.all':
                        var $6198 = self.eras;
                        var $6199 = self.self;
                        var $6200 = self.name;
                        var $6201 = self.xtyp;
                        var $6202 = self.body;
                        var $6203 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6191 = $6203;
                        break;
                    case 'Fm.Term.lam':
                        var $6204 = self.name;
                        var $6205 = self.body;
                        var $6206 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6191 = $6206;
                        break;
                    case 'Fm.Term.app':
                        var $6207 = self.func;
                        var $6208 = self.argm;
                        var $6209 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6191 = $6209;
                        break;
                    case 'Fm.Term.let':
                        var $6210 = self.name;
                        var $6211 = self.expr;
                        var $6212 = self.body;
                        var $6213 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6191 = $6213;
                        break;
                    case 'Fm.Term.def':
                        var $6214 = self.name;
                        var $6215 = self.expr;
                        var $6216 = self.body;
                        var $6217 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6191 = $6217;
                        break;
                    case 'Fm.Term.ann':
                        var $6218 = self.done;
                        var $6219 = self.term;
                        var $6220 = self.type;
                        var $6221 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6191 = $6221;
                        break;
                    case 'Fm.Term.gol':
                        var $6222 = self.name;
                        var $6223 = self.dref;
                        var $6224 = self.verb;
                        var $6225 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6191 = $6225;
                        break;
                    case 'Fm.Term.hol':
                        var $6226 = self.path;
                        var self = Fm$Term$equal$hole$($6226, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6228 = self.value;
                                var $6229 = self.errors;
                                var self = $6228;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6231 = Fm$Check$result$(Maybe$none, $6229);
                                        var $6230 = $6231;
                                        break;
                                    case 'Maybe.some':
                                        var $6232 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6234 = self.value;
                                                var $6235 = self.errors;
                                                var $6236 = Fm$Check$result$($6234, List$concat$($6229, $6235));
                                                var $6233 = $6236;
                                                break;
                                        };
                                        var $6230 = $6233;
                                        break;
                                };
                                var $6227 = $6230;
                                break;
                        };
                        var $6191 = $6227;
                        break;
                    case 'Fm.Term.nat':
                        var $6237 = self.natx;
                        var $6238 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6191 = $6238;
                        break;
                    case 'Fm.Term.chr':
                        var $6239 = self.chrx;
                        var $6240 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6191 = $6240;
                        break;
                    case 'Fm.Term.str':
                        var $6241 = self.strx;
                        var $6242 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6191 = $6242;
                        break;
                    case 'Fm.Term.cse':
                        var $6243 = self.path;
                        var $6244 = self.expr;
                        var $6245 = self.name;
                        var $6246 = self.with;
                        var $6247 = self.cses;
                        var $6248 = self.moti;
                        var $6249 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6191 = $6249;
                        break;
                    case 'Fm.Term.ori':
                        var $6250 = self.orig;
                        var $6251 = self.expr;
                        var $6252 = Fm$Term$equal$extra_holes$(_a$1, $6251);
                        var $6191 = $6252;
                        break;
                };
                var $5932 = $6191;
                break;
            case 'Fm.Term.app':
                var $6253 = self.func;
                var $6254 = self.argm;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6256 = self.name;
                        var $6257 = self.indx;
                        var $6258 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6255 = $6258;
                        break;
                    case 'Fm.Term.ref':
                        var $6259 = self.name;
                        var $6260 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6255 = $6260;
                        break;
                    case 'Fm.Term.typ':
                        var $6261 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6255 = $6261;
                        break;
                    case 'Fm.Term.all':
                        var $6262 = self.eras;
                        var $6263 = self.self;
                        var $6264 = self.name;
                        var $6265 = self.xtyp;
                        var $6266 = self.body;
                        var $6267 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6255 = $6267;
                        break;
                    case 'Fm.Term.lam':
                        var $6268 = self.name;
                        var $6269 = self.body;
                        var $6270 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6255 = $6270;
                        break;
                    case 'Fm.Term.app':
                        var $6271 = self.func;
                        var $6272 = self.argm;
                        var self = Fm$Term$equal$extra_holes$($6253, $6271);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6274 = self.value;
                                var $6275 = self.errors;
                                var self = $6274;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6277 = Fm$Check$result$(Maybe$none, $6275);
                                        var $6276 = $6277;
                                        break;
                                    case 'Maybe.some':
                                        var $6278 = self.value;
                                        var self = Fm$Term$equal$extra_holes$($6254, $6272);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6280 = self.value;
                                                var $6281 = self.errors;
                                                var $6282 = Fm$Check$result$($6280, List$concat$($6275, $6281));
                                                var $6279 = $6282;
                                                break;
                                        };
                                        var $6276 = $6279;
                                        break;
                                };
                                var $6273 = $6276;
                                break;
                        };
                        var $6255 = $6273;
                        break;
                    case 'Fm.Term.let':
                        var $6283 = self.name;
                        var $6284 = self.expr;
                        var $6285 = self.body;
                        var $6286 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6255 = $6286;
                        break;
                    case 'Fm.Term.def':
                        var $6287 = self.name;
                        var $6288 = self.expr;
                        var $6289 = self.body;
                        var $6290 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6255 = $6290;
                        break;
                    case 'Fm.Term.ann':
                        var $6291 = self.done;
                        var $6292 = self.term;
                        var $6293 = self.type;
                        var $6294 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6255 = $6294;
                        break;
                    case 'Fm.Term.gol':
                        var $6295 = self.name;
                        var $6296 = self.dref;
                        var $6297 = self.verb;
                        var $6298 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6255 = $6298;
                        break;
                    case 'Fm.Term.hol':
                        var $6299 = self.path;
                        var self = Fm$Term$equal$hole$($6299, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6301 = self.value;
                                var $6302 = self.errors;
                                var self = $6301;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6304 = Fm$Check$result$(Maybe$none, $6302);
                                        var $6303 = $6304;
                                        break;
                                    case 'Maybe.some':
                                        var $6305 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6307 = self.value;
                                                var $6308 = self.errors;
                                                var $6309 = Fm$Check$result$($6307, List$concat$($6302, $6308));
                                                var $6306 = $6309;
                                                break;
                                        };
                                        var $6303 = $6306;
                                        break;
                                };
                                var $6300 = $6303;
                                break;
                        };
                        var $6255 = $6300;
                        break;
                    case 'Fm.Term.nat':
                        var $6310 = self.natx;
                        var $6311 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6255 = $6311;
                        break;
                    case 'Fm.Term.chr':
                        var $6312 = self.chrx;
                        var $6313 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6255 = $6313;
                        break;
                    case 'Fm.Term.str':
                        var $6314 = self.strx;
                        var $6315 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6255 = $6315;
                        break;
                    case 'Fm.Term.cse':
                        var $6316 = self.path;
                        var $6317 = self.expr;
                        var $6318 = self.name;
                        var $6319 = self.with;
                        var $6320 = self.cses;
                        var $6321 = self.moti;
                        var $6322 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6255 = $6322;
                        break;
                    case 'Fm.Term.ori':
                        var $6323 = self.orig;
                        var $6324 = self.expr;
                        var $6325 = Fm$Term$equal$extra_holes$(_a$1, $6324);
                        var $6255 = $6325;
                        break;
                };
                var $5932 = $6255;
                break;
            case 'Fm.Term.let':
                var $6326 = self.name;
                var $6327 = self.expr;
                var $6328 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6330 = self.name;
                        var $6331 = self.indx;
                        var $6332 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6329 = $6332;
                        break;
                    case 'Fm.Term.ref':
                        var $6333 = self.name;
                        var $6334 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6329 = $6334;
                        break;
                    case 'Fm.Term.typ':
                        var $6335 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6329 = $6335;
                        break;
                    case 'Fm.Term.all':
                        var $6336 = self.eras;
                        var $6337 = self.self;
                        var $6338 = self.name;
                        var $6339 = self.xtyp;
                        var $6340 = self.body;
                        var $6341 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6329 = $6341;
                        break;
                    case 'Fm.Term.lam':
                        var $6342 = self.name;
                        var $6343 = self.body;
                        var $6344 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6329 = $6344;
                        break;
                    case 'Fm.Term.app':
                        var $6345 = self.func;
                        var $6346 = self.argm;
                        var $6347 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6329 = $6347;
                        break;
                    case 'Fm.Term.let':
                        var $6348 = self.name;
                        var $6349 = self.expr;
                        var $6350 = self.body;
                        var $6351 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6329 = $6351;
                        break;
                    case 'Fm.Term.def':
                        var $6352 = self.name;
                        var $6353 = self.expr;
                        var $6354 = self.body;
                        var $6355 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6329 = $6355;
                        break;
                    case 'Fm.Term.ann':
                        var $6356 = self.done;
                        var $6357 = self.term;
                        var $6358 = self.type;
                        var $6359 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6329 = $6359;
                        break;
                    case 'Fm.Term.gol':
                        var $6360 = self.name;
                        var $6361 = self.dref;
                        var $6362 = self.verb;
                        var $6363 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6329 = $6363;
                        break;
                    case 'Fm.Term.hol':
                        var $6364 = self.path;
                        var self = Fm$Term$equal$hole$($6364, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6366 = self.value;
                                var $6367 = self.errors;
                                var self = $6366;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6369 = Fm$Check$result$(Maybe$none, $6367);
                                        var $6368 = $6369;
                                        break;
                                    case 'Maybe.some':
                                        var $6370 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6372 = self.value;
                                                var $6373 = self.errors;
                                                var $6374 = Fm$Check$result$($6372, List$concat$($6367, $6373));
                                                var $6371 = $6374;
                                                break;
                                        };
                                        var $6368 = $6371;
                                        break;
                                };
                                var $6365 = $6368;
                                break;
                        };
                        var $6329 = $6365;
                        break;
                    case 'Fm.Term.nat':
                        var $6375 = self.natx;
                        var $6376 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6329 = $6376;
                        break;
                    case 'Fm.Term.chr':
                        var $6377 = self.chrx;
                        var $6378 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6329 = $6378;
                        break;
                    case 'Fm.Term.str':
                        var $6379 = self.strx;
                        var $6380 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6329 = $6380;
                        break;
                    case 'Fm.Term.cse':
                        var $6381 = self.path;
                        var $6382 = self.expr;
                        var $6383 = self.name;
                        var $6384 = self.with;
                        var $6385 = self.cses;
                        var $6386 = self.moti;
                        var $6387 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6329 = $6387;
                        break;
                    case 'Fm.Term.ori':
                        var $6388 = self.orig;
                        var $6389 = self.expr;
                        var $6390 = Fm$Term$equal$extra_holes$(_a$1, $6389);
                        var $6329 = $6390;
                        break;
                };
                var $5932 = $6329;
                break;
            case 'Fm.Term.def':
                var $6391 = self.name;
                var $6392 = self.expr;
                var $6393 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6395 = self.name;
                        var $6396 = self.indx;
                        var $6397 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6394 = $6397;
                        break;
                    case 'Fm.Term.ref':
                        var $6398 = self.name;
                        var $6399 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6394 = $6399;
                        break;
                    case 'Fm.Term.typ':
                        var $6400 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6394 = $6400;
                        break;
                    case 'Fm.Term.all':
                        var $6401 = self.eras;
                        var $6402 = self.self;
                        var $6403 = self.name;
                        var $6404 = self.xtyp;
                        var $6405 = self.body;
                        var $6406 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6394 = $6406;
                        break;
                    case 'Fm.Term.lam':
                        var $6407 = self.name;
                        var $6408 = self.body;
                        var $6409 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6394 = $6409;
                        break;
                    case 'Fm.Term.app':
                        var $6410 = self.func;
                        var $6411 = self.argm;
                        var $6412 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6394 = $6412;
                        break;
                    case 'Fm.Term.let':
                        var $6413 = self.name;
                        var $6414 = self.expr;
                        var $6415 = self.body;
                        var $6416 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6394 = $6416;
                        break;
                    case 'Fm.Term.def':
                        var $6417 = self.name;
                        var $6418 = self.expr;
                        var $6419 = self.body;
                        var $6420 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6394 = $6420;
                        break;
                    case 'Fm.Term.ann':
                        var $6421 = self.done;
                        var $6422 = self.term;
                        var $6423 = self.type;
                        var $6424 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6394 = $6424;
                        break;
                    case 'Fm.Term.gol':
                        var $6425 = self.name;
                        var $6426 = self.dref;
                        var $6427 = self.verb;
                        var $6428 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6394 = $6428;
                        break;
                    case 'Fm.Term.hol':
                        var $6429 = self.path;
                        var self = Fm$Term$equal$hole$($6429, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6431 = self.value;
                                var $6432 = self.errors;
                                var self = $6431;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6434 = Fm$Check$result$(Maybe$none, $6432);
                                        var $6433 = $6434;
                                        break;
                                    case 'Maybe.some':
                                        var $6435 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6437 = self.value;
                                                var $6438 = self.errors;
                                                var $6439 = Fm$Check$result$($6437, List$concat$($6432, $6438));
                                                var $6436 = $6439;
                                                break;
                                        };
                                        var $6433 = $6436;
                                        break;
                                };
                                var $6430 = $6433;
                                break;
                        };
                        var $6394 = $6430;
                        break;
                    case 'Fm.Term.nat':
                        var $6440 = self.natx;
                        var $6441 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6394 = $6441;
                        break;
                    case 'Fm.Term.chr':
                        var $6442 = self.chrx;
                        var $6443 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6394 = $6443;
                        break;
                    case 'Fm.Term.str':
                        var $6444 = self.strx;
                        var $6445 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6394 = $6445;
                        break;
                    case 'Fm.Term.cse':
                        var $6446 = self.path;
                        var $6447 = self.expr;
                        var $6448 = self.name;
                        var $6449 = self.with;
                        var $6450 = self.cses;
                        var $6451 = self.moti;
                        var $6452 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6394 = $6452;
                        break;
                    case 'Fm.Term.ori':
                        var $6453 = self.orig;
                        var $6454 = self.expr;
                        var $6455 = Fm$Term$equal$extra_holes$(_a$1, $6454);
                        var $6394 = $6455;
                        break;
                };
                var $5932 = $6394;
                break;
            case 'Fm.Term.ann':
                var $6456 = self.done;
                var $6457 = self.term;
                var $6458 = self.type;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6460 = self.name;
                        var $6461 = self.indx;
                        var $6462 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6459 = $6462;
                        break;
                    case 'Fm.Term.ref':
                        var $6463 = self.name;
                        var $6464 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6459 = $6464;
                        break;
                    case 'Fm.Term.typ':
                        var $6465 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6459 = $6465;
                        break;
                    case 'Fm.Term.all':
                        var $6466 = self.eras;
                        var $6467 = self.self;
                        var $6468 = self.name;
                        var $6469 = self.xtyp;
                        var $6470 = self.body;
                        var $6471 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6459 = $6471;
                        break;
                    case 'Fm.Term.lam':
                        var $6472 = self.name;
                        var $6473 = self.body;
                        var $6474 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6459 = $6474;
                        break;
                    case 'Fm.Term.app':
                        var $6475 = self.func;
                        var $6476 = self.argm;
                        var $6477 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6459 = $6477;
                        break;
                    case 'Fm.Term.let':
                        var $6478 = self.name;
                        var $6479 = self.expr;
                        var $6480 = self.body;
                        var $6481 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6459 = $6481;
                        break;
                    case 'Fm.Term.def':
                        var $6482 = self.name;
                        var $6483 = self.expr;
                        var $6484 = self.body;
                        var $6485 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6459 = $6485;
                        break;
                    case 'Fm.Term.ann':
                        var $6486 = self.done;
                        var $6487 = self.term;
                        var $6488 = self.type;
                        var $6489 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6459 = $6489;
                        break;
                    case 'Fm.Term.gol':
                        var $6490 = self.name;
                        var $6491 = self.dref;
                        var $6492 = self.verb;
                        var $6493 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6459 = $6493;
                        break;
                    case 'Fm.Term.hol':
                        var $6494 = self.path;
                        var self = Fm$Term$equal$hole$($6494, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6496 = self.value;
                                var $6497 = self.errors;
                                var self = $6496;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6499 = Fm$Check$result$(Maybe$none, $6497);
                                        var $6498 = $6499;
                                        break;
                                    case 'Maybe.some':
                                        var $6500 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6502 = self.value;
                                                var $6503 = self.errors;
                                                var $6504 = Fm$Check$result$($6502, List$concat$($6497, $6503));
                                                var $6501 = $6504;
                                                break;
                                        };
                                        var $6498 = $6501;
                                        break;
                                };
                                var $6495 = $6498;
                                break;
                        };
                        var $6459 = $6495;
                        break;
                    case 'Fm.Term.nat':
                        var $6505 = self.natx;
                        var $6506 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6459 = $6506;
                        break;
                    case 'Fm.Term.chr':
                        var $6507 = self.chrx;
                        var $6508 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6459 = $6508;
                        break;
                    case 'Fm.Term.str':
                        var $6509 = self.strx;
                        var $6510 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6459 = $6510;
                        break;
                    case 'Fm.Term.cse':
                        var $6511 = self.path;
                        var $6512 = self.expr;
                        var $6513 = self.name;
                        var $6514 = self.with;
                        var $6515 = self.cses;
                        var $6516 = self.moti;
                        var $6517 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6459 = $6517;
                        break;
                    case 'Fm.Term.ori':
                        var $6518 = self.orig;
                        var $6519 = self.expr;
                        var $6520 = Fm$Term$equal$extra_holes$(_a$1, $6519);
                        var $6459 = $6520;
                        break;
                };
                var $5932 = $6459;
                break;
            case 'Fm.Term.gol':
                var $6521 = self.name;
                var $6522 = self.dref;
                var $6523 = self.verb;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6525 = self.name;
                        var $6526 = self.indx;
                        var $6527 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6524 = $6527;
                        break;
                    case 'Fm.Term.ref':
                        var $6528 = self.name;
                        var $6529 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6524 = $6529;
                        break;
                    case 'Fm.Term.typ':
                        var $6530 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6524 = $6530;
                        break;
                    case 'Fm.Term.all':
                        var $6531 = self.eras;
                        var $6532 = self.self;
                        var $6533 = self.name;
                        var $6534 = self.xtyp;
                        var $6535 = self.body;
                        var $6536 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6524 = $6536;
                        break;
                    case 'Fm.Term.lam':
                        var $6537 = self.name;
                        var $6538 = self.body;
                        var $6539 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6524 = $6539;
                        break;
                    case 'Fm.Term.app':
                        var $6540 = self.func;
                        var $6541 = self.argm;
                        var $6542 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6524 = $6542;
                        break;
                    case 'Fm.Term.let':
                        var $6543 = self.name;
                        var $6544 = self.expr;
                        var $6545 = self.body;
                        var $6546 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6524 = $6546;
                        break;
                    case 'Fm.Term.def':
                        var $6547 = self.name;
                        var $6548 = self.expr;
                        var $6549 = self.body;
                        var $6550 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6524 = $6550;
                        break;
                    case 'Fm.Term.ann':
                        var $6551 = self.done;
                        var $6552 = self.term;
                        var $6553 = self.type;
                        var $6554 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6524 = $6554;
                        break;
                    case 'Fm.Term.gol':
                        var $6555 = self.name;
                        var $6556 = self.dref;
                        var $6557 = self.verb;
                        var $6558 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6524 = $6558;
                        break;
                    case 'Fm.Term.hol':
                        var $6559 = self.path;
                        var self = Fm$Term$equal$hole$($6559, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6561 = self.value;
                                var $6562 = self.errors;
                                var self = $6561;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6564 = Fm$Check$result$(Maybe$none, $6562);
                                        var $6563 = $6564;
                                        break;
                                    case 'Maybe.some':
                                        var $6565 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6567 = self.value;
                                                var $6568 = self.errors;
                                                var $6569 = Fm$Check$result$($6567, List$concat$($6562, $6568));
                                                var $6566 = $6569;
                                                break;
                                        };
                                        var $6563 = $6566;
                                        break;
                                };
                                var $6560 = $6563;
                                break;
                        };
                        var $6524 = $6560;
                        break;
                    case 'Fm.Term.nat':
                        var $6570 = self.natx;
                        var $6571 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6524 = $6571;
                        break;
                    case 'Fm.Term.chr':
                        var $6572 = self.chrx;
                        var $6573 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6524 = $6573;
                        break;
                    case 'Fm.Term.str':
                        var $6574 = self.strx;
                        var $6575 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6524 = $6575;
                        break;
                    case 'Fm.Term.cse':
                        var $6576 = self.path;
                        var $6577 = self.expr;
                        var $6578 = self.name;
                        var $6579 = self.with;
                        var $6580 = self.cses;
                        var $6581 = self.moti;
                        var $6582 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6524 = $6582;
                        break;
                    case 'Fm.Term.ori':
                        var $6583 = self.orig;
                        var $6584 = self.expr;
                        var $6585 = Fm$Term$equal$extra_holes$(_a$1, $6584);
                        var $6524 = $6585;
                        break;
                };
                var $5932 = $6524;
                break;
            case 'Fm.Term.hol':
                var $6586 = self.path;
                var self = Fm$Term$equal$hole$($6586, _b$2);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $6588 = self.value;
                        var $6589 = self.errors;
                        var self = $6588;
                        switch (self._) {
                            case 'Maybe.none':
                                var $6591 = Fm$Check$result$(Maybe$none, $6589);
                                var $6590 = $6591;
                                break;
                            case 'Maybe.some':
                                var $6592 = self.value;
                                var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $6594 = self.value;
                                        var $6595 = self.errors;
                                        var $6596 = Fm$Check$result$($6594, List$concat$($6589, $6595));
                                        var $6593 = $6596;
                                        break;
                                };
                                var $6590 = $6593;
                                break;
                        };
                        var $6587 = $6590;
                        break;
                };
                var $5932 = $6587;
                break;
            case 'Fm.Term.nat':
                var $6597 = self.natx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6599 = self.name;
                        var $6600 = self.indx;
                        var $6601 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6598 = $6601;
                        break;
                    case 'Fm.Term.ref':
                        var $6602 = self.name;
                        var $6603 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6598 = $6603;
                        break;
                    case 'Fm.Term.typ':
                        var $6604 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6598 = $6604;
                        break;
                    case 'Fm.Term.all':
                        var $6605 = self.eras;
                        var $6606 = self.self;
                        var $6607 = self.name;
                        var $6608 = self.xtyp;
                        var $6609 = self.body;
                        var $6610 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6598 = $6610;
                        break;
                    case 'Fm.Term.lam':
                        var $6611 = self.name;
                        var $6612 = self.body;
                        var $6613 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6598 = $6613;
                        break;
                    case 'Fm.Term.app':
                        var $6614 = self.func;
                        var $6615 = self.argm;
                        var $6616 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6598 = $6616;
                        break;
                    case 'Fm.Term.let':
                        var $6617 = self.name;
                        var $6618 = self.expr;
                        var $6619 = self.body;
                        var $6620 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6598 = $6620;
                        break;
                    case 'Fm.Term.def':
                        var $6621 = self.name;
                        var $6622 = self.expr;
                        var $6623 = self.body;
                        var $6624 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6598 = $6624;
                        break;
                    case 'Fm.Term.ann':
                        var $6625 = self.done;
                        var $6626 = self.term;
                        var $6627 = self.type;
                        var $6628 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6598 = $6628;
                        break;
                    case 'Fm.Term.gol':
                        var $6629 = self.name;
                        var $6630 = self.dref;
                        var $6631 = self.verb;
                        var $6632 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6598 = $6632;
                        break;
                    case 'Fm.Term.hol':
                        var $6633 = self.path;
                        var self = Fm$Term$equal$hole$($6633, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6635 = self.value;
                                var $6636 = self.errors;
                                var self = $6635;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6638 = Fm$Check$result$(Maybe$none, $6636);
                                        var $6637 = $6638;
                                        break;
                                    case 'Maybe.some':
                                        var $6639 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6641 = self.value;
                                                var $6642 = self.errors;
                                                var $6643 = Fm$Check$result$($6641, List$concat$($6636, $6642));
                                                var $6640 = $6643;
                                                break;
                                        };
                                        var $6637 = $6640;
                                        break;
                                };
                                var $6634 = $6637;
                                break;
                        };
                        var $6598 = $6634;
                        break;
                    case 'Fm.Term.nat':
                        var $6644 = self.natx;
                        var $6645 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6598 = $6645;
                        break;
                    case 'Fm.Term.chr':
                        var $6646 = self.chrx;
                        var $6647 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6598 = $6647;
                        break;
                    case 'Fm.Term.str':
                        var $6648 = self.strx;
                        var $6649 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6598 = $6649;
                        break;
                    case 'Fm.Term.cse':
                        var $6650 = self.path;
                        var $6651 = self.expr;
                        var $6652 = self.name;
                        var $6653 = self.with;
                        var $6654 = self.cses;
                        var $6655 = self.moti;
                        var $6656 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6598 = $6656;
                        break;
                    case 'Fm.Term.ori':
                        var $6657 = self.orig;
                        var $6658 = self.expr;
                        var $6659 = Fm$Term$equal$extra_holes$(_a$1, $6658);
                        var $6598 = $6659;
                        break;
                };
                var $5932 = $6598;
                break;
            case 'Fm.Term.chr':
                var $6660 = self.chrx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6662 = self.name;
                        var $6663 = self.indx;
                        var $6664 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6661 = $6664;
                        break;
                    case 'Fm.Term.ref':
                        var $6665 = self.name;
                        var $6666 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6661 = $6666;
                        break;
                    case 'Fm.Term.typ':
                        var $6667 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6661 = $6667;
                        break;
                    case 'Fm.Term.all':
                        var $6668 = self.eras;
                        var $6669 = self.self;
                        var $6670 = self.name;
                        var $6671 = self.xtyp;
                        var $6672 = self.body;
                        var $6673 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6661 = $6673;
                        break;
                    case 'Fm.Term.lam':
                        var $6674 = self.name;
                        var $6675 = self.body;
                        var $6676 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6661 = $6676;
                        break;
                    case 'Fm.Term.app':
                        var $6677 = self.func;
                        var $6678 = self.argm;
                        var $6679 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6661 = $6679;
                        break;
                    case 'Fm.Term.let':
                        var $6680 = self.name;
                        var $6681 = self.expr;
                        var $6682 = self.body;
                        var $6683 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6661 = $6683;
                        break;
                    case 'Fm.Term.def':
                        var $6684 = self.name;
                        var $6685 = self.expr;
                        var $6686 = self.body;
                        var $6687 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6661 = $6687;
                        break;
                    case 'Fm.Term.ann':
                        var $6688 = self.done;
                        var $6689 = self.term;
                        var $6690 = self.type;
                        var $6691 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6661 = $6691;
                        break;
                    case 'Fm.Term.gol':
                        var $6692 = self.name;
                        var $6693 = self.dref;
                        var $6694 = self.verb;
                        var $6695 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6661 = $6695;
                        break;
                    case 'Fm.Term.hol':
                        var $6696 = self.path;
                        var self = Fm$Term$equal$hole$($6696, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6698 = self.value;
                                var $6699 = self.errors;
                                var self = $6698;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6701 = Fm$Check$result$(Maybe$none, $6699);
                                        var $6700 = $6701;
                                        break;
                                    case 'Maybe.some':
                                        var $6702 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6704 = self.value;
                                                var $6705 = self.errors;
                                                var $6706 = Fm$Check$result$($6704, List$concat$($6699, $6705));
                                                var $6703 = $6706;
                                                break;
                                        };
                                        var $6700 = $6703;
                                        break;
                                };
                                var $6697 = $6700;
                                break;
                        };
                        var $6661 = $6697;
                        break;
                    case 'Fm.Term.nat':
                        var $6707 = self.natx;
                        var $6708 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6661 = $6708;
                        break;
                    case 'Fm.Term.chr':
                        var $6709 = self.chrx;
                        var $6710 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6661 = $6710;
                        break;
                    case 'Fm.Term.str':
                        var $6711 = self.strx;
                        var $6712 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6661 = $6712;
                        break;
                    case 'Fm.Term.cse':
                        var $6713 = self.path;
                        var $6714 = self.expr;
                        var $6715 = self.name;
                        var $6716 = self.with;
                        var $6717 = self.cses;
                        var $6718 = self.moti;
                        var $6719 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6661 = $6719;
                        break;
                    case 'Fm.Term.ori':
                        var $6720 = self.orig;
                        var $6721 = self.expr;
                        var $6722 = Fm$Term$equal$extra_holes$(_a$1, $6721);
                        var $6661 = $6722;
                        break;
                };
                var $5932 = $6661;
                break;
            case 'Fm.Term.str':
                var $6723 = self.strx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6725 = self.name;
                        var $6726 = self.indx;
                        var $6727 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6724 = $6727;
                        break;
                    case 'Fm.Term.ref':
                        var $6728 = self.name;
                        var $6729 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6724 = $6729;
                        break;
                    case 'Fm.Term.typ':
                        var $6730 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6724 = $6730;
                        break;
                    case 'Fm.Term.all':
                        var $6731 = self.eras;
                        var $6732 = self.self;
                        var $6733 = self.name;
                        var $6734 = self.xtyp;
                        var $6735 = self.body;
                        var $6736 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6724 = $6736;
                        break;
                    case 'Fm.Term.lam':
                        var $6737 = self.name;
                        var $6738 = self.body;
                        var $6739 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6724 = $6739;
                        break;
                    case 'Fm.Term.app':
                        var $6740 = self.func;
                        var $6741 = self.argm;
                        var $6742 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6724 = $6742;
                        break;
                    case 'Fm.Term.let':
                        var $6743 = self.name;
                        var $6744 = self.expr;
                        var $6745 = self.body;
                        var $6746 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6724 = $6746;
                        break;
                    case 'Fm.Term.def':
                        var $6747 = self.name;
                        var $6748 = self.expr;
                        var $6749 = self.body;
                        var $6750 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6724 = $6750;
                        break;
                    case 'Fm.Term.ann':
                        var $6751 = self.done;
                        var $6752 = self.term;
                        var $6753 = self.type;
                        var $6754 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6724 = $6754;
                        break;
                    case 'Fm.Term.gol':
                        var $6755 = self.name;
                        var $6756 = self.dref;
                        var $6757 = self.verb;
                        var $6758 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6724 = $6758;
                        break;
                    case 'Fm.Term.hol':
                        var $6759 = self.path;
                        var self = Fm$Term$equal$hole$($6759, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6761 = self.value;
                                var $6762 = self.errors;
                                var self = $6761;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6764 = Fm$Check$result$(Maybe$none, $6762);
                                        var $6763 = $6764;
                                        break;
                                    case 'Maybe.some':
                                        var $6765 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6767 = self.value;
                                                var $6768 = self.errors;
                                                var $6769 = Fm$Check$result$($6767, List$concat$($6762, $6768));
                                                var $6766 = $6769;
                                                break;
                                        };
                                        var $6763 = $6766;
                                        break;
                                };
                                var $6760 = $6763;
                                break;
                        };
                        var $6724 = $6760;
                        break;
                    case 'Fm.Term.nat':
                        var $6770 = self.natx;
                        var $6771 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6724 = $6771;
                        break;
                    case 'Fm.Term.chr':
                        var $6772 = self.chrx;
                        var $6773 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6724 = $6773;
                        break;
                    case 'Fm.Term.str':
                        var $6774 = self.strx;
                        var $6775 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6724 = $6775;
                        break;
                    case 'Fm.Term.cse':
                        var $6776 = self.path;
                        var $6777 = self.expr;
                        var $6778 = self.name;
                        var $6779 = self.with;
                        var $6780 = self.cses;
                        var $6781 = self.moti;
                        var $6782 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6724 = $6782;
                        break;
                    case 'Fm.Term.ori':
                        var $6783 = self.orig;
                        var $6784 = self.expr;
                        var $6785 = Fm$Term$equal$extra_holes$(_a$1, $6784);
                        var $6724 = $6785;
                        break;
                };
                var $5932 = $6724;
                break;
            case 'Fm.Term.cse':
                var $6786 = self.path;
                var $6787 = self.expr;
                var $6788 = self.name;
                var $6789 = self.with;
                var $6790 = self.cses;
                var $6791 = self.moti;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6793 = self.name;
                        var $6794 = self.indx;
                        var $6795 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6792 = $6795;
                        break;
                    case 'Fm.Term.ref':
                        var $6796 = self.name;
                        var $6797 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6792 = $6797;
                        break;
                    case 'Fm.Term.typ':
                        var $6798 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6792 = $6798;
                        break;
                    case 'Fm.Term.all':
                        var $6799 = self.eras;
                        var $6800 = self.self;
                        var $6801 = self.name;
                        var $6802 = self.xtyp;
                        var $6803 = self.body;
                        var $6804 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6792 = $6804;
                        break;
                    case 'Fm.Term.lam':
                        var $6805 = self.name;
                        var $6806 = self.body;
                        var $6807 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6792 = $6807;
                        break;
                    case 'Fm.Term.app':
                        var $6808 = self.func;
                        var $6809 = self.argm;
                        var $6810 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6792 = $6810;
                        break;
                    case 'Fm.Term.let':
                        var $6811 = self.name;
                        var $6812 = self.expr;
                        var $6813 = self.body;
                        var $6814 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6792 = $6814;
                        break;
                    case 'Fm.Term.def':
                        var $6815 = self.name;
                        var $6816 = self.expr;
                        var $6817 = self.body;
                        var $6818 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6792 = $6818;
                        break;
                    case 'Fm.Term.ann':
                        var $6819 = self.done;
                        var $6820 = self.term;
                        var $6821 = self.type;
                        var $6822 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6792 = $6822;
                        break;
                    case 'Fm.Term.gol':
                        var $6823 = self.name;
                        var $6824 = self.dref;
                        var $6825 = self.verb;
                        var $6826 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6792 = $6826;
                        break;
                    case 'Fm.Term.hol':
                        var $6827 = self.path;
                        var self = Fm$Term$equal$hole$($6827, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6829 = self.value;
                                var $6830 = self.errors;
                                var self = $6829;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6832 = Fm$Check$result$(Maybe$none, $6830);
                                        var $6831 = $6832;
                                        break;
                                    case 'Maybe.some':
                                        var $6833 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6835 = self.value;
                                                var $6836 = self.errors;
                                                var $6837 = Fm$Check$result$($6835, List$concat$($6830, $6836));
                                                var $6834 = $6837;
                                                break;
                                        };
                                        var $6831 = $6834;
                                        break;
                                };
                                var $6828 = $6831;
                                break;
                        };
                        var $6792 = $6828;
                        break;
                    case 'Fm.Term.nat':
                        var $6838 = self.natx;
                        var $6839 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6792 = $6839;
                        break;
                    case 'Fm.Term.chr':
                        var $6840 = self.chrx;
                        var $6841 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6792 = $6841;
                        break;
                    case 'Fm.Term.str':
                        var $6842 = self.strx;
                        var $6843 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6792 = $6843;
                        break;
                    case 'Fm.Term.cse':
                        var $6844 = self.path;
                        var $6845 = self.expr;
                        var $6846 = self.name;
                        var $6847 = self.with;
                        var $6848 = self.cses;
                        var $6849 = self.moti;
                        var $6850 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6792 = $6850;
                        break;
                    case 'Fm.Term.ori':
                        var $6851 = self.orig;
                        var $6852 = self.expr;
                        var $6853 = Fm$Term$equal$extra_holes$(_a$1, $6852);
                        var $6792 = $6853;
                        break;
                };
                var $5932 = $6792;
                break;
            case 'Fm.Term.ori':
                var $6854 = self.orig;
                var $6855 = self.expr;
                var $6856 = Fm$Term$equal$extra_holes$($6855, _b$2);
                var $5932 = $6856;
                break;
        };
        return $5932;
    };
    const Fm$Term$equal$extra_holes = x0 => x1 => Fm$Term$equal$extra_holes$(x0, x1);

    function Set$set$(_bits$1, _set$2) {
        var $6857 = Map$set$(_bits$1, Unit$new, _set$2);
        return $6857;
    };
    const Set$set = x0 => x1 => Set$set$(x0, x1);

    function Bool$eql$(_a$1, _b$2) {
        var self = _a$1;
        if (self) {
            var $6859 = _b$2;
            var $6858 = $6859;
        } else {
            var $6860 = (!_b$2);
            var $6858 = $6860;
        };
        return $6858;
    };
    const Bool$eql = x0 => x1 => Bool$eql$(x0, x1);

    function Fm$Term$equal$(_a$1, _b$2, _defs$3, _lv$4, _seen$5) {
        var _ah$6 = Fm$Term$serialize$(Fm$Term$reduce$(_a$1, Map$new), _lv$4, _lv$4, Bits$o, Bits$e);
        var _bh$7 = Fm$Term$serialize$(Fm$Term$reduce$(_b$2, Map$new), _lv$4, _lv$4, Bits$i, Bits$e);
        var self = (_bh$7 === _ah$6);
        if (self) {
            var $6862 = Fm$Check$result$(Maybe$some$(Bool$true), List$nil);
            var $6861 = $6862;
        } else {
            var _a1$8 = Fm$Term$reduce$(_a$1, _defs$3);
            var _b1$9 = Fm$Term$reduce$(_b$2, _defs$3);
            var _ah$10 = Fm$Term$serialize$(_a1$8, _lv$4, _lv$4, Bits$o, Bits$e);
            var _bh$11 = Fm$Term$serialize$(_b1$9, _lv$4, _lv$4, Bits$i, Bits$e);
            var self = (_bh$11 === _ah$10);
            if (self) {
                var $6864 = Fm$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $6863 = $6864;
            } else {
                var _id$12 = (_bh$11 + _ah$10);
                var self = Set$has$(_id$12, _seen$5);
                if (self) {
                    var self = Fm$Term$equal$extra_holes$(_a$1, _b$2);
                    switch (self._) {
                        case 'Fm.Check.result':
                            var $6867 = self.value;
                            var $6868 = self.errors;
                            var self = $6867;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $6870 = Fm$Check$result$(Maybe$none, $6868);
                                    var $6869 = $6870;
                                    break;
                                case 'Maybe.some':
                                    var $6871 = self.value;
                                    var self = Fm$Check$result$(Maybe$some$(Bool$true), List$nil);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $6873 = self.value;
                                            var $6874 = self.errors;
                                            var $6875 = Fm$Check$result$($6873, List$concat$($6868, $6874));
                                            var $6872 = $6875;
                                            break;
                                    };
                                    var $6869 = $6872;
                                    break;
                            };
                            var $6866 = $6869;
                            break;
                    };
                    var $6865 = $6866;
                } else {
                    var self = _a1$8;
                    switch (self._) {
                        case 'Fm.Term.var':
                            var $6877 = self.name;
                            var $6878 = self.indx;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6880 = self.name;
                                    var $6881 = self.indx;
                                    var $6882 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6879 = $6882;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6883 = self.name;
                                    var $6884 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6879 = $6884;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6885 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6879 = $6885;
                                    break;
                                case 'Fm.Term.all':
                                    var $6886 = self.eras;
                                    var $6887 = self.self;
                                    var $6888 = self.name;
                                    var $6889 = self.xtyp;
                                    var $6890 = self.body;
                                    var $6891 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6879 = $6891;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6892 = self.name;
                                    var $6893 = self.body;
                                    var $6894 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6879 = $6894;
                                    break;
                                case 'Fm.Term.app':
                                    var $6895 = self.func;
                                    var $6896 = self.argm;
                                    var $6897 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6879 = $6897;
                                    break;
                                case 'Fm.Term.let':
                                    var $6898 = self.name;
                                    var $6899 = self.expr;
                                    var $6900 = self.body;
                                    var $6901 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6879 = $6901;
                                    break;
                                case 'Fm.Term.def':
                                    var $6902 = self.name;
                                    var $6903 = self.expr;
                                    var $6904 = self.body;
                                    var $6905 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6879 = $6905;
                                    break;
                                case 'Fm.Term.ann':
                                    var $6906 = self.done;
                                    var $6907 = self.term;
                                    var $6908 = self.type;
                                    var $6909 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6879 = $6909;
                                    break;
                                case 'Fm.Term.gol':
                                    var $6910 = self.name;
                                    var $6911 = self.dref;
                                    var $6912 = self.verb;
                                    var $6913 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6879 = $6913;
                                    break;
                                case 'Fm.Term.hol':
                                    var $6914 = self.path;
                                    var $6915 = Fm$Term$equal$hole$($6914, _a$1);
                                    var $6879 = $6915;
                                    break;
                                case 'Fm.Term.nat':
                                    var $6916 = self.natx;
                                    var $6917 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6879 = $6917;
                                    break;
                                case 'Fm.Term.chr':
                                    var $6918 = self.chrx;
                                    var $6919 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6879 = $6919;
                                    break;
                                case 'Fm.Term.str':
                                    var $6920 = self.strx;
                                    var $6921 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6879 = $6921;
                                    break;
                                case 'Fm.Term.cse':
                                    var $6922 = self.path;
                                    var $6923 = self.expr;
                                    var $6924 = self.name;
                                    var $6925 = self.with;
                                    var $6926 = self.cses;
                                    var $6927 = self.moti;
                                    var $6928 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6879 = $6928;
                                    break;
                                case 'Fm.Term.ori':
                                    var $6929 = self.orig;
                                    var $6930 = self.expr;
                                    var $6931 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6879 = $6931;
                                    break;
                            };
                            var $6876 = $6879;
                            break;
                        case 'Fm.Term.ref':
                            var $6932 = self.name;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6934 = self.name;
                                    var $6935 = self.indx;
                                    var $6936 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6933 = $6936;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6937 = self.name;
                                    var $6938 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6933 = $6938;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6939 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6933 = $6939;
                                    break;
                                case 'Fm.Term.all':
                                    var $6940 = self.eras;
                                    var $6941 = self.self;
                                    var $6942 = self.name;
                                    var $6943 = self.xtyp;
                                    var $6944 = self.body;
                                    var $6945 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6933 = $6945;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6946 = self.name;
                                    var $6947 = self.body;
                                    var $6948 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6933 = $6948;
                                    break;
                                case 'Fm.Term.app':
                                    var $6949 = self.func;
                                    var $6950 = self.argm;
                                    var $6951 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6933 = $6951;
                                    break;
                                case 'Fm.Term.let':
                                    var $6952 = self.name;
                                    var $6953 = self.expr;
                                    var $6954 = self.body;
                                    var $6955 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6933 = $6955;
                                    break;
                                case 'Fm.Term.def':
                                    var $6956 = self.name;
                                    var $6957 = self.expr;
                                    var $6958 = self.body;
                                    var $6959 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6933 = $6959;
                                    break;
                                case 'Fm.Term.ann':
                                    var $6960 = self.done;
                                    var $6961 = self.term;
                                    var $6962 = self.type;
                                    var $6963 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6933 = $6963;
                                    break;
                                case 'Fm.Term.gol':
                                    var $6964 = self.name;
                                    var $6965 = self.dref;
                                    var $6966 = self.verb;
                                    var $6967 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6933 = $6967;
                                    break;
                                case 'Fm.Term.hol':
                                    var $6968 = self.path;
                                    var $6969 = Fm$Term$equal$hole$($6968, _a$1);
                                    var $6933 = $6969;
                                    break;
                                case 'Fm.Term.nat':
                                    var $6970 = self.natx;
                                    var $6971 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6933 = $6971;
                                    break;
                                case 'Fm.Term.chr':
                                    var $6972 = self.chrx;
                                    var $6973 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6933 = $6973;
                                    break;
                                case 'Fm.Term.str':
                                    var $6974 = self.strx;
                                    var $6975 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6933 = $6975;
                                    break;
                                case 'Fm.Term.cse':
                                    var $6976 = self.path;
                                    var $6977 = self.expr;
                                    var $6978 = self.name;
                                    var $6979 = self.with;
                                    var $6980 = self.cses;
                                    var $6981 = self.moti;
                                    var $6982 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6933 = $6982;
                                    break;
                                case 'Fm.Term.ori':
                                    var $6983 = self.orig;
                                    var $6984 = self.expr;
                                    var $6985 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6933 = $6985;
                                    break;
                            };
                            var $6876 = $6933;
                            break;
                        case 'Fm.Term.typ':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6987 = self.name;
                                    var $6988 = self.indx;
                                    var $6989 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6986 = $6989;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6990 = self.name;
                                    var $6991 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6986 = $6991;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6992 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6986 = $6992;
                                    break;
                                case 'Fm.Term.all':
                                    var $6993 = self.eras;
                                    var $6994 = self.self;
                                    var $6995 = self.name;
                                    var $6996 = self.xtyp;
                                    var $6997 = self.body;
                                    var $6998 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6986 = $6998;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6999 = self.name;
                                    var $7000 = self.body;
                                    var $7001 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6986 = $7001;
                                    break;
                                case 'Fm.Term.app':
                                    var $7002 = self.func;
                                    var $7003 = self.argm;
                                    var $7004 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6986 = $7004;
                                    break;
                                case 'Fm.Term.let':
                                    var $7005 = self.name;
                                    var $7006 = self.expr;
                                    var $7007 = self.body;
                                    var $7008 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6986 = $7008;
                                    break;
                                case 'Fm.Term.def':
                                    var $7009 = self.name;
                                    var $7010 = self.expr;
                                    var $7011 = self.body;
                                    var $7012 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6986 = $7012;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7013 = self.done;
                                    var $7014 = self.term;
                                    var $7015 = self.type;
                                    var $7016 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6986 = $7016;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7017 = self.name;
                                    var $7018 = self.dref;
                                    var $7019 = self.verb;
                                    var $7020 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6986 = $7020;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7021 = self.path;
                                    var $7022 = Fm$Term$equal$hole$($7021, _a$1);
                                    var $6986 = $7022;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7023 = self.natx;
                                    var $7024 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6986 = $7024;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7025 = self.chrx;
                                    var $7026 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6986 = $7026;
                                    break;
                                case 'Fm.Term.str':
                                    var $7027 = self.strx;
                                    var $7028 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6986 = $7028;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7029 = self.path;
                                    var $7030 = self.expr;
                                    var $7031 = self.name;
                                    var $7032 = self.with;
                                    var $7033 = self.cses;
                                    var $7034 = self.moti;
                                    var $7035 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6986 = $7035;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7036 = self.orig;
                                    var $7037 = self.expr;
                                    var $7038 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6986 = $7038;
                                    break;
                            };
                            var $6876 = $6986;
                            break;
                        case 'Fm.Term.all':
                            var $7039 = self.eras;
                            var $7040 = self.self;
                            var $7041 = self.name;
                            var $7042 = self.xtyp;
                            var $7043 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7045 = self.name;
                                    var $7046 = self.indx;
                                    var $7047 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7044 = $7047;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7048 = self.name;
                                    var $7049 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7044 = $7049;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7050 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7044 = $7050;
                                    break;
                                case 'Fm.Term.all':
                                    var $7051 = self.eras;
                                    var $7052 = self.self;
                                    var $7053 = self.name;
                                    var $7054 = self.xtyp;
                                    var $7055 = self.body;
                                    var _seen$23 = Set$set$(_id$12, _seen$5);
                                    var _a1_body$24 = $7043(Fm$Term$var$($7040, _lv$4))(Fm$Term$var$($7041, Nat$succ$(_lv$4)));
                                    var _b1_body$25 = $7055(Fm$Term$var$($7052, _lv$4))(Fm$Term$var$($7053, Nat$succ$(_lv$4)));
                                    var _eq_self$26 = ($7040 === $7052);
                                    var _eq_eras$27 = Bool$eql$($7039, $7051);
                                    var self = (_eq_self$26 && _eq_eras$27);
                                    if (self) {
                                        var self = Fm$Term$equal$($7042, $7054, _defs$3, _lv$4, _seen$23);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $7058 = self.value;
                                                var $7059 = self.errors;
                                                var self = $7058;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $7061 = Fm$Check$result$(Maybe$none, $7059);
                                                        var $7060 = $7061;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $7062 = self.value;
                                                        var self = Fm$Term$equal$(_a1_body$24, _b1_body$25, _defs$3, Nat$succ$(Nat$succ$(_lv$4)), _seen$23);
                                                        switch (self._) {
                                                            case 'Fm.Check.result':
                                                                var $7064 = self.value;
                                                                var $7065 = self.errors;
                                                                var self = $7064;
                                                                switch (self._) {
                                                                    case 'Maybe.none':
                                                                        var $7067 = Fm$Check$result$(Maybe$none, $7065);
                                                                        var $7066 = $7067;
                                                                        break;
                                                                    case 'Maybe.some':
                                                                        var $7068 = self.value;
                                                                        var self = Fm$Check$result$(Maybe$some$(($7062 && $7068)), List$nil);
                                                                        switch (self._) {
                                                                            case 'Fm.Check.result':
                                                                                var $7070 = self.value;
                                                                                var $7071 = self.errors;
                                                                                var $7072 = Fm$Check$result$($7070, List$concat$($7065, $7071));
                                                                                var $7069 = $7072;
                                                                                break;
                                                                        };
                                                                        var $7066 = $7069;
                                                                        break;
                                                                };
                                                                var self = $7066;
                                                                break;
                                                        };
                                                        switch (self._) {
                                                            case 'Fm.Check.result':
                                                                var $7073 = self.value;
                                                                var $7074 = self.errors;
                                                                var $7075 = Fm$Check$result$($7073, List$concat$($7059, $7074));
                                                                var $7063 = $7075;
                                                                break;
                                                        };
                                                        var $7060 = $7063;
                                                        break;
                                                };
                                                var $7057 = $7060;
                                                break;
                                        };
                                        var $7056 = $7057;
                                    } else {
                                        var $7076 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $7056 = $7076;
                                    };
                                    var $7044 = $7056;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7077 = self.name;
                                    var $7078 = self.body;
                                    var $7079 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7044 = $7079;
                                    break;
                                case 'Fm.Term.app':
                                    var $7080 = self.func;
                                    var $7081 = self.argm;
                                    var $7082 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7044 = $7082;
                                    break;
                                case 'Fm.Term.let':
                                    var $7083 = self.name;
                                    var $7084 = self.expr;
                                    var $7085 = self.body;
                                    var $7086 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7044 = $7086;
                                    break;
                                case 'Fm.Term.def':
                                    var $7087 = self.name;
                                    var $7088 = self.expr;
                                    var $7089 = self.body;
                                    var $7090 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7044 = $7090;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7091 = self.done;
                                    var $7092 = self.term;
                                    var $7093 = self.type;
                                    var $7094 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7044 = $7094;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7095 = self.name;
                                    var $7096 = self.dref;
                                    var $7097 = self.verb;
                                    var $7098 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7044 = $7098;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7099 = self.path;
                                    var $7100 = Fm$Term$equal$hole$($7099, _a$1);
                                    var $7044 = $7100;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7101 = self.natx;
                                    var $7102 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7044 = $7102;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7103 = self.chrx;
                                    var $7104 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7044 = $7104;
                                    break;
                                case 'Fm.Term.str':
                                    var $7105 = self.strx;
                                    var $7106 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7044 = $7106;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7107 = self.path;
                                    var $7108 = self.expr;
                                    var $7109 = self.name;
                                    var $7110 = self.with;
                                    var $7111 = self.cses;
                                    var $7112 = self.moti;
                                    var $7113 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7044 = $7113;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7114 = self.orig;
                                    var $7115 = self.expr;
                                    var $7116 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7044 = $7116;
                                    break;
                            };
                            var $6876 = $7044;
                            break;
                        case 'Fm.Term.lam':
                            var $7117 = self.name;
                            var $7118 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7120 = self.name;
                                    var $7121 = self.indx;
                                    var $7122 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7119 = $7122;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7123 = self.name;
                                    var $7124 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7119 = $7124;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7125 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7119 = $7125;
                                    break;
                                case 'Fm.Term.all':
                                    var $7126 = self.eras;
                                    var $7127 = self.self;
                                    var $7128 = self.name;
                                    var $7129 = self.xtyp;
                                    var $7130 = self.body;
                                    var $7131 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7119 = $7131;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7132 = self.name;
                                    var $7133 = self.body;
                                    var _seen$17 = Set$set$(_id$12, _seen$5);
                                    var _a1_body$18 = $7118(Fm$Term$var$($7117, _lv$4));
                                    var _b1_body$19 = $7133(Fm$Term$var$($7132, _lv$4));
                                    var self = Fm$Term$equal$(_a1_body$18, _b1_body$19, _defs$3, Nat$succ$(_lv$4), _seen$17);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $7135 = self.value;
                                            var $7136 = self.errors;
                                            var self = $7135;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $7138 = Fm$Check$result$(Maybe$none, $7136);
                                                    var $7137 = $7138;
                                                    break;
                                                case 'Maybe.some':
                                                    var $7139 = self.value;
                                                    var self = Fm$Check$result$(Maybe$some$($7139), List$nil);
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $7141 = self.value;
                                                            var $7142 = self.errors;
                                                            var $7143 = Fm$Check$result$($7141, List$concat$($7136, $7142));
                                                            var $7140 = $7143;
                                                            break;
                                                    };
                                                    var $7137 = $7140;
                                                    break;
                                            };
                                            var $7134 = $7137;
                                            break;
                                    };
                                    var $7119 = $7134;
                                    break;
                                case 'Fm.Term.app':
                                    var $7144 = self.func;
                                    var $7145 = self.argm;
                                    var $7146 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7119 = $7146;
                                    break;
                                case 'Fm.Term.let':
                                    var $7147 = self.name;
                                    var $7148 = self.expr;
                                    var $7149 = self.body;
                                    var $7150 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7119 = $7150;
                                    break;
                                case 'Fm.Term.def':
                                    var $7151 = self.name;
                                    var $7152 = self.expr;
                                    var $7153 = self.body;
                                    var $7154 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7119 = $7154;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7155 = self.done;
                                    var $7156 = self.term;
                                    var $7157 = self.type;
                                    var $7158 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7119 = $7158;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7159 = self.name;
                                    var $7160 = self.dref;
                                    var $7161 = self.verb;
                                    var $7162 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7119 = $7162;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7163 = self.path;
                                    var $7164 = Fm$Term$equal$hole$($7163, _a$1);
                                    var $7119 = $7164;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7165 = self.natx;
                                    var $7166 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7119 = $7166;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7167 = self.chrx;
                                    var $7168 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7119 = $7168;
                                    break;
                                case 'Fm.Term.str':
                                    var $7169 = self.strx;
                                    var $7170 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7119 = $7170;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7171 = self.path;
                                    var $7172 = self.expr;
                                    var $7173 = self.name;
                                    var $7174 = self.with;
                                    var $7175 = self.cses;
                                    var $7176 = self.moti;
                                    var $7177 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7119 = $7177;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7178 = self.orig;
                                    var $7179 = self.expr;
                                    var $7180 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7119 = $7180;
                                    break;
                            };
                            var $6876 = $7119;
                            break;
                        case 'Fm.Term.app':
                            var $7181 = self.func;
                            var $7182 = self.argm;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7184 = self.name;
                                    var $7185 = self.indx;
                                    var $7186 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7183 = $7186;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7187 = self.name;
                                    var $7188 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7183 = $7188;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7189 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7183 = $7189;
                                    break;
                                case 'Fm.Term.all':
                                    var $7190 = self.eras;
                                    var $7191 = self.self;
                                    var $7192 = self.name;
                                    var $7193 = self.xtyp;
                                    var $7194 = self.body;
                                    var $7195 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7183 = $7195;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7196 = self.name;
                                    var $7197 = self.body;
                                    var $7198 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7183 = $7198;
                                    break;
                                case 'Fm.Term.app':
                                    var $7199 = self.func;
                                    var $7200 = self.argm;
                                    var _seen$17 = Set$set$(_id$12, _seen$5);
                                    var self = Fm$Term$equal$($7181, $7199, _defs$3, _lv$4, _seen$17);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $7202 = self.value;
                                            var $7203 = self.errors;
                                            var self = $7202;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $7205 = Fm$Check$result$(Maybe$none, $7203);
                                                    var $7204 = $7205;
                                                    break;
                                                case 'Maybe.some':
                                                    var $7206 = self.value;
                                                    var self = Fm$Term$equal$($7182, $7200, _defs$3, _lv$4, _seen$17);
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $7208 = self.value;
                                                            var $7209 = self.errors;
                                                            var self = $7208;
                                                            switch (self._) {
                                                                case 'Maybe.none':
                                                                    var $7211 = Fm$Check$result$(Maybe$none, $7209);
                                                                    var $7210 = $7211;
                                                                    break;
                                                                case 'Maybe.some':
                                                                    var $7212 = self.value;
                                                                    var self = Fm$Check$result$(Maybe$some$(($7206 && $7212)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Fm.Check.result':
                                                                            var $7214 = self.value;
                                                                            var $7215 = self.errors;
                                                                            var $7216 = Fm$Check$result$($7214, List$concat$($7209, $7215));
                                                                            var $7213 = $7216;
                                                                            break;
                                                                    };
                                                                    var $7210 = $7213;
                                                                    break;
                                                            };
                                                            var self = $7210;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $7217 = self.value;
                                                            var $7218 = self.errors;
                                                            var $7219 = Fm$Check$result$($7217, List$concat$($7203, $7218));
                                                            var $7207 = $7219;
                                                            break;
                                                    };
                                                    var $7204 = $7207;
                                                    break;
                                            };
                                            var $7201 = $7204;
                                            break;
                                    };
                                    var $7183 = $7201;
                                    break;
                                case 'Fm.Term.let':
                                    var $7220 = self.name;
                                    var $7221 = self.expr;
                                    var $7222 = self.body;
                                    var $7223 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7183 = $7223;
                                    break;
                                case 'Fm.Term.def':
                                    var $7224 = self.name;
                                    var $7225 = self.expr;
                                    var $7226 = self.body;
                                    var $7227 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7183 = $7227;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7228 = self.done;
                                    var $7229 = self.term;
                                    var $7230 = self.type;
                                    var $7231 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7183 = $7231;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7232 = self.name;
                                    var $7233 = self.dref;
                                    var $7234 = self.verb;
                                    var $7235 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7183 = $7235;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7236 = self.path;
                                    var $7237 = Fm$Term$equal$hole$($7236, _a$1);
                                    var $7183 = $7237;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7238 = self.natx;
                                    var $7239 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7183 = $7239;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7240 = self.chrx;
                                    var $7241 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7183 = $7241;
                                    break;
                                case 'Fm.Term.str':
                                    var $7242 = self.strx;
                                    var $7243 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7183 = $7243;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7244 = self.path;
                                    var $7245 = self.expr;
                                    var $7246 = self.name;
                                    var $7247 = self.with;
                                    var $7248 = self.cses;
                                    var $7249 = self.moti;
                                    var $7250 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7183 = $7250;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7251 = self.orig;
                                    var $7252 = self.expr;
                                    var $7253 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7183 = $7253;
                                    break;
                            };
                            var $6876 = $7183;
                            break;
                        case 'Fm.Term.let':
                            var $7254 = self.name;
                            var $7255 = self.expr;
                            var $7256 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7258 = self.name;
                                    var $7259 = self.indx;
                                    var $7260 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7257 = $7260;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7261 = self.name;
                                    var $7262 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7257 = $7262;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7263 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7257 = $7263;
                                    break;
                                case 'Fm.Term.all':
                                    var $7264 = self.eras;
                                    var $7265 = self.self;
                                    var $7266 = self.name;
                                    var $7267 = self.xtyp;
                                    var $7268 = self.body;
                                    var $7269 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7257 = $7269;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7270 = self.name;
                                    var $7271 = self.body;
                                    var $7272 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7257 = $7272;
                                    break;
                                case 'Fm.Term.app':
                                    var $7273 = self.func;
                                    var $7274 = self.argm;
                                    var $7275 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7257 = $7275;
                                    break;
                                case 'Fm.Term.let':
                                    var $7276 = self.name;
                                    var $7277 = self.expr;
                                    var $7278 = self.body;
                                    var _seen$19 = Set$set$(_id$12, _seen$5);
                                    var _a1_body$20 = $7256(Fm$Term$var$($7254, _lv$4));
                                    var _b1_body$21 = $7278(Fm$Term$var$($7276, _lv$4));
                                    var self = Fm$Term$equal$($7255, $7277, _defs$3, _lv$4, _seen$19);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $7280 = self.value;
                                            var $7281 = self.errors;
                                            var self = $7280;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $7283 = Fm$Check$result$(Maybe$none, $7281);
                                                    var $7282 = $7283;
                                                    break;
                                                case 'Maybe.some':
                                                    var $7284 = self.value;
                                                    var self = Fm$Term$equal$(_a1_body$20, _b1_body$21, _defs$3, Nat$succ$(_lv$4), _seen$19);
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $7286 = self.value;
                                                            var $7287 = self.errors;
                                                            var self = $7286;
                                                            switch (self._) {
                                                                case 'Maybe.none':
                                                                    var $7289 = Fm$Check$result$(Maybe$none, $7287);
                                                                    var $7288 = $7289;
                                                                    break;
                                                                case 'Maybe.some':
                                                                    var $7290 = self.value;
                                                                    var self = Fm$Check$result$(Maybe$some$(($7284 && $7290)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Fm.Check.result':
                                                                            var $7292 = self.value;
                                                                            var $7293 = self.errors;
                                                                            var $7294 = Fm$Check$result$($7292, List$concat$($7287, $7293));
                                                                            var $7291 = $7294;
                                                                            break;
                                                                    };
                                                                    var $7288 = $7291;
                                                                    break;
                                                            };
                                                            var self = $7288;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $7295 = self.value;
                                                            var $7296 = self.errors;
                                                            var $7297 = Fm$Check$result$($7295, List$concat$($7281, $7296));
                                                            var $7285 = $7297;
                                                            break;
                                                    };
                                                    var $7282 = $7285;
                                                    break;
                                            };
                                            var $7279 = $7282;
                                            break;
                                    };
                                    var $7257 = $7279;
                                    break;
                                case 'Fm.Term.def':
                                    var $7298 = self.name;
                                    var $7299 = self.expr;
                                    var $7300 = self.body;
                                    var $7301 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7257 = $7301;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7302 = self.done;
                                    var $7303 = self.term;
                                    var $7304 = self.type;
                                    var $7305 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7257 = $7305;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7306 = self.name;
                                    var $7307 = self.dref;
                                    var $7308 = self.verb;
                                    var $7309 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7257 = $7309;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7310 = self.path;
                                    var $7311 = Fm$Term$equal$hole$($7310, _a$1);
                                    var $7257 = $7311;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7312 = self.natx;
                                    var $7313 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7257 = $7313;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7314 = self.chrx;
                                    var $7315 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7257 = $7315;
                                    break;
                                case 'Fm.Term.str':
                                    var $7316 = self.strx;
                                    var $7317 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7257 = $7317;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7318 = self.path;
                                    var $7319 = self.expr;
                                    var $7320 = self.name;
                                    var $7321 = self.with;
                                    var $7322 = self.cses;
                                    var $7323 = self.moti;
                                    var $7324 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7257 = $7324;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7325 = self.orig;
                                    var $7326 = self.expr;
                                    var $7327 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7257 = $7327;
                                    break;
                            };
                            var $6876 = $7257;
                            break;
                        case 'Fm.Term.def':
                            var $7328 = self.name;
                            var $7329 = self.expr;
                            var $7330 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7332 = self.name;
                                    var $7333 = self.indx;
                                    var $7334 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7331 = $7334;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7335 = self.name;
                                    var $7336 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7331 = $7336;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7337 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7331 = $7337;
                                    break;
                                case 'Fm.Term.all':
                                    var $7338 = self.eras;
                                    var $7339 = self.self;
                                    var $7340 = self.name;
                                    var $7341 = self.xtyp;
                                    var $7342 = self.body;
                                    var $7343 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7331 = $7343;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7344 = self.name;
                                    var $7345 = self.body;
                                    var $7346 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7331 = $7346;
                                    break;
                                case 'Fm.Term.app':
                                    var $7347 = self.func;
                                    var $7348 = self.argm;
                                    var $7349 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7331 = $7349;
                                    break;
                                case 'Fm.Term.let':
                                    var $7350 = self.name;
                                    var $7351 = self.expr;
                                    var $7352 = self.body;
                                    var $7353 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7331 = $7353;
                                    break;
                                case 'Fm.Term.def':
                                    var $7354 = self.name;
                                    var $7355 = self.expr;
                                    var $7356 = self.body;
                                    var $7357 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7331 = $7357;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7358 = self.done;
                                    var $7359 = self.term;
                                    var $7360 = self.type;
                                    var $7361 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7331 = $7361;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7362 = self.name;
                                    var $7363 = self.dref;
                                    var $7364 = self.verb;
                                    var $7365 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7331 = $7365;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7366 = self.path;
                                    var $7367 = Fm$Term$equal$hole$($7366, _a$1);
                                    var $7331 = $7367;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7368 = self.natx;
                                    var $7369 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7331 = $7369;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7370 = self.chrx;
                                    var $7371 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7331 = $7371;
                                    break;
                                case 'Fm.Term.str':
                                    var $7372 = self.strx;
                                    var $7373 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7331 = $7373;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7374 = self.path;
                                    var $7375 = self.expr;
                                    var $7376 = self.name;
                                    var $7377 = self.with;
                                    var $7378 = self.cses;
                                    var $7379 = self.moti;
                                    var $7380 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7331 = $7380;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7381 = self.orig;
                                    var $7382 = self.expr;
                                    var $7383 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7331 = $7383;
                                    break;
                            };
                            var $6876 = $7331;
                            break;
                        case 'Fm.Term.ann':
                            var $7384 = self.done;
                            var $7385 = self.term;
                            var $7386 = self.type;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7388 = self.name;
                                    var $7389 = self.indx;
                                    var $7390 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7387 = $7390;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7391 = self.name;
                                    var $7392 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7387 = $7392;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7393 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7387 = $7393;
                                    break;
                                case 'Fm.Term.all':
                                    var $7394 = self.eras;
                                    var $7395 = self.self;
                                    var $7396 = self.name;
                                    var $7397 = self.xtyp;
                                    var $7398 = self.body;
                                    var $7399 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7387 = $7399;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7400 = self.name;
                                    var $7401 = self.body;
                                    var $7402 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7387 = $7402;
                                    break;
                                case 'Fm.Term.app':
                                    var $7403 = self.func;
                                    var $7404 = self.argm;
                                    var $7405 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7387 = $7405;
                                    break;
                                case 'Fm.Term.let':
                                    var $7406 = self.name;
                                    var $7407 = self.expr;
                                    var $7408 = self.body;
                                    var $7409 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7387 = $7409;
                                    break;
                                case 'Fm.Term.def':
                                    var $7410 = self.name;
                                    var $7411 = self.expr;
                                    var $7412 = self.body;
                                    var $7413 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7387 = $7413;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7414 = self.done;
                                    var $7415 = self.term;
                                    var $7416 = self.type;
                                    var $7417 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7387 = $7417;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7418 = self.name;
                                    var $7419 = self.dref;
                                    var $7420 = self.verb;
                                    var $7421 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7387 = $7421;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7422 = self.path;
                                    var $7423 = Fm$Term$equal$hole$($7422, _a$1);
                                    var $7387 = $7423;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7424 = self.natx;
                                    var $7425 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7387 = $7425;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7426 = self.chrx;
                                    var $7427 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7387 = $7427;
                                    break;
                                case 'Fm.Term.str':
                                    var $7428 = self.strx;
                                    var $7429 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7387 = $7429;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7430 = self.path;
                                    var $7431 = self.expr;
                                    var $7432 = self.name;
                                    var $7433 = self.with;
                                    var $7434 = self.cses;
                                    var $7435 = self.moti;
                                    var $7436 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7387 = $7436;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7437 = self.orig;
                                    var $7438 = self.expr;
                                    var $7439 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7387 = $7439;
                                    break;
                            };
                            var $6876 = $7387;
                            break;
                        case 'Fm.Term.gol':
                            var $7440 = self.name;
                            var $7441 = self.dref;
                            var $7442 = self.verb;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7444 = self.name;
                                    var $7445 = self.indx;
                                    var $7446 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7443 = $7446;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7447 = self.name;
                                    var $7448 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7443 = $7448;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7449 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7443 = $7449;
                                    break;
                                case 'Fm.Term.all':
                                    var $7450 = self.eras;
                                    var $7451 = self.self;
                                    var $7452 = self.name;
                                    var $7453 = self.xtyp;
                                    var $7454 = self.body;
                                    var $7455 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7443 = $7455;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7456 = self.name;
                                    var $7457 = self.body;
                                    var $7458 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7443 = $7458;
                                    break;
                                case 'Fm.Term.app':
                                    var $7459 = self.func;
                                    var $7460 = self.argm;
                                    var $7461 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7443 = $7461;
                                    break;
                                case 'Fm.Term.let':
                                    var $7462 = self.name;
                                    var $7463 = self.expr;
                                    var $7464 = self.body;
                                    var $7465 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7443 = $7465;
                                    break;
                                case 'Fm.Term.def':
                                    var $7466 = self.name;
                                    var $7467 = self.expr;
                                    var $7468 = self.body;
                                    var $7469 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7443 = $7469;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7470 = self.done;
                                    var $7471 = self.term;
                                    var $7472 = self.type;
                                    var $7473 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7443 = $7473;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7474 = self.name;
                                    var $7475 = self.dref;
                                    var $7476 = self.verb;
                                    var $7477 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7443 = $7477;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7478 = self.path;
                                    var $7479 = Fm$Term$equal$hole$($7478, _a$1);
                                    var $7443 = $7479;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7480 = self.natx;
                                    var $7481 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7443 = $7481;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7482 = self.chrx;
                                    var $7483 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7443 = $7483;
                                    break;
                                case 'Fm.Term.str':
                                    var $7484 = self.strx;
                                    var $7485 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7443 = $7485;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7486 = self.path;
                                    var $7487 = self.expr;
                                    var $7488 = self.name;
                                    var $7489 = self.with;
                                    var $7490 = self.cses;
                                    var $7491 = self.moti;
                                    var $7492 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7443 = $7492;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7493 = self.orig;
                                    var $7494 = self.expr;
                                    var $7495 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7443 = $7495;
                                    break;
                            };
                            var $6876 = $7443;
                            break;
                        case 'Fm.Term.hol':
                            var $7496 = self.path;
                            var $7497 = Fm$Term$equal$hole$($7496, _b$2);
                            var $6876 = $7497;
                            break;
                        case 'Fm.Term.nat':
                            var $7498 = self.natx;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7500 = self.name;
                                    var $7501 = self.indx;
                                    var $7502 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7499 = $7502;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7503 = self.name;
                                    var $7504 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7499 = $7504;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7505 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7499 = $7505;
                                    break;
                                case 'Fm.Term.all':
                                    var $7506 = self.eras;
                                    var $7507 = self.self;
                                    var $7508 = self.name;
                                    var $7509 = self.xtyp;
                                    var $7510 = self.body;
                                    var $7511 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7499 = $7511;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7512 = self.name;
                                    var $7513 = self.body;
                                    var $7514 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7499 = $7514;
                                    break;
                                case 'Fm.Term.app':
                                    var $7515 = self.func;
                                    var $7516 = self.argm;
                                    var $7517 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7499 = $7517;
                                    break;
                                case 'Fm.Term.let':
                                    var $7518 = self.name;
                                    var $7519 = self.expr;
                                    var $7520 = self.body;
                                    var $7521 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7499 = $7521;
                                    break;
                                case 'Fm.Term.def':
                                    var $7522 = self.name;
                                    var $7523 = self.expr;
                                    var $7524 = self.body;
                                    var $7525 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7499 = $7525;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7526 = self.done;
                                    var $7527 = self.term;
                                    var $7528 = self.type;
                                    var $7529 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7499 = $7529;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7530 = self.name;
                                    var $7531 = self.dref;
                                    var $7532 = self.verb;
                                    var $7533 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7499 = $7533;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7534 = self.path;
                                    var $7535 = Fm$Term$equal$hole$($7534, _a$1);
                                    var $7499 = $7535;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7536 = self.natx;
                                    var $7537 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7499 = $7537;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7538 = self.chrx;
                                    var $7539 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7499 = $7539;
                                    break;
                                case 'Fm.Term.str':
                                    var $7540 = self.strx;
                                    var $7541 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7499 = $7541;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7542 = self.path;
                                    var $7543 = self.expr;
                                    var $7544 = self.name;
                                    var $7545 = self.with;
                                    var $7546 = self.cses;
                                    var $7547 = self.moti;
                                    var $7548 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7499 = $7548;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7549 = self.orig;
                                    var $7550 = self.expr;
                                    var $7551 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7499 = $7551;
                                    break;
                            };
                            var $6876 = $7499;
                            break;
                        case 'Fm.Term.chr':
                            var $7552 = self.chrx;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7554 = self.name;
                                    var $7555 = self.indx;
                                    var $7556 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7553 = $7556;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7557 = self.name;
                                    var $7558 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7553 = $7558;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7559 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7553 = $7559;
                                    break;
                                case 'Fm.Term.all':
                                    var $7560 = self.eras;
                                    var $7561 = self.self;
                                    var $7562 = self.name;
                                    var $7563 = self.xtyp;
                                    var $7564 = self.body;
                                    var $7565 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7553 = $7565;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7566 = self.name;
                                    var $7567 = self.body;
                                    var $7568 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7553 = $7568;
                                    break;
                                case 'Fm.Term.app':
                                    var $7569 = self.func;
                                    var $7570 = self.argm;
                                    var $7571 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7553 = $7571;
                                    break;
                                case 'Fm.Term.let':
                                    var $7572 = self.name;
                                    var $7573 = self.expr;
                                    var $7574 = self.body;
                                    var $7575 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7553 = $7575;
                                    break;
                                case 'Fm.Term.def':
                                    var $7576 = self.name;
                                    var $7577 = self.expr;
                                    var $7578 = self.body;
                                    var $7579 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7553 = $7579;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7580 = self.done;
                                    var $7581 = self.term;
                                    var $7582 = self.type;
                                    var $7583 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7553 = $7583;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7584 = self.name;
                                    var $7585 = self.dref;
                                    var $7586 = self.verb;
                                    var $7587 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7553 = $7587;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7588 = self.path;
                                    var $7589 = Fm$Term$equal$hole$($7588, _a$1);
                                    var $7553 = $7589;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7590 = self.natx;
                                    var $7591 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7553 = $7591;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7592 = self.chrx;
                                    var $7593 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7553 = $7593;
                                    break;
                                case 'Fm.Term.str':
                                    var $7594 = self.strx;
                                    var $7595 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7553 = $7595;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7596 = self.path;
                                    var $7597 = self.expr;
                                    var $7598 = self.name;
                                    var $7599 = self.with;
                                    var $7600 = self.cses;
                                    var $7601 = self.moti;
                                    var $7602 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7553 = $7602;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7603 = self.orig;
                                    var $7604 = self.expr;
                                    var $7605 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7553 = $7605;
                                    break;
                            };
                            var $6876 = $7553;
                            break;
                        case 'Fm.Term.str':
                            var $7606 = self.strx;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7608 = self.name;
                                    var $7609 = self.indx;
                                    var $7610 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7607 = $7610;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7611 = self.name;
                                    var $7612 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7607 = $7612;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7613 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7607 = $7613;
                                    break;
                                case 'Fm.Term.all':
                                    var $7614 = self.eras;
                                    var $7615 = self.self;
                                    var $7616 = self.name;
                                    var $7617 = self.xtyp;
                                    var $7618 = self.body;
                                    var $7619 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7607 = $7619;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7620 = self.name;
                                    var $7621 = self.body;
                                    var $7622 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7607 = $7622;
                                    break;
                                case 'Fm.Term.app':
                                    var $7623 = self.func;
                                    var $7624 = self.argm;
                                    var $7625 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7607 = $7625;
                                    break;
                                case 'Fm.Term.let':
                                    var $7626 = self.name;
                                    var $7627 = self.expr;
                                    var $7628 = self.body;
                                    var $7629 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7607 = $7629;
                                    break;
                                case 'Fm.Term.def':
                                    var $7630 = self.name;
                                    var $7631 = self.expr;
                                    var $7632 = self.body;
                                    var $7633 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7607 = $7633;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7634 = self.done;
                                    var $7635 = self.term;
                                    var $7636 = self.type;
                                    var $7637 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7607 = $7637;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7638 = self.name;
                                    var $7639 = self.dref;
                                    var $7640 = self.verb;
                                    var $7641 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7607 = $7641;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7642 = self.path;
                                    var $7643 = Fm$Term$equal$hole$($7642, _a$1);
                                    var $7607 = $7643;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7644 = self.natx;
                                    var $7645 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7607 = $7645;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7646 = self.chrx;
                                    var $7647 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7607 = $7647;
                                    break;
                                case 'Fm.Term.str':
                                    var $7648 = self.strx;
                                    var $7649 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7607 = $7649;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7650 = self.path;
                                    var $7651 = self.expr;
                                    var $7652 = self.name;
                                    var $7653 = self.with;
                                    var $7654 = self.cses;
                                    var $7655 = self.moti;
                                    var $7656 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7607 = $7656;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7657 = self.orig;
                                    var $7658 = self.expr;
                                    var $7659 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7607 = $7659;
                                    break;
                            };
                            var $6876 = $7607;
                            break;
                        case 'Fm.Term.cse':
                            var $7660 = self.path;
                            var $7661 = self.expr;
                            var $7662 = self.name;
                            var $7663 = self.with;
                            var $7664 = self.cses;
                            var $7665 = self.moti;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7667 = self.name;
                                    var $7668 = self.indx;
                                    var $7669 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7666 = $7669;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7670 = self.name;
                                    var $7671 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7666 = $7671;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7672 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7666 = $7672;
                                    break;
                                case 'Fm.Term.all':
                                    var $7673 = self.eras;
                                    var $7674 = self.self;
                                    var $7675 = self.name;
                                    var $7676 = self.xtyp;
                                    var $7677 = self.body;
                                    var $7678 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7666 = $7678;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7679 = self.name;
                                    var $7680 = self.body;
                                    var $7681 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7666 = $7681;
                                    break;
                                case 'Fm.Term.app':
                                    var $7682 = self.func;
                                    var $7683 = self.argm;
                                    var $7684 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7666 = $7684;
                                    break;
                                case 'Fm.Term.let':
                                    var $7685 = self.name;
                                    var $7686 = self.expr;
                                    var $7687 = self.body;
                                    var $7688 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7666 = $7688;
                                    break;
                                case 'Fm.Term.def':
                                    var $7689 = self.name;
                                    var $7690 = self.expr;
                                    var $7691 = self.body;
                                    var $7692 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7666 = $7692;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7693 = self.done;
                                    var $7694 = self.term;
                                    var $7695 = self.type;
                                    var $7696 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7666 = $7696;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7697 = self.name;
                                    var $7698 = self.dref;
                                    var $7699 = self.verb;
                                    var $7700 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7666 = $7700;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7701 = self.path;
                                    var $7702 = Fm$Term$equal$hole$($7701, _a$1);
                                    var $7666 = $7702;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7703 = self.natx;
                                    var $7704 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7666 = $7704;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7705 = self.chrx;
                                    var $7706 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7666 = $7706;
                                    break;
                                case 'Fm.Term.str':
                                    var $7707 = self.strx;
                                    var $7708 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7666 = $7708;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7709 = self.path;
                                    var $7710 = self.expr;
                                    var $7711 = self.name;
                                    var $7712 = self.with;
                                    var $7713 = self.cses;
                                    var $7714 = self.moti;
                                    var $7715 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7666 = $7715;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7716 = self.orig;
                                    var $7717 = self.expr;
                                    var $7718 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7666 = $7718;
                                    break;
                            };
                            var $6876 = $7666;
                            break;
                        case 'Fm.Term.ori':
                            var $7719 = self.orig;
                            var $7720 = self.expr;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7722 = self.name;
                                    var $7723 = self.indx;
                                    var $7724 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7721 = $7724;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7725 = self.name;
                                    var $7726 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7721 = $7726;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7727 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7721 = $7727;
                                    break;
                                case 'Fm.Term.all':
                                    var $7728 = self.eras;
                                    var $7729 = self.self;
                                    var $7730 = self.name;
                                    var $7731 = self.xtyp;
                                    var $7732 = self.body;
                                    var $7733 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7721 = $7733;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7734 = self.name;
                                    var $7735 = self.body;
                                    var $7736 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7721 = $7736;
                                    break;
                                case 'Fm.Term.app':
                                    var $7737 = self.func;
                                    var $7738 = self.argm;
                                    var $7739 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7721 = $7739;
                                    break;
                                case 'Fm.Term.let':
                                    var $7740 = self.name;
                                    var $7741 = self.expr;
                                    var $7742 = self.body;
                                    var $7743 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7721 = $7743;
                                    break;
                                case 'Fm.Term.def':
                                    var $7744 = self.name;
                                    var $7745 = self.expr;
                                    var $7746 = self.body;
                                    var $7747 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7721 = $7747;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7748 = self.done;
                                    var $7749 = self.term;
                                    var $7750 = self.type;
                                    var $7751 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7721 = $7751;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7752 = self.name;
                                    var $7753 = self.dref;
                                    var $7754 = self.verb;
                                    var $7755 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7721 = $7755;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7756 = self.path;
                                    var $7757 = Fm$Term$equal$hole$($7756, _a$1);
                                    var $7721 = $7757;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7758 = self.natx;
                                    var $7759 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7721 = $7759;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7760 = self.chrx;
                                    var $7761 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7721 = $7761;
                                    break;
                                case 'Fm.Term.str':
                                    var $7762 = self.strx;
                                    var $7763 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7721 = $7763;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7764 = self.path;
                                    var $7765 = self.expr;
                                    var $7766 = self.name;
                                    var $7767 = self.with;
                                    var $7768 = self.cses;
                                    var $7769 = self.moti;
                                    var $7770 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7721 = $7770;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7771 = self.orig;
                                    var $7772 = self.expr;
                                    var $7773 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7721 = $7773;
                                    break;
                            };
                            var $6876 = $7721;
                            break;
                    };
                    var $6865 = $6876;
                };
                var $6863 = $6865;
            };
            var $6861 = $6863;
        };
        return $6861;
    };
    const Fm$Term$equal = x0 => x1 => x2 => x3 => x4 => Fm$Term$equal$(x0, x1, x2, x3, x4);
    const Set$new = Map$new;

    function Fm$Term$check$(_term$1, _type$2, _defs$3, _ctx$4, _path$5, _orig$6) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $7775 = self.name;
                var $7776 = self.indx;
                var self = List$at_last$($7776, _ctx$4);
                switch (self._) {
                    case 'Maybe.none':
                        var $7778 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$undefined_reference$(_orig$6, $7775), List$nil));
                        var $7777 = $7778;
                        break;
                    case 'Maybe.some':
                        var $7779 = self.value;
                        var $7780 = Fm$Check$result$(Maybe$some$((() => {
                            var self = $7779;
                            switch (self._) {
                                case 'Pair.new':
                                    var $7781 = self.fst;
                                    var $7782 = self.snd;
                                    var $7783 = $7782;
                                    return $7783;
                            };
                        })()), List$nil);
                        var $7777 = $7780;
                        break;
                };
                var self = $7777;
                break;
            case 'Fm.Term.ref':
                var $7784 = self.name;
                var self = Fm$get$($7784, _defs$3);
                switch (self._) {
                    case 'Maybe.none':
                        var $7786 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$undefined_reference$(_orig$6, $7784), List$nil));
                        var $7785 = $7786;
                        break;
                    case 'Maybe.some':
                        var $7787 = self.value;
                        var self = $7787;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $7789 = self.file;
                                var $7790 = self.code;
                                var $7791 = self.orig;
                                var $7792 = self.name;
                                var $7793 = self.term;
                                var $7794 = self.type;
                                var $7795 = self.isct;
                                var $7796 = self.arit;
                                var $7797 = self.stat;
                                var _ref_name$18 = $7792;
                                var _ref_type$19 = $7794;
                                var _ref_term$20 = $7793;
                                var _ref_stat$21 = $7797;
                                var self = _ref_stat$21;
                                switch (self._) {
                                    case 'Fm.Status.init':
                                        var $7799 = Fm$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Fm$Error$waiting$(_ref_name$18), List$nil));
                                        var $7798 = $7799;
                                        break;
                                    case 'Fm.Status.wait':
                                        var $7800 = Fm$Check$result$(Maybe$some$(_ref_type$19), List$nil);
                                        var $7798 = $7800;
                                        break;
                                    case 'Fm.Status.done':
                                        var $7801 = Fm$Check$result$(Maybe$some$(_ref_type$19), List$nil);
                                        var $7798 = $7801;
                                        break;
                                    case 'Fm.Status.fail':
                                        var $7802 = self.errors;
                                        var $7803 = Fm$Check$result$(Maybe$some$(_ref_type$19), List$cons$(Fm$Error$indirect$(_ref_name$18), List$nil));
                                        var $7798 = $7803;
                                        break;
                                };
                                var $7788 = $7798;
                                break;
                        };
                        var $7785 = $7788;
                        break;
                };
                var self = $7785;
                break;
            case 'Fm.Term.typ':
                var $7804 = Fm$Check$result$(Maybe$some$(Fm$Term$typ), List$nil);
                var self = $7804;
                break;
            case 'Fm.Term.all':
                var $7805 = self.eras;
                var $7806 = self.self;
                var $7807 = self.name;
                var $7808 = self.xtyp;
                var $7809 = self.body;
                var _ctx_size$12 = (list_length(_ctx$4));
                var _self_var$13 = Fm$Term$var$($7806, _ctx_size$12);
                var _body_var$14 = Fm$Term$var$($7807, Nat$succ$(_ctx_size$12));
                var _body_ctx$15 = List$cons$(Pair$new$($7807, $7808), List$cons$(Pair$new$($7806, _term$1), _ctx$4));
                var self = Fm$Term$check$($7808, Maybe$some$(Fm$Term$typ), _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7811 = self.value;
                        var $7812 = self.errors;
                        var self = $7811;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7814 = Fm$Check$result$(Maybe$none, $7812);
                                var $7813 = $7814;
                                break;
                            case 'Maybe.some':
                                var $7815 = self.value;
                                var self = Fm$Term$check$($7809(_self_var$13)(_body_var$14), Maybe$some$(Fm$Term$typ), _defs$3, _body_ctx$15, Fm$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7817 = self.value;
                                        var $7818 = self.errors;
                                        var self = $7817;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7820 = Fm$Check$result$(Maybe$none, $7818);
                                                var $7819 = $7820;
                                                break;
                                            case 'Maybe.some':
                                                var $7821 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$(Fm$Term$typ), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7823 = self.value;
                                                        var $7824 = self.errors;
                                                        var $7825 = Fm$Check$result$($7823, List$concat$($7818, $7824));
                                                        var $7822 = $7825;
                                                        break;
                                                };
                                                var $7819 = $7822;
                                                break;
                                        };
                                        var self = $7819;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7826 = self.value;
                                        var $7827 = self.errors;
                                        var $7828 = Fm$Check$result$($7826, List$concat$($7812, $7827));
                                        var $7816 = $7828;
                                        break;
                                };
                                var $7813 = $7816;
                                break;
                        };
                        var $7810 = $7813;
                        break;
                };
                var self = $7810;
                break;
            case 'Fm.Term.lam':
                var $7829 = self.name;
                var $7830 = self.body;
                var self = _type$2;
                switch (self._) {
                    case 'Maybe.none':
                        var _lam_type$9 = Fm$Term$hol$(Bits$e);
                        var _lam_term$10 = Fm$Term$ann$(Bool$false, _term$1, _lam_type$9);
                        var $7832 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$patch$(Fm$MPath$to_bits$(_path$5), _lam_term$10), List$nil));
                        var $7831 = $7832;
                        break;
                    case 'Maybe.some':
                        var $7833 = self.value;
                        var _typv$10 = Fm$Term$reduce$($7833, _defs$3);
                        var self = _typv$10;
                        switch (self._) {
                            case 'Fm.Term.var':
                                var $7835 = self.name;
                                var $7836 = self.indx;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7833);
                                var $7837 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7834 = $7837;
                                break;
                            case 'Fm.Term.ref':
                                var $7838 = self.name;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7833);
                                var $7839 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7834 = $7839;
                                break;
                            case 'Fm.Term.typ':
                                var _expected$11 = Either$left$("(function type)");
                                var _detected$12 = Either$right$($7833);
                                var $7840 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$11, _detected$12, _ctx$4), List$nil));
                                var $7834 = $7840;
                                break;
                            case 'Fm.Term.all':
                                var $7841 = self.eras;
                                var $7842 = self.self;
                                var $7843 = self.name;
                                var $7844 = self.xtyp;
                                var $7845 = self.body;
                                var _ctx_size$16 = (list_length(_ctx$4));
                                var _self_var$17 = _term$1;
                                var _body_var$18 = Fm$Term$var$($7829, _ctx_size$16);
                                var _body_typ$19 = $7845(_self_var$17)(_body_var$18);
                                var _body_ctx$20 = List$cons$(Pair$new$($7829, $7844), _ctx$4);
                                var self = Fm$Term$check$($7830(_body_var$18), Maybe$some$(_body_typ$19), _defs$3, _body_ctx$20, Fm$MPath$o$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7847 = self.value;
                                        var $7848 = self.errors;
                                        var self = $7847;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7850 = Fm$Check$result$(Maybe$none, $7848);
                                                var $7849 = $7850;
                                                break;
                                            case 'Maybe.some':
                                                var $7851 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$($7833), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7853 = self.value;
                                                        var $7854 = self.errors;
                                                        var $7855 = Fm$Check$result$($7853, List$concat$($7848, $7854));
                                                        var $7852 = $7855;
                                                        break;
                                                };
                                                var $7849 = $7852;
                                                break;
                                        };
                                        var $7846 = $7849;
                                        break;
                                };
                                var $7834 = $7846;
                                break;
                            case 'Fm.Term.lam':
                                var $7856 = self.name;
                                var $7857 = self.body;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7833);
                                var $7858 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7834 = $7858;
                                break;
                            case 'Fm.Term.app':
                                var $7859 = self.func;
                                var $7860 = self.argm;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7833);
                                var $7861 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7834 = $7861;
                                break;
                            case 'Fm.Term.let':
                                var $7862 = self.name;
                                var $7863 = self.expr;
                                var $7864 = self.body;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7833);
                                var $7865 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7834 = $7865;
                                break;
                            case 'Fm.Term.def':
                                var $7866 = self.name;
                                var $7867 = self.expr;
                                var $7868 = self.body;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7833);
                                var $7869 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7834 = $7869;
                                break;
                            case 'Fm.Term.ann':
                                var $7870 = self.done;
                                var $7871 = self.term;
                                var $7872 = self.type;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7833);
                                var $7873 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7834 = $7873;
                                break;
                            case 'Fm.Term.gol':
                                var $7874 = self.name;
                                var $7875 = self.dref;
                                var $7876 = self.verb;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7833);
                                var $7877 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7834 = $7877;
                                break;
                            case 'Fm.Term.hol':
                                var $7878 = self.path;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7833);
                                var $7879 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7834 = $7879;
                                break;
                            case 'Fm.Term.nat':
                                var $7880 = self.natx;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7833);
                                var $7881 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7834 = $7881;
                                break;
                            case 'Fm.Term.chr':
                                var $7882 = self.chrx;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7833);
                                var $7883 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7834 = $7883;
                                break;
                            case 'Fm.Term.str':
                                var $7884 = self.strx;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7833);
                                var $7885 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7834 = $7885;
                                break;
                            case 'Fm.Term.cse':
                                var $7886 = self.path;
                                var $7887 = self.expr;
                                var $7888 = self.name;
                                var $7889 = self.with;
                                var $7890 = self.cses;
                                var $7891 = self.moti;
                                var _expected$17 = Either$left$("(function type)");
                                var _detected$18 = Either$right$($7833);
                                var $7892 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$17, _detected$18, _ctx$4), List$nil));
                                var $7834 = $7892;
                                break;
                            case 'Fm.Term.ori':
                                var $7893 = self.orig;
                                var $7894 = self.expr;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7833);
                                var $7895 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7834 = $7895;
                                break;
                        };
                        var $7831 = $7834;
                        break;
                };
                var self = $7831;
                break;
            case 'Fm.Term.app':
                var $7896 = self.func;
                var $7897 = self.argm;
                var self = Fm$Term$check$($7896, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7899 = self.value;
                        var $7900 = self.errors;
                        var self = $7899;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7902 = Fm$Check$result$(Maybe$none, $7900);
                                var $7901 = $7902;
                                break;
                            case 'Maybe.some':
                                var $7903 = self.value;
                                var _func_typ$12 = Fm$Term$reduce$($7903, _defs$3);
                                var self = _func_typ$12;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $7905 = self.name;
                                        var $7906 = self.indx;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7907 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7907;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $7908 = self.name;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7909 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7909;
                                        break;
                                    case 'Fm.Term.typ':
                                        var _expected$13 = Either$left$("(function type)");
                                        var _detected$14 = Either$right$(_func_typ$12);
                                        var $7910 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                        var self = $7910;
                                        break;
                                    case 'Fm.Term.all':
                                        var $7911 = self.eras;
                                        var $7912 = self.self;
                                        var $7913 = self.name;
                                        var $7914 = self.xtyp;
                                        var $7915 = self.body;
                                        var self = Fm$Term$check$($7897, Maybe$some$($7914), _defs$3, _ctx$4, Fm$MPath$i$(_path$5), _orig$6);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $7917 = self.value;
                                                var $7918 = self.errors;
                                                var self = $7917;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $7920 = Fm$Check$result$(Maybe$none, $7918);
                                                        var $7919 = $7920;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $7921 = self.value;
                                                        var self = Fm$Check$result$(Maybe$some$($7915($7896)($7897)), List$nil);
                                                        switch (self._) {
                                                            case 'Fm.Check.result':
                                                                var $7923 = self.value;
                                                                var $7924 = self.errors;
                                                                var $7925 = Fm$Check$result$($7923, List$concat$($7918, $7924));
                                                                var $7922 = $7925;
                                                                break;
                                                        };
                                                        var $7919 = $7922;
                                                        break;
                                                };
                                                var $7916 = $7919;
                                                break;
                                        };
                                        var self = $7916;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $7926 = self.name;
                                        var $7927 = self.body;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7928 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7928;
                                        break;
                                    case 'Fm.Term.app':
                                        var $7929 = self.func;
                                        var $7930 = self.argm;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7931 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7931;
                                        break;
                                    case 'Fm.Term.let':
                                        var $7932 = self.name;
                                        var $7933 = self.expr;
                                        var $7934 = self.body;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7935 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7935;
                                        break;
                                    case 'Fm.Term.def':
                                        var $7936 = self.name;
                                        var $7937 = self.expr;
                                        var $7938 = self.body;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7939 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7939;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $7940 = self.done;
                                        var $7941 = self.term;
                                        var $7942 = self.type;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7943 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7943;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $7944 = self.name;
                                        var $7945 = self.dref;
                                        var $7946 = self.verb;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7947 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7947;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $7948 = self.path;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7949 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7949;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $7950 = self.natx;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7951 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7951;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $7952 = self.chrx;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7953 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7953;
                                        break;
                                    case 'Fm.Term.str':
                                        var $7954 = self.strx;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7955 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7955;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $7956 = self.path;
                                        var $7957 = self.expr;
                                        var $7958 = self.name;
                                        var $7959 = self.with;
                                        var $7960 = self.cses;
                                        var $7961 = self.moti;
                                        var _expected$19 = Either$left$("(function type)");
                                        var _detected$20 = Either$right$(_func_typ$12);
                                        var $7962 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$19, _detected$20, _ctx$4), List$nil));
                                        var self = $7962;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $7963 = self.orig;
                                        var $7964 = self.expr;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7965 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7965;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7966 = self.value;
                                        var $7967 = self.errors;
                                        var $7968 = Fm$Check$result$($7966, List$concat$($7900, $7967));
                                        var $7904 = $7968;
                                        break;
                                };
                                var $7901 = $7904;
                                break;
                        };
                        var $7898 = $7901;
                        break;
                };
                var self = $7898;
                break;
            case 'Fm.Term.let':
                var $7969 = self.name;
                var $7970 = self.expr;
                var $7971 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Fm$Term$check$($7970, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7973 = self.value;
                        var $7974 = self.errors;
                        var self = $7973;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7976 = Fm$Check$result$(Maybe$none, $7974);
                                var $7975 = $7976;
                                break;
                            case 'Maybe.some':
                                var $7977 = self.value;
                                var _body_val$14 = $7971(Fm$Term$var$($7969, _ctx_size$10));
                                var _body_ctx$15 = List$cons$(Pair$new$($7969, $7977), _ctx$4);
                                var self = Fm$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Fm$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7979 = self.value;
                                        var $7980 = self.errors;
                                        var self = $7979;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7982 = Fm$Check$result$(Maybe$none, $7980);
                                                var $7981 = $7982;
                                                break;
                                            case 'Maybe.some':
                                                var $7983 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$($7983), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7985 = self.value;
                                                        var $7986 = self.errors;
                                                        var $7987 = Fm$Check$result$($7985, List$concat$($7980, $7986));
                                                        var $7984 = $7987;
                                                        break;
                                                };
                                                var $7981 = $7984;
                                                break;
                                        };
                                        var self = $7981;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7988 = self.value;
                                        var $7989 = self.errors;
                                        var $7990 = Fm$Check$result$($7988, List$concat$($7974, $7989));
                                        var $7978 = $7990;
                                        break;
                                };
                                var $7975 = $7978;
                                break;
                        };
                        var $7972 = $7975;
                        break;
                };
                var self = $7972;
                break;
            case 'Fm.Term.def':
                var $7991 = self.name;
                var $7992 = self.expr;
                var $7993 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Fm$Term$check$($7992, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7995 = self.value;
                        var $7996 = self.errors;
                        var self = $7995;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7998 = Fm$Check$result$(Maybe$none, $7996);
                                var $7997 = $7998;
                                break;
                            case 'Maybe.some':
                                var $7999 = self.value;
                                var _body_val$14 = $7993(Fm$Term$ann$(Bool$true, $7992, $7999));
                                var _body_ctx$15 = List$cons$(Pair$new$($7991, $7999), _ctx$4);
                                var self = Fm$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Fm$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $8001 = self.value;
                                        var $8002 = self.errors;
                                        var self = $8001;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $8004 = Fm$Check$result$(Maybe$none, $8002);
                                                var $8003 = $8004;
                                                break;
                                            case 'Maybe.some':
                                                var $8005 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$($8005), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $8007 = self.value;
                                                        var $8008 = self.errors;
                                                        var $8009 = Fm$Check$result$($8007, List$concat$($8002, $8008));
                                                        var $8006 = $8009;
                                                        break;
                                                };
                                                var $8003 = $8006;
                                                break;
                                        };
                                        var self = $8003;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $8010 = self.value;
                                        var $8011 = self.errors;
                                        var $8012 = Fm$Check$result$($8010, List$concat$($7996, $8011));
                                        var $8000 = $8012;
                                        break;
                                };
                                var $7997 = $8000;
                                break;
                        };
                        var $7994 = $7997;
                        break;
                };
                var self = $7994;
                break;
            case 'Fm.Term.ann':
                var $8013 = self.done;
                var $8014 = self.term;
                var $8015 = self.type;
                var self = $8013;
                if (self) {
                    var $8017 = Fm$Check$result$(Maybe$some$($8015), List$nil);
                    var $8016 = $8017;
                } else {
                    var self = Fm$Term$check$($8014, Maybe$some$($8015), _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                    switch (self._) {
                        case 'Fm.Check.result':
                            var $8019 = self.value;
                            var $8020 = self.errors;
                            var self = $8019;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $8022 = Fm$Check$result$(Maybe$none, $8020);
                                    var $8021 = $8022;
                                    break;
                                case 'Maybe.some':
                                    var $8023 = self.value;
                                    var self = Fm$Term$check$($8015, Maybe$some$(Fm$Term$typ), _defs$3, _ctx$4, Fm$MPath$i$(_path$5), _orig$6);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $8025 = self.value;
                                            var $8026 = self.errors;
                                            var self = $8025;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $8028 = Fm$Check$result$(Maybe$none, $8026);
                                                    var $8027 = $8028;
                                                    break;
                                                case 'Maybe.some':
                                                    var $8029 = self.value;
                                                    var self = Fm$Check$result$(Maybe$some$($8015), List$nil);
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $8031 = self.value;
                                                            var $8032 = self.errors;
                                                            var $8033 = Fm$Check$result$($8031, List$concat$($8026, $8032));
                                                            var $8030 = $8033;
                                                            break;
                                                    };
                                                    var $8027 = $8030;
                                                    break;
                                            };
                                            var self = $8027;
                                            break;
                                    };
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $8034 = self.value;
                                            var $8035 = self.errors;
                                            var $8036 = Fm$Check$result$($8034, List$concat$($8020, $8035));
                                            var $8024 = $8036;
                                            break;
                                    };
                                    var $8021 = $8024;
                                    break;
                            };
                            var $8018 = $8021;
                            break;
                    };
                    var $8016 = $8018;
                };
                var self = $8016;
                break;
            case 'Fm.Term.gol':
                var $8037 = self.name;
                var $8038 = self.dref;
                var $8039 = self.verb;
                var $8040 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$show_goal$($8037, $8038, $8039, _type$2, _ctx$4), List$nil));
                var self = $8040;
                break;
            case 'Fm.Term.hol':
                var $8041 = self.path;
                var $8042 = Fm$Check$result$(_type$2, List$nil);
                var self = $8042;
                break;
            case 'Fm.Term.nat':
                var $8043 = self.natx;
                var $8044 = Fm$Check$result$(Maybe$some$(Fm$Term$ref$("Nat")), List$nil);
                var self = $8044;
                break;
            case 'Fm.Term.chr':
                var $8045 = self.chrx;
                var $8046 = Fm$Check$result$(Maybe$some$(Fm$Term$ref$("Char")), List$nil);
                var self = $8046;
                break;
            case 'Fm.Term.str':
                var $8047 = self.strx;
                var $8048 = Fm$Check$result$(Maybe$some$(Fm$Term$ref$("String")), List$nil);
                var self = $8048;
                break;
            case 'Fm.Term.cse':
                var $8049 = self.path;
                var $8050 = self.expr;
                var $8051 = self.name;
                var $8052 = self.with;
                var $8053 = self.cses;
                var $8054 = self.moti;
                var _expr$13 = $8050;
                var self = Fm$Term$check$(_expr$13, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $8056 = self.value;
                        var $8057 = self.errors;
                        var self = $8056;
                        switch (self._) {
                            case 'Maybe.none':
                                var $8059 = Fm$Check$result$(Maybe$none, $8057);
                                var $8058 = $8059;
                                break;
                            case 'Maybe.some':
                                var $8060 = self.value;
                                var self = $8054;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var self = _type$2;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $8063 = Fm$Term$hol$(Bits$e);
                                                var _moti$17 = $8063;
                                                break;
                                            case 'Maybe.some':
                                                var $8064 = self.value;
                                                var _size$18 = (list_length(_ctx$4));
                                                var _typv$19 = Fm$Term$normalize$($8064, Map$new);
                                                var _moti$20 = Fm$SmartMotive$make$($8051, $8050, $8060, _typv$19, _size$18, _defs$3);
                                                var $8065 = _moti$20;
                                                var _moti$17 = $8065;
                                                break;
                                        };
                                        var $8062 = Maybe$some$(Fm$Term$cse$($8049, $8050, $8051, $8052, $8053, Maybe$some$(_moti$17)));
                                        var _dsug$17 = $8062;
                                        break;
                                    case 'Maybe.some':
                                        var $8066 = self.value;
                                        var $8067 = Fm$Term$desugar_cse$($8050, $8051, $8052, $8053, $8066, $8060, _defs$3, _ctx$4);
                                        var _dsug$17 = $8067;
                                        break;
                                };
                                var self = _dsug$17;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $8068 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$cant_infer$(_orig$6, _term$1, _ctx$4), List$nil));
                                        var self = $8068;
                                        break;
                                    case 'Maybe.some':
                                        var $8069 = self.value;
                                        var $8070 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$patch$(Fm$MPath$to_bits$(_path$5), $8069), List$nil));
                                        var self = $8070;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $8071 = self.value;
                                        var $8072 = self.errors;
                                        var $8073 = Fm$Check$result$($8071, List$concat$($8057, $8072));
                                        var $8061 = $8073;
                                        break;
                                };
                                var $8058 = $8061;
                                break;
                        };
                        var $8055 = $8058;
                        break;
                };
                var self = $8055;
                break;
            case 'Fm.Term.ori':
                var $8074 = self.orig;
                var $8075 = self.expr;
                var $8076 = Fm$Term$check$($8075, _type$2, _defs$3, _ctx$4, _path$5, Maybe$some$($8074));
                var self = $8076;
                break;
        };
        switch (self._) {
            case 'Fm.Check.result':
                var $8077 = self.value;
                var $8078 = self.errors;
                var self = $8077;
                switch (self._) {
                    case 'Maybe.none':
                        var $8080 = Fm$Check$result$(Maybe$none, $8078);
                        var $8079 = $8080;
                        break;
                    case 'Maybe.some':
                        var $8081 = self.value;
                        var self = _type$2;
                        switch (self._) {
                            case 'Maybe.none':
                                var $8083 = Fm$Check$result$(Maybe$some$($8081), List$nil);
                                var self = $8083;
                                break;
                            case 'Maybe.some':
                                var $8084 = self.value;
                                var self = Fm$Term$equal$($8084, $8081, _defs$3, (list_length(_ctx$4)), Set$new);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $8086 = self.value;
                                        var $8087 = self.errors;
                                        var self = $8086;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $8089 = Fm$Check$result$(Maybe$none, $8087);
                                                var $8088 = $8089;
                                                break;
                                            case 'Maybe.some':
                                                var $8090 = self.value;
                                                var self = $8090;
                                                if (self) {
                                                    var $8092 = Fm$Check$result$(Maybe$some$($8084), List$nil);
                                                    var self = $8092;
                                                } else {
                                                    var $8093 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, Either$right$($8084), Either$right$($8081), _ctx$4), List$nil));
                                                    var self = $8093;
                                                };
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $8094 = self.value;
                                                        var $8095 = self.errors;
                                                        var $8096 = Fm$Check$result$($8094, List$concat$($8087, $8095));
                                                        var $8091 = $8096;
                                                        break;
                                                };
                                                var $8088 = $8091;
                                                break;
                                        };
                                        var $8085 = $8088;
                                        break;
                                };
                                var self = $8085;
                                break;
                        };
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $8097 = self.value;
                                var $8098 = self.errors;
                                var $8099 = Fm$Check$result$($8097, List$concat$($8078, $8098));
                                var $8082 = $8099;
                                break;
                        };
                        var $8079 = $8082;
                        break;
                };
                var $7774 = $8079;
                break;
        };
        return $7774;
    };
    const Fm$Term$check = x0 => x1 => x2 => x3 => x4 => x5 => Fm$Term$check$(x0, x1, x2, x3, x4, x5);

    function Fm$Path$nil$(_x$1) {
        var $8100 = _x$1;
        return $8100;
    };
    const Fm$Path$nil = x0 => Fm$Path$nil$(x0);
    const Fm$MPath$nil = Maybe$some$(Fm$Path$nil);

    function List$is_empty$(_list$2) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $8102 = Bool$true;
                var $8101 = $8102;
                break;
            case 'List.cons':
                var $8103 = self.head;
                var $8104 = self.tail;
                var $8105 = Bool$false;
                var $8101 = $8105;
                break;
        };
        return $8101;
    };
    const List$is_empty = x0 => List$is_empty$(x0);

    function Fm$Term$patch_at$(_path$1, _term$2, _fn$3) {
        var self = _term$2;
        switch (self._) {
            case 'Fm.Term.var':
                var $8107 = self.name;
                var $8108 = self.indx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8110 = _fn$3(_term$2);
                        var $8109 = $8110;
                        break;
                    case 'o':
                        var $8111 = self.slice(0, -1);
                        var $8112 = _term$2;
                        var $8109 = $8112;
                        break;
                    case 'i':
                        var $8113 = self.slice(0, -1);
                        var $8114 = _term$2;
                        var $8109 = $8114;
                        break;
                };
                var $8106 = $8109;
                break;
            case 'Fm.Term.ref':
                var $8115 = self.name;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8117 = _fn$3(_term$2);
                        var $8116 = $8117;
                        break;
                    case 'o':
                        var $8118 = self.slice(0, -1);
                        var $8119 = _term$2;
                        var $8116 = $8119;
                        break;
                    case 'i':
                        var $8120 = self.slice(0, -1);
                        var $8121 = _term$2;
                        var $8116 = $8121;
                        break;
                };
                var $8106 = $8116;
                break;
            case 'Fm.Term.typ':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8123 = _fn$3(_term$2);
                        var $8122 = $8123;
                        break;
                    case 'o':
                        var $8124 = self.slice(0, -1);
                        var $8125 = _term$2;
                        var $8122 = $8125;
                        break;
                    case 'i':
                        var $8126 = self.slice(0, -1);
                        var $8127 = _term$2;
                        var $8122 = $8127;
                        break;
                };
                var $8106 = $8122;
                break;
            case 'Fm.Term.all':
                var $8128 = self.eras;
                var $8129 = self.self;
                var $8130 = self.name;
                var $8131 = self.xtyp;
                var $8132 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8134 = _fn$3(_term$2);
                        var $8133 = $8134;
                        break;
                    case 'o':
                        var $8135 = self.slice(0, -1);
                        var $8136 = Fm$Term$all$($8128, $8129, $8130, Fm$Term$patch_at$($8135, $8131, _fn$3), $8132);
                        var $8133 = $8136;
                        break;
                    case 'i':
                        var $8137 = self.slice(0, -1);
                        var $8138 = Fm$Term$all$($8128, $8129, $8130, $8131, (_s$10 => _x$11 => {
                            var $8139 = Fm$Term$patch_at$($8137, $8132(_s$10)(_x$11), _fn$3);
                            return $8139;
                        }));
                        var $8133 = $8138;
                        break;
                };
                var $8106 = $8133;
                break;
            case 'Fm.Term.lam':
                var $8140 = self.name;
                var $8141 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8143 = _fn$3(_term$2);
                        var $8142 = $8143;
                        break;
                    case 'o':
                        var $8144 = self.slice(0, -1);
                        var $8145 = Fm$Term$lam$($8140, (_x$7 => {
                            var $8146 = Fm$Term$patch_at$(Bits$tail$(_path$1), $8141(_x$7), _fn$3);
                            return $8146;
                        }));
                        var $8142 = $8145;
                        break;
                    case 'i':
                        var $8147 = self.slice(0, -1);
                        var $8148 = Fm$Term$lam$($8140, (_x$7 => {
                            var $8149 = Fm$Term$patch_at$(Bits$tail$(_path$1), $8141(_x$7), _fn$3);
                            return $8149;
                        }));
                        var $8142 = $8148;
                        break;
                };
                var $8106 = $8142;
                break;
            case 'Fm.Term.app':
                var $8150 = self.func;
                var $8151 = self.argm;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8153 = _fn$3(_term$2);
                        var $8152 = $8153;
                        break;
                    case 'o':
                        var $8154 = self.slice(0, -1);
                        var $8155 = Fm$Term$app$(Fm$Term$patch_at$($8154, $8150, _fn$3), $8151);
                        var $8152 = $8155;
                        break;
                    case 'i':
                        var $8156 = self.slice(0, -1);
                        var $8157 = Fm$Term$app$($8150, Fm$Term$patch_at$($8156, $8151, _fn$3));
                        var $8152 = $8157;
                        break;
                };
                var $8106 = $8152;
                break;
            case 'Fm.Term.let':
                var $8158 = self.name;
                var $8159 = self.expr;
                var $8160 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8162 = _fn$3(_term$2);
                        var $8161 = $8162;
                        break;
                    case 'o':
                        var $8163 = self.slice(0, -1);
                        var $8164 = Fm$Term$let$($8158, Fm$Term$patch_at$($8163, $8159, _fn$3), $8160);
                        var $8161 = $8164;
                        break;
                    case 'i':
                        var $8165 = self.slice(0, -1);
                        var $8166 = Fm$Term$let$($8158, $8159, (_x$8 => {
                            var $8167 = Fm$Term$patch_at$($8165, $8160(_x$8), _fn$3);
                            return $8167;
                        }));
                        var $8161 = $8166;
                        break;
                };
                var $8106 = $8161;
                break;
            case 'Fm.Term.def':
                var $8168 = self.name;
                var $8169 = self.expr;
                var $8170 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8172 = _fn$3(_term$2);
                        var $8171 = $8172;
                        break;
                    case 'o':
                        var $8173 = self.slice(0, -1);
                        var $8174 = Fm$Term$def$($8168, Fm$Term$patch_at$($8173, $8169, _fn$3), $8170);
                        var $8171 = $8174;
                        break;
                    case 'i':
                        var $8175 = self.slice(0, -1);
                        var $8176 = Fm$Term$def$($8168, $8169, (_x$8 => {
                            var $8177 = Fm$Term$patch_at$($8175, $8170(_x$8), _fn$3);
                            return $8177;
                        }));
                        var $8171 = $8176;
                        break;
                };
                var $8106 = $8171;
                break;
            case 'Fm.Term.ann':
                var $8178 = self.done;
                var $8179 = self.term;
                var $8180 = self.type;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8182 = _fn$3(_term$2);
                        var $8181 = $8182;
                        break;
                    case 'o':
                        var $8183 = self.slice(0, -1);
                        var $8184 = Fm$Term$ann$($8178, Fm$Term$patch_at$($8183, $8179, _fn$3), $8180);
                        var $8181 = $8184;
                        break;
                    case 'i':
                        var $8185 = self.slice(0, -1);
                        var $8186 = Fm$Term$ann$($8178, $8179, Fm$Term$patch_at$($8185, $8180, _fn$3));
                        var $8181 = $8186;
                        break;
                };
                var $8106 = $8181;
                break;
            case 'Fm.Term.gol':
                var $8187 = self.name;
                var $8188 = self.dref;
                var $8189 = self.verb;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8191 = _fn$3(_term$2);
                        var $8190 = $8191;
                        break;
                    case 'o':
                        var $8192 = self.slice(0, -1);
                        var $8193 = _term$2;
                        var $8190 = $8193;
                        break;
                    case 'i':
                        var $8194 = self.slice(0, -1);
                        var $8195 = _term$2;
                        var $8190 = $8195;
                        break;
                };
                var $8106 = $8190;
                break;
            case 'Fm.Term.hol':
                var $8196 = self.path;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8198 = _fn$3(_term$2);
                        var $8197 = $8198;
                        break;
                    case 'o':
                        var $8199 = self.slice(0, -1);
                        var $8200 = _term$2;
                        var $8197 = $8200;
                        break;
                    case 'i':
                        var $8201 = self.slice(0, -1);
                        var $8202 = _term$2;
                        var $8197 = $8202;
                        break;
                };
                var $8106 = $8197;
                break;
            case 'Fm.Term.nat':
                var $8203 = self.natx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8205 = _fn$3(_term$2);
                        var $8204 = $8205;
                        break;
                    case 'o':
                        var $8206 = self.slice(0, -1);
                        var $8207 = _term$2;
                        var $8204 = $8207;
                        break;
                    case 'i':
                        var $8208 = self.slice(0, -1);
                        var $8209 = _term$2;
                        var $8204 = $8209;
                        break;
                };
                var $8106 = $8204;
                break;
            case 'Fm.Term.chr':
                var $8210 = self.chrx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8212 = _fn$3(_term$2);
                        var $8211 = $8212;
                        break;
                    case 'o':
                        var $8213 = self.slice(0, -1);
                        var $8214 = _term$2;
                        var $8211 = $8214;
                        break;
                    case 'i':
                        var $8215 = self.slice(0, -1);
                        var $8216 = _term$2;
                        var $8211 = $8216;
                        break;
                };
                var $8106 = $8211;
                break;
            case 'Fm.Term.str':
                var $8217 = self.strx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8219 = _fn$3(_term$2);
                        var $8218 = $8219;
                        break;
                    case 'o':
                        var $8220 = self.slice(0, -1);
                        var $8221 = _term$2;
                        var $8218 = $8221;
                        break;
                    case 'i':
                        var $8222 = self.slice(0, -1);
                        var $8223 = _term$2;
                        var $8218 = $8223;
                        break;
                };
                var $8106 = $8218;
                break;
            case 'Fm.Term.cse':
                var $8224 = self.path;
                var $8225 = self.expr;
                var $8226 = self.name;
                var $8227 = self.with;
                var $8228 = self.cses;
                var $8229 = self.moti;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8231 = _fn$3(_term$2);
                        var $8230 = $8231;
                        break;
                    case 'o':
                        var $8232 = self.slice(0, -1);
                        var $8233 = _term$2;
                        var $8230 = $8233;
                        break;
                    case 'i':
                        var $8234 = self.slice(0, -1);
                        var $8235 = _term$2;
                        var $8230 = $8235;
                        break;
                };
                var $8106 = $8230;
                break;
            case 'Fm.Term.ori':
                var $8236 = self.orig;
                var $8237 = self.expr;
                var $8238 = Fm$Term$ori$($8236, Fm$Term$patch_at$(_path$1, $8237, _fn$3));
                var $8106 = $8238;
                break;
        };
        return $8106;
    };
    const Fm$Term$patch_at = x0 => x1 => x2 => Fm$Term$patch_at$(x0, x1, x2);

    function Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, _errs$10, _fixd$11) {
        var self = _errs$10;
        switch (self._) {
            case 'List.nil':
                var self = _fixd$11;
                if (self) {
                    var _type$12 = Fm$Term$bind$(List$nil, (_x$12 => {
                        var $8242 = (_x$12 + '1');
                        return $8242;
                    }), _type$6);
                    var _term$13 = Fm$Term$bind$(List$nil, (_x$13 => {
                        var $8243 = (_x$13 + '0');
                        return $8243;
                    }), _term$5);
                    var _defs$14 = Fm$set$(_name$4, Fm$Def$new$(_file$1, _code$2, _orig$3, _name$4, _term$13, _type$12, _isct$7, _arit$8, Fm$Status$init), _defs$9);
                    var $8241 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                        var $8244 = _m$pure$16;
                        return $8244;
                    }))(Maybe$some$(_defs$14));
                    var $8240 = $8241;
                } else {
                    var $8245 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                        var $8246 = _m$pure$13;
                        return $8246;
                    }))(Maybe$none);
                    var $8240 = $8245;
                };
                var $8239 = $8240;
                break;
            case 'List.cons':
                var $8247 = self.head;
                var $8248 = self.tail;
                var self = $8247;
                switch (self._) {
                    case 'Fm.Error.type_mismatch':
                        var $8250 = self.origin;
                        var $8251 = self.expected;
                        var $8252 = self.detected;
                        var $8253 = self.context;
                        var $8254 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $8248, _fixd$11);
                        var $8249 = $8254;
                        break;
                    case 'Fm.Error.show_goal':
                        var $8255 = self.name;
                        var $8256 = self.dref;
                        var $8257 = self.verb;
                        var $8258 = self.goal;
                        var $8259 = self.context;
                        var $8260 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $8248, _fixd$11);
                        var $8249 = $8260;
                        break;
                    case 'Fm.Error.waiting':
                        var $8261 = self.name;
                        var $8262 = IO$monad$((_m$bind$15 => _m$pure$16 => {
                            var $8263 = _m$bind$15;
                            return $8263;
                        }))(Fm$Synth$one$($8261, _defs$9))((_new_defs$15 => {
                            var self = _new_defs$15;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $8265 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $8248, _fixd$11);
                                    var $8264 = $8265;
                                    break;
                                case 'Maybe.some':
                                    var $8266 = self.value;
                                    var $8267 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $8266, $8248, Bool$true);
                                    var $8264 = $8267;
                                    break;
                            };
                            return $8264;
                        }));
                        var $8249 = $8262;
                        break;
                    case 'Fm.Error.indirect':
                        var $8268 = self.name;
                        var $8269 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $8248, _fixd$11);
                        var $8249 = $8269;
                        break;
                    case 'Fm.Error.patch':
                        var $8270 = self.path;
                        var $8271 = self.term;
                        var self = $8270;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'e':
                                var $8273 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                    var $8274 = _m$pure$17;
                                    return $8274;
                                }))(Maybe$none);
                                var $8272 = $8273;
                                break;
                            case 'o':
                                var $8275 = self.slice(0, -1);
                                var _term$17 = Fm$Term$patch_at$($8275, _term$5, (_x$17 => {
                                    var $8277 = $8271;
                                    return $8277;
                                }));
                                var $8276 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$17, _type$6, _isct$7, _arit$8, _defs$9, $8248, Bool$true);
                                var $8272 = $8276;
                                break;
                            case 'i':
                                var $8278 = self.slice(0, -1);
                                var _type$17 = Fm$Term$patch_at$($8278, _type$6, (_x$17 => {
                                    var $8280 = $8271;
                                    return $8280;
                                }));
                                var $8279 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$17, _isct$7, _arit$8, _defs$9, $8248, Bool$true);
                                var $8272 = $8279;
                                break;
                        };
                        var $8249 = $8272;
                        break;
                    case 'Fm.Error.undefined_reference':
                        var $8281 = self.origin;
                        var $8282 = self.name;
                        var $8283 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                            var $8284 = _m$bind$16;
                            return $8284;
                        }))(Fm$Synth$one$($8282, _defs$9))((_new_defs$16 => {
                            var self = _new_defs$16;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $8286 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $8248, _fixd$11);
                                    var $8285 = $8286;
                                    break;
                                case 'Maybe.some':
                                    var $8287 = self.value;
                                    var $8288 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, $8287, $8248, Bool$true);
                                    var $8285 = $8288;
                                    break;
                            };
                            return $8285;
                        }));
                        var $8249 = $8283;
                        break;
                    case 'Fm.Error.cant_infer':
                        var $8289 = self.origin;
                        var $8290 = self.term;
                        var $8291 = self.context;
                        var $8292 = Fm$Synth$fix$(_file$1, _code$2, _orig$3, _name$4, _term$5, _type$6, _isct$7, _arit$8, _defs$9, $8248, _fixd$11);
                        var $8249 = $8292;
                        break;
                };
                var $8239 = $8249;
                break;
        };
        return $8239;
    };
    const Fm$Synth$fix = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => x10 => Fm$Synth$fix$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);

    function Fm$Status$fail$(_errors$1) {
        var $8293 = ({
            _: 'Fm.Status.fail',
            'errors': _errors$1
        });
        return $8293;
    };
    const Fm$Status$fail = x0 => Fm$Status$fail$(x0);

    function Fm$Synth$one$(_name$1, _defs$2) {
        var self = Fm$get$(_name$1, _defs$2);
        switch (self._) {
            case 'Maybe.none':
                var $8295 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $8296 = _m$bind$3;
                    return $8296;
                }))(Fm$Synth$load$(_name$1, _defs$2))((_loaded$3 => {
                    var self = _loaded$3;
                    switch (self._) {
                        case 'Maybe.none':
                            var $8298 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                                var $8299 = _m$pure$5;
                                return $8299;
                            }))(Maybe$none);
                            var $8297 = $8298;
                            break;
                        case 'Maybe.some':
                            var $8300 = self.value;
                            var $8301 = Fm$Synth$one$(_name$1, $8300);
                            var $8297 = $8301;
                            break;
                    };
                    return $8297;
                }));
                var $8294 = $8295;
                break;
            case 'Maybe.some':
                var $8302 = self.value;
                var self = $8302;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $8304 = self.file;
                        var $8305 = self.code;
                        var $8306 = self.orig;
                        var $8307 = self.name;
                        var $8308 = self.term;
                        var $8309 = self.type;
                        var $8310 = self.isct;
                        var $8311 = self.arit;
                        var $8312 = self.stat;
                        var _file$13 = $8304;
                        var _code$14 = $8305;
                        var _orig$15 = $8306;
                        var _name$16 = $8307;
                        var _term$17 = $8308;
                        var _type$18 = $8309;
                        var _isct$19 = $8310;
                        var _arit$20 = $8311;
                        var _stat$21 = $8312;
                        var self = _stat$21;
                        switch (self._) {
                            case 'Fm.Status.init':
                                var _defs$22 = Fm$set$(_name$16, Fm$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Fm$Status$wait), _defs$2);
                                var self = Fm$Term$check$(_type$18, Maybe$some$(Fm$Term$typ), _defs$22, List$nil, Fm$MPath$i$(Fm$MPath$nil), Maybe$none);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $8315 = self.value;
                                        var $8316 = self.errors;
                                        var self = $8315;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $8318 = Fm$Check$result$(Maybe$none, $8316);
                                                var $8317 = $8318;
                                                break;
                                            case 'Maybe.some':
                                                var $8319 = self.value;
                                                var self = Fm$Term$check$(_term$17, Maybe$some$(_type$18), _defs$22, List$nil, Fm$MPath$o$(Fm$MPath$nil), Maybe$none);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $8321 = self.value;
                                                        var $8322 = self.errors;
                                                        var self = $8321;
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var $8324 = Fm$Check$result$(Maybe$none, $8322);
                                                                var $8323 = $8324;
                                                                break;
                                                            case 'Maybe.some':
                                                                var $8325 = self.value;
                                                                var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                                                switch (self._) {
                                                                    case 'Fm.Check.result':
                                                                        var $8327 = self.value;
                                                                        var $8328 = self.errors;
                                                                        var $8329 = Fm$Check$result$($8327, List$concat$($8322, $8328));
                                                                        var $8326 = $8329;
                                                                        break;
                                                                };
                                                                var $8323 = $8326;
                                                                break;
                                                        };
                                                        var self = $8323;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $8330 = self.value;
                                                        var $8331 = self.errors;
                                                        var $8332 = Fm$Check$result$($8330, List$concat$($8316, $8331));
                                                        var $8320 = $8332;
                                                        break;
                                                };
                                                var $8317 = $8320;
                                                break;
                                        };
                                        var _checked$23 = $8317;
                                        break;
                                };
                                var self = _checked$23;
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $8333 = self.value;
                                        var $8334 = self.errors;
                                        var self = List$is_empty$($8334);
                                        if (self) {
                                            var _defs$26 = Fm$define$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, Bool$true, _defs$22);
                                            var $8336 = IO$monad$((_m$bind$27 => _m$pure$28 => {
                                                var $8337 = _m$pure$28;
                                                return $8337;
                                            }))(Maybe$some$(_defs$26));
                                            var $8335 = $8336;
                                        } else {
                                            var $8338 = IO$monad$((_m$bind$26 => _m$pure$27 => {
                                                var $8339 = _m$bind$26;
                                                return $8339;
                                            }))(Fm$Synth$fix$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _defs$22, $8334, Bool$false))((_fixed$26 => {
                                                var self = _fixed$26;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var _stat$27 = Fm$Status$fail$($8334);
                                                        var _defs$28 = Fm$set$(_name$16, Fm$Def$new$(_file$13, _code$14, _orig$15, _name$16, _term$17, _type$18, _isct$19, _arit$20, _stat$27), _defs$22);
                                                        var $8341 = IO$monad$((_m$bind$29 => _m$pure$30 => {
                                                            var $8342 = _m$pure$30;
                                                            return $8342;
                                                        }))(Maybe$some$(_defs$28));
                                                        var $8340 = $8341;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $8343 = self.value;
                                                        var $8344 = Fm$Synth$one$(_name$16, $8343);
                                                        var $8340 = $8344;
                                                        break;
                                                };
                                                return $8340;
                                            }));
                                            var $8335 = $8338;
                                        };
                                        var $8314 = $8335;
                                        break;
                                };
                                var $8313 = $8314;
                                break;
                            case 'Fm.Status.wait':
                                var $8345 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                    var $8346 = _m$pure$23;
                                    return $8346;
                                }))(Maybe$some$(_defs$2));
                                var $8313 = $8345;
                                break;
                            case 'Fm.Status.done':
                                var $8347 = IO$monad$((_m$bind$22 => _m$pure$23 => {
                                    var $8348 = _m$pure$23;
                                    return $8348;
                                }))(Maybe$some$(_defs$2));
                                var $8313 = $8347;
                                break;
                            case 'Fm.Status.fail':
                                var $8349 = self.errors;
                                var $8350 = IO$monad$((_m$bind$23 => _m$pure$24 => {
                                    var $8351 = _m$pure$24;
                                    return $8351;
                                }))(Maybe$some$(_defs$2));
                                var $8313 = $8350;
                                break;
                        };
                        var $8303 = $8313;
                        break;
                };
                var $8294 = $8303;
                break;
        };
        return $8294;
    };
    const Fm$Synth$one = x0 => x1 => Fm$Synth$one$(x0, x1);

    function Map$map$(_fn$3, _map$4) {
        var self = _map$4;
        switch (self._) {
            case 'Map.new':
                var $8353 = Map$new;
                var $8352 = $8353;
                break;
            case 'Map.tie':
                var $8354 = self.val;
                var $8355 = self.lft;
                var $8356 = self.rgt;
                var self = $8354;
                switch (self._) {
                    case 'Maybe.none':
                        var $8358 = Maybe$none;
                        var _val$8 = $8358;
                        break;
                    case 'Maybe.some':
                        var $8359 = self.value;
                        var $8360 = Maybe$some$(_fn$3($8359));
                        var _val$8 = $8360;
                        break;
                };
                var _lft$9 = Map$map$(_fn$3, $8355);
                var _rgt$10 = Map$map$(_fn$3, $8356);
                var $8357 = Map$tie$(_val$8, _lft$9, _rgt$10);
                var $8352 = $8357;
                break;
        };
        return $8352;
    };
    const Map$map = x0 => x1 => Map$map$(x0, x1);
    const Fm$Term$inline$names = (() => {
        var _inl$1 = List$cons$("Monad.pure", List$cons$("Monad.bind", List$cons$("Monad.new", List$cons$("Parser.monad", List$cons$("Parser.bind", List$cons$("Parser.pure", List$cons$("Fm.Check.pure", List$cons$("Fm.Check.bind", List$cons$("Fm.Check.monad", List$cons$("Fm.Check.value", List$cons$("Fm.Check.none", List$nil)))))))))));
        var _kvs$2 = List$mapped$(_inl$1, (_x$2 => {
            var $8362 = Pair$new$((fm_name_to_bits(_x$2)), Unit$new);
            return $8362;
        }));
        var $8361 = Map$from_list$(_kvs$2);
        return $8361;
    })();

    function Fm$Term$inline$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8364 = self.name;
                var $8365 = self.indx;
                var $8366 = _term$1;
                var $8363 = $8366;
                break;
            case 'Fm.Term.ref':
                var $8367 = self.name;
                var _inli$4 = Set$has$((fm_name_to_bits($8367)), Fm$Term$inline$names);
                var self = _inli$4;
                if (self) {
                    var self = Fm$get$($8367, _defs$2);
                    switch (self._) {
                        case 'Maybe.none':
                            var $8370 = Fm$Term$ref$($8367);
                            var $8369 = $8370;
                            break;
                        case 'Maybe.some':
                            var $8371 = self.value;
                            var self = $8371;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $8373 = self.file;
                                    var $8374 = self.code;
                                    var $8375 = self.orig;
                                    var $8376 = self.name;
                                    var $8377 = self.term;
                                    var $8378 = self.type;
                                    var $8379 = self.isct;
                                    var $8380 = self.arit;
                                    var $8381 = self.stat;
                                    var $8382 = Fm$Term$inline$reduce$($8377, _defs$2);
                                    var $8372 = $8382;
                                    break;
                            };
                            var $8369 = $8372;
                            break;
                    };
                    var $8368 = $8369;
                } else {
                    var $8383 = _term$1;
                    var $8368 = $8383;
                };
                var $8363 = $8368;
                break;
            case 'Fm.Term.typ':
                var $8384 = _term$1;
                var $8363 = $8384;
                break;
            case 'Fm.Term.all':
                var $8385 = self.eras;
                var $8386 = self.self;
                var $8387 = self.name;
                var $8388 = self.xtyp;
                var $8389 = self.body;
                var $8390 = _term$1;
                var $8363 = $8390;
                break;
            case 'Fm.Term.lam':
                var $8391 = self.name;
                var $8392 = self.body;
                var $8393 = _term$1;
                var $8363 = $8393;
                break;
            case 'Fm.Term.app':
                var $8394 = self.func;
                var $8395 = self.argm;
                var _func$5 = Fm$Term$inline$reduce$($8394, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $8397 = self.name;
                        var $8398 = self.indx;
                        var $8399 = _term$1;
                        var $8396 = $8399;
                        break;
                    case 'Fm.Term.ref':
                        var $8400 = self.name;
                        var $8401 = _term$1;
                        var $8396 = $8401;
                        break;
                    case 'Fm.Term.typ':
                        var $8402 = _term$1;
                        var $8396 = $8402;
                        break;
                    case 'Fm.Term.all':
                        var $8403 = self.eras;
                        var $8404 = self.self;
                        var $8405 = self.name;
                        var $8406 = self.xtyp;
                        var $8407 = self.body;
                        var $8408 = _term$1;
                        var $8396 = $8408;
                        break;
                    case 'Fm.Term.lam':
                        var $8409 = self.name;
                        var $8410 = self.body;
                        var $8411 = Fm$Term$inline$reduce$($8410($8395), _defs$2);
                        var $8396 = $8411;
                        break;
                    case 'Fm.Term.app':
                        var $8412 = self.func;
                        var $8413 = self.argm;
                        var $8414 = _term$1;
                        var $8396 = $8414;
                        break;
                    case 'Fm.Term.let':
                        var $8415 = self.name;
                        var $8416 = self.expr;
                        var $8417 = self.body;
                        var $8418 = Fm$Term$let$($8415, $8416, (_x$9 => {
                            var $8419 = Fm$Term$inline$reduce$(Fm$Term$app$($8417(_x$9), $8395), _defs$2);
                            return $8419;
                        }));
                        var $8396 = $8418;
                        break;
                    case 'Fm.Term.def':
                        var $8420 = self.name;
                        var $8421 = self.expr;
                        var $8422 = self.body;
                        var $8423 = _term$1;
                        var $8396 = $8423;
                        break;
                    case 'Fm.Term.ann':
                        var $8424 = self.done;
                        var $8425 = self.term;
                        var $8426 = self.type;
                        var $8427 = _term$1;
                        var $8396 = $8427;
                        break;
                    case 'Fm.Term.gol':
                        var $8428 = self.name;
                        var $8429 = self.dref;
                        var $8430 = self.verb;
                        var $8431 = _term$1;
                        var $8396 = $8431;
                        break;
                    case 'Fm.Term.hol':
                        var $8432 = self.path;
                        var $8433 = _term$1;
                        var $8396 = $8433;
                        break;
                    case 'Fm.Term.nat':
                        var $8434 = self.natx;
                        var $8435 = _term$1;
                        var $8396 = $8435;
                        break;
                    case 'Fm.Term.chr':
                        var $8436 = self.chrx;
                        var $8437 = _term$1;
                        var $8396 = $8437;
                        break;
                    case 'Fm.Term.str':
                        var $8438 = self.strx;
                        var $8439 = _term$1;
                        var $8396 = $8439;
                        break;
                    case 'Fm.Term.cse':
                        var $8440 = self.path;
                        var $8441 = self.expr;
                        var $8442 = self.name;
                        var $8443 = self.with;
                        var $8444 = self.cses;
                        var $8445 = self.moti;
                        var $8446 = _term$1;
                        var $8396 = $8446;
                        break;
                    case 'Fm.Term.ori':
                        var $8447 = self.orig;
                        var $8448 = self.expr;
                        var $8449 = _term$1;
                        var $8396 = $8449;
                        break;
                };
                var $8363 = $8396;
                break;
            case 'Fm.Term.let':
                var $8450 = self.name;
                var $8451 = self.expr;
                var $8452 = self.body;
                var $8453 = _term$1;
                var $8363 = $8453;
                break;
            case 'Fm.Term.def':
                var $8454 = self.name;
                var $8455 = self.expr;
                var $8456 = self.body;
                var $8457 = _term$1;
                var $8363 = $8457;
                break;
            case 'Fm.Term.ann':
                var $8458 = self.done;
                var $8459 = self.term;
                var $8460 = self.type;
                var $8461 = _term$1;
                var $8363 = $8461;
                break;
            case 'Fm.Term.gol':
                var $8462 = self.name;
                var $8463 = self.dref;
                var $8464 = self.verb;
                var $8465 = _term$1;
                var $8363 = $8465;
                break;
            case 'Fm.Term.hol':
                var $8466 = self.path;
                var $8467 = _term$1;
                var $8363 = $8467;
                break;
            case 'Fm.Term.nat':
                var $8468 = self.natx;
                var $8469 = _term$1;
                var $8363 = $8469;
                break;
            case 'Fm.Term.chr':
                var $8470 = self.chrx;
                var $8471 = _term$1;
                var $8363 = $8471;
                break;
            case 'Fm.Term.str':
                var $8472 = self.strx;
                var $8473 = _term$1;
                var $8363 = $8473;
                break;
            case 'Fm.Term.cse':
                var $8474 = self.path;
                var $8475 = self.expr;
                var $8476 = self.name;
                var $8477 = self.with;
                var $8478 = self.cses;
                var $8479 = self.moti;
                var $8480 = _term$1;
                var $8363 = $8480;
                break;
            case 'Fm.Term.ori':
                var $8481 = self.orig;
                var $8482 = self.expr;
                var $8483 = Fm$Term$inline$reduce$($8482, _defs$2);
                var $8363 = $8483;
                break;
        };
        return $8363;
    };
    const Fm$Term$inline$reduce = x0 => x1 => Fm$Term$inline$reduce$(x0, x1);

    function Fm$Term$inline$(_term$1, _defs$2) {
        var self = Fm$Term$inline$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Fm.Term.var':
                var $8485 = self.name;
                var $8486 = self.indx;
                var $8487 = Fm$Term$var$($8485, $8486);
                var $8484 = $8487;
                break;
            case 'Fm.Term.ref':
                var $8488 = self.name;
                var $8489 = Fm$Term$ref$($8488);
                var $8484 = $8489;
                break;
            case 'Fm.Term.typ':
                var $8490 = Fm$Term$typ;
                var $8484 = $8490;
                break;
            case 'Fm.Term.all':
                var $8491 = self.eras;
                var $8492 = self.self;
                var $8493 = self.name;
                var $8494 = self.xtyp;
                var $8495 = self.body;
                var $8496 = Fm$Term$all$($8491, $8492, $8493, Fm$Term$inline$($8494, _defs$2), (_s$8 => _x$9 => {
                    var $8497 = Fm$Term$inline$($8495(_s$8)(_x$9), _defs$2);
                    return $8497;
                }));
                var $8484 = $8496;
                break;
            case 'Fm.Term.lam':
                var $8498 = self.name;
                var $8499 = self.body;
                var $8500 = Fm$Term$lam$($8498, (_x$5 => {
                    var $8501 = Fm$Term$inline$($8499(_x$5), _defs$2);
                    return $8501;
                }));
                var $8484 = $8500;
                break;
            case 'Fm.Term.app':
                var $8502 = self.func;
                var $8503 = self.argm;
                var $8504 = Fm$Term$app$(Fm$Term$inline$($8502, _defs$2), Fm$Term$inline$($8503, _defs$2));
                var $8484 = $8504;
                break;
            case 'Fm.Term.let':
                var $8505 = self.name;
                var $8506 = self.expr;
                var $8507 = self.body;
                var $8508 = Fm$Term$let$($8505, Fm$Term$inline$($8506, _defs$2), (_x$6 => {
                    var $8509 = Fm$Term$inline$($8507(_x$6), _defs$2);
                    return $8509;
                }));
                var $8484 = $8508;
                break;
            case 'Fm.Term.def':
                var $8510 = self.name;
                var $8511 = self.expr;
                var $8512 = self.body;
                var $8513 = Fm$Term$def$($8510, Fm$Term$inline$($8511, _defs$2), (_x$6 => {
                    var $8514 = Fm$Term$inline$($8512(_x$6), _defs$2);
                    return $8514;
                }));
                var $8484 = $8513;
                break;
            case 'Fm.Term.ann':
                var $8515 = self.done;
                var $8516 = self.term;
                var $8517 = self.type;
                var $8518 = Fm$Term$ann$($8515, Fm$Term$inline$($8516, _defs$2), Fm$Term$inline$($8517, _defs$2));
                var $8484 = $8518;
                break;
            case 'Fm.Term.gol':
                var $8519 = self.name;
                var $8520 = self.dref;
                var $8521 = self.verb;
                var $8522 = Fm$Term$gol$($8519, $8520, $8521);
                var $8484 = $8522;
                break;
            case 'Fm.Term.hol':
                var $8523 = self.path;
                var $8524 = Fm$Term$hol$($8523);
                var $8484 = $8524;
                break;
            case 'Fm.Term.nat':
                var $8525 = self.natx;
                var $8526 = Fm$Term$nat$($8525);
                var $8484 = $8526;
                break;
            case 'Fm.Term.chr':
                var $8527 = self.chrx;
                var $8528 = Fm$Term$chr$($8527);
                var $8484 = $8528;
                break;
            case 'Fm.Term.str':
                var $8529 = self.strx;
                var $8530 = Fm$Term$str$($8529);
                var $8484 = $8530;
                break;
            case 'Fm.Term.cse':
                var $8531 = self.path;
                var $8532 = self.expr;
                var $8533 = self.name;
                var $8534 = self.with;
                var $8535 = self.cses;
                var $8536 = self.moti;
                var $8537 = _term$1;
                var $8484 = $8537;
                break;
            case 'Fm.Term.ori':
                var $8538 = self.orig;
                var $8539 = self.expr;
                var $8540 = Fm$Term$inline$($8539, _defs$2);
                var $8484 = $8540;
                break;
        };
        return $8484;
    };
    const Fm$Term$inline = x0 => x1 => Fm$Term$inline$(x0, x1);

    function Map$values$go$(_xs$2, _list$3) {
        var self = _xs$2;
        switch (self._) {
            case 'Map.new':
                var $8542 = _list$3;
                var $8541 = $8542;
                break;
            case 'Map.tie':
                var $8543 = self.val;
                var $8544 = self.lft;
                var $8545 = self.rgt;
                var self = $8543;
                switch (self._) {
                    case 'Maybe.none':
                        var $8547 = _list$3;
                        var _list0$7 = $8547;
                        break;
                    case 'Maybe.some':
                        var $8548 = self.value;
                        var $8549 = List$cons$($8548, _list$3);
                        var _list0$7 = $8549;
                        break;
                };
                var _list1$8 = Map$values$go$($8544, _list0$7);
                var _list2$9 = Map$values$go$($8545, _list1$8);
                var $8546 = _list2$9;
                var $8541 = $8546;
                break;
        };
        return $8541;
    };
    const Map$values$go = x0 => x1 => Map$values$go$(x0, x1);

    function Map$values$(_xs$2) {
        var $8550 = Map$values$go$(_xs$2, List$nil);
        return $8550;
    };
    const Map$values = x0 => Map$values$(x0);

    function Fm$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4) {
        var Fm$Core$var_name$ = (_indx$1, _name$2, _brui$3, _vars$4) => ({
            ctr: 'TCO',
            arg: [_indx$1, _name$2, _brui$3, _vars$4]
        });
        var Fm$Core$var_name = _indx$1 => _name$2 => _brui$3 => _vars$4 => Fm$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4);
        var arg = [_indx$1, _name$2, _brui$3, _vars$4];
        while (true) {
            let [_indx$1, _name$2, _brui$3, _vars$4] = arg;
            var R = (() => {
                var self = _indx$1;
                if (self === 0n) {
                    var self = _brui$3;
                    if (self === 0n) {
                        var $8552 = _name$2;
                        var $8551 = $8552;
                    } else {
                        var $8553 = (self - 1n);
                        var $8554 = (_name$2 + ("^" + Nat$show$(_brui$3)));
                        var $8551 = $8554;
                    };
                    return $8551;
                } else {
                    var $8555 = (self - 1n);
                    var self = _vars$4;
                    switch (self._) {
                        case 'List.nil':
                            var $8557 = "unbound";
                            var $8556 = $8557;
                            break;
                        case 'List.cons':
                            var $8558 = self.head;
                            var $8559 = self.tail;
                            var self = (_name$2 === $8558);
                            if (self) {
                                var $8561 = Nat$succ$(_brui$3);
                                var _brui$8 = $8561;
                            } else {
                                var $8562 = _brui$3;
                                var _brui$8 = $8562;
                            };
                            var $8560 = Fm$Core$var_name$($8555, _name$2, _brui$8, $8559);
                            var $8556 = $8560;
                            break;
                    };
                    return $8556;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Core$var_name = x0 => x1 => x2 => x3 => Fm$Core$var_name$(x0, x1, x2, x3);

    function Fm$Name$show$(_name$1) {
        var $8563 = _name$1;
        return $8563;
    };
    const Fm$Name$show = x0 => Fm$Name$show$(x0);

    function Bits$to_nat$(_b$1) {
        var self = _b$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $8565 = 0n;
                var $8564 = $8565;
                break;
            case 'o':
                var $8566 = self.slice(0, -1);
                var $8567 = (2n * Bits$to_nat$($8566));
                var $8564 = $8567;
                break;
            case 'i':
                var $8568 = self.slice(0, -1);
                var $8569 = Nat$succ$((2n * Bits$to_nat$($8568)));
                var $8564 = $8569;
                break;
        };
        return $8564;
    };
    const Bits$to_nat = x0 => Bits$to_nat$(x0);

    function U16$show_hex$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $8571 = u16_to_word(self);
                var $8572 = Nat$to_string_base$(16n, Bits$to_nat$(Word$to_bits$($8571)));
                var $8570 = $8572;
                break;
        };
        return $8570;
    };
    const U16$show_hex = x0 => U16$show_hex$(x0);

    function Fm$escape$char$(_chr$1) {
        var self = (_chr$1 === Fm$backslash);
        if (self) {
            var $8574 = String$cons$(Fm$backslash, String$cons$(_chr$1, String$nil));
            var $8573 = $8574;
        } else {
            var self = (_chr$1 === 34);
            if (self) {
                var $8576 = String$cons$(Fm$backslash, String$cons$(_chr$1, String$nil));
                var $8575 = $8576;
            } else {
                var self = (_chr$1 === 39);
                if (self) {
                    var $8578 = String$cons$(Fm$backslash, String$cons$(_chr$1, String$nil));
                    var $8577 = $8578;
                } else {
                    var self = U16$btw$(32, _chr$1, 126);
                    if (self) {
                        var $8580 = String$cons$(_chr$1, String$nil);
                        var $8579 = $8580;
                    } else {
                        var $8581 = String$flatten$(List$cons$(String$cons$(Fm$backslash, String$nil), List$cons$("u{", List$cons$(U16$show_hex$(_chr$1), List$cons$("}", List$cons$(String$nil, List$nil))))));
                        var $8579 = $8581;
                    };
                    var $8577 = $8579;
                };
                var $8575 = $8577;
            };
            var $8573 = $8575;
        };
        return $8573;
    };
    const Fm$escape$char = x0 => Fm$escape$char$(x0);

    function Fm$escape$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $8583 = String$nil;
            var $8582 = $8583;
        } else {
            var $8584 = self.charCodeAt(0);
            var $8585 = self.slice(1);
            var _head$4 = Fm$escape$char$($8584);
            var _tail$5 = Fm$escape$($8585);
            var $8586 = (_head$4 + _tail$5);
            var $8582 = $8586;
        };
        return $8582;
    };
    const Fm$escape = x0 => Fm$escape$(x0);

    function Fm$Core$show$(_term$1, _indx$2, _vars$3) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8588 = self.name;
                var $8589 = self.indx;
                var $8590 = Fm$Core$var_name$(Nat$pred$((_indx$2 - $8589 <= 0n ? 0n : _indx$2 - $8589)), $8588, 0n, _vars$3);
                var $8587 = $8590;
                break;
            case 'Fm.Term.ref':
                var $8591 = self.name;
                var $8592 = Fm$Name$show$($8591);
                var $8587 = $8592;
                break;
            case 'Fm.Term.typ':
                var $8593 = "*";
                var $8587 = $8593;
                break;
            case 'Fm.Term.all':
                var $8594 = self.eras;
                var $8595 = self.self;
                var $8596 = self.name;
                var $8597 = self.xtyp;
                var $8598 = self.body;
                var _eras$9 = $8594;
                var self = _eras$9;
                if (self) {
                    var $8600 = "%";
                    var _init$10 = $8600;
                } else {
                    var $8601 = "@";
                    var _init$10 = $8601;
                };
                var _self$11 = Fm$Name$show$($8595);
                var _name$12 = Fm$Name$show$($8596);
                var _xtyp$13 = Fm$Core$show$($8597, _indx$2, _vars$3);
                var _body$14 = Fm$Core$show$($8598(Fm$Term$var$($8595, _indx$2))(Fm$Term$var$($8596, Nat$succ$(_indx$2))), Nat$succ$(Nat$succ$(_indx$2)), List$cons$($8596, List$cons$($8595, _vars$3)));
                var $8599 = String$flatten$(List$cons$(_init$10, List$cons$(_self$11, List$cons$("(", List$cons$(_name$12, List$cons$(":", List$cons$(_xtyp$13, List$cons$(") ", List$cons$(_body$14, List$nil)))))))));
                var $8587 = $8599;
                break;
            case 'Fm.Term.lam':
                var $8602 = self.name;
                var $8603 = self.body;
                var _name$6 = Fm$Name$show$($8602);
                var _body$7 = Fm$Core$show$($8603(Fm$Term$var$($8602, _indx$2)), Nat$succ$(_indx$2), List$cons$($8602, _vars$3));
                var $8604 = String$flatten$(List$cons$("#", List$cons$(_name$6, List$cons$(" ", List$cons$(_body$7, List$nil)))));
                var $8587 = $8604;
                break;
            case 'Fm.Term.app':
                var $8605 = self.func;
                var $8606 = self.argm;
                var _func$6 = Fm$Core$show$($8605, _indx$2, _vars$3);
                var _argm$7 = Fm$Core$show$($8606, _indx$2, _vars$3);
                var $8607 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(" ", List$cons$(_argm$7, List$cons$(")", List$nil))))));
                var $8587 = $8607;
                break;
            case 'Fm.Term.let':
                var $8608 = self.name;
                var $8609 = self.expr;
                var $8610 = self.body;
                var _name$7 = Fm$Name$show$($8608);
                var _expr$8 = Fm$Core$show$($8609, _indx$2, _vars$3);
                var _body$9 = Fm$Core$show$($8610(Fm$Term$var$($8608, _indx$2)), Nat$succ$(_indx$2), List$cons$($8608, _vars$3));
                var $8611 = String$flatten$(List$cons$("!", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $8587 = $8611;
                break;
            case 'Fm.Term.def':
                var $8612 = self.name;
                var $8613 = self.expr;
                var $8614 = self.body;
                var _name$7 = Fm$Name$show$($8612);
                var _expr$8 = Fm$Core$show$($8613, _indx$2, _vars$3);
                var _body$9 = Fm$Core$show$($8614(Fm$Term$var$($8612, _indx$2)), Nat$succ$(_indx$2), List$cons$($8612, _vars$3));
                var $8615 = String$flatten$(List$cons$("$", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $8587 = $8615;
                break;
            case 'Fm.Term.ann':
                var $8616 = self.done;
                var $8617 = self.term;
                var $8618 = self.type;
                var _term$7 = Fm$Core$show$($8617, _indx$2, _vars$3);
                var _type$8 = Fm$Core$show$($8618, _indx$2, _vars$3);
                var $8619 = String$flatten$(List$cons$("{", List$cons$(_term$7, List$cons$(":", List$cons$(_type$8, List$cons$("}", List$nil))))));
                var $8587 = $8619;
                break;
            case 'Fm.Term.gol':
                var $8620 = self.name;
                var $8621 = self.dref;
                var $8622 = self.verb;
                var $8623 = "<GOL>";
                var $8587 = $8623;
                break;
            case 'Fm.Term.hol':
                var $8624 = self.path;
                var $8625 = "<HOL>";
                var $8587 = $8625;
                break;
            case 'Fm.Term.nat':
                var $8626 = self.natx;
                var $8627 = String$flatten$(List$cons$("+", List$cons$(Nat$show$($8626), List$nil)));
                var $8587 = $8627;
                break;
            case 'Fm.Term.chr':
                var $8628 = self.chrx;
                var $8629 = String$flatten$(List$cons$("\'", List$cons$(Fm$escape$char$($8628), List$cons$("\'", List$nil))));
                var $8587 = $8629;
                break;
            case 'Fm.Term.str':
                var $8630 = self.strx;
                var $8631 = String$flatten$(List$cons$("\"", List$cons$(Fm$escape$($8630), List$cons$("\"", List$nil))));
                var $8587 = $8631;
                break;
            case 'Fm.Term.cse':
                var $8632 = self.path;
                var $8633 = self.expr;
                var $8634 = self.name;
                var $8635 = self.with;
                var $8636 = self.cses;
                var $8637 = self.moti;
                var $8638 = "<CSE>";
                var $8587 = $8638;
                break;
            case 'Fm.Term.ori':
                var $8639 = self.orig;
                var $8640 = self.expr;
                var $8641 = Fm$Core$show$($8640, _indx$2, _vars$3);
                var $8587 = $8641;
                break;
        };
        return $8587;
    };
    const Fm$Core$show = x0 => x1 => x2 => Fm$Core$show$(x0, x1, x2);

    function Fm$Defs$core$(_defs$1) {
        var _result$2 = "";
        var _result$3 = (() => {
            var $8644 = _result$2;
            var $8645 = Map$values$(_defs$1);
            let _result$4 = $8644;
            let _defn$3;
            while ($8645._ === 'List.cons') {
                _defn$3 = $8645.head;
                var self = _defn$3;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $8646 = self.file;
                        var $8647 = self.code;
                        var $8648 = self.orig;
                        var $8649 = self.name;
                        var $8650 = self.term;
                        var $8651 = self.type;
                        var $8652 = self.isct;
                        var $8653 = self.arit;
                        var $8654 = self.stat;
                        var self = $8654;
                        switch (self._) {
                            case 'Fm.Status.init':
                                var $8656 = _result$4;
                                var $8655 = $8656;
                                break;
                            case 'Fm.Status.wait':
                                var $8657 = _result$4;
                                var $8655 = $8657;
                                break;
                            case 'Fm.Status.done':
                                var _name$14 = $8649;
                                var _term$15 = Fm$Core$show$($8650, 0n, List$nil);
                                var _type$16 = Fm$Core$show$($8651, 0n, List$nil);
                                var $8658 = String$flatten$(List$cons$(_result$4, List$cons$(_name$14, List$cons$(" : ", List$cons$(_type$16, List$cons$(" = ", List$cons$(_term$15, List$cons$(";\u{a}", List$nil))))))));
                                var $8655 = $8658;
                                break;
                            case 'Fm.Status.fail':
                                var $8659 = self.errors;
                                var $8660 = _result$4;
                                var $8655 = $8660;
                                break;
                        };
                        var $8644 = $8655;
                        break;
                };
                _result$4 = $8644;
                $8645 = $8645.tail;
            }
            return _result$4;
        })();
        var $8642 = _result$3;
        return $8642;
    };
    const Fm$Defs$core = x0 => Fm$Defs$core$(x0);

    function Fm$to_core$io$one$(_name$1) {
        var $8661 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8662 = _m$bind$2;
            return $8662;
        }))(Fm$Synth$one$(_name$1, Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.none':
                    var $8664 = Map$new;
                    var _defs$3 = $8664;
                    break;
                case 'Maybe.some':
                    var $8665 = self.value;
                    var $8666 = $8665;
                    var _defs$3 = $8666;
                    break;
            };
            var _defs$4 = Map$map$((_defn$4 => {
                var self = _defn$4;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $8668 = self.file;
                        var $8669 = self.code;
                        var $8670 = self.orig;
                        var $8671 = self.name;
                        var $8672 = self.term;
                        var $8673 = self.type;
                        var $8674 = self.isct;
                        var $8675 = self.arit;
                        var $8676 = self.stat;
                        var _term$14 = Fm$Term$inline$($8672, _defs$3);
                        var _type$15 = Fm$Term$inline$($8673, _defs$3);
                        var $8677 = Fm$Def$new$($8668, $8669, $8670, $8671, _term$14, _type$15, $8674, $8675, $8676);
                        var $8667 = $8677;
                        break;
                };
                return $8667;
            }), _defs$3);
            var $8663 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                var $8678 = _m$pure$6;
                return $8678;
            }))(Fm$Defs$core$(_defs$4));
            return $8663;
        }));
        return $8661;
    };
    const Fm$to_core$io$one = x0 => Fm$to_core$io$one$(x0);

    function IO$print$(_text$1) {
        var $8679 = IO$ask$("print", _text$1, (_skip$2 => {
            var $8680 = IO$end$(Unit$new);
            return $8680;
        }));
        return $8679;
    };
    const IO$print = x0 => IO$print$(x0);

    function Maybe$bind$(_m$3, _f$4) {
        var self = _m$3;
        switch (self._) {
            case 'Maybe.none':
                var $8682 = Maybe$none;
                var $8681 = $8682;
                break;
            case 'Maybe.some':
                var $8683 = self.value;
                var $8684 = _f$4($8683);
                var $8681 = $8684;
                break;
        };
        return $8681;
    };
    const Maybe$bind = x0 => x1 => Maybe$bind$(x0, x1);

    function Maybe$monad$(_new$2) {
        var $8685 = _new$2(Maybe$bind)(Maybe$some);
        return $8685;
    };
    const Maybe$monad = x0 => Maybe$monad$(x0);

    function Fm$Term$show$as_nat$go$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8687 = self.name;
                var $8688 = self.indx;
                var $8689 = Maybe$none;
                var $8686 = $8689;
                break;
            case 'Fm.Term.ref':
                var $8690 = self.name;
                var self = ($8690 === "Nat.zero");
                if (self) {
                    var $8692 = Maybe$some$(0n);
                    var $8691 = $8692;
                } else {
                    var $8693 = Maybe$none;
                    var $8691 = $8693;
                };
                var $8686 = $8691;
                break;
            case 'Fm.Term.typ':
                var $8694 = Maybe$none;
                var $8686 = $8694;
                break;
            case 'Fm.Term.all':
                var $8695 = self.eras;
                var $8696 = self.self;
                var $8697 = self.name;
                var $8698 = self.xtyp;
                var $8699 = self.body;
                var $8700 = Maybe$none;
                var $8686 = $8700;
                break;
            case 'Fm.Term.lam':
                var $8701 = self.name;
                var $8702 = self.body;
                var $8703 = Maybe$none;
                var $8686 = $8703;
                break;
            case 'Fm.Term.app':
                var $8704 = self.func;
                var $8705 = self.argm;
                var self = $8704;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $8707 = self.name;
                        var $8708 = self.indx;
                        var $8709 = Maybe$none;
                        var $8706 = $8709;
                        break;
                    case 'Fm.Term.ref':
                        var $8710 = self.name;
                        var self = ($8710 === "Nat.succ");
                        if (self) {
                            var $8712 = Maybe$monad$((_m$bind$5 => _m$pure$6 => {
                                var $8713 = _m$bind$5;
                                return $8713;
                            }))(Fm$Term$show$as_nat$go$($8705))((_pred$5 => {
                                var $8714 = Maybe$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $8715 = _m$pure$7;
                                    return $8715;
                                }))(Nat$succ$(_pred$5));
                                return $8714;
                            }));
                            var $8711 = $8712;
                        } else {
                            var $8716 = Maybe$none;
                            var $8711 = $8716;
                        };
                        var $8706 = $8711;
                        break;
                    case 'Fm.Term.typ':
                        var $8717 = Maybe$none;
                        var $8706 = $8717;
                        break;
                    case 'Fm.Term.all':
                        var $8718 = self.eras;
                        var $8719 = self.self;
                        var $8720 = self.name;
                        var $8721 = self.xtyp;
                        var $8722 = self.body;
                        var $8723 = Maybe$none;
                        var $8706 = $8723;
                        break;
                    case 'Fm.Term.lam':
                        var $8724 = self.name;
                        var $8725 = self.body;
                        var $8726 = Maybe$none;
                        var $8706 = $8726;
                        break;
                    case 'Fm.Term.app':
                        var $8727 = self.func;
                        var $8728 = self.argm;
                        var $8729 = Maybe$none;
                        var $8706 = $8729;
                        break;
                    case 'Fm.Term.let':
                        var $8730 = self.name;
                        var $8731 = self.expr;
                        var $8732 = self.body;
                        var $8733 = Maybe$none;
                        var $8706 = $8733;
                        break;
                    case 'Fm.Term.def':
                        var $8734 = self.name;
                        var $8735 = self.expr;
                        var $8736 = self.body;
                        var $8737 = Maybe$none;
                        var $8706 = $8737;
                        break;
                    case 'Fm.Term.ann':
                        var $8738 = self.done;
                        var $8739 = self.term;
                        var $8740 = self.type;
                        var $8741 = Maybe$none;
                        var $8706 = $8741;
                        break;
                    case 'Fm.Term.gol':
                        var $8742 = self.name;
                        var $8743 = self.dref;
                        var $8744 = self.verb;
                        var $8745 = Maybe$none;
                        var $8706 = $8745;
                        break;
                    case 'Fm.Term.hol':
                        var $8746 = self.path;
                        var $8747 = Maybe$none;
                        var $8706 = $8747;
                        break;
                    case 'Fm.Term.nat':
                        var $8748 = self.natx;
                        var $8749 = Maybe$none;
                        var $8706 = $8749;
                        break;
                    case 'Fm.Term.chr':
                        var $8750 = self.chrx;
                        var $8751 = Maybe$none;
                        var $8706 = $8751;
                        break;
                    case 'Fm.Term.str':
                        var $8752 = self.strx;
                        var $8753 = Maybe$none;
                        var $8706 = $8753;
                        break;
                    case 'Fm.Term.cse':
                        var $8754 = self.path;
                        var $8755 = self.expr;
                        var $8756 = self.name;
                        var $8757 = self.with;
                        var $8758 = self.cses;
                        var $8759 = self.moti;
                        var $8760 = Maybe$none;
                        var $8706 = $8760;
                        break;
                    case 'Fm.Term.ori':
                        var $8761 = self.orig;
                        var $8762 = self.expr;
                        var $8763 = Maybe$none;
                        var $8706 = $8763;
                        break;
                };
                var $8686 = $8706;
                break;
            case 'Fm.Term.let':
                var $8764 = self.name;
                var $8765 = self.expr;
                var $8766 = self.body;
                var $8767 = Maybe$none;
                var $8686 = $8767;
                break;
            case 'Fm.Term.def':
                var $8768 = self.name;
                var $8769 = self.expr;
                var $8770 = self.body;
                var $8771 = Maybe$none;
                var $8686 = $8771;
                break;
            case 'Fm.Term.ann':
                var $8772 = self.done;
                var $8773 = self.term;
                var $8774 = self.type;
                var $8775 = Maybe$none;
                var $8686 = $8775;
                break;
            case 'Fm.Term.gol':
                var $8776 = self.name;
                var $8777 = self.dref;
                var $8778 = self.verb;
                var $8779 = Maybe$none;
                var $8686 = $8779;
                break;
            case 'Fm.Term.hol':
                var $8780 = self.path;
                var $8781 = Maybe$none;
                var $8686 = $8781;
                break;
            case 'Fm.Term.nat':
                var $8782 = self.natx;
                var $8783 = Maybe$none;
                var $8686 = $8783;
                break;
            case 'Fm.Term.chr':
                var $8784 = self.chrx;
                var $8785 = Maybe$none;
                var $8686 = $8785;
                break;
            case 'Fm.Term.str':
                var $8786 = self.strx;
                var $8787 = Maybe$none;
                var $8686 = $8787;
                break;
            case 'Fm.Term.cse':
                var $8788 = self.path;
                var $8789 = self.expr;
                var $8790 = self.name;
                var $8791 = self.with;
                var $8792 = self.cses;
                var $8793 = self.moti;
                var $8794 = Maybe$none;
                var $8686 = $8794;
                break;
            case 'Fm.Term.ori':
                var $8795 = self.orig;
                var $8796 = self.expr;
                var $8797 = Maybe$none;
                var $8686 = $8797;
                break;
        };
        return $8686;
    };
    const Fm$Term$show$as_nat$go = x0 => Fm$Term$show$as_nat$go$(x0);

    function Fm$Term$show$as_nat$(_term$1) {
        var $8798 = Maybe$mapped$(Fm$Term$show$as_nat$go$(_term$1), Nat$show);
        return $8798;
    };
    const Fm$Term$show$as_nat = x0 => Fm$Term$show$as_nat$(x0);

    function Fm$Term$show$is_ref$(_term$1, _name$2) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8800 = self.name;
                var $8801 = self.indx;
                var $8802 = Bool$false;
                var $8799 = $8802;
                break;
            case 'Fm.Term.ref':
                var $8803 = self.name;
                var $8804 = (_name$2 === $8803);
                var $8799 = $8804;
                break;
            case 'Fm.Term.typ':
                var $8805 = Bool$false;
                var $8799 = $8805;
                break;
            case 'Fm.Term.all':
                var $8806 = self.eras;
                var $8807 = self.self;
                var $8808 = self.name;
                var $8809 = self.xtyp;
                var $8810 = self.body;
                var $8811 = Bool$false;
                var $8799 = $8811;
                break;
            case 'Fm.Term.lam':
                var $8812 = self.name;
                var $8813 = self.body;
                var $8814 = Bool$false;
                var $8799 = $8814;
                break;
            case 'Fm.Term.app':
                var $8815 = self.func;
                var $8816 = self.argm;
                var $8817 = Bool$false;
                var $8799 = $8817;
                break;
            case 'Fm.Term.let':
                var $8818 = self.name;
                var $8819 = self.expr;
                var $8820 = self.body;
                var $8821 = Bool$false;
                var $8799 = $8821;
                break;
            case 'Fm.Term.def':
                var $8822 = self.name;
                var $8823 = self.expr;
                var $8824 = self.body;
                var $8825 = Bool$false;
                var $8799 = $8825;
                break;
            case 'Fm.Term.ann':
                var $8826 = self.done;
                var $8827 = self.term;
                var $8828 = self.type;
                var $8829 = Bool$false;
                var $8799 = $8829;
                break;
            case 'Fm.Term.gol':
                var $8830 = self.name;
                var $8831 = self.dref;
                var $8832 = self.verb;
                var $8833 = Bool$false;
                var $8799 = $8833;
                break;
            case 'Fm.Term.hol':
                var $8834 = self.path;
                var $8835 = Bool$false;
                var $8799 = $8835;
                break;
            case 'Fm.Term.nat':
                var $8836 = self.natx;
                var $8837 = Bool$false;
                var $8799 = $8837;
                break;
            case 'Fm.Term.chr':
                var $8838 = self.chrx;
                var $8839 = Bool$false;
                var $8799 = $8839;
                break;
            case 'Fm.Term.str':
                var $8840 = self.strx;
                var $8841 = Bool$false;
                var $8799 = $8841;
                break;
            case 'Fm.Term.cse':
                var $8842 = self.path;
                var $8843 = self.expr;
                var $8844 = self.name;
                var $8845 = self.with;
                var $8846 = self.cses;
                var $8847 = self.moti;
                var $8848 = Bool$false;
                var $8799 = $8848;
                break;
            case 'Fm.Term.ori':
                var $8849 = self.orig;
                var $8850 = self.expr;
                var $8851 = Bool$false;
                var $8799 = $8851;
                break;
        };
        return $8799;
    };
    const Fm$Term$show$is_ref = x0 => x1 => Fm$Term$show$is_ref$(x0, x1);

    function Fm$Term$show$app$done$(_term$1, _path$2, _args$3) {
        var _arity$4 = (list_length(_args$3));
        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$4 === 3n));
        if (self) {
            var _func$5 = Fm$Term$show$go$(_term$1, _path$2);
            var _eq_lft$6 = Maybe$default$("?", List$at$(1n, _args$3));
            var _eq_rgt$7 = Maybe$default$("?", List$at$(2n, _args$3));
            var $8853 = String$flatten$(List$cons$(_eq_lft$6, List$cons$(" == ", List$cons$(_eq_rgt$7, List$nil))));
            var $8852 = $8853;
        } else {
            var _func$5 = Fm$Term$show$go$(_term$1, _path$2);
            var self = _func$5;
            if (self.length === 0) {
                var $8855 = Bool$false;
                var _wrap$6 = $8855;
            } else {
                var $8856 = self.charCodeAt(0);
                var $8857 = self.slice(1);
                var $8858 = ($8856 === 40);
                var _wrap$6 = $8858;
            };
            var _args$7 = String$join$(",", _args$3);
            var self = _wrap$6;
            if (self) {
                var $8859 = String$flatten$(List$cons$("(", List$cons$(_func$5, List$cons$(")", List$nil))));
                var _func$8 = $8859;
            } else {
                var $8860 = _func$5;
                var _func$8 = $8860;
            };
            var $8854 = String$flatten$(List$cons$(_func$8, List$cons$("(", List$cons$(_args$7, List$cons$(")", List$nil)))));
            var $8852 = $8854;
        };
        return $8852;
    };
    const Fm$Term$show$app$done = x0 => x1 => x2 => Fm$Term$show$app$done$(x0, x1, x2);

    function Fm$Term$show$app$(_term$1, _path$2, _args$3) {
        var Fm$Term$show$app$ = (_term$1, _path$2, _args$3) => ({
            ctr: 'TCO',
            arg: [_term$1, _path$2, _args$3]
        });
        var Fm$Term$show$app = _term$1 => _path$2 => _args$3 => Fm$Term$show$app$(_term$1, _path$2, _args$3);
        var arg = [_term$1, _path$2, _args$3];
        while (true) {
            let [_term$1, _path$2, _args$3] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $8861 = self.name;
                        var $8862 = self.indx;
                        var $8863 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8863;
                    case 'Fm.Term.ref':
                        var $8864 = self.name;
                        var $8865 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8865;
                    case 'Fm.Term.typ':
                        var $8866 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8866;
                    case 'Fm.Term.all':
                        var $8867 = self.eras;
                        var $8868 = self.self;
                        var $8869 = self.name;
                        var $8870 = self.xtyp;
                        var $8871 = self.body;
                        var $8872 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8872;
                    case 'Fm.Term.lam':
                        var $8873 = self.name;
                        var $8874 = self.body;
                        var $8875 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8875;
                    case 'Fm.Term.app':
                        var $8876 = self.func;
                        var $8877 = self.argm;
                        var $8878 = Fm$Term$show$app$($8876, Fm$MPath$o$(_path$2), List$cons$(Fm$Term$show$go$($8877, Fm$MPath$i$(_path$2)), _args$3));
                        return $8878;
                    case 'Fm.Term.let':
                        var $8879 = self.name;
                        var $8880 = self.expr;
                        var $8881 = self.body;
                        var $8882 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8882;
                    case 'Fm.Term.def':
                        var $8883 = self.name;
                        var $8884 = self.expr;
                        var $8885 = self.body;
                        var $8886 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8886;
                    case 'Fm.Term.ann':
                        var $8887 = self.done;
                        var $8888 = self.term;
                        var $8889 = self.type;
                        var $8890 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8890;
                    case 'Fm.Term.gol':
                        var $8891 = self.name;
                        var $8892 = self.dref;
                        var $8893 = self.verb;
                        var $8894 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8894;
                    case 'Fm.Term.hol':
                        var $8895 = self.path;
                        var $8896 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8896;
                    case 'Fm.Term.nat':
                        var $8897 = self.natx;
                        var $8898 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8898;
                    case 'Fm.Term.chr':
                        var $8899 = self.chrx;
                        var $8900 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8900;
                    case 'Fm.Term.str':
                        var $8901 = self.strx;
                        var $8902 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8902;
                    case 'Fm.Term.cse':
                        var $8903 = self.path;
                        var $8904 = self.expr;
                        var $8905 = self.name;
                        var $8906 = self.with;
                        var $8907 = self.cses;
                        var $8908 = self.moti;
                        var $8909 = Fm$Term$show$app$done$(_term$1, _path$2, _args$3);
                        return $8909;
                    case 'Fm.Term.ori':
                        var $8910 = self.orig;
                        var $8911 = self.expr;
                        var $8912 = Fm$Term$show$app$($8911, _path$2, _args$3);
                        return $8912;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Term$show$app = x0 => x1 => x2 => Fm$Term$show$app$(x0, x1, x2);

    function Map$to_list$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'Map.new':
                var $8914 = _list$4;
                var $8913 = $8914;
                break;
            case 'Map.tie':
                var $8915 = self.val;
                var $8916 = self.lft;
                var $8917 = self.rgt;
                var self = $8915;
                switch (self._) {
                    case 'Maybe.none':
                        var $8919 = _list$4;
                        var _list0$8 = $8919;
                        break;
                    case 'Maybe.some':
                        var $8920 = self.value;
                        var $8921 = List$cons$(Pair$new$(Bits$reverse$(_key$3), $8920), _list$4);
                        var _list0$8 = $8921;
                        break;
                };
                var _list1$9 = Map$to_list$go$($8916, (_key$3 + '0'), _list0$8);
                var _list2$10 = Map$to_list$go$($8917, (_key$3 + '1'), _list1$9);
                var $8918 = _list2$10;
                var $8913 = $8918;
                break;
        };
        return $8913;
    };
    const Map$to_list$go = x0 => x1 => x2 => Map$to_list$go$(x0, x1, x2);

    function Map$to_list$(_xs$2) {
        var $8922 = List$reverse$(Map$to_list$go$(_xs$2, Bits$e, List$nil));
        return $8922;
    };
    const Map$to_list = x0 => Map$to_list$(x0);

    function Bits$chunks_of$go$(_len$1, _bits$2, _need$3, _chunk$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $8924 = List$cons$(Bits$reverse$(_chunk$4), List$nil);
                var $8923 = $8924;
                break;
            case 'o':
                var $8925 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $8927 = List$cons$(_head$6, _tail$7);
                    var $8926 = $8927;
                } else {
                    var $8928 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '0');
                    var $8929 = Bits$chunks_of$go$(_len$1, $8925, $8928, _chunk$7);
                    var $8926 = $8929;
                };
                var $8923 = $8926;
                break;
            case 'i':
                var $8930 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $8932 = List$cons$(_head$6, _tail$7);
                    var $8931 = $8932;
                } else {
                    var $8933 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '1');
                    var $8934 = Bits$chunks_of$go$(_len$1, $8930, $8933, _chunk$7);
                    var $8931 = $8934;
                };
                var $8923 = $8931;
                break;
        };
        return $8923;
    };
    const Bits$chunks_of$go = x0 => x1 => x2 => x3 => Bits$chunks_of$go$(x0, x1, x2, x3);

    function Bits$chunks_of$(_len$1, _bits$2) {
        var $8935 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
        return $8935;
    };
    const Bits$chunks_of = x0 => x1 => Bits$chunks_of$(x0, x1);

    function Word$from_bits$(_size$1, _bits$2) {
        var self = _size$1;
        if (self === 0n) {
            var $8937 = Word$e;
            var $8936 = $8937;
        } else {
            var $8938 = (self - 1n);
            var self = _bits$2;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'e':
                    var $8940 = Word$o$(Word$from_bits$($8938, Bits$e));
                    var $8939 = $8940;
                    break;
                case 'o':
                    var $8941 = self.slice(0, -1);
                    var $8942 = Word$o$(Word$from_bits$($8938, $8941));
                    var $8939 = $8942;
                    break;
                case 'i':
                    var $8943 = self.slice(0, -1);
                    var $8944 = Word$i$(Word$from_bits$($8938, $8943));
                    var $8939 = $8944;
                    break;
            };
            var $8936 = $8939;
        };
        return $8936;
    };
    const Word$from_bits = x0 => x1 => Word$from_bits$(x0, x1);

    function Fm$Name$from_bits$(_bits$1) {
        var _list$2 = Bits$chunks_of$(6n, _bits$1);
        var _name$3 = List$fold$(_list$2, String$nil, (_bts$3 => _name$4 => {
            var _u16$5 = U16$new$(Word$from_bits$(16n, Bits$reverse$(_bts$3)));
            var self = U16$btw$(0, _u16$5, 25);
            if (self) {
                var $8947 = ((_u16$5 + 65) & 0xFFFF);
                var _chr$6 = $8947;
            } else {
                var self = U16$btw$(26, _u16$5, 51);
                if (self) {
                    var $8949 = ((_u16$5 + 71) & 0xFFFF);
                    var $8948 = $8949;
                } else {
                    var self = U16$btw$(52, _u16$5, 61);
                    if (self) {
                        var $8951 = (Math.max(_u16$5 - 4, 0));
                        var $8950 = $8951;
                    } else {
                        var self = (62 === _u16$5);
                        if (self) {
                            var $8953 = 46;
                            var $8952 = $8953;
                        } else {
                            var $8954 = 95;
                            var $8952 = $8954;
                        };
                        var $8950 = $8952;
                    };
                    var $8948 = $8950;
                };
                var _chr$6 = $8948;
            };
            var $8946 = String$cons$(_chr$6, _name$4);
            return $8946;
        }));
        var $8945 = _name$3;
        return $8945;
    };
    const Fm$Name$from_bits = x0 => Fm$Name$from_bits$(x0);

    function Fm$Term$show$go$(_term$1, _path$2) {
        var self = Fm$Term$show$as_nat$(_term$1);
        switch (self._) {
            case 'Maybe.none':
                var self = _term$1;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $8957 = self.name;
                        var $8958 = self.indx;
                        var $8959 = Fm$Name$show$($8957);
                        var $8956 = $8959;
                        break;
                    case 'Fm.Term.ref':
                        var $8960 = self.name;
                        var _name$4 = Fm$Name$show$($8960);
                        var self = _path$2;
                        switch (self._) {
                            case 'Maybe.none':
                                var $8962 = _name$4;
                                var $8961 = $8962;
                                break;
                            case 'Maybe.some':
                                var $8963 = self.value;
                                var _path_val$6 = ((Bits$e + '1') + Fm$Path$to_bits$($8963));
                                var _path_str$7 = Nat$show$(Bits$to_nat$(_path_val$6));
                                var $8964 = String$flatten$(List$cons$(_name$4, List$cons$(Fm$color$("2", ("-" + _path_str$7)), List$nil)));
                                var $8961 = $8964;
                                break;
                        };
                        var $8956 = $8961;
                        break;
                    case 'Fm.Term.typ':
                        var $8965 = "Type";
                        var $8956 = $8965;
                        break;
                    case 'Fm.Term.all':
                        var $8966 = self.eras;
                        var $8967 = self.self;
                        var $8968 = self.name;
                        var $8969 = self.xtyp;
                        var $8970 = self.body;
                        var _eras$8 = $8966;
                        var _self$9 = Fm$Name$show$($8967);
                        var _name$10 = Fm$Name$show$($8968);
                        var _type$11 = Fm$Term$show$go$($8969, Fm$MPath$o$(_path$2));
                        var self = _eras$8;
                        if (self) {
                            var $8972 = "<";
                            var _open$12 = $8972;
                        } else {
                            var $8973 = "(";
                            var _open$12 = $8973;
                        };
                        var self = _eras$8;
                        if (self) {
                            var $8974 = ">";
                            var _clos$13 = $8974;
                        } else {
                            var $8975 = ")";
                            var _clos$13 = $8975;
                        };
                        var _body$14 = Fm$Term$show$go$($8970(Fm$Term$var$($8967, 0n))(Fm$Term$var$($8968, 0n)), Fm$MPath$i$(_path$2));
                        var $8971 = String$flatten$(List$cons$(_self$9, List$cons$(_open$12, List$cons$(_name$10, List$cons$(":", List$cons$(_type$11, List$cons$(_clos$13, List$cons$(" ", List$cons$(_body$14, List$nil)))))))));
                        var $8956 = $8971;
                        break;
                    case 'Fm.Term.lam':
                        var $8976 = self.name;
                        var $8977 = self.body;
                        var _name$5 = Fm$Name$show$($8976);
                        var _body$6 = Fm$Term$show$go$($8977(Fm$Term$var$($8976, 0n)), Fm$MPath$o$(_path$2));
                        var $8978 = String$flatten$(List$cons$("(", List$cons$(_name$5, List$cons$(") ", List$cons$(_body$6, List$nil)))));
                        var $8956 = $8978;
                        break;
                    case 'Fm.Term.app':
                        var $8979 = self.func;
                        var $8980 = self.argm;
                        var $8981 = Fm$Term$show$app$(_term$1, _path$2, List$nil);
                        var $8956 = $8981;
                        break;
                    case 'Fm.Term.let':
                        var $8982 = self.name;
                        var $8983 = self.expr;
                        var $8984 = self.body;
                        var _name$6 = Fm$Name$show$($8982);
                        var _expr$7 = Fm$Term$show$go$($8983, Fm$MPath$o$(_path$2));
                        var _body$8 = Fm$Term$show$go$($8984(Fm$Term$var$($8982, 0n)), Fm$MPath$i$(_path$2));
                        var $8985 = String$flatten$(List$cons$("let ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $8956 = $8985;
                        break;
                    case 'Fm.Term.def':
                        var $8986 = self.name;
                        var $8987 = self.expr;
                        var $8988 = self.body;
                        var _name$6 = Fm$Name$show$($8986);
                        var _expr$7 = Fm$Term$show$go$($8987, Fm$MPath$o$(_path$2));
                        var _body$8 = Fm$Term$show$go$($8988(Fm$Term$var$($8986, 0n)), Fm$MPath$i$(_path$2));
                        var $8989 = String$flatten$(List$cons$("def ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $8956 = $8989;
                        break;
                    case 'Fm.Term.ann':
                        var $8990 = self.done;
                        var $8991 = self.term;
                        var $8992 = self.type;
                        var _term$6 = Fm$Term$show$go$($8991, Fm$MPath$o$(_path$2));
                        var _type$7 = Fm$Term$show$go$($8992, Fm$MPath$i$(_path$2));
                        var $8993 = String$flatten$(List$cons$(_term$6, List$cons$("::", List$cons$(_type$7, List$nil))));
                        var $8956 = $8993;
                        break;
                    case 'Fm.Term.gol':
                        var $8994 = self.name;
                        var $8995 = self.dref;
                        var $8996 = self.verb;
                        var _name$6 = Fm$Name$show$($8994);
                        var $8997 = String$flatten$(List$cons$("?", List$cons$(_name$6, List$nil)));
                        var $8956 = $8997;
                        break;
                    case 'Fm.Term.hol':
                        var $8998 = self.path;
                        var $8999 = "_";
                        var $8956 = $8999;
                        break;
                    case 'Fm.Term.nat':
                        var $9000 = self.natx;
                        var $9001 = String$flatten$(List$cons$(Nat$show$($9000), List$nil));
                        var $8956 = $9001;
                        break;
                    case 'Fm.Term.chr':
                        var $9002 = self.chrx;
                        var $9003 = String$flatten$(List$cons$("\'", List$cons$(Fm$escape$char$($9002), List$cons$("\'", List$nil))));
                        var $8956 = $9003;
                        break;
                    case 'Fm.Term.str':
                        var $9004 = self.strx;
                        var $9005 = String$flatten$(List$cons$("\"", List$cons$(Fm$escape$($9004), List$cons$("\"", List$nil))));
                        var $8956 = $9005;
                        break;
                    case 'Fm.Term.cse':
                        var $9006 = self.path;
                        var $9007 = self.expr;
                        var $9008 = self.name;
                        var $9009 = self.with;
                        var $9010 = self.cses;
                        var $9011 = self.moti;
                        var _expr$9 = Fm$Term$show$go$($9007, Fm$MPath$o$(_path$2));
                        var _name$10 = Fm$Name$show$($9008);
                        var _wyth$11 = String$join$("", List$mapped$($9009, (_defn$11 => {
                            var self = _defn$11;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $9014 = self.file;
                                    var $9015 = self.code;
                                    var $9016 = self.orig;
                                    var $9017 = self.name;
                                    var $9018 = self.term;
                                    var $9019 = self.type;
                                    var $9020 = self.isct;
                                    var $9021 = self.arit;
                                    var $9022 = self.stat;
                                    var _name$21 = Fm$Name$show$($9017);
                                    var _type$22 = Fm$Term$show$go$($9019, Maybe$none);
                                    var _term$23 = Fm$Term$show$go$($9018, Maybe$none);
                                    var $9023 = String$flatten$(List$cons$(_name$21, List$cons$(": ", List$cons$(_type$22, List$cons$(" = ", List$cons$(_term$23, List$cons$(";", List$nil)))))));
                                    var $9013 = $9023;
                                    break;
                            };
                            return $9013;
                        })));
                        var _cses$12 = Map$to_list$($9010);
                        var _cses$13 = String$join$("", List$mapped$(_cses$12, (_x$13 => {
                            var _name$14 = Fm$Name$from_bits$(Pair$fst$(_x$13));
                            var _term$15 = Fm$Term$show$go$(Pair$snd$(_x$13), Maybe$none);
                            var $9024 = String$flatten$(List$cons$(_name$14, List$cons$(": ", List$cons$(_term$15, List$cons$("; ", List$nil)))));
                            return $9024;
                        })));
                        var self = $9011;
                        switch (self._) {
                            case 'Maybe.none':
                                var $9025 = "";
                                var _moti$14 = $9025;
                                break;
                            case 'Maybe.some':
                                var $9026 = self.value;
                                var $9027 = String$flatten$(List$cons$(": ", List$cons$(Fm$Term$show$go$($9026, Maybe$none), List$nil)));
                                var _moti$14 = $9027;
                                break;
                        };
                        var $9012 = String$flatten$(List$cons$("case ", List$cons$(_expr$9, List$cons$(" as ", List$cons$(_name$10, List$cons$(_wyth$11, List$cons$(" { ", List$cons$(_cses$13, List$cons$("}", List$cons$(_moti$14, List$nil))))))))));
                        var $8956 = $9012;
                        break;
                    case 'Fm.Term.ori':
                        var $9028 = self.orig;
                        var $9029 = self.expr;
                        var $9030 = Fm$Term$show$go$($9029, _path$2);
                        var $8956 = $9030;
                        break;
                };
                var $8955 = $8956;
                break;
            case 'Maybe.some':
                var $9031 = self.value;
                var $9032 = $9031;
                var $8955 = $9032;
                break;
        };
        return $8955;
    };
    const Fm$Term$show$go = x0 => x1 => Fm$Term$show$go$(x0, x1);

    function Fm$Term$show$(_term$1) {
        var $9033 = Fm$Term$show$go$(_term$1, Maybe$none);
        return $9033;
    };
    const Fm$Term$show = x0 => Fm$Term$show$(x0);

    function Fm$Defs$report$types$(_defs$1, _names$2) {
        var _types$3 = "";
        var _types$4 = (() => {
            var $9036 = _types$3;
            var $9037 = _names$2;
            let _types$5 = $9036;
            let _name$4;
            while ($9037._ === 'List.cons') {
                _name$4 = $9037.head;
                var self = Fm$get$(_name$4, _defs$1);
                switch (self._) {
                    case 'Maybe.none':
                        var $9038 = _types$5;
                        var $9036 = $9038;
                        break;
                    case 'Maybe.some':
                        var $9039 = self.value;
                        var self = $9039;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $9041 = self.file;
                                var $9042 = self.code;
                                var $9043 = self.orig;
                                var $9044 = self.name;
                                var $9045 = self.term;
                                var $9046 = self.type;
                                var $9047 = self.isct;
                                var $9048 = self.arit;
                                var $9049 = self.stat;
                                var $9050 = (_types$5 + (_name$4 + (": " + (Fm$Term$show$($9046) + "\u{a}"))));
                                var $9040 = $9050;
                                break;
                        };
                        var $9036 = $9040;
                        break;
                };
                _types$5 = $9036;
                $9037 = $9037.tail;
            }
            return _types$5;
        })();
        var $9034 = _types$4;
        return $9034;
    };
    const Fm$Defs$report$types = x0 => x1 => Fm$Defs$report$types$(x0, x1);

    function Map$keys$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'Map.new':
                var $9052 = _list$4;
                var $9051 = $9052;
                break;
            case 'Map.tie':
                var $9053 = self.val;
                var $9054 = self.lft;
                var $9055 = self.rgt;
                var self = $9053;
                switch (self._) {
                    case 'Maybe.none':
                        var $9057 = _list$4;
                        var _list0$8 = $9057;
                        break;
                    case 'Maybe.some':
                        var $9058 = self.value;
                        var $9059 = List$cons$(Bits$reverse$(_key$3), _list$4);
                        var _list0$8 = $9059;
                        break;
                };
                var _list1$9 = Map$keys$go$($9054, (_key$3 + '0'), _list0$8);
                var _list2$10 = Map$keys$go$($9055, (_key$3 + '1'), _list1$9);
                var $9056 = _list2$10;
                var $9051 = $9056;
                break;
        };
        return $9051;
    };
    const Map$keys$go = x0 => x1 => x2 => Map$keys$go$(x0, x1, x2);

    function Map$keys$(_xs$2) {
        var $9060 = List$reverse$(Map$keys$go$(_xs$2, Bits$e, List$nil));
        return $9060;
    };
    const Map$keys = x0 => Map$keys$(x0);

    function Fm$Error$relevant$(_errors$1, _got$2) {
        var self = _errors$1;
        switch (self._) {
            case 'List.nil':
                var $9062 = List$nil;
                var $9061 = $9062;
                break;
            case 'List.cons':
                var $9063 = self.head;
                var $9064 = self.tail;
                var self = $9063;
                switch (self._) {
                    case 'Fm.Error.type_mismatch':
                        var $9066 = self.origin;
                        var $9067 = self.expected;
                        var $9068 = self.detected;
                        var $9069 = self.context;
                        var $9070 = (!_got$2);
                        var _keep$5 = $9070;
                        break;
                    case 'Fm.Error.show_goal':
                        var $9071 = self.name;
                        var $9072 = self.dref;
                        var $9073 = self.verb;
                        var $9074 = self.goal;
                        var $9075 = self.context;
                        var $9076 = Bool$true;
                        var _keep$5 = $9076;
                        break;
                    case 'Fm.Error.waiting':
                        var $9077 = self.name;
                        var $9078 = Bool$false;
                        var _keep$5 = $9078;
                        break;
                    case 'Fm.Error.indirect':
                        var $9079 = self.name;
                        var $9080 = Bool$false;
                        var _keep$5 = $9080;
                        break;
                    case 'Fm.Error.patch':
                        var $9081 = self.path;
                        var $9082 = self.term;
                        var $9083 = Bool$false;
                        var _keep$5 = $9083;
                        break;
                    case 'Fm.Error.undefined_reference':
                        var $9084 = self.origin;
                        var $9085 = self.name;
                        var $9086 = (!_got$2);
                        var _keep$5 = $9086;
                        break;
                    case 'Fm.Error.cant_infer':
                        var $9087 = self.origin;
                        var $9088 = self.term;
                        var $9089 = self.context;
                        var $9090 = (!_got$2);
                        var _keep$5 = $9090;
                        break;
                };
                var self = $9063;
                switch (self._) {
                    case 'Fm.Error.type_mismatch':
                        var $9091 = self.origin;
                        var $9092 = self.expected;
                        var $9093 = self.detected;
                        var $9094 = self.context;
                        var $9095 = Bool$true;
                        var _got$6 = $9095;
                        break;
                    case 'Fm.Error.show_goal':
                        var $9096 = self.name;
                        var $9097 = self.dref;
                        var $9098 = self.verb;
                        var $9099 = self.goal;
                        var $9100 = self.context;
                        var $9101 = _got$2;
                        var _got$6 = $9101;
                        break;
                    case 'Fm.Error.waiting':
                        var $9102 = self.name;
                        var $9103 = _got$2;
                        var _got$6 = $9103;
                        break;
                    case 'Fm.Error.indirect':
                        var $9104 = self.name;
                        var $9105 = _got$2;
                        var _got$6 = $9105;
                        break;
                    case 'Fm.Error.patch':
                        var $9106 = self.path;
                        var $9107 = self.term;
                        var $9108 = _got$2;
                        var _got$6 = $9108;
                        break;
                    case 'Fm.Error.undefined_reference':
                        var $9109 = self.origin;
                        var $9110 = self.name;
                        var $9111 = Bool$true;
                        var _got$6 = $9111;
                        break;
                    case 'Fm.Error.cant_infer':
                        var $9112 = self.origin;
                        var $9113 = self.term;
                        var $9114 = self.context;
                        var $9115 = _got$2;
                        var _got$6 = $9115;
                        break;
                };
                var _tail$7 = Fm$Error$relevant$($9064, _got$6);
                var self = _keep$5;
                if (self) {
                    var $9116 = List$cons$($9063, _tail$7);
                    var $9065 = $9116;
                } else {
                    var $9117 = _tail$7;
                    var $9065 = $9117;
                };
                var $9061 = $9065;
                break;
        };
        return $9061;
    };
    const Fm$Error$relevant = x0 => x1 => Fm$Error$relevant$(x0, x1);

    function Fm$Context$show$(_context$1) {
        var self = _context$1;
        switch (self._) {
            case 'List.nil':
                var $9119 = "";
                var $9118 = $9119;
                break;
            case 'List.cons':
                var $9120 = self.head;
                var $9121 = self.tail;
                var self = $9120;
                switch (self._) {
                    case 'Pair.new':
                        var $9123 = self.fst;
                        var $9124 = self.snd;
                        var _name$6 = Fm$Name$show$($9123);
                        var _type$7 = Fm$Term$show$(Fm$Term$normalize$($9124, Map$new));
                        var _rest$8 = Fm$Context$show$($9121);
                        var $9125 = String$flatten$(List$cons$(_rest$8, List$cons$("- ", List$cons$(_name$6, List$cons$(": ", List$cons$(_type$7, List$cons$("\u{a}", List$nil)))))));
                        var $9122 = $9125;
                        break;
                };
                var $9118 = $9122;
                break;
        };
        return $9118;
    };
    const Fm$Context$show = x0 => Fm$Context$show$(x0);

    function Fm$Term$expand_at$(_path$1, _term$2, _defs$3) {
        var $9126 = Fm$Term$patch_at$(_path$1, _term$2, (_term$4 => {
            var self = _term$4;
            switch (self._) {
                case 'Fm.Term.var':
                    var $9128 = self.name;
                    var $9129 = self.indx;
                    var $9130 = _term$4;
                    var $9127 = $9130;
                    break;
                case 'Fm.Term.ref':
                    var $9131 = self.name;
                    var self = Fm$get$($9131, _defs$3);
                    switch (self._) {
                        case 'Maybe.none':
                            var $9133 = Fm$Term$ref$($9131);
                            var $9132 = $9133;
                            break;
                        case 'Maybe.some':
                            var $9134 = self.value;
                            var self = $9134;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $9136 = self.file;
                                    var $9137 = self.code;
                                    var $9138 = self.orig;
                                    var $9139 = self.name;
                                    var $9140 = self.term;
                                    var $9141 = self.type;
                                    var $9142 = self.isct;
                                    var $9143 = self.arit;
                                    var $9144 = self.stat;
                                    var $9145 = $9140;
                                    var $9135 = $9145;
                                    break;
                            };
                            var $9132 = $9135;
                            break;
                    };
                    var $9127 = $9132;
                    break;
                case 'Fm.Term.typ':
                    var $9146 = _term$4;
                    var $9127 = $9146;
                    break;
                case 'Fm.Term.all':
                    var $9147 = self.eras;
                    var $9148 = self.self;
                    var $9149 = self.name;
                    var $9150 = self.xtyp;
                    var $9151 = self.body;
                    var $9152 = _term$4;
                    var $9127 = $9152;
                    break;
                case 'Fm.Term.lam':
                    var $9153 = self.name;
                    var $9154 = self.body;
                    var $9155 = _term$4;
                    var $9127 = $9155;
                    break;
                case 'Fm.Term.app':
                    var $9156 = self.func;
                    var $9157 = self.argm;
                    var $9158 = _term$4;
                    var $9127 = $9158;
                    break;
                case 'Fm.Term.let':
                    var $9159 = self.name;
                    var $9160 = self.expr;
                    var $9161 = self.body;
                    var $9162 = _term$4;
                    var $9127 = $9162;
                    break;
                case 'Fm.Term.def':
                    var $9163 = self.name;
                    var $9164 = self.expr;
                    var $9165 = self.body;
                    var $9166 = _term$4;
                    var $9127 = $9166;
                    break;
                case 'Fm.Term.ann':
                    var $9167 = self.done;
                    var $9168 = self.term;
                    var $9169 = self.type;
                    var $9170 = _term$4;
                    var $9127 = $9170;
                    break;
                case 'Fm.Term.gol':
                    var $9171 = self.name;
                    var $9172 = self.dref;
                    var $9173 = self.verb;
                    var $9174 = _term$4;
                    var $9127 = $9174;
                    break;
                case 'Fm.Term.hol':
                    var $9175 = self.path;
                    var $9176 = _term$4;
                    var $9127 = $9176;
                    break;
                case 'Fm.Term.nat':
                    var $9177 = self.natx;
                    var $9178 = _term$4;
                    var $9127 = $9178;
                    break;
                case 'Fm.Term.chr':
                    var $9179 = self.chrx;
                    var $9180 = _term$4;
                    var $9127 = $9180;
                    break;
                case 'Fm.Term.str':
                    var $9181 = self.strx;
                    var $9182 = _term$4;
                    var $9127 = $9182;
                    break;
                case 'Fm.Term.cse':
                    var $9183 = self.path;
                    var $9184 = self.expr;
                    var $9185 = self.name;
                    var $9186 = self.with;
                    var $9187 = self.cses;
                    var $9188 = self.moti;
                    var $9189 = _term$4;
                    var $9127 = $9189;
                    break;
                case 'Fm.Term.ori':
                    var $9190 = self.orig;
                    var $9191 = self.expr;
                    var $9192 = _term$4;
                    var $9127 = $9192;
                    break;
            };
            return $9127;
        }));
        return $9126;
    };
    const Fm$Term$expand_at = x0 => x1 => x2 => Fm$Term$expand_at$(x0, x1, x2);

    function Fm$Term$expand_ct$(_term$1, _defs$2, _arity$3) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $9194 = self.name;
                var $9195 = self.indx;
                var $9196 = Fm$Term$var$($9194, $9195);
                var $9193 = $9196;
                break;
            case 'Fm.Term.ref':
                var $9197 = self.name;
                var self = Fm$get$($9197, _defs$2);
                switch (self._) {
                    case 'Maybe.none':
                        var $9199 = Fm$Term$ref$($9197);
                        var $9198 = $9199;
                        break;
                    case 'Maybe.some':
                        var $9200 = self.value;
                        var self = $9200;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $9202 = self.file;
                                var $9203 = self.code;
                                var $9204 = self.orig;
                                var $9205 = self.name;
                                var $9206 = self.term;
                                var $9207 = self.type;
                                var $9208 = self.isct;
                                var $9209 = self.arit;
                                var $9210 = self.stat;
                                var self = ($9208 && (_arity$3 > $9209));
                                if (self) {
                                    var $9212 = $9206;
                                    var $9211 = $9212;
                                } else {
                                    var $9213 = Fm$Term$ref$($9197);
                                    var $9211 = $9213;
                                };
                                var $9201 = $9211;
                                break;
                        };
                        var $9198 = $9201;
                        break;
                };
                var $9193 = $9198;
                break;
            case 'Fm.Term.typ':
                var $9214 = Fm$Term$typ;
                var $9193 = $9214;
                break;
            case 'Fm.Term.all':
                var $9215 = self.eras;
                var $9216 = self.self;
                var $9217 = self.name;
                var $9218 = self.xtyp;
                var $9219 = self.body;
                var $9220 = Fm$Term$all$($9215, $9216, $9217, Fm$Term$expand_ct$($9218, _defs$2, 0n), (_s$9 => _x$10 => {
                    var $9221 = Fm$Term$expand_ct$($9219(_s$9)(_x$10), _defs$2, 0n);
                    return $9221;
                }));
                var $9193 = $9220;
                break;
            case 'Fm.Term.lam':
                var $9222 = self.name;
                var $9223 = self.body;
                var $9224 = Fm$Term$lam$($9222, (_x$6 => {
                    var $9225 = Fm$Term$expand_ct$($9223(_x$6), _defs$2, 0n);
                    return $9225;
                }));
                var $9193 = $9224;
                break;
            case 'Fm.Term.app':
                var $9226 = self.func;
                var $9227 = self.argm;
                var $9228 = Fm$Term$app$(Fm$Term$expand_ct$($9226, _defs$2, Nat$succ$(_arity$3)), Fm$Term$expand_ct$($9227, _defs$2, 0n));
                var $9193 = $9228;
                break;
            case 'Fm.Term.let':
                var $9229 = self.name;
                var $9230 = self.expr;
                var $9231 = self.body;
                var $9232 = Fm$Term$let$($9229, Fm$Term$expand_ct$($9230, _defs$2, 0n), (_x$7 => {
                    var $9233 = Fm$Term$expand_ct$($9231(_x$7), _defs$2, 0n);
                    return $9233;
                }));
                var $9193 = $9232;
                break;
            case 'Fm.Term.def':
                var $9234 = self.name;
                var $9235 = self.expr;
                var $9236 = self.body;
                var $9237 = Fm$Term$def$($9234, Fm$Term$expand_ct$($9235, _defs$2, 0n), (_x$7 => {
                    var $9238 = Fm$Term$expand_ct$($9236(_x$7), _defs$2, 0n);
                    return $9238;
                }));
                var $9193 = $9237;
                break;
            case 'Fm.Term.ann':
                var $9239 = self.done;
                var $9240 = self.term;
                var $9241 = self.type;
                var $9242 = Fm$Term$ann$($9239, Fm$Term$expand_ct$($9240, _defs$2, 0n), Fm$Term$expand_ct$($9241, _defs$2, 0n));
                var $9193 = $9242;
                break;
            case 'Fm.Term.gol':
                var $9243 = self.name;
                var $9244 = self.dref;
                var $9245 = self.verb;
                var $9246 = Fm$Term$gol$($9243, $9244, $9245);
                var $9193 = $9246;
                break;
            case 'Fm.Term.hol':
                var $9247 = self.path;
                var $9248 = Fm$Term$hol$($9247);
                var $9193 = $9248;
                break;
            case 'Fm.Term.nat':
                var $9249 = self.natx;
                var $9250 = Fm$Term$nat$($9249);
                var $9193 = $9250;
                break;
            case 'Fm.Term.chr':
                var $9251 = self.chrx;
                var $9252 = Fm$Term$chr$($9251);
                var $9193 = $9252;
                break;
            case 'Fm.Term.str':
                var $9253 = self.strx;
                var $9254 = Fm$Term$str$($9253);
                var $9193 = $9254;
                break;
            case 'Fm.Term.cse':
                var $9255 = self.path;
                var $9256 = self.expr;
                var $9257 = self.name;
                var $9258 = self.with;
                var $9259 = self.cses;
                var $9260 = self.moti;
                var $9261 = _term$1;
                var $9193 = $9261;
                break;
            case 'Fm.Term.ori':
                var $9262 = self.orig;
                var $9263 = self.expr;
                var $9264 = Fm$Term$ori$($9262, $9263);
                var $9193 = $9264;
                break;
        };
        return $9193;
    };
    const Fm$Term$expand_ct = x0 => x1 => x2 => Fm$Term$expand_ct$(x0, x1, x2);

    function Fm$Term$expand$(_dref$1, _term$2, _defs$3) {
        var _term$4 = Fm$Term$normalize$(_term$2, Map$new);
        var _term$5 = (() => {
            var $9267 = _term$4;
            var $9268 = _dref$1;
            let _term$6 = $9267;
            let _path$5;
            while ($9268._ === 'List.cons') {
                _path$5 = $9268.head;
                var _term$7 = Fm$Term$expand_at$(_path$5, _term$6, _defs$3);
                var _term$8 = Fm$Term$normalize$(_term$7, Map$new);
                var _term$9 = Fm$Term$expand_ct$(_term$8, _defs$3, 0n);
                var _term$10 = Fm$Term$normalize$(_term$9, Map$new);
                var $9267 = _term$10;
                _term$6 = $9267;
                $9268 = $9268.tail;
            }
            return _term$6;
        })();
        var $9265 = _term$5;
        return $9265;
    };
    const Fm$Term$expand = x0 => x1 => x2 => Fm$Term$expand$(x0, x1, x2);

    function Fm$Error$show$(_error$1, _defs$2) {
        var self = _error$1;
        switch (self._) {
            case 'Fm.Error.type_mismatch':
                var $9270 = self.origin;
                var $9271 = self.expected;
                var $9272 = self.detected;
                var $9273 = self.context;
                var self = $9271;
                switch (self._) {
                    case 'Either.left':
                        var $9275 = self.value;
                        var $9276 = $9275;
                        var _expected$7 = $9276;
                        break;
                    case 'Either.right':
                        var $9277 = self.value;
                        var $9278 = Fm$Term$show$(Fm$Term$normalize$($9277, Map$new));
                        var _expected$7 = $9278;
                        break;
                };
                var self = $9272;
                switch (self._) {
                    case 'Either.left':
                        var $9279 = self.value;
                        var $9280 = $9279;
                        var _detected$8 = $9280;
                        break;
                    case 'Either.right':
                        var $9281 = self.value;
                        var $9282 = Fm$Term$show$(Fm$Term$normalize$($9281, Map$new));
                        var _detected$8 = $9282;
                        break;
                };
                var $9274 = String$flatten$(List$cons$("Type mismatch.\u{a}", List$cons$("- Expected: ", List$cons$(_expected$7, List$cons$("\u{a}", List$cons$("- Detected: ", List$cons$(_detected$8, List$cons$("\u{a}", List$cons$((() => {
                    var self = $9273;
                    switch (self._) {
                        case 'List.nil':
                            var $9283 = "";
                            return $9283;
                        case 'List.cons':
                            var $9284 = self.head;
                            var $9285 = self.tail;
                            var $9286 = String$flatten$(List$cons$("With context:\u{a}", List$cons$(Fm$Context$show$($9273), List$nil)));
                            return $9286;
                    };
                })(), List$nil)))))))));
                var $9269 = $9274;
                break;
            case 'Fm.Error.show_goal':
                var $9287 = self.name;
                var $9288 = self.dref;
                var $9289 = self.verb;
                var $9290 = self.goal;
                var $9291 = self.context;
                var _goal_name$8 = String$flatten$(List$cons$("Goal ?", List$cons$(Fm$Name$show$($9287), List$cons$(":\u{a}", List$nil))));
                var self = $9290;
                switch (self._) {
                    case 'Maybe.none':
                        var $9293 = "";
                        var _with_type$9 = $9293;
                        break;
                    case 'Maybe.some':
                        var $9294 = self.value;
                        var _goal$10 = Fm$Term$expand$($9288, $9294, _defs$2);
                        var $9295 = String$flatten$(List$cons$("With type: ", List$cons$((() => {
                            var self = $9289;
                            if (self) {
                                var $9296 = Fm$Term$show$go$(_goal$10, Maybe$some$((_x$11 => {
                                    var $9297 = _x$11;
                                    return $9297;
                                })));
                                return $9296;
                            } else {
                                var $9298 = Fm$Term$show$(_goal$10);
                                return $9298;
                            };
                        })(), List$cons$("\u{a}", List$nil))));
                        var _with_type$9 = $9295;
                        break;
                };
                var self = $9291;
                switch (self._) {
                    case 'List.nil':
                        var $9299 = "";
                        var _with_ctxt$10 = $9299;
                        break;
                    case 'List.cons':
                        var $9300 = self.head;
                        var $9301 = self.tail;
                        var $9302 = String$flatten$(List$cons$("With ctxt:\u{a}", List$cons$(Fm$Context$show$($9291), List$nil)));
                        var _with_ctxt$10 = $9302;
                        break;
                };
                var $9292 = String$flatten$(List$cons$(_goal_name$8, List$cons$(_with_type$9, List$cons$(_with_ctxt$10, List$nil))));
                var $9269 = $9292;
                break;
            case 'Fm.Error.waiting':
                var $9303 = self.name;
                var $9304 = String$flatten$(List$cons$("Waiting for \'", List$cons$($9303, List$cons$("\'.", List$nil))));
                var $9269 = $9304;
                break;
            case 'Fm.Error.indirect':
                var $9305 = self.name;
                var $9306 = String$flatten$(List$cons$("Error on dependency \'", List$cons$($9305, List$cons$("\'.", List$nil))));
                var $9269 = $9306;
                break;
            case 'Fm.Error.patch':
                var $9307 = self.path;
                var $9308 = self.term;
                var $9309 = String$flatten$(List$cons$("Patching: ", List$cons$(Fm$Term$show$($9308), List$nil)));
                var $9269 = $9309;
                break;
            case 'Fm.Error.undefined_reference':
                var $9310 = self.origin;
                var $9311 = self.name;
                var $9312 = String$flatten$(List$cons$("Undefined reference: ", List$cons$(Fm$Name$show$($9311), List$cons$("\u{a}", List$nil))));
                var $9269 = $9312;
                break;
            case 'Fm.Error.cant_infer':
                var $9313 = self.origin;
                var $9314 = self.term;
                var $9315 = self.context;
                var _term$6 = Fm$Term$show$($9314);
                var _context$7 = Fm$Context$show$($9315);
                var $9316 = String$flatten$(List$cons$("Can\'t infer type of: ", List$cons$(_term$6, List$cons$("\u{a}", List$cons$("With ctxt:\u{a}", List$cons$(_context$7, List$nil))))));
                var $9269 = $9316;
                break;
        };
        return $9269;
    };
    const Fm$Error$show = x0 => x1 => Fm$Error$show$(x0, x1);

    function Fm$Error$origin$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Fm.Error.type_mismatch':
                var $9318 = self.origin;
                var $9319 = self.expected;
                var $9320 = self.detected;
                var $9321 = self.context;
                var $9322 = $9318;
                var $9317 = $9322;
                break;
            case 'Fm.Error.show_goal':
                var $9323 = self.name;
                var $9324 = self.dref;
                var $9325 = self.verb;
                var $9326 = self.goal;
                var $9327 = self.context;
                var $9328 = Maybe$none;
                var $9317 = $9328;
                break;
            case 'Fm.Error.waiting':
                var $9329 = self.name;
                var $9330 = Maybe$none;
                var $9317 = $9330;
                break;
            case 'Fm.Error.indirect':
                var $9331 = self.name;
                var $9332 = Maybe$none;
                var $9317 = $9332;
                break;
            case 'Fm.Error.patch':
                var $9333 = self.path;
                var $9334 = self.term;
                var $9335 = Maybe$none;
                var $9317 = $9335;
                break;
            case 'Fm.Error.undefined_reference':
                var $9336 = self.origin;
                var $9337 = self.name;
                var $9338 = $9336;
                var $9317 = $9338;
                break;
            case 'Fm.Error.cant_infer':
                var $9339 = self.origin;
                var $9340 = self.term;
                var $9341 = self.context;
                var $9342 = $9339;
                var $9317 = $9342;
                break;
        };
        return $9317;
    };
    const Fm$Error$origin = x0 => Fm$Error$origin$(x0);

    function Fm$Defs$report$errors$(_defs$1) {
        var _errors$2 = "";
        var _errors$3 = (() => {
            var $9345 = _errors$2;
            var $9346 = Map$keys$(_defs$1);
            let _errors$4 = $9345;
            let _key$3;
            while ($9346._ === 'List.cons') {
                _key$3 = $9346.head;
                var _name$5 = Fm$Name$from_bits$(_key$3);
                var self = Fm$get$(_name$5, _defs$1);
                switch (self._) {
                    case 'Maybe.none':
                        var $9347 = _errors$4;
                        var $9345 = $9347;
                        break;
                    case 'Maybe.some':
                        var $9348 = self.value;
                        var self = $9348;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $9350 = self.file;
                                var $9351 = self.code;
                                var $9352 = self.orig;
                                var $9353 = self.name;
                                var $9354 = self.term;
                                var $9355 = self.type;
                                var $9356 = self.isct;
                                var $9357 = self.arit;
                                var $9358 = self.stat;
                                var self = $9358;
                                switch (self._) {
                                    case 'Fm.Status.init':
                                        var $9360 = _errors$4;
                                        var $9359 = $9360;
                                        break;
                                    case 'Fm.Status.wait':
                                        var $9361 = _errors$4;
                                        var $9359 = $9361;
                                        break;
                                    case 'Fm.Status.done':
                                        var $9362 = _errors$4;
                                        var $9359 = $9362;
                                        break;
                                    case 'Fm.Status.fail':
                                        var $9363 = self.errors;
                                        var self = $9363;
                                        switch (self._) {
                                            case 'List.nil':
                                                var $9365 = _errors$4;
                                                var $9364 = $9365;
                                                break;
                                            case 'List.cons':
                                                var $9366 = self.head;
                                                var $9367 = self.tail;
                                                var _name_str$19 = $9353;
                                                var _rel_errs$20 = Fm$Error$relevant$($9363, Bool$false);
                                                var _errors$21 = (() => {
                                                    var $9370 = _errors$4;
                                                    var $9371 = _rel_errs$20;
                                                    let _errors$22 = $9370;
                                                    let _err$21;
                                                    while ($9371._ === 'List.cons') {
                                                        _err$21 = $9371.head;
                                                        var _err_msg$23 = Fm$Error$show$(_err$21, _defs$1);
                                                        var self = Fm$Error$origin$(_err$21);
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var $9372 = _errors$22;
                                                                var _ori_msg$24 = $9372;
                                                                break;
                                                            case 'Maybe.some':
                                                                var $9373 = self.value;
                                                                var self = $9373;
                                                                switch (self._) {
                                                                    case 'Pair.new':
                                                                        var $9375 = self.fst;
                                                                        var $9376 = self.snd;
                                                                        var _inside$27 = ("Inside \'" + ($9350 + "\':\u{a}"));
                                                                        var _source$28 = Fm$highlight$($9351, $9375, $9376);
                                                                        var $9377 = (_inside$27 + _source$28);
                                                                        var $9374 = $9377;
                                                                        break;
                                                                };
                                                                var _ori_msg$24 = $9374;
                                                                break;
                                                        };
                                                        var $9370 = (_errors$22 + (_err_msg$23 + (_ori_msg$24 + "\u{a}\u{a}")));
                                                        _errors$22 = $9370;
                                                        $9371 = $9371.tail;
                                                    }
                                                    return _errors$22;
                                                })();
                                                var $9368 = _errors$21;
                                                var $9364 = $9368;
                                                break;
                                        };
                                        var $9359 = $9364;
                                        break;
                                };
                                var $9349 = $9359;
                                break;
                        };
                        var $9345 = $9349;
                        break;
                };
                _errors$4 = $9345;
                $9346 = $9346.tail;
            }
            return _errors$4;
        })();
        var $9343 = _errors$3;
        return $9343;
    };
    const Fm$Defs$report$errors = x0 => Fm$Defs$report$errors$(x0);

    function Fm$Defs$report$(_defs$1, _names$2) {
        var _types$3 = Fm$Defs$report$types$(_defs$1, _names$2);
        var _errors$4 = Fm$Defs$report$errors$(_defs$1);
        var self = _errors$4;
        if (self.length === 0) {
            var $9379 = "All terms check.";
            var _errors$5 = $9379;
        } else {
            var $9380 = self.charCodeAt(0);
            var $9381 = self.slice(1);
            var $9382 = _errors$4;
            var _errors$5 = $9382;
        };
        var $9378 = (_types$3 + ("\u{a}" + _errors$5));
        return $9378;
    };
    const Fm$Defs$report = x0 => x1 => Fm$Defs$report$(x0, x1);

    function Fm$checker$io$one$(_name$1) {
        var $9383 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $9384 = _m$bind$2;
            return $9384;
        }))(Fm$Synth$one$(_name$1, Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.none':
                    var $9386 = IO$print$(Fm$Defs$report$(Map$new, List$cons$(_name$1, List$nil)));
                    var $9385 = $9386;
                    break;
                case 'Maybe.some':
                    var $9387 = self.value;
                    var $9388 = IO$print$(Fm$Defs$report$($9387, List$cons$(_name$1, List$nil)));
                    var $9385 = $9388;
                    break;
            };
            return $9385;
        }));
        return $9383;
    };
    const Fm$checker$io$one = x0 => Fm$checker$io$one$(x0);

    function Fm$Synth$many$(_names$1, _defs$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.nil':
                var $9390 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $9391 = _m$pure$4;
                    return $9391;
                }))(_defs$2);
                var $9389 = $9390;
                break;
            case 'List.cons':
                var $9392 = self.head;
                var $9393 = self.tail;
                var $9394 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $9395 = _m$bind$5;
                    return $9395;
                }))(Fm$Synth$one$($9392, _defs$2))((_new_defs$5 => {
                    var self = _new_defs$5;
                    switch (self._) {
                        case 'Maybe.none':
                            var $9397 = Fm$Synth$many$($9393, _defs$2);
                            var $9396 = $9397;
                            break;
                        case 'Maybe.some':
                            var $9398 = self.value;
                            var $9399 = Fm$Synth$many$($9393, $9398);
                            var $9396 = $9399;
                            break;
                    };
                    return $9396;
                }));
                var $9389 = $9394;
                break;
        };
        return $9389;
    };
    const Fm$Synth$many = x0 => x1 => Fm$Synth$many$(x0, x1);

    function Fm$Synth$file$(_file$1, _defs$2) {
        var $9400 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $9401 = _m$bind$3;
            return $9401;
        }))(IO$get_file$(_file$1))((_code$3 => {
            var _read$4 = Fm$Defs$read$(_file$1, _code$3, _defs$2);
            var self = _read$4;
            switch (self._) {
                case 'Either.left':
                    var $9403 = self.value;
                    var $9404 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                        var $9405 = _m$pure$7;
                        return $9405;
                    }))(Either$left$($9403));
                    var $9402 = $9404;
                    break;
                case 'Either.right':
                    var $9406 = self.value;
                    var _file_defs$6 = $9406;
                    var _file_keys$7 = Map$keys$(_file_defs$6);
                    var _file_nams$8 = List$mapped$(_file_keys$7, Fm$Name$from_bits);
                    var $9407 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                        var $9408 = _m$bind$9;
                        return $9408;
                    }))(Fm$Synth$many$(_file_nams$8, _file_defs$6))((_defs$9 => {
                        var $9409 = IO$monad$((_m$bind$10 => _m$pure$11 => {
                            var $9410 = _m$pure$11;
                            return $9410;
                        }))(Either$right$(Pair$new$(_file_nams$8, _defs$9)));
                        return $9409;
                    }));
                    var $9402 = $9407;
                    break;
            };
            return $9402;
        }));
        return $9400;
    };
    const Fm$Synth$file = x0 => x1 => Fm$Synth$file$(x0, x1);

    function Fm$checker$io$file$(_file$1) {
        var $9411 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $9412 = _m$bind$2;
            return $9412;
        }))(Fm$Synth$file$(_file$1, Map$new))((_loaded$2 => {
            var self = _loaded$2;
            switch (self._) {
                case 'Either.left':
                    var $9414 = self.value;
                    var $9415 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $9416 = _m$bind$4;
                        return $9416;
                    }))(IO$print$(String$flatten$(List$cons$("On \'", List$cons$(_file$1, List$cons$("\':", List$nil))))))((_$4 => {
                        var $9417 = IO$print$($9414);
                        return $9417;
                    }));
                    var $9413 = $9415;
                    break;
                case 'Either.right':
                    var $9418 = self.value;
                    var self = $9418;
                    switch (self._) {
                        case 'Pair.new':
                            var $9420 = self.fst;
                            var $9421 = self.snd;
                            var _nams$6 = $9420;
                            var _defs$7 = $9421;
                            var $9422 = IO$print$(Fm$Defs$report$(_defs$7, _nams$6));
                            var $9419 = $9422;
                            break;
                    };
                    var $9413 = $9419;
                    break;
            };
            return $9413;
        }));
        return $9411;
    };
    const Fm$checker$io$file = x0 => Fm$checker$io$file$(x0);

    function IO$purify$(_io$2) {
        var IO$purify$ = (_io$2) => ({
            ctr: 'TCO',
            arg: [_io$2]
        });
        var IO$purify = _io$2 => IO$purify$(_io$2);
        var arg = [_io$2];
        while (true) {
            let [_io$2] = arg;
            var R = (() => {
                var self = _io$2;
                switch (self._) {
                    case 'IO.end':
                        var $9423 = self.value;
                        var $9424 = $9423;
                        return $9424;
                    case 'IO.ask':
                        var $9425 = self.query;
                        var $9426 = self.param;
                        var $9427 = self.then;
                        var $9428 = IO$purify$($9427(""));
                        return $9428;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const IO$purify = x0 => IO$purify$(x0);

    function Fm$checker$code$(_code$1) {
        var self = Fm$Defs$read$("Main.fm", _code$1, Map$new);
        switch (self._) {
            case 'Either.left':
                var $9430 = self.value;
                var $9431 = $9430;
                var $9429 = $9431;
                break;
            case 'Either.right':
                var $9432 = self.value;
                var $9433 = IO$purify$((() => {
                    var _defs$3 = $9432;
                    var _nams$4 = List$mapped$(Map$keys$(_defs$3), Fm$Name$from_bits);
                    var $9434 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                        var $9435 = _m$bind$5;
                        return $9435;
                    }))(Fm$Synth$many$(_nams$4, _defs$3))((_defs$5 => {
                        var $9436 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                            var $9437 = _m$pure$7;
                            return $9437;
                        }))(Fm$Defs$report$(_defs$5, _nams$4));
                        return $9436;
                    }));
                    return $9434;
                })());
                var $9429 = $9433;
                break;
        };
        return $9429;
    };
    const Fm$checker$code = x0 => Fm$checker$code$(x0);

    function Fm$Term$read$(_code$1) {
        var self = Fm$Parser$term$(0n, _code$1);
        switch (self._) {
            case 'Parser.Reply.error':
                var $9439 = self.idx;
                var $9440 = self.code;
                var $9441 = self.err;
                var $9442 = Maybe$none;
                var $9438 = $9442;
                break;
            case 'Parser.Reply.value':
                var $9443 = self.idx;
                var $9444 = self.code;
                var $9445 = self.val;
                var $9446 = Maybe$some$($9445);
                var $9438 = $9446;
                break;
        };
        return $9438;
    };
    const Fm$Term$read = x0 => Fm$Term$read$(x0);
    const Fm = (() => {
        var __$1 = Fm$to_core$io$one;
        var __$2 = Fm$checker$io$one;
        var __$3 = Fm$checker$io$file;
        var __$4 = Fm$checker$code;
        var __$5 = Fm$Term$read;
        var $9447 = IO$monad$((_m$bind$6 => _m$pure$7 => {
            var $9448 = _m$pure$7;
            return $9448;
        }))(Unit$new);
        return $9447;
    })();
    return {
        '$main$': () => run(Fm),
        'run': run,
        'IO': IO,
        'IO.ask': IO$ask,
        'IO.bind': IO$bind,
        'IO.end': IO$end,
        'IO.monad': IO$monad,
        'Maybe': Maybe,
        'Map': Map,
        'Maybe.none': Maybe$none,
        'Map.get': Map$get,
        'Bits.e': Bits$e,
        'Bool.false': Bool$false,
        'Bool.and': Bool$and,
        'Bool.true': Bool$true,
        'Cmp.as_lte': Cmp$as_lte,
        'Cmp.ltn': Cmp$ltn,
        'Cmp.gtn': Cmp$gtn,
        'Word.cmp.go': Word$cmp$go,
        'Cmp.eql': Cmp$eql,
        'Word.cmp': Word$cmp,
        'Word.lte': Word$lte,
        'Nat.succ': Nat$succ,
        'Nat.zero': Nat$zero,
        'U16.lte': U16$lte,
        'U16.btw': U16$btw,
        'U16.new': U16$new,
        'Word.e': Word$e,
        'Word': Word,
        'Word.i': Word$i,
        'Word.o': Word$o,
        'Word.subber': Word$subber,
        'Word.sub': Word$sub,
        'U16.sub': U16$sub,
        'Nat.apply': Nat$apply,
        'Word.inc': Word$inc,
        'U16.inc': U16$inc,
        'Word.zero': Word$zero,
        'U16.zero': U16$zero,
        'Nat.to_u16': Nat$to_u16,
        'Word.adder': Word$adder,
        'Word.add': Word$add,
        'U16.add': U16$add,
        'Cmp.as_eql': Cmp$as_eql,
        'Word.eql': Word$eql,
        'U16.eql': U16$eql,
        'Bits.o': Bits$o,
        'Bits.i': Bits$i,
        'Word.to_bits': Word$to_bits,
        'Word.trim': Word$trim,
        'Bits.concat': Bits$concat,
        'Bits.reverse.tco': Bits$reverse$tco,
        'Bits.reverse': Bits$reverse,
        'Fm.Name.to_bits': Fm$Name$to_bits,
        'Fm.get': Fm$get,
        'IO.get_file': IO$get_file,
        'Parser.Reply': Parser$Reply,
        'Parser.Reply.value': Parser$Reply$value,
        'Parser.is_eof': Parser$is_eof,
        'Parser.Reply.error': Parser$Reply$error,
        'Parser': Parser,
        'Maybe.some': Maybe$some,
        'Parser.ErrorAt.new': Parser$ErrorAt$new,
        'Nat.gtn': Nat$gtn,
        'Parser.ErrorAt.combine': Parser$ErrorAt$combine,
        'Parser.first_of.go': Parser$first_of$go,
        'Parser.first_of': Parser$first_of,
        'List.cons': List$cons,
        'List': List,
        'List.nil': List$nil,
        'Parser.many.go': Parser$many$go,
        'Parser.many': Parser$many,
        'Unit.new': Unit$new,
        'String.cons': String$cons,
        'String.concat': String$concat,
        'String.flatten.go': String$flatten$go,
        'String.flatten': String$flatten,
        'String.nil': String$nil,
        'Parser.text.go': Parser$text$go,
        'Parser.text': Parser$text,
        'Parser.until.go': Parser$until$go,
        'Parser.until': Parser$until,
        'Parser.one': Parser$one,
        'Fm.Parser.spaces': Fm$Parser$spaces,
        'Parser.get_index': Parser$get_index,
        'Fm.Parser.init': Fm$Parser$init,
        'Parser.many1': Parser$many1,
        'Fm.Name.is_letter': Fm$Name$is_letter,
        'Fm.Parser.letter': Fm$Parser$letter,
        'List.fold': List$fold,
        'Fm.Parser.name1': Fm$Parser$name1,
        'Fm.Parser.text': Fm$Parser$text,
        'Parser.until1': Parser$until1,
        'Pair': Pair,
        'Parser.maybe': Parser$maybe,
        'Fm.Parser.item': Fm$Parser$item,
        'Fm.Parser.name': Fm$Parser$name,
        'Pair.new': Pair$new,
        'Fm.Parser.stop': Fm$Parser$stop,
        'Fm.Term.ori': Fm$Term$ori,
        'Fm.Term.typ': Fm$Term$typ,
        'Fm.Parser.type': Fm$Parser$type,
        'Fm.Term.all': Fm$Term$all,
        'Fm.Parser.forall': Fm$Parser$forall,
        'Fm.Term.lam': Fm$Term$lam,
        'Fm.Parser.make_lambda': Fm$Parser$make_lambda,
        'Fm.Parser.lambda': Fm$Parser$lambda,
        'Fm.Parser.lambda.erased': Fm$Parser$lambda$erased,
        'Fm.Parser.lambda.nameless': Fm$Parser$lambda$nameless,
        'Fm.Parser.parenthesis': Fm$Parser$parenthesis,
        'Fm.Term.ref': Fm$Term$ref,
        'Fm.Term.app': Fm$Term$app,
        'Fm.Term.hol': Fm$Term$hol,
        'Fm.Term.let': Fm$Term$let,
        'Fm.Parser.letforrange.u32': Fm$Parser$letforrange$u32,
        'Fm.Parser.letforin': Fm$Parser$letforin,
        'Fm.Parser.let': Fm$Parser$let,
        'Fm.Parser.get': Fm$Parser$get,
        'Fm.Term.def': Fm$Term$def,
        'Fm.Parser.def': Fm$Parser$def,
        'Fm.Parser.if': Fm$Parser$if,
        'List.mapped': List$mapped,
        'Fm.backslash': Fm$backslash,
        'Fm.escapes': Fm$escapes,
        'Fm.Parser.char.single': Fm$Parser$char$single,
        'Fm.Term.chr': Fm$Term$chr,
        'Fm.Parser.char': Fm$Parser$char,
        'Fm.Term.str': Fm$Term$str,
        'Fm.Parser.string': Fm$Parser$string,
        'Fm.Parser.pair': Fm$Parser$pair,
        'Fm.Parser.sigma.type': Fm$Parser$sigma$type,
        'Fm.Parser.some': Fm$Parser$some,
        'Fm.Parser.apply': Fm$Parser$apply,
        'Fm.Parser.mirror': Fm$Parser$mirror,
        'Fm.Name.read': Fm$Name$read,
        'Fm.Parser.list': Fm$Parser$list,
        'Fm.Parser.log': Fm$Parser$log,
        'Fm.Parser.forrange.u32': Fm$Parser$forrange$u32,
        'Fm.Parser.forrange.u32.2': Fm$Parser$forrange$u32$2,
        'Fm.Parser.forin': Fm$Parser$forin,
        'Fm.Parser.forin.2': Fm$Parser$forin$2,
        'Fm.Parser.do.statements': Fm$Parser$do$statements,
        'Fm.Parser.do': Fm$Parser$do,
        'Fm.Term.nat': Fm$Term$nat,
        'Fm.Term.unroll_nat': Fm$Term$unroll_nat,
        'U16.to_bits': U16$to_bits,
        'Fm.Term.unroll_chr.bits': Fm$Term$unroll_chr$bits,
        'Fm.Term.unroll_chr': Fm$Term$unroll_chr,
        'Fm.Term.unroll_str': Fm$Term$unroll_str,
        'Fm.Term.reduce': Fm$Term$reduce,
        'Map.new': Map$new,
        'Fm.Def.new': Fm$Def$new,
        'Fm.Status.init': Fm$Status$init,
        'Fm.Parser.case.with': Fm$Parser$case$with,
        'Fm.Parser.case.case': Fm$Parser$case$case,
        'Map.tie': Map$tie,
        'Map.set': Map$set,
        'Map.from_list': Map$from_list,
        'Pair.fst': Pair$fst,
        'Pair.snd': Pair$snd,
        'Fm.Term.cse': Fm$Term$cse,
        'Fm.Parser.case': Fm$Parser$case,
        'Fm.set': Fm$set,
        'Fm.Parser.open': Fm$Parser$open,
        'Parser.digit': Parser$digit,
        'Nat.add': Nat$add,
        'Nat.mul': Nat$mul,
        'Nat.from_base.go': Nat$from_base$go,
        'List.reverse.go': List$reverse$go,
        'List.reverse': List$reverse,
        'Nat.from_base': Nat$from_base,
        'Parser.nat': Parser$nat,
        'Bits.tail': Bits$tail,
        'Bits.inc': Bits$inc,
        'Nat.to_bits': Nat$to_bits,
        'Maybe.to_bool': Maybe$to_bool,
        'Fm.Term.gol': Fm$Term$gol,
        'Fm.Parser.goal': Fm$Parser$goal,
        'Fm.Parser.hole': Fm$Parser$hole,
        'Fm.Parser.u8': Fm$Parser$u8,
        'Fm.Parser.u16': Fm$Parser$u16,
        'Fm.Parser.u32': Fm$Parser$u32,
        'Fm.Parser.u64': Fm$Parser$u64,
        'Fm.Parser.nat': Fm$Parser$nat,
        'String.eql': String$eql,
        'Parser.fail': Parser$fail,
        'Fm.Parser.reference': Fm$Parser$reference,
        'List.for': List$for,
        'Fm.Parser.application': Fm$Parser$application,
        'Parser.spaces': Parser$spaces,
        'Parser.spaces_text': Parser$spaces_text,
        'Fm.Parser.application.erased': Fm$Parser$application$erased,
        'Fm.Parser.arrow': Fm$Parser$arrow,
        'Fm.Parser.op': Fm$Parser$op,
        'Fm.Parser.add': Fm$Parser$add,
        'Fm.Parser.sub': Fm$Parser$sub,
        'Fm.Parser.mul': Fm$Parser$mul,
        'Fm.Parser.div': Fm$Parser$div,
        'Fm.Parser.mod': Fm$Parser$mod,
        'Fm.Parser.cons': Fm$Parser$cons,
        'Fm.Parser.concat': Fm$Parser$concat,
        'Fm.Parser.string_concat': Fm$Parser$string_concat,
        'Fm.Parser.sigma': Fm$Parser$sigma,
        'Fm.Parser.equality': Fm$Parser$equality,
        'Fm.Parser.inequality': Fm$Parser$inequality,
        'Fm.Parser.rewrite': Fm$Parser$rewrite,
        'Fm.Term.ann': Fm$Term$ann,
        'Fm.Parser.annotation': Fm$Parser$annotation,
        'Fm.Parser.application.hole': Fm$Parser$application$hole,
        'Fm.Parser.suffix': Fm$Parser$suffix,
        'Fm.Parser.term': Fm$Parser$term,
        'Fm.Parser.name_term': Fm$Parser$name_term,
        'Fm.Binder.new': Fm$Binder$new,
        'Fm.Parser.binder.homo': Fm$Parser$binder$homo,
        'List.concat': List$concat,
        'List.flatten': List$flatten,
        'Fm.Parser.binder': Fm$Parser$binder,
        'List.length': List$length,
        'Fm.Parser.make_forall': Fm$Parser$make_forall,
        'List.at': List$at,
        'List.at_last': List$at_last,
        'Fm.Term.var': Fm$Term$var,
        'Fm.Context.get_name_skips': Fm$Context$get_name_skips,
        'Fm.Name.eql': Fm$Name$eql,
        'Fm.Context.find.go': Fm$Context$find$go,
        'Fm.Context.find': Fm$Context$find,
        'Fm.Path.o': Fm$Path$o,
        'Fm.Path.i': Fm$Path$i,
        'Fm.Path.to_bits': Fm$Path$to_bits,
        'Fm.Term.bind': Fm$Term$bind,
        'Fm.Status.done': Fm$Status$done,
        'Fm.define': Fm$define,
        'Fm.Parser.file.def': Fm$Parser$file$def,
        'Maybe.default': Maybe$default,
        'Fm.Constructor.new': Fm$Constructor$new,
        'Fm.Parser.constructor': Fm$Parser$constructor,
        'Fm.Datatype.new': Fm$Datatype$new,
        'Fm.Parser.datatype': Fm$Parser$datatype,
        'Fm.Datatype.build_term.motive.go': Fm$Datatype$build_term$motive$go,
        'Fm.Datatype.build_term.motive': Fm$Datatype$build_term$motive,
        'Fm.Datatype.build_term.constructor.go': Fm$Datatype$build_term$constructor$go,
        'Fm.Datatype.build_term.constructor': Fm$Datatype$build_term$constructor,
        'Fm.Datatype.build_term.constructors.go': Fm$Datatype$build_term$constructors$go,
        'Fm.Datatype.build_term.constructors': Fm$Datatype$build_term$constructors,
        'Fm.Datatype.build_term.go': Fm$Datatype$build_term$go,
        'Fm.Datatype.build_term': Fm$Datatype$build_term,
        'Fm.Datatype.build_type.go': Fm$Datatype$build_type$go,
        'Fm.Datatype.build_type': Fm$Datatype$build_type,
        'Fm.Constructor.build_term.opt.go': Fm$Constructor$build_term$opt$go,
        'Fm.Constructor.build_term.opt': Fm$Constructor$build_term$opt,
        'Fm.Constructor.build_term.go': Fm$Constructor$build_term$go,
        'Fm.Constructor.build_term': Fm$Constructor$build_term,
        'Fm.Constructor.build_type.go': Fm$Constructor$build_type$go,
        'Fm.Constructor.build_type': Fm$Constructor$build_type,
        'Fm.Parser.file.adt': Fm$Parser$file$adt,
        'Parser.eof': Parser$eof,
        'Fm.Parser.file.end': Fm$Parser$file$end,
        'Fm.Parser.file': Fm$Parser$file,
        'Either': Either,
        'String.join.go': String$join$go,
        'String.join': String$join,
        'Fm.highlight.end': Fm$highlight$end,
        'Maybe.extract': Maybe$extract,
        'Nat.is_zero': Nat$is_zero,
        'Nat.double': Nat$double,
        'Nat.pred': Nat$pred,
        'String.reverse.go': String$reverse$go,
        'String.reverse': String$reverse,
        'String.pad_right': String$pad_right,
        'String.pad_left': String$pad_left,
        'Either.left': Either$left,
        'Either.right': Either$right,
        'Nat.sub_rem': Nat$sub_rem,
        'Nat.div_mod.go': Nat$div_mod$go,
        'Nat.div_mod': Nat$div_mod,
        'Nat.to_base.go': Nat$to_base$go,
        'Nat.to_base': Nat$to_base,
        'Nat.mod.go': Nat$mod$go,
        'Nat.mod': Nat$mod,
        'Nat.lte': Nat$lte,
        'Nat.show_digit': Nat$show_digit,
        'Nat.to_string_base': Nat$to_string_base,
        'Nat.show': Nat$show,
        'Bool.not': Bool$not,
        'Fm.color': Fm$color,
        'Nat.eql': Nat$eql,
        'List.take': List$take,
        'Fm.highlight.tc': Fm$highlight$tc,
        'Fm.highlight': Fm$highlight,
        'Fm.Defs.read': Fm$Defs$read,
        'Fm.Synth.load.go': Fm$Synth$load$go,
        'Fm.Synth.files_of.make': Fm$Synth$files_of$make,
        'Char.eql': Char$eql,
        'String.starts_with': String$starts_with,
        'String.drop': String$drop,
        'String.length.go': String$length$go,
        'String.length': String$length,
        'String.split.go': String$split$go,
        'String.split': String$split,
        'Fm.Synth.files_of': Fm$Synth$files_of,
        'Fm.Synth.load': Fm$Synth$load,
        'Fm.Status.wait': Fm$Status$wait,
        'Fm.Check': Fm$Check,
        'Fm.Check.result': Fm$Check$result,
        'Fm.Error.undefined_reference': Fm$Error$undefined_reference,
        'Fm.Error.waiting': Fm$Error$waiting,
        'Fm.Error.indirect': Fm$Error$indirect,
        'Maybe.mapped': Maybe$mapped,
        'Fm.MPath.o': Fm$MPath$o,
        'Fm.MPath.i': Fm$MPath$i,
        'Fm.Error.patch': Fm$Error$patch,
        'Fm.MPath.to_bits': Fm$MPath$to_bits,
        'Fm.Error.type_mismatch': Fm$Error$type_mismatch,
        'Fm.Error.show_goal': Fm$Error$show_goal,
        'Fm.Term.normalize': Fm$Term$normalize,
        'List.tail': List$tail,
        'Fm.SmartMotive.vals.cont': Fm$SmartMotive$vals$cont,
        'Fm.SmartMotive.vals': Fm$SmartMotive$vals,
        'Fm.SmartMotive.nams.cont': Fm$SmartMotive$nams$cont,
        'Fm.SmartMotive.nams': Fm$SmartMotive$nams,
        'List.zip': List$zip,
        'Nat.gte': Nat$gte,
        'Nat.sub': Nat$sub,
        'Fm.Term.serialize.name': Fm$Term$serialize$name,
        'Fm.Term.serialize': Fm$Term$serialize,
        'Bits.eql': Bits$eql,
        'Fm.Term.identical': Fm$Term$identical,
        'Fm.SmartMotive.replace': Fm$SmartMotive$replace,
        'Fm.SmartMotive.make': Fm$SmartMotive$make,
        'Fm.Term.desugar_cse.motive': Fm$Term$desugar_cse$motive,
        'String.is_empty': String$is_empty,
        'Fm.Term.desugar_cse.argument': Fm$Term$desugar_cse$argument,
        'Maybe.or': Maybe$or,
        'Fm.Term.desugar_cse.cases': Fm$Term$desugar_cse$cases,
        'Fm.Term.desugar_cse': Fm$Term$desugar_cse,
        'Fm.Error.cant_infer': Fm$Error$cant_infer,
        'Set.has': Set$has,
        'Bool.or': Bool$or,
        'Fm.Term.has_holes': Fm$Term$has_holes,
        'Fm.Term.equal.hole': Fm$Term$equal$hole,
        'Fm.Term.equal.extra_holes': Fm$Term$equal$extra_holes,
        'Set.set': Set$set,
        'Bool.eql': Bool$eql,
        'Fm.Term.equal': Fm$Term$equal,
        'Set.new': Set$new,
        'Fm.Term.check': Fm$Term$check,
        'Fm.Path.nil': Fm$Path$nil,
        'Fm.MPath.nil': Fm$MPath$nil,
        'List.is_empty': List$is_empty,
        'Fm.Term.patch_at': Fm$Term$patch_at,
        'Fm.Synth.fix': Fm$Synth$fix,
        'Fm.Status.fail': Fm$Status$fail,
        'Fm.Synth.one': Fm$Synth$one,
        'Map.map': Map$map,
        'Fm.Term.inline.names': Fm$Term$inline$names,
        'Fm.Term.inline.reduce': Fm$Term$inline$reduce,
        'Fm.Term.inline': Fm$Term$inline,
        'Map.values.go': Map$values$go,
        'Map.values': Map$values,
        'Fm.Core.var_name': Fm$Core$var_name,
        'Fm.Name.show': Fm$Name$show,
        'Bits.to_nat': Bits$to_nat,
        'U16.show_hex': U16$show_hex,
        'Fm.escape.char': Fm$escape$char,
        'Fm.escape': Fm$escape,
        'Fm.Core.show': Fm$Core$show,
        'Fm.Defs.core': Fm$Defs$core,
        'Fm.to_core.io.one': Fm$to_core$io$one,
        'IO.print': IO$print,
        'Maybe.bind': Maybe$bind,
        'Maybe.monad': Maybe$monad,
        'Fm.Term.show.as_nat.go': Fm$Term$show$as_nat$go,
        'Fm.Term.show.as_nat': Fm$Term$show$as_nat,
        'Fm.Term.show.is_ref': Fm$Term$show$is_ref,
        'Fm.Term.show.app.done': Fm$Term$show$app$done,
        'Fm.Term.show.app': Fm$Term$show$app,
        'Map.to_list.go': Map$to_list$go,
        'Map.to_list': Map$to_list,
        'Bits.chunks_of.go': Bits$chunks_of$go,
        'Bits.chunks_of': Bits$chunks_of,
        'Word.from_bits': Word$from_bits,
        'Fm.Name.from_bits': Fm$Name$from_bits,
        'Fm.Term.show.go': Fm$Term$show$go,
        'Fm.Term.show': Fm$Term$show,
        'Fm.Defs.report.types': Fm$Defs$report$types,
        'Map.keys.go': Map$keys$go,
        'Map.keys': Map$keys,
        'Fm.Error.relevant': Fm$Error$relevant,
        'Fm.Context.show': Fm$Context$show,
        'Fm.Term.expand_at': Fm$Term$expand_at,
        'Fm.Term.expand_ct': Fm$Term$expand_ct,
        'Fm.Term.expand': Fm$Term$expand,
        'Fm.Error.show': Fm$Error$show,
        'Fm.Error.origin': Fm$Error$origin,
        'Fm.Defs.report.errors': Fm$Defs$report$errors,
        'Fm.Defs.report': Fm$Defs$report,
        'Fm.checker.io.one': Fm$checker$io$one,
        'Fm.Synth.many': Fm$Synth$many,
        'Fm.Synth.file': Fm$Synth$file,
        'Fm.checker.io.file': Fm$checker$io$file,
        'IO.purify': IO$purify,
        'Fm.checker.code': Fm$checker$code,
        'Fm.Term.read': Fm$Term$read,
        'Fm': Fm,
    };
})();