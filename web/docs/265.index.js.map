{"version":3,"sources":["webpack://kind-web/./src/apps/App.Syntax.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+QAA+Q,GAAG;AAClR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA,2GAA2G,GAAG;AAC9G;AACA,aAAa;AACb,4GAA4G,GAAG,KAAK,GAAG;AACvH;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,6HAA6H,GAAG;AAChI;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,I","file":"265.index.js","sourcesContent":["module.exports = (function() {\n    function int_pos(i) {\n        return i >= 0n ? i : 0n;\n    };\n\n    function int_neg(i) {\n        return i < 0n ? -i : 0n;\n    };\n\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    var list_for = list => nil => cons => {\n        while (list._ !== 'List.nil') {\n            nil = cons(list.head)(nil);\n            list = list.tail;\n        }\n        return nil;\n    };\n    const inst_unit = x => x(null);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c0;\n                return $2;\n            } else {\n                var $3 = c1;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c0;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c1($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_int = x => x(x0 => x1 => x0 - x1);\n    const elim_int = (x => {\n        var $12 = (() => c0 => {\n            var self = x;\n            switch (\"new\") {\n                case 'new':\n                    var $9 = int_pos(self);\n                    var $10 = int_neg(self);\n                    var $11 = c0($9)($10);\n                    return $11;\n            };\n        })();\n        return $12;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $15 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $13 = u16_to_word(self);\n                    var $14 = c0($13);\n                    return $14;\n            };\n        })();\n        return $15;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $18 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $16 = u32_to_word(self);\n                    var $17 = c0($16);\n                    return $17;\n            };\n        })();\n        return $18;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $21 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $19 = u64_to_word(self);\n                    var $20 = c0($19);\n                    return $20;\n            };\n        })();\n        return $21;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $26 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $22 = c0;\n                return $22;\n            } else {\n                var $23 = self.charCodeAt(0);\n                var $24 = self.slice(1);\n                var $25 = c1($23)($24);\n                return $25;\n            };\n        })();\n        return $26;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $30 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $27 = buffer32_to_depth(self);\n                    var $28 = buffer32_to_u32array(self);\n                    var $29 = c0($27)($28);\n                    return $29;\n            };\n        })();\n        return $30;\n    });\n\n    function App$new$(_init$2, _draw$3, _when$4, _tick$5, _post$6) {\n        var $31 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4,\n            'tick': _tick$5,\n            'post': _post$6\n        });\n        return $31;\n    };\n    const App$new = x0 => x1 => x2 => x3 => x4 => App$new$(x0, x1, x2, x3, x4);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $32 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $32;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n    const App$State$new = Pair$new$(null, null);\n    const App$Syntax$State = App$State$new;\n\n    function App$Store$new$(_local$2, _global$3) {\n        var $33 = ({\n            _: 'App.Store.new',\n            'local': _local$2,\n            'global': _global$3\n        });\n        return $33;\n    };\n    const App$Store$new = x0 => x1 => App$Store$new$(x0, x1);\n    const Unit$new = null;\n    const App$Syntax$init = App$Store$new$(Unit$new, Unit$new);\n\n    function List$cons$(_head$2, _tail$3) {\n        var $34 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $34;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function Pair$(_A$1, _B$2) {\n        var $35 = null;\n        return $35;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n    const Nat$zero = 0n;\n\n    function Nat$succ$(_pred$1) {\n        var $36 = 1n + _pred$1;\n        return $36;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Int$new = a0 => a1 => (a0 - a1);\n    const Int$from_nat = a0 => (a0);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function BBL$(_K$1, _V$2) {\n        var $37 = null;\n        return $37;\n    };\n    const BBL = x0 => x1 => BBL$(x0, x1);\n\n    function Pair$fst$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $39 = self.fst;\n                var $40 = $39;\n                var $38 = $40;\n                break;\n        };\n        return $38;\n    };\n    const Pair$fst = x0 => Pair$fst$(x0);\n\n    function Pair$snd$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $42 = self.snd;\n                var $43 = $42;\n                var $41 = $43;\n                break;\n        };\n        return $41;\n    };\n    const Pair$snd = x0 => Pair$snd$(x0);\n\n    function BBL$bin$(_size$3, _key$4, _val$5, _left$6, _right$7) {\n        var $44 = ({\n            _: 'BBL.bin',\n            'size': _size$3,\n            'key': _key$4,\n            'val': _val$5,\n            'left': _left$6,\n            'right': _right$7\n        });\n        return $44;\n    };\n    const BBL$bin = x0 => x1 => x2 => x3 => x4 => BBL$bin$(x0, x1, x2, x3, x4);\n\n    function U32$new$(_value$1) {\n        var $45 = word_to_u32(_value$1);\n        return $45;\n    };\n    const U32$new = x0 => U32$new$(x0);\n\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _f$3, _x$4]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [_n$2, _f$3, _x$4];\n        while (true) {\n            let [_n$2, _f$3, _x$4] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $46 = _x$4;\n                    return $46;\n                } else {\n                    var $47 = (self - 1n);\n                    var $48 = Nat$apply$($47, _f$3, _f$3(_x$4));\n                    return $48;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n\n    function Word$(_size$1) {\n        var $49 = null;\n        return $49;\n    };\n    const Word = x0 => Word$(x0);\n    const Word$e = ({\n        _: 'Word.e'\n    });\n\n    function Word$i$(_pred$2) {\n        var $50 = ({\n            _: 'Word.i',\n            'pred': _pred$2\n        });\n        return $50;\n    };\n    const Word$i = x0 => Word$i$(x0);\n\n    function Word$o$(_pred$2) {\n        var $51 = ({\n            _: 'Word.o',\n            'pred': _pred$2\n        });\n        return $51;\n    };\n    const Word$o = x0 => Word$o$(x0);\n\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $53 = self.pred;\n                var $54 = Word$i$($53);\n                var $52 = $54;\n                break;\n            case 'Word.i':\n                var $55 = self.pred;\n                var $56 = Word$o$(Word$inc$($55));\n                var $52 = $56;\n                break;\n            case 'Word.e':\n                var $57 = Word$e;\n                var $52 = $57;\n                break;\n        };\n        return $52;\n    };\n    const Word$inc = x0 => Word$inc$(x0);\n\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $59 = Word$e;\n            var $58 = $59;\n        } else {\n            var $60 = (self - 1n);\n            var $61 = Word$o$(Word$zero$($60));\n            var $58 = $61;\n        };\n        return $58;\n    };\n    const Word$zero = x0 => Word$zero$(x0);\n\n    function Nat$to_word$(_size$1, _n$2) {\n        var $62 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));\n        return $62;\n    };\n    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);\n    const Nat$to_u32 = a0 => (Number(a0) >>> 0);\n    const BBL$tip = ({\n        _: 'BBL.tip'\n    });\n\n    function BBL$singleton$(_key$3, _val$4) {\n        var $63 = BBL$bin$(1, _key$3, _val$4, BBL$tip, BBL$tip);\n        return $63;\n    };\n    const BBL$singleton = x0 => x1 => BBL$singleton$(x0, x1);\n\n    function BBL$size$(_map$3) {\n        var self = _map$3;\n        switch (self._) {\n            case 'BBL.bin':\n                var $65 = self.size;\n                var $66 = $65;\n                var $64 = $66;\n                break;\n            case 'BBL.tip':\n                var $67 = 0;\n                var $64 = $67;\n                break;\n        };\n        return $64;\n    };\n    const BBL$size = x0 => BBL$size$(x0);\n    const Bool$false = false;\n    const Bool$true = true;\n\n    function Word$adder$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $69 = self.pred;\n                var $70 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $72 = self.pred;\n                            var $73 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $75 = Word$i$(Word$adder$(_a$pred$10, $72, Bool$false));\n                                    var $74 = $75;\n                                } else {\n                                    var $76 = Word$o$(Word$adder$(_a$pred$10, $72, Bool$false));\n                                    var $74 = $76;\n                                };\n                                return $74;\n                            });\n                            var $71 = $73;\n                            break;\n                        case 'Word.i':\n                            var $77 = self.pred;\n                            var $78 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $80 = Word$o$(Word$adder$(_a$pred$10, $77, Bool$true));\n                                    var $79 = $80;\n                                } else {\n                                    var $81 = Word$i$(Word$adder$(_a$pred$10, $77, Bool$false));\n                                    var $79 = $81;\n                                };\n                                return $79;\n                            });\n                            var $71 = $78;\n                            break;\n                        case 'Word.e':\n                            var $82 = (_a$pred$8 => {\n                                var $83 = Word$e;\n                                return $83;\n                            });\n                            var $71 = $82;\n                            break;\n                    };\n                    var $71 = $71($69);\n                    return $71;\n                });\n                var $68 = $70;\n                break;\n            case 'Word.i':\n                var $84 = self.pred;\n                var $85 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $87 = self.pred;\n                            var $88 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $90 = Word$o$(Word$adder$(_a$pred$10, $87, Bool$true));\n                                    var $89 = $90;\n                                } else {\n                                    var $91 = Word$i$(Word$adder$(_a$pred$10, $87, Bool$false));\n                                    var $89 = $91;\n                                };\n                                return $89;\n                            });\n                            var $86 = $88;\n                            break;\n                        case 'Word.i':\n                            var $92 = self.pred;\n                            var $93 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $95 = Word$i$(Word$adder$(_a$pred$10, $92, Bool$true));\n                                    var $94 = $95;\n                                } else {\n                                    var $96 = Word$o$(Word$adder$(_a$pred$10, $92, Bool$true));\n                                    var $94 = $96;\n                                };\n                                return $94;\n                            });\n                            var $86 = $93;\n                            break;\n                        case 'Word.e':\n                            var $97 = (_a$pred$8 => {\n                                var $98 = Word$e;\n                                return $98;\n                            });\n                            var $86 = $97;\n                            break;\n                    };\n                    var $86 = $86($84);\n                    return $86;\n                });\n                var $68 = $85;\n                break;\n            case 'Word.e':\n                var $99 = (_b$5 => {\n                    var $100 = Word$e;\n                    return $100;\n                });\n                var $68 = $99;\n                break;\n        };\n        var $68 = $68(_b$3);\n        return $68;\n    };\n    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);\n\n    function Word$add$(_a$2, _b$3) {\n        var $101 = Word$adder$(_a$2, _b$3, Bool$false);\n        return $101;\n    };\n    const Word$add = x0 => x1 => Word$add$(x0, x1);\n    const U32$add = a0 => a1 => ((a0 + a1) >>> 0);\n\n    function Word$shift_left$one$go$(_word$2, _prev$3) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $103 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $105 = Word$i$(Word$shift_left$one$go$($103, Bool$false));\n                    var $104 = $105;\n                } else {\n                    var $106 = Word$o$(Word$shift_left$one$go$($103, Bool$false));\n                    var $104 = $106;\n                };\n                var $102 = $104;\n                break;\n            case 'Word.i':\n                var $107 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $109 = Word$i$(Word$shift_left$one$go$($107, Bool$true));\n                    var $108 = $109;\n                } else {\n                    var $110 = Word$o$(Word$shift_left$one$go$($107, Bool$true));\n                    var $108 = $110;\n                };\n                var $102 = $108;\n                break;\n            case 'Word.e':\n                var $111 = Word$e;\n                var $102 = $111;\n                break;\n        };\n        return $102;\n    };\n    const Word$shift_left$one$go = x0 => x1 => Word$shift_left$one$go$(x0, x1);\n\n    function Word$shift_left$one$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $113 = self.pred;\n                var $114 = Word$o$(Word$shift_left$one$go$($113, Bool$false));\n                var $112 = $114;\n                break;\n            case 'Word.i':\n                var $115 = self.pred;\n                var $116 = Word$o$(Word$shift_left$one$go$($115, Bool$true));\n                var $112 = $116;\n                break;\n            case 'Word.e':\n                var $117 = Word$e;\n                var $112 = $117;\n                break;\n        };\n        return $112;\n    };\n    const Word$shift_left$one = x0 => Word$shift_left$one$(x0);\n\n    function Word$shift_left$(_n$2, _value$3) {\n        var Word$shift_left$ = (_n$2, _value$3) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _value$3]\n        });\n        var Word$shift_left = _n$2 => _value$3 => Word$shift_left$(_n$2, _value$3);\n        var arg = [_n$2, _value$3];\n        while (true) {\n            let [_n$2, _value$3] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $118 = _value$3;\n                    return $118;\n                } else {\n                    var $119 = (self - 1n);\n                    var $120 = Word$shift_left$($119, Word$shift_left$one$(_value$3));\n                    return $120;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$shift_left = x0 => x1 => Word$shift_left$(x0, x1);\n\n    function Word$mul$go$(_a$3, _b$4, _acc$5) {\n        var Word$mul$go$ = (_a$3, _b$4, _acc$5) => ({\n            ctr: 'TCO',\n            arg: [_a$3, _b$4, _acc$5]\n        });\n        var Word$mul$go = _a$3 => _b$4 => _acc$5 => Word$mul$go$(_a$3, _b$4, _acc$5);\n        var arg = [_a$3, _b$4, _acc$5];\n        while (true) {\n            let [_a$3, _b$4, _acc$5] = arg;\n            var R = (() => {\n                var self = _a$3;\n                switch (self._) {\n                    case 'Word.o':\n                        var $121 = self.pred;\n                        var $122 = Word$mul$go$($121, Word$shift_left$(1n, _b$4), _acc$5);\n                        return $122;\n                    case 'Word.i':\n                        var $123 = self.pred;\n                        var $124 = Word$mul$go$($123, Word$shift_left$(1n, _b$4), Word$add$(_b$4, _acc$5));\n                        return $124;\n                    case 'Word.e':\n                        var $125 = _acc$5;\n                        return $125;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mul$go = x0 => x1 => x2 => Word$mul$go$(x0, x1, x2);\n\n    function Word$to_zero$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $127 = self.pred;\n                var $128 = Word$o$(Word$to_zero$($127));\n                var $126 = $128;\n                break;\n            case 'Word.i':\n                var $129 = self.pred;\n                var $130 = Word$o$(Word$to_zero$($129));\n                var $126 = $130;\n                break;\n            case 'Word.e':\n                var $131 = Word$e;\n                var $126 = $131;\n                break;\n        };\n        return $126;\n    };\n    const Word$to_zero = x0 => Word$to_zero$(x0);\n\n    function Word$mul$(_a$2, _b$3) {\n        var $132 = Word$mul$go$(_a$2, _b$3, Word$to_zero$(_a$2));\n        return $132;\n    };\n    const Word$mul = x0 => x1 => Word$mul$(x0, x1);\n    const U32$mul = a0 => a1 => ((a0 * a1) >>> 0);\n    const BBL$w = 3;\n\n    function Cmp$as_ltn$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $134 = Bool$true;\n                var $133 = $134;\n                break;\n            case 'Cmp.eql':\n            case 'Cmp.gtn':\n                var $135 = Bool$false;\n                var $133 = $135;\n                break;\n        };\n        return $133;\n    };\n    const Cmp$as_ltn = x0 => Cmp$as_ltn$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $137 = self.pred;\n                var $138 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $140 = self.pred;\n                            var $141 = (_a$pred$10 => {\n                                var $142 = Word$cmp$go$(_a$pred$10, $140, _c$4);\n                                return $142;\n                            });\n                            var $139 = $141;\n                            break;\n                        case 'Word.i':\n                            var $143 = self.pred;\n                            var $144 = (_a$pred$10 => {\n                                var $145 = Word$cmp$go$(_a$pred$10, $143, Cmp$ltn);\n                                return $145;\n                            });\n                            var $139 = $144;\n                            break;\n                        case 'Word.e':\n                            var $146 = (_a$pred$8 => {\n                                var $147 = _c$4;\n                                return $147;\n                            });\n                            var $139 = $146;\n                            break;\n                    };\n                    var $139 = $139($137);\n                    return $139;\n                });\n                var $136 = $138;\n                break;\n            case 'Word.i':\n                var $148 = self.pred;\n                var $149 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $151 = self.pred;\n                            var $152 = (_a$pred$10 => {\n                                var $153 = Word$cmp$go$(_a$pred$10, $151, Cmp$gtn);\n                                return $153;\n                            });\n                            var $150 = $152;\n                            break;\n                        case 'Word.i':\n                            var $154 = self.pred;\n                            var $155 = (_a$pred$10 => {\n                                var $156 = Word$cmp$go$(_a$pred$10, $154, _c$4);\n                                return $156;\n                            });\n                            var $150 = $155;\n                            break;\n                        case 'Word.e':\n                            var $157 = (_a$pred$8 => {\n                                var $158 = _c$4;\n                                return $158;\n                            });\n                            var $150 = $157;\n                            break;\n                    };\n                    var $150 = $150($148);\n                    return $150;\n                });\n                var $136 = $149;\n                break;\n            case 'Word.e':\n                var $159 = (_b$5 => {\n                    var $160 = _c$4;\n                    return $160;\n                });\n                var $136 = $159;\n                break;\n        };\n        var $136 = $136(_b$3);\n        return $136;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $161 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $161;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$ltn$(_a$2, _b$3) {\n        var $162 = Cmp$as_ltn$(Word$cmp$(_a$2, _b$3));\n        return $162;\n    };\n    const Word$ltn = x0 => x1 => Word$ltn$(x0, x1);\n    const U32$ltn = a0 => a1 => (a0 < a1);\n    const U32$from_nat = a0 => (Number(a0) >>> 0);\n\n    function BBL$node$(_key$3, _val$4, _left$5, _right$6) {\n        var _size_left$7 = BBL$size$(_left$5);\n        var _size_right$8 = BBL$size$(_right$6);\n        var _new_size$9 = ((1 + ((_size_left$7 + _size_right$8) >>> 0)) >>> 0);\n        var $163 = BBL$bin$(_new_size$9, _key$3, _val$4, _left$5, _right$6);\n        return $163;\n    };\n    const BBL$node = x0 => x1 => x2 => x3 => BBL$node$(x0, x1, x2, x3);\n\n    function Cmp$as_gtn$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.eql':\n                var $165 = Bool$false;\n                var $164 = $165;\n                break;\n            case 'Cmp.gtn':\n                var $166 = Bool$true;\n                var $164 = $166;\n                break;\n        };\n        return $164;\n    };\n    const Cmp$as_gtn = x0 => Cmp$as_gtn$(x0);\n\n    function Word$gtn$(_a$2, _b$3) {\n        var $167 = Cmp$as_gtn$(Word$cmp$(_a$2, _b$3));\n        return $167;\n    };\n    const Word$gtn = x0 => x1 => Word$gtn$(x0, x1);\n    const U32$gtn = a0 => a1 => (a0 > a1);\n\n    function BBL$balance$(_k$3, _v$4, _l$5, _r$6) {\n        var _size_l$7 = BBL$size$(_l$5);\n        var _size_r$8 = BBL$size$(_r$6);\n        var _size_l_plus_size_r$9 = ((_size_l$7 + _size_r$8) >>> 0);\n        var _w_x_size_l$10 = ((BBL$w * _size_l$7) >>> 0);\n        var _w_x_size_r$11 = ((BBL$w * _size_r$8) >>> 0);\n        var self = (_size_l_plus_size_r$9 < 2);\n        if (self) {\n            var $169 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n            var $168 = $169;\n        } else {\n            var self = (_size_r$8 > _w_x_size_l$10);\n            if (self) {\n                var self = _r$6;\n                switch (self._) {\n                    case 'BBL.bin':\n                        var $172 = self.key;\n                        var $173 = self.val;\n                        var $174 = self.left;\n                        var $175 = self.right;\n                        var _size_rl$17 = BBL$size$($174);\n                        var _size_rr$18 = BBL$size$($175);\n                        var self = (_size_rl$17 < _size_rr$18);\n                        if (self) {\n                            var _new_key$19 = $172;\n                            var _new_val$20 = $173;\n                            var _new_left$21 = BBL$node$(_k$3, _v$4, _l$5, $174);\n                            var _new_right$22 = $175;\n                            var $177 = BBL$node$(_new_key$19, _new_val$20, _new_left$21, _new_right$22);\n                            var $176 = $177;\n                        } else {\n                            var self = $174;\n                            switch (self._) {\n                                case 'BBL.bin':\n                                    var $179 = self.key;\n                                    var $180 = self.val;\n                                    var $181 = self.left;\n                                    var $182 = self.right;\n                                    var _new_key$24 = $179;\n                                    var _new_val$25 = $180;\n                                    var _new_left$26 = BBL$node$(_k$3, _v$4, _l$5, $181);\n                                    var _new_right$27 = BBL$node$($172, $173, $182, $175);\n                                    var $183 = BBL$node$(_new_key$24, _new_val$25, _new_left$26, _new_right$27);\n                                    var $178 = $183;\n                                    break;\n                                case 'BBL.tip':\n                                    var $184 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                                    var $178 = $184;\n                                    break;\n                            };\n                            var $176 = $178;\n                        };\n                        var $171 = $176;\n                        break;\n                    case 'BBL.tip':\n                        var $185 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                        var $171 = $185;\n                        break;\n                };\n                var $170 = $171;\n            } else {\n                var self = (_size_l$7 > _w_x_size_r$11);\n                if (self) {\n                    var self = _l$5;\n                    switch (self._) {\n                        case 'BBL.bin':\n                            var $188 = self.key;\n                            var $189 = self.val;\n                            var $190 = self.left;\n                            var $191 = self.right;\n                            var _size_ll$17 = BBL$size$($190);\n                            var _size_lr$18 = BBL$size$($191);\n                            var self = (_size_lr$18 < _size_ll$17);\n                            if (self) {\n                                var _new_key$19 = $188;\n                                var _new_val$20 = $189;\n                                var _new_left$21 = $190;\n                                var _new_right$22 = BBL$node$(_k$3, _v$4, $191, _r$6);\n                                var $193 = BBL$node$(_new_key$19, _new_val$20, _new_left$21, _new_right$22);\n                                var $192 = $193;\n                            } else {\n                                var self = $191;\n                                switch (self._) {\n                                    case 'BBL.bin':\n                                        var $195 = self.key;\n                                        var $196 = self.val;\n                                        var $197 = self.left;\n                                        var $198 = self.right;\n                                        var _new_key$24 = $195;\n                                        var _new_val$25 = $196;\n                                        var _new_left$26 = BBL$node$($188, $189, $190, $197);\n                                        var _new_right$27 = BBL$node$(_k$3, _v$4, $198, _r$6);\n                                        var $199 = BBL$node$(_new_key$24, _new_val$25, _new_left$26, _new_right$27);\n                                        var $194 = $199;\n                                        break;\n                                    case 'BBL.tip':\n                                        var $200 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                                        var $194 = $200;\n                                        break;\n                                };\n                                var $192 = $194;\n                            };\n                            var $187 = $192;\n                            break;\n                        case 'BBL.tip':\n                            var $201 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                            var $187 = $201;\n                            break;\n                    };\n                    var $186 = $187;\n                } else {\n                    var $202 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                    var $186 = $202;\n                };\n                var $170 = $186;\n            };\n            var $168 = $170;\n        };\n        return $168;\n    };\n    const BBL$balance = x0 => x1 => x2 => x3 => BBL$balance$(x0, x1, x2, x3);\n\n    function BBL$insert$(_cmp$3, _key$4, _val$5, _map$6) {\n        var self = _map$6;\n        switch (self._) {\n            case 'BBL.bin':\n                var $204 = self.key;\n                var $205 = self.val;\n                var $206 = self.left;\n                var $207 = self.right;\n                var self = _cmp$3(_key$4)($204);\n                switch (self._) {\n                    case 'Cmp.ltn':\n                        var _new_key$12 = $204;\n                        var _new_val$13 = $205;\n                        var _new_left$14 = BBL$insert$(_cmp$3, _key$4, _val$5, $206);\n                        var _new_right$15 = $207;\n                        var $209 = BBL$balance$(_new_key$12, _new_val$13, _new_left$14, _new_right$15);\n                        var $208 = $209;\n                        break;\n                    case 'Cmp.eql':\n                        var $210 = BBL$node$(_key$4, _val$5, $206, $207);\n                        var $208 = $210;\n                        break;\n                    case 'Cmp.gtn':\n                        var _new_key$12 = $204;\n                        var _new_val$13 = $205;\n                        var _new_left$14 = $206;\n                        var _new_right$15 = BBL$insert$(_cmp$3, _key$4, _val$5, $207);\n                        var $211 = BBL$balance$(_new_key$12, _new_val$13, _new_left$14, _new_right$15);\n                        var $208 = $211;\n                        break;\n                };\n                var $203 = $208;\n                break;\n            case 'BBL.tip':\n                var $212 = BBL$singleton$(_key$4, _val$5);\n                var $203 = $212;\n                break;\n        };\n        return $203;\n    };\n    const BBL$insert = x0 => x1 => x2 => x3 => BBL$insert$(x0, x1, x2, x3);\n\n    function BBL$from_list$go$(_cmp$3, _acc$4, _xs$5) {\n        var BBL$from_list$go$ = (_cmp$3, _acc$4, _xs$5) => ({\n            ctr: 'TCO',\n            arg: [_cmp$3, _acc$4, _xs$5]\n        });\n        var BBL$from_list$go = _cmp$3 => _acc$4 => _xs$5 => BBL$from_list$go$(_cmp$3, _acc$4, _xs$5);\n        var arg = [_cmp$3, _acc$4, _xs$5];\n        while (true) {\n            let [_cmp$3, _acc$4, _xs$5] = arg;\n            var R = (() => {\n                var self = _xs$5;\n                switch (self._) {\n                    case 'List.cons':\n                        var $213 = self.head;\n                        var $214 = self.tail;\n                        var _key$8 = Pair$fst$($213);\n                        var _val$9 = Pair$snd$($213);\n                        var _new_acc$10 = BBL$insert$(_cmp$3, _key$8, _val$9, _acc$4);\n                        var $215 = BBL$from_list$go$(_cmp$3, _new_acc$10, $214);\n                        return $215;\n                    case 'List.nil':\n                        var $216 = _acc$4;\n                        return $216;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const BBL$from_list$go = x0 => x1 => x2 => BBL$from_list$go$(x0, x1, x2);\n\n    function BBL$from_list$(_cmp$3, _xs$4) {\n        var $217 = BBL$from_list$go$(_cmp$3, BBL$tip, _xs$4);\n        return $217;\n    };\n    const BBL$from_list = x0 => x1 => BBL$from_list$(x0, x1);\n    const U16$ltn = a0 => a1 => (a0 < a1);\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $219 = Bool$false;\n                var $218 = $219;\n                break;\n            case 'Cmp.eql':\n                var $220 = Bool$true;\n                var $218 = $220;\n                break;\n        };\n        return $218;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $221 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $221;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n    const U16$eql = a0 => a1 => (a0 === a1);\n\n    function U16$cmp$(_a$1, _b$2) {\n        var self = (_a$1 < _b$2);\n        if (self) {\n            var $223 = Cmp$ltn;\n            var $222 = $223;\n        } else {\n            var self = (_a$1 === _b$2);\n            if (self) {\n                var $225 = Cmp$eql;\n                var $224 = $225;\n            } else {\n                var $226 = Cmp$gtn;\n                var $224 = $226;\n            };\n            var $222 = $224;\n        };\n        return $222;\n    };\n    const U16$cmp = x0 => x1 => U16$cmp$(x0, x1);\n\n    function String$cmp$(_a$1, _b$2) {\n        var String$cmp$ = (_a$1, _b$2) => ({\n            ctr: 'TCO',\n            arg: [_a$1, _b$2]\n        });\n        var String$cmp = _a$1 => _b$2 => String$cmp$(_a$1, _b$2);\n        var arg = [_a$1, _b$2];\n        while (true) {\n            let [_a$1, _b$2] = arg;\n            var R = (() => {\n                var self = _a$1;\n                if (self.length === 0) {\n                    var self = _b$2;\n                    if (self.length === 0) {\n                        var $228 = Cmp$eql;\n                        var $227 = $228;\n                    } else {\n                        var $229 = self.charCodeAt(0);\n                        var $230 = self.slice(1);\n                        var $231 = Cmp$ltn;\n                        var $227 = $231;\n                    };\n                    return $227;\n                } else {\n                    var $232 = self.charCodeAt(0);\n                    var $233 = self.slice(1);\n                    var self = _b$2;\n                    if (self.length === 0) {\n                        var $235 = Cmp$gtn;\n                        var $234 = $235;\n                    } else {\n                        var $236 = self.charCodeAt(0);\n                        var $237 = self.slice(1);\n                        var self = U16$cmp$($232, $236);\n                        switch (self._) {\n                            case 'Cmp.ltn':\n                                var $239 = Cmp$ltn;\n                                var $238 = $239;\n                                break;\n                            case 'Cmp.eql':\n                                var $240 = String$cmp$($233, $237);\n                                var $238 = $240;\n                                break;\n                            case 'Cmp.gtn':\n                                var $241 = Cmp$gtn;\n                                var $238 = $241;\n                                break;\n                        };\n                        var $234 = $238;\n                    };\n                    return $234;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$cmp = x0 => x1 => String$cmp$(x0, x1);\n\n    function Map$from_list$(_xs$2) {\n        var $242 = BBL$from_list$(String$cmp, _xs$2);\n        return $242;\n    };\n    const Map$from_list = x0 => Map$from_list$(x0);\n\n    function DOM$node$(_tag$1, _props$2, _style$3, _children$4) {\n        var $243 = ({\n            _: 'DOM.node',\n            'tag': _tag$1,\n            'props': _props$2,\n            'style': _style$3,\n            'children': _children$4\n        });\n        return $243;\n    };\n    const DOM$node = x0 => x1 => x2 => x3 => DOM$node$(x0, x1, x2, x3);\n    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));\n\n    function List$(_A$1) {\n        var $244 = null;\n        return $244;\n    };\n    const List = x0 => List$(x0);\n\n    function List$concat$(_as$2, _bs$3) {\n        var self = _as$2;\n        switch (self._) {\n            case 'List.cons':\n                var $246 = self.head;\n                var $247 = self.tail;\n                var $248 = List$cons$($246, List$concat$($247, _bs$3));\n                var $245 = $248;\n                break;\n            case 'List.nil':\n                var $249 = _bs$3;\n                var $245 = $249;\n                break;\n        };\n        return $245;\n    };\n    const List$concat = x0 => x1 => List$concat$(x0, x1);\n    const Map$new = BBL$tip;\n\n    function DOM$text$(_value$1) {\n        var $250 = ({\n            _: 'DOM.text',\n            'value': _value$1\n        });\n        return $250;\n    };\n    const DOM$text = x0 => DOM$text$(x0);\n\n    function String$cons$(_head$1, _tail$2) {\n        var $251 = (String.fromCharCode(_head$1) + _tail$2);\n        return $251;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n    const String$concat = a0 => a1 => (a0 + a1);\n    const Nat$gtn = a0 => a1 => (a0 > a1);\n\n    function Int$is_neg$(_a$1) {\n        var self = _a$1;\n        switch (\"new\") {\n            case 'new':\n                var $253 = int_pos(self);\n                var $254 = int_neg(self);\n                var $255 = ($254 > $253);\n                var $252 = $255;\n                break;\n        };\n        return $252;\n    };\n    const Int$is_neg = x0 => Int$is_neg$(x0);\n\n    function Int$neg$(_a$1) {\n        var self = _a$1;\n        switch (\"new\") {\n            case 'new':\n                var $257 = int_pos(self);\n                var $258 = int_neg(self);\n                var $259 = ($258 - $257);\n                var $256 = $259;\n                break;\n        };\n        return $256;\n    };\n    const Int$neg = x0 => Int$neg$(x0);\n\n    function Int$abs$(_a$1) {\n        var _neg$2 = Int$is_neg$(_a$1);\n        var self = _neg$2;\n        if (self) {\n            var _a$3 = Int$neg$(_a$1);\n            var self = _a$3;\n            switch (\"new\") {\n                case 'new':\n                    var $262 = int_pos(self);\n                    var $263 = $262;\n                    var $261 = $263;\n                    break;\n            };\n            var $260 = $261;\n        } else {\n            var self = _a$1;\n            switch (\"new\") {\n                case 'new':\n                    var $265 = int_pos(self);\n                    var $266 = $265;\n                    var $264 = $266;\n                    break;\n            };\n            var $260 = $264;\n        };\n        return $260;\n    };\n    const Int$abs = x0 => Int$abs$(x0);\n\n    function Int$to_nat_signed$(_a$1) {\n        var $267 = Pair$new$(Int$is_neg$(_a$1), Int$abs$(_a$1));\n        return $267;\n    };\n    const Int$to_nat_signed = x0 => Int$to_nat_signed$(x0);\n\n    function List$fold$(_list$2, _nil$4, _cons$5) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.cons':\n                var $269 = self.head;\n                var $270 = self.tail;\n                var $271 = _cons$5($269)(List$fold$($270, _nil$4, _cons$5));\n                var $268 = $271;\n                break;\n            case 'List.nil':\n                var $272 = _nil$4;\n                var $268 = $272;\n                break;\n        };\n        return $268;\n    };\n    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);\n\n    function Either$(_A$1, _B$2) {\n        var $273 = null;\n        return $273;\n    };\n    const Either = x0 => x1 => Either$(x0, x1);\n\n    function Either$left$(_value$3) {\n        var $274 = ({\n            _: 'Either.left',\n            'value': _value$3\n        });\n        return $274;\n    };\n    const Either$left = x0 => Either$left$(x0);\n\n    function Either$right$(_value$3) {\n        var $275 = ({\n            _: 'Either.right',\n            'value': _value$3\n        });\n        return $275;\n    };\n    const Either$right = x0 => Either$right$(x0);\n\n    function Nat$sub_rem$(_n$1, _m$2) {\n        var Nat$sub_rem$ = (_n$1, _m$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2]\n        });\n        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);\n        var arg = [_n$1, _m$2];\n        while (true) {\n            let [_n$1, _m$2] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $276 = Either$left$(_n$1);\n                    return $276;\n                } else {\n                    var $277 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $279 = Either$right$(Nat$succ$($277));\n                        var $278 = $279;\n                    } else {\n                        var $280 = (self - 1n);\n                        var $281 = Nat$sub_rem$($280, $277);\n                        var $278 = $281;\n                    };\n                    return $278;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);\n\n    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {\n        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _d$3]\n        });\n        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);\n        var arg = [_n$1, _m$2, _d$3];\n        while (true) {\n            let [_n$1, _m$2, _d$3] = arg;\n            var R = (() => {\n                var self = Nat$sub_rem$(_n$1, _m$2);\n                switch (self._) {\n                    case 'Either.left':\n                        var $282 = self.value;\n                        var $283 = Nat$div_mod$go$($282, _m$2, Nat$succ$(_d$3));\n                        return $283;\n                    case 'Either.right':\n                        var $284 = Pair$new$(_d$3, _n$1);\n                        return $284;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);\n    const Nat$div_mod = a0 => a1 => (({\n        _: 'Pair.new',\n        'fst': a0 / a1,\n        'snd': a0 % a1\n    }));\n\n    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {\n        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_base$1, _nat$2, _res$3]\n        });\n        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);\n        var arg = [_base$1, _nat$2, _res$3];\n        while (true) {\n            let [_base$1, _nat$2, _res$3] = arg;\n            var R = (() => {\n                var self = (({\n                    _: 'Pair.new',\n                    'fst': _nat$2 / _base$1,\n                    'snd': _nat$2 % _base$1\n                }));\n                switch (self._) {\n                    case 'Pair.new':\n                        var $285 = self.fst;\n                        var $286 = self.snd;\n                        var self = $285;\n                        if (self === 0n) {\n                            var $288 = List$cons$($286, _res$3);\n                            var $287 = $288;\n                        } else {\n                            var $289 = (self - 1n);\n                            var $290 = Nat$to_base$go$(_base$1, $285, List$cons$($286, _res$3));\n                            var $287 = $290;\n                        };\n                        return $287;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);\n\n    function Nat$to_base$(_base$1, _nat$2) {\n        var $291 = Nat$to_base$go$(_base$1, _nat$2, List$nil);\n        return $291;\n    };\n    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);\n    const String$nil = '';\n\n    function Nat$mod$go$(_n$1, _m$2, _r$3) {\n        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _r$3]\n        });\n        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);\n        var arg = [_n$1, _m$2, _r$3];\n        while (true) {\n            let [_n$1, _m$2, _r$3] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $292 = Nat$mod$go$(_n$1, _r$3, _m$2);\n                    return $292;\n                } else {\n                    var $293 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $295 = _r$3;\n                        var $294 = $295;\n                    } else {\n                        var $296 = (self - 1n);\n                        var $297 = Nat$mod$go$($296, $293, Nat$succ$(_r$3));\n                        var $294 = $297;\n                    };\n                    return $294;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);\n    const Nat$mod = a0 => a1 => (a0 % a1);\n    const Bool$and = a0 => a1 => (a0 && a1);\n    const Nat$lte = a0 => a1 => (a0 <= a1);\n\n    function Maybe$(_A$1) {\n        var $298 = null;\n        return $298;\n    };\n    const Maybe = x0 => Maybe$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n\n    function Maybe$some$(_value$2) {\n        var $299 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $299;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n\n    function List$at$(_index$2, _list$3) {\n        var List$at$ = (_index$2, _list$3) => ({\n            ctr: 'TCO',\n            arg: [_index$2, _list$3]\n        });\n        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);\n        var arg = [_index$2, _list$3];\n        while (true) {\n            let [_index$2, _list$3] = arg;\n            var R = (() => {\n                var self = _list$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $300 = self.head;\n                        var $301 = self.tail;\n                        var self = _index$2;\n                        if (self === 0n) {\n                            var $303 = Maybe$some$($300);\n                            var $302 = $303;\n                        } else {\n                            var $304 = (self - 1n);\n                            var $305 = List$at$($304, $301);\n                            var $302 = $305;\n                        };\n                        return $302;\n                    case 'List.nil':\n                        var $306 = Maybe$none;\n                        return $306;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$at = x0 => x1 => List$at$(x0, x1);\n\n    function Nat$show_digit$(_base$1, _n$2) {\n        var _m$3 = (_n$2 % _base$1);\n        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n        var self = ((_base$1 > 0n) && (_base$1 <= 64n));\n        if (self) {\n            var self = List$at$(_m$3, _base64$4);\n            switch (self._) {\n                case 'Maybe.some':\n                    var $309 = self.value;\n                    var $310 = $309;\n                    var $308 = $310;\n                    break;\n                case 'Maybe.none':\n                    var $311 = 35;\n                    var $308 = $311;\n                    break;\n            };\n            var $307 = $308;\n        } else {\n            var $312 = 35;\n            var $307 = $312;\n        };\n        return $307;\n    };\n    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);\n\n    function Nat$to_string_base$(_base$1, _nat$2) {\n        var $313 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {\n            var $314 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);\n            return $314;\n        }));\n        return $313;\n    };\n    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);\n\n    function Nat$show$(_n$1) {\n        var $315 = Nat$to_string_base$(10n, _n$1);\n        return $315;\n    };\n    const Nat$show = x0 => Nat$show$(x0);\n\n    function Int$show$(_a$1) {\n        var _result$2 = Int$to_nat_signed$(_a$1);\n        var self = _result$2;\n        switch (self._) {\n            case 'Pair.new':\n                var $317 = self.fst;\n                var $318 = self.snd;\n                var self = $317;\n                if (self) {\n                    var $320 = (\"-\" + Nat$show$($318));\n                    var $319 = $320;\n                } else {\n                    var $321 = (\"+\" + Nat$show$($318));\n                    var $319 = $321;\n                };\n                var $316 = $319;\n                break;\n        };\n        return $316;\n    };\n    const Int$show = x0 => Int$show$(x0);\n\n    function App$Syntax$card$(_name$1, _hp$2) {\n        var $322 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"border\", \"2px solid black\"), List$cons$(Pair$new$(\"padding\", \"5px\"), List$nil))), List$cons$(DOM$node$(\"p\", Map$from_list$(List$nil), Map$new, List$cons$(DOM$text$((\"Her\\u{f3}i: \" + _name$1)), List$nil)), List$cons$(DOM$node$(\"p\", Map$from_list$(List$nil), Map$new, List$cons$(DOM$text$((\"HP: \" + Int$show$(_hp$2))), List$nil)), List$nil)));\n        return $322;\n    };\n    const App$Syntax$card = x0 => x1 => App$Syntax$card$(x0, x1);\n\n    function Map$set$(_key$2, _val$3, _map$4) {\n        var $323 = BBL$insert$(String$cmp, _key$2, _val$3, _map$4);\n        return $323;\n    };\n    const Map$set = x0 => x1 => x2 => Map$set$(x0, x1, x2);\n    const String$eql = a0 => a1 => (a0 === a1);\n    const Nat$eql = a0 => a1 => (a0 === a1);\n\n    function String$map$(_f$1, _as$2) {\n        var self = _as$2;\n        if (self.length === 0) {\n            var $325 = String$nil;\n            var $324 = $325;\n        } else {\n            var $326 = self.charCodeAt(0);\n            var $327 = self.slice(1);\n            var $328 = String$cons$(_f$1($326), String$map$(_f$1, $327));\n            var $324 = $328;\n        };\n        return $324;\n    };\n    const String$map = x0 => x1 => String$map$(x0, x1);\n\n    function Cmp$as_gte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $330 = Bool$false;\n                var $329 = $330;\n                break;\n            case 'Cmp.eql':\n            case 'Cmp.gtn':\n                var $331 = Bool$true;\n                var $329 = $331;\n                break;\n        };\n        return $329;\n    };\n    const Cmp$as_gte = x0 => Cmp$as_gte$(x0);\n\n    function Word$gte$(_a$2, _b$3) {\n        var $332 = Cmp$as_gte$(Word$cmp$(_a$2, _b$3));\n        return $332;\n    };\n    const Word$gte = x0 => x1 => Word$gte$(x0, x1);\n    const U16$gte = a0 => a1 => (a0 >= a1);\n\n    function Cmp$as_lte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.eql':\n                var $334 = Bool$true;\n                var $333 = $334;\n                break;\n            case 'Cmp.gtn':\n                var $335 = Bool$false;\n                var $333 = $335;\n                break;\n        };\n        return $333;\n    };\n    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);\n\n    function Word$lte$(_a$2, _b$3) {\n        var $336 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));\n        return $336;\n    };\n    const Word$lte = x0 => x1 => Word$lte$(x0, x1);\n    const U16$lte = a0 => a1 => (a0 <= a1);\n\n    function U16$new$(_value$1) {\n        var $337 = word_to_u16(_value$1);\n        return $337;\n    };\n    const U16$new = x0 => U16$new$(x0);\n\n    function Word$subber$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $339 = self.pred;\n                var $340 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $342 = self.pred;\n                            var $343 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $345 = Word$i$(Word$subber$(_a$pred$10, $342, Bool$true));\n                                    var $344 = $345;\n                                } else {\n                                    var $346 = Word$o$(Word$subber$(_a$pred$10, $342, Bool$false));\n                                    var $344 = $346;\n                                };\n                                return $344;\n                            });\n                            var $341 = $343;\n                            break;\n                        case 'Word.i':\n                            var $347 = self.pred;\n                            var $348 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $350 = Word$o$(Word$subber$(_a$pred$10, $347, Bool$true));\n                                    var $349 = $350;\n                                } else {\n                                    var $351 = Word$i$(Word$subber$(_a$pred$10, $347, Bool$true));\n                                    var $349 = $351;\n                                };\n                                return $349;\n                            });\n                            var $341 = $348;\n                            break;\n                        case 'Word.e':\n                            var $352 = (_a$pred$8 => {\n                                var $353 = Word$e;\n                                return $353;\n                            });\n                            var $341 = $352;\n                            break;\n                    };\n                    var $341 = $341($339);\n                    return $341;\n                });\n                var $338 = $340;\n                break;\n            case 'Word.i':\n                var $354 = self.pred;\n                var $355 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $357 = self.pred;\n                            var $358 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $360 = Word$o$(Word$subber$(_a$pred$10, $357, Bool$false));\n                                    var $359 = $360;\n                                } else {\n                                    var $361 = Word$i$(Word$subber$(_a$pred$10, $357, Bool$false));\n                                    var $359 = $361;\n                                };\n                                return $359;\n                            });\n                            var $356 = $358;\n                            break;\n                        case 'Word.i':\n                            var $362 = self.pred;\n                            var $363 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $365 = Word$i$(Word$subber$(_a$pred$10, $362, Bool$true));\n                                    var $364 = $365;\n                                } else {\n                                    var $366 = Word$o$(Word$subber$(_a$pred$10, $362, Bool$false));\n                                    var $364 = $366;\n                                };\n                                return $364;\n                            });\n                            var $356 = $363;\n                            break;\n                        case 'Word.e':\n                            var $367 = (_a$pred$8 => {\n                                var $368 = Word$e;\n                                return $368;\n                            });\n                            var $356 = $367;\n                            break;\n                    };\n                    var $356 = $356($354);\n                    return $356;\n                });\n                var $338 = $355;\n                break;\n            case 'Word.e':\n                var $369 = (_b$5 => {\n                    var $370 = Word$e;\n                    return $370;\n                });\n                var $338 = $369;\n                break;\n        };\n        var $338 = $338(_b$3);\n        return $338;\n    };\n    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);\n\n    function Word$sub$(_a$2, _b$3) {\n        var $371 = Word$subber$(_a$2, _b$3, Bool$false);\n        return $371;\n    };\n    const Word$sub = x0 => x1 => Word$sub$(x0, x1);\n    const U16$sub = a0 => a1 => ((a0 - a1) & 0xFFFF);\n    const Nat$to_u16 = a0 => (Number(a0) & 0xFFFF);\n\n    function Char$to_upper$(_char$1) {\n        var self = ((_char$1 >= 97) && (_char$1 <= 122));\n        if (self) {\n            var $373 = ((_char$1 - 32) & 0xFFFF);\n            var $372 = $373;\n        } else {\n            var $374 = _char$1;\n            var $372 = $374;\n        };\n        return $372;\n    };\n    const Char$to_upper = x0 => Char$to_upper$(x0);\n\n    function String$to_upper$(_str$1) {\n        var $375 = String$map$(Char$to_upper, _str$1);\n        return $375;\n    };\n    const String$to_upper = x0 => String$to_upper$(x0);\n\n    function App$Syntax$draw$(_state$1) {\n        var _team$2 = \"azul\";\n        var _heroes$3 = List$cons$(Pair$new$(\"croni\", (25n)), List$cons$(Pair$new$(\"cyclope\", (30n)), List$cons$(Pair$new$(\"lela\", (15n)), List$cons$(Pair$new$(\"octoking\", (40n)), List$nil))));\n        var _paragraph$4 = Map$from_list$(List$cons$(Pair$new$(\"font-size\", \"2rem\"), List$nil));\n        var $376 = DOM$node$(\"div\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"asd\"), List$nil)), Map$from_list$(List$cons$(Pair$new$(\"width\", \"100vw\"), List$cons$(Pair$new$(\"height\", \"100vh\"), List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"flex-direction\", \"column\"), List$cons$(Pair$new$(\"justify-content\", \"center\"), List$cons$(Pair$new$(\"align-items\", \"center\"), List$cons$(Pair$new$(\"background-color\", \"#e4bbd9\"), List$nil)))))))), List$cons$((() => {\n            var _a$5 = List$nil;\n            var _a$6 = (() => {\n                var $379 = _a$5;\n                var $380 = _heroes$3;\n                let _a$7 = $379;\n                let _i$6;\n                while ($380._ === 'List.cons') {\n                    _i$6 = $380.head;\n                    var $379 = List$concat$(_a$7, List$cons$(App$Syntax$card$((() => {\n                        var self = _i$6;\n                        switch (self._) {\n                            case 'Pair.new':\n                                var $381 = self.fst;\n                                var $382 = $381;\n                                return $382;\n                        };\n                    })(), (() => {\n                        var self = _i$6;\n                        switch (self._) {\n                            case 'Pair.new':\n                                var $383 = self.snd;\n                                var $384 = $383;\n                                return $384;\n                        };\n                    })()), List$nil));\n                    _a$7 = $379;\n                    $380 = $380.tail;\n                }\n                return _a$7;\n            })();\n            var $377 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), _a$6);\n            return $377;\n        })(), List$cons$(DOM$node$(\"div\", Map$new, Map$set$(\"display\", \"contents\", Map$new), List$fold$(_heroes$3, List$nil, (_i$5 => _placeholder$6 => {\n            var $385 = List$cons$(App$Syntax$card$((() => {\n                var self = _i$5;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $386 = self.fst;\n                        var $387 = $386;\n                        return $387;\n                };\n            })(), (() => {\n                var self = _i$5;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $388 = self.snd;\n                        var $389 = $388;\n                        return $389;\n                };\n            })()), _placeholder$6);\n            return $385;\n        }))), List$cons$(DOM$node$(\"div\", Map$new, Map$set$(\"display\", \"contents\", Map$new), List$fold$(_heroes$3, List$nil, (_i$5 => _placeholder$6 => {\n            var $390 = List$cons$(App$Syntax$card$((() => {\n                var self = _i$5;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $391 = self.fst;\n                        var $392 = $391;\n                        return $392;\n                };\n            })(), (() => {\n                var self = _i$5;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $393 = self.snd;\n                        var $394 = $393;\n                        return $394;\n                };\n            })()), _placeholder$6);\n            return $390;\n        }))), List$cons$((() => {\n            var self = (_team$2 === \"azul\");\n            if (self) {\n                var $395 = DOM$node$(\"p\", Map$from_list$(List$nil), _paragraph$4, List$cons$(DOM$text$(\"\\u{c9} do time azul\"), List$nil));\n                return $395;\n            } else {\n                var $396 = DOM$node$(\"p\", Map$from_list$(List$nil), _paragraph$4, List$cons$(DOM$text$(\"N\\u{e3}o \\u{e9} do time azul\"), List$nil));\n                return $396;\n            };\n        })(), List$cons$((() => {\n            var self = (1n === 1n);\n            if (self) {\n                var $397 = DOM$node$(\"p\", Map$from_list$(List$nil), _paragraph$4, List$cons$(DOM$text$(String$to_upper$(\"Aparece if\")), List$nil));\n                return $397;\n            } else {\n                var $398 = DOM$node$(\"p\", Map$from_list$(List$nil), _paragraph$4, List$cons$(DOM$text$(String$to_upper$(\"N\\u{e3}o aparece if\")), List$nil));\n                return $398;\n            };\n        })(), List$cons$(DOM$node$(\"img\", Map$from_list$(List$cons$(Pair$new$(\"src\", \"https://avatars.githubusercontent.com/u/79022763?s=200&v=4\"), List$nil)), Map$new, List$nil), List$nil)))))));\n        return $376;\n    };\n    const App$Syntax$draw = x0 => App$Syntax$draw$(x0);\n\n    function IO$(_A$1) {\n        var $399 = null;\n        return $399;\n    };\n    const IO = x0 => IO$(x0);\n\n    function IO$ask$(_query$2, _param$3, _then$4) {\n        var $400 = ({\n            _: 'IO.ask',\n            'query': _query$2,\n            'param': _param$3,\n            'then': _then$4\n        });\n        return $400;\n    };\n    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);\n\n    function IO$bind$(_a$3, _f$4) {\n        var self = _a$3;\n        switch (self._) {\n            case 'IO.end':\n                var $402 = self.value;\n                var $403 = _f$4($402);\n                var $401 = $403;\n                break;\n            case 'IO.ask':\n                var $404 = self.query;\n                var $405 = self.param;\n                var $406 = self.then;\n                var $407 = IO$ask$($404, $405, (_x$8 => {\n                    var $408 = IO$bind$($406(_x$8), _f$4);\n                    return $408;\n                }));\n                var $401 = $407;\n                break;\n        };\n        return $401;\n    };\n    const IO$bind = x0 => x1 => IO$bind$(x0, x1);\n\n    function IO$end$(_value$2) {\n        var $409 = ({\n            _: 'IO.end',\n            'value': _value$2\n        });\n        return $409;\n    };\n    const IO$end = x0 => IO$end$(x0);\n\n    function IO$monad$(_new$2) {\n        var $410 = _new$2(IO$bind)(IO$end);\n        return $410;\n    };\n    const IO$monad = x0 => IO$monad$(x0);\n    const App$State$local = Pair$fst;\n    const App$pass = IO$monad$((_m$bind$2 => _m$pure$3 => {\n        var $411 = _m$pure$3;\n        return $411;\n    }))(Maybe$none);\n\n    function App$no_when$(_event$2, _state$3) {\n        var $412 = App$pass;\n        return $412;\n    };\n    const App$no_when = x0 => x1 => App$no_when$(x0, x1);\n    const App$Syntax$when = App$no_when;\n\n    function App$no_tick$(_tick$2, _glob$3) {\n        var $413 = _glob$3;\n        return $413;\n    };\n    const App$no_tick = x0 => x1 => App$no_tick$(x0, x1);\n    const App$Syntax$tick = App$no_tick;\n\n    function App$no_post$(_time$2, _room$3, _addr$4, _data$5, _glob$6) {\n        var $414 = _glob$6;\n        return $414;\n    };\n    const App$no_post = x0 => x1 => x2 => x3 => x4 => App$no_post$(x0, x1, x2, x3, x4);\n    const App$Syntax$post = App$no_post;\n    const App$Syntax = App$new$(App$Syntax$init, App$Syntax$draw, App$Syntax$when, App$Syntax$tick, App$Syntax$post);\n    return {\n        'App.new': App$new,\n        'Pair.new': Pair$new,\n        'App.State.new': App$State$new,\n        'App.Syntax.State': App$Syntax$State,\n        'App.Store.new': App$Store$new,\n        'Unit.new': Unit$new,\n        'App.Syntax.init': App$Syntax$init,\n        'List.cons': List$cons,\n        'Pair': Pair,\n        'Nat.zero': Nat$zero,\n        'Nat.succ': Nat$succ,\n        'Int.new': Int$new,\n        'Int.from_nat': Int$from_nat,\n        'List.nil': List$nil,\n        'BBL': BBL,\n        'Pair.fst': Pair$fst,\n        'Pair.snd': Pair$snd,\n        'BBL.bin': BBL$bin,\n        'U32.new': U32$new,\n        'Nat.apply': Nat$apply,\n        'Word': Word,\n        'Word.e': Word$e,\n        'Word.i': Word$i,\n        'Word.o': Word$o,\n        'Word.inc': Word$inc,\n        'Word.zero': Word$zero,\n        'Nat.to_word': Nat$to_word,\n        'Nat.to_u32': Nat$to_u32,\n        'BBL.tip': BBL$tip,\n        'BBL.singleton': BBL$singleton,\n        'BBL.size': BBL$size,\n        'Bool.false': Bool$false,\n        'Bool.true': Bool$true,\n        'Word.adder': Word$adder,\n        'Word.add': Word$add,\n        'U32.add': U32$add,\n        'Word.shift_left.one.go': Word$shift_left$one$go,\n        'Word.shift_left.one': Word$shift_left$one,\n        'Word.shift_left': Word$shift_left,\n        'Word.mul.go': Word$mul$go,\n        'Word.to_zero': Word$to_zero,\n        'Word.mul': Word$mul,\n        'U32.mul': U32$mul,\n        'BBL.w': BBL$w,\n        'Cmp.as_ltn': Cmp$as_ltn,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.ltn': Word$ltn,\n        'U32.ltn': U32$ltn,\n        'U32.from_nat': U32$from_nat,\n        'BBL.node': BBL$node,\n        'Cmp.as_gtn': Cmp$as_gtn,\n        'Word.gtn': Word$gtn,\n        'U32.gtn': U32$gtn,\n        'BBL.balance': BBL$balance,\n        'BBL.insert': BBL$insert,\n        'BBL.from_list.go': BBL$from_list$go,\n        'BBL.from_list': BBL$from_list,\n        'U16.ltn': U16$ltn,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Word.eql': Word$eql,\n        'U16.eql': U16$eql,\n        'U16.cmp': U16$cmp,\n        'String.cmp': String$cmp,\n        'Map.from_list': Map$from_list,\n        'DOM.node': DOM$node,\n        'List.for': List$for,\n        'List': List,\n        'List.concat': List$concat,\n        'Map.new': Map$new,\n        'DOM.text': DOM$text,\n        'String.cons': String$cons,\n        'String.concat': String$concat,\n        'Nat.gtn': Nat$gtn,\n        'Int.is_neg': Int$is_neg,\n        'Int.neg': Int$neg,\n        'Int.abs': Int$abs,\n        'Int.to_nat_signed': Int$to_nat_signed,\n        'List.fold': List$fold,\n        'Either': Either,\n        'Either.left': Either$left,\n        'Either.right': Either$right,\n        'Nat.sub_rem': Nat$sub_rem,\n        'Nat.div_mod.go': Nat$div_mod$go,\n        'Nat.div_mod': Nat$div_mod,\n        'Nat.to_base.go': Nat$to_base$go,\n        'Nat.to_base': Nat$to_base,\n        'String.nil': String$nil,\n        'Nat.mod.go': Nat$mod$go,\n        'Nat.mod': Nat$mod,\n        'Bool.and': Bool$and,\n        'Nat.lte': Nat$lte,\n        'Maybe': Maybe,\n        'Maybe.none': Maybe$none,\n        'Maybe.some': Maybe$some,\n        'List.at': List$at,\n        'Nat.show_digit': Nat$show_digit,\n        'Nat.to_string_base': Nat$to_string_base,\n        'Nat.show': Nat$show,\n        'Int.show': Int$show,\n        'App.Syntax.card': App$Syntax$card,\n        'Map.set': Map$set,\n        'String.eql': String$eql,\n        'Nat.eql': Nat$eql,\n        'String.map': String$map,\n        'Cmp.as_gte': Cmp$as_gte,\n        'Word.gte': Word$gte,\n        'U16.gte': U16$gte,\n        'Cmp.as_lte': Cmp$as_lte,\n        'Word.lte': Word$lte,\n        'U16.lte': U16$lte,\n        'U16.new': U16$new,\n        'Word.subber': Word$subber,\n        'Word.sub': Word$sub,\n        'U16.sub': U16$sub,\n        'Nat.to_u16': Nat$to_u16,\n        'Char.to_upper': Char$to_upper,\n        'String.to_upper': String$to_upper,\n        'App.Syntax.draw': App$Syntax$draw,\n        'IO': IO,\n        'IO.ask': IO$ask,\n        'IO.bind': IO$bind,\n        'IO.end': IO$end,\n        'IO.monad': IO$monad,\n        'App.State.local': App$State$local,\n        'App.pass': App$pass,\n        'App.no_when': App$no_when,\n        'App.Syntax.when': App$Syntax$when,\n        'App.no_tick': App$no_tick,\n        'App.Syntax.tick': App$Syntax$tick,\n        'App.no_post': App$no_post,\n        'App.Syntax.post': App$Syntax$post,\n        'App.Syntax': App$Syntax,\n    };\n})();"],"sourceRoot":""}