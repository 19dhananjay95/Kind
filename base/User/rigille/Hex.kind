type HexPlace {
  empty
  red
  blue
}

Fin.is_empty<size: Nat>(contra: Fin<size>): Bool
  case size {
    zero: true
    succ: false
  }

Fin.absurd<A: Type>(contra: Fin<0>): A
  let gotcha = contra :: if Fin.is_empty!(contra) then Fin<0> else A
  case contra with gotcha {
    zero: gotcha
    succ: gotcha
  }!

List.all<A: Type>(list: List<A>, Prop: A -> Type): Type
  case list {
    nil: Unit
    cons: And<Prop(list.head), List.all<A>(list.tail, Prop)>
  }

List.specialize<A: Type>(
  list: List<A>
  Prop: A -> Type
  x: A
  All: List.all<A>(list, Prop)
  In: User.rigille.List.In<A>(list, x)
): Prop(x)
  case list with All In {
    nil: Empty.absurd!(In)
    cons:
      open All
      case In {
        left:
          let qed = All.fst :: rewrite X in Prop(X) with mirror(In.value)
          qed
        right:
          List.specialize!!!!(All.snd, In.value)
      }
  }!

Matrix<A: Type>(n: Nat, m: Nat, xs: List<List<A>>): Type
  def lines = Equal<Nat>(List.length!(xs), n)
  def columns = List.all<List<A>>(xs, (x) Equal<Nat>(List.length!(x), m))
  And<lines, columns>

List.In.index<A: Type>(
  list: List<A>
  x: A
  In: User.rigille.List.In<A>(list, x)
): Nat
  case list with In {
    nil: Empty.absurd!(In)
    cons:
      case In {
        left: 0
        right: Nat.succ(List.In.index!!!(In.value))
      }
  }!

List.safe_at.spec<A: Type>(
  index: Nat
  list: List<A>
  SafeIndex: Nat.ltn(index, List.length!(list)) == true
): A -> Type
  (x)
    def InProp = User.rigille.List.In<A>(list, x)
    [In: InProp] List.In.index!!!(In) == index

List.safe_at<A: Type>(
  index: Nat
  list: List<A>
  SafeIndex: Nat.ltn(index, List.length!(list)) == true
): [x: A] User.rigille.List.In<A>(list, x)
  case list with SafeIndex {
    nil: Empty.absurd!(Bool.false_neq_true(SafeIndex))
    cons:
      case index with SafeIndex {
        zero:
          list.head ~ left(refl)
        succ:
          let ind = List.safe_at<A>(index.pred, list.tail, SafeIndex)
          open ind
          ind.fst ~ right(ind.snd)
      }!
  }!

Matrix.safe_at<A: Type>(
  n: Nat
  m: Nat
  mat: List<List<A>>
  lines: Nat
  columns: Nat
  SafeLine: Nat.ltn(n, lines) == true
  SafeColumn: Nat.ltn(m, columns) == true
  Mat: Matrix<A>(lines, columns, mat)
): [x: A] [line: List<A>] And<User.rigille.List.In!(mat, line), User.rigille.List.In!(line, x)>
  open Mat
  def line_bound = SafeLine :: rewrite X in Nat.ltn(n,X) == Bool.true with mirror(Mat.fst)
  let {line, line_in} = List.safe_at!(n, mat, line_bound)
  def column_length = List.specialize!!!!(Mat.snd, line_in)
  let column_bound = SafeColumn :: rewrite X in Nat.ltn(m,X) == Bool.true with mirror(column_length)
  let {elem, elem_in} = List.safe_at!(m, line, column_bound)
  elem ~ line ~ {line_in, elem_in}

Matrix.safe_at.val<A: Type>(
  n: Nat
  m: Nat
  mat: List<List<A>>
  lines: Nat
  columns: Nat
  SafeLine: Nat.ltn(n, lines) == true
  SafeColumn: Nat.ltn(m, columns) == true
  Mat: Matrix<A>(lines, columns, mat)
): A
  let {val, prop} = Matrix.safe_at<A>(n, m, mat, lines, columns, SafeLine, SafeColumn, Mat)
  val


//List.safe_set<A: Type>(
//  index: Nat
//  val: A
//  list: List<A>
//  SafeIndex: Nat.ltn(index, List.length!(list)) == true
//): [new_list: List<A>] (n)
//  ?a
