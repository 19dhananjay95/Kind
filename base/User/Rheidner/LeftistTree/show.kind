// Parses the tree to String format
// Makes the tree printable
User.Rheidner.LeftistTree.show.go<A: Type>(tree: User.Rheidner.LeftistTree<A>, showFunc: (x: A) -> String, nivel: Nat) : String
  case tree {
    empty: ""
    node:       
      let result = Nat.apply<String>(nivel, String.concat(" "), "") | showFunc(tree.value) | ", rank: " | Nat.show(tree.rank) | ", nivel: " | Nat.show(nivel) | "\n"
      result | User.Rheidner.LeftistTree.show.go<A>(tree.left, showFunc, nivel+1) | User.Rheidner.LeftistTree.show.go<A>(tree.right, showFunc, nivel+1)
  }!

User.Rheidner.LeftistTree.show<A: Type>(tree: User.Rheidner.LeftistTree<A>, showFunc: (x: A) -> String) : String
  User.Rheidner.LeftistTree.show.go<A>(tree, showFunc, 0)