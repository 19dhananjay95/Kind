Kind.Parser.open: Parser(Kind.Term)
  do Parser {
    var init = Kind.Parser.init;
    Kind.Parser.text("open ");
    Kind.Parser.spaces;
    var expr = Kind.Parser.term;
    var name = Parser.maybe!(do Parser {
      Kind.Parser.text("as");
      Kind.Parser.name1;
    });
    Parser.maybe!(Kind.Parser.text(";"));
    let name = case name {
      none: case Kind.Term.reduce(expr, Map.new!) as expr {
        ref: expr.name,
        var: expr.name,
        _: Kind.Name.read("self"),
      },
      some: name.value,
    };
    let wyth = [];
    var rest = Kind.Parser.term;
    let cses = Kind.set!("_", rest, Map.new!);
    //Map.from_list!(Kind.Name.to_bits, [{"_",rest}]);
    let moti = Maybe.some!(Kind.Term.hol(Bits.e));
    var orig = Kind.Parser.stop(init);
    return Kind.Term.ori(orig, Kind.Term.cse(Bits.e, expr, name, wyth, cses, moti));
  }