//changes only for testing

Web.Kaelin.App.when: App.Event -> Web.Kaelin.State -> IO<Dynamic>
(event, state)
    case event state{
      init game: 
        let user = String.to_lower(event.user)
        IO {
          App.watch(Web.Kaelin.Constants.room)
          App.store!(Web.Kaelin.State.game(user, Web.Kaelin.Constants.room, state.tick, state.players, state.cast_info, state.map, state.env_info))
        }
      
      key_down game:
        App.store!(Web.Kaelin.Action.start_cast(event.code, state))
        
      tick game:
           let info = event.info
           App.store<Web.Kaelin.State>(Web.Kaelin.Action.update_interface(info, state))

      post game:
      // this will be replaced by deserialze when it is ready
        switch String.starts_with(event.data) {
          
          "0x1": 
            let hero_id = 1#8
            let hero = Web.Kaelin.Resources.heroes{U8.show(hero_id)}
            case hero {
              none: App.pass
              some: App.store<Web.Kaelin.State>(Web.Kaelin.Action.create_player(event.addr, hero.value, state))
            }
            // TODO: change movement so it uses range 2 and mouse (Web.Kaelin.Coord.Range)
            // draw the range in Web.Kaelin.Draw.state.background through State.Cast_info
            // draw hovered hex differently from movement hexes.
            // use mouse click to move
          "0x2":
            let {coord.fst, coord.snd} = switch String.eql( String.slice(3, 4, event.data) ) {
              "1": {+1#32, +0#32}
              "2": {-1#32, +0#32}
              "3": {+0#32, -1#32}
              "4": {+0#32, +1#32}
            } default {+0#32, +0#32}
            // App.store<Web.Kaelin.State>(Web.Kaelin.Player.move(Web.Kaelin.Coord.new(+1,+0) state, event.addr))            
            App.store<Web.Kaelin.State>(Web.Kaelin.Player.move_by(coord.fst, coord.snd, state, event.addr))
          
          "0x3":
            let {range, hex_effect} = switch String.eql( String.slice(3, 4, event.data) ) {
              "1": {1, Web.Kaelin.HexEffect.skill} 
              "2": {2, Web.Kaelin.HexEffect.skill}
              "3": {2, Web.Kaelin.HexEffect.movement}
            }default {0, Web.Kaelin.HexEffect.skill}
            // App.store<Web.Kaelin.State>(Web.Kaelin.Player.move(Web.Kaelin.Coord.new(+1,+0) state, event.addr))            
            App.store<Web.Kaelin.State>(Web.Kaelin.Action.update_cast(range, hex_effect, state, event.addr))

          "0x4":
            case state.cast_info {
              none: App.pass
              some:
                open state.cast_info.value
                App.store<Web.Kaelin.State>(Web.Kaelin.Skill.skill_use(state,state.cast_info.value.skill))
            }
          
        } default App.pass
    } default App.pass

Web.Kaelin.Command.create_player(hero_id: String) : String
  "0x1" | String.repeat("0", 55) | String.drop(2, hero_id)

