((((((Monad.bind Parser) Parser.monad) Nat) Kind.Term) Kind.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Kind.Name) Kind.Term) Kind.Parser.name) #self ((((((Monad.bind Parser) Parser.monad) (List Kind.Binder)) Kind.Term) (Kind.Parser.binder ":")) #bind ((((((Monad.bind Parser) Parser.monad) (Maybe Unit)) Kind.Term) ((Parser.maybe Unit) (Kind.Parser.text "->"))) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) Kind.Parser.term) #body !term = (((((List.fold Kind.Binder) bind) Kind.Term) body) #x #t ((x #x Kind.Term) #x.eras #x.name #x.term (((((Kind.Term.all x.eras) "") x.name) x.term) #s #x t))); ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Kind.Term) (Kind.Parser.stop init)) #orig ((((Monad.pure Parser) Parser.monad) Kind.Term) (((((((((((((((((term #term Kind.Term) #term.name #term.indx term) #term.name term) term) #term.eras #term.self #term.name #term.xtyp #term.body ((Kind.Term.ori orig) (((((Kind.Term.all term.eras) self) term.name) term.xtyp) term.body))) #term.name #term.body term) #term.func #term.argm term) #term.name #term.expr #term.body term) #term.name #term.expr #term.body term) #term.done #term.term #term.type term) #term.name #term.dref #term.verb term) #term.path term) #term.natx term) #term.chrx term) #term.strx term) #term.path #term.expr #term.name #term.with #term.cses #term.moti term) #term.orig #term.expr term))))))))