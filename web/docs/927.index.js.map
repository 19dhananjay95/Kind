{"version":3,"sources":["webpack://kind-web/./src/apps/Web.Kaelin.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,cAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,cAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,cAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,cAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,cAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,cAAc;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gBAAgB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA,sDAAsD,cAAc;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,I","file":"927.index.js","sourcesContent":["module.exports = (function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    var list_for = list => nil => cons => {\n        while (list._ !== 'List.nil') {\n            nil = cons(list.head)(nil);\n            list = list.tail;\n        }\n        return nil;\n    };\n    const inst_unit = x => x(1);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c2;\n                return $2;\n            } else {\n                var $3 = c2;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c2;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c2($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');\n    const elim_bits = (x => {\n        var $14 = (() => c0 => c1 => c2 => {\n            var self = x;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'o':\n                    var $9 = self.slice(0, -1);\n                    var $10 = c1($9);\n                    return $10;\n                case 'i':\n                    var $11 = self.slice(0, -1);\n                    var $12 = c2($11);\n                    return $12;\n                case 'e':\n                    var $13 = c0;\n                    return $13;\n            };\n        })();\n        return $14;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $15 = u16_to_word(self);\n                    var $16 = c0($15);\n                    return $16;\n            };\n        })();\n        return $17;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $20 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $18 = u32_to_word(self);\n                    var $19 = c0($18);\n                    return $19;\n            };\n        })();\n        return $20;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $23 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $21 = u64_to_word(self);\n                    var $22 = c0($21);\n                    return $22;\n            };\n        })();\n        return $23;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $28 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $24 = c2;\n                return $24;\n            } else {\n                var $25 = self.charCodeAt(0);\n                var $26 = self.slice(1);\n                var $27 = c2($25)($26);\n                return $27;\n            };\n        })();\n        return $28;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $32 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $29 = buffer32_to_depth(self);\n                    var $30 = buffer32_to_u32array(self);\n                    var $31 = c0($29)($30);\n                    return $31;\n            };\n        })();\n        return $32;\n    });\n\n    function Buffer32$new$(_depth$1, _array$2) {\n        var $33 = u32array_to_buffer32(_array$2);\n        return $33;\n    };\n    const Buffer32$new = x0 => x1 => Buffer32$new$(x0, x1);\n\n    function Array$(_A$1, _depth$2) {\n        var $34 = null;\n        return $34;\n    };\n    const Array = x0 => x1 => Array$(x0, x1);\n\n    function Array$tip$(_value$2) {\n        var $35 = ({\n            _: 'Array.tip',\n            'value': _value$2\n        });\n        return $35;\n    };\n    const Array$tip = x0 => Array$tip$(x0);\n\n    function Array$tie$(_lft$3, _rgt$4) {\n        var $36 = ({\n            _: 'Array.tie',\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $36;\n    };\n    const Array$tie = x0 => x1 => Array$tie$(x0, x1);\n\n    function Array$alloc$(_depth$2, _x$3) {\n        var self = _depth$2;\n        if (self === 0n) {\n            var $38 = Array$tip$(_x$3);\n            var $37 = $38;\n        } else {\n            var $39 = (self - 1n);\n            var _half$5 = Array$alloc$($39, _x$3);\n            var $40 = Array$tie$(_half$5, _half$5);\n            var $37 = $40;\n        };\n        return $37;\n    };\n    const Array$alloc = x0 => x1 => Array$alloc$(x0, x1);\n\n    function U32$new$(_value$1) {\n        var $41 = word_to_u32(_value$1);\n        return $41;\n    };\n    const U32$new = x0 => U32$new$(x0);\n\n    function Word$(_size$1) {\n        var $42 = null;\n        return $42;\n    };\n    const Word = x0 => Word$(x0);\n    const Word$e = ({\n        _: 'Word.e'\n    });\n\n    function Word$o$(_pred$2) {\n        var $43 = ({\n            _: 'Word.o',\n            'pred': _pred$2\n        });\n        return $43;\n    };\n    const Word$o = x0 => Word$o$(x0);\n\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $45 = Word$e;\n            var $44 = $45;\n        } else {\n            var $46 = (self - 1n);\n            var $47 = Word$o$(Word$zero$($46));\n            var $44 = $47;\n        };\n        return $44;\n    };\n    const Word$zero = x0 => Word$zero$(x0);\n    const U32$zero = U32$new$(Word$zero$(32n));\n    const Buffer32$alloc = a0 => (new Uint32Array(2 ** Number(a0)));\n    const Bool$false = false;\n    const Bool$true = true;\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $49 = Bool$false;\n                var $48 = $49;\n                break;\n            case 'Cmp.eql':\n                var $50 = Bool$true;\n                var $48 = $50;\n                break;\n        };\n        return $48;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $52 = self.pred;\n                var $53 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $55 = self.pred;\n                            var $56 = (_a$pred$10 => {\n                                var $57 = Word$cmp$go$(_a$pred$10, $55, _c$4);\n                                return $57;\n                            });\n                            var $54 = $56;\n                            break;\n                        case 'Word.i':\n                            var $58 = self.pred;\n                            var $59 = (_a$pred$10 => {\n                                var $60 = Word$cmp$go$(_a$pred$10, $58, Cmp$ltn);\n                                return $60;\n                            });\n                            var $54 = $59;\n                            break;\n                        case 'Word.e':\n                            var $61 = (_a$pred$8 => {\n                                var $62 = _c$4;\n                                return $62;\n                            });\n                            var $54 = $61;\n                            break;\n                    };\n                    var $54 = $54($52);\n                    return $54;\n                });\n                var $51 = $53;\n                break;\n            case 'Word.i':\n                var $63 = self.pred;\n                var $64 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $66 = self.pred;\n                            var $67 = (_a$pred$10 => {\n                                var $68 = Word$cmp$go$(_a$pred$10, $66, Cmp$gtn);\n                                return $68;\n                            });\n                            var $65 = $67;\n                            break;\n                        case 'Word.i':\n                            var $69 = self.pred;\n                            var $70 = (_a$pred$10 => {\n                                var $71 = Word$cmp$go$(_a$pred$10, $69, _c$4);\n                                return $71;\n                            });\n                            var $65 = $70;\n                            break;\n                        case 'Word.e':\n                            var $72 = (_a$pred$8 => {\n                                var $73 = _c$4;\n                                return $73;\n                            });\n                            var $65 = $72;\n                            break;\n                    };\n                    var $65 = $65($63);\n                    return $65;\n                });\n                var $51 = $64;\n                break;\n            case 'Word.e':\n                var $74 = (_b$5 => {\n                    var $75 = _c$4;\n                    return $75;\n                });\n                var $51 = $74;\n                break;\n        };\n        var $51 = $51(_b$3);\n        return $51;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $76 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $76;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $77 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $77;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n\n    function Nat$succ$(_pred$1) {\n        var $78 = 1n + _pred$1;\n        return $78;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const U32$eql = a0 => a1 => (a0 === a1);\n\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _f$3, _x$4]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [_n$2, _f$3, _x$4];\n        while (true) {\n            let [_n$2, _f$3, _x$4] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $79 = _x$4;\n                    return $79;\n                } else {\n                    var $80 = (self - 1n);\n                    var $81 = Nat$apply$($80, _f$3, _f$3(_x$4));\n                    return $81;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n\n    function Word$i$(_pred$2) {\n        var $82 = ({\n            _: 'Word.i',\n            'pred': _pred$2\n        });\n        return $82;\n    };\n    const Word$i = x0 => Word$i$(x0);\n\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $84 = self.pred;\n                var $85 = Word$i$($84);\n                var $83 = $85;\n                break;\n            case 'Word.i':\n                var $86 = self.pred;\n                var $87 = Word$o$(Word$inc$($86));\n                var $83 = $87;\n                break;\n            case 'Word.e':\n                var $88 = Word$e;\n                var $83 = $88;\n                break;\n        };\n        return $83;\n    };\n    const Word$inc = x0 => Word$inc$(x0);\n\n    function U32$inc$(_a$1) {\n        var self = _a$1;\n        switch ('u32') {\n            case 'u32':\n                var $90 = u32_to_word(self);\n                var $91 = U32$new$(Word$inc$($90));\n                var $89 = $91;\n                break;\n        };\n        return $89;\n    };\n    const U32$inc = x0 => U32$inc$(x0);\n    const Nat$to_u32 = a0 => (Number(a0));\n    const U32$shr = a0 => a1 => (a0 >>> a1);\n\n    function U32$needed_depth$go$(_n$1) {\n        var self = (_n$1 === 0);\n        if (self) {\n            var $93 = 0n;\n            var $92 = $93;\n        } else {\n            var $94 = Nat$succ$(U32$needed_depth$go$((_n$1 >>> 1)));\n            var $92 = $94;\n        };\n        return $92;\n    };\n    const U32$needed_depth$go = x0 => U32$needed_depth$go$(x0);\n\n    function Word$subber$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $96 = self.pred;\n                var $97 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $99 = self.pred;\n                            var $100 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $102 = Word$i$(Word$subber$(_a$pred$10, $99, Bool$true));\n                                    var $101 = $102;\n                                } else {\n                                    var $103 = Word$o$(Word$subber$(_a$pred$10, $99, Bool$false));\n                                    var $101 = $103;\n                                };\n                                return $101;\n                            });\n                            var $98 = $100;\n                            break;\n                        case 'Word.i':\n                            var $104 = self.pred;\n                            var $105 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $107 = Word$o$(Word$subber$(_a$pred$10, $104, Bool$true));\n                                    var $106 = $107;\n                                } else {\n                                    var $108 = Word$i$(Word$subber$(_a$pred$10, $104, Bool$true));\n                                    var $106 = $108;\n                                };\n                                return $106;\n                            });\n                            var $98 = $105;\n                            break;\n                        case 'Word.e':\n                            var $109 = (_a$pred$8 => {\n                                var $110 = Word$e;\n                                return $110;\n                            });\n                            var $98 = $109;\n                            break;\n                    };\n                    var $98 = $98($96);\n                    return $98;\n                });\n                var $95 = $97;\n                break;\n            case 'Word.i':\n                var $111 = self.pred;\n                var $112 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $114 = self.pred;\n                            var $115 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $117 = Word$o$(Word$subber$(_a$pred$10, $114, Bool$false));\n                                    var $116 = $117;\n                                } else {\n                                    var $118 = Word$i$(Word$subber$(_a$pred$10, $114, Bool$false));\n                                    var $116 = $118;\n                                };\n                                return $116;\n                            });\n                            var $113 = $115;\n                            break;\n                        case 'Word.i':\n                            var $119 = self.pred;\n                            var $120 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $122 = Word$i$(Word$subber$(_a$pred$10, $119, Bool$true));\n                                    var $121 = $122;\n                                } else {\n                                    var $123 = Word$o$(Word$subber$(_a$pred$10, $119, Bool$false));\n                                    var $121 = $123;\n                                };\n                                return $121;\n                            });\n                            var $113 = $120;\n                            break;\n                        case 'Word.e':\n                            var $124 = (_a$pred$8 => {\n                                var $125 = Word$e;\n                                return $125;\n                            });\n                            var $113 = $124;\n                            break;\n                    };\n                    var $113 = $113($111);\n                    return $113;\n                });\n                var $95 = $112;\n                break;\n            case 'Word.e':\n                var $126 = (_b$5 => {\n                    var $127 = Word$e;\n                    return $127;\n                });\n                var $95 = $126;\n                break;\n        };\n        var $95 = $95(_b$3);\n        return $95;\n    };\n    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);\n\n    function Word$sub$(_a$2, _b$3) {\n        var $128 = Word$subber$(_a$2, _b$3, Bool$false);\n        return $128;\n    };\n    const Word$sub = x0 => x1 => Word$sub$(x0, x1);\n    const U32$sub = a0 => a1 => (Math.max(a0 - a1, 0));\n\n    function U32$needed_depth$(_size$1) {\n        var $129 = U32$needed_depth$go$((Math.max(_size$1 - 1, 0)));\n        return $129;\n    };\n    const U32$needed_depth = x0 => U32$needed_depth$(x0);\n\n    function Word$shift_left1$aux$(_word$2, _prev$3) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $131 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $133 = Word$i$(Word$shift_left1$aux$($131, Bool$false));\n                    var $132 = $133;\n                } else {\n                    var $134 = Word$o$(Word$shift_left1$aux$($131, Bool$false));\n                    var $132 = $134;\n                };\n                var $130 = $132;\n                break;\n            case 'Word.i':\n                var $135 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $137 = Word$i$(Word$shift_left1$aux$($135, Bool$true));\n                    var $136 = $137;\n                } else {\n                    var $138 = Word$o$(Word$shift_left1$aux$($135, Bool$true));\n                    var $136 = $138;\n                };\n                var $130 = $136;\n                break;\n            case 'Word.e':\n                var $139 = Word$e;\n                var $130 = $139;\n                break;\n        };\n        return $130;\n    };\n    const Word$shift_left1$aux = x0 => x1 => Word$shift_left1$aux$(x0, x1);\n\n    function Word$shift_left1$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $141 = self.pred;\n                var $142 = Word$o$(Word$shift_left1$aux$($141, Bool$false));\n                var $140 = $142;\n                break;\n            case 'Word.i':\n                var $143 = self.pred;\n                var $144 = Word$o$(Word$shift_left1$aux$($143, Bool$true));\n                var $140 = $144;\n                break;\n            case 'Word.e':\n                var $145 = Word$e;\n                var $140 = $145;\n                break;\n        };\n        return $140;\n    };\n    const Word$shift_left1 = x0 => Word$shift_left1$(x0);\n\n    function Word$adder$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $147 = self.pred;\n                var $148 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $150 = self.pred;\n                            var $151 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $153 = Word$i$(Word$adder$(_a$pred$10, $150, Bool$false));\n                                    var $152 = $153;\n                                } else {\n                                    var $154 = Word$o$(Word$adder$(_a$pred$10, $150, Bool$false));\n                                    var $152 = $154;\n                                };\n                                return $152;\n                            });\n                            var $149 = $151;\n                            break;\n                        case 'Word.i':\n                            var $155 = self.pred;\n                            var $156 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $158 = Word$o$(Word$adder$(_a$pred$10, $155, Bool$true));\n                                    var $157 = $158;\n                                } else {\n                                    var $159 = Word$i$(Word$adder$(_a$pred$10, $155, Bool$false));\n                                    var $157 = $159;\n                                };\n                                return $157;\n                            });\n                            var $149 = $156;\n                            break;\n                        case 'Word.e':\n                            var $160 = (_a$pred$8 => {\n                                var $161 = Word$e;\n                                return $161;\n                            });\n                            var $149 = $160;\n                            break;\n                    };\n                    var $149 = $149($147);\n                    return $149;\n                });\n                var $146 = $148;\n                break;\n            case 'Word.i':\n                var $162 = self.pred;\n                var $163 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $165 = self.pred;\n                            var $166 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $168 = Word$o$(Word$adder$(_a$pred$10, $165, Bool$true));\n                                    var $167 = $168;\n                                } else {\n                                    var $169 = Word$i$(Word$adder$(_a$pred$10, $165, Bool$false));\n                                    var $167 = $169;\n                                };\n                                return $167;\n                            });\n                            var $164 = $166;\n                            break;\n                        case 'Word.i':\n                            var $170 = self.pred;\n                            var $171 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $173 = Word$i$(Word$adder$(_a$pred$10, $170, Bool$true));\n                                    var $172 = $173;\n                                } else {\n                                    var $174 = Word$o$(Word$adder$(_a$pred$10, $170, Bool$true));\n                                    var $172 = $174;\n                                };\n                                return $172;\n                            });\n                            var $164 = $171;\n                            break;\n                        case 'Word.e':\n                            var $175 = (_a$pred$8 => {\n                                var $176 = Word$e;\n                                return $176;\n                            });\n                            var $164 = $175;\n                            break;\n                    };\n                    var $164 = $164($162);\n                    return $164;\n                });\n                var $146 = $163;\n                break;\n            case 'Word.e':\n                var $177 = (_b$5 => {\n                    var $178 = Word$e;\n                    return $178;\n                });\n                var $146 = $177;\n                break;\n        };\n        var $146 = $146(_b$3);\n        return $146;\n    };\n    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);\n\n    function Word$add$(_a$2, _b$3) {\n        var $179 = Word$adder$(_a$2, _b$3, Bool$false);\n        return $179;\n    };\n    const Word$add = x0 => x1 => Word$add$(x0, x1);\n\n    function Word$mul$go$(_a$3, _b$4, _acc$5) {\n        var Word$mul$go$ = (_a$3, _b$4, _acc$5) => ({\n            ctr: 'TCO',\n            arg: [_a$3, _b$4, _acc$5]\n        });\n        var Word$mul$go = _a$3 => _b$4 => _acc$5 => Word$mul$go$(_a$3, _b$4, _acc$5);\n        var arg = [_a$3, _b$4, _acc$5];\n        while (true) {\n            let [_a$3, _b$4, _acc$5] = arg;\n            var R = (() => {\n                var self = _a$3;\n                switch (self._) {\n                    case 'Word.o':\n                        var $180 = self.pred;\n                        var $181 = Word$mul$go$($180, Word$shift_left1$(_b$4), _acc$5);\n                        return $181;\n                    case 'Word.i':\n                        var $182 = self.pred;\n                        var $183 = Word$mul$go$($182, Word$shift_left1$(_b$4), Word$add$(_b$4, _acc$5));\n                        return $183;\n                    case 'Word.e':\n                        var $184 = _acc$5;\n                        return $184;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mul$go = x0 => x1 => x2 => Word$mul$go$(x0, x1, x2);\n\n    function Word$mul$(_size$1, _a$2, _b$3) {\n        var $185 = Word$mul$go$(_a$2, _b$3, Word$zero$(_size$1));\n        return $185;\n    };\n    const Word$mul = x0 => x1 => x2 => Word$mul$(x0, x1, x2);\n    const U32$mul = a0 => a1 => ((a0 * a1) >>> 0);\n\n    function Image3D$new$(_length$1, _capacity$2, _buffer$3) {\n        var $186 = ({\n            _: 'Image3D.new',\n            'length': _length$1,\n            'capacity': _capacity$2,\n            'buffer': _buffer$3\n        });\n        return $186;\n    };\n    const Image3D$new = x0 => x1 => x2 => Image3D$new$(x0, x1, x2);\n\n    function Image3D$alloc_capacity$(_capacity$1) {\n        var _buffer$2 = (new Uint32Array(2 ** Number(U32$needed_depth$(((2 * _capacity$1) >>> 0)))));\n        var $187 = Image3D$new$(0, _capacity$1, _buffer$2);\n        return $187;\n    };\n    const Image3D$alloc_capacity = x0 => Image3D$alloc_capacity$(x0);\n\n    function Web$Kaelin$Entity$new$(_color$1) {\n        var $188 = ({\n            _: 'Web.Kaelin.Entity.new',\n            'color': _color$1\n        });\n        return $188;\n    };\n    const Web$Kaelin$Entity$new = x0 => Web$Kaelin$Entity$new$(x0);\n\n    function Word$or$(_a$2, _b$3) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $190 = self.pred;\n                var $191 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $193 = self.pred;\n                            var $194 = (_a$pred$9 => {\n                                var $195 = Word$o$(Word$or$(_a$pred$9, $193));\n                                return $195;\n                            });\n                            var $192 = $194;\n                            break;\n                        case 'Word.i':\n                            var $196 = self.pred;\n                            var $197 = (_a$pred$9 => {\n                                var $198 = Word$i$(Word$or$(_a$pred$9, $196));\n                                return $198;\n                            });\n                            var $192 = $197;\n                            break;\n                        case 'Word.e':\n                            var $199 = (_a$pred$7 => {\n                                var $200 = Word$e;\n                                return $200;\n                            });\n                            var $192 = $199;\n                            break;\n                    };\n                    var $192 = $192($190);\n                    return $192;\n                });\n                var $189 = $191;\n                break;\n            case 'Word.i':\n                var $201 = self.pred;\n                var $202 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $204 = self.pred;\n                            var $205 = (_a$pred$9 => {\n                                var $206 = Word$i$(Word$or$(_a$pred$9, $204));\n                                return $206;\n                            });\n                            var $203 = $205;\n                            break;\n                        case 'Word.i':\n                            var $207 = self.pred;\n                            var $208 = (_a$pred$9 => {\n                                var $209 = Word$i$(Word$or$(_a$pred$9, $207));\n                                return $209;\n                            });\n                            var $203 = $208;\n                            break;\n                        case 'Word.e':\n                            var $210 = (_a$pred$7 => {\n                                var $211 = Word$e;\n                                return $211;\n                            });\n                            var $203 = $210;\n                            break;\n                    };\n                    var $203 = $203($201);\n                    return $203;\n                });\n                var $189 = $202;\n                break;\n            case 'Word.e':\n                var $212 = (_b$4 => {\n                    var $213 = Word$e;\n                    return $213;\n                });\n                var $189 = $212;\n                break;\n        };\n        var $189 = $189(_b$3);\n        return $189;\n    };\n    const Word$or = x0 => x1 => Word$or$(x0, x1);\n    const U32$or = a0 => a1 => (a0 | a1);\n    const U32$shl = a0 => a1 => (a0 << a1);\n    const Col32$new = a0 => a1 => a2 => a3 => ((0 | a0 | (a1 << 8) | (a2 << 16) | (a3 << 24)));\n\n    function Web$Kaelin$Coord$new$(_i$1, _j$2) {\n        var $214 = ({\n            _: 'Web.Kaelin.Coord.new',\n            'i': _i$1,\n            'j': _j$2\n        });\n        return $214;\n    };\n    const Web$Kaelin$Coord$new = x0 => x1 => Web$Kaelin$Coord$new$(x0, x1);\n\n    function BitsMap$(_A$1) {\n        var $215 = null;\n        return $215;\n    };\n    const BitsMap = x0 => BitsMap$(x0);\n\n    function Map$(_V$1) {\n        var $216 = null;\n        return $216;\n    };\n    const Map = x0 => Map$(x0);\n    const BitsMap$new = ({\n        _: 'BitsMap.new'\n    });\n\n    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {\n        var $217 = ({\n            _: 'BitsMap.tie',\n            'val': _val$2,\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $217;\n    };\n    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);\n\n    function Maybe$some$(_value$2) {\n        var $218 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $218;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n\n    function BitsMap$set$(_bits$2, _val$3, _map$4) {\n        var self = _bits$2;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $220 = self.slice(0, -1);\n                var self = _map$4;\n                switch (self._) {\n                    case 'BitsMap.tie':\n                        var $222 = self.val;\n                        var $223 = self.lft;\n                        var $224 = self.rgt;\n                        var $225 = BitsMap$tie$($222, BitsMap$set$($220, _val$3, $223), $224);\n                        var $221 = $225;\n                        break;\n                    case 'BitsMap.new':\n                        var $226 = BitsMap$tie$(Maybe$none, BitsMap$set$($220, _val$3, BitsMap$new), BitsMap$new);\n                        var $221 = $226;\n                        break;\n                };\n                var $219 = $221;\n                break;\n            case 'i':\n                var $227 = self.slice(0, -1);\n                var self = _map$4;\n                switch (self._) {\n                    case 'BitsMap.tie':\n                        var $229 = self.val;\n                        var $230 = self.lft;\n                        var $231 = self.rgt;\n                        var $232 = BitsMap$tie$($229, $230, BitsMap$set$($227, _val$3, $231));\n                        var $228 = $232;\n                        break;\n                    case 'BitsMap.new':\n                        var $233 = BitsMap$tie$(Maybe$none, BitsMap$new, BitsMap$set$($227, _val$3, BitsMap$new));\n                        var $228 = $233;\n                        break;\n                };\n                var $219 = $228;\n                break;\n            case 'e':\n                var self = _map$4;\n                switch (self._) {\n                    case 'BitsMap.tie':\n                        var $235 = self.lft;\n                        var $236 = self.rgt;\n                        var $237 = BitsMap$tie$(Maybe$some$(_val$3), $235, $236);\n                        var $234 = $237;\n                        break;\n                    case 'BitsMap.new':\n                        var $238 = BitsMap$tie$(Maybe$some$(_val$3), BitsMap$new, BitsMap$new);\n                        var $234 = $238;\n                        break;\n                };\n                var $219 = $234;\n                break;\n        };\n        return $219;\n    };\n    const BitsMap$set = x0 => x1 => x2 => BitsMap$set$(x0, x1, x2);\n    const Bits$e = '';\n    const Bits$o = a0 => (a0 + '0');\n    const Bits$i = a0 => (a0 + '1');\n    const Bits$concat = a0 => a1 => (a1 + a0);\n\n    function Word$to_bits$(_a$2) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $240 = self.pred;\n                var $241 = (Word$to_bits$($240) + '0');\n                var $239 = $241;\n                break;\n            case 'Word.i':\n                var $242 = self.pred;\n                var $243 = (Word$to_bits$($242) + '1');\n                var $239 = $243;\n                break;\n            case 'Word.e':\n                var $244 = Bits$e;\n                var $239 = $244;\n                break;\n        };\n        return $239;\n    };\n    const Word$to_bits = x0 => Word$to_bits$(x0);\n    const U16$to_bits = a0 => (u16_to_bits(a0));\n\n    function String$to_bits$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $246 = Bits$e;\n            var $245 = $246;\n        } else {\n            var $247 = self.charCodeAt(0);\n            var $248 = self.slice(1);\n            var $249 = (String$to_bits$($248) + (u16_to_bits($247)));\n            var $245 = $249;\n        };\n        return $245;\n    };\n    const String$to_bits = x0 => String$to_bits$(x0);\n\n    function Map$from_list$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $251 = self.head;\n                var $252 = self.tail;\n                var self = $251;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $254 = self.fst;\n                        var $255 = self.snd;\n                        var $256 = BitsMap$set$(String$to_bits$($254), $255, Map$from_list$($252));\n                        var $253 = $256;\n                        break;\n                };\n                var $250 = $253;\n                break;\n            case 'List.nil':\n                var $257 = BitsMap$new;\n                var $250 = $257;\n                break;\n        };\n        return $250;\n    };\n    const Map$from_list = x0 => Map$from_list$(x0);\n\n    function List$(_A$1) {\n        var $258 = null;\n        return $258;\n    };\n    const List = x0 => List$(x0);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function Pair$(_A$1, _B$2) {\n        var $259 = null;\n        return $259;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n\n    function String$cons$(_head$1, _tail$2) {\n        var $260 = (String.fromCharCode(_head$1) + _tail$2);\n        return $260;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function List$fold$(_list$2, _nil$4, _cons$5) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.cons':\n                var $262 = self.head;\n                var $263 = self.tail;\n                var $264 = _cons$5($262)(List$fold$($263, _nil$4, _cons$5));\n                var $261 = $264;\n                break;\n            case 'List.nil':\n                var $265 = _nil$4;\n                var $261 = $265;\n                break;\n        };\n        return $261;\n    };\n    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);\n\n    function Either$(_A$1, _B$2) {\n        var $266 = null;\n        return $266;\n    };\n    const Either = x0 => x1 => Either$(x0, x1);\n\n    function Either$left$(_value$3) {\n        var $267 = ({\n            _: 'Either.left',\n            'value': _value$3\n        });\n        return $267;\n    };\n    const Either$left = x0 => Either$left$(x0);\n\n    function Either$right$(_value$3) {\n        var $268 = ({\n            _: 'Either.right',\n            'value': _value$3\n        });\n        return $268;\n    };\n    const Either$right = x0 => Either$right$(x0);\n\n    function Nat$sub_rem$(_n$1, _m$2) {\n        var Nat$sub_rem$ = (_n$1, _m$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2]\n        });\n        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);\n        var arg = [_n$1, _m$2];\n        while (true) {\n            let [_n$1, _m$2] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $269 = Either$left$(_n$1);\n                    return $269;\n                } else {\n                    var $270 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $272 = Either$right$(Nat$succ$($270));\n                        var $271 = $272;\n                    } else {\n                        var $273 = (self - 1n);\n                        var $274 = Nat$sub_rem$($273, $270);\n                        var $271 = $274;\n                    };\n                    return $271;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $275 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $275;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n\n    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {\n        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _d$3]\n        });\n        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);\n        var arg = [_n$1, _m$2, _d$3];\n        while (true) {\n            let [_n$1, _m$2, _d$3] = arg;\n            var R = (() => {\n                var self = Nat$sub_rem$(_n$1, _m$2);\n                switch (self._) {\n                    case 'Either.left':\n                        var $276 = self.value;\n                        var $277 = Nat$div_mod$go$($276, _m$2, Nat$succ$(_d$3));\n                        return $277;\n                    case 'Either.right':\n                        var $278 = Pair$new$(_d$3, _n$1);\n                        return $278;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);\n    const Nat$div_mod = a0 => a1 => (({\n        _: 'Pair.new',\n        'fst': a0 / a1,\n        'snd': a0 % a1\n    }));\n\n    function List$cons$(_head$2, _tail$3) {\n        var $279 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $279;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {\n        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_base$1, _nat$2, _res$3]\n        });\n        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);\n        var arg = [_base$1, _nat$2, _res$3];\n        while (true) {\n            let [_base$1, _nat$2, _res$3] = arg;\n            var R = (() => {\n                var self = (({\n                    _: 'Pair.new',\n                    'fst': _nat$2 / _base$1,\n                    'snd': _nat$2 % _base$1\n                }));\n                switch (self._) {\n                    case 'Pair.new':\n                        var $280 = self.fst;\n                        var $281 = self.snd;\n                        var self = $280;\n                        if (self === 0n) {\n                            var $283 = List$cons$($281, _res$3);\n                            var $282 = $283;\n                        } else {\n                            var $284 = (self - 1n);\n                            var $285 = Nat$to_base$go$(_base$1, $280, List$cons$($281, _res$3));\n                            var $282 = $285;\n                        };\n                        return $282;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);\n\n    function Nat$to_base$(_base$1, _nat$2) {\n        var $286 = Nat$to_base$go$(_base$1, _nat$2, List$nil);\n        return $286;\n    };\n    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);\n    const String$nil = '';\n\n    function Nat$mod$go$(_n$1, _m$2, _r$3) {\n        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _r$3]\n        });\n        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);\n        var arg = [_n$1, _m$2, _r$3];\n        while (true) {\n            let [_n$1, _m$2, _r$3] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $287 = Nat$mod$go$(_n$1, _r$3, _m$2);\n                    return $287;\n                } else {\n                    var $288 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $290 = _r$3;\n                        var $289 = $290;\n                    } else {\n                        var $291 = (self - 1n);\n                        var $292 = Nat$mod$go$($291, $288, Nat$succ$(_r$3));\n                        var $289 = $292;\n                    };\n                    return $289;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);\n    const Nat$mod = a0 => a1 => (a0 % a1);\n    const Bool$and = a0 => a1 => (a0 && a1);\n    const Nat$gtn = a0 => a1 => (a0 > a1);\n    const Nat$lte = a0 => a1 => (a0 <= a1);\n\n    function Maybe$(_A$1) {\n        var $293 = null;\n        return $293;\n    };\n    const Maybe = x0 => Maybe$(x0);\n\n    function List$at$(_index$2, _list$3) {\n        var List$at$ = (_index$2, _list$3) => ({\n            ctr: 'TCO',\n            arg: [_index$2, _list$3]\n        });\n        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);\n        var arg = [_index$2, _list$3];\n        while (true) {\n            let [_index$2, _list$3] = arg;\n            var R = (() => {\n                var self = _list$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $294 = self.head;\n                        var $295 = self.tail;\n                        var self = _index$2;\n                        if (self === 0n) {\n                            var $297 = Maybe$some$($294);\n                            var $296 = $297;\n                        } else {\n                            var $298 = (self - 1n);\n                            var $299 = List$at$($298, $295);\n                            var $296 = $299;\n                        };\n                        return $296;\n                    case 'List.nil':\n                        var $300 = Maybe$none;\n                        return $300;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$at = x0 => x1 => List$at$(x0, x1);\n\n    function Nat$show_digit$(_base$1, _n$2) {\n        var _m$3 = (_n$2 % _base$1);\n        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n        var self = ((_base$1 > 0n) && (_base$1 <= 64n));\n        if (self) {\n            var self = List$at$(_m$3, _base64$4);\n            switch (self._) {\n                case 'Maybe.some':\n                    var $303 = self.value;\n                    var $304 = $303;\n                    var $302 = $304;\n                    break;\n                case 'Maybe.none':\n                    var $305 = 35;\n                    var $302 = $305;\n                    break;\n            };\n            var $301 = $302;\n        } else {\n            var $306 = 35;\n            var $301 = $306;\n        };\n        return $301;\n    };\n    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);\n\n    function Nat$to_string_base$(_base$1, _nat$2) {\n        var $307 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {\n            var $308 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);\n            return $308;\n        }));\n        return $307;\n    };\n    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);\n\n    function Word$fold$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var self = _word$6;\n        switch (self._) {\n            case 'Word.o':\n                var $310 = self.pred;\n                var $311 = _w0$4(Word$fold$(_nil$3, _w0$4, _w1$5, $310));\n                var $309 = $311;\n                break;\n            case 'Word.i':\n                var $312 = self.pred;\n                var $313 = _w1$5(Word$fold$(_nil$3, _w0$4, _w1$5, $312));\n                var $309 = $313;\n                break;\n            case 'Word.e':\n                var $314 = _nil$3;\n                var $309 = $314;\n                break;\n        };\n        return $309;\n    };\n    const Word$fold = x0 => x1 => x2 => x3 => Word$fold$(x0, x1, x2, x3);\n    const Nat$add = a0 => a1 => (a0 + a1);\n    const Nat$mul = a0 => a1 => (a0 * a1);\n\n    function Word$to_nat$(_word$2) {\n        var $315 = Word$fold$(0n, a1 => (2n * a1), (_x$4 => {\n            var $316 = Nat$succ$((2n * _x$4));\n            return $316;\n        }), _word$2);\n        return $315;\n    };\n    const Word$to_nat = x0 => Word$to_nat$(x0);\n\n    function U32$to_nat$(_a$1) {\n        var self = _a$1;\n        switch ('u32') {\n            case 'u32':\n                var $318 = u32_to_word(self);\n                var $319 = Word$to_nat$($318);\n                var $317 = $319;\n                break;\n        };\n        return $317;\n    };\n    const U32$to_nat = x0 => U32$to_nat$(x0);\n\n    function U32$to_string$(_n$1) {\n        var $320 = Nat$to_string_base$(10n, U32$to_nat$(_n$1));\n        return $320;\n    };\n    const U32$to_string = x0 => U32$to_string$(x0);\n\n    function Web$Kaelin$Coord$show$(_coord$1) {\n        var self = _coord$1;\n        switch (self._) {\n            case 'Web.Kaelin.Coord.new':\n                var $322 = self.i;\n                var $323 = self.j;\n                var $324 = (U32$to_string$($322) + (\":\" + U32$to_string$($323)));\n                var $321 = $324;\n                break;\n        };\n        return $321;\n    };\n    const Web$Kaelin$Coord$show = x0 => Web$Kaelin$Coord$show$(x0);\n\n    function Map$set$(_key$2, _val$3, _map$4) {\n        var $325 = BitsMap$set$(String$to_bits$(_key$2), _val$3, _map$4);\n        return $325;\n    };\n    const Map$set = x0 => x1 => x2 => Map$set$(x0, x1, x2);\n\n    function Maybe$default$(_m$2, _a$3) {\n        var self = _m$2;\n        switch (self._) {\n            case 'Maybe.some':\n                var $327 = self.value;\n                var $328 = $327;\n                var $326 = $328;\n                break;\n            case 'Maybe.none':\n                var $329 = _a$3;\n                var $326 = $329;\n                break;\n        };\n        return $326;\n    };\n    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);\n\n    function BitsMap$get$(_bits$2, _map$3) {\n        var BitsMap$get$ = (_bits$2, _map$3) => ({\n            ctr: 'TCO',\n            arg: [_bits$2, _map$3]\n        });\n        var BitsMap$get = _bits$2 => _map$3 => BitsMap$get$(_bits$2, _map$3);\n        var arg = [_bits$2, _map$3];\n        while (true) {\n            let [_bits$2, _map$3] = arg;\n            var R = (() => {\n                var self = _bits$2;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $330 = self.slice(0, -1);\n                        var self = _map$3;\n                        switch (self._) {\n                            case 'BitsMap.tie':\n                                var $332 = self.lft;\n                                var $333 = BitsMap$get$($330, $332);\n                                var $331 = $333;\n                                break;\n                            case 'BitsMap.new':\n                                var $334 = Maybe$none;\n                                var $331 = $334;\n                                break;\n                        };\n                        return $331;\n                    case 'i':\n                        var $335 = self.slice(0, -1);\n                        var self = _map$3;\n                        switch (self._) {\n                            case 'BitsMap.tie':\n                                var $337 = self.rgt;\n                                var $338 = BitsMap$get$($335, $337);\n                                var $336 = $338;\n                                break;\n                            case 'BitsMap.new':\n                                var $339 = Maybe$none;\n                                var $336 = $339;\n                                break;\n                        };\n                        return $336;\n                    case 'e':\n                        var self = _map$3;\n                        switch (self._) {\n                            case 'BitsMap.tie':\n                                var $341 = self.val;\n                                var $342 = $341;\n                                var $340 = $342;\n                                break;\n                            case 'BitsMap.new':\n                                var $343 = Maybe$none;\n                                var $340 = $343;\n                                break;\n                        };\n                        return $340;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const BitsMap$get = x0 => x1 => BitsMap$get$(x0, x1);\n\n    function Map$get$(_key$2, _map$3) {\n        var $344 = BitsMap$get$(String$to_bits$(_key$2), _map$3);\n        return $344;\n    };\n    const Map$get = x0 => x1 => Map$get$(x0, x1);\n\n    function Web$Kaelin$Map$push$(_coord$1, _ent$2, _map$3) {\n        var _key$4 = Web$Kaelin$Coord$show$(_coord$1);\n        var $345 = Map$set$(_key$4, List$cons$(_ent$2, Maybe$default$(Map$get$(_key$4, _map$3), List$nil)), _map$3);\n        return $345;\n    };\n    const Web$Kaelin$Map$push = x0 => x1 => x2 => Web$Kaelin$Map$push$(x0, x1, x2);\n\n    function Web$Kaelin$State$game$(_room$1, _tick$2, _pos$3, _map$4) {\n        var $346 = ({\n            _: 'Web.Kaelin.State.game',\n            'room': _room$1,\n            'tick': _tick$2,\n            'pos': _pos$3,\n            'map': _map$4\n        });\n        return $346;\n    };\n    const Web$Kaelin$State$game = x0 => x1 => x2 => x3 => Web$Kaelin$State$game$(x0, x1, x2, x3);\n\n    function App$Render$txt$(_text$1) {\n        var $347 = ({\n            _: 'App.Render.txt',\n            'text': _text$1\n        });\n        return $347;\n    };\n    const App$Render$txt = x0 => App$Render$txt$(x0);\n\n    function Image3D$set_length$(_length$1, _img$2) {\n        var self = _img$2;\n        switch (self._) {\n            case 'Image3D.new':\n                var $349 = self.capacity;\n                var $350 = self.buffer;\n                var $351 = Image3D$new$(_length$1, $349, $350);\n                var $348 = $351;\n                break;\n        };\n        return $348;\n    };\n    const Image3D$set_length = x0 => x1 => Image3D$set_length$(x0, x1);\n\n    function Image3D$clear$(_img$1) {\n        var $352 = Image3D$set_length$(0, _img$1);\n        return $352;\n    };\n    const Image3D$clear = x0 => Image3D$clear$(x0);\n    const U32$for = a0 => a1 => a2 => a3 => (u32_for(a0, a1, a2, a3));\n    const Web$Kaelin$Coord$hexagon_radius = 10;\n\n    function Word$div$(_a$2, _b$3) {\n        var Word$div$ = (_a$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3]\n        });\n        var Word$div = _a$2 => _b$3 => Word$div$(_a$2, _b$3);\n        var arg = [_a$2, _b$3];\n        while (true) {\n            let [_a$2, _b$3] = arg;\n            var R = Word$div$(_a$2, _b$3);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$div = x0 => x1 => Word$div$(x0, x1);\n    const U32$div = a0 => a1 => ((a0 / a1) >>> 0);\n    const U32$add = a0 => a1 => ((a0 + a1) >>> 0);\n\n    function Word$mod$(_a$2, _b$3) {\n        var Word$mod$ = (_a$2, _b$3) => ({\n            ctr: 'TCO',\n            arg: [_a$2, _b$3]\n        });\n        var Word$mod = _a$2 => _b$3 => Word$mod$(_a$2, _b$3);\n        var arg = [_a$2, _b$3];\n        while (true) {\n            let [_a$2, _b$3] = arg;\n            var R = Word$mod$(_a$2, _b$3);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mod = x0 => x1 => Word$mod$(x0, x1);\n    const U32$mod = a0 => a1 => (a0 % a1);\n\n    function Web$Kaelin$Coord$to_screen_xy$(_coord$1) {\n        var self = _coord$1;\n        switch (self._) {\n            case 'Web.Kaelin.Coord.new':\n                var $354 = self.i;\n                var $355 = self.j;\n                var _i$4 = $354;\n                var _j$5 = $355;\n                var _rad$6 = Web$Kaelin$Coord$hexagon_radius;\n                var _hlf$7 = ((_rad$6 / 2) >>> 0);\n                var _cx$8 = (Math.max(128 - ((_rad$6 * 4) >>> 0), 0));\n                var _cx$9 = ((_cx$8 + ((((_rad$6 * 2) >>> 0) * _i$4) >>> 0)) >>> 0);\n                var _cy$10 = (Math.max(128 - ((_hlf$7 * 5) >>> 0), 0));\n                var _cy$11 = ((_cy$10 + ((((_hlf$7 * 3) >>> 0) * _j$5) >>> 0)) >>> 0);\n                var self = ((_j$5 % 2) === 0);\n                if (self) {\n                    var $357 = _cx$9;\n                    var _cx$12 = $357;\n                } else {\n                    var $358 = ((_cx$9 + _rad$6) >>> 0);\n                    var _cx$12 = $358;\n                };\n                var $356 = Pair$new$(_cx$12, _cy$11);\n                var $353 = $356;\n                break;\n        };\n        return $353;\n    };\n    const Web$Kaelin$Coord$to_screen_xy = x0 => Web$Kaelin$Coord$to_screen_xy$(x0);\n    const Bool$or = a0 => a1 => (a0 || a1);\n\n    function Word$trim$(_new_size$2, _word$3) {\n        var self = _new_size$2;\n        if (self === 0n) {\n            var $360 = Word$e;\n            var $359 = $360;\n        } else {\n            var $361 = (self - 1n);\n            var self = _word$3;\n            switch (self._) {\n                case 'Word.o':\n                    var $363 = self.pred;\n                    var $364 = Word$o$(Word$trim$($361, $363));\n                    var $362 = $364;\n                    break;\n                case 'Word.i':\n                    var $365 = self.pred;\n                    var $366 = Word$i$(Word$trim$($361, $365));\n                    var $362 = $366;\n                    break;\n                case 'Word.e':\n                    var $367 = Word$o$(Word$trim$($361, Word$e));\n                    var $362 = $367;\n                    break;\n            };\n            var $359 = $362;\n        };\n        return $359;\n    };\n    const Word$trim = x0 => x1 => Word$trim$(x0, x1);\n    const Unit$new = 1;\n\n    function Array$extract_tip$(_arr$2) {\n        var self = _arr$2;\n        switch (self._) {\n            case 'Array.tip':\n                var $369 = self.value;\n                var $370 = $369;\n                var $368 = $370;\n                break;\n            case 'Array.tie':\n                var $371 = Unit$new;\n                var $368 = $371;\n                break;\n        };\n        return $368;\n    };\n    const Array$extract_tip = x0 => Array$extract_tip$(x0);\n\n    function Array$extract_tie$(_arr$3) {\n        var self = _arr$3;\n        switch (self._) {\n            case 'Array.tie':\n                var $373 = self.lft;\n                var $374 = self.rgt;\n                var $375 = Pair$new$($373, $374);\n                var $372 = $375;\n                break;\n            case 'Array.tip':\n                var $376 = Unit$new;\n                var $372 = $376;\n                break;\n        };\n        return $372;\n    };\n    const Array$extract_tie = x0 => Array$extract_tie$(x0);\n\n    function Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var Word$foldl$ = (_nil$3, _w0$4, _w1$5, _word$6) => ({\n            ctr: 'TCO',\n            arg: [_nil$3, _w0$4, _w1$5, _word$6]\n        });\n        var Word$foldl = _nil$3 => _w0$4 => _w1$5 => _word$6 => Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6);\n        var arg = [_nil$3, _w0$4, _w1$5, _word$6];\n        while (true) {\n            let [_nil$3, _w0$4, _w1$5, _word$6] = arg;\n            var R = (() => {\n                var self = _word$6;\n                switch (self._) {\n                    case 'Word.o':\n                        var $377 = self.pred;\n                        var $378 = Word$foldl$(_w0$4(_nil$3), _w0$4, _w1$5, $377);\n                        return $378;\n                    case 'Word.i':\n                        var $379 = self.pred;\n                        var $380 = Word$foldl$(_w1$5(_nil$3), _w0$4, _w1$5, $379);\n                        return $380;\n                    case 'Word.e':\n                        var $381 = _nil$3;\n                        return $381;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$foldl = x0 => x1 => x2 => x3 => Word$foldl$(x0, x1, x2, x3);\n\n    function Array$mut$(_idx$3, _f$4, _arr$5) {\n        var $382 = Word$foldl$((_arr$6 => {\n            var $383 = Array$tip$(_f$4(Array$extract_tip$(_arr$6)));\n            return $383;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $385 = self.fst;\n                    var $386 = self.snd;\n                    var $387 = Array$tie$(_rec$7($385), $386);\n                    var $384 = $387;\n                    break;\n            };\n            return $384;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $389 = self.fst;\n                    var $390 = self.snd;\n                    var $391 = Array$tie$($389, _rec$7($390));\n                    var $388 = $391;\n                    break;\n            };\n            return $388;\n        }), _idx$3)(_arr$5);\n        return $382;\n    };\n    const Array$mut = x0 => x1 => x2 => Array$mut$(x0, x1, x2);\n\n    function Array$set$(_idx$3, _val$4, _arr$5) {\n        var $392 = Array$mut$(_idx$3, (_x$6 => {\n            var $393 = _val$4;\n            return $393;\n        }), _arr$5);\n        return $392;\n    };\n    const Array$set = x0 => x1 => x2 => Array$set$(x0, x1, x2);\n    const Buffer32$set = a0 => a1 => a2 => ((a2[a0] = a1, a2));\n    const Image3D$set_pos = a0 => a1 => a2 => ((a2.buffer[a0 * 2] = a1, a2));\n    const Image3D$set_col = a0 => a1 => a2 => ((a2.buffer[a0 * 2 + 1] = a1, a2));\n    const Image3D$push = a0 => a1 => a2 => ((a2.buffer[a2.length * 2] = a0, a2.buffer[a2.length * 2 + 1] = a1, a2.length++, a2));\n    const Pos32$new = a0 => a1 => a2 => ((0 | a0 | (a1 << 12) | (a2 << 24)));\n\n    function Image3D$Draw$deresagon$(_cx$1, _cy$2, _cz$3, _rad$4, _col$5, _draw_a$6, _draw_b$7, _draw_c$8, _draw_d$9, _draw_e$10, _draw_f$11, _img$12) {\n        var _hlf$13 = ((_rad$4 / 2) >>> 0);\n        var _v0x$14 = ((_cx$1 + _rad$4) >>> 0);\n        var _v0y$15 = ((_cy$2 + _hlf$13) >>> 0);\n        var _v1x$16 = ((_cx$1 + _rad$4) >>> 0);\n        var _v1y$17 = (Math.max(_cy$2 - _hlf$13, 0));\n        var _v2x$18 = _cx$1;\n        var _v2y$19 = (Math.max(_cy$2 - _rad$4, 0));\n        var _v3x$20 = (Math.max(_cx$1 - _rad$4, 0));\n        var _v3y$21 = (Math.max(_cy$2 - _hlf$13, 0));\n        var _v4x$22 = (Math.max(_cx$1 - _rad$4, 0));\n        var _v4y$23 = ((_cy$2 + _hlf$13) >>> 0);\n        var _v5x$24 = _cx$1;\n        var _v5y$25 = ((_cy$2 + _rad$4) >>> 0);\n        var self = _draw_a$6;\n        if (self) {\n            var _img$26 = (() => {\n                var $396 = _img$12;\n                var $397 = 0;\n                var $398 = _rad$4;\n                let _img$27 = $396;\n                for (let _i$26 = $397; _i$26 < $398; ++_i$26) {\n                    var _px$28 = _v1x$16;\n                    var _py$29 = ((_v1y$17 + _i$26) >>> 0);\n                    var $396 = ((_img$27.buffer[_img$27.length * 2] = ((0 | _px$28 | (_py$29 << 12) | (_cz$3 << 24))), _img$27.buffer[_img$27.length * 2 + 1] = _col$5, _img$27.length++, _img$27));\n                    _img$27 = $396;\n                };\n                return _img$27;\n            })();\n            var $395 = _img$26;\n            var _img$26 = $395;\n        } else {\n            var $399 = _img$12;\n            var _img$26 = $399;\n        };\n        var self = _draw_d$9;\n        if (self) {\n            var _img$27 = (() => {\n                var $401 = _img$26;\n                var $402 = 0;\n                var $403 = _rad$4;\n                let _img$28 = $401;\n                for (let _i$27 = $402; _i$27 < $403; ++_i$27) {\n                    var _px$29 = _v3x$20;\n                    var _py$30 = ((_v3y$21 + _i$27) >>> 0);\n                    var $401 = ((_img$28.buffer[_img$28.length * 2] = ((0 | _px$29 | (_py$30 << 12) | (_cz$3 << 24))), _img$28.buffer[_img$28.length * 2 + 1] = _col$5, _img$28.length++, _img$28));\n                    _img$28 = $401;\n                };\n                return _img$28;\n            })();\n            var $400 = _img$27;\n            var _img$27 = $400;\n        } else {\n            var $404 = _img$26;\n            var _img$27 = $404;\n        };\n        var self = _draw_b$7;\n        if (self) {\n            var _img$28 = (() => {\n                var $406 = _img$27;\n                var $407 = 0;\n                var $408 = _rad$4;\n                let _img$29 = $406;\n                for (let _i$28 = $407; _i$28 < $408; ++_i$28) {\n                    var _px$30 = ((_v2x$18 + _i$28) >>> 0);\n                    var _py$31 = ((_v2y$19 + ((_i$28 / 2) >>> 0)) >>> 0);\n                    var $406 = ((_img$29.buffer[_img$29.length * 2] = ((0 | _px$30 | (_py$31 << 12) | (_cz$3 << 24))), _img$29.buffer[_img$29.length * 2 + 1] = _col$5, _img$29.length++, _img$29));\n                    _img$29 = $406;\n                };\n                return _img$29;\n            })();\n            var $405 = _img$28;\n            var _img$28 = $405;\n        } else {\n            var $409 = _img$27;\n            var _img$28 = $409;\n        };\n        var self = _draw_c$8;\n        if (self) {\n            var _img$29 = (() => {\n                var $411 = _img$28;\n                var $412 = 0;\n                var $413 = _rad$4;\n                let _img$30 = $411;\n                for (let _i$29 = $412; _i$29 < $413; ++_i$29) {\n                    var _px$31 = (Math.max(_v2x$18 - _i$29, 0));\n                    var _py$32 = ((_v2y$19 + ((_i$29 / 2) >>> 0)) >>> 0);\n                    var $411 = ((_img$30.buffer[_img$30.length * 2] = ((0 | _px$31 | (_py$32 << 12) | (_cz$3 << 24))), _img$30.buffer[_img$30.length * 2 + 1] = _col$5, _img$30.length++, _img$30));\n                    _img$30 = $411;\n                };\n                return _img$30;\n            })();\n            var $410 = _img$29;\n            var _img$29 = $410;\n        } else {\n            var $414 = _img$28;\n            var _img$29 = $414;\n        };\n        var self = _draw_f$11;\n        if (self) {\n            var _img$30 = (() => {\n                var $416 = _img$29;\n                var $417 = 0;\n                var $418 = _rad$4;\n                let _img$31 = $416;\n                for (let _i$30 = $417; _i$30 < $418; ++_i$30) {\n                    var _px$32 = (Math.max((Math.max(_v0x$14 - _i$30, 0)) - 1, 0));\n                    var _py$33 = ((_v0y$15 + ((_i$30 / 2) >>> 0)) >>> 0);\n                    var $416 = ((_img$31.buffer[_img$31.length * 2] = ((0 | _px$32 | (_py$33 << 12) | (_cz$3 << 24))), _img$31.buffer[_img$31.length * 2 + 1] = _col$5, _img$31.length++, _img$31));\n                    _img$31 = $416;\n                };\n                return _img$31;\n            })();\n            var $415 = _img$30;\n            var _img$30 = $415;\n        } else {\n            var $419 = _img$29;\n            var _img$30 = $419;\n        };\n        var self = _draw_e$10;\n        if (self) {\n            var _img$31 = (() => {\n                var $421 = _img$30;\n                var $422 = 0;\n                var $423 = _rad$4;\n                let _img$32 = $421;\n                for (let _i$31 = $422; _i$31 < $423; ++_i$31) {\n                    var _px$33 = ((((_v4x$22 + _i$31) >>> 0) + 1) >>> 0);\n                    var _py$34 = ((_v4y$23 + ((_i$31 / 2) >>> 0)) >>> 0);\n                    var $421 = ((_img$32.buffer[_img$32.length * 2] = ((0 | _px$33 | (_py$34 << 12) | (_cz$3 << 24))), _img$32.buffer[_img$32.length * 2 + 1] = _col$5, _img$32.length++, _img$32));\n                    _img$32 = $421;\n                };\n                return _img$32;\n            })();\n            var $420 = _img$31;\n            var _img$31 = $420;\n        } else {\n            var $424 = _img$30;\n            var _img$31 = $424;\n        };\n        var $394 = _img$31;\n        return $394;\n    };\n    const Image3D$Draw$deresagon = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => x9 => x10 => x11 => Image3D$Draw$deresagon$(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11);\n\n    function Web$Kaelin$Map$get$(_coord$1, _map$2) {\n        var $425 = Maybe$default$(Map$get$(Web$Kaelin$Coord$show$(_coord$1), _map$2), List$nil);\n        return $425;\n    };\n    const Web$Kaelin$Map$get = x0 => x1 => Web$Kaelin$Map$get$(x0, x1);\n    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));\n\n    function Image3D$Draw$square$(_x$1, _y$2, _z$3, _w$4, _h$5, _col$6, _img$7) {\n        var _siz$8 = ((_w$4 * _h$5) >>> 0);\n        var _w_2$9 = ((_w$4 / 2) >>> 0);\n        var _h_2$10 = ((_h$5 / 2) >>> 0);\n        var $426 = (() => {\n            var $427 = _img$7;\n            var $428 = 0;\n            var $429 = _siz$8;\n            let _pix$12 = $427;\n            for (let _idx$11 = $428; _idx$11 < $429; ++_idx$11) {\n                var _v_x$13 = (_idx$11 % _w$4);\n                var _v_y$14 = ((_idx$11 / _h$5) >>> 0);\n                var _p_x$15 = (Math.max(((_x$1 + _v_x$13) >>> 0) - _w_2$9, 0));\n                var _p_y$16 = (Math.max(((_y$2 + _v_y$14) >>> 0) - _h_2$10, 0));\n                var _pos$17 = ((0 | _p_x$15 | (_p_y$16 << 12) | (_z$3 << 24)));\n                var _col$18 = _col$6(_v_x$13)(_v_y$14);\n                var _pix$19 = ((_pix$12.buffer[_pix$12.length * 2] = _pos$17, _pix$12.buffer[_pix$12.length * 2 + 1] = _col$18, _pix$12.length++, _pix$12));\n                var $427 = _pix$19;\n                _pix$12 = $427;\n            };\n            return _pix$12;\n        })();\n        return $426;\n    };\n    const Image3D$Draw$square = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Image3D$Draw$square$(x0, x1, x2, x3, x4, x5, x6);\n\n    function Web$Kaelin$Draw$tile$(_coord$1, _map$2, _img$3) {\n        var self = _coord$1;\n        switch (self._) {\n            case 'Web.Kaelin.Coord.new':\n                var self = Web$Kaelin$Coord$to_screen_xy$(_coord$1);\n                switch (self._) {\n                    case 'Pair.new':\n                        var $432 = self.fst;\n                        var $433 = self.snd;\n                        var _tile$8 = Web$Kaelin$Map$get$(_coord$1, _map$2);\n                        var _img$9 = (() => {\n                            var $436 = _img$3;\n                            var $437 = _tile$8;\n                            let _img$10 = $436;\n                            let _ent$9;\n                            while ($437._ === 'List.cons') {\n                                _ent$9 = $437.head;\n                                var self = _ent$9;\n                                switch (self._) {\n                                    case 'Web.Kaelin.Entity.new':\n                                        var $438 = self.color;\n                                        var $439 = Image3D$Draw$square$($432, $433, 0, 4, 4, (_x$12 => _y$13 => {\n                                            var $440 = $438;\n                                            return $440;\n                                        }), _img$10);\n                                        var $436 = $439;\n                                        break;\n                                };\n                                _img$10 = $436;\n                                $437 = $437.tail;\n                            }\n                            return _img$10;\n                        })();\n                        var $434 = _img$9;\n                        var $431 = $434;\n                        break;\n                };\n                var $430 = $431;\n                break;\n        };\n        return $430;\n    };\n    const Web$Kaelin$Draw$tile = x0 => x1 => x2 => Web$Kaelin$Draw$tile$(x0, x1, x2);\n\n    function App$Render$pix$(_pixs$1) {\n        var $441 = ({\n            _: 'App.Render.pix',\n            'pixs': _pixs$1\n        });\n        return $441;\n    };\n    const App$Render$pix = x0 => App$Render$pix$(x0);\n\n    function App$Action$(_S$1) {\n        var $442 = null;\n        return $442;\n    };\n    const App$Action = x0 => App$Action$(x0);\n    const U16$eql = a0 => a1 => (a0 === a1);\n\n    function Web$Kaelin$Map$pop$(_coord$1, _map$2) {\n        var _key$3 = Web$Kaelin$Coord$show$(_coord$1);\n        var _tile$4 = Maybe$default$(Map$get$(_key$3, _map$2), List$nil);\n        var self = _tile$4;\n        switch (self._) {\n            case 'List.cons':\n                var $444 = self.head;\n                var $445 = self.tail;\n                var $446 = Pair$new$(Map$set$(_key$3, $445, _map$2), Maybe$some$($444));\n                var $443 = $446;\n                break;\n            case 'List.nil':\n                var $447 = Pair$new$(_map$2, Maybe$none);\n                var $443 = $447;\n                break;\n        };\n        return $443;\n    };\n    const Web$Kaelin$Map$pop = x0 => x1 => Web$Kaelin$Map$pop$(x0, x1);\n\n    function App$Action$state$(_value$2) {\n        var $448 = ({\n            _: 'App.Action.state',\n            'value': _value$2\n        });\n        return $448;\n    };\n    const App$Action$state = x0 => App$Action$state$(x0);\n\n    function App$new$(_init$2, _draw$3, _when$4) {\n        var $449 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4\n        });\n        return $449;\n    };\n    const App$new = x0 => x1 => x2 => App$new$(x0, x1, x2);\n    const Web$Kaelin = (() => {\n        var _img$1 = Image3D$alloc_capacity$(65536);\n        var _ent_r$2 = Web$Kaelin$Entity$new$(((0 | 255 | (0 << 8) | (0 << 16) | (255 << 24))));\n        var _ent_g$3 = Web$Kaelin$Entity$new$(((0 | 0 | (255 << 8) | (0 << 16) | (255 << 24))));\n        var _ent_b$4 = Web$Kaelin$Entity$new$(((0 | 0 | (0 << 8) | (255 << 16) | (255 << 24))));\n        var _Pos$5 = Web$Kaelin$Coord$new;\n        var _pos$6 = _Pos$5(0)(2);\n        var _map$7 = Map$from_list$(List$nil);\n        var _map$8 = Web$Kaelin$Map$push$(_Pos$5(0)(0), _ent_r$2, _map$7);\n        var _map$9 = Web$Kaelin$Map$push$(_Pos$5(1)(0), _ent_g$3, _map$8);\n        var _map$10 = Web$Kaelin$Map$push$(_pos$6, _ent_b$4, _map$9);\n        var _init$5 = Web$Kaelin$State$game$(\"0x000000000000\", 0n, _pos$6, _map$10);\n        var _draw$6 = (_state$6 => {\n            var self = _state$6;\n            switch (self._) {\n                case 'Web.Kaelin.State.game':\n                    var $452 = self.map;\n                    var _map$11 = $452;\n                    var _img$12 = Image3D$clear$(_img$1);\n                    var _col$13 = ((0 | 0 | (0 << 8) | (255 << 16) | (255 << 24)));\n                    var _rad$14 = 10;\n                    var _img$15 = (() => {\n                        var $454 = _img$12;\n                        var $455 = 0;\n                        var $456 = 5;\n                        let _img$16 = $454;\n                        for (let _j$15 = $455; _j$15 < $456; ++_j$15) {\n                            var _img$17 = (() => {\n                                var $457 = _img$16;\n                                var $458 = 0;\n                                var $459 = 5;\n                                let _img$18 = $457;\n                                for (let _i$17 = $458; _i$17 < $459; ++_i$17) {\n                                    var _coord$19 = Web$Kaelin$Coord$new$(_i$17, _j$15);\n                                    var self = Web$Kaelin$Coord$to_screen_xy$(_coord$19);\n                                    switch (self._) {\n                                        case 'Pair.new':\n                                            var $460 = self.fst;\n                                            var $461 = self.snd;\n                                            var _draw_e$22 = ((((_j$15 % 2) === 0) && (_i$17 === 0)) || (_j$15 === 4));\n                                            var _draw_f$23 = ((((_j$15 % 2) === 1) && (_i$17 === 4)) || (_j$15 === 4));\n                                            var _img$24 = Image3D$Draw$deresagon$($460, $461, 0, _rad$14, _col$13, Bool$true, Bool$true, Bool$true, Bool$true, _draw_e$22, _draw_f$23, _img$18);\n                                            var _img$25 = Web$Kaelin$Draw$tile$(_coord$19, _map$11, _img$24);\n                                            var $462 = _img$25;\n                                            var $457 = $462;\n                                            break;\n                                    };\n                                    _img$18 = $457;\n                                };\n                                return _img$18;\n                            })();\n                            var $454 = _img$17;\n                            _img$16 = $454;\n                        };\n                        return _img$16;\n                    })();\n                    var $453 = App$Render$pix$(_img$15);\n                    var $451 = $453;\n                    break;\n                case 'Web.Kaelin.State.init':\n                case 'Web.Kaelin.State.void':\n                    var $463 = App$Render$txt$(\"TODO: create the renderer for this game state mode\");\n                    var $451 = $463;\n                    break;\n            };\n            return $451;\n        });\n        var _when$7 = (_event$7 => _state$8 => {\n            var self = _event$7;\n            switch (self._) {\n                case 'App.Event.xkey':\n                    var $465 = self.down;\n                    var $466 = self.code;\n                    var self = $465;\n                    if (self) {\n                        var self = ($466 === 68);\n                        if (self) {\n                            var self = _state$8;\n                            switch (self._) {\n                                case 'Web.Kaelin.State.game':\n                                    var $470 = self.room;\n                                    var $471 = self.tick;\n                                    var $472 = self.pos;\n                                    var $473 = self.map;\n                                    var _old_pos$16 = $472;\n                                    var self = _old_pos$16;\n                                    switch (self._) {\n                                        case 'Web.Kaelin.Coord.new':\n                                            var $475 = self.i;\n                                            var $476 = self.j;\n                                            var $477 = Web$Kaelin$Coord$new$((($475 + 1) >>> 0), $476);\n                                            var _new_pos$17 = $477;\n                                            break;\n                                    };\n                                    var self = Web$Kaelin$Map$pop$(_old_pos$16, $473);\n                                    switch (self._) {\n                                        case 'Pair.new':\n                                            var $478 = self.fst;\n                                            var $479 = self.snd;\n                                            var self = $479;\n                                            switch (self._) {\n                                                case 'Maybe.some':\n                                                    var $481 = self.value;\n                                                    var $482 = Web$Kaelin$Map$push$(_new_pos$17, $481, $478);\n                                                    var _map$20 = $482;\n                                                    break;\n                                                case 'Maybe.none':\n                                                    var $483 = $478;\n                                                    var _map$20 = $483;\n                                                    break;\n                                            };\n                                            var _state$21 = Web$Kaelin$State$game$($470, $471, _new_pos$17, _map$20);\n                                            var $480 = List$cons$(App$Action$state$(_state$21), List$nil);\n                                            var $474 = $480;\n                                            break;\n                                    };\n                                    var $469 = $474;\n                                    break;\n                                case 'Web.Kaelin.State.init':\n                                case 'Web.Kaelin.State.void':\n                                    var $484 = List$nil;\n                                    var $469 = $484;\n                                    break;\n                            };\n                            var $468 = $469;\n                        } else {\n                            var $485 = List$nil;\n                            var $468 = $485;\n                        };\n                        var $467 = $468;\n                    } else {\n                        var $486 = List$nil;\n                        var $467 = $486;\n                    };\n                    var $464 = $467;\n                    break;\n                case 'App.Event.init':\n                case 'App.Event.tick':\n                case 'App.Event.post':\n                    var $487 = List$nil;\n                    var $464 = $487;\n                    break;\n            };\n            return $464;\n        });\n        var $450 = App$new$(_init$5, _draw$6, _when$7);\n        return $450;\n    })();\n    return {\n        'Buffer32.new': Buffer32$new,\n        'Array': Array,\n        'Array.tip': Array$tip,\n        'Array.tie': Array$tie,\n        'Array.alloc': Array$alloc,\n        'U32.new': U32$new,\n        'Word': Word,\n        'Word.e': Word$e,\n        'Word.o': Word$o,\n        'Word.zero': Word$zero,\n        'U32.zero': U32$zero,\n        'Buffer32.alloc': Buffer32$alloc,\n        'Bool.false': Bool$false,\n        'Bool.true': Bool$true,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.eql': Word$eql,\n        'Nat.succ': Nat$succ,\n        'Nat.zero': Nat$zero,\n        'U32.eql': U32$eql,\n        'Nat.apply': Nat$apply,\n        'Word.i': Word$i,\n        'Word.inc': Word$inc,\n        'U32.inc': U32$inc,\n        'Nat.to_u32': Nat$to_u32,\n        'U32.shr': U32$shr,\n        'U32.needed_depth.go': U32$needed_depth$go,\n        'Word.subber': Word$subber,\n        'Word.sub': Word$sub,\n        'U32.sub': U32$sub,\n        'U32.needed_depth': U32$needed_depth,\n        'Word.shift_left1.aux': Word$shift_left1$aux,\n        'Word.shift_left1': Word$shift_left1,\n        'Word.adder': Word$adder,\n        'Word.add': Word$add,\n        'Word.mul.go': Word$mul$go,\n        'Word.mul': Word$mul,\n        'U32.mul': U32$mul,\n        'Image3D.new': Image3D$new,\n        'Image3D.alloc_capacity': Image3D$alloc_capacity,\n        'Web.Kaelin.Entity.new': Web$Kaelin$Entity$new,\n        'Word.or': Word$or,\n        'U32.or': U32$or,\n        'U32.shl': U32$shl,\n        'Col32.new': Col32$new,\n        'Web.Kaelin.Coord.new': Web$Kaelin$Coord$new,\n        'BitsMap': BitsMap,\n        'Map': Map,\n        'BitsMap.new': BitsMap$new,\n        'BitsMap.tie': BitsMap$tie,\n        'Maybe.some': Maybe$some,\n        'Maybe.none': Maybe$none,\n        'BitsMap.set': BitsMap$set,\n        'Bits.e': Bits$e,\n        'Bits.o': Bits$o,\n        'Bits.i': Bits$i,\n        'Bits.concat': Bits$concat,\n        'Word.to_bits': Word$to_bits,\n        'U16.to_bits': U16$to_bits,\n        'String.to_bits': String$to_bits,\n        'Map.from_list': Map$from_list,\n        'List': List,\n        'List.nil': List$nil,\n        'Pair': Pair,\n        'String.cons': String$cons,\n        'String.concat': String$concat,\n        'List.fold': List$fold,\n        'Either': Either,\n        'Either.left': Either$left,\n        'Either.right': Either$right,\n        'Nat.sub_rem': Nat$sub_rem,\n        'Pair.new': Pair$new,\n        'Nat.div_mod.go': Nat$div_mod$go,\n        'Nat.div_mod': Nat$div_mod,\n        'List.cons': List$cons,\n        'Nat.to_base.go': Nat$to_base$go,\n        'Nat.to_base': Nat$to_base,\n        'String.nil': String$nil,\n        'Nat.mod.go': Nat$mod$go,\n        'Nat.mod': Nat$mod,\n        'Bool.and': Bool$and,\n        'Nat.gtn': Nat$gtn,\n        'Nat.lte': Nat$lte,\n        'Maybe': Maybe,\n        'List.at': List$at,\n        'Nat.show_digit': Nat$show_digit,\n        'Nat.to_string_base': Nat$to_string_base,\n        'Word.fold': Word$fold,\n        'Nat.add': Nat$add,\n        'Nat.mul': Nat$mul,\n        'Word.to_nat': Word$to_nat,\n        'U32.to_nat': U32$to_nat,\n        'U32.to_string': U32$to_string,\n        'Web.Kaelin.Coord.show': Web$Kaelin$Coord$show,\n        'Map.set': Map$set,\n        'Maybe.default': Maybe$default,\n        'BitsMap.get': BitsMap$get,\n        'Map.get': Map$get,\n        'Web.Kaelin.Map.push': Web$Kaelin$Map$push,\n        'Web.Kaelin.State.game': Web$Kaelin$State$game,\n        'App.Render.txt': App$Render$txt,\n        'Image3D.set_length': Image3D$set_length,\n        'Image3D.clear': Image3D$clear,\n        'U32.for': U32$for,\n        'Web.Kaelin.Coord.hexagon_radius': Web$Kaelin$Coord$hexagon_radius,\n        'Word.div': Word$div,\n        'U32.div': U32$div,\n        'U32.add': U32$add,\n        'Word.mod': Word$mod,\n        'U32.mod': U32$mod,\n        'Web.Kaelin.Coord.to_screen_xy': Web$Kaelin$Coord$to_screen_xy,\n        'Bool.or': Bool$or,\n        'Word.trim': Word$trim,\n        'Unit.new': Unit$new,\n        'Array.extract_tip': Array$extract_tip,\n        'Array.extract_tie': Array$extract_tie,\n        'Word.foldl': Word$foldl,\n        'Array.mut': Array$mut,\n        'Array.set': Array$set,\n        'Buffer32.set': Buffer32$set,\n        'Image3D.set_pos': Image3D$set_pos,\n        'Image3D.set_col': Image3D$set_col,\n        'Image3D.push': Image3D$push,\n        'Pos32.new': Pos32$new,\n        'Image3D.Draw.deresagon': Image3D$Draw$deresagon,\n        'Web.Kaelin.Map.get': Web$Kaelin$Map$get,\n        'List.for': List$for,\n        'Image3D.Draw.square': Image3D$Draw$square,\n        'Web.Kaelin.Draw.tile': Web$Kaelin$Draw$tile,\n        'App.Render.pix': App$Render$pix,\n        'App.Action': App$Action,\n        'U16.eql': U16$eql,\n        'Web.Kaelin.Map.pop': Web$Kaelin$Map$pop,\n        'App.Action.state': App$Action$state,\n        'App.new': App$new,\n        'Web.Kaelin': Web$Kaelin,\n    };\n})();"],"sourceRoot":""}