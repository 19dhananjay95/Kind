{"version":3,"sources":["webpack://kind-web/./src/apps/App.MiniMMO.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS,iCAAiC;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrfile":"661.index.js","sourcesContent":["module.exports = (function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    var bitsmap_new = {\n        _: 'BitsMap.new'\n    };\n    var bitsmap_tie = function(val, lft, rgt) {\n        return {\n            _: 'BitsMap.tip',\n            val,\n            lft,\n            rgt\n        };\n    }\n    var maybe_none = {\n        _: 'Maybe.none'\n    };\n    var maybe_some = function(value) {\n        return {\n            _: 'Maybe.some',\n            value\n        };\n    }\n    var bitsmap_get = function(bits, map) {\n        for (var i = bits.length - 1; i >= 0; --i) {\n            if (map._ !== 'BitsMap.new') {\n                map = bits[i] === '0' ? map.lft : map.rgt;\n            }\n        }\n        return map._ === 'BitsMap.new' ? maybe_none : map.val;\n    }\n    var bitsmap_set = function(bits, val, map, mode) {\n        var res = {\n            value: map\n        };\n        var key = 'value';\n        var obj = res;\n        for (var i = bits.length - 1; i >= 0; --i) {\n            var map = obj[key];\n            if (map._ === 'BitsMap.new') {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: maybe_none,\n                    lft: bitsmap_new,\n                    rgt: bitsmap_new\n                };\n            } else {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: map.val,\n                    lft: map.lft,\n                    rgt: map.rgt\n                };\n            }\n            obj = obj[key];\n            key = bits[i] === '0' ? 'lft' : 'rgt';\n        }\n        var map = obj[key];\n        if (map._ === 'BitsMap.new') {\n            var x = mode === 'del' ? maybe_none : {\n                _: 'Maybe.some',\n                value: val\n            };\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: bitsmap_new,\n                rgt: bitsmap_new\n            };\n        } else {\n            var x = mode === 'set' ? {\n                _: 'Maybe.some',\n                value: val\n            } : mode === 'del' ? maybe_none : map.val;\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: map.lft,\n                rgt: map.rgt\n            };\n        }\n        return res.value;\n    };\n    var list_for = list => nil => cons => {\n        while (list._ !== 'List.nil') {\n            nil = cons(list.head)(nil);\n            list = list.tail;\n        }\n        return nil;\n    };\n    const inst_unit = x => x(null);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c0;\n                return $2;\n            } else {\n                var $3 = c1;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c0;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c1($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');\n    const elim_bits = (x => {\n        var $14 = (() => c0 => c1 => c2 => {\n            var self = x;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'o':\n                    var $9 = self.slice(0, -1);\n                    var $10 = c1($9);\n                    return $10;\n                case 'i':\n                    var $11 = self.slice(0, -1);\n                    var $12 = c2($11);\n                    return $12;\n                case 'e':\n                    var $13 = c0;\n                    return $13;\n            };\n        })();\n        return $14;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $15 = u16_to_word(self);\n                    var $16 = c0($15);\n                    return $16;\n            };\n        })();\n        return $17;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $20 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $18 = u32_to_word(self);\n                    var $19 = c0($18);\n                    return $19;\n            };\n        })();\n        return $20;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $23 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $21 = u64_to_word(self);\n                    var $22 = c0($21);\n                    return $22;\n            };\n        })();\n        return $23;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $28 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $24 = c0;\n                return $24;\n            } else {\n                var $25 = self.charCodeAt(0);\n                var $26 = self.slice(1);\n                var $27 = c1($25)($26);\n                return $27;\n            };\n        })();\n        return $28;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $32 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $29 = buffer32_to_depth(self);\n                    var $30 = buffer32_to_u32array(self);\n                    var $31 = c0($29)($30);\n                    return $31;\n            };\n        })();\n        return $32;\n    });\n\n    function App$new$(_init$2, _draw$3, _when$4, _tick$5, _post$6) {\n        var $33 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4,\n            'tick': _tick$5,\n            'post': _post$6\n        });\n        return $33;\n    };\n    const App$new = x0 => x1 => x2 => x3 => x4 => App$new$(x0, x1, x2, x3, x4);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $34 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $34;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n    const App$State$new = Pair$new$(null, null);\n    const App$MiniMMO$State = App$State$new;\n\n    function App$Store$new$(_local$2, _global$3) {\n        var $35 = ({\n            _: 'App.Store.new',\n            'local': _local$2,\n            'global': _global$3\n        });\n        return $35;\n    };\n    const App$Store$new = x0 => x1 => App$Store$new$(x0, x1);\n    const Unit$new = null;\n\n    function App$MiniMMO$State$global$new$(_run$1, _map$2) {\n        var $36 = ({\n            _: 'App.MiniMMO.State.global.new',\n            'run': _run$1,\n            'map': _map$2\n        });\n        return $36;\n    };\n    const App$MiniMMO$State$global$new = x0 => x1 => App$MiniMMO$State$global$new$(x0, x1);\n\n    function U32$new$(_value$1) {\n        var $37 = word_to_u32(_value$1);\n        return $37;\n    };\n    const U32$new = x0 => U32$new$(x0);\n\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _f$3, _x$4]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [_n$2, _f$3, _x$4];\n        while (true) {\n            let [_n$2, _f$3, _x$4] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $38 = _x$4;\n                    return $38;\n                } else {\n                    var $39 = (self - 1n);\n                    var $40 = Nat$apply$($39, _f$3, _f$3(_x$4));\n                    return $40;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n\n    function Word$(_size$1) {\n        var $41 = null;\n        return $41;\n    };\n    const Word = x0 => Word$(x0);\n    const Word$e = ({\n        _: 'Word.e'\n    });\n\n    function Word$i$(_pred$2) {\n        var $42 = ({\n            _: 'Word.i',\n            'pred': _pred$2\n        });\n        return $42;\n    };\n    const Word$i = x0 => Word$i$(x0);\n\n    function Word$o$(_pred$2) {\n        var $43 = ({\n            _: 'Word.o',\n            'pred': _pred$2\n        });\n        return $43;\n    };\n    const Word$o = x0 => Word$o$(x0);\n\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $45 = self.pred;\n                var $46 = Word$i$($45);\n                var $44 = $46;\n                break;\n            case 'Word.i':\n                var $47 = self.pred;\n                var $48 = Word$o$(Word$inc$($47));\n                var $44 = $48;\n                break;\n            case 'Word.e':\n                var $49 = Word$e;\n                var $44 = $49;\n                break;\n        };\n        return $44;\n    };\n    const Word$inc = x0 => Word$inc$(x0);\n\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $51 = Word$e;\n            var $50 = $51;\n        } else {\n            var $52 = (self - 1n);\n            var $53 = Word$o$(Word$zero$($52));\n            var $50 = $53;\n        };\n        return $50;\n    };\n    const Word$zero = x0 => Word$zero$(x0);\n\n    function Nat$to_word$(_size$1, _n$2) {\n        var $54 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));\n        return $54;\n    };\n    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);\n\n    function Nat$succ$(_pred$1) {\n        var $55 = 1n + _pred$1;\n        return $55;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const Nat$to_u32 = a0 => (Number(a0) >>> 0);\n\n    function BitsMap$(_A$1) {\n        var $56 = null;\n        return $56;\n    };\n    const BitsMap = x0 => BitsMap$(x0);\n\n    function Map$(_V$1) {\n        var $57 = null;\n        return $57;\n    };\n    const Map = x0 => Map$(x0);\n    const BitsMap$new = ({\n        _: 'BitsMap.new'\n    });\n\n    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {\n        var $58 = ({\n            _: 'BitsMap.tie',\n            'val': _val$2,\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $58;\n    };\n    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);\n\n    function Maybe$some$(_value$2) {\n        var $59 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $59;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n    const BitsMap$set = a0 => a1 => a2 => (bitsmap_set(a0, a1, a2, 'set'));\n    const Bits$e = '';\n    const Bits$o = a0 => (a0 + '0');\n    const Bits$i = a0 => (a0 + '1');\n    const Bits$concat = a0 => a1 => (a1 + a0);\n\n    function Word$to_bits$(_a$2) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $61 = self.pred;\n                var $62 = (Word$to_bits$($61) + '0');\n                var $60 = $62;\n                break;\n            case 'Word.i':\n                var $63 = self.pred;\n                var $64 = (Word$to_bits$($63) + '1');\n                var $60 = $64;\n                break;\n            case 'Word.e':\n                var $65 = Bits$e;\n                var $60 = $65;\n                break;\n        };\n        return $60;\n    };\n    const Word$to_bits = x0 => Word$to_bits$(x0);\n    const U16$to_bits = a0 => (u16_to_bits(a0));\n\n    function String$to_bits$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $67 = Bits$e;\n            var $66 = $67;\n        } else {\n            var $68 = self.charCodeAt(0);\n            var $69 = self.slice(1);\n            var $70 = (String$to_bits$($69) + (u16_to_bits($68)));\n            var $66 = $70;\n        };\n        return $66;\n    };\n    const String$to_bits = x0 => String$to_bits$(x0);\n\n    function Map$from_list$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $72 = self.head;\n                var $73 = self.tail;\n                var self = $72;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $75 = self.fst;\n                        var $76 = self.snd;\n                        var $77 = (bitsmap_set(String$to_bits$($75), $76, Map$from_list$($73), 'set'));\n                        var $74 = $77;\n                        break;\n                };\n                var $71 = $74;\n                break;\n            case 'List.nil':\n                var $78 = BitsMap$new;\n                var $71 = $78;\n                break;\n        };\n        return $71;\n    };\n    const Map$from_list = x0 => Map$from_list$(x0);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function Pair$(_A$1, _B$2) {\n        var $79 = null;\n        return $79;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n    const App$MiniMMO$init = App$Store$new$(Unit$new, App$MiniMMO$State$global$new$(0, Map$from_list$(List$nil)));\n\n    function Pair$snd$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $81 = self.snd;\n                var $82 = $81;\n                var $80 = $82;\n                break;\n        };\n        return $80;\n    };\n    const Pair$snd = x0 => Pair$snd$(x0);\n    const App$State$global = Pair$snd;\n    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));\n\n    function List$(_A$1) {\n        var $83 = null;\n        return $83;\n    };\n    const List = x0 => List$(x0);\n\n    function List$cons$(_head$2, _tail$3) {\n        var $84 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $84;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function BitsMap$values$go$(_xs$2, _list$3) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'BitsMap.tie':\n                var $86 = self.val;\n                var $87 = self.lft;\n                var $88 = self.rgt;\n                var self = $86;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $90 = self.value;\n                        var $91 = List$cons$($90, _list$3);\n                        var _list0$7 = $91;\n                        break;\n                    case 'Maybe.none':\n                        var $92 = _list$3;\n                        var _list0$7 = $92;\n                        break;\n                };\n                var _list1$8 = BitsMap$values$go$($87, _list0$7);\n                var _list2$9 = BitsMap$values$go$($88, _list1$8);\n                var $89 = _list2$9;\n                var $85 = $89;\n                break;\n            case 'BitsMap.new':\n                var $93 = _list$3;\n                var $85 = $93;\n                break;\n        };\n        return $85;\n    };\n    const BitsMap$values$go = x0 => x1 => BitsMap$values$go$(x0, x1);\n\n    function Map$values$(_xs$2) {\n        var $94 = BitsMap$values$go$(_xs$2, List$nil);\n        return $94;\n    };\n    const Map$values = x0 => Map$values$(x0);\n\n    function String$cons$(_head$1, _tail$2) {\n        var $95 = (String.fromCharCode(_head$1) + _tail$2);\n        return $95;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function List$fold$(_list$2, _nil$4, _cons$5) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.cons':\n                var $97 = self.head;\n                var $98 = self.tail;\n                var $99 = _cons$5($97)(List$fold$($98, _nil$4, _cons$5));\n                var $96 = $99;\n                break;\n            case 'List.nil':\n                var $100 = _nil$4;\n                var $96 = $100;\n                break;\n        };\n        return $96;\n    };\n    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);\n\n    function Either$(_A$1, _B$2) {\n        var $101 = null;\n        return $101;\n    };\n    const Either = x0 => x1 => Either$(x0, x1);\n\n    function Either$left$(_value$3) {\n        var $102 = ({\n            _: 'Either.left',\n            'value': _value$3\n        });\n        return $102;\n    };\n    const Either$left = x0 => Either$left$(x0);\n\n    function Either$right$(_value$3) {\n        var $103 = ({\n            _: 'Either.right',\n            'value': _value$3\n        });\n        return $103;\n    };\n    const Either$right = x0 => Either$right$(x0);\n\n    function Nat$sub_rem$(_n$1, _m$2) {\n        var Nat$sub_rem$ = (_n$1, _m$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2]\n        });\n        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);\n        var arg = [_n$1, _m$2];\n        while (true) {\n            let [_n$1, _m$2] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $104 = Either$left$(_n$1);\n                    return $104;\n                } else {\n                    var $105 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $107 = Either$right$(Nat$succ$($105));\n                        var $106 = $107;\n                    } else {\n                        var $108 = (self - 1n);\n                        var $109 = Nat$sub_rem$($108, $105);\n                        var $106 = $109;\n                    };\n                    return $106;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);\n\n    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {\n        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _d$3]\n        });\n        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);\n        var arg = [_n$1, _m$2, _d$3];\n        while (true) {\n            let [_n$1, _m$2, _d$3] = arg;\n            var R = (() => {\n                var self = Nat$sub_rem$(_n$1, _m$2);\n                switch (self._) {\n                    case 'Either.left':\n                        var $110 = self.value;\n                        var $111 = Nat$div_mod$go$($110, _m$2, Nat$succ$(_d$3));\n                        return $111;\n                    case 'Either.right':\n                        var $112 = Pair$new$(_d$3, _n$1);\n                        return $112;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);\n    const Nat$div_mod = a0 => a1 => (({\n        _: 'Pair.new',\n        'fst': a0 / a1,\n        'snd': a0 % a1\n    }));\n\n    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {\n        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_base$1, _nat$2, _res$3]\n        });\n        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);\n        var arg = [_base$1, _nat$2, _res$3];\n        while (true) {\n            let [_base$1, _nat$2, _res$3] = arg;\n            var R = (() => {\n                var self = (({\n                    _: 'Pair.new',\n                    'fst': _nat$2 / _base$1,\n                    'snd': _nat$2 % _base$1\n                }));\n                switch (self._) {\n                    case 'Pair.new':\n                        var $113 = self.fst;\n                        var $114 = self.snd;\n                        var self = $113;\n                        if (self === 0n) {\n                            var $116 = List$cons$($114, _res$3);\n                            var $115 = $116;\n                        } else {\n                            var $117 = (self - 1n);\n                            var $118 = Nat$to_base$go$(_base$1, $113, List$cons$($114, _res$3));\n                            var $115 = $118;\n                        };\n                        return $115;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);\n\n    function Nat$to_base$(_base$1, _nat$2) {\n        var $119 = Nat$to_base$go$(_base$1, _nat$2, List$nil);\n        return $119;\n    };\n    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);\n    const String$nil = '';\n\n    function Nat$mod$go$(_n$1, _m$2, _r$3) {\n        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _r$3]\n        });\n        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);\n        var arg = [_n$1, _m$2, _r$3];\n        while (true) {\n            let [_n$1, _m$2, _r$3] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $120 = Nat$mod$go$(_n$1, _r$3, _m$2);\n                    return $120;\n                } else {\n                    var $121 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $123 = _r$3;\n                        var $122 = $123;\n                    } else {\n                        var $124 = (self - 1n);\n                        var $125 = Nat$mod$go$($124, $121, Nat$succ$(_r$3));\n                        var $122 = $125;\n                    };\n                    return $122;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);\n    const Nat$mod = a0 => a1 => (a0 % a1);\n    const Bool$false = false;\n    const Bool$and = a0 => a1 => (a0 && a1);\n    const Bool$true = true;\n    const Nat$gtn = a0 => a1 => (a0 > a1);\n    const Nat$lte = a0 => a1 => (a0 <= a1);\n\n    function Maybe$(_A$1) {\n        var $126 = null;\n        return $126;\n    };\n    const Maybe = x0 => Maybe$(x0);\n\n    function List$at$(_index$2, _list$3) {\n        var List$at$ = (_index$2, _list$3) => ({\n            ctr: 'TCO',\n            arg: [_index$2, _list$3]\n        });\n        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);\n        var arg = [_index$2, _list$3];\n        while (true) {\n            let [_index$2, _list$3] = arg;\n            var R = (() => {\n                var self = _list$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $127 = self.head;\n                        var $128 = self.tail;\n                        var self = _index$2;\n                        if (self === 0n) {\n                            var $130 = Maybe$some$($127);\n                            var $129 = $130;\n                        } else {\n                            var $131 = (self - 1n);\n                            var $132 = List$at$($131, $128);\n                            var $129 = $132;\n                        };\n                        return $129;\n                    case 'List.nil':\n                        var $133 = Maybe$none;\n                        return $133;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$at = x0 => x1 => List$at$(x0, x1);\n\n    function Nat$show_digit$(_base$1, _n$2) {\n        var _m$3 = (_n$2 % _base$1);\n        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n        var self = ((_base$1 > 0n) && (_base$1 <= 64n));\n        if (self) {\n            var self = List$at$(_m$3, _base64$4);\n            switch (self._) {\n                case 'Maybe.some':\n                    var $136 = self.value;\n                    var $137 = $136;\n                    var $135 = $137;\n                    break;\n                case 'Maybe.none':\n                    var $138 = 35;\n                    var $135 = $138;\n                    break;\n            };\n            var $134 = $135;\n        } else {\n            var $139 = 35;\n            var $134 = $139;\n        };\n        return $134;\n    };\n    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);\n\n    function Nat$to_string_base$(_base$1, _nat$2) {\n        var $140 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {\n            var $141 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);\n            return $141;\n        }));\n        return $140;\n    };\n    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);\n\n    function Nat$show$(_n$1) {\n        var $142 = Nat$to_string_base$(10n, _n$1);\n        return $142;\n    };\n    const Nat$show = x0 => Nat$show$(x0);\n\n    function Word$fold$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var self = _word$6;\n        switch (self._) {\n            case 'Word.o':\n                var $144 = self.pred;\n                var $145 = _w0$4(Word$fold$(_nil$3, _w0$4, _w1$5, $144));\n                var $143 = $145;\n                break;\n            case 'Word.i':\n                var $146 = self.pred;\n                var $147 = _w1$5(Word$fold$(_nil$3, _w0$4, _w1$5, $146));\n                var $143 = $147;\n                break;\n            case 'Word.e':\n                var $148 = _nil$3;\n                var $143 = $148;\n                break;\n        };\n        return $143;\n    };\n    const Word$fold = x0 => x1 => x2 => x3 => Word$fold$(x0, x1, x2, x3);\n    const Nat$add = a0 => a1 => (a0 + a1);\n    const Nat$mul = a0 => a1 => (a0 * a1);\n\n    function Word$to_nat$(_word$2) {\n        var $149 = Word$fold$(0n, a1 => (2n * a1), (_x$4 => {\n            var $150 = Nat$succ$((2n * _x$4));\n            return $150;\n        }), _word$2);\n        return $149;\n    };\n    const Word$to_nat = x0 => Word$to_nat$(x0);\n    const U32$to_nat = a0 => (BigInt(a0));\n\n    function DOM$node$(_tag$1, _props$2, _style$3, _children$4) {\n        var $151 = ({\n            _: 'DOM.node',\n            'tag': _tag$1,\n            'props': _props$2,\n            'style': _style$3,\n            'children': _children$4\n        });\n        return $151;\n    };\n    const DOM$node = x0 => x1 => x2 => x3 => DOM$node$(x0, x1, x2, x3);\n\n    function DOM$text$(_value$1) {\n        var $152 = ({\n            _: 'DOM.text',\n            'value': _value$1\n        });\n        return $152;\n    };\n    const DOM$text = x0 => DOM$text$(x0);\n\n    function App$MiniMMO$draw$(_state$1) {\n        var _avatars$2 = List$nil;\n        var self = _state$1;\n        switch (self._) {\n            case 'App.Store.new':\n                var $154 = self.global;\n                var $155 = $154;\n                var self = $155;\n                break;\n        };\n        switch (self._) {\n            case 'App.MiniMMO.State.global.new':\n                var $156 = self.map;\n                var _avatars$5 = (() => {\n                    var $159 = _avatars$2;\n                    var $160 = Map$values$($156);\n                    let _avatars$6 = $159;\n                    let _player$5;\n                    while ($160._ === 'List.cons') {\n                        _player$5 = $160.head;\n                        var _style$7 = Map$from_list$(List$cons$(Pair$new$(\"position\", \"absolute\"), List$cons$(Pair$new$(\"left\", (Nat$show$((BigInt((() => {\n                            var self = _player$5;\n                            switch (self._) {\n                                case 'App.MiniMMO.Player.new':\n                                    var $161 = self.x;\n                                    var $162 = $161;\n                                    return $162;\n                            };\n                        })()))) + \"px\")), List$cons$(Pair$new$(\"top\", (Nat$show$((BigInt((() => {\n                            var self = _player$5;\n                            switch (self._) {\n                                case 'App.MiniMMO.Player.new':\n                                    var $163 = self.y;\n                                    var $164 = $163;\n                                    return $164;\n                            };\n                        })()))) + \"px\")), List$nil))));\n                        var $159 = List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), _style$7, List$cons$(DOM$text$(\"X\"), List$nil)), _avatars$6);\n                        _avatars$6 = $159;\n                        $160 = $160.tail;\n                    }\n                    return _avatars$6;\n                })();\n                var $157 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), _avatars$5);\n                var $153 = $157;\n                break;\n        };\n        return $153;\n    };\n    const App$MiniMMO$draw = x0 => App$MiniMMO$draw$(x0);\n\n    function IO$(_A$1) {\n        var $165 = null;\n        return $165;\n    };\n    const IO = x0 => IO$(x0);\n\n    function Pair$fst$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $167 = self.fst;\n                var $168 = $167;\n                var $166 = $168;\n                break;\n        };\n        return $166;\n    };\n    const Pair$fst = x0 => Pair$fst$(x0);\n    const App$State$local = Pair$fst;\n\n    function IO$ask$(_query$2, _param$3, _then$4) {\n        var $169 = ({\n            _: 'IO.ask',\n            'query': _query$2,\n            'param': _param$3,\n            'then': _then$4\n        });\n        return $169;\n    };\n    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);\n\n    function IO$bind$(_a$3, _f$4) {\n        var self = _a$3;\n        switch (self._) {\n            case 'IO.end':\n                var $171 = self.value;\n                var $172 = _f$4($171);\n                var $170 = $172;\n                break;\n            case 'IO.ask':\n                var $173 = self.query;\n                var $174 = self.param;\n                var $175 = self.then;\n                var $176 = IO$ask$($173, $174, (_x$8 => {\n                    var $177 = IO$bind$($175(_x$8), _f$4);\n                    return $177;\n                }));\n                var $170 = $176;\n                break;\n        };\n        return $170;\n    };\n    const IO$bind = x0 => x1 => IO$bind$(x0, x1);\n\n    function IO$end$(_value$2) {\n        var $178 = ({\n            _: 'IO.end',\n            'value': _value$2\n        });\n        return $178;\n    };\n    const IO$end = x0 => IO$end$(x0);\n\n    function IO$monad$(_new$2) {\n        var $179 = _new$2(IO$bind)(IO$end);\n        return $179;\n    };\n    const IO$monad = x0 => IO$monad$(x0);\n\n    function IO$do$(_call$1, _param$2) {\n        var $180 = IO$ask$(_call$1, _param$2, (_answer$3 => {\n            var $181 = IO$end$(Unit$new);\n            return $181;\n        }));\n        return $180;\n    };\n    const IO$do = x0 => x1 => IO$do$(x0, x1);\n    const App$pass = IO$monad$((_m$bind$2 => _m$pure$3 => {\n        var $182 = _m$pure$3;\n        return $182;\n    }))(Maybe$none);\n\n    function App$do$(_call$2, _param$3) {\n        var $183 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n            var $184 = _m$bind$4;\n            return $184;\n        }))(IO$do$(_call$2, _param$3))((_$4 => {\n            var $185 = App$pass;\n            return $185;\n        }));\n        return $183;\n    };\n    const App$do = x0 => x1 => App$do$(x0, x1);\n\n    function App$watch$(_room$2) {\n        var $186 = App$do$(\"watch\", _room$2);\n        return $186;\n    };\n    const App$watch = x0 => App$watch$(x0);\n    const App$MiniMMO$room = \"0xc910a02b7c8a12\";\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $188 = Bool$false;\n                var $187 = $188;\n                break;\n            case 'Cmp.eql':\n                var $189 = Bool$true;\n                var $187 = $189;\n                break;\n        };\n        return $187;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $191 = self.pred;\n                var $192 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $194 = self.pred;\n                            var $195 = (_a$pred$10 => {\n                                var $196 = Word$cmp$go$(_a$pred$10, $194, _c$4);\n                                return $196;\n                            });\n                            var $193 = $195;\n                            break;\n                        case 'Word.i':\n                            var $197 = self.pred;\n                            var $198 = (_a$pred$10 => {\n                                var $199 = Word$cmp$go$(_a$pred$10, $197, Cmp$ltn);\n                                return $199;\n                            });\n                            var $193 = $198;\n                            break;\n                        case 'Word.e':\n                            var $200 = (_a$pred$8 => {\n                                var $201 = _c$4;\n                                return $201;\n                            });\n                            var $193 = $200;\n                            break;\n                    };\n                    var $193 = $193($191);\n                    return $193;\n                });\n                var $190 = $192;\n                break;\n            case 'Word.i':\n                var $202 = self.pred;\n                var $203 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $205 = self.pred;\n                            var $206 = (_a$pred$10 => {\n                                var $207 = Word$cmp$go$(_a$pred$10, $205, Cmp$gtn);\n                                return $207;\n                            });\n                            var $204 = $206;\n                            break;\n                        case 'Word.i':\n                            var $208 = self.pred;\n                            var $209 = (_a$pred$10 => {\n                                var $210 = Word$cmp$go$(_a$pred$10, $208, _c$4);\n                                return $210;\n                            });\n                            var $204 = $209;\n                            break;\n                        case 'Word.e':\n                            var $211 = (_a$pred$8 => {\n                                var $212 = _c$4;\n                                return $212;\n                            });\n                            var $204 = $211;\n                            break;\n                    };\n                    var $204 = $204($202);\n                    return $204;\n                });\n                var $190 = $203;\n                break;\n            case 'Word.e':\n                var $213 = (_b$5 => {\n                    var $214 = _c$4;\n                    return $214;\n                });\n                var $190 = $213;\n                break;\n        };\n        var $190 = $190(_b$3);\n        return $190;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $215 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $215;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $216 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $216;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n    const U16$eql = a0 => a1 => (a0 === a1);\n\n    function App$new_post$(_room$2, _data$3) {\n        var $217 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n            var $218 = _m$bind$4;\n            return $218;\n        }))(App$do$(\"post\", (_room$2 + (\";\" + _data$3))))((_$4 => {\n            var $219 = App$pass;\n            return $219;\n        }));\n        return $217;\n    };\n    const App$new_post = x0 => x1 => App$new_post$(x0, x1);\n    const App$MiniMMO$command$a_down = \"0x0000000000000000000000000000000000000000000000000000000000000001\";\n    const App$MiniMMO$command$d_down = \"0x0000000000000000000000000000000000000000000000000000000000000003\";\n    const App$MiniMMO$command$w_down = \"0x0000000000000000000000000000000000000000000000000000000000000007\";\n    const App$MiniMMO$command$s_down = \"0x0000000000000000000000000000000000000000000000000000000000000005\";\n    const App$MiniMMO$command$a_up = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n    const App$MiniMMO$command$d_up = \"0x0000000000000000000000000000000000000000000000000000000000000002\";\n    const App$MiniMMO$command$w_up = \"0x0000000000000000000000000000000000000000000000000000000000000006\";\n    const App$MiniMMO$command$s_up = \"0x0000000000000000000000000000000000000000000000000000000000000004\";\n\n    function App$MiniMMO$when$(_event$1, _state$2) {\n        var self = _event$1;\n        switch (self._) {\n            case 'App.Event.key_down':\n                var $221 = self.code;\n                var self = ($221 === 65);\n                if (self) {\n                    var $223 = App$new_post$(App$MiniMMO$room, App$MiniMMO$command$a_down);\n                    var $222 = $223;\n                } else {\n                    var self = ($221 === 68);\n                    if (self) {\n                        var $225 = App$new_post$(App$MiniMMO$room, App$MiniMMO$command$d_down);\n                        var $224 = $225;\n                    } else {\n                        var self = ($221 === 87);\n                        if (self) {\n                            var $227 = App$new_post$(App$MiniMMO$room, App$MiniMMO$command$w_down);\n                            var $226 = $227;\n                        } else {\n                            var self = ($221 === 83);\n                            if (self) {\n                                var $229 = App$new_post$(App$MiniMMO$room, App$MiniMMO$command$s_down);\n                                var $228 = $229;\n                            } else {\n                                var $230 = App$pass;\n                                var $228 = $230;\n                            };\n                            var $226 = $228;\n                        };\n                        var $224 = $226;\n                    };\n                    var $222 = $224;\n                };\n                var $220 = $222;\n                break;\n            case 'App.Event.key_up':\n                var $231 = self.code;\n                var self = ($231 === 65);\n                if (self) {\n                    var $233 = App$new_post$(App$MiniMMO$room, App$MiniMMO$command$a_up);\n                    var $232 = $233;\n                } else {\n                    var self = ($231 === 68);\n                    if (self) {\n                        var $235 = App$new_post$(App$MiniMMO$room, App$MiniMMO$command$d_up);\n                        var $234 = $235;\n                    } else {\n                        var self = ($231 === 87);\n                        if (self) {\n                            var $237 = App$new_post$(App$MiniMMO$room, App$MiniMMO$command$w_up);\n                            var $236 = $237;\n                        } else {\n                            var self = ($231 === 83);\n                            if (self) {\n                                var $239 = App$new_post$(App$MiniMMO$room, App$MiniMMO$command$s_up);\n                                var $238 = $239;\n                            } else {\n                                var $240 = App$pass;\n                                var $238 = $240;\n                            };\n                            var $236 = $238;\n                        };\n                        var $234 = $236;\n                    };\n                    var $232 = $234;\n                };\n                var $220 = $232;\n                break;\n            case 'App.Event.init':\n                var $241 = App$watch$(App$MiniMMO$room);\n                var $220 = $241;\n                break;\n            case 'App.Event.frame':\n            case 'App.Event.mouse_down':\n            case 'App.Event.mouse_up':\n            case 'App.Event.mouse_over':\n            case 'App.Event.mouse_click':\n            case 'App.Event.input':\n                var $242 = App$pass;\n                var $220 = $242;\n                break;\n        };\n        return $220;\n    };\n    const App$MiniMMO$when = x0 => x1 => App$MiniMMO$when$(x0, x1);\n\n    function Cmp$as_gte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $244 = Bool$false;\n                var $243 = $244;\n                break;\n            case 'Cmp.eql':\n            case 'Cmp.gtn':\n                var $245 = Bool$true;\n                var $243 = $245;\n                break;\n        };\n        return $243;\n    };\n    const Cmp$as_gte = x0 => Cmp$as_gte$(x0);\n\n    function Word$gte$(_a$2, _b$3) {\n        var $246 = Cmp$as_gte$(Word$cmp$(_a$2, _b$3));\n        return $246;\n    };\n    const Word$gte = x0 => x1 => Word$gte$(x0, x1);\n    const U32$gte = a0 => a1 => (a0 >= a1);\n    const U32$from_nat = a0 => (Number(a0) >>> 0);\n\n    function BitsMap$map$(_fn$3, _map$4) {\n        var self = _map$4;\n        switch (self._) {\n            case 'BitsMap.tie':\n                var $248 = self.val;\n                var $249 = self.lft;\n                var $250 = self.rgt;\n                var self = $248;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $252 = self.value;\n                        var $253 = Maybe$some$(_fn$3($252));\n                        var _val$8 = $253;\n                        break;\n                    case 'Maybe.none':\n                        var $254 = Maybe$none;\n                        var _val$8 = $254;\n                        break;\n                };\n                var _lft$9 = BitsMap$map$(_fn$3, $249);\n                var _rgt$10 = BitsMap$map$(_fn$3, $250);\n                var $251 = BitsMap$tie$(_val$8, _lft$9, _rgt$10);\n                var $247 = $251;\n                break;\n            case 'BitsMap.new':\n                var $255 = BitsMap$new;\n                var $247 = $255;\n                break;\n        };\n        return $247;\n    };\n    const BitsMap$map = x0 => x1 => BitsMap$map$(x0, x1);\n\n    function Map$map$(_fn$3, _map$4) {\n        var $256 = BitsMap$map$(_fn$3, _map$4);\n        return $256;\n    };\n    const Map$map = x0 => x1 => Map$map$(x0, x1);\n\n    function Word$subber$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $258 = self.pred;\n                var $259 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $261 = self.pred;\n                            var $262 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $264 = Word$i$(Word$subber$(_a$pred$10, $261, Bool$true));\n                                    var $263 = $264;\n                                } else {\n                                    var $265 = Word$o$(Word$subber$(_a$pred$10, $261, Bool$false));\n                                    var $263 = $265;\n                                };\n                                return $263;\n                            });\n                            var $260 = $262;\n                            break;\n                        case 'Word.i':\n                            var $266 = self.pred;\n                            var $267 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $269 = Word$o$(Word$subber$(_a$pred$10, $266, Bool$true));\n                                    var $268 = $269;\n                                } else {\n                                    var $270 = Word$i$(Word$subber$(_a$pred$10, $266, Bool$true));\n                                    var $268 = $270;\n                                };\n                                return $268;\n                            });\n                            var $260 = $267;\n                            break;\n                        case 'Word.e':\n                            var $271 = (_a$pred$8 => {\n                                var $272 = Word$e;\n                                return $272;\n                            });\n                            var $260 = $271;\n                            break;\n                    };\n                    var $260 = $260($258);\n                    return $260;\n                });\n                var $257 = $259;\n                break;\n            case 'Word.i':\n                var $273 = self.pred;\n                var $274 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $276 = self.pred;\n                            var $277 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $279 = Word$o$(Word$subber$(_a$pred$10, $276, Bool$false));\n                                    var $278 = $279;\n                                } else {\n                                    var $280 = Word$i$(Word$subber$(_a$pred$10, $276, Bool$false));\n                                    var $278 = $280;\n                                };\n                                return $278;\n                            });\n                            var $275 = $277;\n                            break;\n                        case 'Word.i':\n                            var $281 = self.pred;\n                            var $282 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $284 = Word$i$(Word$subber$(_a$pred$10, $281, Bool$true));\n                                    var $283 = $284;\n                                } else {\n                                    var $285 = Word$o$(Word$subber$(_a$pred$10, $281, Bool$false));\n                                    var $283 = $285;\n                                };\n                                return $283;\n                            });\n                            var $275 = $282;\n                            break;\n                        case 'Word.e':\n                            var $286 = (_a$pred$8 => {\n                                var $287 = Word$e;\n                                return $287;\n                            });\n                            var $275 = $286;\n                            break;\n                    };\n                    var $275 = $275($273);\n                    return $275;\n                });\n                var $257 = $274;\n                break;\n            case 'Word.e':\n                var $288 = (_b$5 => {\n                    var $289 = Word$e;\n                    return $289;\n                });\n                var $257 = $288;\n                break;\n        };\n        var $257 = $257(_b$3);\n        return $257;\n    };\n    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);\n\n    function Word$sub$(_a$2, _b$3) {\n        var $290 = Word$subber$(_a$2, _b$3, Bool$false);\n        return $290;\n    };\n    const Word$sub = x0 => x1 => Word$sub$(x0, x1);\n    const U32$sub = a0 => a1 => ((a0 - a1) >>> 0);\n\n    function Word$adder$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $292 = self.pred;\n                var $293 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $295 = self.pred;\n                            var $296 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $298 = Word$i$(Word$adder$(_a$pred$10, $295, Bool$false));\n                                    var $297 = $298;\n                                } else {\n                                    var $299 = Word$o$(Word$adder$(_a$pred$10, $295, Bool$false));\n                                    var $297 = $299;\n                                };\n                                return $297;\n                            });\n                            var $294 = $296;\n                            break;\n                        case 'Word.i':\n                            var $300 = self.pred;\n                            var $301 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $303 = Word$o$(Word$adder$(_a$pred$10, $300, Bool$true));\n                                    var $302 = $303;\n                                } else {\n                                    var $304 = Word$i$(Word$adder$(_a$pred$10, $300, Bool$false));\n                                    var $302 = $304;\n                                };\n                                return $302;\n                            });\n                            var $294 = $301;\n                            break;\n                        case 'Word.e':\n                            var $305 = (_a$pred$8 => {\n                                var $306 = Word$e;\n                                return $306;\n                            });\n                            var $294 = $305;\n                            break;\n                    };\n                    var $294 = $294($292);\n                    return $294;\n                });\n                var $291 = $293;\n                break;\n            case 'Word.i':\n                var $307 = self.pred;\n                var $308 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $310 = self.pred;\n                            var $311 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $313 = Word$o$(Word$adder$(_a$pred$10, $310, Bool$true));\n                                    var $312 = $313;\n                                } else {\n                                    var $314 = Word$i$(Word$adder$(_a$pred$10, $310, Bool$false));\n                                    var $312 = $314;\n                                };\n                                return $312;\n                            });\n                            var $309 = $311;\n                            break;\n                        case 'Word.i':\n                            var $315 = self.pred;\n                            var $316 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $318 = Word$i$(Word$adder$(_a$pred$10, $315, Bool$true));\n                                    var $317 = $318;\n                                } else {\n                                    var $319 = Word$o$(Word$adder$(_a$pred$10, $315, Bool$true));\n                                    var $317 = $319;\n                                };\n                                return $317;\n                            });\n                            var $309 = $316;\n                            break;\n                        case 'Word.e':\n                            var $320 = (_a$pred$8 => {\n                                var $321 = Word$e;\n                                return $321;\n                            });\n                            var $309 = $320;\n                            break;\n                    };\n                    var $309 = $309($307);\n                    return $309;\n                });\n                var $291 = $308;\n                break;\n            case 'Word.e':\n                var $322 = (_b$5 => {\n                    var $323 = Word$e;\n                    return $323;\n                });\n                var $291 = $322;\n                break;\n        };\n        var $291 = $291(_b$3);\n        return $291;\n    };\n    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);\n\n    function Word$add$(_a$2, _b$3) {\n        var $324 = Word$adder$(_a$2, _b$3, Bool$false);\n        return $324;\n    };\n    const Word$add = x0 => x1 => Word$add$(x0, x1);\n    const U32$add = a0 => a1 => ((a0 + a1) >>> 0);\n\n    function App$MiniMMO$Player$new$(_w$1, _a$2, _s$3, _d$4, _x$5, _y$6) {\n        var $325 = ({\n            _: 'App.MiniMMO.Player.new',\n            'w': _w$1,\n            'a': _a$2,\n            's': _s$3,\n            'd': _d$4,\n            'x': _x$5,\n            'y': _y$6\n        });\n        return $325;\n    };\n    const App$MiniMMO$Player$new = x0 => x1 => x2 => x3 => x4 => x5 => App$MiniMMO$Player$new$(x0, x1, x2, x3, x4, x5);\n\n    function App$MiniMMO$tick$(_tick$1, _glob$2) {\n        var self = _glob$2;\n        switch (self._) {\n            case 'App.MiniMMO.State.global.new':\n                var $327 = self.run;\n                var $328 = self.map;\n                var self = ($327 >= 256);\n                if (self) {\n                    var $330 = _glob$2;\n                    var $329 = $330;\n                } else {\n                    var _map$5 = Map$map$((_player$5 => {\n                        var self = _player$5;\n                        switch (self._) {\n                            case 'App.MiniMMO.Player.new':\n                                var $333 = self.w;\n                                var $334 = self.a;\n                                var $335 = self.s;\n                                var $336 = self.d;\n                                var $337 = self.x;\n                                var $338 = self.y;\n                                var _w$12 = $333;\n                                var _a$13 = $334;\n                                var _s$14 = $335;\n                                var _d$15 = $336;\n                                var _x$16 = $337;\n                                var _y$17 = $338;\n                                var self = $334;\n                                if (self) {\n                                    var $340 = ((_x$16 - 4) >>> 0);\n                                    var _x$18 = $340;\n                                } else {\n                                    var $341 = _x$16;\n                                    var _x$18 = $341;\n                                };\n                                var self = $336;\n                                if (self) {\n                                    var $342 = ((_x$18 + 4) >>> 0);\n                                    var _x$19 = $342;\n                                } else {\n                                    var $343 = _x$18;\n                                    var _x$19 = $343;\n                                };\n                                var self = $333;\n                                if (self) {\n                                    var $344 = ((_y$17 - 4) >>> 0);\n                                    var _y$20 = $344;\n                                } else {\n                                    var $345 = _y$17;\n                                    var _y$20 = $345;\n                                };\n                                var self = $335;\n                                if (self) {\n                                    var $346 = ((_y$20 + 4) >>> 0);\n                                    var _y$21 = $346;\n                                } else {\n                                    var $347 = _y$20;\n                                    var _y$21 = $347;\n                                };\n                                var $339 = App$MiniMMO$Player$new$(_w$12, _a$13, _s$14, _d$15, _x$19, _y$21);\n                                var $332 = $339;\n                                break;\n                        };\n                        return $332;\n                    }), $328);\n                    var $331 = App$MiniMMO$State$global$new$((($327 + 1) >>> 0), _map$5);\n                    var $329 = $331;\n                };\n                var $326 = $329;\n                break;\n        };\n        return $326;\n    };\n    const App$MiniMMO$tick = x0 => x1 => App$MiniMMO$tick$(x0, x1);\n    const BitsMap$get = a0 => a1 => (bitsmap_get(a0, a1));\n\n    function Map$get$(_key$2, _map$3) {\n        var $348 = (bitsmap_get(String$to_bits$(_key$2), _map$3));\n        return $348;\n    };\n    const Map$get = x0 => x1 => Map$get$(x0, x1);\n    const String$eql = a0 => a1 => (a0 === a1);\n\n    function Map$set$(_key$2, _val$3, _map$4) {\n        var $349 = (bitsmap_set(String$to_bits$(_key$2), _val$3, _map$4, 'set'));\n        return $349;\n    };\n    const Map$set = x0 => x1 => x2 => Map$set$(x0, x1, x2);\n\n    function App$MiniMMO$post$(_time$1, _room$2, _addr$3, _data$4, _glob$5) {\n        var self = _glob$5;\n        switch (self._) {\n            case 'App.MiniMMO.State.global.new':\n                var $351 = self.map;\n                var self = Map$get$(_addr$3, $351);\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $353 = self.value;\n                        var _player$9 = $353;\n                        var self = (_data$4 === App$MiniMMO$command$a_down);\n                        if (self) {\n                            var self = _player$9;\n                            switch (self._) {\n                                case 'App.MiniMMO.Player.new':\n                                    var $356 = self.w;\n                                    var $357 = self.s;\n                                    var $358 = self.d;\n                                    var $359 = self.x;\n                                    var $360 = self.y;\n                                    var $361 = App$MiniMMO$Player$new$($356, Bool$true, $357, $358, $359, $360);\n                                    var $355 = $361;\n                                    break;\n                            };\n                            var _player$10 = $355;\n                        } else {\n                            var self = (_data$4 === App$MiniMMO$command$s_down);\n                            if (self) {\n                                var self = _player$9;\n                                switch (self._) {\n                                    case 'App.MiniMMO.Player.new':\n                                        var $364 = self.w;\n                                        var $365 = self.a;\n                                        var $366 = self.d;\n                                        var $367 = self.x;\n                                        var $368 = self.y;\n                                        var $369 = App$MiniMMO$Player$new$($364, $365, Bool$true, $366, $367, $368);\n                                        var $363 = $369;\n                                        break;\n                                };\n                                var $362 = $363;\n                            } else {\n                                var self = (_data$4 === App$MiniMMO$command$d_down);\n                                if (self) {\n                                    var self = _player$9;\n                                    switch (self._) {\n                                        case 'App.MiniMMO.Player.new':\n                                            var $372 = self.w;\n                                            var $373 = self.a;\n                                            var $374 = self.s;\n                                            var $375 = self.x;\n                                            var $376 = self.y;\n                                            var $377 = App$MiniMMO$Player$new$($372, $373, $374, Bool$true, $375, $376);\n                                            var $371 = $377;\n                                            break;\n                                    };\n                                    var $370 = $371;\n                                } else {\n                                    var self = (_data$4 === App$MiniMMO$command$w_down);\n                                    if (self) {\n                                        var self = _player$9;\n                                        switch (self._) {\n                                            case 'App.MiniMMO.Player.new':\n                                                var $380 = self.a;\n                                                var $381 = self.s;\n                                                var $382 = self.d;\n                                                var $383 = self.x;\n                                                var $384 = self.y;\n                                                var $385 = App$MiniMMO$Player$new$(Bool$true, $380, $381, $382, $383, $384);\n                                                var $379 = $385;\n                                                break;\n                                        };\n                                        var $378 = $379;\n                                    } else {\n                                        var self = (_data$4 === App$MiniMMO$command$a_up);\n                                        if (self) {\n                                            var self = _player$9;\n                                            switch (self._) {\n                                                case 'App.MiniMMO.Player.new':\n                                                    var $388 = self.w;\n                                                    var $389 = self.s;\n                                                    var $390 = self.d;\n                                                    var $391 = self.x;\n                                                    var $392 = self.y;\n                                                    var $393 = App$MiniMMO$Player$new$($388, Bool$false, $389, $390, $391, $392);\n                                                    var $387 = $393;\n                                                    break;\n                                            };\n                                            var $386 = $387;\n                                        } else {\n                                            var self = (_data$4 === App$MiniMMO$command$s_up);\n                                            if (self) {\n                                                var self = _player$9;\n                                                switch (self._) {\n                                                    case 'App.MiniMMO.Player.new':\n                                                        var $396 = self.w;\n                                                        var $397 = self.a;\n                                                        var $398 = self.d;\n                                                        var $399 = self.x;\n                                                        var $400 = self.y;\n                                                        var $401 = App$MiniMMO$Player$new$($396, $397, Bool$false, $398, $399, $400);\n                                                        var $395 = $401;\n                                                        break;\n                                                };\n                                                var $394 = $395;\n                                            } else {\n                                                var self = (_data$4 === App$MiniMMO$command$d_up);\n                                                if (self) {\n                                                    var self = _player$9;\n                                                    switch (self._) {\n                                                        case 'App.MiniMMO.Player.new':\n                                                            var $404 = self.w;\n                                                            var $405 = self.a;\n                                                            var $406 = self.s;\n                                                            var $407 = self.x;\n                                                            var $408 = self.y;\n                                                            var $409 = App$MiniMMO$Player$new$($404, $405, $406, Bool$false, $407, $408);\n                                                            var $403 = $409;\n                                                            break;\n                                                    };\n                                                    var $402 = $403;\n                                                } else {\n                                                    var self = (_data$4 === App$MiniMMO$command$w_up);\n                                                    if (self) {\n                                                        var self = _player$9;\n                                                        switch (self._) {\n                                                            case 'App.MiniMMO.Player.new':\n                                                                var $412 = self.a;\n                                                                var $413 = self.s;\n                                                                var $414 = self.d;\n                                                                var $415 = self.x;\n                                                                var $416 = self.y;\n                                                                var $417 = App$MiniMMO$Player$new$(Bool$false, $412, $413, $414, $415, $416);\n                                                                var $411 = $417;\n                                                                break;\n                                                        };\n                                                        var $410 = $411;\n                                                    } else {\n                                                        var $418 = _player$9;\n                                                        var $410 = $418;\n                                                    };\n                                                    var $402 = $410;\n                                                };\n                                                var $394 = $402;\n                                            };\n                                            var $386 = $394;\n                                        };\n                                        var $378 = $386;\n                                    };\n                                    var $370 = $378;\n                                };\n                                var $362 = $370;\n                            };\n                            var _player$10 = $362;\n                        };\n                        var $354 = _player$10;\n                        var _player$8 = $354;\n                        break;\n                    case 'Maybe.none':\n                        var $419 = App$MiniMMO$Player$new$(Bool$false, Bool$false, Bool$false, Bool$false, 0, 0);\n                        var _player$8 = $419;\n                        break;\n                };\n                var _map$9 = Map$set$(_addr$3, _player$8, $351);\n                var $352 = App$MiniMMO$State$global$new$(0, _map$9);\n                var $350 = $352;\n                break;\n        };\n        return $350;\n    };\n    const App$MiniMMO$post = x0 => x1 => x2 => x3 => x4 => App$MiniMMO$post$(x0, x1, x2, x3, x4);\n    const App$MiniMMO = App$new$(App$MiniMMO$init, App$MiniMMO$draw, App$MiniMMO$when, App$MiniMMO$tick, App$MiniMMO$post);\n    return {\n        'App.new': App$new,\n        'Pair.new': Pair$new,\n        'App.State.new': App$State$new,\n        'App.MiniMMO.State': App$MiniMMO$State,\n        'App.Store.new': App$Store$new,\n        'Unit.new': Unit$new,\n        'App.MiniMMO.State.global.new': App$MiniMMO$State$global$new,\n        'U32.new': U32$new,\n        'Nat.apply': Nat$apply,\n        'Word': Word,\n        'Word.e': Word$e,\n        'Word.i': Word$i,\n        'Word.o': Word$o,\n        'Word.inc': Word$inc,\n        'Word.zero': Word$zero,\n        'Nat.to_word': Nat$to_word,\n        'Nat.succ': Nat$succ,\n        'Nat.zero': Nat$zero,\n        'Nat.to_u32': Nat$to_u32,\n        'BitsMap': BitsMap,\n        'Map': Map,\n        'BitsMap.new': BitsMap$new,\n        'BitsMap.tie': BitsMap$tie,\n        'Maybe.some': Maybe$some,\n        'Maybe.none': Maybe$none,\n        'BitsMap.set': BitsMap$set,\n        'Bits.e': Bits$e,\n        'Bits.o': Bits$o,\n        'Bits.i': Bits$i,\n        'Bits.concat': Bits$concat,\n        'Word.to_bits': Word$to_bits,\n        'U16.to_bits': U16$to_bits,\n        'String.to_bits': String$to_bits,\n        'Map.from_list': Map$from_list,\n        'List.nil': List$nil,\n        'Pair': Pair,\n        'App.MiniMMO.init': App$MiniMMO$init,\n        'Pair.snd': Pair$snd,\n        'App.State.global': App$State$global,\n        'List.for': List$for,\n        'List': List,\n        'List.cons': List$cons,\n        'BitsMap.values.go': BitsMap$values$go,\n        'Map.values': Map$values,\n        'String.cons': String$cons,\n        'String.concat': String$concat,\n        'List.fold': List$fold,\n        'Either': Either,\n        'Either.left': Either$left,\n        'Either.right': Either$right,\n        'Nat.sub_rem': Nat$sub_rem,\n        'Nat.div_mod.go': Nat$div_mod$go,\n        'Nat.div_mod': Nat$div_mod,\n        'Nat.to_base.go': Nat$to_base$go,\n        'Nat.to_base': Nat$to_base,\n        'String.nil': String$nil,\n        'Nat.mod.go': Nat$mod$go,\n        'Nat.mod': Nat$mod,\n        'Bool.false': Bool$false,\n        'Bool.and': Bool$and,\n        'Bool.true': Bool$true,\n        'Nat.gtn': Nat$gtn,\n        'Nat.lte': Nat$lte,\n        'Maybe': Maybe,\n        'List.at': List$at,\n        'Nat.show_digit': Nat$show_digit,\n        'Nat.to_string_base': Nat$to_string_base,\n        'Nat.show': Nat$show,\n        'Word.fold': Word$fold,\n        'Nat.add': Nat$add,\n        'Nat.mul': Nat$mul,\n        'Word.to_nat': Word$to_nat,\n        'U32.to_nat': U32$to_nat,\n        'DOM.node': DOM$node,\n        'DOM.text': DOM$text,\n        'App.MiniMMO.draw': App$MiniMMO$draw,\n        'IO': IO,\n        'Pair.fst': Pair$fst,\n        'App.State.local': App$State$local,\n        'IO.ask': IO$ask,\n        'IO.bind': IO$bind,\n        'IO.end': IO$end,\n        'IO.monad': IO$monad,\n        'IO.do': IO$do,\n        'App.pass': App$pass,\n        'App.do': App$do,\n        'App.watch': App$watch,\n        'App.MiniMMO.room': App$MiniMMO$room,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.eql': Word$eql,\n        'U16.eql': U16$eql,\n        'App.new_post': App$new_post,\n        'App.MiniMMO.command.a_down': App$MiniMMO$command$a_down,\n        'App.MiniMMO.command.d_down': App$MiniMMO$command$d_down,\n        'App.MiniMMO.command.w_down': App$MiniMMO$command$w_down,\n        'App.MiniMMO.command.s_down': App$MiniMMO$command$s_down,\n        'App.MiniMMO.command.a_up': App$MiniMMO$command$a_up,\n        'App.MiniMMO.command.d_up': App$MiniMMO$command$d_up,\n        'App.MiniMMO.command.w_up': App$MiniMMO$command$w_up,\n        'App.MiniMMO.command.s_up': App$MiniMMO$command$s_up,\n        'App.MiniMMO.when': App$MiniMMO$when,\n        'Cmp.as_gte': Cmp$as_gte,\n        'Word.gte': Word$gte,\n        'U32.gte': U32$gte,\n        'U32.from_nat': U32$from_nat,\n        'BitsMap.map': BitsMap$map,\n        'Map.map': Map$map,\n        'Word.subber': Word$subber,\n        'Word.sub': Word$sub,\n        'U32.sub': U32$sub,\n        'Word.adder': Word$adder,\n        'Word.add': Word$add,\n        'U32.add': U32$add,\n        'App.MiniMMO.Player.new': App$MiniMMO$Player$new,\n        'App.MiniMMO.tick': App$MiniMMO$tick,\n        'BitsMap.get': BitsMap$get,\n        'Map.get': Map$get,\n        'String.eql': String$eql,\n        'Map.set': Map$set,\n        'App.MiniMMO.post': App$MiniMMO$post,\n        'App.MiniMMO': App$MiniMMO,\n    };\n})();"],"sourceRoot":""}