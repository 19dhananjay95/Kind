// Saves well-typed definitions on cache directory
Kind.Defs.cache(defs: Kind.Defs): IO(Unit)
  Kind.Defs.cache.go(Kind.Map.to_list!(defs))

Kind.Defs.cache.go(kvs: List(Pair(String,Kind.Def))): IO(Unit)
  case kvs {
    nil: IO {
      return unit
    }
    cons:
      let {name,defn} = kvs.head
      open defn
      case defn.stat {
        done: IO {
          get time = IO.get_file_mtime(defn.file)
          Kind.Synth.load.cached.set_file(name|".term", Kind.Core.show(defn.term))
          Kind.Synth.load.cached.set_file(name|".type", Kind.Core.show(defn.type))
          Kind.Synth.load.cached.set_file(name|".isct", Bool.show(defn.isct))
          Kind.Synth.load.cached.set_file(name|".arit", Nat.show(defn.arit))
          Kind.Synth.load.cached.set_file(name|".file", defn.file)
          Kind.Synth.load.cached.set_file(name|".time", time)
          Kind.Defs.cache.go(kvs.tail)
        }
      } default IO {
        Kind.Defs.cache.go(kvs.tail)
      }
  }

