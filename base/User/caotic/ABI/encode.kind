type User.caotic.Encode.ABI.Coder {
    uint_256(value : String)
    bytes32(value : String)
    andress(value : String)
}


User.caotic.Encode.ABI.Coder.stringfy(coder : User.caotic.Encode.ABI.Coder) : String
  case coder {
    uint_256 : "uint_256"
    bytes32 : "bytes32"
    andress : "andress"
  }

 type User.caotic.Encode.ABI.Method {
   new(
     name : String,
     inputs : List<User.caotic.Encode.ABI.Coder>
     output : List<User.caotic.Encode.ABI.Coder>
     constant : List<Bool>,
     payable : List<Bool>
   )
 }

//Bits.pad.correcly_semantics(n : Nat, x : Bits) :
//   Bits.to_nat(Bits.pad(n, x)) == Bits.to_nat(x)
//  ?a // padding a Bit do not change the semantic in Nat

User.caotic.ABI.encode_(coder : User.caotic.Encode.ABI.Coder) : Pair<String, Bool> 
  case coder {
    bytes32 :
      let length = String.length(coder.value) - 1 // change after to bits.length
      let nextMul32 = (((length - 1) / 64) + 1) * 64
      let lengthEncoded = User.caotic.ABI.encode_(User.caotic.Encode.ABI.Coder.uint_256(Nat.hex.encode(length)))
      open lengthEncoded
      let bytesEncoded = String.pad_right(nextMul32 - 1, '0', "0" | coder.value)
      {lengthEncoded.fst | bytesEncoded, true}
  } default 
      {String.pad_left(64, '0', coder.value), false}

User.caotic.ABI.methodData(method : User.caotic.Encode.ABI.Method) : _
  open method
  let joinMethods = List.map!!((x) User.caotic.Encode.ABI.Coder.stringfy(x), method.inputs)
  let methodSig = method.name | "(" | String.join(",", joinMethods) | ")"
  let methodHash = Crypto.Keccak.hash(methodSig)
  let encodeInputs = List.map!!((x) User.caotic.ABI.encode_(x), method.inputs)
  let encodeSize = List.length!(encodeInputs)

  let str = ""
  for coder in encodeInputs with str :
    open coder
    if coder.snd then
      let dataLoc = (encodeSize*32) + String.length(str)
      str = str | String.pad_left(64, '0', Nat.hex.encode(dataLoc))
      str = str | coder.fst
      str
    else
      str = str | coder.fst
      str
  
  ?b
  
User.caotic.ABI.encode : _
  let value = Bits.to_hex_string(Nat.to_bits(1002))
  let r = User.caotic.ABI.encode_(User.caotic.Encode.ABI.Coder.bytes32(value))
  open r
  r.fst