foo(e: 4 == 5): (4 + 4) == 10
  rewrite x in (x + x) == 10 with e
  refl

Int.add.def(ax: Nat, ay: Nat, bx: Nat, by: Nat): Int.add(Int.new(ax,ay),Int.new(bx,by)) == Int.new(ax+bx, ay+by)
  case Int.normalize(ax,ay) as ai {
    left: case Int.normalize(bx,by) as bi {
      left:
        ?a
      right:
        ?b
    }!
    right: case Int.normalize(bx,by) as bi {
      left:
        ?c
      right: case Int.normalize(ax+bx, ay+by) as ci {
        left:
          ?d
        right:
          rewrite x in Int.add(x,_) == _ with ai.value
          rewrite x in Int.add(_,x) == _ with bi.value
          rewrite x in _            == x with ci.value
          Int.zero_left(_, _, ?k)
      }!
    }!
  }!
  






  //let ai = Int.normalize(ax,ay)
  //let bi = Int.normalize(bx,by)
  //open ai
  //open bi
  //case ai.snd {
    //left: case bi.snd {
      //left: ?a
      //right: ?b
    //}!
    //right: case bi.snd {
      //left: ?c
      //right: case mirror(ai.snd.value) as e {
        //refl: case mirror(bi.snd.value) as e {
          //refl:
            ////let k = Int.add.def.axbx(ai.fst, bi.fst)
            //?a
        //}: Int.add(_,e.b) == _
      //}: Int.add(e.b,_) == _
    //}!
  //}!


//foo(e: 4 == 5): (5 + 5) == 10
  //rewrite x in (x + x) == 10 with e
  //case e {
    //refl: ?a
  //}: (e.b + e.b) == 10
  
  



//Int.add.def(ax: Nat, ay: Nat, bx: Nat, by: Nat): Int.add(Int.new(ax,ay),Int.new(bx,by)) == Int.new(ax+bx, ay+by)
  //?a-18

//Int.add.def(ax: Nat, ay: Nat, bx: Nat, by: Nat): Int.add(Int.new(ax,ay),Int.new(bx,by)) == Int.new(ax+bx, ay+by)
  //case ax {
    //zero: case ay {
      //zero: case bx {
        //zero: case by {
          //zero: refl
          //succ: refl
        //}!
        //succ: case by {
          //zero: refl
          //succ: ?a
        //}!
      //}!
      //succ: case bx {
        //zero: case by {
          //zero: refl
          //succ: refl
        //}!
        //succ: case by {
          //zero: refl
          //succ: ?b
        //}!
      //}!
    //}!
    //succ: case ay {
      //zero: case bx {
        //zero: case by {
          //zero: refl
          //succ: refl
        //}!
        //succ: case by {
          //zero: refl
          //succ: ?c
        //}!
      //}!
      //succ: case bx {
        //zero: case by {
          //zero: ?e
          //succ: ?f
        //}!
        //succ: case by {
          //zero:
            //?g
          //succ:
            //let a = Int.add.def(ax.pred, ay.pred, bx.pred, by.pred)
            //let b = a :: rewrite x in Int.add(x,_) == _ with Int.inc(ax.pred,ay.pred)
            //let c = b :: rewrite x in Int.add(_,x) == _ with Int.inc(bx.pred,by.pred)
            //let d = c :: rewrite x in _ == x with Int.inc(Nat.add(ax.pred,bx.pred),Nat.add(ay.pred,by.pred))
            //let e = d :: rewrite x in _ == x with Int.inc(Nat.succ(Nat.add(ax.pred,bx.pred)),Nat.succ(Nat.add(ay.pred,by.pred)))
            //let A = mirror(Nat.add.succ_both(ax.pred,bx.pred))
            //let B = mirror(Nat.add.succ_both(ay.pred,by.pred))
            //let f = Equal.rewrite<Nat, Nat.succ(Nat.succ(Nat.add(ax.pred,bx.pred))), Nat.add(Nat.succ(ax.pred),Nat.succ(bx.pred)), A, (x) Int.add(Int.new(Nat.succ(ax.pred),Nat.succ(ay.pred)),Int.new(Nat.succ(bx.pred),Nat.succ(by.pred))) == Int.new(x,Nat.succ(Nat.succ(Nat.add(ay.pred,by.pred))))>(e)
            //let g = Equal.rewrite<Nat, Nat.succ(Nat.succ(Nat.add(ay.pred,by.pred))), Nat.add(Nat.succ(ay.pred),Nat.succ(by.pred)), B, (x) Int.add(Int.new(Nat.succ(ax.pred),Nat.succ(ay.pred)),Int.new(Nat.succ(bx.pred),Nat.succ(by.pred))) == Int.new(Nat.add(Nat.succ(ax.pred),Nat.succ(bx.pred)),x)>(f)
            //g
        //}!
      //}!
    //}!
  //}!

//Int.add(Int.new(Nat.succ(ax.pred),Nat.succ(ay.pred)),Int.new(Nat.succ(bx.pred),Nat.succ(by.pred))) == Int.new(Nat.add(Nat.succ(ax.pred),Nat.succ(bx.pred)),Nat.add(Nat.succ(ay.pred),Nat.succ(by.pred)))
//Int.add(Int.new(Nat.succ(ax.pred),Nat.succ(ay.pred)),Int.new(Nat.succ(bx.pred),Nat.succ(by.pred))) == Int.new(Nat.add(Nat.succ(ax.pred),Nat.succ(bx.pred)),Nat.succ(Nat.succ(Nat.add(ay.pred,by.pred))))


//Int.new(Nat.sub(ax.pred,ay.pred),Nat.sub(ay.pred,ax.pred),(a) Int,(a.x) (a.y) Int.new(Nat.sub(bx.pred,by.pred),Nat.sub(by.pred,bx.pred),(b) Int,(b.x) (b.y) Int.new(Nat.add(a.x,b.x),Nat.add(a.y,b.y)))) ==
//Int.new(Nat.add(Nat.succ(ax.pred),Nat.succ(bx.pred)),Nat.add(Nat.succ(ay.pred),Nat.succ(by.pred)))




