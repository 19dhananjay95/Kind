// MiniMMO's state types
// - the local state isn't used
// - the global state is a map of players
Web.MiniMMO.State: App.State
  App.State.new(Unit, Map<Web.MiniMMO.Player>)

// A player stores a w/a/s/d config, and a position
type Web.MiniMMO.Player {
  new(
    w: Bool // w down?
    a: Bool // a down?
    s: Bool // s down?
    d: Bool // d down?
    x: U32  // x pos
    y: U32  // y pos
  )
}

// The local event handler
Web.MiniMMO.when: App.When(Web.MiniMMO.State)
  (event, state)

  case event {

    // Init: watches the MMO room
    init: App.watch!(Web.MiniMMO.room)

    // Key-down: posts the a/d/w/s down event on the MMO room
    key_down: switch U16.eql(event.code) {
      'A': App.post!(Web.MiniMMO.room, Web.MiniMMO.command.a_down)
      'D': App.post!(Web.MiniMMO.room, Web.MiniMMO.command.d_down)
      'W': App.post!(Web.MiniMMO.room, Web.MiniMMO.command.w_down)
      'S': App.post!(Web.MiniMMO.room, Web.MiniMMO.command.s_down)
    } default App.pass!

    // Key-up: posts the a/d/w/s up event on the MMO room
    key_up: switch U16.eql(event.code) {
      'A': App.post!(Web.MiniMMO.room, Web.MiniMMO.command.a_up)
      'D': App.post!(Web.MiniMMO.room, Web.MiniMMO.command.d_up)
      'W': App.post!(Web.MiniMMO.room, Web.MiniMMO.command.w_up)
      'S': App.post!(Web.MiniMMO.room, Web.MiniMMO.command.s_up)
    } default App.pass!

  } default App.pass!

//App.MiniMMO.when(event: App.Event, state: Unit): IO<Maybe<Unit>>

//// A minimalist MMO
//// - Local state is not used (Unit)
//// - Global state is a map of players
//Web.MiniMMO: App<Unit, Map<Web.MiniMMO.Player>>

  //// An image buffer to draw the screen on
  //vbox = VoxBox.alloc_capacity(65536)

  //// Initial state
  //init = App.State.new!!(unit, {})

  //// Draw function: renders each player
  //draw = (state)
    //for player in Map.values!(state@global) with vbox:
      //VoxBox.Draw.image(player@x, player@y, 0, Web.MiniMMO.sprite, vbox)
    //DOM.vbox({}, {}, vbox)

  //// Event handler
  //when = (event, state)
    //case event {

      //// Init: watches the MMO room
      //init: App.watch!(Web.MiniMMO.room)

      //// Keydown: posts the a/d/w/s down event on the MMO room
      //key_down: switch U16.eql(event.code) {
        //'A': App.post!(Web.MiniMMO.room, Web.MiniMMO.command.a_down)
        //'D': App.post!(Web.MiniMMO.room, Web.MiniMMO.command.d_down)
        //'W': App.post!(Web.MiniMMO.room, Web.MiniMMO.command.w_down)
        //'S': App.post!(Web.MiniMMO.room, Web.MiniMMO.command.s_down)
      //} default App.pass!

      //// Keyup: posts the a/d/w/s up event on the MMO room
      //key_up: switch U16.eql(event.code) {
        //'A': App.post!(Web.MiniMMO.room, Web.MiniMMO.command.a_up)
        //'D': App.post!(Web.MiniMMO.room, Web.MiniMMO.command.d_up)
        //'W': App.post!(Web.MiniMMO.room, Web.MiniMMO.command.w_up)
        //'S': App.post!(Web.MiniMMO.room, Web.MiniMMO.command.s_up)
      //} default App.pass!

    //} default App.pass!

  //// Global tick
  //tick = (from, to, glob)
    //glob

  //// When a player posts an action
  //post = (time, room, addr, data, map)
    //let player = case map{user} as player {
      //// If it isn't created, create it
      //none:
        //Web.MiniMMO.Player.new(false,false,false,false,0,0)
      //// Otherwise, update its a/s/d/w key status
      //some:
        //let player = player.value
        //let player = switch String.eql(cmd) {
          //Web.MiniMMO.command.a_down: player@a <- true
          //Web.MiniMMO.command.s_down: player@s <- true
          //Web.MiniMMO.command.d_down: player@d <- true
          //Web.MiniMMO.command.w_down: player@w <- true
          //Web.MiniMMO.command.a_up:   player@a <- false
          //Web.MiniMMO.command.s_up:   player@s <- false
          //Web.MiniMMO.command.d_up:   player@d <- false
          //Web.MiniMMO.command.w_up:   player@w <- false
        //} default state
        //player
    //}
    //map{user} <- player

  //App.new!(init, draw, when, glob, tick, post)

// Constants

Web.MiniMMO.room: String
  "0xc910a02b7c8a05"

Web.MiniMMO.command.a_up: String
  "0x0000000000000000000000000000000000000000000000000000000000000000"

Web.MiniMMO.command.a_down: String
  "0x0000000000000000000000000000000000000000000000000000000000000001"

Web.MiniMMO.command.d_up: String
  "0x0000000000000000000000000000000000000000000000000000000000000002"

Web.MiniMMO.command.d_down: String
  "0x0000000000000000000000000000000000000000000000000000000000000003"

Web.MiniMMO.command.s_up: String
  "0x0000000000000000000000000000000000000000000000000000000000000004"

Web.MiniMMO.command.s_down: String
  "0x0000000000000000000000000000000000000000000000000000000000000005"

Web.MiniMMO.command.w_up: String
  "0x0000000000000000000000000000000000000000000000000000000000000006"

Web.MiniMMO.command.w_down: String
  "0x0000000000000000000000000000000000000000000000000000000000000007"

Web.MiniMMO.sprite: VoxBox
  VoxBox.parse("0d00000000000e00000000000f00000000001000000000001100000000000c01000000000d01000000001101000000000b02000000000c02000000001202000000000b03000000001203000000000b04000000000c04000000001104000000000c05000000000d05000000000e05000000001005000000001105000000000e06000000000f06000000000e07000000000e08000000000f08000000000d09000000000e09000000000f09000000000c0a000000000d0a000000000e0a000000000f0a00000000100a000000000c0b000000000e0b00000000100b000000000b0c000000000c0c000000000e0c00000000100c00000000110c000000000b0d000000000e0d00000000110d000000000a0e000000000b0e000000000e0e00000000110e00000000120e000000000a0f000000000e0f00000000120f000000000910000000000a10000000000e10000000001210000000001310000000000911000000000e11000000001311000000000e12000000000d13000000000e13000000000f13000000000d14000000000f14000000000d15000000000f15000000000c16000000000d16000000000f16000000000c17000000000f17000000000c18000000000f18000000000c19000000001019000000000c1a00000000101a000000000b1b000000000c1b00000000101b000000000b1c00000000101c000000000b1d00000000101d00000000111d000000000b1e00000000111e000000000a1f000000000b1f00000000111f00000000")
