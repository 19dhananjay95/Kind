Test: String
  defs = Kind.Defs.read("", "
    type Bool {
      true
      false
    }

    not(b: Bool): Bool
      case b {
        true: false
        false: true
      }
  ",
  BitsMap.new!)
  case defs {
    left: ""
    right: case Kind.Map.get!("not", defs.value) as got {
             none:
               "not found"
             some:
               open got.value
               log("term:")
               log(Kind.Term.show(got.value.term))
               let {comp, type} = Kind.Comp.compile(got.value.term, some(got.value.type), defs.value, 0)
               log("comp:")
               Kind.Comp.show(comp)
           }
  }
