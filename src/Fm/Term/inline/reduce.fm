Fm.Term.inline.reduce(term: Fm.Term, defs: Fm.Defs): Fm.Term
  case term {
    ref: 
      let inli = Set.has(Fm.Name.to_bits(term.name), Fm.Term.inline.names);
      if inli then
        case Fm.get!(term.name, defs) as got {
          none: Fm.Term.ref(term.name),
          some: case got.value { new: Fm.Term.inline.reduce(got.value.term, defs) },
        }
      else
        term,
    app:
      let func = Fm.Term.inline.reduce(term.func, defs);
      case func {
        lam: Fm.Term.inline.reduce(func.body(term.argm), defs),
        let: Fm.Term.let(func.name, func.expr, (x) Fm.Term.inline.reduce(Fm.Term.app(func.body(x), term.argm), defs)),
        _: term,
      },
    ori:
      Fm.Term.inline.reduce(term.expr, defs),
    _: term,
  }