// i'm studying compilers using "modern compiler implementation in ML" by Andrew Appel
// translating to Kind as I go. i'm not too worried about following the book too closely.
// for example i'll likely use kind's `Parser` to parse programs instead of Lex and Yacc.
// but i'm using ML's naming conventions. it looks ugly but makes lookups easier.

// position on source code, to produce error messages
User.rigille.Tiger.pos: Type
  Pair<Nat, Nat>

User.rigille.Tiger.symbol: Type
  String

type User.rigille.Tiger.var {
  SimpleVar(name: User.rigille.Tiger.symbol, pos: User.rigille.Tiger.pos)
  FieldVar(var: User.rigille.Tiger.var, name: User.rigille.Tiger.symbol, pos: User.rigille.Tiger.pos)
  SubscriptVar(var: User.rigille.Tiger.var, exp: User.rigille.Tiger.exp, pos: User.rigille.Tiger.pos)
}

type User.rigille.Tiger.record_fields {
  new(
    name: User.rigille.Tiger.symbol
    args: List<User.rigille.Tiger.exp>
    pos: User.rigille.Tiger.pos
  )
}
type User.rigille.Tiger.exp {
  NilExp
  VarExp(var: User.rigille.Tiger.var)
  IntExp(val: Int)
  StringExp(val: String, pos: User.rigille.Tiger.pos)
  CallExp(
    func: User.rigille.Tiger.symbol
    args: List<User.rigille.Tiger.exp>
    pos: User.rigille.Tiger.pos
  )
  OpExp(
    left: User.rigille.Tiger.exp
    oper: User.rigille.Tiger.oper
    right: User.rigille.Tiger.exp
    pos: User.rigille.Tiger.pos
  )
  RecordExp(
    fields: List<User.rigille.Tiger.record_fields>
    typ: User.rigille.Tiger.symbol
    pos: User.rigille.Tiger.pos
  )
  SeqExp(
    val: List<User.rigille.Tiger.exp>
  )
  AssignExp(
    var: User.rigille.Tiger.var
    exp: User.rigille.Tiger.exp
    pos: User.rigille.Tiger.pos
  )
  IfExp(
    test: User.rigille.Tiger.exp
    then: User.rigille.Tiger.exp
    else: Maybe<User.rigille.Tiger.exp>
  )
  WhileExp(
    test: User.rigille.Tiger.exp
    body: User.rigille.Tiger.exp
    pos: User.rigille.Tiger.pos
  )
  ForExp(
    var: User.rigille.Tiger.symbol
    escape: Bool
    lo: User.rigille.Tiger.exp
    hi: User.rigille.Tiger.exp
    body: User.rigille.Tiger.exp
    pos: User.rigille.Tiger.pos
  )
  BreakExp(
    pos: User.rigille.Tiger.pos
  )
  LetExp(
    decs: List<User.rigille.Tiger.dec>
    body: User.rigille.Tiger.exp
    pos: User.rigille.Tiger.pos
  )
  ArrayExp(
    typ: User.rigille.Tiger.symbol
    size: User.rigille.Tiger.exp
    pos: User.rigille.Tiger.pos
  )
}

type User.rigille.Tiger.oper {
}

type User.rigille.Tiger.dec {
}
