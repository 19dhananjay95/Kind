#term #path ((((Fm.Term.show.as_nat term) #as_nat String) (((((((((((((((((term #term String) #term.name #term.indx (Fm.Name.show term.name)) #term.name !name = (Fm.Name.show term.name); (((path #path String) name) #path.value !path_val = ((Bits.concat (Fm.Path.to_bits path.value)) (Bits.i Bits.e)); !path_str = (Nat.show (Bits.to_nat path_val)); (String.flatten (((List.cons String) name) (((List.cons String) ((Fm.color "2") ((String.concat "-") path_str))) (List.nil String)))))) "Type") #term.eras #term.self #term.name #term.xtyp #term.body !eras = term.eras; !self = (Fm.Name.show term.self); !name = (Fm.Name.show term.name); !type = ((Fm.Term.show.go term.xtyp) (Fm.MPath.o path)); !open = (((eras # String) "<") "("); !clos = (((eras # String) ">") ")"); !body = ((Fm.Term.show.go ((term.body ((Fm.Term.var term.self) +0)) ((Fm.Term.var term.name) +0))) (Fm.MPath.i path)); (String.flatten (((List.cons String) self) (((List.cons String) open) (((List.cons String) name) (((List.cons String) ":") (((List.cons String) type) (((List.cons String) clos) (((List.cons String) " ") (((List.cons String) body) (List.nil String))))))))))) #term.name #term.body !name = (Fm.Name.show term.name); !body = ((Fm.Term.show.go (term.body ((Fm.Term.var term.name) +0))) (Fm.MPath.o path)); (String.flatten (((List.cons String) "(") (((List.cons String) name) (((List.cons String) ") ") (((List.cons String) body) (List.nil String))))))) #term.func #term.argm (((Fm.Term.show.app term) path) (List.nil String))) #term.name #term.expr #term.body !name = (Fm.Name.show term.name); !expr = ((Fm.Term.show.go term.expr) (Fm.MPath.o path)); !body = ((Fm.Term.show.go (term.body ((Fm.Term.var term.name) +0))) (Fm.MPath.i path)); (String.flatten (((List.cons String) "let ") (((List.cons String) name) (((List.cons String) " = ") (((List.cons String) expr) (((List.cons String) "; ") (((List.cons String) body) (List.nil String))))))))) #term.name #term.expr #term.body !name = (Fm.Name.show term.name); !expr = ((Fm.Term.show.go term.expr) (Fm.MPath.o path)); !body = ((Fm.Term.show.go (term.body ((Fm.Term.var term.name) +0))) (Fm.MPath.i path)); (String.flatten (((List.cons String) "def ") (((List.cons String) name) (((List.cons String) " = ") (((List.cons String) expr) (((List.cons String) "; ") (((List.cons String) body) (List.nil String))))))))) #term.done #term.term #term.type !term = ((Fm.Term.show.go term.term) (Fm.MPath.o path)); !type = ((Fm.Term.show.go term.type) (Fm.MPath.i path)); (String.flatten (((List.cons String) term) (((List.cons String) "::") (((List.cons String) type) (List.nil String)))))) #term.name #term.dref #term.verb !name = (Fm.Name.show term.name); (String.flatten (((List.cons String) "?") (((List.cons String) name) (List.nil String))))) #term.path "_") #term.natx (String.flatten (((List.cons String) (Nat.show term.natx)) (List.nil String)))) #term.chrx (String.flatten (((List.cons String) "\'") (((List.cons String) (Fm.escape.char term.chrx)) (((List.cons String) "\'") (List.nil String)))))) #term.strx (String.flatten (((List.cons String) "\"") (((List.cons String) (Fm.escape term.strx)) (((List.cons String) "\"") (List.nil String)))))) #term.path #term.expr #term.name #term.with #term.cses #term.moti !expr = ((Fm.Term.show.go term.expr) (Fm.MPath.o path)); !name = (Fm.Name.show term.name); !wyth = ((String.join "") ((((List.mapped Fm.Def) term.with) String) #defn ((defn #defn String) #defn.file #defn.code #defn.orig #defn.name #defn.term #defn.type #defn.isct #defn.stat !name = (Fm.Name.show defn.name); !type = ((Fm.Term.show.go defn.type) (Maybe.none @(:Bits) Bits)); !term = ((Fm.Term.show.go defn.term) (Maybe.none @(:Bits) Bits)); (String.flatten (((List.cons String) name) (((List.cons String) ": ") (((List.cons String) type) (((List.cons String) " = ") (((List.cons String) term) (((List.cons String) ";") (List.nil String))))))))))); !cses = ((Map.to_list Fm.Term) term.cses); !cses = ((String.join "") ((((List.mapped ((Pair Bits) Fm.Term)) cses) String) #x !name = (Fm.Name.from_bits (((Pair.fst Bits) Fm.Term) x)); !term = ((Fm.Term.show.go (((Pair.snd Bits) Fm.Term) x)) (Maybe.none @(:Bits) Bits)); (String.flatten (((List.cons String) name) (((List.cons String) ": ") (((List.cons String) term) (((List.cons String) "; ") (List.nil String)))))))); !moti = (((term.moti #term.moti String) "") #term.moti.value (String.flatten (((List.cons String) ": ") (((List.cons String) ((Fm.Term.show.go term.moti.value) (Maybe.none @(:Bits) Bits))) (List.nil String))))); (String.flatten (((List.cons String) "case ") (((List.cons String) expr) (((List.cons String) " as ") (((List.cons String) name) (((List.cons String) wyth) (((List.cons String) " { ") (((List.cons String) cses) (((List.cons String) "}") (((List.cons String) moti) (List.nil String)))))))))))) #term.orig #term.expr ((Fm.Term.show.go term.expr) path))) #as_nat.value as_nat.value)