App.GG.Effect.creature.is_enemy(coord: App.GG.Coord): App.GG.Effect<Bool>
  (center, origin, local)
  let grid = local@grid
  let bool =
    Maybe {
      get creature = App.GG.Creature.get(coord, grid)
      get team  = App.GG.Effect.team.get(center, origin, grid)
      let bool = App.GG.Team.eql(creature@team, team)
      return not(bool) 
    } <> false
  App.GG.Effect.Result.new!(bool, center, origin, local, (enemy, img) img, 0, "")

App.GG.Effect.creature.get: App.GG.Effect<Maybe<App.GG.Creature>>
  (center, origin, local)
  let creature = App.GG.Creature.get(center, local@grid)
  App.GG.Effect.Result.new!(creature, center, origin, local, (enemy, img) img, 0, "")

App.GG.Effect.creature.del_at(pos: App.GG.Coord): App.GG.Effect<Unit>
  (center, origin, local)
  let new_grid = App.GG.Creature.delete(pos, local@grid)
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(unit, center, origin, new_local, (enemy, img) img, 0, "")

App.GG.Effect.creature.get_at(pos: App.GG.Coord): App.GG.Effect<Maybe<App.GG.Creature>>
  (center, origin, local)
  let creature = App.GG.Creature.get(pos, local@grid)
  App.GG.Effect.Result.new!(creature, center, origin, local, (enemy, img) img, 0, "")

App.GG.Effect.creature.modify(mod: App.GG.Creature -> App.GG.Creature): App.GG.Effect<Unit>
  (center, origin, local)
  let new_grid = App.GG.Creature.modify_at(mod, center, local@grid)
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(unit, center, origin, new_local, (enemy, img) img, 0, "")

App.GG.Effect.creature.modify_at(mod: App.GG.Creature -> App.GG.Creature, pos: App.GG.Coord): App.GG.Effect<Unit>
  (center, origin, local)
  let new_grid = App.GG.Creature.modify_at(mod, pos, local@grid)
  let new_local = local@grid <- new_grid
  App.GG.Effect.Result.new!(unit, center, origin, new_local, (enemy, img) img, 0, "")

App.GG.Effect.creature.damage_at(dmg: I32, pos: App.GG.Coord, flinch: Bool): App.GG.Effect<I32>
  App.GG.Effect.change_hp(I32.neg(dmg), flinch, pos)
