Kind.Parser.switch.case: Parser(Pair(Kind.Term, Kind.Term))
  do Parser {
    var key = Kind.Parser.term;
    Kind.Parser.text(":");
    var val = Kind.Parser.term;
    return {key, val};
  }

Kind.Parser.switch: Parser(Kind.Term)
  do Parser {
    var init = Kind.Parser.init;
    Kind.Parser.text("switch ");
    var cond = Kind.Parser.term;
    Kind.Parser.text("{");
    var cses = Parser.until!(Kind.Parser.text("}"), Kind.Parser.switch.case);
    Kind.Parser.text("else");
    var dflt = Kind.Parser.term;
    var orig = Kind.Parser.stop(init);
    let term = List.fold!(cses)!(dflt, (cse, rest)
      open cse
      let term = Kind.Term.app(cond, cse.fst);
      let term = Kind.Term.app(term, Kind.Term.lam("", (x) Kind.Term.hol(Bits.e)));
      let term = Kind.Term.app(term, cse.snd);
      let term = Kind.Term.app(term, rest);
      term);
    return Kind.Term.ori(orig, term);
  }
