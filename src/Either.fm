type Either <A: Type, B: Type> {
  left(value: A),
  right(value: B),
}


Either.bind<A: Type, B: Type, C: Type>(e: Either(A,B), f: B -> Either(A,C)): Either(A,C)
  case e {
    left: Either.left<_,_>(e.value),
    right: f(e.value),
  }

Either.monad<A: Type>: Monad(Either(A))
  Monad.new<Either(A)>(Either.bind<A>, Either.right<A>)

Either.map<A: Type, B: Type, C: Type>(f: B -> C, e: Either(A, B)): Either(A, C)
  case e {
    left: Either.left<A, C>(e.value),
    right: Either.right<A, C>(f(e.value)),
  }

Either.functor<A: Type>: Functor(Either(A))
  Functor.new<Either(A)>(Either.map<A>)
