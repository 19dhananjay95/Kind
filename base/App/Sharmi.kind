type App.Sharmi.State.global {
  new
}

type App.Sharmi.Game.State.global {
  new
}

type App.Sharmi.Game.State.local {
  new(
    players: List<App.Sharmi.Player>
    bodies: List<App.Sharmi.Body>
    goals: List<App.Sharmi.Goal>
    camera: Pair<V2, V2>
  )
}
type App.Sharmi.State.local {
  home
  game(
    state: App.Sharmi.Game.State.local
  )
}

App.Sharmi.room: String
  App.room("alsllsslsldlallsldkakdlslfls")

type App.Sharmi.Goal {
  new(
    pos: Physics.Verlet
  )
}

type App.Sharmi.Body {
  new(
    radius: F64
    mass: F64
    pos: Physics.Verlet
  )
}

type App.Sharmi.Player {
  new(
    name: String
    dir: V2
    pos: Physics.Verlet
  )
}

App.Sharmi.Body.Gravity(body: App.Sharmi.Body): Physics.Field
  (p)
    open body; open body.pos;
    Physics.Gravity(body.pos.pos, body.mass, p)

App.Sharmi.Gravity(local: App.Sharmi.Game.State.local): Physics.Field
  (p)
  open local
  let acc = {0, 0} :: V2
  for body in local.bodies with acc:
    acc + App.Sharmi.Body.Gravity(body, p)
  acc

App.Sharmi.State: App.State
  App.State.new(App.Sharmi.State.local, App.Sharmi.State.global)

// Initial state
App.Sharmi.init: App.Init<App.Sharmi.State>
  App.Store.new<App.Sharmi.State>(App.Sharmi.test_state, App.Sharmi.State.global.new)

App.Sharmi.Body.draw(
  img: VoxBox
  e: App.Sharmi.Body
  z: I32
  col: Col32
): VoxBox
  let x = e@pos@pos@x
  let y = e@pos@pos@y
  VoxBox.Draw.rect(
    F64.to_u32(x)
    F64.to_u32(y)
    I32.to_u32(z)
    10
    10
    col
    img
  )

App.Sharmi.Player.draw(
  img: VoxBox
  e: App.Sharmi.Player
  z: I32
  col: Col32
): VoxBox
  let x = e@pos@pos@x
  let y = e@pos@pos@y
  VoxBox.Draw.rect(
    F64.to_u32(x)
    F64.to_u32(y)
    I32.to_u32(z)
    10
    10
    col
    img
  )
App.Sharmi.Game.draw(
  img: VoxBox
  local: App.Sharmi.Game.State.local
  global: App.Sharmi.Game.State.global
): DOM
  open local;
  for body in local.bodies with img:
    App.Sharmi.Body.draw(
      img
      body
      0
      Col32.new(255, 0, 0, 255)
    )
  for player in local.players with img:
    App.Sharmi.Player.draw(
      img
      player
      0
      Col32.new(0, 0, 255, 255)
    )
  <div style={
    "display": "flex"
    "width": "100%"
    "justify-content": "space-evenly"
  }>{
    DOM.vbox({"id": "game_screen", "width": Nat.show(1024), "height": Nat.show(1024), "scale": "1"}, {}, img)
  }</div>

// Render function
App.Sharmi.draw(img: VoxBox): App.Draw<App.Sharmi.State>
  (state)
    open state
    case state.local {
      home:
        // TODO define App.Sharmi.Home.draw
        <p>"welcome home"</p>
      game:
        App.Sharmi.Game.draw(img, state.local.state, App.Sharmi.Game.State.global.new)
    }

// Event handler
App.Sharmi.when: App.When<App.Sharmi.State>
  (event, state)
  open state;
  case state.local {
    game:
      case event {
    //    init: IO {
    //      //App.watch!(App.Sharmi.room)
    //      //App.new_post!(App.room_zero, "")
    //    }
        frame: IO {
          log("frame")
          open state.local.state;
          let new_bodies = []
          // do physics
          for body in state.local.state.bodies with new_bodies:
            open body; open body.pos;
            //let new_acc = App.Sharmi.Gravity(state.local.state, body.pos.pos)
            //let new_pos = body.pos@acc <- new_acc
            let new_pos = Physics.Verlet.step(body.pos, 1.0/60.0)
            let new_pos = body.pos
            let new_body = body@pos <- new_pos
            new_body & new_bodies
          let new_players = []
          for player in state.local.state.players with new_players:
            open player; open player.pos
            let new_acc = App.Sharmi.Gravity(state.local.state, player.pos.pos)
            open new_acc;
            //log(player.name|" new_acc: {"|F64.show(new_acc.x)|", "|F64.show(new_acc.y)|"}")
            let new_pos = player.pos@acc <- new_acc
            let new_pos = Physics.Verlet.step(new_pos, 1.0/60.0)
            let new_player = player@pos <- new_pos
            new_player & new_players
          let new_state =
            App.Sharmi.State.local.game(
              App.Sharmi.Game.State.local.new(
                new_players
                new_bodies
                state.local.state.goals
                state.local.state.camera
              )
            )
          App.set_local!(new_state)
        }
      } default App.pass!
  } default App.pass!

// Global ticker: not used
App.Sharmi.tick: App.Tick<App.Sharmi.State>
  App.no_tick<App.Sharmi.State>

App.Sharmi.post: App.Post<App.Sharmi.State>
  App.no_post<App.Sharmi.State>
//  (time, room, addr, data, global_state)
//  global_state + 1

App.Sharmi: App<App.Sharmi.State>
  let img = VoxBox.alloc_capacity(65536*8)
  App.new<App.Sharmi.State>(
    App.Sharmi.init
    App.Sharmi.draw(img)
    App.Sharmi.when
    App.Sharmi.tick
    App.Sharmi.post
  )

App.Sharmi.test_state: App.Sharmi.State.local
  let player0 = App.Sharmi.Player.new("Stanci", {0, 1}, Physics.Verlet.moving({300, 500}, {0, -0.5})) // x:0 y:20
  let player1 = App.Sharmi.Player.new("Rigi", {0, 1}, Physics.Verlet.moving({450, 500}, {0, 2})) // x:10 y:-30
  let ring0 = App.Sharmi.Goal.new(Physics.Verlet.still({10, 30})) // x:10 y:30
  let ring1 = App.Sharmi.Goal.new(Physics.Verlet.still({40, 150})) // x:40 y:0
  let body = App.Sharmi.Body.new(5, 1000000, Physics.Verlet.still({500, 500}))
  let camera = {{-40.0, -40.0} :: V2, {40, 40} :: V2}
  App.Sharmi.State.local.game(
    App.Sharmi.Game.State.local.new(
      [player0] // List<App.Sharmi.Player>
      //[player0, player1] // List<App.Sharmi.Player>
      [body] // List<App.Sharmi.Body>
      [ring0, ring1] // List<App.Sharmi.Goal>
      camera // Pair<V2, V2>
    )
  )
