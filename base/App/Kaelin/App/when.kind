App.Kaelin.App.when: App.When<App.Kaelin.State>
 (event, state)
  let stage = state@global@stage
  case stage {
    init     : App.Kaelin.App.when.init(event, state)
    draft    : App.Kaelin.App.when.draft(stage.players, event, state)
    planning : App.Kaelin.App.when.planning(event, state)
  } default App.pass!

(event, state)
open state
open state.global as global
open state.local as local
case global.stage event{
  init init: 
    user = String.to_lower(event.user)
    new_local = state.local@user <- user
    IO {
      // App.watch!(App.Kaelin.Constants.room)
      App.set_local!(new_local)
    }

  init input: 
    log(event.text)
    new_local = state.local@input <- event.text
    App.set_local!(new_local)
  
  init mouse_click:
    switch String.eql(event.id) {
      "random":
        IO {
          get rnd = IO.random(10000000000)
          let str = Nat.show(rnd)
          let room = "0x72214422" | String.drop(String.length(str)-6, str)
          let new_local = state.local@input <- room
          App.set_local!(new_local)
        }
      "ready": 
        IO {
          App.watch!(local.input)
          App.new_post!(local.input, App.Kaelin.Event.serialize(App.Kaelin.Event.to_draft))
        }
    } default App.pass!
  
  draft frame:
    //log(U64.show(event.time))
    App.pass!

  draft mouse_click:
    log("user:" | local.user)
    switch String.starts_with(event.id) {
      "C" :
        log(event.id)
        let coord_nat = String.drop(1, event.id)
        let coord     = App.Kaelin.Coord.Convert.nat_to_axial(Nat.read(coord_nat))
        App.new_post!(global.room, App.Kaelin.Event.serialize(App.Kaelin.Event.draft_coord(coord)))
      "H" :
        let heroes_list = List.map!!(Pair.snd!!, Map.to_list!(global.stage.players))
        let team        = App.Kaelin.Coord.draft.to_team(local.user, global.stage.players) <> App.Kaelin.Team.neutral
        let heroes_map  = App.Kaelin.Hero.info.map
        let hero_name   = String.drop(1, event.id)
        let hero_id     = heroes_map{hero_name}
        let taken       = false
        for player in heroes_list with taken:
          open player
          if App.Kaelin.Team.eql(team, player.team) then
            if U8.eql(player.hero<> 99, hero_id <> 0) then
              true
            else
              taken
          else
            taken
        case hero_id {
          none: App.pass!
          some: 
            if taken then
              App.pass!
            else 
              App.new_post!(global.room, App.Kaelin.Event.serialize(App.Kaelin.Event.draft_hero(hero_id.value)))
        }
      "R" : 
        let players = global.stage.players
        let info    = players{local.user}
        case info {
          none: 
            App.pass!
          some:
            let ready_u8 = 
              if info.value@ready then
              0#8
              else
              1#8
            App.new_post!(global.room, App.Kaelin.Event.serialize(App.Kaelin.Event.draft_ready(ready_u8)))
        }
        
      "T" :
        let player_count = String.drop(1, event.id)
        if String.starts_with(player_count, "3") then
          App.pass!
        else
          let team = String.drop(1, player_count)
          switch String.eql(team){
            "blue": App.new_post!(global.room, App.Kaelin.Event.serialize(App.Kaelin.Event.draft_team(0)))
            "red" : App.new_post!(global.room, App.Kaelin.Event.serialize(App.Kaelin.Event.draft_team(1)))
          } default App.pass!
    } default App.pass!
      
  planning mouse_click:
    App.new_post!(global.room, event.id)
  
  planning key_down:
    switch U16.eql(event.code) {
      49#16: App.new_post!(global.room, App.Kaelin.Event.serialize(App.Kaelin.Event.create_hero(0#8)))
    } default App.set_local!(App.Kaelin.Action.local.set_cast(event.code, state.local, state.global)) // remove mouse pos from cast info as there is no more sense mantain it

  planning frame:
    let new_local = App.Kaelin.Action.local.env_info(event.time, event.info, state.local)
    let new_local = App.Kaelin.Action.local.area(event.time, state.global, new_local)
    App.set_local!(new_local)
    
  planning mouse_up:
    case local.cast_info{ //Organize
      some:
        open local.cast_info.value as cast
        open cast.skill as skill
        info = local.env_info
        target_pos = App.Kaelin.Coord.to_axial(info@mouse_pos)
        hex = App.Kaelin.Event.serialize(App.Kaelin.Event.save_skill(local.user, target_pos, skill.key, local.team))
        IO { 
          App.new_post!(global.room, hex)
          App.set_local!(state.local@cast_info <- none)
        }
    } default App.pass!
      
} default App.pass!
