App.Kaelin.Coord.Path.minimum(origin : App.Kaelin.Coord, goal : App.Kaelin.Coord) : Maybe(App.Kaelin.Coord)
  open goal
  let f = ((a, b)
     open a
     open b
     let a_dis0 = I32.sub(a.i, goal.i)
     let a_dis1 = I32.sub(a.j, goal.j)
     let b_dis0 = I32.sub(b.i, goal.i)
     let b_dis1 = I32.sub(b.j, goal.j)
     Bool.or(I32.ltn(I32.abs(a_dis0), I32.abs(b_dis0)), 
        (I32.eql(I32.abs(a_dis0), I32.abs(b_dis0)) && 
          I32.ltn(I32.abs(a_dis1), I32.abs(b_dis1))))) :: App.Kaelin.Coord -> App.Kaelin.Coord -> Bool
    let neighborhood = App.Kaelin.Coord.Path.moore(origin)
    let sort = ((x, y) case y {
      none : some(x)
      some : if f(x, y.value) then some(x) else y
    }) :: App.Kaelin.Coord -> Maybe(App.Kaelin.Coord) -> Maybe(App.Kaelin.Coord)
    List.foldr(_, _, none, sort, neighborhood)
