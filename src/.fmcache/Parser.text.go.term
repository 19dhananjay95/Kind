#text #idx #code (((text #text (Parser.Reply Unit)) ((((Parser.Reply.value Unit) idx) code) Unit.new)) #text.head #text.tail (((code #code (Parser.Reply Unit)) !error = (String.flatten (((List.cons String) "Expected \'") (((List.cons String) text) (((List.cons String) "\', found end of file.") (List.nil String))))); ((((Parser.Reply.error Unit) idx) code) error)) #code.head #code.tail (((((U16.eql text.head) code.head) # (Parser.Reply Unit)) (((Parser.text text.tail) (Nat.succ idx)) code.tail)) !error = (String.flatten (((List.cons String) "Expected \'") (((List.cons String) text) (((List.cons String) "\', found \'") (((List.cons String) ((String.cons code.head) String.nil)) (((List.cons String) "\'.") (List.nil String))))))); ((((Parser.Reply.error Unit) idx) code) error))))