App.GG.Effect.creature.is_enemy(coord: App.GG.Coord): App.GG.Effect<Bool>
  (center, origin, grid)
  let bool =
    Maybe {
      get creature = App.GG.Creature.get(coord, grid)
      get team  = App.GG.Effect.team.get(center, origin, grid)
      let bool = App.GG.Team.eql(creature@team, team)
      return not(bool) 
    } <> false
  App.GG.Effect.Result.new!(bool, center, origin, grid, (img) img, 0, "")

App.GG.Effect.creature.change_hp_at(dmg: I32, pos: App.GG.Coord, flinch: Bool): App.GG.Effect<I32>
  (center, origin, grid)
  let {real_dmg, new_grid} =
    Maybe {
      get tile = App.GG.Grid.get(pos, grid)
      get creature = tile@creature
      let hp = creature@hp
      let new_hp = I32.max(hp + dmg, 0)
      let new_creature = creature@hp <- new_hp
      let new_tile = tile@creature <- some(new_creature)
      let real_dmg = hp - new_hp
      let new_grid = App.GG.Grid.set(pos, new_tile, grid)
      let new_grid = 
        if flinch then
          let stun = App.GG.Actions.stun(App.GG.Creature.Status.Stun.flinch, App.GG.Animation.damage, 24)
          App.GG.Actions.new_actions(pos, new_grid, stun)
        else
          new_grid
      let new_grid = 
        if new_hp =? 0 then
          let vbox = App.GG.Monster.to_vbox(creature@category)
          let vbox = vbox(App.GG.Animation.death)
          let new_grid = App.GG.Creature.delete(pos, new_grid)
          let new_grid = App.GG.Projectile.create(pos, App.GG.Projectile.death(vbox, 23#64), new_grid)
          new_grid
        else
          new_grid 

      return {real_dmg, new_grid}
    } <> {+0#32, grid}
  App.GG.Effect.Result.new!(real_dmg, center, origin, new_grid, (img) img, 0, "")

App.GG.Effect.creature.get: App.GG.Effect<Maybe<App.GG.Creature>>
  (center, origin, grid)
  let creature = App.GG.Creature.get(center, grid)
  App.GG.Effect.Result.new!(creature, center, origin, grid, (img) img, 0, "")

App.GG.Effect.creature.get_at(pos: App.GG.Coord): App.GG.Effect<Maybe<App.GG.Creature>>
  (center, origin, grid)
  let creature = App.GG.Creature.get(pos, grid)
  App.GG.Effect.Result.new!(creature, center, origin, grid, (img) img, 0, "")

App.GG.Effect.creature.modify(mod: App.GG.Creature -> App.GG.Creature): App.GG.Effect<Unit>
  (center, origin, grid)
  let new_grid = App.GG.Creature.modify_at(mod, center, grid)
  App.GG.Effect.Result.new!(unit, center, origin, new_grid, (img) img, 0, "")

App.GG.Effect.creature.modify_at(mod: App.GG.Creature -> App.GG.Creature, pos: App.GG.Coord): App.GG.Effect<Unit>
  (center, origin, grid)
  let new_grid = App.GG.Creature.modify_at(mod, pos, grid)
  App.GG.Effect.Result.new!(unit, center, origin, new_grid, (img) img, 0, "")

App.GG.Effect.creature.damage_at(dmg: I32, pos: App.GG.Coord, flinch: Bool): App.GG.Effect<I32>
  App.GG.Effect.creature.change_hp_at(I32.neg(dmg), pos, flinch)
