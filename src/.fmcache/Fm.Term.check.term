#term #type #defs #ctx #path #orig ((((((Monad.bind Fm.Check) Fm.Check.monad) Fm.Term) Fm.Term) (((((((((((((((((term #term (Fm.Check Fm.Term)) #term.name #term.indx ((((((List.at_last ((Pair Fm.Name) Fm.Term)) term.indx) ctx) #got (Fm.Check Fm.Term)) (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((Fm.Error.undefined_reference orig) term.name)) (List.nil Fm.Error)))) #got.value ((((Monad.pure Fm.Check) Fm.Check.monad) Fm.Term) ((got.value #got.value Fm.Term) #got.value.fst #got.value.snd got.value.snd)))) #term.name ((((((Fm.get Fm.Def) term.name) defs) #got (Fm.Check Fm.Term)) (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((Fm.Error.undefined_reference orig) term.name)) (List.nil Fm.Error)))) #got.value ((got.value #got.value (Fm.Check Fm.Term)) #got.value.file #got.value.code #got.value.orig #got.value.name #got.value.term #got.value.type #got.value.isct #got.value.stat !ref_name = got.value.name; !ref_type = got.value.type; !ref_term = got.value.term; !ref_stat = got.value.stat; (((((ref_stat #ref_stat (Fm.Check Fm.Term)) (((Fm.Check.result Fm.Term) ((Maybe.some Fm.Term) ref_type)) (((List.cons Fm.Error) (Fm.Error.waiting ref_name)) (List.nil Fm.Error)))) (((Fm.Check.result Fm.Term) ((Maybe.some Fm.Term) ref_type)) (List.nil Fm.Error))) (((Fm.Check.result Fm.Term) ((Maybe.some Fm.Term) ref_type)) (List.nil Fm.Error))) #ref_stat.errors (((Fm.Check.result Fm.Term) ((Maybe.some Fm.Term) ref_type)) (((List.cons Fm.Error) (Fm.Error.indirect ref_name)) (List.nil Fm.Error))))))) ((((Monad.pure Fm.Check) Fm.Check.monad) Fm.Term) Fm.Term.typ)) #term.eras #term.self #term.name #term.xtyp #term.body !ctx_size = ((List.length ((Pair Fm.Name) Fm.Term)) ctx); !self_var = ((Fm.Term.var term.self) ctx_size); !body_var = ((Fm.Term.var term.name) (Nat.succ ctx_size)); !body_ctx = (((List.cons ((Pair Fm.Name) Fm.Term)) ((((Pair.new Fm.Name) Fm.Term) term.name) term.xtyp)) (((List.cons ((Pair Fm.Name) Fm.Term)) ((((Pair.new Fm.Name) Fm.Term) term.self) term)) ctx)); ((((((Monad.bind Fm.Check) Fm.Check.monad) Fm.Term) Fm.Term) ((((((Fm.Term.check term.xtyp) ((Maybe.some Fm.Term) Fm.Term.typ)) defs) ctx) (Fm.MPath.o path)) orig)) # ((((((Monad.bind Fm.Check) Fm.Check.monad) Fm.Term) Fm.Term) ((((((Fm.Term.check ((term.body self_var) body_var)) ((Maybe.some Fm.Term) Fm.Term.typ)) defs) body_ctx) (Fm.MPath.i path)) orig)) # ((((Monad.pure Fm.Check) Fm.Check.monad) Fm.Term) Fm.Term.typ)))) #term.name #term.body (((type #type (Fm.Check Fm.Term)) !lam_type = (Fm.Term.hol Bits.e); !lam_term = (((Fm.Term.ann Bool.false) term) lam_type); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((Fm.Error.patch (Fm.MPath.to_bits path)) lam_term)) (List.nil Fm.Error)))) #type.value !typv = ((Fm.Term.reduce type.value) defs); (((((((((((((((((typv #typv (Fm.Check Fm.Term)) #typv.name #typv.indx !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) type.value); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #typv.name !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) type.value); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) type.value); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #typv.eras #typv.self #typv.name #typv.xtyp #typv.body !ctx_size = ((List.length ((Pair Fm.Name) Fm.Term)) ctx); !self_var = term; !body_var = ((Fm.Term.var term.name) ctx_size); !body_typ = ((typv.body self_var) body_var); !body_ctx = (((List.cons ((Pair Fm.Name) Fm.Term)) ((((Pair.new Fm.Name) Fm.Term) term.name) typv.xtyp)) ctx); ((((((Monad.bind Fm.Check) Fm.Check.monad) Fm.Term) Fm.Term) ((((((Fm.Term.check (term.body body_var)) ((Maybe.some Fm.Term) body_typ)) defs) body_ctx) (Fm.MPath.o path)) orig)) # ((((Monad.pure Fm.Check) Fm.Check.monad) Fm.Term) type.value))) #typv.name #typv.body !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) type.value); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #typv.func #typv.argm !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) type.value); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #typv.name #typv.expr #typv.body !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) type.value); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #typv.name #typv.expr #typv.body !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) type.value); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #typv.done #typv.term #typv.type !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) type.value); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #typv.name #typv.dref #typv.verb !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) type.value); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #typv.path !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) type.value); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #typv.natx !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) type.value); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #typv.chrx !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) type.value); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #typv.strx !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) type.value); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #typv.path #typv.expr #typv.name #typv.with #typv.cses #typv.moti !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) type.value); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #typv.orig #typv.expr !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) type.value); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))))) #term.func #term.argm ((((((Monad.bind Fm.Check) Fm.Check.monad) Fm.Term) Fm.Term) ((((((Fm.Term.check term.func) (Maybe.none Fm.Term)) defs) ctx) (Fm.MPath.o path)) orig)) #func_typ !func_typ = ((Fm.Term.reduce func_typ) defs); (((((((((((((((((func_typ #func_typ (Fm.Check Fm.Term)) #func_typ.name #func_typ.indx !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) func_typ); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #func_typ.name !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) func_typ); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) func_typ); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #func_typ.eras #func_typ.self #func_typ.name #func_typ.xtyp #func_typ.body ((((((Monad.bind Fm.Check) Fm.Check.monad) Fm.Term) Fm.Term) ((((((Fm.Term.check term.argm) ((Maybe.some Fm.Term) func_typ.xtyp)) defs) ctx) (Fm.MPath.i path)) orig)) # ((((Monad.pure Fm.Check) Fm.Check.monad) Fm.Term) ((func_typ.body term.func) term.argm)))) #func_typ.name #func_typ.body !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) func_typ); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #func_typ.func #func_typ.argm !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) func_typ); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #func_typ.name #func_typ.expr #func_typ.body !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) func_typ); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #func_typ.name #func_typ.expr #func_typ.body !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) func_typ); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #func_typ.done #func_typ.term #func_typ.type !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) func_typ); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #func_typ.name #func_typ.dref #func_typ.verb !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) func_typ); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #func_typ.path !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) func_typ); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #func_typ.natx !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) func_typ); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #func_typ.chrx !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) func_typ); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #func_typ.strx !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) func_typ); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #func_typ.path #func_typ.expr #func_typ.name #func_typ.with #func_typ.cses #func_typ.moti !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) func_typ); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))) #func_typ.orig #func_typ.expr !expected = (((Either.left String) Fm.Term) "(function type)"); !detected = (((Either.right String) Fm.Term) func_typ); (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) expected) detected) ctx)) (List.nil Fm.Error)))))) #term.name #term.expr #term.body !ctx_size = ((List.length ((Pair Fm.Name) Fm.Term)) ctx); ((((((Monad.bind Fm.Check) Fm.Check.monad) Fm.Term) Fm.Term) ((((((Fm.Term.check term.expr) (Maybe.none Fm.Term)) defs) ctx) (Fm.MPath.o path)) orig)) #expr_typ !body_val = (term.body ((Fm.Term.var term.name) ctx_size)); !body_ctx = (((List.cons ((Pair Fm.Name) Fm.Term)) ((((Pair.new Fm.Name) Fm.Term) term.name) expr_typ)) ctx); ((((((Monad.bind Fm.Check) Fm.Check.monad) Fm.Term) Fm.Term) ((((((Fm.Term.check body_val) type) defs) body_ctx) (Fm.MPath.i path)) orig)) #body_typ ((((Monad.pure Fm.Check) Fm.Check.monad) Fm.Term) body_typ)))) #term.name #term.expr #term.body !ctx_size = ((List.length ((Pair Fm.Name) Fm.Term)) ctx); ((((((Monad.bind Fm.Check) Fm.Check.monad) Fm.Term) Fm.Term) ((((((Fm.Term.check term.expr) (Maybe.none Fm.Term)) defs) ctx) (Fm.MPath.o path)) orig)) #expr_typ !body_val = (term.body (((Fm.Term.ann Bool.true) term.expr) expr_typ)); !body_ctx = (((List.cons ((Pair Fm.Name) Fm.Term)) ((((Pair.new Fm.Name) Fm.Term) term.name) expr_typ)) ctx); ((((((Monad.bind Fm.Check) Fm.Check.monad) Fm.Term) Fm.Term) ((((((Fm.Term.check body_val) type) defs) body_ctx) (Fm.MPath.i path)) orig)) #body_typ ((((Monad.pure Fm.Check) Fm.Check.monad) Fm.Term) body_typ)))) #term.done #term.term #term.type (((term.done # (Fm.Check Fm.Term)) ((((Monad.pure Fm.Check) Fm.Check.monad) Fm.Term) term.type)) ((((((Monad.bind Fm.Check) Fm.Check.monad) Fm.Term) Fm.Term) ((((((Fm.Term.check term.term) ((Maybe.some Fm.Term) term.type)) defs) ctx) (Fm.MPath.o path)) orig)) # ((((((Monad.bind Fm.Check) Fm.Check.monad) Fm.Term) Fm.Term) ((((((Fm.Term.check term.type) ((Maybe.some Fm.Term) Fm.Term.typ)) defs) ctx) (Fm.MPath.i path)) orig)) # ((((Monad.pure Fm.Check) Fm.Check.monad) Fm.Term) term.type))))) #term.name #term.dref #term.verb (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) (((((Fm.Error.show_goal term.name) term.dref) term.verb) type) ctx)) (List.nil Fm.Error)))) #term.path (((Fm.Check.result Fm.Term) type) (List.nil Fm.Error))) #term.natx ((((Monad.pure Fm.Check) Fm.Check.monad) Fm.Term) (Fm.Term.ref "Nat"))) #term.chrx ((((Monad.pure Fm.Check) Fm.Check.monad) Fm.Term) (Fm.Term.ref "Char"))) #term.strx ((((Monad.pure Fm.Check) Fm.Check.monad) Fm.Term) (Fm.Term.ref "String"))) #term.path #term.expr #term.name #term.with #term.cses #term.moti !expr = term.expr; ((((((Monad.bind Fm.Check) Fm.Check.monad) Fm.Term) Fm.Term) ((((((Fm.Term.check expr) (Maybe.none Fm.Term)) defs) ctx) (Fm.MPath.o path)) orig)) #etyp !dsug = (((term.moti #term.moti (Maybe Fm.Term)) !moti = (((type #type Fm.Term) (Fm.Term.hol Bits.e)) #type.value !size = ((List.length ((Pair Fm.Name) Fm.Term)) ctx); !typv = ((Fm.Term.normalize type.value) (Map.new Fm.Def)); !moti = ((((((Fm.SmartMotive.make term.name) term.expr) etyp) typv) size) defs); moti); ((Maybe.some Fm.Term) ((((((Fm.Term.cse term.path) term.expr) term.name) term.with) term.cses) ((Maybe.some Fm.Term) moti)))) #term.moti.value ((((((((Fm.Term.desugar_cse term.expr) term.name) term.with) term.cses) term.moti.value) etyp) defs) ctx)); (((dsug #dsug (Fm.Check Fm.Term)) (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) (((Fm.Error.cant_infer orig) term) ctx)) (List.nil Fm.Error)))) #dsug.value (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((Fm.Error.patch (Fm.MPath.to_bits path)) dsug.value)) (List.nil Fm.Error)))))) #term.orig #term.expr ((((((Fm.Term.check term.expr) type) defs) ctx) path) ((Maybe.some ((Pair Nat) Nat)) term.orig)))) #infr (((type #type (Fm.Check Fm.Term)) (((Fm.Check.result Fm.Term) ((Maybe.some Fm.Term) infr)) (List.nil Fm.Error))) #type.value ((((((Monad.bind Fm.Check) Fm.Check.monad) Bool) Fm.Term) (((((Fm.Term.equal type.value) infr) defs) ((List.length ((Pair Fm.Name) Fm.Term)) ctx)) Set.new)) #eqls (((eqls # (Fm.Check Fm.Term)) ((((Monad.pure Fm.Check) Fm.Check.monad) Fm.Term) type.value)) (((Fm.Check.result Fm.Term) type) (((List.cons Fm.Error) ((((Fm.Error.type_mismatch orig) (((Either.right String) Fm.Term) type.value)) (((Either.right String) Fm.Term) infr)) ctx)) (List.nil Fm.Error)))))))