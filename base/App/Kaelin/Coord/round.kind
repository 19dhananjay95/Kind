App.Kaelin.Coord.round(
  axial_x: F64,
  axial_y: F64
): Pair(I32, I32)

  f = U32.to_f64
  i = F64.to_i32
  axial_z = F64.sub(F64.sub(f(0u), axial_x), axial_y)

  round_x = App.Kaelin.Coord.round.round_F64(axial_x)
  round_y = App.Kaelin.Coord.round.round_F64(axial_y)
  round_z = App.Kaelin.Coord.round.round_F64(axial_z)

  diff_x = App.Kaelin.Coord.round.diff(axial_x, round_x)
  diff_y = App.Kaelin.Coord.round.diff(axial_y, round_y)
  diff_z = App.Kaelin.Coord.round.diff(axial_z, round_z)
  
  result = case F64.gtn(diff_x, diff_z) {
    true:
      case F64.gtn(diff_y, diff_x){
        true: 
          new_y = F64.sub(F64.sub(f(0u), round_x), round_z)
          {i(round_x), i(new_y)}
        false:
          new_x = F64.sub(F64.sub(f(0u), round_y), round_z)
          {i(new_x), i(round_y)}
      }
    false:
      case F64.gtn(diff_y, diff_z) {
        true:
          new_y = F64.sub(F64.sub(f(0u), round_x), round_z)
          {i(round_x), i(new_y)}
        false:
          {i(round_x), i(round_y)}
      }
  }
  result
