((((((Monad.bind Parser) Parser.monad) Nat) Fm.Term) Fm.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Fm.Name) Fm.Term) Fm.Parser.name) #self ((((((Monad.bind Parser) Parser.monad) (List Fm.Binder)) Fm.Term) Fm.Parser.binder) #bind ((((((Monad.bind Parser) Parser.monad) (Maybe Unit)) Fm.Term) ((Parser.maybe Unit) (Fm.Parser.text "->"))) # ((((((Monad.bind Parser) Parser.monad) Fm.Term) Fm.Term) Fm.Parser.term) #body !term = (((((List.fold Fm.Binder) bind) Fm.Term) body) #x #t ((x #x Fm.Term) #x.eras #x.name #x.term (((((Fm.Term.all x.eras) "") x.name) x.term) #s #x t))); ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Fm.Term) (Fm.Parser.stop init)) #orig ((((Monad.pure Parser) Parser.monad) Fm.Term) (((((((((((((((((term #term Fm.Term) #term.name #term.indx term) #term.name term) term) #term.eras #term.self #term.name #term.xtyp #term.body ((Fm.Term.ori orig) (((((Fm.Term.all term.eras) self) term.name) term.xtyp) term.body))) #term.name #term.body term) #term.func #term.argm term) #term.name #term.expr #term.body term) #term.name #term.expr #term.body term) #term.done #term.term #term.type term) #term.name #term.dref #term.verb term) #term.path term) #term.natx term) #term.chrx term) #term.strx term) #term.path #term.expr #term.name #term.with #term.cses #term.moti term) #term.orig #term.expr term))))))))