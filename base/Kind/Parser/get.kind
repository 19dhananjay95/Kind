Kind.Parser.get(body: Unit -> Parser(Kind.Term)): Parser(Kind.Term)
  Kind.Parser.block("let", Parser {
    Kind.Parser.text("let ")
    get nams = Kind.Parser.items!("{", Kind.Parser.name1, "}")
    Kind.Parser.text("=")
    get expr = Kind.Parser.term
    Parser.maybe!(Kind.Parser.text(";"))
    get body = body(unit)
    let term = expr
    let term = Kind.Term.app(term, Kind.Term.lam("", (x) Kind.Term.hol(Bits.e)))
    let term = Kind.Term.app(term, List.fold!(nams)!(body, (nam,bod) Kind.Term.lam(nam, (x) bod)))
    return term
  })

Kind.Parser.get.omit(body: Unit -> Parser(Kind.Term)): Parser(Kind.Term)
  Kind.Parser.block("let", Parser {
    Kind.Parser.text("{")
    get nams = Kind.Parser.items!("{", Kind.Parser.name1, "}")
    Kind.Parser.text("}")
    Kind.Parser.text("= ")
    get expr = Kind.Parser.term
    Parser.maybe!(Kind.Parser.text(";"))
    get body = body(unit)
    let term = expr
    let term = Kind.Term.app(term, Kind.Term.lam("", (x) Kind.Term.hol(Bits.e)))
    let term = Kind.Term.app(term, List.fold!(nams)!(body, (nam,bod) Kind.Term.lam(nam, (x) bod)))
    return term
  })
