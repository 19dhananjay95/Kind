((((((Monad.bind Parser) Parser.monad) Nat) Fm.Term) Fm.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Unit) Fm.Term) (Fm.Parser.text "case ")) # ((((((Monad.bind Parser) Parser.monad) (List Unit)) Fm.Term) Fm.Parser.spaces) # ((((((Monad.bind Parser) Parser.monad) Fm.Term) Fm.Term) Fm.Parser.term) #expr ((((((Monad.bind Parser) Parser.monad) (Maybe Fm.Name)) Fm.Term) ((Parser.maybe Fm.Name) ((((((Monad.bind Parser) Parser.monad) Unit) Fm.Name) (Fm.Parser.text "as")) # Fm.Parser.name1))) #name !name = (((name #name Fm.Name) (((((((((((((((((((Fm.Term.reduce expr) (Map.new Fm.Def)) #expr Fm.Name) #expr.name #expr.indx expr.name) #expr.name expr.name) (Fm.Name.read "self")) #expr.eras #expr.self #expr.name #expr.xtyp #expr.body (Fm.Name.read "self")) #expr.name #expr.body (Fm.Name.read "self")) #expr.func #expr.argm (Fm.Name.read "self")) #expr.name #expr.expr #expr.body (Fm.Name.read "self")) #expr.name #expr.expr #expr.body (Fm.Name.read "self")) #expr.done #expr.term #expr.type (Fm.Name.read "self")) #expr.name #expr.dref #expr.verb (Fm.Name.read "self")) #expr.path (Fm.Name.read "self")) #expr.natx (Fm.Name.read "self")) #expr.chrx (Fm.Name.read "self")) #expr.strx (Fm.Name.read "self")) #expr.path #expr.expr #expr.name #expr.with #expr.cses #expr.moti (Fm.Name.read "self")) #expr.orig #expr.expr (Fm.Name.read "self"))) #name.value name.value); ((((((Monad.bind Parser) Parser.monad) (List Fm.Def)) Fm.Term) ((Parser.many Fm.Def) Fm.Parser.case.with)) #wyth ((((((Monad.bind Parser) Parser.monad) Unit) Fm.Term) (Fm.Parser.text "{")) # ((((((Monad.bind Parser) Parser.monad) (List ((Pair Fm.Name) Fm.Term))) Fm.Term) (((Parser.until ((Pair Fm.Name) Fm.Term)) (Fm.Parser.text "}")) Fm.Parser.case.case)) #cses !cses = ((Map.from_list Fm.Term) ((((List.mapped ((Pair Fm.Name) Fm.Term)) cses) ((Pair Bits) Fm.Term)) #x ((((Pair.new Bits) Fm.Term) (Fm.Name.to_bits (((Pair.fst Fm.Name) Fm.Term) x))) (((Pair.snd Fm.Name) Fm.Term) x)))); ((((((Monad.bind Parser) Parser.monad) (Maybe Fm.Term)) Fm.Term) ((Parser.first_of (Maybe Fm.Term)) (((List.cons (Parser (Maybe Fm.Term))) ((((((Monad.bind Parser) Parser.monad) Unit) (Maybe Fm.Term)) (Fm.Parser.text ":")) # ((((((Monad.bind Parser) Parser.monad) Fm.Term) (Maybe Fm.Term)) Fm.Parser.term) #term ((((Monad.pure Parser) Parser.monad) (Maybe Fm.Term)) ((Maybe.some Fm.Term) term))))) (((List.cons (Parser (Maybe Fm.Term))) ((((((Monad.bind Parser) Parser.monad) Unit) (Maybe Fm.Term)) (Fm.Parser.text "!")) # ((((Monad.pure Parser) Parser.monad) (Maybe Fm.Term)) (Maybe.none Fm.Term)))) (((List.cons (Parser (Maybe Fm.Term))) ((((Monad.pure Parser) Parser.monad) (Maybe Fm.Term)) ((Maybe.some Fm.Term) (Fm.Term.hol Bits.e)))) (List.nil (Parser (Maybe Fm.Term)))))))) #moti ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Fm.Term) (Fm.Parser.stop init)) #orig ((((Monad.pure Parser) Parser.monad) Fm.Term) ((Fm.Term.ori orig) ((((((Fm.Term.cse Bits.e) expr) name) wyth) cses) moti)))))))))))))