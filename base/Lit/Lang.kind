// A simple syntax for Lit.Core terms

Lit.Lang.show(term: Lit.Core.Term, world: Lit.Core.World, vars: List<String>, depth: Nat): String
  open world
  case term {
    var: case vars[term.index] as got {
      none: "^" | Nat.show(term.index)
      some: got.value
    }
    alloc: Maybe {
      get type = world.types[term.type]
      get form = type@forms[term.form]
      let text = ""
      let vals = List.zip_with!!!(
        (field,value)
          field@name
          | ":"
          | Lit.Lang.show(value, world, vars, depth),
        form@fields,
        term.vals)
      let vals = if List.is_empty!(vals) then "" else "{" | String.join(",",vals) | "}"
      return type@name | "#" | form@name | vals
    } <> "?"
    match: Maybe {
      get type = world.types[term.type]
      let expr = Lit.Lang.show(term.expr, world, vars, depth)
      let name = term.name
      let vals = List.zip_with!!!(
        (form,cse)
          let fields = List.map!!((x) name | "." | x@name, List.reverse!(form@fields))
          let vars = fields ++ vars
          let depth = Nat.succ(depth)
          form@name
          | ": "
          | Lit.Lang.show(cse, world, vars, depth),
        type@forms,
        term.cses)
      return type@name | "#case " | expr | " as " | name | " { " | String.join(", ",vals) | " }" 
    } <> "?"
  } default "?"

Lit.Lang.parser.func(world: Lit.Core.World): Parser<Lit.Core.Term>
  Parser {
    get term = Lit.Lang.parser(world, ["input"])
    return term
  }

Lit.Lang.parser(world: Lit.Core.World, vars: List<String>): Parser<Lit.Core.Term>
  open world
  Parser.choice!([
    Lit.Lang.parser.alloc(world, vars)
    Lit.Lang.parser.match(world, vars)
    Lit.Lang.parser.var(world, vars)
  ])

Lit.Lang.parser.alloc(world: Lit.Core.World, vars: List<String>): Parser<Lit.Core.Term>
  Parser {
    get type_name = Kind.Parser.name
    case Lit.Core.World.find_type(type_name, world) as found {
      none: Parser.fail!("Type not found.")
      some: Parser {
        Kind.Parser.text("#")
        get form_name = Kind.Parser.name
        let {type_num, type} = found.value
        case Lit.Core.Type.find_form(form_name, type) as found {
          none: Parser.fail!("Form not found.")
          some: Parser {
            let {form_num, form} = found.value
            let fields = form@fields
            if List.is_empty!(fields) then Parser {
              return Lit.Core.Term.alloc(type_num, form_num, [])
            } else Parser {
              let fields = List.map!!((x) x@name, fields)
              Kind.Parser.text("{")
              get vals = Lit.Lang.parser.alloc.vals(fields, world, vars)
              Kind.Parser.text("}")
              return Lit.Core.Term.alloc(type_num, form_num, vals)
            }
          }
        }
      }
    }
  }

Lit.Lang.parser.alloc.vals(fields: List<String>, world: Lit.Core.World, vars: List<String>): Parser<List<Lit.Core.Term>>
  case fields {
    nil: Parser {
      return []
    }
    cons: Parser {
      Kind.Parser.text(fields.head)
      Kind.Parser.text(":")
      get head = Lit.Lang.parser(world, vars)
      Parser.maybe!(Kind.Parser.text(","))
      get tail = Lit.Lang.parser.alloc.vals(fields.tail, world, vars)
      return head & tail
    }
  }

Lit.Lang.parser.match(world: Lit.Core.World, vars: List<String>): Parser<Lit.Core.Term>
  Parser {
    get type_name = Kind.Parser.name
    case Lit.Core.World.find_type(type_name, world) as found {
      none: Parser.fail!("Type not found.")
      some: Parser {
        let {type_num, type} = found.value
        //let cses = List.map!!((x) x@name, type@forms)
        Kind.Parser.text("#")
        Kind.Parser.text("case ")
        get expr = Lit.Lang.parser(world, vars)
        Kind.Parser.text("as")
        get name = Kind.Parser.name
        Kind.Parser.text("{")
        get cses = Lit.Lang.parser.match.cses(type@forms, name, vars, world)
        Kind.Parser.text("}")
        return Lit.Core.Term.match(type_num, name, expr, cses)
      }
    }
  }

Lit.Lang.parser.match.cses(cses: List<Lit.Core.Form>, name: String, vars: List<String>, world: Lit.Core.World): Parser<List<Lit.Core.Term>>
  case cses {
    nil: Parser {
      return []
    }
    cons: Parser {
      use form = cses.head
      Kind.Parser.text(form.name)
      Kind.Parser.text(":")
      let fields = List.map!!((x) name | "." | x@name, List.reverse!(form.fields))
      get head = Lit.Lang.parser(world, fields ++ vars)
      Parser.maybe!(Kind.Parser.text(","))
      get tail = Lit.Lang.parser.match.cses(cses.tail, name, vars, world)
      return head & tail
    }
  }

Lit.Lang.parser.var(world: Lit.Core.World, vars: List<String>): Parser<Lit.Core.Term>
  Parser {
    get name = Kind.Parser.name
    case List.find_index!(vars, String.eql(name)) as found {
      none: Parser.fail!("Unbound variable '" | name | "'.")
      some: Parser {
        log("parsed var " | name | " " | Nat.show(found.value) | " " | String.join(",",vars))
        return Lit.Core.Term.var(found.value)
      }
    }
  }
