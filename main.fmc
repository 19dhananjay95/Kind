// ::::::::::
// :: Bool ::
// ::::::::::

def true  [t] [f] t
def false [t] [f] f
def not   [b] [t] [f] (b f t)

// :::::::::
// :: Nat ::
// :::::::::

def zero [s] # [z] z
def succ [n] [s] [s = s] [k = (n #s)] # [z] (s (k z))
def mul  [a] [b] [s] [S = s] [A = [B = (b #S)] (a #B)] # [z] (A z)

// ::::::::::
// :: List ::
// ::::::::::

def cons   [x] [xs] [c] [n] (c x xs)
def nil    [c] [n] n
def head   [x] [xs] (xs [x] [xs] x x)
def tail   [xs] (xs [x] [xs] xs nil)
def concat [a] [b] [cons] [cons = cons] [nil] (a #[h] [t] (cons h t) (b #cons nil))

// :::::::::::
// :: Tuple ::
// :::::::::::

def tup [a] [b] [tup] (tup a b)
def fst [p] (p [a] [b] a)
def snd [p] (p [a] [b] b)

// :::::::::
// :: Num ::
// :::::::::

def fib [n]
  let init (tup #0 #1)
  let next [p] [tup] (p [a] [b] [A = a] [B = b] (tup #B #{A + B}))
  [F = (n #next)] # (F init [a] [b] a)

// Using numeric copy primitive instead of duplications
def fib2 [n]
  let init (tup 0 1)
  let next [p] [tup] (p [a] [b] @ B0 B1 *b (tup B0 {a + B1}))
  [F = (n #next)] # (F init [a] [b] a)

// ::::::::::::
// :: String ::
// ::::::::::::

def to_chars [str] [cons] [cons = cons]
  let cons-non0 [c]
    @ c0 c1 *c
    ? {c0 > 0}
    & (cons c1)
    : [x]x
  [f =
    (snd str #[c] [cs]
      @ ca cb *c
      @ c0 c1 *ca
      @ c2 c3 *cb
      (cons-non0 {{c0 >>  0} & 0xFF}
      (cons-non0 {{c1 >>  8} & 0xFF}
      (cons-non0 {{c2 >> 16} & 0xFF}
      (cons-non0 {{c3 >> 24} & 0xFF}
        cs)))))]
  # [nil] (f nil)

// ::::::::::
// :: Term ::
// ::::::::::

def Lam [body]        [Lam] [App] (Lam body)
def App [func] [argm] [Lam] [App] (App func argm)

def redex [term]
  let lam [body]
    (Lam body)
  let app [func]
    let app-lam [lam-body] [argm]
      (lam-body argm) 
    let app-app [app-func] [app-argm] [argm]
      (App (App app-func app-argm) argm)
    (func app-lam app-app)
  (term lam app)

// :::::::::::
// :: Tests ::
// :::::::::::

def add_test
  {3 + 2}

def mul_test
  {3 * 2}

def incs_test
  [F = (~256 #[x]{x + 1})]
  # (F 0)

def tup_test
  (fst (tup 42 1337))

def pair_test
  @0 (& 42 1337)

def if_test
  ? 1
  & "cond is true"
  : "cond is false"

def cpy_test
  * 42

def prj_test
  @ fst snd
  & 42 1337
  (tup fst snd)

def fib_test
  (fib ~65536)

def to_chars_test
  (to_chars "tester")

def main
  to_chars_test
