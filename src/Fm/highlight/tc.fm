Fm.highlight.tc(
  code: String,
  ix0: Nat,
  ix1: Nat,
  col: Nat,
  row: Nat,
  lft: Maybe(Nat),
  lin: String,
  res: List(String),
): String
  //use skip = Debug.log!(String.flatten([
    //"ix0=", Nat.show(ix0), " ",
    //"ix1=", Nat.show(ix1), " ",
    //"col=", Nat.show(col), " ",
    //"row=", Nat.show(row), " ",
    //"lft=", case lft { none: "-", some: Nat.show(lft.value) }, " ",
    //"len=", Nat.show(String.length(code)), " ",
    //"chr=", Fm.escape.char(case code { nil: '_', cons: code.head }), " ",
    //"res={", String.join("|", List.reverse!(res)), "}",
  //]))
  let spa = 3; // how many lines around error to show
  case code {
    nil:
      Fm.highlight.end(col, row, List.reverse!(res)),
    cons:
      if U16.eql(code.head, '\n') then
        let stp = Maybe.extract!(lft)!(Bool.false, Nat.is_zero);
        if stp then
          Fm.highlight.end(col, row, List.reverse!(res))
        else
          let siz = Nat.succ(Nat.double(spa));
          let lft = case ix1 {
            zero: case lft {
              none: Maybe.some!(spa),
              some: Maybe.some!(Nat.pred(lft.value)),
            },
            succ: lft,
          };
          let ix0 = Nat.pred(ix0);
          let ix1 = Nat.pred(ix1);
          let col = 0;
          let row = Nat.succ(row);
          let res = List.cons!(String.reverse(lin), res);
          let lin = String.reverse(String.flatten([String.pad_left(4, ' ', Nat.show(row)), " | "]));
          Fm.highlight.tc(code.tail, ix0, ix1, col, row, lft, lin, res)
      else
        let chr = String.cons(code.head, String.nil);
        let chr =
          if Bool.and(Nat.is_zero(ix0), Bool.not(Nat.is_zero(ix1))) then
            String.reverse(Fm.color("31", Fm.color("4", chr)))
          else
            chr;
        let res = if Nat.eql(ix0,1) then List.take!(spa,res) else res;
        let ix0 = Nat.pred(ix0);
        let ix1 = Nat.pred(ix1);
        let col = Nat.succ(col);
        let lin = String.flatten([chr, lin]);
        Fm.highlight.tc(code.tail, ix0, ix1, col, row, lft, lin, res)
  }