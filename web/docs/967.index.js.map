{"version":3,"sources":["webpack://kind-web/./src/apps/App.KL.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS,iCAAiC;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACbqBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,6BAA6B;AAC7B;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA,6FAA6F;AAC7F;AACA;AACA;AACA;AACA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrfile":"967.index.js","sourcesContent":["module.exports = (function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    var bitsmap_new = {\n        _: 'BitsMap.new'\n    };\n    var bitsmap_tie = function(val, lft, rgt) {\n        return {\n            _: 'BitsMap.tip',\n            val,\n            lft,\n            rgt\n        };\n    }\n    var maybe_none = {\n        _: 'Maybe.none'\n    };\n    var maybe_some = function(value) {\n        return {\n            _: 'Maybe.some',\n            value\n        };\n    }\n    var bitsmap_get = function(bits, map) {\n        for (var i = bits.length - 1; i >= 0; --i) {\n            if (map._ !== 'BitsMap.new') {\n                map = bits[i] === '0' ? map.lft : map.rgt;\n            }\n        }\n        return map._ === 'BitsMap.new' ? maybe_none : map.val;\n    }\n    var bitsmap_set = function(bits, val, map, mode) {\n        var res = {\n            value: map\n        };\n        var key = 'value';\n        var obj = res;\n        for (var i = bits.length - 1; i >= 0; --i) {\n            var map = obj[key];\n            if (map._ === 'BitsMap.new') {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: maybe_none,\n                    lft: bitsmap_new,\n                    rgt: bitsmap_new\n                };\n            } else {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: map.val,\n                    lft: map.lft,\n                    rgt: map.rgt\n                };\n            }\n            obj = obj[key];\n            key = bits[i] === '0' ? 'lft' : 'rgt';\n        }\n        var map = obj[key];\n        if (map._ === 'BitsMap.new') {\n            var x = mode === 'del' ? maybe_none : {\n                _: 'Maybe.some',\n                value: val\n            };\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: bitsmap_new,\n                rgt: bitsmap_new\n            };\n        } else {\n            var x = mode === 'set' ? {\n                _: 'Maybe.some',\n                value: val\n            } : mode === 'del' ? maybe_none : map.val;\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: map.lft,\n                rgt: map.rgt\n            };\n        }\n        return res.value;\n    };\n    var list_length = list => {\n        var len = 0;\n        while (list._ === 'List.cons') {\n            len += 1;\n            list = list.tail;\n        };\n        return BigInt(len);\n    };\n    const inst_unit = x => x(null);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c0;\n                return $2;\n            } else {\n                var $3 = c1;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c0;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c1($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');\n    const elim_bits = (x => {\n        var $14 = (() => c0 => c1 => c2 => {\n            var self = x;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'o':\n                    var $9 = self.slice(0, -1);\n                    var $10 = c1($9);\n                    return $10;\n                case 'i':\n                    var $11 = self.slice(0, -1);\n                    var $12 = c2($11);\n                    return $12;\n                case 'e':\n                    var $13 = c0;\n                    return $13;\n            };\n        })();\n        return $14;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $15 = u16_to_word(self);\n                    var $16 = c0($15);\n                    return $16;\n            };\n        })();\n        return $17;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $20 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $18 = u32_to_word(self);\n                    var $19 = c0($18);\n                    return $19;\n            };\n        })();\n        return $20;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $23 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $21 = u64_to_word(self);\n                    var $22 = c0($21);\n                    return $22;\n            };\n        })();\n        return $23;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $28 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $24 = c0;\n                return $24;\n            } else {\n                var $25 = self.charCodeAt(0);\n                var $26 = self.slice(1);\n                var $27 = c1($25)($26);\n                return $27;\n            };\n        })();\n        return $28;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $32 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $29 = buffer32_to_depth(self);\n                    var $30 = buffer32_to_u32array(self);\n                    var $31 = c0($29)($30);\n                    return $31;\n            };\n        })();\n        return $32;\n    });\n\n    function App$new$(_init$2, _draw$3, _when$4, _tick$5, _post$6) {\n        var $33 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4,\n            'tick': _tick$5,\n            'post': _post$6\n        });\n        return $33;\n    };\n    const App$new = x0 => x1 => x2 => x3 => x4 => App$new$(x0, x1, x2, x3, x4);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $34 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $34;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n    const App$State$new = Pair$new$(null, null);\n    const App$KL$State = App$State$new;\n\n    function App$KL$State$Local$lobby$(_state$1) {\n        var $35 = ({\n            _: 'App.KL.State.Local.lobby',\n            'state': _state$1\n        });\n        return $35;\n    };\n    const App$KL$State$Local$lobby = x0 => App$KL$State$Local$lobby$(x0);\n\n    function App$KL$Lobby$State$Local$new$(_user$1, _room_input$2) {\n        var $36 = ({\n            _: 'App.KL.Lobby.State.Local.new',\n            'user': _user$1,\n            'room_input': _room_input$2\n        });\n        return $36;\n    };\n    const App$KL$Lobby$State$Local$new = x0 => x1 => App$KL$Lobby$State$Local$new$(x0, x1);\n\n    function App$KL$Global$State$new$(_game$1) {\n        var $37 = ({\n            _: 'App.KL.Global.State.new',\n            'game': _game$1\n        });\n        return $37;\n    };\n    const App$KL$Global$State$new = x0 => App$KL$Global$State$new$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n\n    function App$Store$new$(_local$2, _global$3) {\n        var $38 = ({\n            _: 'App.Store.new',\n            'local': _local$2,\n            'global': _global$3\n        });\n        return $38;\n    };\n    const App$Store$new = x0 => x1 => App$Store$new$(x0, x1);\n    const App$KL$init = (() => {\n        var _local$1 = App$KL$State$Local$lobby$(App$KL$Lobby$State$Local$new$(\"\", \"\"));\n        var _global$2 = App$KL$Global$State$new$(Maybe$none);\n        var $39 = App$Store$new$(_local$1, _global$2);\n        return $39;\n    })();\n\n    function BitsMap$(_A$1) {\n        var $40 = null;\n        return $40;\n    };\n    const BitsMap = x0 => BitsMap$(x0);\n\n    function Map$(_V$1) {\n        var $41 = null;\n        return $41;\n    };\n    const Map = x0 => Map$(x0);\n    const BitsMap$new = ({\n        _: 'BitsMap.new'\n    });\n\n    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {\n        var $42 = ({\n            _: 'BitsMap.tie',\n            'val': _val$2,\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $42;\n    };\n    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);\n\n    function Maybe$some$(_value$2) {\n        var $43 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $43;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n    const BitsMap$set = a0 => a1 => a2 => (bitsmap_set(a0, a1, a2, 'set'));\n    const Bits$e = '';\n    const Bits$o = a0 => (a0 + '0');\n    const Bits$i = a0 => (a0 + '1');\n    const Bits$concat = a0 => a1 => (a1 + a0);\n\n    function Word$to_bits$(_a$2) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $45 = self.pred;\n                var $46 = (Word$to_bits$($45) + '0');\n                var $44 = $46;\n                break;\n            case 'Word.i':\n                var $47 = self.pred;\n                var $48 = (Word$to_bits$($47) + '1');\n                var $44 = $48;\n                break;\n            case 'Word.e':\n                var $49 = Bits$e;\n                var $44 = $49;\n                break;\n        };\n        return $44;\n    };\n    const Word$to_bits = x0 => Word$to_bits$(x0);\n\n    function Nat$succ$(_pred$1) {\n        var $50 = 1n + _pred$1;\n        return $50;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const U16$to_bits = a0 => (u16_to_bits(a0));\n\n    function String$to_bits$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $52 = Bits$e;\n            var $51 = $52;\n        } else {\n            var $53 = self.charCodeAt(0);\n            var $54 = self.slice(1);\n            var $55 = (String$to_bits$($54) + (u16_to_bits($53)));\n            var $51 = $55;\n        };\n        return $51;\n    };\n    const String$to_bits = x0 => String$to_bits$(x0);\n\n    function Map$from_list$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $57 = self.head;\n                var $58 = self.tail;\n                var self = $57;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $60 = self.fst;\n                        var $61 = self.snd;\n                        var $62 = (bitsmap_set(String$to_bits$($60), $61, Map$from_list$($58), 'set'));\n                        var $59 = $62;\n                        break;\n                };\n                var $56 = $59;\n                break;\n            case 'List.nil':\n                var $63 = BitsMap$new;\n                var $56 = $63;\n                break;\n        };\n        return $56;\n    };\n    const Map$from_list = x0 => Map$from_list$(x0);\n\n    function List$cons$(_head$2, _tail$3) {\n        var $64 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $64;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function Pair$(_A$1, _B$2) {\n        var $65 = null;\n        return $65;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function DOM$node$(_tag$1, _props$2, _style$3, _children$4) {\n        var $66 = ({\n            _: 'DOM.node',\n            'tag': _tag$1,\n            'props': _props$2,\n            'style': _style$3,\n            'children': _children$4\n        });\n        return $66;\n    };\n    const DOM$node = x0 => x1 => x2 => x3 => DOM$node$(x0, x1, x2, x3);\n\n    function DOM$text$(_value$1) {\n        var $67 = ({\n            _: 'DOM.text',\n            'value': _value$1\n        });\n        return $67;\n    };\n    const DOM$text = x0 => DOM$text$(x0);\n    const Map$new = BitsMap$new;\n\n    function App$KL$Lobby$draw$input$(_id$1, _value$2) {\n        var _style$3 = Map$from_list$(List$cons$(Pair$new$(\"font-size\", \"2rem\"), List$cons$(Pair$new$(\"font-family\", \"monospace\"), List$cons$(Pair$new$(\"outline\", \"transparent\"), List$nil))));\n        var $68 = DOM$node$(\"input\", Map$from_list$(List$cons$(Pair$new$(\"value\", _value$2), List$cons$(Pair$new$(\"id\", _id$1), List$nil))), _style$3, List$nil);\n        return $68;\n    };\n    const App$KL$Lobby$draw$input = x0 => x1 => App$KL$Lobby$draw$input$(x0, x1);\n\n    function App$KL$Lobby$draw$button$(_id$1, _content$2) {\n        var _style$3 = Map$from_list$(List$cons$(Pair$new$(\"font-size\", \"2rem\"), List$cons$(Pair$new$(\"font-family\", \"monospace\"), List$cons$(Pair$new$(\"margin-left\", \"10px\"), List$cons$(Pair$new$(\"padding\", \"2px\"), List$nil)))));\n        var $69 = DOM$node$(\"button\", Map$from_list$(List$cons$(Pair$new$(\"id\", _id$1), List$nil)), _style$3, List$cons$(DOM$text$(_content$2), List$nil));\n        return $69;\n    };\n    const App$KL$Lobby$draw$button = x0 => x1 => App$KL$Lobby$draw$button$(x0, x1);\n\n    function App$KL$Lobby$draw$(_local$1, _global$2) {\n        var self = _local$1;\n        switch (self._) {\n            case 'App.KL.Lobby.State.Local.new':\n                var $71 = self.room_input;\n                var _style$5 = Map$from_list$(List$cons$(Pair$new$(\"width\", \"100vw\"), List$cons$(Pair$new$(\"height\", \"100vh\"), List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"flex-direction\", \"column\"), List$cons$(Pair$new$(\"justify-content\", \"center\"), List$cons$(Pair$new$(\"align-items\", \"center\"), List$cons$(Pair$new$(\"font-size\", \"2rem\"), List$nil))))))));\n                var $72 = DOM$node$(\"div\", Map$from_list$(List$nil), _style$5, List$cons$(DOM$node$(\"h1\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"margin-bottom\", \"10px\"), List$nil)), List$cons$(DOM$text$(\"Welcome to Kaelin\"), List$nil)), List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$new, List$cons$(DOM$text$(\"Enter a room number: \"), List$cons$(App$KL$Lobby$draw$input$(\"text\", $71), List$cons$(App$KL$Lobby$draw$button$(\"ready\", \"Enter\"), List$cons$(App$KL$Lobby$draw$button$(\"random\", \"Random\"), List$nil))))), List$nil)));\n                var $70 = $72;\n                break;\n        };\n        return $70;\n    };\n    const App$KL$Lobby$draw = x0 => x1 => App$KL$Lobby$draw$(x0, x1);\n\n    function String$cons$(_head$1, _tail$2) {\n        var $73 = (String.fromCharCode(_head$1) + _tail$2);\n        return $73;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function Maybe$(_A$1) {\n        var $74 = null;\n        return $74;\n    };\n    const Maybe = x0 => Maybe$(x0);\n\n    function List$fold$(_list$2, _nil$4, _cons$5) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.cons':\n                var $76 = self.head;\n                var $77 = self.tail;\n                var $78 = _cons$5($76)(List$fold$($77, _nil$4, _cons$5));\n                var $75 = $78;\n                break;\n            case 'List.nil':\n                var $79 = _nil$4;\n                var $75 = $79;\n                break;\n        };\n        return $75;\n    };\n    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);\n\n    function Either$(_A$1, _B$2) {\n        var $80 = null;\n        return $80;\n    };\n    const Either = x0 => x1 => Either$(x0, x1);\n\n    function Either$left$(_value$3) {\n        var $81 = ({\n            _: 'Either.left',\n            'value': _value$3\n        });\n        return $81;\n    };\n    const Either$left = x0 => Either$left$(x0);\n\n    function Either$right$(_value$3) {\n        var $82 = ({\n            _: 'Either.right',\n            'value': _value$3\n        });\n        return $82;\n    };\n    const Either$right = x0 => Either$right$(x0);\n\n    function Nat$sub_rem$(_n$1, _m$2) {\n        var Nat$sub_rem$ = (_n$1, _m$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2]\n        });\n        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);\n        var arg = [_n$1, _m$2];\n        while (true) {\n            let [_n$1, _m$2] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $83 = Either$left$(_n$1);\n                    return $83;\n                } else {\n                    var $84 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $86 = Either$right$(Nat$succ$($84));\n                        var $85 = $86;\n                    } else {\n                        var $87 = (self - 1n);\n                        var $88 = Nat$sub_rem$($87, $84);\n                        var $85 = $88;\n                    };\n                    return $85;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);\n\n    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {\n        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _d$3]\n        });\n        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);\n        var arg = [_n$1, _m$2, _d$3];\n        while (true) {\n            let [_n$1, _m$2, _d$3] = arg;\n            var R = (() => {\n                var self = Nat$sub_rem$(_n$1, _m$2);\n                switch (self._) {\n                    case 'Either.left':\n                        var $89 = self.value;\n                        var $90 = Nat$div_mod$go$($89, _m$2, Nat$succ$(_d$3));\n                        return $90;\n                    case 'Either.right':\n                        var $91 = Pair$new$(_d$3, _n$1);\n                        return $91;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);\n    const Nat$div_mod = a0 => a1 => (({\n        _: 'Pair.new',\n        'fst': a0 / a1,\n        'snd': a0 % a1\n    }));\n\n    function List$(_A$1) {\n        var $92 = null;\n        return $92;\n    };\n    const List = x0 => List$(x0);\n\n    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {\n        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_base$1, _nat$2, _res$3]\n        });\n        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);\n        var arg = [_base$1, _nat$2, _res$3];\n        while (true) {\n            let [_base$1, _nat$2, _res$3] = arg;\n            var R = (() => {\n                var self = (({\n                    _: 'Pair.new',\n                    'fst': _nat$2 / _base$1,\n                    'snd': _nat$2 % _base$1\n                }));\n                switch (self._) {\n                    case 'Pair.new':\n                        var $93 = self.fst;\n                        var $94 = self.snd;\n                        var self = $93;\n                        if (self === 0n) {\n                            var $96 = List$cons$($94, _res$3);\n                            var $95 = $96;\n                        } else {\n                            var $97 = (self - 1n);\n                            var $98 = Nat$to_base$go$(_base$1, $93, List$cons$($94, _res$3));\n                            var $95 = $98;\n                        };\n                        return $95;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);\n\n    function Nat$to_base$(_base$1, _nat$2) {\n        var $99 = Nat$to_base$go$(_base$1, _nat$2, List$nil);\n        return $99;\n    };\n    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);\n    const String$nil = '';\n\n    function Nat$mod$go$(_n$1, _m$2, _r$3) {\n        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _r$3]\n        });\n        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);\n        var arg = [_n$1, _m$2, _r$3];\n        while (true) {\n            let [_n$1, _m$2, _r$3] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $100 = Nat$mod$go$(_n$1, _r$3, _m$2);\n                    return $100;\n                } else {\n                    var $101 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $103 = _r$3;\n                        var $102 = $103;\n                    } else {\n                        var $104 = (self - 1n);\n                        var $105 = Nat$mod$go$($104, $101, Nat$succ$(_r$3));\n                        var $102 = $105;\n                    };\n                    return $102;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);\n    const Nat$mod = a0 => a1 => (a0 % a1);\n    const Bool$false = false;\n    const Bool$and = a0 => a1 => (a0 && a1);\n    const Bool$true = true;\n    const Nat$gtn = a0 => a1 => (a0 > a1);\n    const Nat$lte = a0 => a1 => (a0 <= a1);\n\n    function List$at$(_index$2, _list$3) {\n        var List$at$ = (_index$2, _list$3) => ({\n            ctr: 'TCO',\n            arg: [_index$2, _list$3]\n        });\n        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);\n        var arg = [_index$2, _list$3];\n        while (true) {\n            let [_index$2, _list$3] = arg;\n            var R = (() => {\n                var self = _list$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $106 = self.head;\n                        var $107 = self.tail;\n                        var self = _index$2;\n                        if (self === 0n) {\n                            var $109 = Maybe$some$($106);\n                            var $108 = $109;\n                        } else {\n                            var $110 = (self - 1n);\n                            var $111 = List$at$($110, $107);\n                            var $108 = $111;\n                        };\n                        return $108;\n                    case 'List.nil':\n                        var $112 = Maybe$none;\n                        return $112;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$at = x0 => x1 => List$at$(x0, x1);\n\n    function Nat$show_digit$(_base$1, _n$2) {\n        var _m$3 = (_n$2 % _base$1);\n        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n        var self = ((_base$1 > 0n) && (_base$1 <= 64n));\n        if (self) {\n            var self = List$at$(_m$3, _base64$4);\n            switch (self._) {\n                case 'Maybe.some':\n                    var $115 = self.value;\n                    var $116 = $115;\n                    var $114 = $116;\n                    break;\n                case 'Maybe.none':\n                    var $117 = 35;\n                    var $114 = $117;\n                    break;\n            };\n            var $113 = $114;\n        } else {\n            var $118 = 35;\n            var $113 = $118;\n        };\n        return $113;\n    };\n    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);\n\n    function Nat$to_string_base$(_base$1, _nat$2) {\n        var $119 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {\n            var $120 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);\n            return $120;\n        }));\n        return $119;\n    };\n    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);\n\n    function Nat$show$(_n$1) {\n        var $121 = Nat$to_string_base$(10n, _n$1);\n        return $121;\n    };\n    const Nat$show = x0 => Nat$show$(x0);\n    const List$length = a0 => (list_length(a0));\n\n    function List$reverse$go$(_xs$2, _res$3) {\n        var List$reverse$go$ = (_xs$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_xs$2, _res$3]\n        });\n        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);\n        var arg = [_xs$2, _res$3];\n        while (true) {\n            let [_xs$2, _res$3] = arg;\n            var R = (() => {\n                var self = _xs$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $122 = self.head;\n                        var $123 = self.tail;\n                        var $124 = List$reverse$go$($123, List$cons$($122, _res$3));\n                        return $124;\n                    case 'List.nil':\n                        var $125 = _res$3;\n                        return $125;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);\n\n    function List$reverse$(_xs$2) {\n        var $126 = List$reverse$go$(_xs$2, List$nil);\n        return $126;\n    };\n    const List$reverse = x0 => List$reverse$(x0);\n\n    function Bits$reverse$tco$(_a$1, _r$2) {\n        var Bits$reverse$tco$ = (_a$1, _r$2) => ({\n            ctr: 'TCO',\n            arg: [_a$1, _r$2]\n        });\n        var Bits$reverse$tco = _a$1 => _r$2 => Bits$reverse$tco$(_a$1, _r$2);\n        var arg = [_a$1, _r$2];\n        while (true) {\n            let [_a$1, _r$2] = arg;\n            var R = (() => {\n                var self = _a$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $127 = self.slice(0, -1);\n                        var $128 = Bits$reverse$tco$($127, (_r$2 + '0'));\n                        return $128;\n                    case 'i':\n                        var $129 = self.slice(0, -1);\n                        var $130 = Bits$reverse$tco$($129, (_r$2 + '1'));\n                        return $130;\n                    case 'e':\n                        var $131 = _r$2;\n                        return $131;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Bits$reverse$tco = x0 => x1 => Bits$reverse$tco$(x0, x1);\n\n    function Bits$reverse$(_a$1) {\n        var $132 = Bits$reverse$tco$(_a$1, Bits$e);\n        return $132;\n    };\n    const Bits$reverse = x0 => Bits$reverse$(x0);\n\n    function BitsMap$to_list$go$(_xs$2, _key$3, _list$4) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'BitsMap.tie':\n                var $134 = self.val;\n                var $135 = self.lft;\n                var $136 = self.rgt;\n                var self = $134;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $138 = self.value;\n                        var $139 = List$cons$(Pair$new$(Bits$reverse$(_key$3), $138), _list$4);\n                        var _list0$8 = $139;\n                        break;\n                    case 'Maybe.none':\n                        var $140 = _list$4;\n                        var _list0$8 = $140;\n                        break;\n                };\n                var _list1$9 = BitsMap$to_list$go$($135, (_key$3 + '0'), _list0$8);\n                var _list2$10 = BitsMap$to_list$go$($136, (_key$3 + '1'), _list1$9);\n                var $137 = _list2$10;\n                var $133 = $137;\n                break;\n            case 'BitsMap.new':\n                var $141 = _list$4;\n                var $133 = $141;\n                break;\n        };\n        return $133;\n    };\n    const BitsMap$to_list$go = x0 => x1 => x2 => BitsMap$to_list$go$(x0, x1, x2);\n\n    function List$mapped$(_as$2, _f$4) {\n        var self = _as$2;\n        switch (self._) {\n            case 'List.cons':\n                var $143 = self.head;\n                var $144 = self.tail;\n                var $145 = List$cons$(_f$4($143), List$mapped$($144, _f$4));\n                var $142 = $145;\n                break;\n            case 'List.nil':\n                var $146 = List$nil;\n                var $142 = $146;\n                break;\n        };\n        return $142;\n    };\n    const List$mapped = x0 => x1 => List$mapped$(x0, x1);\n\n    function Bits$show$(_a$1) {\n        var self = _a$1;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $148 = self.slice(0, -1);\n                var $149 = String$cons$(48, Bits$show$($148));\n                var $147 = $149;\n                break;\n            case 'i':\n                var $150 = self.slice(0, -1);\n                var $151 = String$cons$(49, Bits$show$($150));\n                var $147 = $151;\n                break;\n            case 'e':\n                var $152 = \"\";\n                var $147 = $152;\n                break;\n        };\n        return $147;\n    };\n    const Bits$show = x0 => Bits$show$(x0);\n\n    function Map$to_list$(_xs$2) {\n        var _kvs$3 = List$reverse$(BitsMap$to_list$go$(_xs$2, Bits$e, List$nil));\n        var $153 = List$mapped$(_kvs$3, (_kv$4 => {\n            var self = _kv$4;\n            switch (self._) {\n                case 'Pair.new':\n                    var $155 = self.fst;\n                    var $156 = self.snd;\n                    var $157 = Pair$new$(Bits$show$($155), $156);\n                    var $154 = $157;\n                    break;\n            };\n            return $154;\n        }));\n        return $153;\n    };\n    const Map$to_list = x0 => Map$to_list$(x0);\n\n    function App$KL$Game$draw$(_local$1, _global$2) {\n        var $158 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$new, List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$new, List$cons$(DOM$text$((\"Sala: \" + (() => {\n            var self = _local$1;\n            switch (self._) {\n                case 'App.KL.Game.State.Local.new':\n                    var $159 = self.room;\n                    var $160 = $159;\n                    return $160;\n            };\n        })())), List$nil)), List$cons$((() => {\n            var self = _global$2;\n            switch (self._) {\n                case 'App.KL.Global.State.new':\n                    var $162 = self.game;\n                    var $163 = $162;\n                    var _game$3 = $163;\n                    break;\n            };\n            var self = _game$3;\n            switch (self._) {\n                case 'Maybe.some':\n                    var $164 = self.value;\n                    var $165 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$new, List$cons$(DOM$text$((\"Online: \" + Nat$show$((list_length(Map$to_list$((() => {\n                        var self = $164;\n                        switch (self._) {\n                            case 'App.KL.Game.new':\n                                var $166 = self.players;\n                                var $167 = $166;\n                                return $167;\n                        };\n                    })())))))), List$nil));\n                    var $161 = $165;\n                    break;\n                case 'Maybe.none':\n                    var $168 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$new, List$cons$(DOM$text$(\"Not ingame.\"), List$nil));\n                    var $161 = $168;\n                    break;\n            };\n            return $161;\n        })(), List$nil)));\n        return $158;\n    };\n    const App$KL$Game$draw = x0 => x1 => App$KL$Game$draw$(x0, x1);\n\n    function App$KL$draw$(_state$1) {\n        var self = _state$1;\n        switch (self._) {\n            case 'App.Store.new':\n                var $170 = self.local;\n                var $171 = self.global;\n                var self = $170;\n                switch (self._) {\n                    case 'App.KL.State.Local.lobby':\n                        var $173 = self.state;\n                        var $174 = App$KL$Lobby$draw$($173, $171);\n                        var $172 = $174;\n                        break;\n                    case 'App.KL.State.Local.game':\n                        var $175 = self.state;\n                        var $176 = App$KL$Game$draw$($175, $171);\n                        var $172 = $176;\n                        break;\n                };\n                var $169 = $172;\n                break;\n        };\n        return $169;\n    };\n    const App$KL$draw = x0 => App$KL$draw$(x0);\n\n    function IO$(_A$1) {\n        var $177 = null;\n        return $177;\n    };\n    const IO = x0 => IO$(x0);\n\n    function Pair$fst$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $179 = self.fst;\n                var $180 = $179;\n                var $178 = $180;\n                break;\n        };\n        return $178;\n    };\n    const Pair$fst = x0 => Pair$fst$(x0);\n    const App$State$local = Pair$fst;\n\n    function String$map$(_f$1, _as$2) {\n        var self = _as$2;\n        if (self.length === 0) {\n            var $182 = String$nil;\n            var $181 = $182;\n        } else {\n            var $183 = self.charCodeAt(0);\n            var $184 = self.slice(1);\n            var $185 = String$cons$(_f$1($183), String$map$(_f$1, $184));\n            var $181 = $185;\n        };\n        return $181;\n    };\n    const String$map = x0 => x1 => String$map$(x0, x1);\n\n    function Cmp$as_gte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $187 = Bool$false;\n                var $186 = $187;\n                break;\n            case 'Cmp.eql':\n            case 'Cmp.gtn':\n                var $188 = Bool$true;\n                var $186 = $188;\n                break;\n        };\n        return $186;\n    };\n    const Cmp$as_gte = x0 => Cmp$as_gte$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $190 = self.pred;\n                var $191 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $193 = self.pred;\n                            var $194 = (_a$pred$10 => {\n                                var $195 = Word$cmp$go$(_a$pred$10, $193, _c$4);\n                                return $195;\n                            });\n                            var $192 = $194;\n                            break;\n                        case 'Word.i':\n                            var $196 = self.pred;\n                            var $197 = (_a$pred$10 => {\n                                var $198 = Word$cmp$go$(_a$pred$10, $196, Cmp$ltn);\n                                return $198;\n                            });\n                            var $192 = $197;\n                            break;\n                        case 'Word.e':\n                            var $199 = (_a$pred$8 => {\n                                var $200 = _c$4;\n                                return $200;\n                            });\n                            var $192 = $199;\n                            break;\n                    };\n                    var $192 = $192($190);\n                    return $192;\n                });\n                var $189 = $191;\n                break;\n            case 'Word.i':\n                var $201 = self.pred;\n                var $202 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $204 = self.pred;\n                            var $205 = (_a$pred$10 => {\n                                var $206 = Word$cmp$go$(_a$pred$10, $204, Cmp$gtn);\n                                return $206;\n                            });\n                            var $203 = $205;\n                            break;\n                        case 'Word.i':\n                            var $207 = self.pred;\n                            var $208 = (_a$pred$10 => {\n                                var $209 = Word$cmp$go$(_a$pred$10, $207, _c$4);\n                                return $209;\n                            });\n                            var $203 = $208;\n                            break;\n                        case 'Word.e':\n                            var $210 = (_a$pred$8 => {\n                                var $211 = _c$4;\n                                return $211;\n                            });\n                            var $203 = $210;\n                            break;\n                    };\n                    var $203 = $203($201);\n                    return $203;\n                });\n                var $189 = $202;\n                break;\n            case 'Word.e':\n                var $212 = (_b$5 => {\n                    var $213 = _c$4;\n                    return $213;\n                });\n                var $189 = $212;\n                break;\n        };\n        var $189 = $189(_b$3);\n        return $189;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $214 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $214;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$gte$(_a$2, _b$3) {\n        var $215 = Cmp$as_gte$(Word$cmp$(_a$2, _b$3));\n        return $215;\n    };\n    const Word$gte = x0 => x1 => Word$gte$(x0, x1);\n    const U16$gte = a0 => a1 => (a0 >= a1);\n\n    function Cmp$as_lte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.eql':\n                var $217 = Bool$true;\n                var $216 = $217;\n                break;\n            case 'Cmp.gtn':\n                var $218 = Bool$false;\n                var $216 = $218;\n                break;\n        };\n        return $216;\n    };\n    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);\n\n    function Word$lte$(_a$2, _b$3) {\n        var $219 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));\n        return $219;\n    };\n    const Word$lte = x0 => x1 => Word$lte$(x0, x1);\n    const U16$lte = a0 => a1 => (a0 <= a1);\n\n    function U16$new$(_value$1) {\n        var $220 = word_to_u16(_value$1);\n        return $220;\n    };\n    const U16$new = x0 => U16$new$(x0);\n    const Word$e = ({\n        _: 'Word.e'\n    });\n\n    function Word$(_size$1) {\n        var $221 = null;\n        return $221;\n    };\n    const Word = x0 => Word$(x0);\n\n    function Word$i$(_pred$2) {\n        var $222 = ({\n            _: 'Word.i',\n            'pred': _pred$2\n        });\n        return $222;\n    };\n    const Word$i = x0 => Word$i$(x0);\n\n    function Word$o$(_pred$2) {\n        var $223 = ({\n            _: 'Word.o',\n            'pred': _pred$2\n        });\n        return $223;\n    };\n    const Word$o = x0 => Word$o$(x0);\n\n    function Word$adder$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $225 = self.pred;\n                var $226 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $228 = self.pred;\n                            var $229 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $231 = Word$i$(Word$adder$(_a$pred$10, $228, Bool$false));\n                                    var $230 = $231;\n                                } else {\n                                    var $232 = Word$o$(Word$adder$(_a$pred$10, $228, Bool$false));\n                                    var $230 = $232;\n                                };\n                                return $230;\n                            });\n                            var $227 = $229;\n                            break;\n                        case 'Word.i':\n                            var $233 = self.pred;\n                            var $234 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $236 = Word$o$(Word$adder$(_a$pred$10, $233, Bool$true));\n                                    var $235 = $236;\n                                } else {\n                                    var $237 = Word$i$(Word$adder$(_a$pred$10, $233, Bool$false));\n                                    var $235 = $237;\n                                };\n                                return $235;\n                            });\n                            var $227 = $234;\n                            break;\n                        case 'Word.e':\n                            var $238 = (_a$pred$8 => {\n                                var $239 = Word$e;\n                                return $239;\n                            });\n                            var $227 = $238;\n                            break;\n                    };\n                    var $227 = $227($225);\n                    return $227;\n                });\n                var $224 = $226;\n                break;\n            case 'Word.i':\n                var $240 = self.pred;\n                var $241 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $243 = self.pred;\n                            var $244 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $246 = Word$o$(Word$adder$(_a$pred$10, $243, Bool$true));\n                                    var $245 = $246;\n                                } else {\n                                    var $247 = Word$i$(Word$adder$(_a$pred$10, $243, Bool$false));\n                                    var $245 = $247;\n                                };\n                                return $245;\n                            });\n                            var $242 = $244;\n                            break;\n                        case 'Word.i':\n                            var $248 = self.pred;\n                            var $249 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $251 = Word$i$(Word$adder$(_a$pred$10, $248, Bool$true));\n                                    var $250 = $251;\n                                } else {\n                                    var $252 = Word$o$(Word$adder$(_a$pred$10, $248, Bool$true));\n                                    var $250 = $252;\n                                };\n                                return $250;\n                            });\n                            var $242 = $249;\n                            break;\n                        case 'Word.e':\n                            var $253 = (_a$pred$8 => {\n                                var $254 = Word$e;\n                                return $254;\n                            });\n                            var $242 = $253;\n                            break;\n                    };\n                    var $242 = $242($240);\n                    return $242;\n                });\n                var $224 = $241;\n                break;\n            case 'Word.e':\n                var $255 = (_b$5 => {\n                    var $256 = Word$e;\n                    return $256;\n                });\n                var $224 = $255;\n                break;\n        };\n        var $224 = $224(_b$3);\n        return $224;\n    };\n    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);\n\n    function Word$add$(_a$2, _b$3) {\n        var $257 = Word$adder$(_a$2, _b$3, Bool$false);\n        return $257;\n    };\n    const Word$add = x0 => x1 => Word$add$(x0, x1);\n    const U16$add = a0 => a1 => ((a0 + a1) & 0xFFFF);\n\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _f$3, _x$4]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [_n$2, _f$3, _x$4];\n        while (true) {\n            let [_n$2, _f$3, _x$4] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $258 = _x$4;\n                    return $258;\n                } else {\n                    var $259 = (self - 1n);\n                    var $260 = Nat$apply$($259, _f$3, _f$3(_x$4));\n                    return $260;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $262 = self.pred;\n                var $263 = Word$i$($262);\n                var $261 = $263;\n                break;\n            case 'Word.i':\n                var $264 = self.pred;\n                var $265 = Word$o$(Word$inc$($264));\n                var $261 = $265;\n                break;\n            case 'Word.e':\n                var $266 = Word$e;\n                var $261 = $266;\n                break;\n        };\n        return $261;\n    };\n    const Word$inc = x0 => Word$inc$(x0);\n\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $268 = Word$e;\n            var $267 = $268;\n        } else {\n            var $269 = (self - 1n);\n            var $270 = Word$o$(Word$zero$($269));\n            var $267 = $270;\n        };\n        return $267;\n    };\n    const Word$zero = x0 => Word$zero$(x0);\n\n    function Nat$to_word$(_size$1, _n$2) {\n        var $271 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));\n        return $271;\n    };\n    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);\n    const Nat$to_u16 = a0 => (Number(a0) & 0xFFFF);\n\n    function Char$to_lower$(_char$1) {\n        var self = ((_char$1 >= 65) && (_char$1 <= 90));\n        if (self) {\n            var $273 = ((_char$1 + 32) & 0xFFFF);\n            var $272 = $273;\n        } else {\n            var $274 = _char$1;\n            var $272 = $274;\n        };\n        return $272;\n    };\n    const Char$to_lower = x0 => Char$to_lower$(x0);\n\n    function String$to_lower$(_str$1) {\n        var $275 = String$map$(Char$to_lower, _str$1);\n        return $275;\n    };\n    const String$to_lower = x0 => String$to_lower$(x0);\n\n    function IO$ask$(_query$2, _param$3, _then$4) {\n        var $276 = ({\n            _: 'IO.ask',\n            'query': _query$2,\n            'param': _param$3,\n            'then': _then$4\n        });\n        return $276;\n    };\n    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);\n\n    function IO$bind$(_a$3, _f$4) {\n        var self = _a$3;\n        switch (self._) {\n            case 'IO.end':\n                var $278 = self.value;\n                var $279 = _f$4($278);\n                var $277 = $279;\n                break;\n            case 'IO.ask':\n                var $280 = self.query;\n                var $281 = self.param;\n                var $282 = self.then;\n                var $283 = IO$ask$($280, $281, (_x$8 => {\n                    var $284 = IO$bind$($282(_x$8), _f$4);\n                    return $284;\n                }));\n                var $277 = $283;\n                break;\n        };\n        return $277;\n    };\n    const IO$bind = x0 => x1 => IO$bind$(x0, x1);\n\n    function IO$end$(_value$2) {\n        var $285 = ({\n            _: 'IO.end',\n            'value': _value$2\n        });\n        return $285;\n    };\n    const IO$end = x0 => IO$end$(x0);\n\n    function IO$monad$(_new$2) {\n        var $286 = _new$2(IO$bind)(IO$end);\n        return $286;\n    };\n    const IO$monad = x0 => IO$monad$(x0);\n\n    function App$set_local$(_value$2) {\n        var $287 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n            var $288 = _m$pure$4;\n            return $288;\n        }))(Maybe$some$(_value$2));\n        return $287;\n    };\n    const App$set_local = x0 => App$set_local$(x0);\n    const App$pass = IO$monad$((_m$bind$2 => _m$pure$3 => {\n        var $289 = _m$pure$3;\n        return $289;\n    }))(Maybe$none);\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $291 = Bool$false;\n                var $290 = $291;\n                break;\n            case 'Cmp.eql':\n                var $292 = Bool$true;\n                var $290 = $292;\n                break;\n        };\n        return $290;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $293 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $293;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n    const U16$eql = a0 => a1 => (a0 === a1);\n    const String$eql = a0 => a1 => (a0 === a1);\n\n    function Maybe$default$(_m$2, _a$3) {\n        var self = _m$2;\n        switch (self._) {\n            case 'Maybe.some':\n                var $295 = self.value;\n                var $296 = $295;\n                var $294 = $296;\n                break;\n            case 'Maybe.none':\n                var $297 = _a$3;\n                var $294 = $297;\n                break;\n        };\n        return $294;\n    };\n    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);\n\n    function Parser$State$new$(_err$1, _nam$2, _ini$3, _idx$4, _str$5) {\n        var $298 = ({\n            _: 'Parser.State.new',\n            'err': _err$1,\n            'nam': _nam$2,\n            'ini': _ini$3,\n            'idx': _idx$4,\n            'str': _str$5\n        });\n        return $298;\n    };\n    const Parser$State$new = x0 => x1 => x2 => x3 => x4 => Parser$State$new$(x0, x1, x2, x3, x4);\n\n    function Parser$run$(_parser$2, _code$3) {\n        var self = _parser$2(Parser$State$new$(Maybe$none, \"\", 0n, 0n, _code$3));\n        switch (self._) {\n            case 'Parser.Reply.value':\n                var $300 = self.val;\n                var $301 = Maybe$some$($300);\n                var $299 = $301;\n                break;\n            case 'Parser.Reply.error':\n                var $302 = Maybe$none;\n                var $299 = $302;\n                break;\n        };\n        return $299;\n    };\n    const Parser$run = x0 => x1 => Parser$run$(x0, x1);\n\n    function Parser$Reply$(_V$1) {\n        var $303 = null;\n        return $303;\n    };\n    const Parser$Reply = x0 => Parser$Reply$(x0);\n\n    function Parser$Reply$error$(_err$2) {\n        var $304 = ({\n            _: 'Parser.Reply.error',\n            'err': _err$2\n        });\n        return $304;\n    };\n    const Parser$Reply$error = x0 => Parser$Reply$error$(x0);\n\n    function Parser$Error$combine$(_a$1, _b$2) {\n        var self = _a$1;\n        switch (self._) {\n            case 'Parser.Error.new':\n                var $306 = self.idx;\n                var self = _b$2;\n                switch (self._) {\n                    case 'Parser.Error.new':\n                        var $308 = self.idx;\n                        var self = ($306 > $308);\n                        if (self) {\n                            var $310 = _a$1;\n                            var $309 = $310;\n                        } else {\n                            var $311 = _b$2;\n                            var $309 = $311;\n                        };\n                        var $307 = $309;\n                        break;\n                };\n                var $305 = $307;\n                break;\n        };\n        return $305;\n    };\n    const Parser$Error$combine = x0 => x1 => Parser$Error$combine$(x0, x1);\n\n    function Parser$Error$maybe_combine$(_a$1, _b$2) {\n        var self = _a$1;\n        switch (self._) {\n            case 'Maybe.some':\n                var $313 = self.value;\n                var self = _b$2;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $315 = self.value;\n                        var $316 = Maybe$some$(Parser$Error$combine$($313, $315));\n                        var $314 = $316;\n                        break;\n                    case 'Maybe.none':\n                        var $317 = _a$1;\n                        var $314 = $317;\n                        break;\n                };\n                var $312 = $314;\n                break;\n            case 'Maybe.none':\n                var self = _b$2;\n                switch (self._) {\n                    case 'Maybe.none':\n                        var $319 = Maybe$none;\n                        var $318 = $319;\n                        break;\n                    case 'Maybe.some':\n                        var $320 = _b$2;\n                        var $318 = $320;\n                        break;\n                };\n                var $312 = $318;\n                break;\n        };\n        return $312;\n    };\n    const Parser$Error$maybe_combine = x0 => x1 => Parser$Error$maybe_combine$(x0, x1);\n\n    function Parser$Reply$value$(_pst$2, _val$3) {\n        var $321 = ({\n            _: 'Parser.Reply.value',\n            'pst': _pst$2,\n            'val': _val$3\n        });\n        return $321;\n    };\n    const Parser$Reply$value = x0 => x1 => Parser$Reply$value$(x0, x1);\n\n    function Parser$many$go$(_parse$2, _values$3, _pst$4) {\n        var Parser$many$go$ = (_parse$2, _values$3, _pst$4) => ({\n            ctr: 'TCO',\n            arg: [_parse$2, _values$3, _pst$4]\n        });\n        var Parser$many$go = _parse$2 => _values$3 => _pst$4 => Parser$many$go$(_parse$2, _values$3, _pst$4);\n        var arg = [_parse$2, _values$3, _pst$4];\n        while (true) {\n            let [_parse$2, _values$3, _pst$4] = arg;\n            var R = (() => {\n                var self = _pst$4;\n                switch (self._) {\n                    case 'Parser.State.new':\n                        var self = _parse$2(_pst$4);\n                        switch (self._) {\n                            case 'Parser.Reply.value':\n                                var $323 = self.pst;\n                                var $324 = self.val;\n                                var $325 = Parser$many$go$(_parse$2, (_xs$12 => {\n                                    var $326 = _values$3(List$cons$($324, _xs$12));\n                                    return $326;\n                                }), $323);\n                                var $322 = $325;\n                                break;\n                            case 'Parser.Reply.error':\n                                var $327 = Parser$Reply$value$(_pst$4, _values$3(List$nil));\n                                var $322 = $327;\n                                break;\n                        };\n                        return $322;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Parser$many$go = x0 => x1 => x2 => Parser$many$go$(x0, x1, x2);\n\n    function Parser$many$(_parser$2) {\n        var $328 = Parser$many$go(_parser$2)((_x$3 => {\n            var $329 = _x$3;\n            return $329;\n        }));\n        return $328;\n    };\n    const Parser$many = x0 => Parser$many$(x0);\n\n    function Parser$many1$(_parser$2, _pst$3) {\n        var self = _pst$3;\n        switch (self._) {\n            case 'Parser.State.new':\n                var $331 = self.err;\n                var _reply$9 = _parser$2(_pst$3);\n                var self = _reply$9;\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $333 = self.err;\n                        var self = $331;\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $335 = self.value;\n                                var $336 = Parser$Reply$error$(Parser$Error$combine$($335, $333));\n                                var $334 = $336;\n                                break;\n                            case 'Maybe.none':\n                                var $337 = Parser$Reply$error$($333);\n                                var $334 = $337;\n                                break;\n                        };\n                        var $332 = $334;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $338 = self.pst;\n                        var $339 = self.val;\n                        var self = $338;\n                        switch (self._) {\n                            case 'Parser.State.new':\n                                var $341 = self.err;\n                                var $342 = self.nam;\n                                var $343 = self.ini;\n                                var $344 = self.idx;\n                                var $345 = self.str;\n                                var _reply$pst$17 = Parser$State$new$(Parser$Error$maybe_combine$($331, $341), $342, $343, $344, $345);\n                                var self = _reply$pst$17;\n                                switch (self._) {\n                                    case 'Parser.State.new':\n                                        var $347 = self.err;\n                                        var _reply$23 = Parser$many$(_parser$2)(_reply$pst$17);\n                                        var self = _reply$23;\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $349 = self.err;\n                                                var self = $347;\n                                                switch (self._) {\n                                                    case 'Maybe.some':\n                                                        var $351 = self.value;\n                                                        var $352 = Parser$Reply$error$(Parser$Error$combine$($351, $349));\n                                                        var $350 = $352;\n                                                        break;\n                                                    case 'Maybe.none':\n                                                        var $353 = Parser$Reply$error$($349);\n                                                        var $350 = $353;\n                                                        break;\n                                                };\n                                                var $348 = $350;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $354 = self.pst;\n                                                var $355 = self.val;\n                                                var self = $354;\n                                                switch (self._) {\n                                                    case 'Parser.State.new':\n                                                        var $357 = self.err;\n                                                        var $358 = self.nam;\n                                                        var $359 = self.ini;\n                                                        var $360 = self.idx;\n                                                        var $361 = self.str;\n                                                        var _reply$pst$31 = Parser$State$new$(Parser$Error$maybe_combine$($347, $357), $358, $359, $360, $361);\n                                                        var $362 = Parser$Reply$value$(_reply$pst$31, List$cons$($339, $355));\n                                                        var $356 = $362;\n                                                        break;\n                                                };\n                                                var $348 = $356;\n                                                break;\n                                        };\n                                        var $346 = $348;\n                                        break;\n                                };\n                                var $340 = $346;\n                                break;\n                        };\n                        var $332 = $340;\n                        break;\n                };\n                var $330 = $332;\n                break;\n        };\n        return $330;\n    };\n    const Parser$many1 = x0 => x1 => Parser$many1$(x0, x1);\n\n    function Parser$Error$new$(_nam$1, _ini$2, _idx$3, _msg$4) {\n        var $363 = ({\n            _: 'Parser.Error.new',\n            'nam': _nam$1,\n            'ini': _ini$2,\n            'idx': _idx$3,\n            'msg': _msg$4\n        });\n        return $363;\n    };\n    const Parser$Error$new = x0 => x1 => x2 => x3 => Parser$Error$new$(x0, x1, x2, x3);\n\n    function Parser$Reply$fail$(_nam$2, _ini$3, _idx$4, _msg$5) {\n        var $364 = Parser$Reply$error$(Parser$Error$new$(_nam$2, _ini$3, _idx$4, _msg$5));\n        return $364;\n    };\n    const Parser$Reply$fail = x0 => x1 => x2 => x3 => Parser$Reply$fail$(x0, x1, x2, x3);\n\n    function Parser$digit$(_pst$1) {\n        var self = _pst$1;\n        switch (self._) {\n            case 'Parser.State.new':\n                var $366 = self.err;\n                var $367 = self.nam;\n                var $368 = self.ini;\n                var $369 = self.idx;\n                var $370 = self.str;\n                var self = $370;\n                if (self.length === 0) {\n                    var $372 = Parser$Reply$fail$($367, $368, $369, \"Not a digit.\");\n                    var $371 = $372;\n                } else {\n                    var $373 = self.charCodeAt(0);\n                    var $374 = self.slice(1);\n                    var _pst$9 = Parser$State$new$($366, $367, $368, Nat$succ$($369), $374);\n                    var self = ($373 === 48);\n                    if (self) {\n                        var $376 = Parser$Reply$value$(_pst$9, 0n);\n                        var $375 = $376;\n                    } else {\n                        var self = ($373 === 49);\n                        if (self) {\n                            var $378 = Parser$Reply$value$(_pst$9, 1n);\n                            var $377 = $378;\n                        } else {\n                            var self = ($373 === 50);\n                            if (self) {\n                                var $380 = Parser$Reply$value$(_pst$9, 2n);\n                                var $379 = $380;\n                            } else {\n                                var self = ($373 === 51);\n                                if (self) {\n                                    var $382 = Parser$Reply$value$(_pst$9, 3n);\n                                    var $381 = $382;\n                                } else {\n                                    var self = ($373 === 52);\n                                    if (self) {\n                                        var $384 = Parser$Reply$value$(_pst$9, 4n);\n                                        var $383 = $384;\n                                    } else {\n                                        var self = ($373 === 53);\n                                        if (self) {\n                                            var $386 = Parser$Reply$value$(_pst$9, 5n);\n                                            var $385 = $386;\n                                        } else {\n                                            var self = ($373 === 54);\n                                            if (self) {\n                                                var $388 = Parser$Reply$value$(_pst$9, 6n);\n                                                var $387 = $388;\n                                            } else {\n                                                var self = ($373 === 55);\n                                                if (self) {\n                                                    var $390 = Parser$Reply$value$(_pst$9, 7n);\n                                                    var $389 = $390;\n                                                } else {\n                                                    var self = ($373 === 56);\n                                                    if (self) {\n                                                        var $392 = Parser$Reply$value$(_pst$9, 8n);\n                                                        var $391 = $392;\n                                                    } else {\n                                                        var self = ($373 === 57);\n                                                        if (self) {\n                                                            var $394 = Parser$Reply$value$(_pst$9, 9n);\n                                                            var $393 = $394;\n                                                        } else {\n                                                            var $395 = Parser$Reply$fail$($367, $368, $369, \"Not a digit.\");\n                                                            var $393 = $395;\n                                                        };\n                                                        var $391 = $393;\n                                                    };\n                                                    var $389 = $391;\n                                                };\n                                                var $387 = $389;\n                                            };\n                                            var $385 = $387;\n                                        };\n                                        var $383 = $385;\n                                    };\n                                    var $381 = $383;\n                                };\n                                var $379 = $381;\n                            };\n                            var $377 = $379;\n                        };\n                        var $375 = $377;\n                    };\n                    var $371 = $375;\n                };\n                var $365 = $371;\n                break;\n        };\n        return $365;\n    };\n    const Parser$digit = x0 => Parser$digit$(x0);\n    const Nat$add = a0 => a1 => (a0 + a1);\n    const Nat$mul = a0 => a1 => (a0 * a1);\n\n    function Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4) {\n        var Nat$from_base$go$ = (_b$1, _ds$2, _p$3, _res$4) => ({\n            ctr: 'TCO',\n            arg: [_b$1, _ds$2, _p$3, _res$4]\n        });\n        var Nat$from_base$go = _b$1 => _ds$2 => _p$3 => _res$4 => Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4);\n        var arg = [_b$1, _ds$2, _p$3, _res$4];\n        while (true) {\n            let [_b$1, _ds$2, _p$3, _res$4] = arg;\n            var R = (() => {\n                var self = _ds$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $396 = self.head;\n                        var $397 = self.tail;\n                        var $398 = Nat$from_base$go$(_b$1, $397, (_b$1 * _p$3), (($396 * _p$3) + _res$4));\n                        return $398;\n                    case 'List.nil':\n                        var $399 = _res$4;\n                        return $399;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$from_base$go = x0 => x1 => x2 => x3 => Nat$from_base$go$(x0, x1, x2, x3);\n\n    function Nat$from_base$(_base$1, _ds$2) {\n        var $400 = Nat$from_base$go$(_base$1, List$reverse$(_ds$2), 1n, 0n);\n        return $400;\n    };\n    const Nat$from_base = x0 => x1 => Nat$from_base$(x0, x1);\n\n    function Parser$nat$(_pst$1) {\n        var self = _pst$1;\n        switch (self._) {\n            case 'Parser.State.new':\n                var $402 = self.err;\n                var _reply$7 = Parser$many1$(Parser$digit, _pst$1);\n                var self = _reply$7;\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $404 = self.err;\n                        var self = $402;\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $406 = self.value;\n                                var $407 = Parser$Reply$error$(Parser$Error$combine$($406, $404));\n                                var $405 = $407;\n                                break;\n                            case 'Maybe.none':\n                                var $408 = Parser$Reply$error$($404);\n                                var $405 = $408;\n                                break;\n                        };\n                        var $403 = $405;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $409 = self.pst;\n                        var $410 = self.val;\n                        var self = $409;\n                        switch (self._) {\n                            case 'Parser.State.new':\n                                var $412 = self.err;\n                                var $413 = self.nam;\n                                var $414 = self.ini;\n                                var $415 = self.idx;\n                                var $416 = self.str;\n                                var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($402, $412), $413, $414, $415, $416);\n                                var $417 = Parser$Reply$value$(_reply$pst$15, Nat$from_base$(10n, $410));\n                                var $411 = $417;\n                                break;\n                        };\n                        var $403 = $411;\n                        break;\n                };\n                var $401 = $403;\n                break;\n        };\n        return $401;\n    };\n    const Parser$nat = x0 => Parser$nat$(x0);\n    const Nat$read = a0 => (BigInt(a0));\n    const IO$get_time = IO$ask$(\"get_time\", \"\", (_time$1 => {\n        var $418 = IO$end$((BigInt(_time$1)));\n        return $418;\n    }));\n\n    function Nat$random$(_seed$1) {\n        var _m$2 = 1664525n;\n        var _i$3 = 1013904223n;\n        var _q$4 = 4294967296n;\n        var $419 = (((_seed$1 * _m$2) + _i$3) % _q$4);\n        return $419;\n    };\n    const Nat$random = x0 => Nat$random$(x0);\n\n    function IO$random$(_a$1) {\n        var $420 = IO$monad$((_m$bind$2 => _m$pure$3 => {\n            var $421 = _m$bind$2;\n            return $421;\n        }))(IO$get_time)((_seed$2 => {\n            var _seed$3 = Nat$random$(_seed$2);\n            var $422 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n                var $423 = _m$pure$5;\n                return $423;\n            }))((_seed$3 % _a$1));\n            return $422;\n        }));\n        return $420;\n    };\n    const IO$random = x0 => IO$random$(x0);\n\n    function String$drop$(_n$1, _xs$2) {\n        var String$drop$ = (_n$1, _xs$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _xs$2]\n        });\n        var String$drop = _n$1 => _xs$2 => String$drop$(_n$1, _xs$2);\n        var arg = [_n$1, _xs$2];\n        while (true) {\n            let [_n$1, _xs$2] = arg;\n            var R = (() => {\n                var self = _n$1;\n                if (self === 0n) {\n                    var $424 = _xs$2;\n                    return $424;\n                } else {\n                    var $425 = (self - 1n);\n                    var self = _xs$2;\n                    if (self.length === 0) {\n                        var $427 = String$nil;\n                        var $426 = $427;\n                    } else {\n                        var $428 = self.charCodeAt(0);\n                        var $429 = self.slice(1);\n                        var $430 = String$drop$($425, $429);\n                        var $426 = $430;\n                    };\n                    return $426;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$drop = x0 => x1 => String$drop$(x0, x1);\n    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);\n\n    function String$length$go$(_xs$1, _n$2) {\n        var String$length$go$ = (_xs$1, _n$2) => ({\n            ctr: 'TCO',\n            arg: [_xs$1, _n$2]\n        });\n        var String$length$go = _xs$1 => _n$2 => String$length$go$(_xs$1, _n$2);\n        var arg = [_xs$1, _n$2];\n        while (true) {\n            let [_xs$1, _n$2] = arg;\n            var R = (() => {\n                var self = _xs$1;\n                if (self.length === 0) {\n                    var $431 = _n$2;\n                    return $431;\n                } else {\n                    var $432 = self.charCodeAt(0);\n                    var $433 = self.slice(1);\n                    var $434 = String$length$go$($433, Nat$succ$(_n$2));\n                    return $434;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$length$go = x0 => x1 => String$length$go$(x0, x1);\n\n    function String$length$(_xs$1) {\n        var $435 = String$length$go$(_xs$1, 0n);\n        return $435;\n    };\n    const String$length = x0 => String$length$(x0);\n    const Unit$new = null;\n\n    function IO$do$(_call$1, _param$2) {\n        var $436 = IO$ask$(_call$1, _param$2, (_answer$3 => {\n            var $437 = IO$end$(Unit$new);\n            return $437;\n        }));\n        return $436;\n    };\n    const IO$do = x0 => x1 => IO$do$(x0, x1);\n\n    function App$do$(_call$2, _param$3) {\n        var $438 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n            var $439 = _m$bind$4;\n            return $439;\n        }))(IO$do$(_call$2, _param$3))((_$4 => {\n            var $440 = App$pass;\n            return $440;\n        }));\n        return $438;\n    };\n    const App$do = x0 => x1 => App$do$(x0, x1);\n\n    function App$watch$(_room$2) {\n        var $441 = App$do$(\"watch\", _room$2);\n        return $441;\n    };\n    const App$watch = x0 => App$watch$(x0);\n\n    function App$new_post$(_room$2, _data$3) {\n        var $442 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n            var $443 = _m$bind$4;\n            return $443;\n        }))(App$do$(\"post\", (_room$2 + (\";\" + _data$3))))((_$4 => {\n            var $444 = App$pass;\n            return $444;\n        }));\n        return $442;\n    };\n    const App$new_post = x0 => x1 => App$new_post$(x0, x1);\n\n    function String$take$(_n$1, _xs$2) {\n        var self = _xs$2;\n        if (self.length === 0) {\n            var $446 = String$nil;\n            var $445 = $446;\n        } else {\n            var $447 = self.charCodeAt(0);\n            var $448 = self.slice(1);\n            var self = _n$1;\n            if (self === 0n) {\n                var $450 = String$nil;\n                var $449 = $450;\n            } else {\n                var $451 = (self - 1n);\n                var $452 = String$cons$($447, String$take$($451, $448));\n                var $449 = $452;\n            };\n            var $445 = $449;\n        };\n        return $445;\n    };\n    const String$take = x0 => x1 => String$take$(x0, x1);\n\n    function String$pad_right$(_size$1, _chr$2, _str$3) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $454 = _str$3;\n            var $453 = $454;\n        } else {\n            var $455 = (self - 1n);\n            var self = _str$3;\n            if (self.length === 0) {\n                var $457 = String$cons$(_chr$2, String$pad_right$($455, _chr$2, \"\"));\n                var $456 = $457;\n            } else {\n                var $458 = self.charCodeAt(0);\n                var $459 = self.slice(1);\n                var $460 = String$cons$($458, String$pad_right$($455, _chr$2, $459));\n                var $456 = $460;\n            };\n            var $453 = $456;\n        };\n        return $453;\n    };\n    const String$pad_right = x0 => x1 => x2 => String$pad_right$(x0, x1, x2);\n\n    function String$pad_right_exact$(_size$1, _chr$2, _str$3) {\n        var $461 = String$take$(_size$1, String$pad_right$(_size$1, _chr$2, _str$3));\n        return $461;\n    };\n    const String$pad_right_exact = x0 => x1 => x2 => String$pad_right_exact$(x0, x1, x2);\n\n    function Bits$hex$encode$(_x$1) {\n        var self = _x$1;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $463 = self.slice(0, -1);\n                var self = $463;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $465 = self.slice(0, -1);\n                        var self = $465;\n                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                            case 'o':\n                                var $467 = self.slice(0, -1);\n                                var self = $467;\n                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                                    case 'o':\n                                        var $469 = self.slice(0, -1);\n                                        var $470 = (\"0\" + Bits$hex$encode$($469));\n                                        var $468 = $470;\n                                        break;\n                                    case 'i':\n                                        var $471 = self.slice(0, -1);\n                                        var $472 = (\"8\" + Bits$hex$encode$($471));\n                                        var $468 = $472;\n                                        break;\n                                    case 'e':\n                                        var $473 = \"0\";\n                                        var $468 = $473;\n                                        break;\n                                };\n                                var $466 = $468;\n                                break;\n                            case 'i':\n                                var $474 = self.slice(0, -1);\n                                var self = $474;\n                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                                    case 'o':\n                                        var $476 = self.slice(0, -1);\n                                        var $477 = (\"4\" + Bits$hex$encode$($476));\n                                        var $475 = $477;\n                                        break;\n                                    case 'i':\n                                        var $478 = self.slice(0, -1);\n                                        var $479 = (\"c\" + Bits$hex$encode$($478));\n                                        var $475 = $479;\n                                        break;\n                                    case 'e':\n                                        var $480 = \"4\";\n                                        var $475 = $480;\n                                        break;\n                                };\n                                var $466 = $475;\n                                break;\n                            case 'e':\n                                var $481 = \"0\";\n                                var $466 = $481;\n                                break;\n                        };\n                        var $464 = $466;\n                        break;\n                    case 'i':\n                        var $482 = self.slice(0, -1);\n                        var self = $482;\n                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                            case 'o':\n                                var $484 = self.slice(0, -1);\n                                var self = $484;\n                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                                    case 'o':\n                                        var $486 = self.slice(0, -1);\n                                        var $487 = (\"2\" + Bits$hex$encode$($486));\n                                        var $485 = $487;\n                                        break;\n                                    case 'i':\n                                        var $488 = self.slice(0, -1);\n                                        var $489 = (\"a\" + Bits$hex$encode$($488));\n                                        var $485 = $489;\n                                        break;\n                                    case 'e':\n                                        var $490 = \"2\";\n                                        var $485 = $490;\n                                        break;\n                                };\n                                var $483 = $485;\n                                break;\n                            case 'i':\n                                var $491 = self.slice(0, -1);\n                                var self = $491;\n                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                                    case 'o':\n                                        var $493 = self.slice(0, -1);\n                                        var $494 = (\"6\" + Bits$hex$encode$($493));\n                                        var $492 = $494;\n                                        break;\n                                    case 'i':\n                                        var $495 = self.slice(0, -1);\n                                        var $496 = (\"e\" + Bits$hex$encode$($495));\n                                        var $492 = $496;\n                                        break;\n                                    case 'e':\n                                        var $497 = \"6\";\n                                        var $492 = $497;\n                                        break;\n                                };\n                                var $483 = $492;\n                                break;\n                            case 'e':\n                                var $498 = \"2\";\n                                var $483 = $498;\n                                break;\n                        };\n                        var $464 = $483;\n                        break;\n                    case 'e':\n                        var $499 = \"0\";\n                        var $464 = $499;\n                        break;\n                };\n                var $462 = $464;\n                break;\n            case 'i':\n                var $500 = self.slice(0, -1);\n                var self = $500;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $502 = self.slice(0, -1);\n                        var self = $502;\n                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                            case 'o':\n                                var $504 = self.slice(0, -1);\n                                var self = $504;\n                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                                    case 'o':\n                                        var $506 = self.slice(0, -1);\n                                        var $507 = (\"1\" + Bits$hex$encode$($506));\n                                        var $505 = $507;\n                                        break;\n                                    case 'i':\n                                        var $508 = self.slice(0, -1);\n                                        var $509 = (\"9\" + Bits$hex$encode$($508));\n                                        var $505 = $509;\n                                        break;\n                                    case 'e':\n                                        var $510 = \"1\";\n                                        var $505 = $510;\n                                        break;\n                                };\n                                var $503 = $505;\n                                break;\n                            case 'i':\n                                var $511 = self.slice(0, -1);\n                                var self = $511;\n                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                                    case 'o':\n                                        var $513 = self.slice(0, -1);\n                                        var $514 = (\"5\" + Bits$hex$encode$($513));\n                                        var $512 = $514;\n                                        break;\n                                    case 'i':\n                                        var $515 = self.slice(0, -1);\n                                        var $516 = (\"d\" + Bits$hex$encode$($515));\n                                        var $512 = $516;\n                                        break;\n                                    case 'e':\n                                        var $517 = \"5\";\n                                        var $512 = $517;\n                                        break;\n                                };\n                                var $503 = $512;\n                                break;\n                            case 'e':\n                                var $518 = \"1\";\n                                var $503 = $518;\n                                break;\n                        };\n                        var $501 = $503;\n                        break;\n                    case 'i':\n                        var $519 = self.slice(0, -1);\n                        var self = $519;\n                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                            case 'o':\n                                var $521 = self.slice(0, -1);\n                                var self = $521;\n                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                                    case 'o':\n                                        var $523 = self.slice(0, -1);\n                                        var $524 = (\"3\" + Bits$hex$encode$($523));\n                                        var $522 = $524;\n                                        break;\n                                    case 'i':\n                                        var $525 = self.slice(0, -1);\n                                        var $526 = (\"b\" + Bits$hex$encode$($525));\n                                        var $522 = $526;\n                                        break;\n                                    case 'e':\n                                        var $527 = \"3\";\n                                        var $522 = $527;\n                                        break;\n                                };\n                                var $520 = $522;\n                                break;\n                            case 'i':\n                                var $528 = self.slice(0, -1);\n                                var self = $528;\n                                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                                    case 'o':\n                                        var $530 = self.slice(0, -1);\n                                        var $531 = (\"7\" + Bits$hex$encode$($530));\n                                        var $529 = $531;\n                                        break;\n                                    case 'i':\n                                        var $532 = self.slice(0, -1);\n                                        var $533 = (\"f\" + Bits$hex$encode$($532));\n                                        var $529 = $533;\n                                        break;\n                                    case 'e':\n                                        var $534 = \"7\";\n                                        var $529 = $534;\n                                        break;\n                                };\n                                var $520 = $529;\n                                break;\n                            case 'e':\n                                var $535 = \"3\";\n                                var $520 = $535;\n                                break;\n                        };\n                        var $501 = $520;\n                        break;\n                    case 'e':\n                        var $536 = \"1\";\n                        var $501 = $536;\n                        break;\n                };\n                var $462 = $501;\n                break;\n            case 'e':\n                var $537 = \"\";\n                var $462 = $537;\n                break;\n        };\n        return $462;\n    };\n    const Bits$hex$encode = x0 => Bits$hex$encode$(x0);\n\n    function Serializer$run$(_serializer$2, _x$3) {\n        var $538 = _serializer$2(_x$3)(Bits$e);\n        return $538;\n    };\n    const Serializer$run = x0 => x1 => Serializer$run$(x0, x1);\n\n    function App$KL$Global$Event$serializer$(_x$1, _bs$2) {\n        var self = _x$1;\n        switch (self._) {\n            case 'App.KL.Global.Event.void':\n                var $540 = (_bs$2 + '0');\n                var $539 = $540;\n                break;\n            case 'App.KL.Global.Event.join_room':\n                var $541 = (_bs$2 + '1');\n                var $539 = $541;\n                break;\n        };\n        return $539;\n    };\n    const App$KL$Global$Event$serializer = x0 => x1 => App$KL$Global$Event$serializer$(x0, x1);\n\n    function App$KL$Global$Event$serialize_post$(_ev$1) {\n        var $542 = (\"0x\" + String$pad_right_exact$(64n, 48, Bits$hex$encode$(Serializer$run$(App$KL$Global$Event$serializer, _ev$1))));\n        return $542;\n    };\n    const App$KL$Global$Event$serialize_post = x0 => App$KL$Global$Event$serialize_post$(x0);\n    const App$KL$Global$Event$join_room = ({\n        _: 'App.KL.Global.Event.join_room'\n    });\n\n    function App$KL$State$Local$game$(_state$1) {\n        var $543 = ({\n            _: 'App.KL.State.Local.game',\n            'state': _state$1\n        });\n        return $543;\n    };\n    const App$KL$State$Local$game = x0 => App$KL$State$Local$game$(x0);\n\n    function App$KL$Game$State$Local$new$(_user$1, _room$2) {\n        var $544 = ({\n            _: 'App.KL.Game.State.Local.new',\n            'user': _user$1,\n            'room': _room$2\n        });\n        return $544;\n    };\n    const App$KL$Game$State$Local$new = x0 => x1 => App$KL$Game$State$Local$new$(x0, x1);\n\n    function App$KL$Lobby$when$(_local$1, _event$2) {\n        var self = _event$2;\n        switch (self._) {\n            case 'App.Event.init':\n                var $546 = self.user;\n                var self = _local$1;\n                switch (self._) {\n                    case 'App.KL.Lobby.State.Local.new':\n                        var $548 = self.room_input;\n                        var $549 = App$KL$Lobby$State$Local$new$(String$to_lower$($546), $548);\n                        var _new_local$6 = $549;\n                        break;\n                };\n                var $547 = App$set_local$(App$KL$State$Local$lobby$(_new_local$6));\n                var $545 = $547;\n                break;\n            case 'App.Event.mouse_click':\n                var $550 = self.id;\n                var self = ($550 === \"random\");\n                if (self) {\n                    var $552 = IO$monad$((_m$bind$6 => _m$pure$7 => {\n                        var $553 = _m$bind$6;\n                        return $553;\n                    }))(IO$random$(10000000000n))((_rnd$6 => {\n                        var _str$7 = Nat$show$(_rnd$6);\n                        var _room$8 = (\"0x72214422\" + String$drop$((String$length$(_str$7) - 6n <= 0n ? 0n : String$length$(_str$7) - 6n), _str$7));\n                        var self = _local$1;\n                        switch (self._) {\n                            case 'App.KL.Lobby.State.Local.new':\n                                var $555 = self.user;\n                                var $556 = App$KL$Lobby$State$Local$new$($555, _room$8);\n                                var _new_local$9 = $556;\n                                break;\n                        };\n                        var $554 = App$set_local$(App$KL$State$Local$lobby$(_new_local$9));\n                        return $554;\n                    }));\n                    var $551 = $552;\n                } else {\n                    var self = ($550 === \"ready\");\n                    if (self) {\n                        var $558 = IO$monad$((_m$bind$6 => _m$pure$7 => {\n                            var $559 = _m$bind$6;\n                            return $559;\n                        }))(App$watch$((() => {\n                            var self = _local$1;\n                            switch (self._) {\n                                case 'App.KL.Lobby.State.Local.new':\n                                    var $560 = self.room_input;\n                                    var $561 = $560;\n                                    return $561;\n                            };\n                        })()))((_$6 => {\n                            var $562 = IO$monad$((_m$bind$7 => _m$pure$8 => {\n                                var $563 = _m$bind$7;\n                                return $563;\n                            }))(App$new_post$((() => {\n                                var self = _local$1;\n                                switch (self._) {\n                                    case 'App.KL.Lobby.State.Local.new':\n                                        var $564 = self.room_input;\n                                        var $565 = $564;\n                                        return $565;\n                                };\n                            })(), App$KL$Global$Event$serialize_post$(App$KL$Global$Event$join_room)))((_$7 => {\n                                var $566 = App$set_local$(App$KL$State$Local$game$(App$KL$Game$State$Local$new$((() => {\n                                    var self = _local$1;\n                                    switch (self._) {\n                                        case 'App.KL.Lobby.State.Local.new':\n                                            var $567 = self.user;\n                                            var $568 = $567;\n                                            return $568;\n                                    };\n                                })(), (() => {\n                                    var self = _local$1;\n                                    switch (self._) {\n                                        case 'App.KL.Lobby.State.Local.new':\n                                            var $569 = self.room_input;\n                                            var $570 = $569;\n                                            return $570;\n                                    };\n                                })())));\n                                return $566;\n                            }));\n                            return $562;\n                        }));\n                        var $557 = $558;\n                    } else {\n                        var $571 = App$pass;\n                        var $557 = $571;\n                    };\n                    var $551 = $557;\n                };\n                var $545 = $551;\n                break;\n            case 'App.Event.input':\n                var $572 = self.text;\n                var self = _local$1;\n                switch (self._) {\n                    case 'App.KL.Lobby.State.Local.new':\n                        var $574 = self.user;\n                        var $575 = App$KL$Lobby$State$Local$new$($574, $572);\n                        var _new_local$6 = $575;\n                        break;\n                };\n                var $573 = App$set_local$(App$KL$State$Local$lobby$(_new_local$6));\n                var $545 = $573;\n                break;\n            case 'App.Event.frame':\n            case 'App.Event.mouse_down':\n            case 'App.Event.mouse_up':\n            case 'App.Event.key_down':\n            case 'App.Event.key_up':\n            case 'App.Event.mouse_over':\n                var $576 = App$pass;\n                var $545 = $576;\n                break;\n        };\n        return $545;\n    };\n    const App$KL$Lobby$when = x0 => x1 => App$KL$Lobby$when$(x0, x1);\n\n    function App$KL$Game$when$(_local$1, _event$2) {\n        var $577 = App$pass;\n        return $577;\n    };\n    const App$KL$Game$when = x0 => x1 => App$KL$Game$when$(x0, x1);\n\n    function App$KL$when$(_event$1, _state$2) {\n        var self = _state$2;\n        switch (self._) {\n            case 'App.Store.new':\n                var $579 = self.local;\n                var self = $579;\n                switch (self._) {\n                    case 'App.KL.State.Local.lobby':\n                        var $581 = self.state;\n                        var $582 = App$KL$Lobby$when$($581, _event$1);\n                        var $580 = $582;\n                        break;\n                    case 'App.KL.State.Local.game':\n                        var $583 = self.state;\n                        var $584 = App$KL$Game$when$($583, _event$1);\n                        var $580 = $584;\n                        break;\n                };\n                var $578 = $580;\n                break;\n        };\n        return $578;\n    };\n    const App$KL$when = x0 => x1 => App$KL$when$(x0, x1);\n\n    function App$KL$Global$tick$(_tick$1, _glob$2) {\n        var $585 = _glob$2;\n        return $585;\n    };\n    const App$KL$Global$tick = x0 => x1 => App$KL$Global$tick$(x0, x1);\n    const Debug$log = a0 => a1 => ((console.log(a0), a1()));\n\n    function Pair$snd$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $587 = self.snd;\n                var $588 = $587;\n                var $586 = $588;\n                break;\n        };\n        return $586;\n    };\n    const Pair$snd = x0 => Pair$snd$(x0);\n    const App$State$global = Pair$snd;\n\n    function Deserializer$run$(_deserializer$2, _bs$3) {\n        var self = _deserializer$2(_bs$3);\n        switch (self._) {\n            case 'Maybe.some':\n                var $590 = self.value;\n                var $591 = Maybe$some$((() => {\n                    var self = $590;\n                    switch (self._) {\n                        case 'Pair.new':\n                            var $592 = self.snd;\n                            var $593 = $592;\n                            return $593;\n                    };\n                })());\n                var $589 = $591;\n                break;\n            case 'Maybe.none':\n                var $594 = Maybe$none;\n                var $589 = $594;\n                break;\n        };\n        return $589;\n    };\n    const Deserializer$run = x0 => x1 => Deserializer$run$(x0, x1);\n\n    function Deserializer$Reply$(_A$1) {\n        var $595 = null;\n        return $595;\n    };\n    const Deserializer$Reply = x0 => Deserializer$Reply$(x0);\n\n    function Deserializer$choice$go$(_pars$2, _bs$3) {\n        var Deserializer$choice$go$ = (_pars$2, _bs$3) => ({\n            ctr: 'TCO',\n            arg: [_pars$2, _bs$3]\n        });\n        var Deserializer$choice$go = _pars$2 => _bs$3 => Deserializer$choice$go$(_pars$2, _bs$3);\n        var arg = [_pars$2, _bs$3];\n        while (true) {\n            let [_pars$2, _bs$3] = arg;\n            var R = (() => {\n                var self = _pars$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $596 = self.head;\n                        var $597 = self.tail;\n                        var self = $596(_bs$3);\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $599 = self.value;\n                                var self = $599;\n                                switch (self._) {\n                                    case 'Pair.new':\n                                        var $601 = self.fst;\n                                        var $602 = self.snd;\n                                        var $603 = Maybe$some$(Pair$new$($601, $602));\n                                        var $600 = $603;\n                                        break;\n                                };\n                                var $598 = $600;\n                                break;\n                            case 'Maybe.none':\n                                var $604 = Deserializer$choice$go$($597, _bs$3);\n                                var $598 = $604;\n                                break;\n                        };\n                        return $598;\n                    case 'List.nil':\n                        var $605 = Maybe$none;\n                        return $605;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Deserializer$choice$go = x0 => x1 => Deserializer$choice$go$(x0, x1);\n\n    function Deserializer$choice$(_pars$2) {\n        var $606 = Deserializer$choice$go(_pars$2);\n        return $606;\n    };\n    const Deserializer$choice = x0 => Deserializer$choice$(x0);\n\n    function Deserializer$(_A$1) {\n        var $607 = null;\n        return $607;\n    };\n    const Deserializer = x0 => Deserializer$(x0);\n\n    function Deserializer$bind$(_deserialize$3, _next$4, _bs$5) {\n        var self = _deserialize$3(_bs$5);\n        switch (self._) {\n            case 'Maybe.some':\n                var $609 = self.value;\n                var self = $609;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $611 = self.fst;\n                        var $612 = self.snd;\n                        var $613 = _next$4($612)($611);\n                        var $610 = $613;\n                        break;\n                };\n                var $608 = $610;\n                break;\n            case 'Maybe.none':\n                var $614 = Maybe$none;\n                var $608 = $614;\n                break;\n        };\n        return $608;\n    };\n    const Deserializer$bind = x0 => x1 => x2 => Deserializer$bind$(x0, x1, x2);\n\n    function Deserializer$bits$(_bits$1, _bs$2) {\n        var Deserializer$bits$ = (_bits$1, _bs$2) => ({\n            ctr: 'TCO',\n            arg: [_bits$1, _bs$2]\n        });\n        var Deserializer$bits = _bits$1 => _bs$2 => Deserializer$bits$(_bits$1, _bs$2);\n        var arg = [_bits$1, _bs$2];\n        while (true) {\n            let [_bits$1, _bs$2] = arg;\n            var R = (() => {\n                var self = _bits$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $615 = self.slice(0, -1);\n                        var self = _bs$2;\n                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                            case 'o':\n                                var $617 = self.slice(0, -1);\n                                var $618 = Deserializer$bits$($615, $617);\n                                var $616 = $618;\n                                break;\n                            case 'e':\n                            case 'i':\n                                var $619 = Maybe$none;\n                                var $616 = $619;\n                                break;\n                        };\n                        return $616;\n                    case 'i':\n                        var $620 = self.slice(0, -1);\n                        var self = _bs$2;\n                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                            case 'i':\n                                var $622 = self.slice(0, -1);\n                                var $623 = Deserializer$bits$($620, $622);\n                                var $621 = $623;\n                                break;\n                            case 'e':\n                            case 'o':\n                                var $624 = Maybe$none;\n                                var $621 = $624;\n                                break;\n                        };\n                        return $621;\n                    case 'e':\n                        var $625 = Maybe$some$(Pair$new$(_bs$2, Unit$new));\n                        return $625;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Deserializer$bits = x0 => x1 => Deserializer$bits$(x0, x1);\n\n    function Deserializer$pure$(_value$2, _bs$3) {\n        var $626 = Maybe$some$(Pair$new$(_bs$3, _value$2));\n        return $626;\n    };\n    const Deserializer$pure = x0 => x1 => Deserializer$pure$(x0, x1);\n    const App$KL$Global$Event$void = ({\n        _: 'App.KL.Global.Event.void'\n    });\n    const App$KL$Global$Event$deserializer = Deserializer$choice$(List$cons$(Deserializer$bind(Deserializer$bits((Bits$e + '0')))((_$1 => {\n        var $627 = Deserializer$pure(App$KL$Global$Event$void);\n        return $627;\n    })), List$cons$(Deserializer$bind(Deserializer$bits((Bits$e + '1')))((_$1 => {\n        var $628 = Deserializer$pure(App$KL$Global$Event$join_room);\n        return $628;\n    })), List$nil)));\n\n    function Bits$hex$decode$(_x$1) {\n        var self = _x$1;\n        if (self.length === 0) {\n            var $630 = Bits$e;\n            var $629 = $630;\n        } else {\n            var $631 = self.charCodeAt(0);\n            var $632 = self.slice(1);\n            var self = ($631 === 48);\n            if (self) {\n                var $634 = ((((Bits$hex$decode$($632) + '0') + '0') + '0') + '0');\n                var $633 = $634;\n            } else {\n                var self = ($631 === 49);\n                if (self) {\n                    var $636 = ((((Bits$hex$decode$($632) + '0') + '0') + '0') + '1');\n                    var $635 = $636;\n                } else {\n                    var self = ($631 === 50);\n                    if (self) {\n                        var $638 = ((((Bits$hex$decode$($632) + '0') + '0') + '1') + '0');\n                        var $637 = $638;\n                    } else {\n                        var self = ($631 === 51);\n                        if (self) {\n                            var $640 = ((((Bits$hex$decode$($632) + '0') + '0') + '1') + '1');\n                            var $639 = $640;\n                        } else {\n                            var self = ($631 === 52);\n                            if (self) {\n                                var $642 = ((((Bits$hex$decode$($632) + '0') + '1') + '0') + '0');\n                                var $641 = $642;\n                            } else {\n                                var self = ($631 === 53);\n                                if (self) {\n                                    var $644 = ((((Bits$hex$decode$($632) + '0') + '1') + '0') + '1');\n                                    var $643 = $644;\n                                } else {\n                                    var self = ($631 === 54);\n                                    if (self) {\n                                        var $646 = ((((Bits$hex$decode$($632) + '0') + '1') + '1') + '0');\n                                        var $645 = $646;\n                                    } else {\n                                        var self = ($631 === 55);\n                                        if (self) {\n                                            var $648 = ((((Bits$hex$decode$($632) + '0') + '1') + '1') + '1');\n                                            var $647 = $648;\n                                        } else {\n                                            var self = ($631 === 56);\n                                            if (self) {\n                                                var $650 = ((((Bits$hex$decode$($632) + '1') + '0') + '0') + '0');\n                                                var $649 = $650;\n                                            } else {\n                                                var self = ($631 === 57);\n                                                if (self) {\n                                                    var $652 = ((((Bits$hex$decode$($632) + '1') + '0') + '0') + '1');\n                                                    var $651 = $652;\n                                                } else {\n                                                    var self = ($631 === 97);\n                                                    if (self) {\n                                                        var $654 = ((((Bits$hex$decode$($632) + '1') + '0') + '1') + '0');\n                                                        var $653 = $654;\n                                                    } else {\n                                                        var self = ($631 === 98);\n                                                        if (self) {\n                                                            var $656 = ((((Bits$hex$decode$($632) + '1') + '0') + '1') + '1');\n                                                            var $655 = $656;\n                                                        } else {\n                                                            var self = ($631 === 99);\n                                                            if (self) {\n                                                                var $658 = ((((Bits$hex$decode$($632) + '1') + '1') + '0') + '0');\n                                                                var $657 = $658;\n                                                            } else {\n                                                                var self = ($631 === 100);\n                                                                if (self) {\n                                                                    var $660 = ((((Bits$hex$decode$($632) + '1') + '1') + '0') + '1');\n                                                                    var $659 = $660;\n                                                                } else {\n                                                                    var self = ($631 === 101);\n                                                                    if (self) {\n                                                                        var $662 = ((((Bits$hex$decode$($632) + '1') + '1') + '1') + '0');\n                                                                        var $661 = $662;\n                                                                    } else {\n                                                                        var self = ($631 === 102);\n                                                                        if (self) {\n                                                                            var $664 = ((((Bits$hex$decode$($632) + '1') + '1') + '1') + '1');\n                                                                            var $663 = $664;\n                                                                        } else {\n                                                                            var self = ($631 === 65);\n                                                                            if (self) {\n                                                                                var $666 = ((((Bits$hex$decode$($632) + '1') + '0') + '1') + '0');\n                                                                                var $665 = $666;\n                                                                            } else {\n                                                                                var self = ($631 === 66);\n                                                                                if (self) {\n                                                                                    var $668 = ((((Bits$hex$decode$($632) + '1') + '0') + '1') + '1');\n                                                                                    var $667 = $668;\n                                                                                } else {\n                                                                                    var self = ($631 === 67);\n                                                                                    if (self) {\n                                                                                        var $670 = ((((Bits$hex$decode$($632) + '1') + '1') + '0') + '0');\n                                                                                        var $669 = $670;\n                                                                                    } else {\n                                                                                        var self = ($631 === 68);\n                                                                                        if (self) {\n                                                                                            var $672 = ((((Bits$hex$decode$($632) + '1') + '1') + '0') + '1');\n                                                                                            var $671 = $672;\n                                                                                        } else {\n                                                                                            var self = ($631 === 69);\n                                                                                            if (self) {\n                                                                                                var $674 = ((((Bits$hex$decode$($632) + '1') + '1') + '1') + '0');\n                                                                                                var $673 = $674;\n                                                                                            } else {\n                                                                                                var self = ($631 === 70);\n                                                                                                if (self) {\n                                                                                                    var $676 = ((((Bits$hex$decode$($632) + '1') + '1') + '1') + '1');\n                                                                                                    var $675 = $676;\n                                                                                                } else {\n                                                                                                    var $677 = Bits$e;\n                                                                                                    var $675 = $677;\n                                                                                                };\n                                                                                                var $673 = $675;\n                                                                                            };\n                                                                                            var $671 = $673;\n                                                                                        };\n                                                                                        var $669 = $671;\n                                                                                    };\n                                                                                    var $667 = $669;\n                                                                                };\n                                                                                var $665 = $667;\n                                                                            };\n                                                                            var $663 = $665;\n                                                                        };\n                                                                        var $661 = $663;\n                                                                    };\n                                                                    var $659 = $661;\n                                                                };\n                                                                var $657 = $659;\n                                                            };\n                                                            var $655 = $657;\n                                                        };\n                                                        var $653 = $655;\n                                                    };\n                                                    var $651 = $653;\n                                                };\n                                                var $649 = $651;\n                                            };\n                                            var $647 = $649;\n                                        };\n                                        var $645 = $647;\n                                    };\n                                    var $643 = $645;\n                                };\n                                var $641 = $643;\n                            };\n                            var $639 = $641;\n                        };\n                        var $637 = $639;\n                    };\n                    var $635 = $637;\n                };\n                var $633 = $635;\n            };\n            var $629 = $633;\n        };\n        return $629;\n    };\n    const Bits$hex$decode = x0 => Bits$hex$decode$(x0);\n\n    function App$KL$Global$Event$deserialize_post$(_hex$1) {\n        var $678 = Maybe$default$(Deserializer$run$(App$KL$Global$Event$deserializer, Bits$hex$decode$(String$drop$(2n, _hex$1))), App$KL$Global$Event$void);\n        return $678;\n    };\n    const App$KL$Global$Event$deserialize_post = x0 => App$KL$Global$Event$deserialize_post$(x0);\n\n    function App$KL$Game$new$(_players$1) {\n        var $679 = ({\n            _: 'App.KL.Game.new',\n            'players': _players$1\n        });\n        return $679;\n    };\n    const App$KL$Game$new = x0 => App$KL$Game$new$(x0);\n    const App$KL$Game$start = App$KL$Game$new$(Map$new);\n\n    function Map$set$(_key$2, _val$3, _map$4) {\n        var $680 = (bitsmap_set(String$to_bits$(_key$2), _val$3, _map$4, 'set'));\n        return $680;\n    };\n    const Map$set = x0 => x1 => x2 => Map$set$(x0, x1, x2);\n    const App$KL$Game$Player$new = ({\n        _: 'App.KL.Game.Player.new'\n    });\n\n    function App$KL$Global$post$(_time$1, _room$2, _addr$3, _data$4, _glob$5) {\n        var $681 = ((console.log((\"Event: \" + (_room$2 + (\" \" + _data$4)))), (_$6 => {\n            var self = App$KL$Global$Event$deserialize_post$(_data$4);\n            switch (self._) {\n                case 'App.KL.Global.Event.void':\n                    var $683 = _glob$5;\n                    var $682 = $683;\n                    break;\n                case 'App.KL.Global.Event.join_room':\n                    var $684 = ((console.log(\"- join_room\"), (_$7 => {\n                        var self = _glob$5;\n                        switch (self._) {\n                            case 'App.KL.Global.State.new':\n                                var $686 = self.game;\n                                var _glob$game$9 = Maybe$default$($686, App$KL$Game$start);\n                                var self = _glob$game$9;\n                                switch (self._) {\n                                    case 'App.KL.Game.new':\n                                        var $688 = App$KL$Game$new$(Map$set$(_addr$3, App$KL$Game$Player$new, (() => {\n                                            var self = _glob$game$9;\n                                            switch (self._) {\n                                                case 'App.KL.Game.new':\n                                                    var $689 = self.players;\n                                                    var $690 = $689;\n                                                    return $690;\n                                            };\n                                        })()));\n                                        var _glob$game$10 = $688;\n                                        break;\n                                };\n                                var self = _glob$5;\n                                switch (self._) {\n                                    case 'App.KL.Global.State.new':\n                                        var $691 = App$KL$Global$State$new$(Maybe$some$(_glob$game$10));\n                                        var $687 = $691;\n                                        break;\n                                };\n                                var $685 = $687;\n                                break;\n                        };\n                        return $685;\n                    })()));\n                    var $682 = $684;\n                    break;\n            };\n            return $682;\n        })()));\n        return $681;\n    };\n    const App$KL$Global$post = x0 => x1 => x2 => x3 => x4 => App$KL$Global$post$(x0, x1, x2, x3, x4);\n    const App$KL = App$new$(App$KL$init, App$KL$draw, App$KL$when, App$KL$Global$tick, App$KL$Global$post);\n    return {\n        'App.new': App$new,\n        'Pair.new': Pair$new,\n        'App.State.new': App$State$new,\n        'App.KL.State': App$KL$State,\n        'App.KL.State.Local.lobby': App$KL$State$Local$lobby,\n        'App.KL.Lobby.State.Local.new': App$KL$Lobby$State$Local$new,\n        'App.KL.Global.State.new': App$KL$Global$State$new,\n        'Maybe.none': Maybe$none,\n        'App.Store.new': App$Store$new,\n        'App.KL.init': App$KL$init,\n        'BitsMap': BitsMap,\n        'Map': Map,\n        'BitsMap.new': BitsMap$new,\n        'BitsMap.tie': BitsMap$tie,\n        'Maybe.some': Maybe$some,\n        'BitsMap.set': BitsMap$set,\n        'Bits.e': Bits$e,\n        'Bits.o': Bits$o,\n        'Bits.i': Bits$i,\n        'Bits.concat': Bits$concat,\n        'Word.to_bits': Word$to_bits,\n        'Nat.succ': Nat$succ,\n        'Nat.zero': Nat$zero,\n        'U16.to_bits': U16$to_bits,\n        'String.to_bits': String$to_bits,\n        'Map.from_list': Map$from_list,\n        'List.cons': List$cons,\n        'Pair': Pair,\n        'List.nil': List$nil,\n        'DOM.node': DOM$node,\n        'DOM.text': DOM$text,\n        'Map.new': Map$new,\n        'App.KL.Lobby.draw.input': App$KL$Lobby$draw$input,\n        'App.KL.Lobby.draw.button': App$KL$Lobby$draw$button,\n        'App.KL.Lobby.draw': App$KL$Lobby$draw,\n        'String.cons': String$cons,\n        'String.concat': String$concat,\n        'Maybe': Maybe,\n        'List.fold': List$fold,\n        'Either': Either,\n        'Either.left': Either$left,\n        'Either.right': Either$right,\n        'Nat.sub_rem': Nat$sub_rem,\n        'Nat.div_mod.go': Nat$div_mod$go,\n        'Nat.div_mod': Nat$div_mod,\n        'List': List,\n        'Nat.to_base.go': Nat$to_base$go,\n        'Nat.to_base': Nat$to_base,\n        'String.nil': String$nil,\n        'Nat.mod.go': Nat$mod$go,\n        'Nat.mod': Nat$mod,\n        'Bool.false': Bool$false,\n        'Bool.and': Bool$and,\n        'Bool.true': Bool$true,\n        'Nat.gtn': Nat$gtn,\n        'Nat.lte': Nat$lte,\n        'List.at': List$at,\n        'Nat.show_digit': Nat$show_digit,\n        'Nat.to_string_base': Nat$to_string_base,\n        'Nat.show': Nat$show,\n        'List.length': List$length,\n        'List.reverse.go': List$reverse$go,\n        'List.reverse': List$reverse,\n        'Bits.reverse.tco': Bits$reverse$tco,\n        'Bits.reverse': Bits$reverse,\n        'BitsMap.to_list.go': BitsMap$to_list$go,\n        'List.mapped': List$mapped,\n        'Bits.show': Bits$show,\n        'Map.to_list': Map$to_list,\n        'App.KL.Game.draw': App$KL$Game$draw,\n        'App.KL.draw': App$KL$draw,\n        'IO': IO,\n        'Pair.fst': Pair$fst,\n        'App.State.local': App$State$local,\n        'String.map': String$map,\n        'Cmp.as_gte': Cmp$as_gte,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.gte': Word$gte,\n        'U16.gte': U16$gte,\n        'Cmp.as_lte': Cmp$as_lte,\n        'Word.lte': Word$lte,\n        'U16.lte': U16$lte,\n        'U16.new': U16$new,\n        'Word.e': Word$e,\n        'Word': Word,\n        'Word.i': Word$i,\n        'Word.o': Word$o,\n        'Word.adder': Word$adder,\n        'Word.add': Word$add,\n        'U16.add': U16$add,\n        'Nat.apply': Nat$apply,\n        'Word.inc': Word$inc,\n        'Word.zero': Word$zero,\n        'Nat.to_word': Nat$to_word,\n        'Nat.to_u16': Nat$to_u16,\n        'Char.to_lower': Char$to_lower,\n        'String.to_lower': String$to_lower,\n        'IO.ask': IO$ask,\n        'IO.bind': IO$bind,\n        'IO.end': IO$end,\n        'IO.monad': IO$monad,\n        'App.set_local': App$set_local,\n        'App.pass': App$pass,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Word.eql': Word$eql,\n        'U16.eql': U16$eql,\n        'String.eql': String$eql,\n        'Maybe.default': Maybe$default,\n        'Parser.State.new': Parser$State$new,\n        'Parser.run': Parser$run,\n        'Parser.Reply': Parser$Reply,\n        'Parser.Reply.error': Parser$Reply$error,\n        'Parser.Error.combine': Parser$Error$combine,\n        'Parser.Error.maybe_combine': Parser$Error$maybe_combine,\n        'Parser.Reply.value': Parser$Reply$value,\n        'Parser.many.go': Parser$many$go,\n        'Parser.many': Parser$many,\n        'Parser.many1': Parser$many1,\n        'Parser.Error.new': Parser$Error$new,\n        'Parser.Reply.fail': Parser$Reply$fail,\n        'Parser.digit': Parser$digit,\n        'Nat.add': Nat$add,\n        'Nat.mul': Nat$mul,\n        'Nat.from_base.go': Nat$from_base$go,\n        'Nat.from_base': Nat$from_base,\n        'Parser.nat': Parser$nat,\n        'Nat.read': Nat$read,\n        'IO.get_time': IO$get_time,\n        'Nat.random': Nat$random,\n        'IO.random': IO$random,\n        'String.drop': String$drop,\n        'Nat.sub': Nat$sub,\n        'String.length.go': String$length$go,\n        'String.length': String$length,\n        'Unit.new': Unit$new,\n        'IO.do': IO$do,\n        'App.do': App$do,\n        'App.watch': App$watch,\n        'App.new_post': App$new_post,\n        'String.take': String$take,\n        'String.pad_right': String$pad_right,\n        'String.pad_right_exact': String$pad_right_exact,\n        'Bits.hex.encode': Bits$hex$encode,\n        'Serializer.run': Serializer$run,\n        'App.KL.Global.Event.serializer': App$KL$Global$Event$serializer,\n        'App.KL.Global.Event.serialize_post': App$KL$Global$Event$serialize_post,\n        'App.KL.Global.Event.join_room': App$KL$Global$Event$join_room,\n        'App.KL.State.Local.game': App$KL$State$Local$game,\n        'App.KL.Game.State.Local.new': App$KL$Game$State$Local$new,\n        'App.KL.Lobby.when': App$KL$Lobby$when,\n        'App.KL.Game.when': App$KL$Game$when,\n        'App.KL.when': App$KL$when,\n        'App.KL.Global.tick': App$KL$Global$tick,\n        'Debug.log': Debug$log,\n        'Pair.snd': Pair$snd,\n        'App.State.global': App$State$global,\n        'Deserializer.run': Deserializer$run,\n        'Deserializer.Reply': Deserializer$Reply,\n        'Deserializer.choice.go': Deserializer$choice$go,\n        'Deserializer.choice': Deserializer$choice,\n        'Deserializer': Deserializer,\n        'Deserializer.bind': Deserializer$bind,\n        'Deserializer.bits': Deserializer$bits,\n        'Deserializer.pure': Deserializer$pure,\n        'App.KL.Global.Event.void': App$KL$Global$Event$void,\n        'App.KL.Global.Event.deserializer': App$KL$Global$Event$deserializer,\n        'Bits.hex.decode': Bits$hex$decode,\n        'App.KL.Global.Event.deserialize_post': App$KL$Global$Event$deserialize_post,\n        'App.KL.Game.new': App$KL$Game$new,\n        'App.KL.Game.start': App$KL$Game$start,\n        'Map.set': Map$set,\n        'App.KL.Game.Player.new': App$KL$Game$Player$new,\n        'App.KL.Global.post': App$KL$Global$post,\n        'App.KL': App$KL,\n    };\n})();"],"sourceRoot":""}