type App.GG.AI {
  new(
    spotted: U64
    unspotted: U64
  )
}

App.GG.AI.get(
  coord: App.GG.Coord
  grid: App.GG.Grid
): Maybe<App.GG.AI>
  
  Maybe { 
    get creature = App.GG.Creature.get(coord, grid)
    let category = creature@category
    case category { 
      minion: some(category.AI)
      slime: none
    }
  } 

App.GG.AI.update(
  mod: App.GG.AI -> App.GG.AI
  creature: App.GG.Creature
): App.GG.Creature
  let category = creature@category
  case category { 
    minion: 
      let mod = mod(category.AI)
      let new_monster = App.GG.Monster.minion(mod, category.data)
      creature@category <- new_monster
    slime: creature
  }

App.GG.AI.inc(
  enemy: Bool
  AI: App.GG.AI
): App.GG.AI

  case enemy { 
    true:
     let spotted =  AI@spotted + 1
     let unspotted = 0 :: U64
     App.GG.AI.new(spotted, unspotted)
    false: 
     let spotted = 0 :: U64
     let unspotted = AI@unspotted + 1
     App.GG.AI.new(spotted, unspotted)
  }


App.GG.Effect.ai.inc: App.GG.Effect<Unit>

  App.GG.Effect { 
    get center = App.GG.Effect.coord.get_center
    get creature = App.GG.Effect.creature.get
    get grid = App.GG.Effect.grid.get
    without creature: App.GG.Effect.pass
    let coords = App.GG.Coord.front_all(center, creature@team, grid)
    let target = false
    for coord in coords with target:
      target || App.GG.Coord.has_enemy(coord, creature@team, grid)
    App.GG.Effect.ai.update(App.GG.AI.inc(target))
  }
