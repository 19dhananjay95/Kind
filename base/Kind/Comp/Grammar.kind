type Kind.Comp.Grammar {
  new(
    null: String
    name: (name: String) -> String
    inst_name: (name: String) -> String
    elim_name: (name: String) -> String
    lambda: (name: String, body: String) -> String
    application: (func: String, argm: String) -> String
    local_definition: (name: String, expr: String, body: String) -> String
    global_function: (name: String, args: List(String), body: String) -> String
    global_application: (name: String, args: List(String)) -> String
    select: (term: String, cse_body_list: List<Pair<String, String>>) -> String // expression that works like a scheme case
    string_literal: (str: String) -> String
    nat: (nat: Nat) -> String
    module: (name: String, exports: List(String), defs: String) -> String
    program: (main: String, defs: String) -> String
  )
}

