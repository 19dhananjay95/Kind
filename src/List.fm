type List <A: Type> {
  nil,
  cons(head: A, tail: List(A)),
}

List.tail<A: Type>(xs: List(A)): List(A)
  case xs {
    nil: List.nil<_>,
    cons: xs.tail,
  }

List.take<A: Type>(n: Nat, xs: List(A)): List(A)
  case xs {
    nil : List.nil<_>,
    cons: case n {
      zero: List.nil<_>,
      succ: List.cons<_>(xs.head,List.take<_>(n.pred, xs.tail))
    }
  }

List.fold<A: Type>(list: List(A)): <P: Type> -> P -> (A -> P -> P) -> P
  <P> (nil, cons)
  case list {
    nil : nil,
    cons: cons(list.head, List.fold<A>(list.tail)<P>(nil, cons))
  }

List.foldr<A: Type,B: Type>(b: B, f: A -> B -> B, xs: List(A)): B
  List.fold<A>(xs)<B>(b,f)

List.for<A: Type>(xs: List(A))<B: Type>(b: B, f: A -> B -> B): B
  case xs {
    nil : b,
    cons: List.for<A>(xs.tail)<B>(f(xs.head,b),f)
  }

List.map<A: Type, B: Type>(f: A -> B, as: List(A)): List(B)
  case as {
    nil: List.nil<_>,
    cons: List.cons<_>(f(as.head), List.map<_,_>(f,as.tail)),
  }

List.reverse<A: Type>(xs: List(A)) : List(A)
  List.reverse.go<_>(xs,List.nil<_>)

List.reverse.go<A: Type>(xs: List(A), res: List(A)): List(A)
  case xs {
    nil: res,
    cons: List.reverse.go<_>(xs.tail,List.cons<_>(xs.head,res))
  }

List.concat<A: Type>(as: List(A), bs: List(A)): List(A)
  case as {
    nil: bs,
    cons: List.cons<_>(as.head, List.concat<_>(as.tail,bs))
  }

List.flatten<A: Type>(xs: List(List(A))): List(A)
  case xs {
    nil: List.nil<_>,
    cons: List.concat<_>(xs.head, List.flatten<_>(xs.tail))
  }

List.is_empty<A: Type>(list: List(A)): Bool
  case list {
    nil: Bool.true,
    cons: Bool.false,
  }

// Computes the length of the list.
List.length<A: Type>(xs: List(A)): Nat
  case xs {
    nil: 0,
    cons: Nat.succ(List.length<A>(xs.tail)),
  }

// A range of nats
List.range.nat.go(nat: Nat, list: List(Nat)): List(Nat)
  case nat {
    zero: list,
    succ: List.range.nat.go(nat.pred, List.cons<_>(nat.pred, list)),
  }

List.range.nat(nat: Nat): List(Nat)
  List.range.nat.go(nat, List.nil<_>)

List.eql<A: Type>(eql: A -> A -> Bool, a: List(A), b: List(A)): Bool
  case a {
    nil: case b {
      nil: Bool.true,
      cons: Bool.false,
    },
    cons: case b {
      nil: Bool.false,
      cons: Bool.and(eql(a.head, b.head), List.eql<A>(eql, a.tail, b.tail)),
    },
  }

List.mapped<A: Type>(as: List(A))<B: Type>(f: A -> B): List(B)
  case as {
    nil: List.nil<_>,
    cons: List.cons<_>(f(as.head),List.mapped<A>(as.tail)<B>(f))
  }

List.at<A: Type>(index: Nat, list: List(A)): Maybe(A)
  case list {
    nil: Maybe.none<_>,
    cons: case index {
      zero: Maybe.some<_>(list.head),
      succ: List.at<_>(index.pred, list.tail),
    }
  }

List.at_last<A: Type>(index: Nat, list: List(A)): Maybe(A)
  List.at<A>(index, List.reverse<_>(list))

List.init<A: Type>(list: List(A)): List(A)
  case list {
    cons: case list.tail {
      cons: List.cons<_>(list.head, List.init<A>(list.tail)),
      nil: List.nil<_>,
    },
    nil: List.nil<_>,
  }

List.zip<A: Type, B: Type>(as: List(A), bs: List(B)): List(Pair(A,B))
  case as {
    nil: List.nil<_>,
    cons: case bs {
      nil: List.nil<_>,
      cons: List.cons<_>(Pair.new<_,_>(as.head, bs.head), List.zip<A,B>(as.tail, bs.tail)),
    }
  }

// Do all elements satisfy a condition?
List.all<A: Type>(cond: A -> Bool, list: List(A)): Bool
  case list{
    nil : Bool.true
    cons: case cond(list.head){
      true : List.all<_>(cond, list.tail)
      false: Bool.false
    }
  }

// Do any element satisfy a condition?
List.any<A: Type>(cond: A -> Bool, list: List(A)): Bool
  case list{
    nil : Bool.false
    cons: case cond(list.head){
      true : Bool.true
      false: List.any<_>(cond, list.tail)
    }
  }

// Are all elements true?
List.and(list: List(Bool)): Bool
  List.all<_>((x) x, list)

// Add the total of a list of natural numbers
List.sum(xs: List(Nat)) : Nat
  List.sum.go(xs, Nat.zero)

List.sum.go(xs: List(Nat), n: Nat) : Nat
  case xs {
    nil : n,
    cons: List.sum.go(xs.tail,Nat.add(xs.head,n))
  }

// Shows a list as String
List.show<A: Type>(f: A -> String, xs: List(A)): String
  String.flatten(["[",String.intercalate(",", List.map<_,_>(f,xs)),"]"])

// insert separators between elements, i.e. `[A,B,C] ~> [A,sep,B,sep,C]`
List.intersperse<A: Type>(sep: A, xs: List(A)): List(A)
  case xs{
    nil : List.nil<_>
    cons: case xs.tail{
      nil : List.pure<_>(xs.head)
      cons: List.cons<_>(xs.head,List.cons<_>(sep,List.intersperse<A>(sep,xs.tail)))
    }
  }

// insert separators between elements, i.e. `[A,B,C] ~> [A,sep,B,sep,C]`
List.intercalate<A: Type>(sep: List(A), xs: List(List(A))): List(A)
  List.flatten<A>(List.intersperse<List(A)>(sep,xs))

// A list with only one element.
List.pure<A : Type>(x : A) : List(A)
  List.cons<A>(x)(List.nil<A>)