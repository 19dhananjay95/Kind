// TODO make alias for time -> U64 and base64 -> String

// Local State
// ===========

type App.KL.Game.State.Local {
  new(
    user: String
    room: String
    casts: Maybe<App.KL.Game.Casts>
    mouse: Pair<U32, U32>
  )
}

// Global State
// ============

type App.KL.Game {
  new(
    phase: App.KL.Game.Phase
    players: Map<App.KL.Game.Player>
    board: App.KL.Game.Board
    tick: U64
  )
}

type App.KL.Game.Phase {
  draft
  play
}

// Initial state
App.KL.Game.start: App.KL.Game
  let phase = App.KL.Game.Phase.draft
  let players = Map.new!
  let board = Hexagonal.Axial.BBL.new!
  let tick = 0#64
  App.KL.Game.new(phase, players, board, tick)

// Render function
// ===============

App.KL.Game.draw(img: VoxBox, local: App.KL.Game.State.Local, global: App.KL.Global.State): DOM
  <div>{
    let game = global@game
    case game {
      none: <div>"Not ingame."</div>
      some: <div>{
        let phase = game.value@phase
        case phase {
          play: App.KL.Game.Phase.Play.draw(img, local, game.value)
          draft: App.KL.Game.Phase.Draft.draw(local, global) // TODO change to receive App.KL.Game instead global
        } 
      }</div>
    }
  }</div>

// Local events
// ============

App.KL.Game.when(
  local: App.KL.Game.State.Local
  global: App.KL.Global.State,
  event: App.Event
): IO<Maybe<App.State.local<App.KL.State>>>
  open global
  case global.game as game {
    none: App.pass!
    some: 
      open game.value as game_info
      case game_info.phase {
        play: App.KL.Game.Phase.Play.when(local, game.value, event)
        draft: App.KL.Game.Phase.Draft.when(local, game.value, event)
      }
  }

// Global Events
// =============

type App.KL.Game.Event {
  draft(event: App.KL.Game.Phase.Draft.Event)
  play(event: App.KL.Game.Phase.Play.Event)
} deriving (serializer, deserializer)

App.KL.Game.tick(tick: U64, game: App.KL.Game): App.KL.Game
  open game
  case game.phase {
    draft: App.KL.Game.Phase.Draft.tick(tick, game)
    play: App.KL.Game.Phase.Play.tick(tick, game)
  }

App.KL.Game.post(
  time: U64
  room: String
  addr: String
  event: App.KL.Game.Event
  game: App.KL.Game
): App.KL.Game
  open game
  case event game.phase {
    draft draft : App.KL.Game.Phase.Draft.post(time, room, addr, event.event, game)
    play  play  : App.KL.Game.Phase.Play.post(time, room, addr, event.event, game)
  } default game

