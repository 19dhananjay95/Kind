#file #code #defs ((((((Monad.bind Parser) Parser.monad) Nat) Fm.Defs) Fm.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Fm.Name) Fm.Defs) Fm.Parser.name1) #name ((((((Monad.bind Parser) Parser.monad) (List (List Fm.Binder))) Fm.Defs) ((Parser.many (List Fm.Binder)) Fm.Parser.binder)) #args !args = ((List.flatten Fm.Binder) args); ((((((Monad.bind Parser) Parser.monad) Unit) Fm.Defs) (Fm.Parser.text ":")) # ((((((Monad.bind Parser) Parser.monad) Fm.Term) Fm.Defs) Fm.Parser.term) #type ((((((Monad.bind Parser) Parser.monad) Fm.Term) Fm.Defs) Fm.Parser.term) #term ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Fm.Defs) (Fm.Parser.stop init)) #orig !type = ((Fm.Parser.make_forall args) type); !term = ((Fm.Parser.make_lambda ((((List.mapped Fm.Binder) args) Fm.Name) #x ((x #x Fm.Name) #x.eras #x.name #x.term x.name))) term); !type = (((Fm.Term.bind (List.nil ((Pair Fm.Name) Fm.Term))) #x (Bits.i x)) type); !term = (((Fm.Term.bind (List.nil ((Pair Fm.Name) Fm.Term))) #x (Bits.o x)) term); !defs = (((((((((Fm.define file) code) orig) name) term) type) Bool.false) Bool.false) defs); ((((Monad.pure Parser) Parser.monad) Fm.Defs) defs))))))))