// App states (local = clicks, global = visitors)
App.GG.State: App.State
  App.State.new(App.GG.State.local, Unit)

App.GG.Grid: Type
  BBT<Pair<U32, U32>, App.GG.Tile>

type App.GG.State.local {
  new(
    grid: App.GG.Grid)
}

App.GG.Coord: Type
  Pair<U32, U32>

App.GG.Grid.cmp(a: Pair<U32, U32>, b: Pair<U32, U32>): Cmp
  let fst_cmp = U32.cmp(a@fst, b@fst)
  case fst_cmp {
    ltn: Cmp.ltn
    eql: U32.cmp(a@snd, b@snd)
    gtn: Cmp.gtn
  }

App.GG.Monster.to_vbox(monster: App.GG.Monster): VoxBox
  case monster {
    slime: monster.data@sprite
    minion: monster.data@sprite
  }

App.GG.draw.grid(
  grid: App.GG.Grid
  img: VoxBox
): VoxBox
  for key:val in grid with img:
    App.GG.draw.tile(key, val, {32,32}, {40,40}, img)
  img

App.GG.draw.tile(
  coord: App.GG.Coord,
  tile: App.GG.Tile,
  tile_size: Pair<U32, U32>,
  start: Pair<U32, U32>
  img: VoxBox
): VoxBox
  let x = (start@fst + (tile_size@fst * coord@fst)) - 128
  let y = (start@snd + (tile_size@snd * coord@snd)) - 128
  let tile_img = tile@img
  let creature = tile@creature
  let img = 
    VoxBox.Draw.image(x, y, 0, tile@img, img)
  case creature {
    none:
      img
    some:
      let sprite = App.GG.Monster.to_vbox(creature.value@category)
      VoxBox.Draw.image(x, y, 1, sprite, img)
  }

App.GG.init.grid: App.GG.Grid

  let dna = App.GG.Creature.Dna.new("cartinhas", App.GG.Creature.Attributes.new(10, 10, 10, 10))
  let monster = App.GG.Monster.slime(App.GG.Slime.new(App.GG.img.slime, dna))
  let creature = App.GG.Creature.Creature.new(monster, App.GG.Team.blue, [], 10)
  let list = 
    [
      {{0#32,0#32}, App.GG.Tile.new(App.GG.img.tile, none, App.GG.Team.blue)}
      {{0#32,1#32}, App.GG.Tile.new(App.GG.img.tile, none, App.GG.Team.blue)}
      {{0#32,2#32}, App.GG.Tile.new(App.GG.img.tile, none, App.GG.Team.blue)}
      {{1#32,0#32}, App.GG.Tile.new(App.GG.img.tile, none, App.GG.Team.blue)}
      {{1#32,1#32}, App.GG.Tile.new(App.GG.img.tile, some(creature), App.GG.Team.blue)}
      {{1#32,2#32}, App.GG.Tile.new(App.GG.img.tile, none, App.GG.Team.blue)}
      {{2#32,0#32}, App.GG.Tile.new(App.GG.img.tile, none, App.GG.Team.blue)}
      {{2#32,1#32}, App.GG.Tile.new(App.GG.img.tile, none, App.GG.Team.blue)}
      {{2#32,2#32}, App.GG.Tile.new(App.GG.img.tile, none, App.GG.Team.blue)}

      {{3#32,0#32}, App.GG.Tile.new(App.GG.img.tile, none, App.GG.Team.red)}
      {{3#32,1#32}, App.GG.Tile.new(App.GG.img.tile, none, App.GG.Team.red)}
      {{3#32,2#32}, App.GG.Tile.new(App.GG.img.tile, none, App.GG.Team.red)}
      {{4#32,0#32}, App.GG.Tile.new(App.GG.img.tile, none, App.GG.Team.red)}
      {{4#32,1#32}, App.GG.Tile.new(App.GG.img.tile, none, App.GG.Team.red)}
      {{4#32,2#32}, App.GG.Tile.new(App.GG.img.tile, none, App.GG.Team.red)}
      {{5#32,0#32}, App.GG.Tile.new(App.GG.img.tile, none, App.GG.Team.red)}
      {{5#32,1#32}, App.GG.Tile.new(App.GG.img.tile, none, App.GG.Team.red)}
      {{5#32,2#32}, App.GG.Tile.new(App.GG.img.tile, none, App.GG.Team.red)}
    ]
  BBT.from_list<App.GG.Coord, App.GG.Tile>(App.GG.Grid.cmp, list)

type App.GG.Tile {
  new(
    img: VoxBox
    creature: Maybe<App.GG.Creature.Creature>
    owner: App.GG.Team
  )
}


App.GG.movement_keys(key: U16, grid: App.GG.Grid): App.GG.Grid
  let char_tile = none :: Maybe<App.GG.Coord>
  for coord:tile in grid with char_tile:
    case tile@creature {
      none: char_tile
      some: some(coord)
    } 
  Maybe {
    get ori = char_tile // Origin Coord 
    get d_c = // Destination Coord 
      switch U16.eql(key) {
        // left
        37#16: some({ori@fst - 1, ori@snd})
        // up
        38#16: some({ori@fst, ori@snd - 1})
        // right
        39#16: some({ori@fst + 1, ori@snd})
        // down
        40#16: some({ori@fst, ori@snd + 1})
      }default none
    get d_t = BBT.lookup!!(App.GG.Grid.cmp, d_c, grid)
    return App.GG.move(ori, d_c, grid)
  } <> grid

App.GG.move(origin: App.GG.Coord, destination: App.GG.Coord, grid: App.GG.Grid): App.GG.Grid
  let t_origin = BBT.lookup!!(App.GG.Grid.cmp, origin, grid)
  let t_destination = BBT.lookup!!(App.GG.Grid.cmp, destination, grid)
  Maybe {
    get ori = t_origin
    get des = t_destination
    let mon = ori@creature
    let new_ori = ori@creature <- none
    let new_des = des@creature <- mon
    let new_grid = BBT.insert!!(App.GG.Grid.cmp, destination, new_des, grid)
    let new_grid = BBT.insert!!(App.GG.Grid.cmp, origin, new_ori, new_grid)
    log("origin.x = "| U32.show(origin@fst) |", origin.y = " | U32.show(origin@snd) | ", destination.x = "| U32.show(destination@fst) |", destination.y = " | U32.show(destination@snd))
    return new_grid
  } <> grid

type App.GG.Animation {
  idle
  moving
  attack
}

type App.GG.Slime {
  new(
    sprite: VoxBox //App.GG.Animation -> U64 -> VoxBox
    dna: App.GG.Creature.Dna
  )
}

type App.GG.Minion {
  new(
    sprite: VoxBox //App.GG.Animation -> U64 -> VoxBox
  )
}

type App.GG.Monster {
  minion(data: App.GG.Minion)
  slime(data: App.GG.Slime)
}

type App.GG.Team {
  neutral
  blue
  red
}

// Initial state
App.GG.init: App.Init<App.GG.State>
  let grid = App.GG.init.grid
  let local = App.GG.State.local.new(grid)
  App.Store.new<App.GG.State>(local, unit)

App.GG.draw.canvas(img: VoxBox, local: App.GG.State.local): VoxBox
  img

// Render function
App.GG.draw(img: VoxBox): App.Draw<App.GG.State>
  (state)
  <div style={
    "height": "100vh"
    "width": "100vw"
  }>
    <div style={
        "max-height": "100%",
        "max-width": "100%",
        "overflow": "scroll",
        "display": "flex",
        "align-items": "center",
        "justify-content": "center"
      }>{
        DOM.vbox({
            "class": "pixel-art" 
            "id": "game_screen",
            "width": "1024px",
            "height": "1024px",
            "scale": "4"
          },
          {},
          App.GG.draw.grid(state@local@grid, img)) 
      }</div>
  </div>

// Event handler
App.GG.when: App.When<App.GG.State>
  (event, state)
  let local = state@local
  case event {
    // init: IO {
    //   App.watch!(App.room_zero)
    //   App.new_post!(App.room_zero, "")
    // }
    key_down:
      log(U16.show(event.code))
      let grid = local@grid
      let new_grid = App.GG.movement_keys(event.code, grid)
      let new_local = local@grid <- new_grid
      App.set_local!(new_local)
  } default App.pass!

// Global ticker: not used
App.GG.tick: App.Tick<App.GG.State>
  App.no_tick<App.GG.State>

// Global visitor: counts posts to room_zero
App.GG.post: App.Post<App.GG.State>
  (time, room, addr, data, global_state)
  global_state

// A "GG, world!" + counter application
App.GG: App<App.GG.State>
  let img = VoxBox.alloc_capacity(U32.mul(65536#32, 8#32))
  App.new<App.GG.State>(
    App.GG.init
    App.GG.draw(img)
    App.GG.when
    App.GG.tick
    App.GG.post
  )
