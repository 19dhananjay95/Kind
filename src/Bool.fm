type Bool {
  true,
  false,
}

Bool.not(a: Bool): Bool
  case a {
    true: false,
    false: true,
  }

Bool.and(a: Bool, b: Bool): Bool
  case a {
    true: b,
    false: false,
  }

Bool.or(a: Bool, b: Bool): Bool
  case a {
    true: Bool.true,
    false: b,
  }

Bool.eql(a: Bool, b: Bool): Bool
  case a {
    true: b,
    false: Bool.not(b),
  }

// Converts to a string
Bool.show(b: Bool): String
  case b{
    true : "Bool.true"
    false: "Bool.false"
  }

// If-then-else
Bool.if<A: Type>(cond: Bool, true_case: A, false_case: A): A
  case cond{
    true : true_case
    false: false_case
  }


// Boolean negation, fusible
Bool.notf(a: Bool): Bool
  <P> (t, f)
  case a{
    true: f,
    false: t,
  } : P(Bool.notf(a))

// Ensures a Bool is true
Bool.IsTrue(b: Bool): Type
  case b {
    true: Unit,
    false: Empty,
  }

// Ensures a Bool is false.
Bool.IsFalse(b: Bool): Type
  case b {
    true: Empty,
    false: Unit,
  }

// Proof that not(not(b)) == b
Bool.double_negation(b: Bool): Equal(Bool, Bool.not(Bool.not(b)), b)
  case b {
    true: Equal.refl<_, Bool.true>,
    false: Equal.refl<_, Bool.false>,
  } : Equal(Bool, Bool.not(Bool.not(b)), b)

// Converts to a string
Bool.show(b: Bool): String
  case b {
    true: "Bool.true",
    false: "Bool.false",
  }

// Dependent elimination of Bool.
Bool.elim(b: Bool): <P: Bool -> Type> -> P(Bool.true) -> P(Bool.false) -> P(b)
  <P> (t) (f) b<P>(t, f)

Bool.true_neq_false: true != false
  (e) unit :: rewrite x in (if x then Unit else Empty) with e

Bool.false_neq_true: false != true
  (e) unit :: rewrite x in (if x then Empty else Unit) with e
