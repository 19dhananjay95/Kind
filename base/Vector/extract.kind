// Vector.extract<A: Type, n: Nat>(xs: Vector(A, Nat.succ(n))): Pair(A, Vector(A, n))
//   case xs {
//     nil : Unit.new
//     cons: Pair.new<A, Vector(A, xs.size)>(xs.head, xs.tail)
//   } : Bool.if<Type>(Nat.eql(0, xs.size), Unit, Pair(A, Vector(A, Nat.pred(xs.size))))

// FIXME: 
// Vector.extract<A: Type, size: Nat>(v: Vector(A, Nat.succ(size))): Pair(A, Vector(A, size))
//   case size with v {
//     zero: Unit.new
//     succ: 
//       case v {
//         cons: ?cons
//         // let pred = Vector.extract(A, size.pred, v.tail)
//         // {v.head, pred} // {xs.head, xs.tail}
//       }
//   } : Bool.if<Type>(Nat.eql(0, size), Unit, Pair(A, Vector(A, Nat.pred(size))))
  // } : case Nat.eql(0, xs.len) {
  //       true : Unit
  //       false: Pair(A, Vector(A, Nat.pred(xs.len)))
  //     }

Vector.extract<A: Type, n: Nat>(xs: Vector(A, Nat.succ(n))): Pair(A, Vector(A, n))
  Vector.extract!!(xs)