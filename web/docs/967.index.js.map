{"version":3,"sources":["webpack://kind-web/./src/apps/App.KL.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS,iCAAiC;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA,6EAA6E;AAC7E;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA,qFAAqF;AACrF;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA,6FAA6F;AAC7F;AACA;AACA;AACA;AACA,iGAAiG;AACjG;AACA;AACA;AACA;AACA,qGAAqG;AACrG;AACA;AACA;AACA;AACA,yGAAyG;AACziBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,yBAAyB;AACzB;AACA,qBAAqB;AACrfile":"967.index.js","sourcesContent":["module.exports = (function() {\n    function int_pos(i) {\n        return i >= 0n ? i : 0n;\n    };\n\n    function int_neg(i) {\n        return i < 0n ? -i : 0n;\n    };\n\n    function word_to_u8(w) {\n        var u = 0;\n        for (var i = 0; i < 8; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u8_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 8; ++i) {\n            w = {\n                _: (u >>> (8 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_i32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function i32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function i32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n    var f64 = new Float64Array(1);\n    var u32 = new Uint32Array(f64.buffer);\n\n    function f64_get_bit(x, i) {\n        f64[0] = x;\n        if (i < 32) {\n            return (u32[0] >>> i) & 1;\n        } else {\n            return (u32[1] >>> (i - 32)) & 1;\n        }\n    };\n\n    function f64_set_bit(x, i) {\n        f64[0] = x;\n        if (i < 32) {\n            u32[0] = u32[0] | (1 << i);\n        } else {\n            u32[1] = u32[1] | (1 << (i - 32));\n        }\n        return f64[0];\n    };\n\n    function word_to_f64(w) {\n        var x = 0;\n        for (var i = 0; i < 64; ++i) {\n            x = w._ === 'Word.i' ? f64_set_bit(x, i) : x;\n            w = w.pred;\n        };\n        return x;\n    };\n\n    function f64_to_word(x) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 64; ++i) {\n            w = {\n                _: f64_get_bit(x, 64 - i - 1) ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function f64_make(s, a, b) {\n        return (s ? 1 : -1) * Number(a) / 10 ** Number(b);\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    var bitsmap_new = {\n        _: 'BitsMap.new'\n    };\n    var bitsmap_tie = function(val, lft, rgt) {\n        return {\n            _: 'BitsMap.tip',\n            val,\n            lft,\n            rgt\n        };\n    }\n    var maybe_none = {\n        _: 'Maybe.none'\n    };\n    var maybe_some = function(value) {\n        return {\n            _: 'Maybe.some',\n            value\n        };\n    }\n    var bitsmap_get = function(bits, map) {\n        for (var i = bits.length - 1; i >= 0; --i) {\n            if (map._ !== 'BitsMap.new') {\n                map = bits[i] === '0' ? map.lft : map.rgt;\n            }\n        }\n        return map._ === 'BitsMap.new' ? maybe_none : map.val;\n    }\n    var bitsmap_set = function(bits, val, map, mode) {\n        var res = {\n            value: map\n        };\n        var key = 'value';\n        var obj = res;\n        for (var i = bits.length - 1; i >= 0; --i) {\n            var map = obj[key];\n            if (map._ === 'BitsMap.new') {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: maybe_none,\n                    lft: bitsmap_new,\n                    rgt: bitsmap_new\n                };\n            } else {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: map.val,\n                    lft: map.lft,\n                    rgt: map.rgt\n                };\n            }\n            obj = obj[key];\n            key = bits[i] === '0' ? 'lft' : 'rgt';\n        }\n        var map = obj[key];\n        if (map._ === 'BitsMap.new') {\n            var x = mode === 'del' ? maybe_none : {\n                _: 'Maybe.some',\n                value: val\n            };\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: bitsmap_new,\n                rgt: bitsmap_new\n            };\n        } else {\n            var x = mode === 'set' ? {\n                _: 'Maybe.some',\n                value: val\n            } : mode === 'del' ? maybe_none : map.val;\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: map.lft,\n                rgt: map.rgt\n            };\n        }\n        return res.value;\n    };\n    var nat_to_bits = n => {\n        return n === 0n ? '' : n.toString(2);\n    };\n    const inst_unit = x => x(null);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c0;\n                return $2;\n            } else {\n                var $3 = c1;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c0;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c1($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_int = x => x(x0 => x1 => x0 - x1);\n    const elim_int = (x => {\n        var $12 = (() => c0 => {\n            var self = x;\n            switch (\"new\") {\n                case 'new':\n                    var $9 = int_pos(self);\n                    var $10 = int_neg(self);\n                    var $11 = c0($9)($10);\n                    return $11;\n            };\n        })();\n        return $12;\n    });\n    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');\n    const elim_bits = (x => {\n        var $18 = (() => c0 => c1 => c2 => {\n            var self = x;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'o':\n                    var $13 = self.slice(0, -1);\n                    var $14 = c1($13);\n                    return $14;\n                case 'i':\n                    var $15 = self.slice(0, -1);\n                    var $16 = c2($15);\n                    return $16;\n                case 'e':\n                    var $17 = c0;\n                    return $17;\n            };\n        })();\n        return $18;\n    });\n    const inst_u8 = x => x(x0 => word_to_u8(x0));\n    const elim_u8 = (x => {\n        var $21 = (() => c0 => {\n            var self = x;\n            switch ('u8') {\n                case 'u8':\n                    var $19 = u8_to_word(self);\n                    var $20 = c0($19);\n                    return $20;\n            };\n        })();\n        return $21;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $24 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $22 = u16_to_word(self);\n                    var $23 = c0($22);\n                    return $23;\n            };\n        })();\n        return $24;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $27 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $25 = u32_to_word(self);\n                    var $26 = c0($25);\n                    return $26;\n            };\n        })();\n        return $27;\n    });\n    const inst_i32 = x => x(x0 => word_to_i32(x0));\n    const elim_i32 = (x => {\n        var $30 = (() => c0 => {\n            var self = x;\n            switch ('i32') {\n                case 'i32':\n                    var $28 = i32_to_word(self);\n                    var $29 = c0($28);\n                    return $29;\n            };\n        })();\n        return $30;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $33 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $31 = u64_to_word(self);\n                    var $32 = c0($31);\n                    return $32;\n            };\n        })();\n        return $33;\n    });\n    const inst_f64 = x => x(x0 => word_to_f64(x0));\n    const elim_f64 = (x => {\n        var $36 = (() => c0 => {\n            var self = x;\n            switch ('f64') {\n                case 'f64':\n                    var $34 = f64_to_word(self);\n                    var $35 = c0($34);\n                    return $35;\n            };\n        })();\n        return $36;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $41 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $37 = c0;\n                return $37;\n            } else {\n                var $38 = self.charCodeAt(0);\n                var $39 = self.slice(1);\n                var $40 = c1($38)($39);\n                return $40;\n            };\n        })();\n        return $41;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $45 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $42 = buffer32_to_depth(self);\n                    var $43 = buffer32_to_u32array(self);\n                    var $44 = c0($42)($43);\n                    return $44;\n            };\n        })();\n        return $45;\n    });\n\n    function App$new$(_init$2, _draw$3, _when$4, _tick$5, _post$6) {\n        var $46 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4,\n            'tick': _tick$5,\n            'post': _post$6\n        });\n        return $46;\n    };\n    const App$new = x0 => x1 => x2 => x3 => x4 => App$new$(x0, x1, x2, x3, x4);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $47 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $47;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n    const App$State$new = Pair$new$(null, null);\n    const App$KL$State = App$State$new;\n\n    function App$KL$State$Local$lobby$(_state$1) {\n        var $48 = ({\n            _: 'App.KL.State.Local.lobby',\n            'state': _state$1\n        });\n        return $48;\n    };\n    const App$KL$State$Local$lobby = x0 => App$KL$State$Local$lobby$(x0);\n\n    function App$KL$Lobby$State$Local$new$(_user$1, _room_input$2) {\n        var $49 = ({\n            _: 'App.KL.Lobby.State.Local.new',\n            'user': _user$1,\n            'room_input': _room_input$2\n        });\n        return $49;\n    };\n    const App$KL$Lobby$State$Local$new = x0 => x1 => App$KL$Lobby$State$Local$new$(x0, x1);\n    const App$KL$State$Global$new = ({\n        _: 'App.KL.State.Global.new'\n    });\n\n    function App$Store$new$(_local$2, _global$3) {\n        var $50 = ({\n            _: 'App.Store.new',\n            'local': _local$2,\n            'global': _global$3\n        });\n        return $50;\n    };\n    const App$Store$new = x0 => x1 => App$Store$new$(x0, x1);\n    const App$KL$init = (() => {\n        var _local$1 = App$KL$State$Local$lobby$(App$KL$Lobby$State$Local$new$(\"\", \"\"));\n        var _global$2 = App$KL$State$Global$new;\n        var $51 = App$Store$new$(_local$1, _global$2);\n        return $51;\n    })();\n\n    function BitsMap$(_A$1) {\n        var $52 = null;\n        return $52;\n    };\n    const BitsMap = x0 => BitsMap$(x0);\n\n    function Map$(_V$1) {\n        var $53 = null;\n        return $53;\n    };\n    const Map = x0 => Map$(x0);\n    const BitsMap$new = ({\n        _: 'BitsMap.new'\n    });\n\n    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {\n        var $54 = ({\n            _: 'BitsMap.tie',\n            'val': _val$2,\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $54;\n    };\n    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);\n\n    function Maybe$some$(_value$2) {\n        var $55 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $55;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n    const BitsMap$set = a0 => a1 => a2 => (bitsmap_set(a0, a1, a2, 'set'));\n    const Bits$e = '';\n    const Bits$o = a0 => (a0 + '0');\n    const Bits$i = a0 => (a0 + '1');\n    const Bits$concat = a0 => a1 => (a1 + a0);\n\n    function Word$to_bits$(_a$2) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $57 = self.pred;\n                var $58 = (Word$to_bits$($57) + '0');\n                var $56 = $58;\n                break;\n            case 'Word.i':\n                var $59 = self.pred;\n                var $60 = (Word$to_bits$($59) + '1');\n                var $56 = $60;\n                break;\n            case 'Word.e':\n                var $61 = Bits$e;\n                var $56 = $61;\n                break;\n        };\n        return $56;\n    };\n    const Word$to_bits = x0 => Word$to_bits$(x0);\n\n    function Nat$succ$(_pred$1) {\n        var $62 = 1n + _pred$1;\n        return $62;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const U16$to_bits = a0 => (u16_to_bits(a0));\n\n    function String$to_bits$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $64 = Bits$e;\n            var $63 = $64;\n        } else {\n            var $65 = self.charCodeAt(0);\n            var $66 = self.slice(1);\n            var $67 = (String$to_bits$($66) + (u16_to_bits($65)));\n            var $63 = $67;\n        };\n        return $63;\n    };\n    const String$to_bits = x0 => String$to_bits$(x0);\n\n    function Map$from_list$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $69 = self.head;\n                var $70 = self.tail;\n                var self = $69;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $72 = self.fst;\n                        var $73 = self.snd;\n                        var $74 = (bitsmap_set(String$to_bits$($72), $73, Map$from_list$($70), 'set'));\n                        var $71 = $74;\n                        break;\n                };\n                var $68 = $71;\n                break;\n            case 'List.nil':\n                var $75 = BitsMap$new;\n                var $68 = $75;\n                break;\n        };\n        return $68;\n    };\n    const Map$from_list = x0 => Map$from_list$(x0);\n\n    function List$cons$(_head$2, _tail$3) {\n        var $76 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $76;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function Pair$(_A$1, _B$2) {\n        var $77 = null;\n        return $77;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function DOM$node$(_tag$1, _props$2, _style$3, _children$4) {\n        var $78 = ({\n            _: 'DOM.node',\n            'tag': _tag$1,\n            'props': _props$2,\n            'style': _style$3,\n            'children': _children$4\n        });\n        return $78;\n    };\n    const DOM$node = x0 => x1 => x2 => x3 => DOM$node$(x0, x1, x2, x3);\n\n    function DOM$text$(_value$1) {\n        var $79 = ({\n            _: 'DOM.text',\n            'value': _value$1\n        });\n        return $79;\n    };\n    const DOM$text = x0 => DOM$text$(x0);\n    const Map$new = BitsMap$new;\n\n    function App$KL$Lobby$draw$input$(_id$1, _value$2) {\n        var _style$3 = Map$from_list$(List$cons$(Pair$new$(\"font-size\", \"2rem\"), List$cons$(Pair$new$(\"font-family\", \"monospace\"), List$cons$(Pair$new$(\"outline\", \"transparent\"), List$nil))));\n        var $80 = DOM$node$(\"input\", Map$from_list$(List$cons$(Pair$new$(\"value\", _value$2), List$cons$(Pair$new$(\"id\", _id$1), List$nil))), _style$3, List$nil);\n        return $80;\n    };\n    const App$KL$Lobby$draw$input = x0 => x1 => App$KL$Lobby$draw$input$(x0, x1);\n\n    function App$KL$Lobby$draw$button$(_id$1, _content$2) {\n        var _style$3 = Map$from_list$(List$cons$(Pair$new$(\"font-size\", \"2rem\"), List$cons$(Pair$new$(\"font-family\", \"monospace\"), List$cons$(Pair$new$(\"margin-left\", \"10px\"), List$cons$(Pair$new$(\"padding\", \"2px\"), List$nil)))));\n        var $81 = DOM$node$(\"button\", Map$from_list$(List$cons$(Pair$new$(\"id\", _id$1), List$nil)), _style$3, List$cons$(DOM$text$(_content$2), List$nil));\n        return $81;\n    };\n    const App$KL$Lobby$draw$button = x0 => x1 => App$KL$Lobby$draw$button$(x0, x1);\n\n    function App$KL$Lobby$draw$(_local$1) {\n        var self = _local$1;\n        switch (self._) {\n            case 'App.KL.Lobby.State.Local.new':\n                var $83 = self.room_input;\n                var _style$4 = Map$from_list$(List$cons$(Pair$new$(\"width\", \"100vw\"), List$cons$(Pair$new$(\"height\", \"100vh\"), List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"flex-direction\", \"column\"), List$cons$(Pair$new$(\"justify-content\", \"center\"), List$cons$(Pair$new$(\"align-items\", \"center\"), List$cons$(Pair$new$(\"font-size\", \"2rem\"), List$nil))))))));\n                var $84 = DOM$node$(\"div\", Map$from_list$(List$nil), _style$4, List$cons$(DOM$node$(\"h1\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"margin-bottom\", \"10px\"), List$nil)), List$cons$(DOM$text$(\"Welcome to Kaelin\"), List$nil)), List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$new, List$cons$(DOM$text$(\"Enter a room number: \"), List$cons$(App$KL$Lobby$draw$input$(\"text\", $83), List$cons$(App$KL$Lobby$draw$button$(\"ready\", \"Enter\"), List$cons$(App$KL$Lobby$draw$button$(\"random\", \"Random\"), List$nil))))), List$nil)));\n                var $82 = $84;\n                break;\n        };\n        return $82;\n    };\n    const App$KL$Lobby$draw = x0 => App$KL$Lobby$draw$(x0);\n\n    function App$KL$Game$draw$(_local$1) {\n        var $85 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$new, List$cons$(DOM$text$(\"TODO\"), List$nil));\n        return $85;\n    };\n    const App$KL$Game$draw = x0 => App$KL$Game$draw$(x0);\n\n    function App$KL$draw$(_state$1) {\n        var self = _state$1;\n        switch (self._) {\n            case 'App.Store.new':\n                var $87 = self.local;\n                var self = $87;\n                switch (self._) {\n                    case 'App.KL.State.Local.lobby':\n                        var $89 = self.state;\n                        var $90 = App$KL$Lobby$draw$($89);\n                        var $88 = $90;\n                        break;\n                    case 'App.KL.State.Local.game':\n                        var $91 = self.state;\n                        var $92 = App$KL$Game$draw$($91);\n                        var $88 = $92;\n                        break;\n                };\n                var $86 = $88;\n                break;\n        };\n        return $86;\n    };\n    const App$KL$draw = x0 => App$KL$draw$(x0);\n\n    function IO$(_A$1) {\n        var $93 = null;\n        return $93;\n    };\n    const IO = x0 => IO$(x0);\n\n    function Maybe$(_A$1) {\n        var $94 = null;\n        return $94;\n    };\n    const Maybe = x0 => Maybe$(x0);\n\n    function Pair$fst$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $96 = self.fst;\n                var $97 = $96;\n                var $95 = $97;\n                break;\n        };\n        return $95;\n    };\n    const Pair$fst = x0 => Pair$fst$(x0);\n    const App$State$local = Pair$fst;\n    const String$nil = '';\n\n    function String$cons$(_head$1, _tail$2) {\n        var $98 = (String.fromCharCode(_head$1) + _tail$2);\n        return $98;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n\n    function String$map$(_f$1, _as$2) {\n        var self = _as$2;\n        if (self.length === 0) {\n            var $100 = String$nil;\n            var $99 = $100;\n        } else {\n            var $101 = self.charCodeAt(0);\n            var $102 = self.slice(1);\n            var $103 = String$cons$(_f$1($101), String$map$(_f$1, $102));\n            var $99 = $103;\n        };\n        return $99;\n    };\n    const String$map = x0 => x1 => String$map$(x0, x1);\n    const Bool$false = false;\n    const Bool$and = a0 => a1 => (a0 && a1);\n    const Bool$true = true;\n\n    function Cmp$as_gte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $105 = Bool$false;\n                var $104 = $105;\n                break;\n            case 'Cmp.eql':\n            case 'Cmp.gtn':\n                var $106 = Bool$true;\n                var $104 = $106;\n                break;\n        };\n        return $104;\n    };\n    const Cmp$as_gte = x0 => Cmp$as_gte$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $108 = self.pred;\n                var $109 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $111 = self.pred;\n                            var $112 = (_a$pred$10 => {\n                                var $113 = Word$cmp$go$(_a$pred$10, $111, _c$4);\n                                return $113;\n                            });\n                            var $110 = $112;\n                            break;\n                        case 'Word.i':\n                            var $114 = self.pred;\n                            var $115 = (_a$pred$10 => {\n                                var $116 = Word$cmp$go$(_a$pred$10, $114, Cmp$ltn);\n                                return $116;\n                            });\n                            var $110 = $115;\n                            break;\n                        case 'Word.e':\n                            var $117 = (_a$pred$8 => {\n                                var $118 = _c$4;\n                                return $118;\n                            });\n                            var $110 = $117;\n                            break;\n                    };\n                    var $110 = $110($108);\n                    return $110;\n                });\n                var $107 = $109;\n                break;\n            case 'Word.i':\n                var $119 = self.pred;\n                var $120 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $122 = self.pred;\n                            var $123 = (_a$pred$10 => {\n                                var $124 = Word$cmp$go$(_a$pred$10, $122, Cmp$gtn);\n                                return $124;\n                            });\n                            var $121 = $123;\n                            break;\n                        case 'Word.i':\n                            var $125 = self.pred;\n                            var $126 = (_a$pred$10 => {\n                                var $127 = Word$cmp$go$(_a$pred$10, $125, _c$4);\n                                return $127;\n                            });\n                            var $121 = $126;\n                            break;\n                        case 'Word.e':\n                            var $128 = (_a$pred$8 => {\n                                var $129 = _c$4;\n                                return $129;\n                            });\n                            var $121 = $128;\n                            break;\n                    };\n                    var $121 = $121($119);\n                    return $121;\n                });\n                var $107 = $120;\n                break;\n            case 'Word.e':\n                var $130 = (_b$5 => {\n                    var $131 = _c$4;\n                    return $131;\n                });\n                var $107 = $130;\n                break;\n        };\n        var $107 = $107(_b$3);\n        return $107;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $132 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $132;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$gte$(_a$2, _b$3) {\n        var $133 = Cmp$as_gte$(Word$cmp$(_a$2, _b$3));\n        return $133;\n    };\n    const Word$gte = x0 => x1 => Word$gte$(x0, x1);\n    const U16$gte = a0 => a1 => (a0 >= a1);\n\n    function Cmp$as_lte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.eql':\n                var $135 = Bool$true;\n                var $134 = $135;\n                break;\n            case 'Cmp.gtn':\n                var $136 = Bool$false;\n                var $134 = $136;\n                break;\n        };\n        return $134;\n    };\n    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);\n\n    function Word$lte$(_a$2, _b$3) {\n        var $137 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));\n        return $137;\n    };\n    const Word$lte = x0 => x1 => Word$lte$(x0, x1);\n    const U16$lte = a0 => a1 => (a0 <= a1);\n\n    function U16$new$(_value$1) {\n        var $138 = word_to_u16(_value$1);\n        return $138;\n    };\n    const U16$new = x0 => U16$new$(x0);\n    const Word$e = ({\n        _: 'Word.e'\n    });\n\n    function Word$(_size$1) {\n        var $139 = null;\n        return $139;\n    };\n    const Word = x0 => Word$(x0);\n\n    function Word$i$(_pred$2) {\n        var $140 = ({\n            _: 'Word.i',\n            'pred': _pred$2\n        });\n        return $140;\n    };\n    const Word$i = x0 => Word$i$(x0);\n\n    function Word$o$(_pred$2) {\n        var $141 = ({\n            _: 'Word.o',\n            'pred': _pred$2\n        });\n        return $141;\n    };\n    const Word$o = x0 => Word$o$(x0);\n\n    function Word$adder$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $143 = self.pred;\n                var $144 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $146 = self.pred;\n                            var $147 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $149 = Word$i$(Word$adder$(_a$pred$10, $146, Bool$false));\n                                    var $148 = $149;\n                                } else {\n                                    var $150 = Word$o$(Word$adder$(_a$pred$10, $146, Bool$false));\n                                    var $148 = $150;\n                                };\n                                return $148;\n                            });\n                            var $145 = $147;\n                            break;\n                        case 'Word.i':\n                            var $151 = self.pred;\n                            var $152 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $154 = Word$o$(Word$adder$(_a$pred$10, $151, Bool$true));\n                                    var $153 = $154;\n                                } else {\n                                    var $155 = Word$i$(Word$adder$(_a$pred$10, $151, Bool$false));\n                                    var $153 = $155;\n                                };\n                                return $153;\n                            });\n                            var $145 = $152;\n                            break;\n                        case 'Word.e':\n                            var $156 = (_a$pred$8 => {\n                                var $157 = Word$e;\n                                return $157;\n                            });\n                            var $145 = $156;\n                            break;\n                    };\n                    var $145 = $145($143);\n                    return $145;\n                });\n                var $142 = $144;\n                break;\n            case 'Word.i':\n                var $158 = self.pred;\n                var $159 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $161 = self.pred;\n                            var $162 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $164 = Word$o$(Word$adder$(_a$pred$10, $161, Bool$true));\n                                    var $163 = $164;\n                                } else {\n                                    var $165 = Word$i$(Word$adder$(_a$pred$10, $161, Bool$false));\n                                    var $163 = $165;\n                                };\n                                return $163;\n                            });\n                            var $160 = $162;\n                            break;\n                        case 'Word.i':\n                            var $166 = self.pred;\n                            var $167 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $169 = Word$i$(Word$adder$(_a$pred$10, $166, Bool$true));\n                                    var $168 = $169;\n                                } else {\n                                    var $170 = Word$o$(Word$adder$(_a$pred$10, $166, Bool$true));\n                                    var $168 = $170;\n                                };\n                                return $168;\n                            });\n                            var $160 = $167;\n                            break;\n                        case 'Word.e':\n                            var $171 = (_a$pred$8 => {\n                                var $172 = Word$e;\n                                return $172;\n                            });\n                            var $160 = $171;\n                            break;\n                    };\n                    var $160 = $160($158);\n                    return $160;\n                });\n                var $142 = $159;\n                break;\n            case 'Word.e':\n                var $173 = (_b$5 => {\n                    var $174 = Word$e;\n                    return $174;\n                });\n                var $142 = $173;\n                break;\n        };\n        var $142 = $142(_b$3);\n        return $142;\n    };\n    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);\n\n    function Word$add$(_a$2, _b$3) {\n        var $175 = Word$adder$(_a$2, _b$3, Bool$false);\n        return $175;\n    };\n    const Word$add = x0 => x1 => Word$add$(x0, x1);\n    const U16$add = a0 => a1 => ((a0 + a1) & 0xFFFF);\n\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _f$3, _x$4]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [_n$2, _f$3, _x$4];\n        while (true) {\n            let [_n$2, _f$3, _x$4] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $176 = _x$4;\n                    return $176;\n                } else {\n                    var $177 = (self - 1n);\n                    var $178 = Nat$apply$($177, _f$3, _f$3(_x$4));\n                    return $178;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $180 = self.pred;\n                var $181 = Word$i$($180);\n                var $179 = $181;\n                break;\n            case 'Word.i':\n                var $182 = self.pred;\n                var $183 = Word$o$(Word$inc$($182));\n                var $179 = $183;\n                break;\n            case 'Word.e':\n                var $184 = Word$e;\n                var $179 = $184;\n                break;\n        };\n        return $179;\n    };\n    const Word$inc = x0 => Word$inc$(x0);\n\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $186 = Word$e;\n            var $185 = $186;\n        } else {\n            var $187 = (self - 1n);\n            var $188 = Word$o$(Word$zero$($187));\n            var $185 = $188;\n        };\n        return $185;\n    };\n    const Word$zero = x0 => Word$zero$(x0);\n\n    function Nat$to_word$(_size$1, _n$2) {\n        var $189 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));\n        return $189;\n    };\n    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);\n    const Nat$to_u16 = a0 => (Number(a0) & 0xFFFF);\n\n    function Char$to_lower$(_char$1) {\n        var self = ((_char$1 >= 65) && (_char$1 <= 90));\n        if (self) {\n            var $191 = ((_char$1 + 32) & 0xFFFF);\n            var $190 = $191;\n        } else {\n            var $192 = _char$1;\n            var $190 = $192;\n        };\n        return $190;\n    };\n    const Char$to_lower = x0 => Char$to_lower$(x0);\n\n    function String$to_lower$(_str$1) {\n        var $193 = String$map$(Char$to_lower, _str$1);\n        return $193;\n    };\n    const String$to_lower = x0 => String$to_lower$(x0);\n\n    function IO$ask$(_query$2, _param$3, _then$4) {\n        var $194 = ({\n            _: 'IO.ask',\n            'query': _query$2,\n            'param': _param$3,\n            'then': _then$4\n        });\n        return $194;\n    };\n    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);\n\n    function IO$bind$(_a$3, _f$4) {\n        var self = _a$3;\n        switch (self._) {\n            case 'IO.end':\n                var $196 = self.value;\n                var $197 = _f$4($196);\n                var $195 = $197;\n                break;\n            case 'IO.ask':\n                var $198 = self.query;\n                var $199 = self.param;\n                var $200 = self.then;\n                var $201 = IO$ask$($198, $199, (_x$8 => {\n                    var $202 = IO$bind$($200(_x$8), _f$4);\n                    return $202;\n                }));\n                var $195 = $201;\n                break;\n        };\n        return $195;\n    };\n    const IO$bind = x0 => x1 => IO$bind$(x0, x1);\n\n    function IO$end$(_value$2) {\n        var $203 = ({\n            _: 'IO.end',\n            'value': _value$2\n        });\n        return $203;\n    };\n    const IO$end = x0 => IO$end$(x0);\n\n    function IO$monad$(_new$2) {\n        var $204 = _new$2(IO$bind)(IO$end);\n        return $204;\n    };\n    const IO$monad = x0 => IO$monad$(x0);\n\n    function App$set_local$(_value$2) {\n        var $205 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n            var $206 = _m$pure$4;\n            return $206;\n        }))(Maybe$some$(_value$2));\n        return $205;\n    };\n    const App$set_local = x0 => App$set_local$(x0);\n    const App$pass = IO$monad$((_m$bind$2 => _m$pure$3 => {\n        var $207 = _m$pure$3;\n        return $207;\n    }))(Maybe$none);\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $209 = Bool$false;\n                var $208 = $209;\n                break;\n            case 'Cmp.eql':\n                var $210 = Bool$true;\n                var $208 = $210;\n                break;\n        };\n        return $208;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $211 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $211;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n    const U16$eql = a0 => a1 => (a0 === a1);\n    const String$eql = a0 => a1 => (a0 === a1);\n\n    function Parser$State$new$(_err$1, _nam$2, _ini$3, _idx$4, _str$5) {\n        var $212 = ({\n            _: 'Parser.State.new',\n            'err': _err$1,\n            'nam': _nam$2,\n            'ini': _ini$3,\n            'idx': _idx$4,\n            'str': _str$5\n        });\n        return $212;\n    };\n    const Parser$State$new = x0 => x1 => x2 => x3 => x4 => Parser$State$new$(x0, x1, x2, x3, x4);\n\n    function Parser$run$(_parser$2, _code$3) {\n        var self = _parser$2(Parser$State$new$(Maybe$none, \"\", 0n, 0n, _code$3));\n        switch (self._) {\n            case 'Parser.Reply.value':\n                var $214 = self.val;\n                var $215 = Maybe$some$($214);\n                var $213 = $215;\n                break;\n            case 'Parser.Reply.error':\n                var $216 = Maybe$none;\n                var $213 = $216;\n                break;\n        };\n        return $213;\n    };\n    const Parser$run = x0 => x1 => Parser$run$(x0, x1);\n\n    function Parser$Reply$(_V$1) {\n        var $217 = null;\n        return $217;\n    };\n    const Parser$Reply = x0 => Parser$Reply$(x0);\n\n    function List$(_A$1) {\n        var $218 = null;\n        return $218;\n    };\n    const List = x0 => List$(x0);\n\n    function Parser$Reply$error$(_err$2) {\n        var $219 = ({\n            _: 'Parser.Reply.error',\n            'err': _err$2\n        });\n        return $219;\n    };\n    const Parser$Reply$error = x0 => Parser$Reply$error$(x0);\n    const Nat$gtn = a0 => a1 => (a0 > a1);\n\n    function Parser$Error$combine$(_a$1, _b$2) {\n        var self = _a$1;\n        switch (self._) {\n            case 'Parser.Error.new':\n                var $221 = self.idx;\n                var self = _b$2;\n                switch (self._) {\n                    case 'Parser.Error.new':\n                        var $223 = self.idx;\n                        var self = ($221 > $223);\n                        if (self) {\n                            var $225 = _a$1;\n                            var $224 = $225;\n                        } else {\n                            var $226 = _b$2;\n                            var $224 = $226;\n                        };\n                        var $222 = $224;\n                        break;\n                };\n                var $220 = $222;\n                break;\n        };\n        return $220;\n    };\n    const Parser$Error$combine = x0 => x1 => Parser$Error$combine$(x0, x1);\n\n    function Parser$Error$maybe_combine$(_a$1, _b$2) {\n        var self = _a$1;\n        switch (self._) {\n            case 'Maybe.some':\n                var $228 = self.value;\n                var self = _b$2;\n                switch (self._) {\n                    case 'Maybe.some':\n                        var $230 = self.value;\n                        var $231 = Maybe$some$(Parser$Error$combine$($228, $230));\n                        var $229 = $231;\n                        break;\n                    case 'Maybe.none':\n                        var $232 = _a$1;\n                        var $229 = $232;\n                        break;\n                };\n                var $227 = $229;\n                break;\n            case 'Maybe.none':\n                var self = _b$2;\n                switch (self._) {\n                    case 'Maybe.none':\n                        var $234 = Maybe$none;\n                        var $233 = $234;\n                        break;\n                    case 'Maybe.some':\n                        var $235 = _b$2;\n                        var $233 = $235;\n                        break;\n                };\n                var $227 = $233;\n                break;\n        };\n        return $227;\n    };\n    const Parser$Error$maybe_combine = x0 => x1 => Parser$Error$maybe_combine$(x0, x1);\n\n    function Parser$Reply$value$(_pst$2, _val$3) {\n        var $236 = ({\n            _: 'Parser.Reply.value',\n            'pst': _pst$2,\n            'val': _val$3\n        });\n        return $236;\n    };\n    const Parser$Reply$value = x0 => x1 => Parser$Reply$value$(x0, x1);\n\n    function Parser$many$go$(_parse$2, _values$3, _pst$4) {\n        var Parser$many$go$ = (_parse$2, _values$3, _pst$4) => ({\n            ctr: 'TCO',\n            arg: [_parse$2, _values$3, _pst$4]\n        });\n        var Parser$many$go = _parse$2 => _values$3 => _pst$4 => Parser$many$go$(_parse$2, _values$3, _pst$4);\n        var arg = [_parse$2, _values$3, _pst$4];\n        while (true) {\n            let [_parse$2, _values$3, _pst$4] = arg;\n            var R = (() => {\n                var self = _pst$4;\n                switch (self._) {\n                    case 'Parser.State.new':\n                        var self = _parse$2(_pst$4);\n                        switch (self._) {\n                            case 'Parser.Reply.value':\n                                var $238 = self.pst;\n                                var $239 = self.val;\n                                var $240 = Parser$many$go$(_parse$2, (_xs$12 => {\n                                    var $241 = _values$3(List$cons$($239, _xs$12));\n                                    return $241;\n                                }), $238);\n                                var $237 = $240;\n                                break;\n                            case 'Parser.Reply.error':\n                                var $242 = Parser$Reply$value$(_pst$4, _values$3(List$nil));\n                                var $237 = $242;\n                                break;\n                        };\n                        return $237;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Parser$many$go = x0 => x1 => x2 => Parser$many$go$(x0, x1, x2);\n\n    function Parser$many$(_parser$2) {\n        var $243 = Parser$many$go(_parser$2)((_x$3 => {\n            var $244 = _x$3;\n            return $244;\n        }));\n        return $243;\n    };\n    const Parser$many = x0 => Parser$many$(x0);\n\n    function Parser$many1$(_parser$2, _pst$3) {\n        var self = _pst$3;\n        switch (self._) {\n            case 'Parser.State.new':\n                var $246 = self.err;\n                var _reply$9 = _parser$2(_pst$3);\n                var self = _reply$9;\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $248 = self.err;\n                        var self = $246;\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $250 = self.value;\n                                var $251 = Parser$Reply$error$(Parser$Error$combine$($250, $248));\n                                var $249 = $251;\n                                break;\n                            case 'Maybe.none':\n                                var $252 = Parser$Reply$error$($248);\n                                var $249 = $252;\n                                break;\n                        };\n                        var $247 = $249;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $253 = self.pst;\n                        var $254 = self.val;\n                        var self = $253;\n                        switch (self._) {\n                            case 'Parser.State.new':\n                                var $256 = self.err;\n                                var $257 = self.nam;\n                                var $258 = self.ini;\n                                var $259 = self.idx;\n                                var $260 = self.str;\n                                var _reply$pst$17 = Parser$State$new$(Parser$Error$maybe_combine$($246, $256), $257, $258, $259, $260);\n                                var self = _reply$pst$17;\n                                switch (self._) {\n                                    case 'Parser.State.new':\n                                        var $262 = self.err;\n                                        var _reply$23 = Parser$many$(_parser$2)(_reply$pst$17);\n                                        var self = _reply$23;\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $264 = self.err;\n                                                var self = $262;\n                                                switch (self._) {\n                                                    case 'Maybe.some':\n                                                        var $266 = self.value;\n                                                        var $267 = Parser$Reply$error$(Parser$Error$combine$($266, $264));\n                                                        var $265 = $267;\n                                                        break;\n                                                    case 'Maybe.none':\n                                                        var $268 = Parser$Reply$error$($264);\n                                                        var $265 = $268;\n                                                        break;\n                                                };\n                                                var $263 = $265;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $269 = self.pst;\n                                                var $270 = self.val;\n                                                var self = $269;\n                                                switch (self._) {\n                                                    case 'Parser.State.new':\n                                                        var $272 = self.err;\n                                                        var $273 = self.nam;\n                                                        var $274 = self.ini;\n                                                        var $275 = self.idx;\n                                                        var $276 = self.str;\n                                                        var _reply$pst$31 = Parser$State$new$(Parser$Error$maybe_combine$($262, $272), $273, $274, $275, $276);\n                                                        var $277 = Parser$Reply$value$(_reply$pst$31, List$cons$($254, $270));\n                                                        var $271 = $277;\n                                                        break;\n                                                };\n                                                var $263 = $271;\n                                                break;\n                                        };\n                                        var $261 = $263;\n                                        break;\n                                };\n                                var $255 = $261;\n                                break;\n                        };\n                        var $247 = $255;\n                        break;\n                };\n                var $245 = $247;\n                break;\n        };\n        return $245;\n    };\n    const Parser$many1 = x0 => x1 => Parser$many1$(x0, x1);\n\n    function Parser$Error$new$(_nam$1, _ini$2, _idx$3, _msg$4) {\n        var $278 = ({\n            _: 'Parser.Error.new',\n            'nam': _nam$1,\n            'ini': _ini$2,\n            'idx': _idx$3,\n            'msg': _msg$4\n        });\n        return $278;\n    };\n    const Parser$Error$new = x0 => x1 => x2 => x3 => Parser$Error$new$(x0, x1, x2, x3);\n\n    function Parser$Reply$fail$(_nam$2, _ini$3, _idx$4, _msg$5) {\n        var $279 = Parser$Reply$error$(Parser$Error$new$(_nam$2, _ini$3, _idx$4, _msg$5));\n        return $279;\n    };\n    const Parser$Reply$fail = x0 => x1 => x2 => x3 => Parser$Reply$fail$(x0, x1, x2, x3);\n\n    function Parser$digit$(_pst$1) {\n        var self = _pst$1;\n        switch (self._) {\n            case 'Parser.State.new':\n                var $281 = self.err;\n                var $282 = self.nam;\n                var $283 = self.ini;\n                var $284 = self.idx;\n                var $285 = self.str;\n                var self = $285;\n                if (self.length === 0) {\n                    var $287 = Parser$Reply$fail$($282, $283, $284, \"Not a digit.\");\n                    var $286 = $287;\n                } else {\n                    var $288 = self.charCodeAt(0);\n                    var $289 = self.slice(1);\n                    var _pst$9 = Parser$State$new$($281, $282, $283, Nat$succ$($284), $289);\n                    var self = ($288 === 48);\n                    if (self) {\n                        var $291 = Parser$Reply$value$(_pst$9, 0n);\n                        var $290 = $291;\n                    } else {\n                        var self = ($288 === 49);\n                        if (self) {\n                            var $293 = Parser$Reply$value$(_pst$9, 1n);\n                            var $292 = $293;\n                        } else {\n                            var self = ($288 === 50);\n                            if (self) {\n                                var $295 = Parser$Reply$value$(_pst$9, 2n);\n                                var $294 = $295;\n                            } else {\n                                var self = ($288 === 51);\n                                if (self) {\n                                    var $297 = Parser$Reply$value$(_pst$9, 3n);\n                                    var $296 = $297;\n                                } else {\n                                    var self = ($288 === 52);\n                                    if (self) {\n                                        var $299 = Parser$Reply$value$(_pst$9, 4n);\n                                        var $298 = $299;\n                                    } else {\n                                        var self = ($288 === 53);\n                                        if (self) {\n                                            var $301 = Parser$Reply$value$(_pst$9, 5n);\n                                            var $300 = $301;\n                                        } else {\n                                            var self = ($288 === 54);\n                                            if (self) {\n                                                var $303 = Parser$Reply$value$(_pst$9, 6n);\n                                                var $302 = $303;\n                                            } else {\n                                                var self = ($288 === 55);\n                                                if (self) {\n                                                    var $305 = Parser$Reply$value$(_pst$9, 7n);\n                                                    var $304 = $305;\n                                                } else {\n                                                    var self = ($288 === 56);\n                                                    if (self) {\n                                                        var $307 = Parser$Reply$value$(_pst$9, 8n);\n                                                        var $306 = $307;\n                                                    } else {\n                                                        var self = ($288 === 57);\n                                                        if (self) {\n                                                            var $309 = Parser$Reply$value$(_pst$9, 9n);\n                                                            var $308 = $309;\n                                                        } else {\n                                                            var $310 = Parser$Reply$fail$($282, $283, $284, \"Not a digit.\");\n                                                            var $308 = $310;\n                                                        };\n                                                        var $306 = $308;\n                                                    };\n                                                    var $304 = $306;\n                                                };\n                                                var $302 = $304;\n                                            };\n                                            var $300 = $302;\n                                        };\n                                        var $298 = $300;\n                                    };\n                                    var $296 = $298;\n                                };\n                                var $294 = $296;\n                            };\n                            var $292 = $294;\n                        };\n                        var $290 = $292;\n                    };\n                    var $286 = $290;\n                };\n                var $280 = $286;\n                break;\n        };\n        return $280;\n    };\n    const Parser$digit = x0 => Parser$digit$(x0);\n    const Nat$add = a0 => a1 => (a0 + a1);\n    const Nat$mul = a0 => a1 => (a0 * a1);\n\n    function Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4) {\n        var Nat$from_base$go$ = (_b$1, _ds$2, _p$3, _res$4) => ({\n            ctr: 'TCO',\n            arg: [_b$1, _ds$2, _p$3, _res$4]\n        });\n        var Nat$from_base$go = _b$1 => _ds$2 => _p$3 => _res$4 => Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4);\n        var arg = [_b$1, _ds$2, _p$3, _res$4];\n        while (true) {\n            let [_b$1, _ds$2, _p$3, _res$4] = arg;\n            var R = (() => {\n                var self = _ds$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $311 = self.head;\n                        var $312 = self.tail;\n                        var $313 = Nat$from_base$go$(_b$1, $312, (_b$1 * _p$3), (($311 * _p$3) + _res$4));\n                        return $313;\n                    case 'List.nil':\n                        var $314 = _res$4;\n                        return $314;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$from_base$go = x0 => x1 => x2 => x3 => Nat$from_base$go$(x0, x1, x2, x3);\n\n    function List$reverse$go$(_xs$2, _res$3) {\n        var List$reverse$go$ = (_xs$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_xs$2, _res$3]\n        });\n        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);\n        var arg = [_xs$2, _res$3];\n        while (true) {\n            let [_xs$2, _res$3] = arg;\n            var R = (() => {\n                var self = _xs$2;\n                switch (self._) {\n                    case 'List.cons':\n                        var $315 = self.head;\n                        var $316 = self.tail;\n                        var $317 = List$reverse$go$($316, List$cons$($315, _res$3));\n                        return $317;\n                    case 'List.nil':\n                        var $318 = _res$3;\n                        return $318;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);\n\n    function List$reverse$(_xs$2) {\n        var $319 = List$reverse$go$(_xs$2, List$nil);\n        return $319;\n    };\n    const List$reverse = x0 => List$reverse$(x0);\n\n    function Nat$from_base$(_base$1, _ds$2) {\n        var $320 = Nat$from_base$go$(_base$1, List$reverse$(_ds$2), 1n, 0n);\n        return $320;\n    };\n    const Nat$from_base = x0 => x1 => Nat$from_base$(x0, x1);\n\n    function Parser$nat$(_pst$1) {\n        var self = _pst$1;\n        switch (self._) {\n            case 'Parser.State.new':\n                var $322 = self.err;\n                var _reply$7 = Parser$many1$(Parser$digit, _pst$1);\n                var self = _reply$7;\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $324 = self.err;\n                        var self = $322;\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $326 = self.value;\n                                var $327 = Parser$Reply$error$(Parser$Error$combine$($326, $324));\n                                var $325 = $327;\n                                break;\n                            case 'Maybe.none':\n                                var $328 = Parser$Reply$error$($324);\n                                var $325 = $328;\n                                break;\n                        };\n                        var $323 = $325;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $329 = self.pst;\n                        var $330 = self.val;\n                        var self = $329;\n                        switch (self._) {\n                            case 'Parser.State.new':\n                                var $332 = self.err;\n                                var $333 = self.nam;\n                                var $334 = self.ini;\n                                var $335 = self.idx;\n                                var $336 = self.str;\n                                var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($322, $332), $333, $334, $335, $336);\n                                var $337 = Parser$Reply$value$(_reply$pst$15, Nat$from_base$(10n, $330));\n                                var $331 = $337;\n                                break;\n                        };\n                        var $323 = $331;\n                        break;\n                };\n                var $321 = $323;\n                break;\n        };\n        return $321;\n    };\n    const Parser$nat = x0 => Parser$nat$(x0);\n    const Nat$read = a0 => (BigInt(a0));\n    const IO$get_time = IO$ask$(\"get_time\", \"\", (_time$1 => {\n        var $338 = IO$end$((BigInt(_time$1)));\n        return $338;\n    }));\n\n    function Nat$mod$go$(_n$1, _m$2, _r$3) {\n        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _r$3]\n        });\n        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);\n        var arg = [_n$1, _m$2, _r$3];\n        while (true) {\n            let [_n$1, _m$2, _r$3] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $339 = Nat$mod$go$(_n$1, _r$3, _m$2);\n                    return $339;\n                } else {\n                    var $340 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $342 = _r$3;\n                        var $341 = $342;\n                    } else {\n                        var $343 = (self - 1n);\n                        var $344 = Nat$mod$go$($343, $340, Nat$succ$(_r$3));\n                        var $341 = $344;\n                    };\n                    return $341;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);\n    const Nat$mod = a0 => a1 => (a0 % a1);\n\n    function Nat$random$(_seed$1) {\n        var _m$2 = 1664525n;\n        var _i$3 = 1013904223n;\n        var _q$4 = 4294967296n;\n        var $345 = (((_seed$1 * _m$2) + _i$3) % _q$4);\n        return $345;\n    };\n    const Nat$random = x0 => Nat$random$(x0);\n\n    function IO$random$(_a$1) {\n        var $346 = IO$monad$((_m$bind$2 => _m$pure$3 => {\n            var $347 = _m$bind$2;\n            return $347;\n        }))(IO$get_time)((_seed$2 => {\n            var _seed$3 = Nat$random$(_seed$2);\n            var $348 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n                var $349 = _m$pure$5;\n                return $349;\n            }))((_seed$3 % _a$1));\n            return $348;\n        }));\n        return $346;\n    };\n    const IO$random = x0 => IO$random$(x0);\n\n    function List$fold$(_list$2, _nil$4, _cons$5) {\n        var self = _list$2;\n        switch (self._) {\n            case 'List.cons':\n                var $351 = self.head;\n                var $352 = self.tail;\n                var $353 = _cons$5($351)(List$fold$($352, _nil$4, _cons$5));\n                var $350 = $353;\n                break;\n            case 'List.nil':\n                var $354 = _nil$4;\n                var $350 = $354;\n                break;\n        };\n        return $350;\n    };\n    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);\n\n    function Either$(_A$1, _B$2) {\n        var $355 = null;\n        return $355;\n    };\n    const Either = x0 => x1 => Either$(x0, x1);\n\n    function Either$left$(_value$3) {\n        var $356 = ({\n            _: 'Either.left',\n            'value': _value$3\n        });\n        return $356;\n    };\n    const Either$left = x0 => Either$left$(x0);\n\n    function Either$right$(_value$3) {\n        var $357 = ({\n            _: 'Either.right',\n            'value': _value$3\n        });\n        return $357;\n    };\n    const Either$right = x0 => Either$right$(x0);\n\n    function Nat$sub_rem$(_n$1, _m$2) {\n        var Nat$sub_rem$ = (_n$1, _m$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2]\n        });\n        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);\n        var arg = [_n$1, _m$2];\n        while (true) {\n            let [_n$1, _m$2] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $358 = Either$left$(_n$1);\n                    return $358;\n                } else {\n                    var $359 = (self - 1n);\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $361 = Either$right$(Nat$succ$($359));\n                        var $360 = $361;\n                    } else {\n                        var $362 = (self - 1n);\n                        var $363 = Nat$sub_rem$($362, $359);\n                        var $360 = $363;\n                    };\n                    return $360;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);\n\n    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {\n        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _m$2, _d$3]\n        });\n        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);\n        var arg = [_n$1, _m$2, _d$3];\n        while (true) {\n            let [_n$1, _m$2, _d$3] = arg;\n            var R = (() => {\n                var self = Nat$sub_rem$(_n$1, _m$2);\n                switch (self._) {\n                    case 'Either.left':\n                        var $364 = self.value;\n                        var $365 = Nat$div_mod$go$($364, _m$2, Nat$succ$(_d$3));\n                        return $365;\n                    case 'Either.right':\n                        var $366 = Pair$new$(_d$3, _n$1);\n                        return $366;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);\n    const Nat$div_mod = a0 => a1 => (({\n        _: 'Pair.new',\n        'fst': a0 / a1,\n        'snd': a0 % a1\n    }));\n\n    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {\n        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({\n            ctr: 'TCO',\n            arg: [_base$1, _nat$2, _res$3]\n        });\n        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);\n        var arg = [_base$1, _nat$2, _res$3];\n        while (true) {\n            let [_base$1, _nat$2, _res$3] = arg;\n            var R = (() => {\n                var self = (({\n                    _: 'Pair.new',\n                    'fst': _nat$2 / _base$1,\n                    'snd': _nat$2 % _base$1\n                }));\n                switch (self._) {\n                    case 'Pair.new':\n                        var $367 = self.fst;\n                        var $368 = self.snd;\n                        var self = $367;\n                        if (self === 0n) {\n                            var $370 = List$cons$($368, _res$3);\n                            var $369 = $370;\n                        } else {\n                            var $371 = (self - 1n);\n                            var $372 = Nat$to_base$go$(_base$1, $367, List$cons$($368, _res$3));\n                            var $369 = $372;\n                        };\n                        return $369;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);\n\n    function Nat$to_base$(_base$1, _nat$2) {\n        var $373 = Nat$to_base$go$(_base$1, _nat$2, List$nil);\n        return $373;\n    };\n    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);\n    const Nat$lte = a0 => a1 => (a0 <= a1);\n\n    function List$at$(_index$2, _list$3) {\n        var List$at$ = (_index$2, _list$3) => ({\n            ctr: 'TCO',\n            arg: [_index$2, _list$3]\n        });\n        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);\n        var arg = [_index$2, _list$3];\n        while (true) {\n            let [_index$2, _list$3] = arg;\n            var R = (() => {\n                var self = _list$3;\n                switch (self._) {\n                    case 'List.cons':\n                        var $374 = self.head;\n                        var $375 = self.tail;\n                        var self = _index$2;\n                        if (self === 0n) {\n                            var $377 = Maybe$some$($374);\n                            var $376 = $377;\n                        } else {\n                            var $378 = (self - 1n);\n                            var $379 = List$at$($378, $375);\n                            var $376 = $379;\n                        };\n                        return $376;\n                    case 'List.nil':\n                        var $380 = Maybe$none;\n                        return $380;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const List$at = x0 => x1 => List$at$(x0, x1);\n\n    function Nat$show_digit$(_base$1, _n$2) {\n        var _m$3 = (_n$2 % _base$1);\n        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n        var self = ((_base$1 > 0n) && (_base$1 <= 64n));\n        if (self) {\n            var self = List$at$(_m$3, _base64$4);\n            switch (self._) {\n                case 'Maybe.some':\n                    var $383 = self.value;\n                    var $384 = $383;\n                    var $382 = $384;\n                    break;\n                case 'Maybe.none':\n                    var $385 = 35;\n                    var $382 = $385;\n                    break;\n            };\n            var $381 = $382;\n        } else {\n            var $386 = 35;\n            var $381 = $386;\n        };\n        return $381;\n    };\n    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);\n\n    function Nat$to_string_base$(_base$1, _nat$2) {\n        var $387 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {\n            var $388 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);\n            return $388;\n        }));\n        return $387;\n    };\n    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);\n\n    function Nat$show$(_n$1) {\n        var $389 = Nat$to_string_base$(10n, _n$1);\n        return $389;\n    };\n    const Nat$show = x0 => Nat$show$(x0);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function String$drop$(_n$1, _xs$2) {\n        var String$drop$ = (_n$1, _xs$2) => ({\n            ctr: 'TCO',\n            arg: [_n$1, _xs$2]\n        });\n        var String$drop = _n$1 => _xs$2 => String$drop$(_n$1, _xs$2);\n        var arg = [_n$1, _xs$2];\n        while (true) {\n            let [_n$1, _xs$2] = arg;\n            var R = (() => {\n                var self = _n$1;\n                if (self === 0n) {\n                    var $390 = _xs$2;\n                    return $390;\n                } else {\n                    var $391 = (self - 1n);\n                    var self = _xs$2;\n                    if (self.length === 0) {\n                        var $393 = String$nil;\n                        var $392 = $393;\n                    } else {\n                        var $394 = self.charCodeAt(0);\n                        var $395 = self.slice(1);\n                        var $396 = String$drop$($391, $395);\n                        var $392 = $396;\n                    };\n                    return $392;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$drop = x0 => x1 => String$drop$(x0, x1);\n    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);\n\n    function String$length$go$(_xs$1, _n$2) {\n        var String$length$go$ = (_xs$1, _n$2) => ({\n            ctr: 'TCO',\n            arg: [_xs$1, _n$2]\n        });\n        var String$length$go = _xs$1 => _n$2 => String$length$go$(_xs$1, _n$2);\n        var arg = [_xs$1, _n$2];\n        while (true) {\n            let [_xs$1, _n$2] = arg;\n            var R = (() => {\n                var self = _xs$1;\n                if (self.length === 0) {\n                    var $397 = _n$2;\n                    return $397;\n                } else {\n                    var $398 = self.charCodeAt(0);\n                    var $399 = self.slice(1);\n                    var $400 = String$length$go$($399, Nat$succ$(_n$2));\n                    return $400;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$length$go = x0 => x1 => String$length$go$(x0, x1);\n\n    function String$length$(_xs$1) {\n        var $401 = String$length$go$(_xs$1, 0n);\n        return $401;\n    };\n    const String$length = x0 => String$length$(x0);\n    const Unit$new = null;\n\n    function IO$do$(_call$1, _param$2) {\n        var $402 = IO$ask$(_call$1, _param$2, (_answer$3 => {\n            var $403 = IO$end$(Unit$new);\n            return $403;\n        }));\n        return $402;\n    };\n    const IO$do = x0 => x1 => IO$do$(x0, x1);\n\n    function App$do$(_call$2, _param$3) {\n        var $404 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n            var $405 = _m$bind$4;\n            return $405;\n        }))(IO$do$(_call$2, _param$3))((_$4 => {\n            var $406 = App$pass;\n            return $406;\n        }));\n        return $404;\n    };\n    const App$do = x0 => x1 => App$do$(x0, x1);\n\n    function App$watch$(_room$2) {\n        var $407 = App$do$(\"watch\", _room$2);\n        return $407;\n    };\n    const App$watch = x0 => App$watch$(x0);\n\n    function App$new_post$(_room$2, _data$3) {\n        var $408 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n            var $409 = _m$bind$4;\n            return $409;\n        }))(App$do$(\"post\", (_room$2 + (\";\" + _data$3))))((_$4 => {\n            var $410 = App$pass;\n            return $410;\n        }));\n        return $408;\n    };\n    const App$new_post = x0 => x1 => App$new_post$(x0, x1);\n\n    function Bits$inc$(_a$1) {\n        var self = _a$1;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $412 = self.slice(0, -1);\n                var $413 = ($412 + '1');\n                var $411 = $413;\n                break;\n            case 'i':\n                var $414 = self.slice(0, -1);\n                var $415 = (Bits$inc$($414) + '0');\n                var $411 = $415;\n                break;\n            case 'e':\n                var $416 = (Bits$e + '1');\n                var $411 = $416;\n                break;\n        };\n        return $411;\n    };\n    const Bits$inc = x0 => Bits$inc$(x0);\n    const Nat$to_bits = a0 => (nat_to_bits(a0));\n\n    function U8$to_bits$(_a$1) {\n        var self = _a$1;\n        switch ('u8') {\n            case 'u8':\n                var $418 = u8_to_word(self);\n                var $419 = Word$to_bits$($418);\n                var $417 = $419;\n                break;\n        };\n        return $417;\n    };\n    const U8$to_bits = x0 => U8$to_bits$(x0);\n\n    function List$zip$(_as$3, _bs$4) {\n        var self = _as$3;\n        switch (self._) {\n            case 'List.cons':\n                var $421 = self.head;\n                var $422 = self.tail;\n                var self = _bs$4;\n                switch (self._) {\n                    case 'List.cons':\n                        var $424 = self.head;\n                        var $425 = self.tail;\n                        var $426 = List$cons$(Pair$new$($421, $424), List$zip$($422, $425));\n                        var $423 = $426;\n                        break;\n                    case 'List.nil':\n                        var $427 = List$nil;\n                        var $423 = $427;\n                        break;\n                };\n                var $420 = $423;\n                break;\n            case 'List.nil':\n                var $428 = List$nil;\n                var $420 = $428;\n                break;\n        };\n        return $420;\n    };\n    const List$zip = x0 => x1 => List$zip$(x0, x1);\n\n    function List$concat$(_as$2, _bs$3) {\n        var self = _as$2;\n        switch (self._) {\n            case 'List.cons':\n                var $430 = self.head;\n                var $431 = self.tail;\n                var $432 = List$cons$($430, List$concat$($431, _bs$3));\n                var $429 = $432;\n                break;\n            case 'List.nil':\n                var $433 = _bs$3;\n                var $429 = $433;\n                break;\n        };\n        return $429;\n    };\n    const List$concat = x0 => x1 => List$concat$(x0, x1);\n\n    function U8$new$(_value$1) {\n        var $434 = word_to_u8(_value$1);\n        return $434;\n    };\n    const U8$new = x0 => U8$new$(x0);\n    const Nat$to_u8 = a0 => (Number(a0) & 0xFF);\n    const App$Kaelin$Event$Code$action = List$cons$(2, List$nil);\n\n    function String$repeat$(_xs$1, _n$2) {\n        var self = _n$2;\n        if (self === 0n) {\n            var $436 = String$nil;\n            var $435 = $436;\n        } else {\n            var $437 = (self - 1n);\n            var $438 = (_xs$1 + String$repeat$(_xs$1, $437));\n            var $435 = $438;\n        };\n        return $435;\n    };\n    const String$repeat = x0 => x1 => String$repeat$(x0, x1);\n\n    function App$Kaelin$Event$Code$Hex$set_min_length$(_min$1, _hex$2) {\n        var _dif$3 = (_min$1 - String$length$(_hex$2) <= 0n ? 0n : _min$1 - String$length$(_hex$2));\n        var $439 = (_hex$2 + String$repeat$(\"0\", _dif$3));\n        return $439;\n    };\n    const App$Kaelin$Event$Code$Hex$set_min_length = x0 => x1 => App$Kaelin$Event$Code$Hex$set_min_length$(x0, x1);\n\n    function List$foldr$(_b$3, _f$4, _xs$5) {\n        var $440 = List$fold$(_xs$5, _b$3, _f$4);\n        return $440;\n    };\n    const List$foldr = x0 => x1 => x2 => List$foldr$(x0, x1, x2);\n    const Nat$ltn = a0 => a1 => (a0 < a1);\n\n    function App$Kaelin$Event$Code$Hex$format_hex$(_min$1, _hex$2) {\n        var _dif$3 = (_min$1 - String$length$(_hex$2) <= 0n ? 0n : _min$1 - String$length$(_hex$2));\n        var self = (String$length$(_hex$2) < _min$1);\n        if (self) {\n            var $442 = (String$repeat$(\"0\", _dif$3) + _hex$2);\n            var $441 = $442;\n        } else {\n            var $443 = _hex$2;\n            var $441 = $443;\n        };\n        return $441;\n    };\n    const App$Kaelin$Event$Code$Hex$format_hex = x0 => x1 => App$Kaelin$Event$Code$Hex$format_hex$(x0, x1);\n    const Nat$eql = a0 => a1 => (a0 === a1);\n\n    function Bits$to_nat$(_b$1) {\n        var self = _b$1;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $445 = self.slice(0, -1);\n                var $446 = (2n * Bits$to_nat$($445));\n                var $444 = $446;\n                break;\n            case 'i':\n                var $447 = self.slice(0, -1);\n                var $448 = Nat$succ$((2n * Bits$to_nat$($447)));\n                var $444 = $448;\n                break;\n            case 'e':\n                var $449 = 0n;\n                var $444 = $449;\n                break;\n        };\n        return $444;\n    };\n    const Bits$to_nat = x0 => Bits$to_nat$(x0);\n\n    function Bits$reverse$tco$(_a$1, _r$2) {\n        var Bits$reverse$tco$ = (_a$1, _r$2) => ({\n            ctr: 'TCO',\n            arg: [_a$1, _r$2]\n        });\n        var Bits$reverse$tco = _a$1 => _r$2 => Bits$reverse$tco$(_a$1, _r$2);\n        var arg = [_a$1, _r$2];\n        while (true) {\n            let [_a$1, _r$2] = arg;\n            var R = (() => {\n                var self = _a$1;\n                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                    case 'o':\n                        var $450 = self.slice(0, -1);\n                        var $451 = Bits$reverse$tco$($450, (_r$2 + '0'));\n                        return $451;\n                    case 'i':\n                        var $452 = self.slice(0, -1);\n                        var $453 = Bits$reverse$tco$($452, (_r$2 + '1'));\n                        return $453;\n                    case 'e':\n                        var $454 = _r$2;\n                        return $454;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Bits$reverse$tco = x0 => x1 => Bits$reverse$tco$(x0, x1);\n\n    function Bits$reverse$(_a$1) {\n        var $455 = Bits$reverse$tco$(_a$1, Bits$e);\n        return $455;\n    };\n    const Bits$reverse = x0 => Bits$reverse$(x0);\n\n    function Bits$chunks_of$go$(_len$1, _bits$2, _need$3, _chunk$4) {\n        var self = _bits$2;\n        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n            case 'o':\n                var $457 = self.slice(0, -1);\n                var self = _need$3;\n                if (self === 0n) {\n                    var _head$6 = Bits$reverse$(_chunk$4);\n                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);\n                    var $459 = List$cons$(_head$6, _tail$7);\n                    var $458 = $459;\n                } else {\n                    var $460 = (self - 1n);\n                    var _chunk$7 = (_chunk$4 + '0');\n                    var $461 = Bits$chunks_of$go$(_len$1, $457, $460, _chunk$7);\n                    var $458 = $461;\n                };\n                var $456 = $458;\n                break;\n            case 'i':\n                var $462 = self.slice(0, -1);\n                var self = _need$3;\n                if (self === 0n) {\n                    var _head$6 = Bits$reverse$(_chunk$4);\n                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);\n                    var $464 = List$cons$(_head$6, _tail$7);\n                    var $463 = $464;\n                } else {\n                    var $465 = (self - 1n);\n                    var _chunk$7 = (_chunk$4 + '1');\n                    var $466 = Bits$chunks_of$go$(_len$1, $462, $465, _chunk$7);\n                    var $463 = $466;\n                };\n                var $456 = $463;\n                break;\n            case 'e':\n                var $467 = List$cons$(Bits$reverse$(_chunk$4), List$nil);\n                var $456 = $467;\n                break;\n        };\n        return $456;\n    };\n    const Bits$chunks_of$go = x0 => x1 => x2 => x3 => Bits$chunks_of$go$(x0, x1, x2, x3);\n\n    function Bits$chunks_of$(_len$1, _bits$2) {\n        var $468 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);\n        return $468;\n    };\n    const Bits$chunks_of = x0 => x1 => Bits$chunks_of$(x0, x1);\n\n    function Function$flip$(_f$4, _y$5, _x$6) {\n        var $469 = _f$4(_x$6)(_y$5);\n        return $469;\n    };\n    const Function$flip = x0 => x1 => x2 => Function$flip$(x0, x1, x2);\n\n    function Bits$to_hex_string$(_x$1) {\n        var _hex_to_string$2 = (_x$2 => {\n            var self = (Bits$to_nat$(_x$2) === 0n);\n            if (self) {\n                var $472 = \"0\";\n                var $471 = $472;\n            } else {\n                var self = (Bits$to_nat$(_x$2) === 1n);\n                if (self) {\n                    var $474 = \"1\";\n                    var $473 = $474;\n                } else {\n                    var self = (Bits$to_nat$(_x$2) === 2n);\n                    if (self) {\n                        var $476 = \"2\";\n                        var $475 = $476;\n                    } else {\n                        var self = (Bits$to_nat$(_x$2) === 3n);\n                        if (self) {\n                            var $478 = \"3\";\n                            var $477 = $478;\n                        } else {\n                            var self = (Bits$to_nat$(_x$2) === 4n);\n                            if (self) {\n                                var $480 = \"4\";\n                                var $479 = $480;\n                            } else {\n                                var self = (Bits$to_nat$(_x$2) === 5n);\n                                if (self) {\n                                    var $482 = \"5\";\n                                    var $481 = $482;\n                                } else {\n                                    var self = (Bits$to_nat$(_x$2) === 6n);\n                                    if (self) {\n                                        var $484 = \"6\";\n                                        var $483 = $484;\n                                    } else {\n                                        var self = (Bits$to_nat$(_x$2) === 7n);\n                                        if (self) {\n                                            var $486 = \"7\";\n                                            var $485 = $486;\n                                        } else {\n                                            var self = (Bits$to_nat$(_x$2) === 8n);\n                                            if (self) {\n                                                var $488 = \"8\";\n                                                var $487 = $488;\n                                            } else {\n                                                var self = (Bits$to_nat$(_x$2) === 9n);\n                                                if (self) {\n                                                    var $490 = \"9\";\n                                                    var $489 = $490;\n                                                } else {\n                                                    var self = (Bits$to_nat$(_x$2) === 10n);\n                                                    if (self) {\n                                                        var $492 = \"a\";\n                                                        var $491 = $492;\n                                                    } else {\n                                                        var self = (Bits$to_nat$(_x$2) === 11n);\n                                                        if (self) {\n                                                            var $494 = \"b\";\n                                                            var $493 = $494;\n                                                        } else {\n                                                            var self = (Bits$to_nat$(_x$2) === 12n);\n                                                            if (self) {\n                                                                var $496 = \"c\";\n                                                                var $495 = $496;\n                                                            } else {\n                                                                var self = (Bits$to_nat$(_x$2) === 13n);\n                                                                if (self) {\n                                                                    var $498 = \"d\";\n                                                                    var $497 = $498;\n                                                                } else {\n                                                                    var self = (Bits$to_nat$(_x$2) === 14n);\n                                                                    if (self) {\n                                                                        var $500 = \"e\";\n                                                                        var $499 = $500;\n                                                                    } else {\n                                                                        var self = (Bits$to_nat$(_x$2) === 15n);\n                                                                        if (self) {\n                                                                            var $502 = \"f\";\n                                                                            var $501 = $502;\n                                                                        } else {\n                                                                            var $503 = \"?\";\n                                                                            var $501 = $503;\n                                                                        };\n                                                                        var $499 = $501;\n                                                                    };\n                                                                    var $497 = $499;\n                                                                };\n                                                                var $495 = $497;\n                                                            };\n                                                            var $493 = $495;\n                                                        };\n                                                        var $491 = $493;\n                                                    };\n                                                    var $489 = $491;\n                                                };\n                                                var $487 = $489;\n                                            };\n                                            var $485 = $487;\n                                        };\n                                        var $483 = $485;\n                                    };\n                                    var $481 = $483;\n                                };\n                                var $479 = $481;\n                            };\n                            var $477 = $479;\n                        };\n                        var $475 = $477;\n                    };\n                    var $473 = $475;\n                };\n                var $471 = $473;\n            };\n            return $471;\n        });\n        var _ls$3 = Bits$chunks_of$(4n, _x$1);\n        var $470 = List$foldr$(\"\", (_x$4 => {\n            var $504 = Function$flip(String$concat)(_hex_to_string$2(_x$4));\n            return $504;\n        }), _ls$3);\n        return $470;\n    };\n    const Bits$to_hex_string = x0 => Bits$to_hex_string$(x0);\n\n    function App$Kaelin$Event$Code$Hex$append$(_hex$1, _size$2, _x$3) {\n        var _hex2$4 = App$Kaelin$Event$Code$Hex$format_hex$(_size$2, Bits$to_hex_string$(_x$3));\n        var $505 = (_hex$1 + _hex2$4);\n        return $505;\n    };\n    const App$Kaelin$Event$Code$Hex$append = x0 => x1 => x2 => App$Kaelin$Event$Code$Hex$append$(x0, x1, x2);\n\n    function Word$fold$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var self = _word$6;\n        switch (self._) {\n            case 'Word.o':\n                var $507 = self.pred;\n                var $508 = _w0$4(Word$fold$(_nil$3, _w0$4, _w1$5, $507));\n                var $506 = $508;\n                break;\n            case 'Word.i':\n                var $509 = self.pred;\n                var $510 = _w1$5(Word$fold$(_nil$3, _w0$4, _w1$5, $509));\n                var $506 = $510;\n                break;\n            case 'Word.e':\n                var $511 = _nil$3;\n                var $506 = $511;\n                break;\n        };\n        return $506;\n    };\n    const Word$fold = x0 => x1 => x2 => x3 => Word$fold$(x0, x1, x2, x3);\n\n    function Word$to_nat$(_word$2) {\n        var $512 = Word$fold$(0n, a1 => (2n * a1), (_x$4 => {\n            var $513 = Nat$succ$((2n * _x$4));\n            return $513;\n        }), _word$2);\n        return $512;\n    };\n    const Word$to_nat = x0 => Word$to_nat$(x0);\n    const U8$to_nat = a0 => (BigInt(a0));\n\n    function Pair$snd$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $515 = self.snd;\n                var $516 = $515;\n                var $514 = $516;\n                break;\n        };\n        return $514;\n    };\n    const Pair$snd = x0 => Pair$snd$(x0);\n\n    function App$Kaelin$Event$Code$generate_hex$(_xs$1) {\n        var $517 = List$foldr$(\"\", (_x$2 => _y$3 => {\n            var $518 = App$Kaelin$Event$Code$Hex$append$(_y$3, (BigInt(Pair$fst$(_x$2))), Pair$snd$(_x$2));\n            return $518;\n        }), List$reverse$(_xs$1));\n        return $517;\n    };\n    const App$Kaelin$Event$Code$generate_hex = x0 => App$Kaelin$Event$Code$generate_hex$(x0);\n\n    function generate_hex$(_xs$1, _ys$2) {\n        var _consumer$3 = List$zip$(List$concat$(App$Kaelin$Event$Code$action, _xs$1), _ys$2);\n        var $519 = (\"0x\" + App$Kaelin$Event$Code$Hex$set_min_length$(64n, App$Kaelin$Event$Code$generate_hex$(_consumer$3)));\n        return $519;\n    };\n    const generate_hex = x0 => x1 => generate_hex$(x0, x1);\n    const App$Kaelin$Event$Code$create_hero = List$cons$(2, List$nil);\n\n    function Parser$maybe$(_parse$2, _pst$3) {\n        var self = _pst$3;\n        switch (self._) {\n            case 'Parser.State.new':\n                var self = _parse$2(_pst$3);\n                switch (self._) {\n                    case 'Parser.Reply.value':\n                        var $522 = self.pst;\n                        var $523 = self.val;\n                        var $524 = Parser$Reply$value$($522, Maybe$some$($523));\n                        var $521 = $524;\n                        break;\n                    case 'Parser.Reply.error':\n                        var $525 = Parser$Reply$value$(_pst$3, Maybe$none);\n                        var $521 = $525;\n                        break;\n                };\n                var $520 = $521;\n                break;\n        };\n        return $520;\n    };\n    const Parser$maybe = x0 => x1 => Parser$maybe$(x0, x1);\n\n    function Parser$text$go$(_ini_idx$1, _ini_txt$2, _text$3, _pst$4) {\n        var Parser$text$go$ = (_ini_idx$1, _ini_txt$2, _text$3, _pst$4) => ({\n            ctr: 'TCO',\n            arg: [_ini_idx$1, _ini_txt$2, _text$3, _pst$4]\n        });\n        var Parser$text$go = _ini_idx$1 => _ini_txt$2 => _text$3 => _pst$4 => Parser$text$go$(_ini_idx$1, _ini_txt$2, _text$3, _pst$4);\n        var arg = [_ini_idx$1, _ini_txt$2, _text$3, _pst$4];\n        while (true) {\n            let [_ini_idx$1, _ini_txt$2, _text$3, _pst$4] = arg;\n            var R = (() => {\n                var self = _pst$4;\n                switch (self._) {\n                    case 'Parser.State.new':\n                        var $526 = self.err;\n                        var $527 = self.nam;\n                        var $528 = self.ini;\n                        var $529 = self.idx;\n                        var $530 = self.str;\n                        var self = _text$3;\n                        if (self.length === 0) {\n                            var $532 = Parser$Reply$value$(_pst$4, Unit$new);\n                            var $531 = $532;\n                        } else {\n                            var $533 = self.charCodeAt(0);\n                            var $534 = self.slice(1);\n                            var self = $530;\n                            if (self.length === 0) {\n                                var _error_msg$12 = (\"Expected \\'\" + (_ini_txt$2 + \"\\', found end of file.\"));\n                                var $536 = Parser$Reply$fail$($527, $528, _ini_idx$1, _error_msg$12);\n                                var $535 = $536;\n                            } else {\n                                var $537 = self.charCodeAt(0);\n                                var $538 = self.slice(1);\n                                var self = ($533 === $537);\n                                if (self) {\n                                    var _pst$14 = Parser$State$new$($526, $527, $528, Nat$succ$($529), $538);\n                                    var $540 = Parser$text$go$(_ini_idx$1, _ini_txt$2, $534, _pst$14);\n                                    var $539 = $540;\n                                } else {\n                                    var _chr$14 = String$cons$($537, String$nil);\n                                    var _err$15 = (\"Expected \\'\" + (_ini_txt$2 + (\"\\', found \\'\" + (_chr$14 + \"\\'.\"))));\n                                    var $541 = Parser$Reply$fail$($527, $528, _ini_idx$1, _err$15);\n                                    var $539 = $541;\n                                };\n                                var $535 = $539;\n                            };\n                            var $531 = $535;\n                        };\n                        return $531;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Parser$text$go = x0 => x1 => x2 => x3 => Parser$text$go$(x0, x1, x2, x3);\n\n    function Parser$text$(_text$1, _pst$2) {\n        var self = _pst$2;\n        switch (self._) {\n            case 'Parser.State.new':\n                var $543 = self.idx;\n                var self = Parser$text$go$($543, _text$1, _text$1, _pst$2);\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $545 = self.err;\n                        var $546 = Parser$Reply$error$($545);\n                        var $544 = $546;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $547 = self.pst;\n                        var $548 = self.val;\n                        var $549 = Parser$Reply$value$($547, $548);\n                        var $544 = $549;\n                        break;\n                };\n                var $542 = $544;\n                break;\n        };\n        return $542;\n    };\n    const Parser$text = x0 => x1 => Parser$text$(x0, x1);\n\n    function Parser$hex_digit$(_pst$1) {\n        var self = _pst$1;\n        switch (self._) {\n            case 'Parser.State.new':\n                var $551 = self.err;\n                var $552 = self.nam;\n                var $553 = self.ini;\n                var $554 = self.idx;\n                var $555 = self.str;\n                var self = $555;\n                if (self.length === 0) {\n                    var $557 = Parser$Reply$fail$($552, $553, $554, \"Not a digit.\");\n                    var $556 = $557;\n                } else {\n                    var $558 = self.charCodeAt(0);\n                    var $559 = self.slice(1);\n                    var _pst$9 = Parser$State$new$($551, $552, $553, Nat$succ$($554), $559);\n                    var self = ($558 === 48);\n                    if (self) {\n                        var $561 = Parser$Reply$value$(_pst$9, 0n);\n                        var $560 = $561;\n                    } else {\n                        var self = ($558 === 49);\n                        if (self) {\n                            var $563 = Parser$Reply$value$(_pst$9, 1n);\n                            var $562 = $563;\n                        } else {\n                            var self = ($558 === 50);\n                            if (self) {\n                                var $565 = Parser$Reply$value$(_pst$9, 2n);\n                                var $564 = $565;\n                            } else {\n                                var self = ($558 === 51);\n                                if (self) {\n                                    var $567 = Parser$Reply$value$(_pst$9, 3n);\n                                    var $566 = $567;\n                                } else {\n                                    var self = ($558 === 52);\n                                    if (self) {\n                                        var $569 = Parser$Reply$value$(_pst$9, 4n);\n                                        var $568 = $569;\n                                    } else {\n                                        var self = ($558 === 53);\n                                        if (self) {\n                                            var $571 = Parser$Reply$value$(_pst$9, 5n);\n                                            var $570 = $571;\n                                        } else {\n                                            var self = ($558 === 54);\n                                            if (self) {\n                                                var $573 = Parser$Reply$value$(_pst$9, 6n);\n                                                var $572 = $573;\n                                            } else {\n                                                var self = ($558 === 55);\n                                                if (self) {\n                                                    var $575 = Parser$Reply$value$(_pst$9, 7n);\n                                                    var $574 = $575;\n                                                } else {\n                                                    var self = ($558 === 56);\n                                                    if (self) {\n                                                        var $577 = Parser$Reply$value$(_pst$9, 8n);\n                                                        var $576 = $577;\n                                                    } else {\n                                                        var self = ($558 === 57);\n                                                        if (self) {\n                                                            var $579 = Parser$Reply$value$(_pst$9, 9n);\n                                                            var $578 = $579;\n                                                        } else {\n                                                            var self = ($558 === 97);\n                                                            if (self) {\n                                                                var $581 = Parser$Reply$value$(_pst$9, 10n);\n                                                                var $580 = $581;\n                                                            } else {\n                                                                var self = ($558 === 98);\n                                                                if (self) {\n                                                                    var $583 = Parser$Reply$value$(_pst$9, 11n);\n                                                                    var $582 = $583;\n                                                                } else {\n                                                                    var self = ($558 === 99);\n                                                                    if (self) {\n                                                                        var $585 = Parser$Reply$value$(_pst$9, 12n);\n                                                                        var $584 = $585;\n                                                                    } else {\n                                                                        var self = ($558 === 100);\n                                                                        if (self) {\n                                                                            var $587 = Parser$Reply$value$(_pst$9, 13n);\n                                                                            var $586 = $587;\n                                                                        } else {\n                                                                            var self = ($558 === 101);\n                                                                            if (self) {\n                                                                                var $589 = Parser$Reply$value$(_pst$9, 14n);\n                                                                                var $588 = $589;\n                                                                            } else {\n                                                                                var self = ($558 === 102);\n                                                                                if (self) {\n                                                                                    var $591 = Parser$Reply$value$(_pst$9, 15n);\n                                                                                    var $590 = $591;\n                                                                                } else {\n                                                                                    var self = ($558 === 65);\n                                                                                    if (self) {\n                                                                                        var $593 = Parser$Reply$value$(_pst$9, 10n);\n                                                                                        var $592 = $593;\n                                                                                    } else {\n                                                                                        var self = ($558 === 66);\n                                                                                        if (self) {\n                                                                                            var $595 = Parser$Reply$value$(_pst$9, 11n);\n                                                                                            var $594 = $595;\n                                                                                        } else {\n                                                                                            var self = ($558 === 67);\n                                                                                            if (self) {\n                                                                                                var $597 = Parser$Reply$value$(_pst$9, 12n);\n                                                                                                var $596 = $597;\n                                                                                            } else {\n                                                                                                var self = ($558 === 68);\n                                                                                                if (self) {\n                                                                                                    var $599 = Parser$Reply$value$(_pst$9, 13n);\n                                                                                                    var $598 = $599;\n                                                                                                } else {\n                                                                                                    var self = ($558 === 69);\n                                                                                                    if (self) {\n                                                                                                        var $601 = Parser$Reply$value$(_pst$9, 14n);\n                                                                                                        var $600 = $601;\n                                                                                                    } else {\n                                                                                                        var self = ($558 === 70);\n                                                                                                        if (self) {\n                                                                                                            var $603 = Parser$Reply$value$(_pst$9, 15n);\n                                                                                                            var $602 = $603;\n                                                                                                        } else {\n                                                                                                            var $604 = Parser$Reply$fail$($552, $553, $554, \"Not a digit.\");\n                                                                                                            var $602 = $604;\n                                                                                                        };\n                                                                                                        var $600 = $602;\n                                                                                                    };\n                                                                                                    var $598 = $600;\n                                                                                                };\n                                                                                                var $596 = $598;\n                                                                                            };\n                                                                                            var $594 = $596;\n                                                                                        };\n                                                                                        var $592 = $594;\n                                                                                    };\n                                                                                    var $590 = $592;\n                                                                                };\n                                                                                var $588 = $590;\n                                                                            };\n                                                                            var $586 = $588;\n                                                                        };\n                                                                        var $584 = $586;\n                                                                    };\n                                                                    var $582 = $584;\n                                                                };\n                                                                var $580 = $582;\n                                                            };\n                                                            var $578 = $580;\n                                                        };\n                                                        var $576 = $578;\n                                                    };\n                                                    var $574 = $576;\n                                                };\n                                                var $572 = $574;\n                                            };\n                                            var $570 = $572;\n                                        };\n                                        var $568 = $570;\n                                    };\n                                    var $566 = $568;\n                                };\n                                var $564 = $566;\n                            };\n                            var $562 = $564;\n                        };\n                        var $560 = $562;\n                    };\n                    var $556 = $560;\n                };\n                var $550 = $556;\n                break;\n        };\n        return $550;\n    };\n    const Parser$hex_digit = x0 => Parser$hex_digit$(x0);\n\n    function Hex_to_nat$parser$(_pst$1) {\n        var self = _pst$1;\n        switch (self._) {\n            case 'Parser.State.new':\n                var $606 = self.err;\n                var _reply$7 = Parser$maybe$(Parser$text(\"0x\"), _pst$1);\n                var self = _reply$7;\n                switch (self._) {\n                    case 'Parser.Reply.error':\n                        var $608 = self.err;\n                        var self = $606;\n                        switch (self._) {\n                            case 'Maybe.some':\n                                var $610 = self.value;\n                                var $611 = Parser$Reply$error$(Parser$Error$combine$($610, $608));\n                                var $609 = $611;\n                                break;\n                            case 'Maybe.none':\n                                var $612 = Parser$Reply$error$($608);\n                                var $609 = $612;\n                                break;\n                        };\n                        var $607 = $609;\n                        break;\n                    case 'Parser.Reply.value':\n                        var $613 = self.pst;\n                        var self = $613;\n                        switch (self._) {\n                            case 'Parser.State.new':\n                                var $615 = self.err;\n                                var $616 = self.nam;\n                                var $617 = self.ini;\n                                var $618 = self.idx;\n                                var $619 = self.str;\n                                var _reply$pst$15 = Parser$State$new$(Parser$Error$maybe_combine$($606, $615), $616, $617, $618, $619);\n                                var self = _reply$pst$15;\n                                switch (self._) {\n                                    case 'Parser.State.new':\n                                        var $621 = self.err;\n                                        var _reply$21 = Parser$many1$(Parser$hex_digit, _reply$pst$15);\n                                        var self = _reply$21;\n                                        switch (self._) {\n                                            case 'Parser.Reply.error':\n                                                var $623 = self.err;\n                                                var self = $621;\n                                                switch (self._) {\n                                                    case 'Maybe.some':\n                                                        var $625 = self.value;\n                                                        var $626 = Parser$Reply$error$(Parser$Error$combine$($625, $623));\n                                                        var $624 = $626;\n                                                        break;\n                                                    case 'Maybe.none':\n                                                        var $627 = Parser$Reply$error$($623);\n                                                        var $624 = $627;\n                                                        break;\n                                                };\n                                                var $622 = $624;\n                                                break;\n                                            case 'Parser.Reply.value':\n                                                var $628 = self.pst;\n                                                var $629 = self.val;\n                                                var self = $628;\n                                                switch (self._) {\n                                                    case 'Parser.State.new':\n                                                        var $631 = self.err;\n                                                        var $632 = self.nam;\n                                                        var $633 = self.ini;\n                                                        var $634 = self.idx;\n                                                        var $635 = self.str;\n                                                        var _reply$pst$29 = Parser$State$new$(Parser$Error$maybe_combine$($621, $631), $632, $633, $634, $635);\n                                                        var $636 = Parser$Reply$value$(_reply$pst$29, Nat$from_base$(16n, $629));\n                                                        var $630 = $636;\n                                                        break;\n                                                };\n                                                var $622 = $630;\n                                                break;\n                                        };\n                                        var $620 = $622;\n                                        break;\n                                };\n                                var $614 = $620;\n                                break;\n                        };\n                        var $607 = $614;\n                        break;\n                };\n                var $605 = $607;\n                break;\n        };\n        return $605;\n    };\n    const Hex_to_nat$parser = x0 => Hex_to_nat$parser$(x0);\n\n    function App$Kaelin$Event$Code$Hex$to_nat$(_x$1) {\n        var self = Parser$run$(Hex_to_nat$parser, _x$1);\n        switch (self._) {\n            case 'Maybe.some':\n                var $638 = self.value;\n                var $639 = $638;\n                var $637 = $639;\n                break;\n            case 'Maybe.none':\n                var $640 = 0n;\n                var $637 = $640;\n                break;\n        };\n        return $637;\n    };\n    const App$Kaelin$Event$Code$Hex$to_nat = x0 => App$Kaelin$Event$Code$Hex$to_nat$(x0);\n\n    function App$Kaelin$Resources$Action$to_bits$(_x$1) {\n        var self = _x$1;\n        switch (self._) {\n            case 'App.Kaelin.Action.walk':\n                var $642 = 0n;\n                var _n$2 = $642;\n                break;\n            case 'App.Kaelin.Action.ability_0':\n                var $643 = 1n;\n                var _n$2 = $643;\n                break;\n            case 'App.Kaelin.Action.ability_1':\n                var $644 = 2n;\n                var _n$2 = $644;\n                break;\n        };\n        var $641 = (nat_to_bits(_n$2));\n        return $641;\n    };\n    const App$Kaelin$Resources$Action$to_bits = x0 => App$Kaelin$Resources$Action$to_bits$(x0);\n\n    function I32$new$(_value$1) {\n        var $645 = word_to_i32(_value$1);\n        return $645;\n    };\n    const I32$new = x0 => I32$new$(x0);\n    const I32$add = a0 => a1 => ((a0 + a1) >> 0);\n\n    function Word$neg$aux$(_word$2, _inc$3) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $647 = self.pred;\n                var self = _inc$3;\n                if (self) {\n                    var $649 = Word$o$(Word$neg$aux$($647, Bool$true));\n                    var $648 = $649;\n                } else {\n                    var $650 = Word$i$(Word$neg$aux$($647, Bool$false));\n                    var $648 = $650;\n                };\n                var $646 = $648;\n                break;\n            case 'Word.i':\n                var $651 = self.pred;\n                var self = _inc$3;\n                if (self) {\n                    var $653 = Word$i$(Word$neg$aux$($651, Bool$false));\n                    var $652 = $653;\n                } else {\n                    var $654 = Word$o$(Word$neg$aux$($651, Bool$false));\n                    var $652 = $654;\n                };\n                var $646 = $652;\n                break;\n            case 'Word.e':\n                var $655 = Word$e;\n                var $646 = $655;\n                break;\n        };\n        return $646;\n    };\n    const Word$neg$aux = x0 => x1 => Word$neg$aux$(x0, x1);\n\n    function Word$neg$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $657 = self.pred;\n                var $658 = Word$o$(Word$neg$aux$($657, Bool$true));\n                var $656 = $658;\n                break;\n            case 'Word.i':\n                var $659 = self.pred;\n                var $660 = Word$i$(Word$neg$aux$($659, Bool$false));\n                var $656 = $660;\n                break;\n            case 'Word.e':\n                var $661 = Word$e;\n                var $656 = $661;\n                break;\n        };\n        return $656;\n    };\n    const Word$neg = x0 => Word$neg$(x0);\n    const I32$neg = a0 => ((-a0));\n    const Int$to_i32 = a0 => (Number(a0));\n    const Int$new = a0 => a1 => (a0 - a1);\n    const Int$from_nat = a0 => (a0);\n    const I32$from_nat = a0 => (Number(a0));\n\n    function Word$shift_left$one$go$(_word$2, _prev$3) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $663 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $665 = Word$i$(Word$shift_left$one$go$($663, Bool$false));\n                    var $664 = $665;\n                } else {\n                    var $666 = Word$o$(Word$shift_left$one$go$($663, Bool$false));\n                    var $664 = $666;\n                };\n                var $662 = $664;\n                break;\n            case 'Word.i':\n                var $667 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $669 = Word$i$(Word$shift_left$one$go$($667, Bool$true));\n                    var $668 = $669;\n                } else {\n                    var $670 = Word$o$(Word$shift_left$one$go$($667, Bool$true));\n                    var $668 = $670;\n                };\n                var $662 = $668;\n                break;\n            case 'Word.e':\n                var $671 = Word$e;\n                var $662 = $671;\n                break;\n        };\n        return $662;\n    };\n    const Word$shift_left$one$go = x0 => x1 => Word$shift_left$one$go$(x0, x1);\n\n    function Word$shift_left$one$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $673 = self.pred;\n                var $674 = Word$o$(Word$shift_left$one$go$($673, Bool$false));\n                var $672 = $674;\n                break;\n            case 'Word.i':\n                var $675 = self.pred;\n                var $676 = Word$o$(Word$shift_left$one$go$($675, Bool$true));\n                var $672 = $676;\n                break;\n            case 'Word.e':\n                var $677 = Word$e;\n                var $672 = $677;\n                break;\n        };\n        return $672;\n    };\n    const Word$shift_left$one = x0 => Word$shift_left$one$(x0);\n\n    function Word$shift_left$(_n$2, _value$3) {\n        var Word$shift_left$ = (_n$2, _value$3) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _value$3]\n        });\n        var Word$shift_left = _n$2 => _value$3 => Word$shift_left$(_n$2, _value$3);\n        var arg = [_n$2, _value$3];\n        while (true) {\n            let [_n$2, _value$3] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $678 = _value$3;\n                    return $678;\n                } else {\n                    var $679 = (self - 1n);\n                    var $680 = Word$shift_left$($679, Word$shift_left$one$(_value$3));\n                    return $680;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$shift_left = x0 => x1 => Word$shift_left$(x0, x1);\n\n    function Word$mul$go$(_a$3, _b$4, _acc$5) {\n        var Word$mul$go$ = (_a$3, _b$4, _acc$5) => ({\n            ctr: 'TCO',\n            arg: [_a$3, _b$4, _acc$5]\n        });\n        var Word$mul$go = _a$3 => _b$4 => _acc$5 => Word$mul$go$(_a$3, _b$4, _acc$5);\n        var arg = [_a$3, _b$4, _acc$5];\n        while (true) {\n            let [_a$3, _b$4, _acc$5] = arg;\n            var R = (() => {\n                var self = _a$3;\n                switch (self._) {\n                    case 'Word.o':\n                        var $681 = self.pred;\n                        var $682 = Word$mul$go$($681, Word$shift_left$(1n, _b$4), _acc$5);\n                        return $682;\n                    case 'Word.i':\n                        var $683 = self.pred;\n                        var $684 = Word$mul$go$($683, Word$shift_left$(1n, _b$4), Word$add$(_b$4, _acc$5));\n                        return $684;\n                    case 'Word.e':\n                        var $685 = _acc$5;\n                        return $685;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mul$go = x0 => x1 => x2 => Word$mul$go$(x0, x1, x2);\n\n    function Word$to_zero$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $687 = self.pred;\n                var $688 = Word$o$(Word$to_zero$($687));\n                var $686 = $688;\n                break;\n            case 'Word.i':\n                var $689 = self.pred;\n                var $690 = Word$o$(Word$to_zero$($689));\n                var $686 = $690;\n                break;\n            case 'Word.e':\n                var $691 = Word$e;\n                var $686 = $691;\n                break;\n        };\n        return $686;\n    };\n    const Word$to_zero = x0 => Word$to_zero$(x0);\n\n    function Word$mul$(_a$2, _b$3) {\n        var $692 = Word$mul$go$(_a$2, _b$3, Word$to_zero$(_a$2));\n        return $692;\n    };\n    const Word$mul = x0 => x1 => Word$mul$(x0, x1);\n    const I32$mul = a0 => a1 => ((a0 * a1) >> 0);\n    const F64$to_u32 = a0 => ((a0 >>> 0));\n\n    function Word$s_to_f64$(_a$2) {\n        var Word$s_to_f64$ = (_a$2) => ({\n            ctr: 'TCO',\n            arg: [_a$2]\n        });\n        var Word$s_to_f64 = _a$2 => Word$s_to_f64$(_a$2);\n        var arg = [_a$2];\n        while (true) {\n            let [_a$2] = arg;\n            var R = Word$s_to_f64$(_a$2);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$s_to_f64 = x0 => Word$s_to_f64$(x0);\n    const I32$to_f64 = a0 => (a0);\n\n    function I32$to_u32$(_n$1) {\n        var $693 = (((_n$1) >>> 0));\n        return $693;\n    };\n    const I32$to_u32 = x0 => I32$to_u32$(x0);\n\n    function U32$new$(_value$1) {\n        var $694 = word_to_u32(_value$1);\n        return $694;\n    };\n    const U32$new = x0 => U32$new$(x0);\n    const U32$add = a0 => a1 => ((a0 + a1) >>> 0);\n    const U32$to_nat = a0 => (BigInt(a0));\n\n    function App$Kaelin$Coord$Convert$axial_to_nat$(_coord$1) {\n        var self = _coord$1;\n        switch (self._) {\n            case 'App.Kaelin.Coord.new':\n                var $696 = self.i;\n                var $697 = self.j;\n                var _i$4 = (($696 + 100) >> 0);\n                var _i$5 = ((_i$4 * 1000) >> 0);\n                var _i$6 = I32$to_u32$(_i$5);\n                var _j$7 = (($697 + 100) >> 0);\n                var _j$8 = I32$to_u32$(_j$7);\n                var _sum$9 = ((_i$6 + _j$8) >>> 0);\n                var $698 = (BigInt(_sum$9));\n                var $695 = $698;\n                break;\n        };\n        return $695;\n    };\n    const App$Kaelin$Coord$Convert$axial_to_nat = x0 => App$Kaelin$Coord$Convert$axial_to_nat$(x0);\n\n    function App$Kaelin$Coord$Convert$axial_to_bits$(_x$1) {\n        var _unique_nat$2 = App$Kaelin$Coord$Convert$axial_to_nat$(_x$1);\n        var $699 = (nat_to_bits(_unique_nat$2));\n        return $699;\n    };\n    const App$Kaelin$Coord$Convert$axial_to_bits = x0 => App$Kaelin$Coord$Convert$axial_to_bits$(x0);\n    const App$Kaelin$Event$Code$user_input = List$cons$(40, List$cons$(2, List$cons$(8, List$nil)));\n    const App$Kaelin$Event$Code$exe_skill = List$cons$(40, List$cons$(8, List$cons$(4, List$nil)));\n    const U8$from_nat = a0 => (Number(a0) & 0xFF);\n\n    function App$Kaelin$Team$code$(_team$1) {\n        var self = _team$1;\n        switch (self._) {\n            case 'App.Kaelin.Team.red':\n                var $701 = 1;\n                var $700 = $701;\n                break;\n            case 'App.Kaelin.Team.blue':\n                var $702 = 2;\n                var $700 = $702;\n                break;\n            case 'App.Kaelin.Team.neutral':\n                var $703 = 0;\n                var $700 = $703;\n                break;\n        };\n        return $700;\n    };\n    const App$Kaelin$Team$code = x0 => App$Kaelin$Team$code$(x0);\n    const App$Kaelin$Event$Code$save_skill = List$cons$(40, List$cons$(8, List$cons$(4, List$cons$(2, List$nil))));\n    const App$Kaelin$Event$Code$remove_skill = List$cons$(40, List$cons$(8, List$cons$(4, List$nil)));\n    const App$Kaelin$Event$Code$draft_hero = List$cons$(2, List$nil);\n    const App$Kaelin$Event$Code$draft_coord = List$cons$(8, List$nil);\n    const App$Kaelin$Event$Code$draft_team = List$cons$(2, List$nil);\n    const Debug$log = a0 => a1 => ((console.log(a0), a1()));\n    const App$Kaelin$Event$Code$draft_ready = List$cons$(2, List$nil);\n\n    function App$Kaelin$Event$serialize$(_event$1) {\n        var self = _event$1;\n        switch (self._) {\n            case 'App.Kaelin.Event.create_hero':\n                var $705 = self.hero_id;\n                var _cod$3 = List$cons$((nat_to_bits(1n)), List$cons$(U8$to_bits$($705), List$nil));\n                var $706 = generate_hex$(App$Kaelin$Event$Code$create_hero, _cod$3);\n                var $704 = $706;\n                break;\n            case 'App.Kaelin.Event.user_input':\n                var $707 = self.player;\n                var $708 = self.coord;\n                var $709 = self.action;\n                var _cod$5 = List$cons$((nat_to_bits(4n)), List$cons$((nat_to_bits(App$Kaelin$Event$Code$Hex$to_nat$($707))), List$cons$(App$Kaelin$Resources$Action$to_bits$($709), List$cons$(App$Kaelin$Coord$Convert$axial_to_bits$($708), List$nil))));\n                var $710 = generate_hex$(App$Kaelin$Event$Code$user_input, _cod$5);\n                var $704 = $710;\n                break;\n            case 'App.Kaelin.Event.exe_skill':\n                var $711 = self.player;\n                var $712 = self.target_pos;\n                var $713 = self.key;\n                var _cod$5 = List$cons$((nat_to_bits(5n)), List$cons$((nat_to_bits(App$Kaelin$Event$Code$Hex$to_nat$($711))), List$cons$(App$Kaelin$Coord$Convert$axial_to_bits$($712), List$cons$((u16_to_bits($713)), List$nil))));\n                var $714 = generate_hex$(App$Kaelin$Event$Code$exe_skill, _cod$5);\n                var $704 = $714;\n                break;\n            case 'App.Kaelin.Event.save_skill':\n                var $715 = self.player;\n                var $716 = self.target_pos;\n                var $717 = self.key;\n                var $718 = self.team;\n                var _cod$6 = List$cons$((nat_to_bits(11n)), List$cons$((nat_to_bits(App$Kaelin$Event$Code$Hex$to_nat$($715))), List$cons$(App$Kaelin$Coord$Convert$axial_to_bits$($716), List$cons$((u16_to_bits($717)), List$cons$(U8$to_bits$(App$Kaelin$Team$code$($718)), List$nil)))));\n                var $719 = generate_hex$(App$Kaelin$Event$Code$save_skill, _cod$6);\n                var $704 = $719;\n                break;\n            case 'App.Kaelin.Event.remove_skill':\n                var $720 = self.player;\n                var $721 = self.target_pos;\n                var $722 = self.key;\n                var $723 = self.team;\n                var _cod$6 = List$cons$((nat_to_bits(12n)), List$cons$((nat_to_bits(App$Kaelin$Event$Code$Hex$to_nat$($720))), List$cons$(App$Kaelin$Coord$Convert$axial_to_bits$($721), List$cons$((u16_to_bits($722)), List$cons$(U8$to_bits$(App$Kaelin$Team$code$($723)), List$nil)))));\n                var $724 = generate_hex$(App$Kaelin$Event$Code$remove_skill, _cod$6);\n                var $704 = $724;\n                break;\n            case 'App.Kaelin.Event.draft_hero':\n                var $725 = self.hero;\n                var _cod$3 = List$cons$((nat_to_bits(6n)), List$cons$(U8$to_bits$($725), List$nil));\n                var $726 = generate_hex$(App$Kaelin$Event$Code$draft_hero, _cod$3);\n                var $704 = $726;\n                break;\n            case 'App.Kaelin.Event.draft_coord':\n                var $727 = self.coord;\n                var _cod$3 = List$cons$((nat_to_bits(7n)), List$cons$(App$Kaelin$Coord$Convert$axial_to_bits$($727), List$nil));\n                var $728 = generate_hex$(App$Kaelin$Event$Code$draft_coord, _cod$3);\n                var $704 = $728;\n                break;\n            case 'App.Kaelin.Event.draft_team':\n                var $729 = self.team;\n                var _cod$3 = List$cons$((nat_to_bits(10n)), List$cons$(U8$to_bits$($729), List$nil));\n                var $730 = generate_hex$(App$Kaelin$Event$Code$draft_team, _cod$3);\n                var $704 = $730;\n                break;\n            case 'App.Kaelin.Event.draft_ready':\n                var $731 = self.ready;\n                var $732 = ((console.log(\"serialize ready\"), (_$3 => {\n                    var _cod$4 = List$cons$((nat_to_bits(14n)), List$cons$(U8$to_bits$($731), List$nil));\n                    var $733 = generate_hex$(App$Kaelin$Event$Code$draft_ready, _cod$4);\n                    return $733;\n                })()));\n                var $704 = $732;\n                break;\n            case 'App.Kaelin.Event.start_game':\n            case 'App.Kaelin.Event.create_user':\n                var $734 = \"\";\n                var $704 = $734;\n                break;\n            case 'App.Kaelin.Event.end_action':\n                var _cod$2 = List$cons$((nat_to_bits(13n)), List$nil);\n                var $735 = generate_hex$(List$nil, _cod$2);\n                var $704 = $735;\n                break;\n            case 'App.Kaelin.Event.to_draft':\n                var _cod$2 = List$cons$((nat_to_bits(9n)), List$nil);\n                var $736 = generate_hex$(List$nil, _cod$2);\n                var $704 = $736;\n                break;\n            case 'App.Kaelin.Event.control_map':\n                var _cod$2 = List$cons$((nat_to_bits(15n)), List$nil);\n                var $737 = generate_hex$(List$nil, _cod$2);\n                var $704 = $737;\n                break;\n        };\n        return $704;\n    };\n    const App$Kaelin$Event$serialize = x0 => App$Kaelin$Event$serialize$(x0);\n    const App$Kaelin$Event$to_draft = ({\n        _: 'App.Kaelin.Event.to_draft'\n    });\n\n    function App$KL$Lobby$when$(_local$1, _event$2) {\n        var self = _event$2;\n        switch (self._) {\n            case 'App.Event.init':\n                var $739 = self.user;\n                var self = _local$1;\n                switch (self._) {\n                    case 'App.KL.Lobby.State.Local.new':\n                        var $741 = self.room_input;\n                        var $742 = App$KL$Lobby$State$Local$new$(String$to_lower$($739), $741);\n                        var _new_local$6 = $742;\n                        break;\n                };\n                var $740 = App$set_local$(App$KL$State$Local$lobby$(_new_local$6));\n                var $738 = $740;\n                break;\n            case 'App.Event.mouse_click':\n                var $743 = self.id;\n                var self = ($743 === \"random\");\n                if (self) {\n                    var $745 = IO$monad$((_m$bind$6 => _m$pure$7 => {\n                        var $746 = _m$bind$6;\n                        return $746;\n                    }))(IO$random$(10000000000n))((_rnd$6 => {\n                        var _str$7 = Nat$show$(_rnd$6);\n                        var _room$8 = (\"0x72214422\" + String$drop$((String$length$(_str$7) - 6n <= 0n ? 0n : String$length$(_str$7) - 6n), _str$7));\n                        var self = _local$1;\n                        switch (self._) {\n                            case 'App.KL.Lobby.State.Local.new':\n                                var $748 = self.user;\n                                var $749 = App$KL$Lobby$State$Local$new$($748, _room$8);\n                                var _new_local$9 = $749;\n                                break;\n                        };\n                        var $747 = App$set_local$(App$KL$State$Local$lobby$(_new_local$9));\n                        return $747;\n                    }));\n                    var $744 = $745;\n                } else {\n                    var self = ($743 === \"ready\");\n                    if (self) {\n                        var $751 = IO$monad$((_m$bind$6 => _m$pure$7 => {\n                            var $752 = _m$bind$6;\n                            return $752;\n                        }))(App$watch$((() => {\n                            var self = _local$1;\n                            switch (self._) {\n                                case 'App.KL.Lobby.State.Local.new':\n                                    var $753 = self.room_input;\n                                    var $754 = $753;\n                                    return $754;\n                            };\n                        })()))((_$6 => {\n                            var $755 = App$new_post$((() => {\n                                var self = _local$1;\n                                switch (self._) {\n                                    case 'App.KL.Lobby.State.Local.new':\n                                        var $756 = self.room_input;\n                                        var $757 = $756;\n                                        return $757;\n                                };\n                            })(), App$Kaelin$Event$serialize$(App$Kaelin$Event$to_draft));\n                            return $755;\n                        }));\n                        var $750 = $751;\n                    } else {\n                        var $758 = App$pass;\n                        var $750 = $758;\n                    };\n                    var $744 = $750;\n                };\n                var $738 = $744;\n                break;\n            case 'App.Event.input':\n                var $759 = self.text;\n                var self = _local$1;\n                switch (self._) {\n                    case 'App.KL.Lobby.State.Local.new':\n                        var $761 = self.user;\n                        var $762 = App$KL$Lobby$State$Local$new$($761, $759);\n                        var _new_local$6 = $762;\n                        break;\n                };\n                var $760 = App$set_local$(App$KL$State$Local$lobby$(_new_local$6));\n                var $738 = $760;\n                break;\n            case 'App.Event.frame':\n            case 'App.Event.mouse_down':\n            case 'App.Event.mouse_up':\n            case 'App.Event.key_down':\n            case 'App.Event.key_up':\n            case 'App.Event.mouse_over':\n                var $763 = App$pass;\n                var $738 = $763;\n                break;\n        };\n        return $738;\n    };\n    const App$KL$Lobby$when = x0 => x1 => App$KL$Lobby$when$(x0, x1);\n\n    function App$KL$Game$when$(_local$1, _event$2) {\n        var $764 = App$pass;\n        return $764;\n    };\n    const App$KL$Game$when = x0 => x1 => App$KL$Game$when$(x0, x1);\n\n    function App$KL$when$(_event$1, _state$2) {\n        var self = _state$2;\n        switch (self._) {\n            case 'App.Store.new':\n                var $766 = self.local;\n                var self = $766;\n                switch (self._) {\n                    case 'App.KL.State.Local.lobby':\n                        var $768 = self.state;\n                        var $769 = App$KL$Lobby$when$($768, _event$1);\n                        var $767 = $769;\n                        break;\n                    case 'App.KL.State.Local.game':\n                        var $770 = self.state;\n                        var $771 = App$KL$Game$when$($770, _event$1);\n                        var $767 = $771;\n                        break;\n                };\n                var $765 = $767;\n                break;\n        };\n        return $765;\n    };\n    const App$KL$when = x0 => x1 => App$KL$when$(x0, x1);\n\n    function App$no_tick$(_tick$2, _glob$3) {\n        var $772 = _glob$3;\n        return $772;\n    };\n    const App$no_tick = x0 => x1 => App$no_tick$(x0, x1);\n    const App$KL$tick = App$no_tick;\n\n    function App$KL$post$(_time$1, _room$2, _addr$3, _data$4, _global_state$5) {\n        var $773 = _global_state$5;\n        return $773;\n    };\n    const App$KL$post = x0 => x1 => x2 => x3 => x4 => App$KL$post$(x0, x1, x2, x3, x4);\n    const App$KL = App$new$(App$KL$init, App$KL$draw, App$KL$when, App$KL$tick, App$KL$post);\n    return {\n        'App.new': App$new,\n        'Pair.new': Pair$new,\n        'App.State.new': App$State$new,\n        'App.KL.State': App$KL$State,\n        'App.KL.State.Local.lobby': App$KL$State$Local$lobby,\n        'App.KL.Lobby.State.Local.new': App$KL$Lobby$State$Local$new,\n        'App.KL.State.Global.new': App$KL$State$Global$new,\n        'App.Store.new': App$Store$new,\n        'App.KL.init': App$KL$init,\n        'BitsMap': BitsMap,\n        'Map': Map,\n        'BitsMap.new': BitsMap$new,\n        'BitsMap.tie': BitsMap$tie,\n        'Maybe.some': Maybe$some,\n        'Maybe.none': Maybe$none,\n        'BitsMap.set': BitsMap$set,\n        'Bits.e': Bits$e,\n        'Bits.o': Bits$o,\n        'Bits.i': Bits$i,\n        'Bits.concat': Bits$concat,\n        'Word.to_bits': Word$to_bits,\n        'Nat.succ': Nat$succ,\n        'Nat.zero': Nat$zero,\n        'U16.to_bits': U16$to_bits,\n        'String.to_bits': String$to_bits,\n        'Map.from_list': Map$from_list,\n        'List.cons': List$cons,\n        'Pair': Pair,\n        'List.nil': List$nil,\n        'DOM.node': DOM$node,\n        'DOM.text': DOM$text,\n        'Map.new': Map$new,\n        'App.KL.Lobby.draw.input': App$KL$Lobby$draw$input,\n        'App.KL.Lobby.draw.button': App$KL$Lobby$draw$button,\n        'App.KL.Lobby.draw': App$KL$Lobby$draw,\n        'App.KL.Game.draw': App$KL$Game$draw,\n        'App.KL.draw': App$KL$draw,\n        'IO': IO,\n        'Maybe': Maybe,\n        'Pair.fst': Pair$fst,\n        'App.State.local': App$State$local,\n        'String.nil': String$nil,\n        'String.cons': String$cons,\n        'String.map': String$map,\n        'Bool.false': Bool$false,\n        'Bool.and': Bool$and,\n        'Bool.true': Bool$true,\n        'Cmp.as_gte': Cmp$as_gte,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.gte': Word$gte,\n        'U16.gte': U16$gte,\n        'Cmp.as_lte': Cmp$as_lte,\n        'Word.lte': Word$lte,\n        'U16.lte': U16$lte,\n        'U16.new': U16$new,\n        'Word.e': Word$e,\n        'Word': Word,\n        'Word.i': Word$i,\n        'Word.o': Word$o,\n        'Word.adder': Word$adder,\n        'Word.add': Word$add,\n        'U16.add': U16$add,\n        'Nat.apply': Nat$apply,\n        'Word.inc': Word$inc,\n        'Word.zero': Word$zero,\n        'Nat.to_word': Nat$to_word,\n        'Nat.to_u16': Nat$to_u16,\n        'Char.to_lower': Char$to_lower,\n        'String.to_lower': String$to_lower,\n        'IO.ask': IO$ask,\n        'IO.bind': IO$bind,\n        'IO.end': IO$end,\n        'IO.monad': IO$monad,\n        'App.set_local': App$set_local,\n        'App.pass': App$pass,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Word.eql': Word$eql,\n        'U16.eql': U16$eql,\n        'String.eql': String$eql,\n        'Parser.State.new': Parser$State$new,\n        'Parser.run': Parser$run,\n        'Parser.Reply': Parser$Reply,\n        'List': List,\n        'Parser.Reply.error': Parser$Reply$error,\n        'Nat.gtn': Nat$gtn,\n        'Parser.Error.combine': Parser$Error$combine,\n        'Parser.Error.maybe_combine': Parser$Error$maybe_combine,\n        'Parser.Reply.value': Parser$Reply$value,\n        'Parser.many.go': Parser$many$go,\n        'Parser.many': Parser$many,\n        'Parser.many1': Parser$many1,\n        'Parser.Error.new': Parser$Error$new,\n        'Parser.Reply.fail': Parser$Reply$fail,\n        'Parser.digit': Parser$digit,\n        'Nat.add': Nat$add,\n        'Nat.mul': Nat$mul,\n        'Nat.from_base.go': Nat$from_base$go,\n        'List.reverse.go': List$reverse$go,\n        'List.reverse': List$reverse,\n        'Nat.from_base': Nat$from_base,\n        'Parser.nat': Parser$nat,\n        'Nat.read': Nat$read,\n        'IO.get_time': IO$get_time,\n        'Nat.mod.go': Nat$mod$go,\n        'Nat.mod': Nat$mod,\n        'Nat.random': Nat$random,\n        'IO.random': IO$random,\n        'List.fold': List$fold,\n        'Either': Either,\n        'Either.left': Either$left,\n        'Either.right': Either$right,\n        'Nat.sub_rem': Nat$sub_rem,\n        'Nat.div_mod.go': Nat$div_mod$go,\n        'Nat.div_mod': Nat$div_mod,\n        'Nat.to_base.go': Nat$to_base$go,\n        'Nat.to_base': Nat$to_base,\n        'Nat.lte': Nat$lte,\n        'List.at': List$at,\n        'Nat.show_digit': Nat$show_digit,\n        'Nat.to_string_base': Nat$to_string_base,\n        'Nat.show': Nat$show,\n        'String.concat': String$concat,\n        'String.drop': String$drop,\n        'Nat.sub': Nat$sub,\n        'String.length.go': String$length$go,\n        'String.length': String$length,\n        'Unit.new': Unit$new,\n        'IO.do': IO$do,\n        'App.do': App$do,\n        'App.watch': App$watch,\n        'App.new_post': App$new_post,\n        'Bits.inc': Bits$inc,\n        'Nat.to_bits': Nat$to_bits,\n        'U8.to_bits': U8$to_bits,\n        'List.zip': List$zip,\n        'List.concat': List$concat,\n        'U8.new': U8$new,\n        'Nat.to_u8': Nat$to_u8,\n        'App.Kaelin.Event.Code.action': App$Kaelin$Event$Code$action,\n        'String.repeat': String$repeat,\n        'App.Kaelin.Event.Code.Hex.set_min_length': App$Kaelin$Event$Code$Hex$set_min_length,\n        'List.foldr': List$foldr,\n        'Nat.ltn': Nat$ltn,\n        'App.Kaelin.Event.Code.Hex.format_hex': App$Kaelin$Event$Code$Hex$format_hex,\n        'Nat.eql': Nat$eql,\n        'Bits.to_nat': Bits$to_nat,\n        'Bits.reverse.tco': Bits$reverse$tco,\n        'Bits.reverse': Bits$reverse,\n        'Bits.chunks_of.go': Bits$chunks_of$go,\n        'Bits.chunks_of': Bits$chunks_of,\n        'Function.flip': Function$flip,\n        'Bits.to_hex_string': Bits$to_hex_string,\n        'App.Kaelin.Event.Code.Hex.append': App$Kaelin$Event$Code$Hex$append,\n        'Word.fold': Word$fold,\n        'Word.to_nat': Word$to_nat,\n        'U8.to_nat': U8$to_nat,\n        'Pair.snd': Pair$snd,\n        'App.Kaelin.Event.Code.generate_hex': App$Kaelin$Event$Code$generate_hex,\n        'generate_hex': generate_hex,\n        'App.Kaelin.Event.Code.create_hero': App$Kaelin$Event$Code$create_hero,\n        'Parser.maybe': Parser$maybe,\n        'Parser.text.go': Parser$text$go,\n        'Parser.text': Parser$text,\n        'Parser.hex_digit': Parser$hex_digit,\n        'Hex_to_nat.parser': Hex_to_nat$parser,\n        'App.Kaelin.Event.Code.Hex.to_nat': App$Kaelin$Event$Code$Hex$to_nat,\n        'App.Kaelin.Resources.Action.to_bits': App$Kaelin$Resources$Action$to_bits,\n        'I32.new': I32$new,\n        'I32.add': I32$add,\n        'Word.neg.aux': Word$neg$aux,\n        'Word.neg': Word$neg,\n        'I32.neg': I32$neg,\n        'Int.to_i32': Int$to_i32,\n        'Int.new': Int$new,\n        'Int.from_nat': Int$from_nat,\n        'I32.from_nat': I32$from_nat,\n        'Word.shift_left.one.go': Word$shift_left$one$go,\n        'Word.shift_left.one': Word$shift_left$one,\n        'Word.shift_left': Word$shift_left,\n        'Word.mul.go': Word$mul$go,\n        'Word.to_zero': Word$to_zero,\n        'Word.mul': Word$mul,\n        'I32.mul': I32$mul,\n        'F64.to_u32': F64$to_u32,\n        'Word.s_to_f64': Word$s_to_f64,\n        'I32.to_f64': I32$to_f64,\n        'I32.to_u32': I32$to_u32,\n        'U32.new': U32$new,\n        'U32.add': U32$add,\n        'U32.to_nat': U32$to_nat,\n        'App.Kaelin.Coord.Convert.axial_to_nat': App$Kaelin$Coord$Convert$axial_to_nat,\n        'App.Kaelin.Coord.Convert.axial_to_bits': App$Kaelin$Coord$Convert$axial_to_bits,\n        'App.Kaelin.Event.Code.user_input': App$Kaelin$Event$Code$user_input,\n        'App.Kaelin.Event.Code.exe_skill': App$Kaelin$Event$Code$exe_skill,\n        'U8.from_nat': U8$from_nat,\n        'App.Kaelin.Team.code': App$Kaelin$Team$code,\n        'App.Kaelin.Event.Code.save_skill': App$Kaelin$Event$Code$save_skill,\n        'App.Kaelin.Event.Code.remove_skill': App$Kaelin$Event$Code$remove_skill,\n        'App.Kaelin.Event.Code.draft_hero': App$Kaelin$Event$Code$draft_hero,\n        'App.Kaelin.Event.Code.draft_coord': App$Kaelin$Event$Code$draft_coord,\n        'App.Kaelin.Event.Code.draft_team': App$Kaelin$Event$Code$draft_team,\n        'Debug.log': Debug$log,\n        'App.Kaelin.Event.Code.draft_ready': App$Kaelin$Event$Code$draft_ready,\n        'App.Kaelin.Event.serialize': App$Kaelin$Event$serialize,\n        'App.Kaelin.Event.to_draft': App$Kaelin$Event$to_draft,\n        'App.KL.Lobby.when': App$KL$Lobby$when,\n        'App.KL.Game.when': App$KL$Game$when,\n        'App.KL.when': App$KL$when,\n        'App.no_tick': App$no_tick,\n        'App.KL.tick': App$KL$tick,\n        'App.KL.post': App$KL$post,\n        'App.KL': App$KL,\n    };\n})();"],"sourceRoot":""}