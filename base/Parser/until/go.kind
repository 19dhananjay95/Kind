Parser.until.go<V: Type>(
  until: Parser(Unit),
  parse: Parser(V),
  values: List<V>,
): Parser<List<V>>
  (err, idx, code)
  let until_reply = until(err, idx, code);
  case until_reply {
    error:
      let reply = parse(err, idx, code);
      case reply {
        error:
          Parser.Reply.error<List<V>>(reply.err),
        value:
          def values = List.cons<V>(reply.val, values)
          Parser.until.go<V>(until, parse, values, err, reply.idx, reply.code)
      }
    value:
      Parser.Reply.value<List<V>>(until_reply.err, until_reply.idx, until_reply.code, List.reverse<V>(values)),
  }
