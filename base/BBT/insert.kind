BBT.insert<K: Type, V: Type>(
  cmp : K -> K -> Cmp,
  key : K, 
  val : V, 
  map : BBT<K,V>
) : BBT<K,V>

  case map {
    tip: BBT.singleton<K,V>(key, val),
    bin: case cmp(key, map.key) {
      // if key < map.key, the new value should go into the left subtree
      ltn:  
        let new_key   = map.key 
        let new_val   = map.val 
        let new_left  = BBT.insert<K,V>(cmp, key, val, map.left)
        let new_right = map.right 
        BBT.balance<K,V>(new_key, new_val, new_left, new_right),
    // `val` is already in the map, so how do we proceed? 
    // if we decide to simply return the map unchanged, we are
    // ignoring the case where other fields of `val`, which are not 
    // used in the comparison function, might have changed
    // this comes at some extra cost, of course
      eql: BBT.node<K,V>(key, val, map.left, map.right),
    // if key > map.key, the new value should go into the right subtree
      gtn:  
        let new_key = map.key 
        let new_val = map.val  
        let new_left = map.left 
        let new_right = BBT.insert<K,V>(cmp, key, val, map.right)
        BBT.balance<K,V>(new_key, new_val, new_left, new_right)
    }
  }