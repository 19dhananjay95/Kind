App.GG.Effect.projectile.add_at(pos: App.GG.Coord, projectile: App.GG.Projectile): App.GG.Effect<Unit>
  (center, origin, grid)
  let new_grid = App.GG.Projectile.create(pos, projectile, grid)
  App.GG.Effect.Result.new!(unit, center, origin, new_grid, (img) img, 0, "")


App.GG.Effect.projectile.get: App.GG.Effect<Maybe<App.GG.Projectile>>
  (center, origin, grid)
  let projectile = App.GG.Projectile.get(center, origin, grid)
  App.GG.Effect.Result.new!(projectile, center, origin, grid, (img) img, 0, "")


App.GG.Effect.projectile.move(new_pos: App.GG.Coord): App.GG.Effect<Bool>
  (center, origin, grid)
  let {bool, new_grid} = 
    case origin {
      creature: {false, grid}
      projectile:
        let tile_exists =
          Maybe.is_some!(App.GG.Grid.get(new_pos, grid))
        let new_grid = App.GG.Projectile.move(center, new_pos, origin.id, grid)
        {tile_exists, new_grid}
    }
  App.GG.Effect.Result.new!(bool, center, origin, new_grid, (img) img, 0, "")

App.GG.Effect.projectile.add_hit(pos: App.GG.Coord): App.GG.Effect<Unit>
  (center, origin, grid)
  let new_grid =
    let creature = App.GG.Creature.get(pos, grid)
    without creature: grid
    let id = creature@id
    case origin {
      creature: grid
      projectile:
        App.GG.Projectile.add_hit(id, center, origin.id, grid)
    }
  App.GG.Effect.Result.new!(unit, center, origin, new_grid, (img) img, 0, "")

App.GG.Effect.projectile.has_hit(pos: App.GG.Coord): App.GG.Effect<Bool>
  (center, origin, grid)
  let bool =
    Maybe {
      get creature = App.GG.Creature.get(pos, grid)
      get projectile = App.GG.Projectile.get(center, origin, grid)
      let info = projectile@info
      let bool = NatSet.has(creature@id, info@hits)
      return bool
    } <> false
  App.GG.Effect.Result.new!(bool, center, origin, grid, (img) img, 0, "")
App.GG.Effect.projectile.delete: App.GG.Effect<Unit>
  (center, origin, grid)
  let new_grid = 
    case origin {
      creature: grid
      projectile: 
        App.GG.Projectile.delete(center, origin.id, grid)
    }
  App.GG.Effect.Result.new!(unit, center, origin, new_grid, (img) img, 0, "")
App.GG.Effect.projectile.hit(dmg: I32, coord: App.GG.Coord): App.GG.Effect<I32>
    App.GG.Effect {
      get has_hit  = App.GG.Effect.projectile.has_hit(coord) // Checks if projectile has already hit that enemy
      get is_enemy = App.GG.Effect.creature.is_enemy(coord) // Checks if projectile is over an enemy
      //log((if is_enemy then "has enemy " else "no enemy ") | (if not(has_hit) then "and can hit." else "and cannot hit."))
      if is_enemy && not(has_hit) then
        App.GG.Effect {
          App.GG.Effect.projectile.add_hit(coord) // Adds enemy to list of targets hit by projectile
          get dmg = App.GG.Effect.creature.change_hp_at(dmg, coord) 
          return dmg
        }
      else
        App.GG.Effect {return +0#32}
    } 