//changes only for testing

App.Kaelin.App.when: App.When<App.Kaelin.State>
(event, state)
  case event state{
    init game: 
      let user = String.to_lower(event.user)
      IO {
        App.watch(App.Kaelin.Constants.room)
        App.store!(App.Kaelin.State.game(user, App.Kaelin.Constants.room, state.cast_info, state.map, state.internal, state.env_info))
      }

    key_down game:
      switch U16.eql(event.code) {
        'F' : 
          open state.internal as internal
          let animation = App.Kaelin.Map.Entity.animation(App.Kaelin.Animation.new(0, App.Kaelin.Sprite.fire))
          // This gives me a bug on runtime we should investigate what is the cause
          // let state = state@map <- App.Kaelin.Map.push(App.Kaelin.Coord.new(0, 0), animation, state.map)
          App.store!(App.Kaelin.State.game(state.user, App.Kaelin.Constants.room, state.cast_info, App.Kaelin.Map.push(App.Kaelin.Coord.new(0, 0), animation, state.map), state.internal, state.env_info))
        49#16: App.store!(App.Kaelin.Action.create_player(
        state.user, "Croni", state))
      } default App.store!(App.Kaelin.Action.start_cast(event.code, state))

    frame game:
      let info = event.info
      let state = App.Kaelin.Action.update_interface(info, U64.to_nat(event.time), state)
      App.store!(App.Kaelin.Action.update_area(state))       
    
    mouse_up game:
      let info = state.env_info
      open info
      let {axial_x, axial_y} = App.Kaelin.Coord.to_axial(info.mouse_pos)
      let hex = App.Kaelin.Event.serialize(App.Kaelin.Event.user_input(state.user, App.Kaelin.Coord.new(axial_x, axial_y), App.Kaelin.Action.walk))
      App.post(state.room, hex)
      
  } default App.pass!
