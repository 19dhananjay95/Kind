#monad_name ((Parser.first_of Fm.Term) (((List.cons (Parser Fm.Term)) ((((((Monad.bind Parser) Parser.monad) Nat) Fm.Term) Fm.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Unit) Fm.Term) (Fm.Parser.text "var ")) # ((((((Monad.bind Parser) Parser.monad) Fm.Name) Fm.Term) Fm.Parser.name1) #name ((((((Monad.bind Parser) Parser.monad) Unit) Fm.Term) (Fm.Parser.text "=")) # ((((((Monad.bind Parser) Parser.monad) Fm.Term) Fm.Term) Fm.Parser.term) #expr ((((((Monad.bind Parser) Parser.monad) (Maybe Unit)) Fm.Term) ((Parser.maybe Unit) (Fm.Parser.text ";"))) # ((((((Monad.bind Parser) Parser.monad) Fm.Term) Fm.Term) (Fm.Parser.do.statements monad_name)) #body ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Fm.Term) (Fm.Parser.stop init)) #orig !term = ((Fm.Term.app (Fm.Term.ref "Monad.bind")) (Fm.Term.ref monad_name)); !term = ((Fm.Term.app term) (Fm.Term.ref ((String.concat monad_name) ".monad"))); !term = ((Fm.Term.app term) (Fm.Term.hol Bits.e)); !term = ((Fm.Term.app term) (Fm.Term.hol Bits.e)); !term = ((Fm.Term.app term) expr); !term = ((Fm.Term.app term) ((Fm.Term.lam name) #x body)); ((((Monad.pure Parser) Parser.monad) Fm.Term) ((Fm.Term.ori orig) term))))))))))) (((List.cons (Parser Fm.Term)) ((((((Monad.bind Parser) Parser.monad) Nat) Fm.Term) Fm.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Unit) Fm.Term) (Fm.Parser.text "let ")) # ((((((Monad.bind Parser) Parser.monad) Fm.Name) Fm.Term) Fm.Parser.name1) #name ((((((Monad.bind Parser) Parser.monad) Unit) Fm.Term) (Fm.Parser.text "=")) # ((((((Monad.bind Parser) Parser.monad) Fm.Term) Fm.Term) Fm.Parser.term) #expr ((((((Monad.bind Parser) Parser.monad) (Maybe Unit)) Fm.Term) ((Parser.maybe Unit) (Fm.Parser.text ";"))) # ((((((Monad.bind Parser) Parser.monad) Fm.Term) Fm.Term) (Fm.Parser.do.statements monad_name)) #body ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Fm.Term) (Fm.Parser.stop init)) #orig ((((Monad.pure Parser) Parser.monad) Fm.Term) ((Fm.Term.ori orig) (((Fm.Term.let name) expr) #x body)))))))))))) (((List.cons (Parser Fm.Term)) ((((((Monad.bind Parser) Parser.monad) Nat) Fm.Term) Fm.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Unit) Fm.Term) (Fm.Parser.text "return ")) # ((((((Monad.bind Parser) Parser.monad) Fm.Term) Fm.Term) Fm.Parser.term) #expr ((((((Monad.bind Parser) Parser.monad) (Maybe Unit)) Fm.Term) ((Parser.maybe Unit) (Fm.Parser.text ";"))) # ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Fm.Term) (Fm.Parser.stop init)) #orig !term = ((Fm.Term.app (Fm.Term.ref "Monad.pure")) (Fm.Term.ref monad_name)); !term = ((Fm.Term.app term) (Fm.Term.ref ((String.concat monad_name) ".monad"))); !term = ((Fm.Term.app term) (Fm.Term.hol Bits.e)); !term = ((Fm.Term.app term) expr); ((((Monad.pure Parser) Parser.monad) Fm.Term) ((Fm.Term.ori orig) term)))))))) (((List.cons (Parser Fm.Term)) ((((((Monad.bind Parser) Parser.monad) Nat) Fm.Term) Fm.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Fm.Term) Fm.Term) Fm.Parser.term) #expr ((((((Monad.bind Parser) Parser.monad) (Maybe Unit)) Fm.Term) ((Parser.maybe Unit) (Fm.Parser.text ";"))) # ((((((Monad.bind Parser) Parser.monad) Fm.Term) Fm.Term) (Fm.Parser.do.statements monad_name)) #body ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Fm.Term) (Fm.Parser.stop init)) #orig !term = ((Fm.Term.app (Fm.Term.ref "Monad.bind")) (Fm.Term.ref monad_name)); !term = ((Fm.Term.app term) (Fm.Term.ref ((String.concat monad_name) ".monad"))); !term = ((Fm.Term.app term) (Fm.Term.hol Bits.e)); !term = ((Fm.Term.app term) (Fm.Term.hol Bits.e)); !term = ((Fm.Term.app term) expr); !term = ((Fm.Term.app term) ((Fm.Term.lam "") #x body)); ((((Monad.pure Parser) Parser.monad) Fm.Term) ((Fm.Term.ori orig) term)))))))) (((List.cons (Parser Fm.Term)) ((((((Monad.bind Parser) Parser.monad) Fm.Term) Fm.Term) Fm.Parser.term) #expr ((((((Monad.bind Parser) Parser.monad) (Maybe Unit)) Fm.Term) ((Parser.maybe Unit) (Fm.Parser.text ";"))) # ((((Monad.pure Parser) Parser.monad) Fm.Term) expr)))) (List.nil (Parser Fm.Term))))))))