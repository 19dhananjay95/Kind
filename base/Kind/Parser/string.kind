Kind.Parser.string.go(
  delim: Char,
  str: String,
): Parser<String>
  (long, idx, code)
  case code {
    nil:
      Parser.Reply.error_long<String>(idx, code, "Non-terminating string.")
    cons:
      if U16.eql(code.head, delim) then
        Parser.Reply.value<String>(long, Nat.succ(idx), code.tail, String.reverse(str))
      else case Kind.Parser.char.single(long, idx, code) as parsed {
        error:
          Parser.Reply.error<String>(parsed.val)
        value:
          Kind.Parser.string.go(delim, String.cons(parsed.val,str), long, parsed.idx, parsed.code)
      }
  }

Kind.Parser.string(delim: Char): Parser(Kind.Term)
  Parser {
    get init = Kind.Parser.init;
    Kind.Parser.text(String.cons(delim, String.nil));
    get strx = Kind.Parser.string.go(delim, "");
    get orig = Kind.Parser.stop(init);
    return Kind.Term.ori(orig, Kind.Term.str(strx));
  }
