#init #term #idx #code !suffix_parser = ((Parser.first_of Fm.Term) (((List.cons (Parser Fm.Term)) ((Fm.Parser.application init) term)) (((List.cons (Parser Fm.Term)) ((Fm.Parser.application.erased init) term)) (((List.cons (Parser Fm.Term)) ((Fm.Parser.arrow init) term)) (((List.cons (Parser Fm.Term)) ((Fm.Parser.add init) term)) (((List.cons (Parser Fm.Term)) ((Fm.Parser.sub init) term)) (((List.cons (Parser Fm.Term)) ((Fm.Parser.mul init) term)) (((List.cons (Parser Fm.Term)) ((Fm.Parser.div init) term)) (((List.cons (Parser Fm.Term)) ((Fm.Parser.mod init) term)) (((List.cons (Parser Fm.Term)) ((Fm.Parser.cons init) term)) (((List.cons (Parser Fm.Term)) ((Fm.Parser.concat init) term)) (((List.cons (Parser Fm.Term)) ((Fm.Parser.string_concat init) term)) (((List.cons (Parser Fm.Term)) ((Fm.Parser.sigma init) term)) (((List.cons (Parser Fm.Term)) ((Fm.Parser.equality init) term)) (((List.cons (Parser Fm.Term)) ((Fm.Parser.inequality init) term)) (((List.cons (Parser Fm.Term)) ((Fm.Parser.rewrite init) term)) (((List.cons (Parser Fm.Term)) ((Fm.Parser.annotation init) term)) (((List.cons (Parser Fm.Term)) ((Fm.Parser.application.hole init) term)) (List.nil (Parser Fm.Term)))))))))))))))))))); (((((suffix_parser idx) code) #suffix_parsed (Parser.Reply Fm.Term)) #suffix_parsed.idx #suffix_parsed.code #suffix_parsed.err ((((Parser.Reply.value Fm.Term) idx) code) term)) #suffix_parsed.idx #suffix_parsed.code #suffix_parsed.val ((((Fm.Parser.suffix init) suffix_parsed.val) suffix_parsed.idx) suffix_parsed.code))