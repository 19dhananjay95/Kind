// Generates a list from a leftist tree
// The generated list will be sorted based on the comparator
User.Rheidner.LeftistTree.to_list.go<A: Type>(tree: User.Rheidner.LeftistTree<A>, result: List<A>, comparator: (x: A, y: A) -> Bool): List<A>
  case tree {
    empty: result
    node:
      let root = User.Rheidner.LeftistTree.get_root!(tree)
      case root {
        none: List.nil!
        some:           
          User.Rheidner.LeftistTree.to_list.go!( User.Rheidner.LeftistTree.delete_root!(tree, comparator), [ root.value ] ++ result, comparator )
      }!
  }!

User.Rheidner.LeftistTree.to_list<A: Type>(tree: User.Rheidner.LeftistTree<A>, comparator: (x: A, y: A) -> Bool): List<A>
  User.Rheidner.LeftistTree.to_list.go!(tree, List.nil<A>, comparator)