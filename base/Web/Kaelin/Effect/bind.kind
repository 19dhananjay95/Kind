Web.Kaelin.Effect.bind<A: Type, B: Type>(
  effect: Web.Kaelin.Effect<A>
  next: A -> Web.Kaelin.Effect<B>
): Web.Kaelin.Effect<B>
  (tick, center, target, map)
  case effect(tick, center, target, map) as result_a {
    new: case next(result_a.value)(tick, center, target, result_a.map) as result_b {
      new:
        let value = result_b.value
        let map = result_b.map
        let futures = result_a.futures ++ result_b.futures
        let indicators = NatMap.union!(result_a.indicators, result_b.indicators)
        Web.Kaelin.Effect.Result.new<B>(value, map, futures, indicators)
    }
  }