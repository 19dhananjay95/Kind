<<<<<<< Updated upstream
{"version":3,"sources":["webpack://kind-web/./src/apps/App.Playground.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbaAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjqBAAqB;AACrB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbfile":"737.index.js","sourcesContent":["module.exports = function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === \"Word.i\" ? 1 << i : 0);\n            w = w.pred;\n        }\n        return u;\n    }\n    function u16_to_word(u) {\n        var w = {\n            _: \"Word.e\"\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: u >>> 16 - i - 1 & 1 ? \"Word.i\" : \"Word.o\",\n                pred: w\n            };\n        }\n        return w;\n    }\n    function u16_to_bits(x) {\n        var s = \"\";\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? \"1\" : \"0\") + s;\n            x = x >>> 1;\n        }\n        return s;\n    }\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === \"Word.i\" ? 1 << i : 0);\n            w = w.pred;\n        }\n        return u;\n    }\n    function u32_to_word(u) {\n        var w = {\n            _: \"Word.e\"\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: u >>> 32 - i - 1 & 1 ? \"Word.i\" : \"Word.o\",\n                pred: w\n            };\n        }\n        return w;\n    }\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    }\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === \"Word.i\" ? 1n << i : 0n);\n            w = w.pred;\n        }\n        return u;\n    }\n    function u64_to_word(u) {\n        var w = {\n            _: \"Word.e\"\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: u >> 64n - i - 1n & 1n ? \"Word.i\" : \"Word.o\",\n                pred: w\n            };\n        }\n        return w;\n    }\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n              case \"Array.tip\":\n                buffer.push(a.value);\n                break;\n\n              case \"Array.tie\":\n                go(a.lft, buffer);\n                go(a.rgt, buffer);\n                break;\n            }\n            return buffer;\n        }\n        return new Uint32Array(go(a, []));\n    }\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: \"Array.tip\",\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: \"Array.tie\",\n                    lft: lft,\n                    rgt: rgt\n                };\n            }\n        }\n        return go(b);\n    }\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    }\n    var bitsmap_new = {\n        _: \"BitsMap.new\"\n    };\n    var bitsmap_tie = function(val, lft, rgt) {\n        return {\n            _: \"BitsMap.tip\",\n            val: val,\n            lft: lft,\n            rgt: rgt\n        };\n    };\n    var maybe_none = {\n        _: \"Maybe.none\"\n    };\n    var maybe_some = function(value) {\n        return {\n            _: \"Maybe.some\",\n            value: value\n        };\n    };\n    var bitsmap_get = function(bits, map) {\n        for (var i = bits.length - 1; i >= 0; --i) {\n            if (map._ !== \"BitsMap.new\") {\n                map = bits[i] === \"0\" ? map.lft : map.rgt;\n            }\n        }\n        return map._ === \"BitsMap.new\" ? maybe_none : map.val;\n    };\n    var bitsmap_set = function(bits, val, map, mode) {\n        var res = {\n            value: map\n        };\n        var key = \"value\";\n        var obj = res;\n        for (var i = bits.length - 1; i >= 0; --i) {\n            var map = obj[key];\n            if (map._ === \"BitsMap.new\") {\n                obj[key] = {\n                    _: \"BitsMap.tie\",\n                    val: maybe_none,\n                    lft: bitsmap_new,\n                    rgt: bitsmap_new\n                };\n            } else {\n                obj[key] = {\n                    _: \"BitsMap.tie\",\n                    val: map.val,\n                    lft: map.lft,\n                    rgt: map.rgt\n                };\n            }\n            obj = obj[key];\n            key = bits[i] === \"0\" ? \"lft\" : \"rgt\";\n        }\n        var map = obj[key];\n        if (map._ === \"BitsMap.new\") {\n            var x = mode === \"del\" ? maybe_none : {\n                _: \"Maybe.some\",\n                value: val\n            };\n            obj[key] = {\n                _: \"BitsMap.tie\",\n                val: x,\n                lft: bitsmap_new,\n                rgt: bitsmap_new\n            };\n        } else {\n            var x = mode === \"set\" ? {\n                _: \"Maybe.some\",\n                value: val\n            } : mode === \"del\" ? maybe_none : map.val;\n            obj[key] = {\n                _: \"BitsMap.tie\",\n                val: x,\n                lft: map.lft,\n                rgt: map.rgt\n            };\n        }\n        return res.value;\n    };\n    const inst_unit = x => x(null);\n    const elim_unit = x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n              case \"unit\":\n                var $0 = c0;\n                return $0;\n            }\n        })();\n        return $1;\n    };\n    const inst_bool = x => x(true)(false);\n    const elim_bool = x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c0;\n                return $2;\n            } else {\n                var $3 = c1;\n                return $3;\n            }\n        })();\n        return $4;\n    };\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c0;\n                return $5;\n            } else {\n                var $6 = self - 1n;\n                var $7 = c1($6);\n                return $7;\n            }\n        })();\n        return $8;\n    };\n    const inst_bits = x => x(\"\")(x0 => x0 + \"0\")(x0 => x0 + \"1\");\n    const elim_bits = x => {\n        var $14 = (() => c0 => c1 => c2 => {\n            var self = x;\n            switch (self.length === 0 ? \"e\" : self[self.length - 1] === \"0\" ? \"o\" : \"i\") {\n              case \"o\":\n                var $9 = self.slice(0, -1);\n                var $10 = c1($9);\n                return $10;\n\n              case \"i\":\n                var $11 = self.slice(0, -1);\n                var $12 = c2($11);\n                return $12;\n\n              case \"e\":\n                var $13 = c0;\n                return $13;\n            }\n        })();\n        return $14;\n    };\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch (\"u16\") {\n              case \"u16\":\n                var $15 = u16_to_word(self);\n                var $16 = c0($15);\n                return $16;\n            }\n        })();\n        return $17;\n    };\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = x => {\n        var $20 = (() => c0 => {\n            var self = x;\n            switch (\"u32\") {\n              case \"u32\":\n                var $18 = u32_to_word(self);\n                var $19 = c0($18);\n                return $19;\n            }\n        })();\n        return $20;\n    };\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = x => {\n        var $23 = (() => c0 => {\n            var self = x;\n            switch (\"u64\") {\n              case \"u64\":\n                var $21 = u64_to_word(self);\n                var $22 = c0($21);\n                return $22;\n            }\n        })();\n        return $23;\n    };\n    const inst_string = x => x(\"\")(x0 => x1 => String.fromCharCode(x0) + x1);\n    const elim_string = x => {\n        var $28 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $24 = c0;\n                return $24;\n            } else {\n                var $25 = self.charCodeAt(0);\n                var $26 = self.slice(1);\n                var $27 = c1($25)($26);\n                return $27;\n            }\n        })();\n        return $28;\n    };\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = x => {\n        var $32 = (() => c0 => {\n            var self = x;\n            switch (\"b32\") {\n              case \"b32\":\n                var $29 = buffer32_to_depth(self);\n                var $30 = buffer32_to_u32array(self);\n                var $31 = c0($29)($30);\n                return $31;\n            }\n        })();\n        return $32;\n    };\n    function App$Store$new$(_local$2, _global$3) {\n        var $33 = {\n            _: \"App.Store.new\",\n            local: _local$2,\n            global: _global$3\n        };\n        return $33;\n    }\n    const App$Store$new = x0 => x1 => App$Store$new$(x0, x1);\n    function Pair$new$(_fst$3, _snd$4) {\n        var $34 = {\n            _: \"Pair.new\",\n            fst: _fst$3,\n            snd: _snd$4\n        };\n        return $34;\n    }\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n    const App$State$new = Pair$new$(null, null);\n    const App$Playground$State = App$State$new;\n    function App$Playground$State$local$new$(_device$1, _window$2, _mouse_over$3, _code$4, _output$5) {\n        var $35 = {\n            _: \"App.Playground.State.local.new\",\n            device: _device$1,\n            window: _window$2,\n            mouse_over: _mouse_over$3,\n            code: _code$4,\n            output: _output$5\n        };\n        return $35;\n    }\n    const App$Playground$State$local$new = x0 => x1 => x2 => x3 => x4 => App$Playground$State$local$new$(x0, x1, x2, x3, x4);\n    const Device$big_desktop = {\n        _: \"Device.big_desktop\"\n    };\n    const App$Playground$Window$input = {\n        _: \"App.Playground.Window.input\"\n    };\n    const App$Playground$State$local_empty = App$Playground$State$local$new$(Device$big_desktop, App$Playground$Window$input, \"\", \"\", \"\");\n    const Unit$new = null;\n    function DOM$node$(_tag$1, _props$2, _style$3, _children$4) {\n        var $36 = {\n            _: \"DOM.node\",\n            tag: _tag$1,\n            props: _props$2,\n            style: _style$3,\n            children: _children$4\n        };\n        return $36;\n    }\n    const DOM$node = x0 => x1 => x2 => x3 => DOM$node$(x0, x1, x2, x3);\n    function BitsMap$(_A$1) {\n        var $37 = null;\n        return $37;\n    }\n    const BitsMap = x0 => BitsMap$(x0);\n    function Map$(_V$1) {\n        var $38 = null;\n        return $38;\n    }\n    const Map = x0 => Map$(x0);\n    const BitsMap$new = {\n        _: \"BitsMap.new\"\n    };\n    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {\n        var $39 = {\n            _: \"BitsMap.tie\",\n            val: _val$2,\n            lft: _lft$3,\n            rgt: _rgt$4\n        };\n        return $39;\n    }\n    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);\n    function Maybe$some$(_value$2) {\n        var $40 = {\n            _: \"Maybe.some\",\n            value: _value$2\n        };\n        return $40;\n    }\n    const Maybe$some = x0 => Maybe$some$(x0);\n    const Maybe$none = {\n        _: \"Maybe.none\"\n    };\n    const BitsMap$set = a0 => a1 => a2 => bitsmap_set(a0, a1, a2, \"set\");\n    const Bits$e = \"\";\n    const Bits$o = a0 => a0 + \"0\";\n    const Bits$i = a0 => a0 + \"1\";\n    const Bits$concat = a0 => a1 => a1 + a0;\n    function Word$to_bits$(_a$2) {\n        var self = _a$2;\n        switch (self._) {\n          case \"Word.o\":\n            var $42 = self.pred;\n            var $43 = Word$to_bits$($42) + \"0\";\n            var $41 = $43;\n            break;\n\n          case \"Word.i\":\n            var $44 = self.pred;\n            var $45 = Word$to_bits$($44) + \"1\";\n            var $41 = $45;\n            break;\n\n          case \"Word.e\":\n            var $46 = Bits$e;\n            var $41 = $46;\n            break;\n        }\n        return $41;\n    }\n    const Word$to_bits = x0 => Word$to_bits$(x0);\n    function Nat$succ$(_pred$1) {\n        var $47 = 1n + _pred$1;\n        return $47;\n    }\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const U16$to_bits = a0 => u16_to_bits(a0);\n    function String$to_bits$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $49 = Bits$e;\n            var $48 = $49;\n        } else {\n            var $50 = self.charCodeAt(0);\n            var $51 = self.slice(1);\n            var $52 = String$to_bits$($51) + u16_to_bits($50);\n            var $48 = $52;\n        }\n        return $48;\n    }\n    const String$to_bits = x0 => String$to_bits$(x0);\n    function Map$from_list$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n          case \"List.cons\":\n            var $54 = self.head;\n            var $55 = self.tail;\n            var self = $54;\n            switch (self._) {\n              case \"Pair.new\":\n                var $57 = self.fst;\n                var $58 = self.snd;\n                var $59 = bitsmap_set(String$to_bits$($57), $58, Map$from_list$($55), \"set\");\n                var $56 = $59;\n                break;\n            }\n            ;\n            var $53 = $56;\n            break;\n\n          case \"List.nil\":\n            var $60 = BitsMap$new;\n            var $53 = $60;\n            break;\n        }\n        return $53;\n    }\n    const Map$from_list = x0 => Map$from_list$(x0);\n    function List$cons$(_head$2, _tail$3) {\n        var $61 = {\n            _: \"List.cons\",\n            head: _head$2,\n            tail: _tail$3\n        };\n        return $61;\n    }\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n    function Pair$(_A$1, _B$2) {\n        var $62 = null;\n        return $62;\n    }\n    const Pair = x0 => x1 => Pair$(x0, x1);\n    const List$nil = {\n        _: \"List.nil\"\n    };\n    const App$Playground$constant$light_gray_color = \"#E0E0E0\";\n    const App$Playground$constant$white_smoke = \"#F5F5F5\";\n    function DOM$text$(_value$1) {\n        var $63 = {\n            _: \"DOM.text\",\n            value: _value$1\n        };\n        return $63;\n    }\n    const DOM$text = x0 => DOM$text$(x0);\n    const Bool$true = true;\n    const Bool$false = false;\n    const Bool$and = a0 => a1 => a0 && a1;\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n          case \"Cmp.ltn\":\n          case \"Cmp.gtn\":\n            var $65 = Bool$false;\n            var $64 = $65;\n            break;\n\n          case \"Cmp.eql\":\n            var $66 = Bool$true;\n            var $64 = $66;\n            break;\n        }\n        return $64;\n    }\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n    const Cmp$ltn = {\n        _: \"Cmp.ltn\"\n    };\n    const Cmp$gtn = {\n        _: \"Cmp.gtn\"\n    };\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n          case \"Word.o\":\n            var $68 = self.pred;\n            var $69 = _b$7 => {\n                var self = _b$7;\n                switch (self._) {\n                  case \"Word.o\":\n                    var $71 = self.pred;\n                    var $72 = _a$pred$10 => {\n                        var $73 = Word$cmp$go$(_a$pred$10, $71, _c$4);\n                        return $73;\n                    };\n                    var $70 = $72;\n                    break;\n\n                  case \"Word.i\":\n                    var $74 = self.pred;\n                    var $75 = _a$pred$10 => {\n                        var $76 = Word$cmp$go$(_a$pred$10, $74, Cmp$ltn);\n                        return $76;\n                    };\n                    var $70 = $75;\n                    break;\n\n                  case \"Word.e\":\n                    var $77 = _a$pred$8 => {\n                        var $78 = _c$4;\n                        return $78;\n                    };\n                    var $70 = $77;\n                    break;\n                }\n                var $70 = $70($68);\n                return $70;\n            };\n            var $67 = $69;\n            break;\n\n          case \"Word.i\":\n            var $79 = self.pred;\n            var $80 = _b$7 => {\n                var self = _b$7;\n                switch (self._) {\n                  case \"Word.o\":\n                    var $82 = self.pred;\n                    var $83 = _a$pred$10 => {\n                        var $84 = Word$cmp$go$(_a$pred$10, $82, Cmp$gtn);\n                        return $84;\n                    };\n                    var $81 = $83;\n                    break;\n\n                  case \"Word.i\":\n                    var $85 = self.pred;\n                    var $86 = _a$pred$10 => {\n                        var $87 = Word$cmp$go$(_a$pred$10, $85, _c$4);\n                        return $87;\n                    };\n                    var $81 = $86;\n                    break;\n\n                  case \"Word.e\":\n                    var $88 = _a$pred$8 => {\n                        var $89 = _c$4;\n                        return $89;\n                    };\n                    var $81 = $88;\n                    break;\n                }\n                var $81 = $81($79);\n                return $81;\n            };\n            var $67 = $80;\n            break;\n\n          case \"Word.e\":\n            var $90 = _b$5 => {\n                var $91 = _c$4;\n                return $91;\n            };\n            var $67 = $90;\n            break;\n        }\n        var $67 = $67(_b$3);\n        return $67;\n    }\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = {\n        _: \"Cmp.eql\"\n    };\n    function Word$cmp$(_a$2, _b$3) {\n        var $92 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $92;\n    }\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n    function Word$eql$(_a$2, _b$3) {\n        var $93 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $93;\n    }\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n    const U16$eql = a0 => a1 => a0 === a1;\n    const String$eql = a0 => a1 => a0 === a1;\n    function BitsMap$union$(_a$2, _b$3) {\n        var self = _a$2;\n        switch (self._) {\n          case \"BitsMap.tie\":\n            var $95 = self.val;\n            var $96 = self.lft;\n            var $97 = self.rgt;\n            var self = _b$3;\n            switch (self._) {\n              case \"BitsMap.tie\":\n                var $99 = self.val;\n                var $100 = self.lft;\n                var $101 = self.rgt;\n                var self = $95;\n                switch (self._) {\n                  case \"Maybe.none\":\n                    var $103 = BitsMap$tie$($99, BitsMap$union$($96, $100), BitsMap$union$($97, $101));\n                    var $102 = $103;\n                    break;\n\n                  case \"Maybe.some\":\n                    var $104 = BitsMap$tie$($95, BitsMap$union$($96, $100), BitsMap$union$($97, $101));\n                    var $102 = $104;\n                    break;\n                }\n                ;\n                var $98 = $102;\n                break;\n\n              case \"BitsMap.new\":\n                var $105 = _a$2;\n                var $98 = $105;\n                break;\n            }\n            ;\n            var $94 = $98;\n            break;\n\n          case \"BitsMap.new\":\n            var $106 = _b$3;\n            var $94 = $106;\n            break;\n        }\n        return $94;\n    }\n    const BitsMap$union = x0 => x1 => BitsMap$union$(x0, x1);\n    function Map$union$(_a$2, _b$3) {\n        var $107 = BitsMap$union$(_a$2, _b$3);\n        return $107;\n    }\n    const Map$union = x0 => x1 => Map$union$(x0, x1);\n    const App$Kind$constant$secondary_color = \"#3891A6\";\n    function App$Playground$comp$btn_run_code$(_mouse_over$1) {\n        var _is_hover$2 = \"btn_run_code\" === _mouse_over$1;\n        var _normal$3 = Map$from_list$(List$cons$(Pair$new$(\"width\", \"50px\"), List$cons$(Pair$new$(\"height\", \"25px\"), List$cons$(Pair$new$(\"margin\", \"5px 0px\"), List$cons$(Pair$new$(\"color\", \"white\"), List$cons$(Pair$new$(\"cursor\", \"pointer\"), List$cons$(Pair$new$(\"border\", \"none\"), List$cons$(Pair$new$(\"border-radius\", \"4px\"), List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"justify-content\", \"center\"), List$cons$(Pair$new$(\"align-content\", \"center\"), List$cons$(Pair$new$(\"align-items\", \"center\"), List$nil))))))))))));\n        var $108 = DOM$node$(\"div\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"btn_run_code\"), List$nil)), (() => {\n            var self = _is_hover$2;\n            if (self) {\n                var $109 = Map$union$(_normal$3, Map$from_list$(List$cons$(Pair$new$(\"background-color\", \"#44B8D3\"), List$nil)));\n                return $109;\n            } else {\n                var $110 = Map$union$(_normal$3, Map$from_list$(List$cons$(Pair$new$(\"background-color\", App$Kind$constant$secondary_color), List$nil)));\n                return $110;\n            }\n        })(), List$cons$(DOM$text$(\"check\"), List$nil));\n        return $108;\n    }\n    const App$Playground$comp$btn_run_code = x0 => App$Playground$comp$btn_run_code$(x0);\n    function App$Playground$comp$header$(_device$1, _mouse_over$2, _window$3) {\n        var _playground$4 = DOM$node$(\"div\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"input_view\"), List$nil)), Map$from_list$(List$cons$(Pair$new$(\"font-size\", \"14px\"), List$cons$(Pair$new$(\"height\", \"35px\"), List$cons$(Pair$new$(\"padding\", \"8px 15px 0px 15px\"), List$cons$(Pair$new$(\"background-color\", (() => {\n            var self = _window$3;\n            switch (self._) {\n              case \"App.Playground.Window.input\":\n                var $112 = App$Playground$constant$light_gray_color;\n                return $112;\n\n              case \"App.Playground.Window.terminal\":\n                var $113 = App$Playground$constant$white_smoke;\n                return $113;\n            }\n        })()), List$cons$(Pair$new$(\"display\", \"flex\"), List$nil)))))), List$cons$(DOM$text$(\"playground.kind\"), List$nil));\n        var _btn_run$5 = App$Playground$comp$btn_run_code$(_mouse_over$2);\n        var _style_header$6 = Map$from_list$(List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"flex-direction\", \"row\"), List$cons$(Pair$new$(\"justify-content\", \"space-between\"), List$cons$(Pair$new$(\"align-content\", \"center\"), List$cons$(Pair$new$(\"justify-content\", \"center\"), List$nil))))));\n        var self = _device$1;\n        switch (self._) {\n          case \"Device.phone\":\n            var _terminal$7 = DOM$node$(\"div\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"terminal_view\"), List$nil)), Map$from_list$(List$cons$(Pair$new$(\"font-size\", \"14px\"), List$cons$(Pair$new$(\"height\", \"35px\"), List$cons$(Pair$new$(\"padding\", \"8px 15px 0px 15px\"), List$cons$(Pair$new$(\"background-color\", (() => {\n                var self = _window$3;\n                switch (self._) {\n                  case \"App.Playground.Window.input\":\n                    var $115 = App$Playground$constant$white_smoke;\n                    return $115;\n\n                  case \"App.Playground.Window.terminal\":\n                    var $116 = App$Playground$constant$light_gray_color;\n                    return $116;\n                }\n            })()), List$cons$(Pair$new$(\"display\", \"flex\"), List$nil)))))), List$cons$(DOM$text$(\"output\"), List$nil));\n            var $114 = DOM$node$(\"div\", Map$from_list$(List$nil), _style_header$6, List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"justify-content\", \"flex-start\"), List$cons$(Pair$new$(\"flex-direction\", \"row\"), List$nil)))), List$cons$(_playground$4, List$cons$(_terminal$7, List$nil))), List$cons$(_btn_run$5, List$nil)));\n            var $111 = $114;\n            break;\n\n          case \"Device.tablet\":\n          case \"Device.desktop\":\n          case \"Device.big_desktop\":\n            var $117 = DOM$node$(\"div\", Map$from_list$(List$nil), _style_header$6, List$cons$(_playground$4, List$cons$(_btn_run$5, List$nil)));\n            var $111 = $117;\n            break;\n        }\n        return $111;\n    }\n    const App$Playground$comp$header = x0 => x1 => x2 => App$Playground$comp$header$(x0, x1, x2);\n    function String$cons$(_head$1, _tail$2) {\n        var $118 = String.fromCharCode(_head$1) + _tail$2;\n        return $118;\n    }\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n    const String$concat = a0 => a1 => a0 + a1;\n    function App$Playground$comp$input$(_code$1) {\n        var $119 = DOM$node$(\"textarea\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"input_code\"), List$cons$(Pair$new$(\"placeholder\", \"Write Kind code in this online editor and run it <3\"), List$nil))), Map$from_list$(List$cons$(Pair$new$(\"cols\", \"100\"), List$cons$(Pair$new$(\"height\", \"100%\"), List$cons$(Pair$new$(\"border\", \"solid 5px \" + App$Playground$constant$light_gray_color), List$cons$(Pair$new$(\"resize\", \"none\"), List$cons$(Pair$new$(\"padding\", \"10px\"), List$nil)))))), List$cons$(DOM$text$(_code$1), List$nil));\n        return $119;\n    }\n    const App$Playground$comp$input = x0 => App$Playground$comp$input$(x0);\n    function App$Playground$comp$output_area$(_output$1, _device$2) {\n        var _style$3 = Map$from_list$(List$cons$(Pair$new$(\"width\", \"400px\"), List$cons$(Pair$new$(\"max-width\", \"500px\"), List$cons$(Pair$new$(\"overflow\", \"auto\"), List$cons$(Pair$new$(\"padding\", \"10px\"), List$cons$(Pair$new$(\"background-color\", App$Playground$constant$light_gray_color), List$nil))))));\n        var $120 = DOM$node$(\"div\", Map$from_list$(List$nil), (() => {\n            var self = _device$2;\n            switch (self._) {\n              case \"Device.phone\":\n                var $121 = Map$union$(_style$3, Map$from_list$(List$cons$(Pair$new$(\"height\", \"100%\"), List$cons$(Pair$new$(\"margin-top\", \"0px\"), List$nil))));\n                return $121;\n\n              case \"Device.tablet\":\n              case \"Device.desktop\":\n              case \"Device.big_desktop\":\n                var $122 = Map$union$(_style$3, Map$from_list$(List$cons$(Pair$new$(\"height\", \"100% - 35px\"), List$cons$(Pair$new$(\"margin-top\", \"35px\"), List$nil))));\n                return $122;\n            }\n        })(), List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$text$(\"kind-lang@1.0.51\"), List$nil)), List$cons$(DOM$node$(\"pre\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"margin-top\", \"10px\"), List$nil)), List$cons$(DOM$text$(_output$1), List$nil)), List$nil)));\n        return $120;\n    }\n    const App$Playground$comp$output_area = x0 => x1 => App$Playground$comp$output_area$(x0, x1);\n    function App$Playground$comp$main_area$(_stt$1) {\n        var self = _stt$1;\n        switch (self._) {\n          case \"App.Playground.State.local.new\":\n            var $124 = self.device;\n            var $125 = self.window;\n            var $126 = self.mouse_over;\n            var $127 = self.code;\n            var $128 = self.output;\n            var _header$7 = App$Playground$comp$header$($124, $126, $125);\n            var _input_view$8 = App$Playground$comp$input$($127);\n            var _output_view$9 = App$Playground$comp$output_area$($128, $124);\n            var self = $124;\n            switch (self._) {\n              case \"Device.phone\":\n                var $130 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"width\", \"100%\"), List$cons$(Pair$new$(\"height\", \"100%\"), List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"flex-direction\", \"column\"), List$nil))))), List$cons$(_header$7, List$cons$((() => {\n                    var self = $125;\n                    switch (self._) {\n                      case \"App.Playground.Window.input\":\n                        var $131 = _input_view$8;\n                        return $131;\n\n                      case \"App.Playground.Window.terminal\":\n                        var $132 = _output_view$9;\n                        return $132;\n                    }\n                })(), List$nil)));\n                var $129 = $130;\n                break;\n\n              case \"Device.tablet\":\n              case \"Device.desktop\":\n              case \"Device.big_desktop\":\n                var $133 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"width\", \"100%\"), List$cons$(Pair$new$(\"height\", \"100%\"), List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"flex-direction\", \"row\"), List$nil))))), List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"flex-direction\", \"column\"), List$cons$(Pair$new$(\"width\", \"60%\"), List$nil)))), List$cons$(_header$7, List$cons$(_input_view$8, List$nil))), List$cons$(_output_view$9, List$nil)));\n                var $129 = $133;\n                break;\n            }\n            ;\n            var $123 = $129;\n            break;\n        }\n        return $123;\n    }\n    const App$Playground$comp$main_area = x0 => App$Playground$comp$main_area$(x0);\n    function App$Playground$draw$(_stt$1) {\n        var self = _stt$1;\n        switch (self._) {\n          case \"App.Playground.State.local.new\":\n            var $135 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"width\", \"100%\"), List$cons$(Pair$new$(\"height\", \"100%\"), List$cons$(Pair$new$(\"margin\", \"20px 0x\"), List$cons$(Pair$new$(\"display\", \"flex\"), List$nil))))), List$cons$(App$Playground$comp$main_area$(_stt$1), List$nil));\n            var $134 = $135;\n            break;\n        }\n        return $134;\n    }\n    const App$Playground$draw = x0 => App$Playground$draw$(x0);\n    function App$playground$body$(_stt$1) {\n        var self = _stt$1;\n        switch (self._) {\n          case \"App.Playground.State.local.new\":\n            var $137 = self.device;\n            var self = $137;\n            switch (self._) {\n              case \"Device.phone\":\n                var $139 = DOM$node$(\"div\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"page\"), List$nil)), Map$from_list$(List$cons$(Pair$new$(\"margin\", \"10px\"), List$cons$(Pair$new$(\"height\", \"300px\"), List$nil))), List$cons$(App$Playground$draw$(_stt$1), List$nil));\n                var $138 = $139;\n                break;\n\n              case \"Device.tablet\":\n              case \"Device.desktop\":\n              case \"Device.big_desktop\":\n                var $140 = DOM$node$(\"div\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"page\"), List$nil)), Map$from_list$(List$cons$(Pair$new$(\"margin\", \"100px\"), List$cons$(Pair$new$(\"height\", \"500px\"), List$nil))), List$cons$(App$Playground$draw$(_stt$1), List$nil));\n                var $138 = $140;\n                break;\n            }\n            ;\n            var $136 = $138;\n            break;\n        }\n        return $136;\n    }\n    const App$playground$body = x0 => App$playground$body$(x0);\n    function Pair$fst$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n          case \"Pair.new\":\n            var $142 = self.fst;\n            var $143 = $142;\n            var $141 = $143;\n            break;\n        }\n        return $141;\n    }\n    const Pair$fst = x0 => Pair$fst$(x0);\n    const App$State$local = Pair$fst;\n    function IO$(_A$1) {\n        var $144 = null;\n        return $144;\n    }\n    const IO = x0 => IO$(x0);\n    function Maybe$(_A$1) {\n        var $145 = null;\n        return $145;\n    }\n    const Maybe = x0 => Maybe$(x0);\n    function IO$ask$(_query$2, _param$3, _then$4) {\n        var $146 = {\n            _: \"IO.ask\",\n            query: _query$2,\n            param: _param$3,\n            then: _then$4\n        };\n        return $146;\n    }\n    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);\n    function IO$bind$(_a$3, _f$4) {\n        var self = _a$3;\n        switch (self._) {\n          case \"IO.end\":\n            var $148 = self.value;\n            var $149 = _f$4($148);\n            var $147 = $149;\n            break;\n\n          case \"IO.ask\":\n            var $150 = self.query;\n            var $151 = self.param;\n            var $152 = self.then;\n            var $153 = IO$ask$($150, $151, _x$8 => {\n                var $154 = IO$bind$($152(_x$8), _f$4);\n                return $154;\n            });\n            var $147 = $153;\n            break;\n        }\n        return $147;\n    }\n    const IO$bind = x0 => x1 => IO$bind$(x0, x1);\n    function IO$end$(_value$2) {\n        var $155 = {\n            _: \"IO.end\",\n            value: _value$2\n        };\n        return $155;\n    }\n    const IO$end = x0 => IO$end$(x0);\n    function IO$monad$(_new$2) {\n        var $156 = _new$2(IO$bind)(IO$end);\n        return $156;\n    }\n    const IO$monad = x0 => IO$monad$(x0);\n    const App$pass = IO$monad$(_m$bind$2 => _m$pure$3 => {\n        var $157 = _m$pure$3;\n        return $157;\n    })(Maybe$none);\n    function Cmp$as_lte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n          case \"Cmp.ltn\":\n          case \"Cmp.eql\":\n            var $159 = Bool$true;\n            var $158 = $159;\n            break;\n\n          case \"Cmp.gtn\":\n            var $160 = Bool$false;\n            var $158 = $160;\n            break;\n        }\n        return $158;\n    }\n    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);\n    function Word$lte$(_a$2, _b$3) {\n        var $161 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));\n        return $161;\n    }\n    const Word$lte = x0 => x1 => Word$lte$(x0, x1);\n    const U32$lte = a0 => a1 => a0 <= a1;\n    function U32$new$(_value$1) {\n        var $162 = word_to_u32(_value$1);\n        return $162;\n    }\n    const U32$new = x0 => U32$new$(x0);\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: \"TCO\",\n            arg: [ _n$2, _f$3, _x$4 ]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [ _n$2, _f$3, _x$4 ];\n        while (true) {\n            let [ _n$2, _f$3, _x$4 ] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $163 = _x$4;\n                    return $163;\n                } else {\n                    var $164 = self - 1n;\n                    var $165 = Nat$apply$($164, _f$3, _f$3(_x$4));\n                    return $165;\n                }\n            })();\n            if (R.ctr === \"TCO\") arg = R.arg; else return R;\n        }\n    }\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n    function Word$(_size$1) {\n        var $166 = null;\n        return $166;\n    }\n    const Word = x0 => Word$(x0);\n    const Word$e = {\n        _: \"Word.e\"\n    };\n    function Word$i$(_pred$2) {\n        var $167 = {\n            _: \"Word.i\",\n            pred: _pred$2\n        };\n        return $167;\n    }\n    const Word$i = x0 => Word$i$(x0);\n    function Word$o$(_pred$2) {\n        var $168 = {\n            _: \"Word.o\",\n            pred: _pred$2\n        };\n        return $168;\n    }\n    const Word$o = x0 => Word$o$(x0);\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n          case \"Word.o\":\n            var $170 = self.pred;\n            var $171 = Word$i$($170);\n            var $169 = $171;\n            break;\n\n          case \"Word.i\":\n            var $172 = self.pred;\n            var $173 = Word$o$(Word$inc$($172));\n            var $169 = $173;\n            break;\n\n          case \"Word.e\":\n            var $174 = Word$e;\n            var $169 = $174;\n            break;\n        }\n        return $169;\n    }\n    const Word$inc = x0 => Word$inc$(x0);\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $176 = Word$e;\n            var $175 = $176;\n        } else {\n            var $177 = self - 1n;\n            var $178 = Word$o$(Word$zero$($177));\n            var $175 = $178;\n        }\n        return $175;\n    }\n    const Word$zero = x0 => Word$zero$(x0);\n    function Nat$to_word$(_size$1, _n$2) {\n        var $179 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));\n        return $179;\n    }\n    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);\n    const Nat$to_u32 = a0 => Number(a0) >>> 0;\n    const Device$phone = {\n        _: \"Device.phone\"\n    };\n    const Device$tablet = {\n        _: \"Device.tablet\"\n    };\n    const Device$desktop = {\n        _: \"Device.desktop\"\n    };\n    function Device$classify$(_width$1) {\n        var self = _width$1 <= 600;\n        if (self) {\n            var $181 = Device$phone;\n            var $180 = $181;\n        } else {\n            var self = _width$1 <= 768;\n            if (self) {\n                var $183 = Device$tablet;\n                var $182 = $183;\n            } else {\n                var self = _width$1 <= 992;\n                if (self) {\n                    var $185 = Device$desktop;\n                    var $184 = $185;\n                } else {\n                    var $186 = Device$big_desktop;\n                    var $184 = $186;\n                }\n                var $182 = $184;\n            }\n            var $180 = $182;\n        }\n        return $180;\n    }\n    const Device$classify = x0 => Device$classify$(x0);\n    function App$set_local$(_value$2) {\n        var $187 = IO$monad$(_m$bind$3 => _m$pure$4 => {\n            var $188 = _m$pure$4;\n            return $188;\n        })(Maybe$some$(_value$2));\n        return $187;\n    }\n    const App$set_local = x0 => App$set_local$(x0);\n    function App$Playground$set_mouse_over$(_id$1, _stt$2) {\n        var self = _stt$2;\n        switch (self._) {\n          case \"App.Playground.State.local.new\":\n            var $190 = self.device;\n            var $191 = self.window;\n            var $192 = self.code;\n            var $193 = self.output;\n            var $194 = App$Playground$State$local$new$($190, $191, _id$1, $192, $193);\n            var $189 = $194;\n            break;\n        }\n        return $189;\n    }\n    const App$Playground$set_mouse_over = x0 => x1 => App$Playground$set_mouse_over$(x0, x1);\n    const App$Playground$Window$terminal = {\n        _: \"App.Playground.Window.terminal\"\n    };\n    function String$is_empty$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $196 = Bool$true;\n            var $195 = $196;\n        } else {\n            var $197 = self.charCodeAt(0);\n            var $198 = self.slice(1);\n            var $199 = Bool$false;\n            var $195 = $199;\n        }\n        return $195;\n    }\n    const String$is_empty = x0 => String$is_empty$(x0);\n    function IO$request$(_url$1) {\n        var $200 = IO$ask$(\"request\", _url$1, _text$2 => {\n            var $201 = IO$end$(_text$2);\n            return $201;\n        });\n        return $200;\n    }\n    const IO$request = x0 => IO$request$(x0);\n    function App$Playground$when$(_event$1, _stt$2) {\n        var self = _stt$2;\n        switch (self._) {\n          case \"App.Store.new\":\n            var $203 = self.local;\n            var $204 = $203;\n            var _state$3 = $204;\n            break;\n        }\n        var self = _state$3;\n        switch (self._) {\n          case \"App.Playground.State.local.new\":\n            var $205 = self.device;\n            var $206 = self.window;\n            var $207 = self.mouse_over;\n            var $208 = self.code;\n            var $209 = self.output;\n            var self = _event$1;\n            switch (self._) {\n              case \"App.Event.frame\":\n                var $211 = self.info;\n                var self = $211;\n                switch (self._) {\n                  case \"App.EnvInfo.new\":\n                    var $213 = self.screen_size;\n                    var self = $213;\n                    switch (self._) {\n                      case \"Pair.new\":\n                        var $215 = self.fst;\n                        var _device$15 = Device$classify$($215);\n                        var $216 = App$set_local$(App$Playground$State$local$new$(_device$15, $206, $207, $208, $209));\n                        var $214 = $216;\n                        break;\n                    }\n                    ;\n                    var $212 = $214;\n                    break;\n                }\n                ;\n                var $210 = $212;\n                break;\n\n              case \"App.Event.mouse_over\":\n                var $217 = self.id;\n                var $218 = App$set_local$(App$Playground$set_mouse_over$($217, _state$3));\n                var $210 = $218;\n                break;\n\n              case \"App.Event.mouse_click\":\n                var $219 = self.id;\n                var self = $219 === \"btn_run_code\";\n                if (self) {\n                    var self = $205;\n                    switch (self._) {\n                      case \"Device.phone\":\n                        var $222 = App$Playground$Window$terminal;\n                        var _window$12 = $222;\n                        break;\n\n                      case \"Device.tablet\":\n                      case \"Device.desktop\":\n                      case \"Device.big_desktop\":\n                        var $223 = App$Playground$Window$input;\n                        var _window$12 = $223;\n                        break;\n                    }\n                    var self = String$is_empty$($208);\n                    if (self) {\n                        var $224 = App$set_local$(App$Playground$State$local$new$($205, _window$12, $207, $208, \"How can I type check an empty code? haha\"));\n                        var $221 = $224;\n                    } else {\n                        var $225 = IO$monad$(_m$bind$13 => _m$pure$14 => {\n                            var $226 = _m$bind$13;\n                            return $226;\n                        })(IO$request$(\"http://18.222.191.174:3030/api/check_term?code=\" + $208))(_checked$13 => {\n                            var $227 = App$set_local$(App$Playground$State$local$new$($205, _window$12, $207, $208, _checked$13));\n                            return $227;\n                        });\n                        var $221 = $225;\n                    }\n                    var $220 = $221;\n                } else {\n                    var self = $219 === \"terminal_view\";\n                    if (self) {\n                        var $229 = App$set_local$(App$Playground$State$local$new$($205, App$Playground$Window$terminal, $207, $208, $209));\n                        var $228 = $229;\n                    } else {\n                        var self = $219 === \"input_view\";\n                        if (self) {\n                            var $231 = App$set_local$(App$Playground$State$local$new$($205, App$Playground$Window$input, $207, $208, $209));\n                            var $230 = $231;\n                        } else {\n                            var $232 = App$pass;\n                            var $230 = $232;\n                        }\n                        var $228 = $230;\n                    }\n                    var $220 = $228;\n                }\n                ;\n                var $210 = $220;\n                break;\n\n              case \"App.Event.input\":\n                var $233 = self.id;\n                var $234 = self.text;\n                var self = $233 === \"input_code\";\n                if (self) {\n                    var $236 = App$set_local$(App$Playground$State$local$new$($205, $206, $207, $234, $209));\n                    var $235 = $236;\n                } else {\n                    var $237 = App$pass;\n                    var $235 = $237;\n                }\n                ;\n                var $210 = $235;\n                break;\n\n              case \"App.Event.init\":\n              case \"App.Event.mouse_down\":\n              case \"App.Event.mouse_up\":\n              case \"App.Event.key_down\":\n              case \"App.Event.key_up\":\n                var $238 = App$pass;\n                var $210 = $238;\n                break;\n            }\n            ;\n            var $202 = $210;\n            break;\n        }\n        return $202;\n    }\n    const App$Playground$when = x0 => x1 => App$Playground$when$(x0, x1);\n    function App$new$(_init$2, _draw$3, _when$4, _tick$5, _post$6) {\n        var $239 = {\n            _: \"App.new\",\n            init: _init$2,\n            draw: _draw$3,\n            when: _when$4,\n            tick: _tick$5,\n            post: _post$6\n        };\n        return $239;\n    }\n    const App$new = x0 => x1 => x2 => x3 => x4 => App$new$(x0, x1, x2, x3, x4);\n    const App$Playground = (() => {\n        var _init$1 = App$Store$new$(App$Playground$State$local_empty, Unit$new);\n        var _draw$2 = _state$2 => {\n            var $241 = App$playground$body$((() => {\n                var self = _state$2;\n                switch (self._) {\n                  case \"App.Store.new\":\n                    var $242 = self.local;\n                    var $243 = $242;\n                    return $243;\n                }\n            })());\n            return $241;\n        };\n        var _when$3 = App$Playground$when;\n        var _tick$4 = _tick$4 => _glob$5 => {\n            var $244 = _glob$5;\n            return $244;\n        };\n        var _post$5 = _time$5 => _room$6 => _addr$7 => _data$8 => _glob$9 => {\n            var $245 = _glob$9;\n            return $245;\n        };\n        var $240 = App$new$(_init$1, _draw$2, _when$3, _tick$4, _post$5);\n        return $240;\n    })();\n    return {\n        \"App.Store.new\": App$Store$new,\n        \"Pair.new\": Pair$new,\n        \"App.State.new\": App$State$new,\n        \"App.Playground.State\": App$Playground$State,\n        \"App.Playground.State.local.new\": App$Playground$State$local$new,\n        \"Device.big_desktop\": Device$big_desktop,\n        \"App.Playground.Window.input\": App$Playground$Window$input,\n        \"App.Playground.State.local_empty\": App$Playground$State$local_empty,\n        \"Unit.new\": Unit$new,\n        \"DOM.node\": DOM$node,\n        BitsMap: BitsMap,\n        Map: Map,\n        \"BitsMap.new\": BitsMap$new,\n        \"BitsMap.tie\": BitsMap$tie,\n        \"Maybe.some\": Maybe$some,\n        \"Maybe.none\": Maybe$none,\n        \"BitsMap.set\": BitsMap$set,\n        \"Bits.e\": Bits$e,\n        \"Bits.o\": Bits$o,\n        \"Bits.i\": Bits$i,\n        \"Bits.concat\": Bits$concat,\n        \"Word.to_bits\": Word$to_bits,\n        \"Nat.succ\": Nat$succ,\n        \"Nat.zero\": Nat$zero,\n        \"U16.to_bits\": U16$to_bits,\n        \"String.to_bits\": String$to_bits,\n        \"Map.from_list\": Map$from_list,\n        \"List.cons\": List$cons,\n        Pair: Pair,\n        \"List.nil\": List$nil,\n        \"App.Playground.constant.light_gray_color\": App$Playground$constant$light_gray_color,\n        \"App.Playground.constant.white_smoke\": App$Playground$constant$white_smoke,\n        \"DOM.text\": DOM$text,\n        \"Bool.true\": Bool$true,\n        \"Bool.false\": Bool$false,\n        \"Bool.and\": Bool$and,\n        \"Cmp.as_eql\": Cmp$as_eql,\n        \"Cmp.ltn\": Cmp$ltn,\n        \"Cmp.gtn\": Cmp$gtn,\n        \"Word.cmp.go\": Word$cmp$go,\n        \"Cmp.eql\": Cmp$eql,\n        \"Word.cmp\": Word$cmp,\n        \"Word.eql\": Word$eql,\n        \"U16.eql\": U16$eql,\n        \"String.eql\": String$eql,\n        \"BitsMap.union\": BitsMap$union,\n        \"Map.union\": Map$union,\n        \"App.Kind.constant.secondary_color\": App$Kind$constant$secondary_color,\n        \"App.Playground.comp.btn_run_code\": App$Playground$comp$btn_run_code,\n        \"App.Playground.comp.header\": App$Playground$comp$header,\n        \"String.cons\": String$cons,\n        \"String.concat\": String$concat,\n        \"App.Playground.comp.input\": App$Playground$comp$input,\n        \"App.Playground.comp.output_area\": App$Playground$comp$output_area,\n        \"App.Playground.comp.main_area\": App$Playground$comp$main_area,\n        \"App.Playground.draw\": App$Playground$draw,\n        \"App.playground.body\": App$playground$body,\n        \"Pair.fst\": Pair$fst,\n        \"App.State.local\": App$State$local,\n        IO: IO,\n        Maybe: Maybe,\n        \"IO.ask\": IO$ask,\n        \"IO.bind\": IO$bind,\n        \"IO.end\": IO$end,\n        \"IO.monad\": IO$monad,\n        \"App.pass\": App$pass,\n        \"Cmp.as_lte\": Cmp$as_lte,\n        \"Word.lte\": Word$lte,\n        \"U32.lte\": U32$lte,\n        \"U32.new\": U32$new,\n        \"Nat.apply\": Nat$apply,\n        Word: Word,\n        \"Word.e\": Word$e,\n        \"Word.i\": Word$i,\n        \"Word.o\": Word$o,\n        \"Word.inc\": Word$inc,\n        \"Word.zero\": Word$zero,\n        \"Nat.to_word\": Nat$to_word,\n        \"Nat.to_u32\": Nat$to_u32,\n        \"Device.phone\": Device$phone,\n        \"Device.tablet\": Device$tablet,\n        \"Device.desktop\": Device$desktop,\n        \"Device.classify\": Device$classify,\n        \"App.set_local\": App$set_local,\n        \"App.Playground.set_mouse_over\": App$Playground$set_mouse_over,\n        \"App.Playground.Window.terminal\": App$Playground$Window$terminal,\n        \"String.is_empty\": String$is_empty,\n        \"IO.request\": IO$request,\n        \"App.Playground.when\": App$Playground$when,\n        \"App.new\": App$new,\n        \"App.Playground\": App$Playground\n    };\n}();\n"],"sourceRoot":""}
=======
{"version":3,"sources":["webpack://kind-web/./src/apps/App.Playground.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,I","file":"737.index.js","sourcesContent":["module.exports = (function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    var bitsmap_new = {\n        _: 'BitsMap.new'\n    };\n    var bitsmap_tie = function(val, lft, rgt) {\n        return {\n            _: 'BitsMap.tip',\n            val,\n            lft,\n            rgt\n        };\n    }\n    var maybe_none = {\n        _: 'Maybe.none'\n    };\n    var maybe_some = function(value) {\n        return {\n            _: 'Maybe.some',\n            value\n        };\n    }\n    var bitsmap_get = function(bits, map) {\n        for (var i = bits.length - 1; i >= 0; --i) {\n            if (map._ !== 'BitsMap.new') {\n                map = bits[i] === '0' ? map.lft : map.rgt;\n            }\n        }\n        return map._ === 'BitsMap.new' ? maybe_none : map.val;\n    }\n    var bitsmap_set = function(bits, val, map, mode) {\n        var res = {\n            value: map\n        };\n        var key = 'value';\n        var obj = res;\n        for (var i = bits.length - 1; i >= 0; --i) {\n            var map = obj[key];\n            if (map._ === 'BitsMap.new') {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: maybe_none,\n                    lft: bitsmap_new,\n                    rgt: bitsmap_new\n                };\n            } else {\n                obj[key] = {\n                    _: 'BitsMap.tie',\n                    val: map.val,\n                    lft: map.lft,\n                    rgt: map.rgt\n                };\n            }\n            obj = obj[key];\n            key = bits[i] === '0' ? 'lft' : 'rgt';\n        }\n        var map = obj[key];\n        if (map._ === 'BitsMap.new') {\n            var x = mode === 'del' ? maybe_none : {\n                _: 'Maybe.some',\n                value: val\n            };\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: bitsmap_new,\n                rgt: bitsmap_new\n            };\n        } else {\n            var x = mode === 'set' ? {\n                _: 'Maybe.some',\n                value: val\n            } : mode === 'del' ? maybe_none : map.val;\n            obj[key] = {\n                _: 'BitsMap.tie',\n                val: x,\n                lft: map.lft,\n                rgt: map.rgt\n            };\n        }\n        return res.value;\n    };\n    const inst_unit = x => x(null);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c0;\n                return $2;\n            } else {\n                var $3 = c1;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c0;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c1($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');\n    const elim_bits = (x => {\n        var $14 = (() => c0 => c1 => c2 => {\n            var self = x;\n            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {\n                case 'o':\n                    var $9 = self.slice(0, -1);\n                    var $10 = c1($9);\n                    return $10;\n                case 'i':\n                    var $11 = self.slice(0, -1);\n                    var $12 = c2($11);\n                    return $12;\n                case 'e':\n                    var $13 = c0;\n                    return $13;\n            };\n        })();\n        return $14;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $15 = u16_to_word(self);\n                    var $16 = c0($15);\n                    return $16;\n            };\n        })();\n        return $17;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $20 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $18 = u32_to_word(self);\n                    var $19 = c0($18);\n                    return $19;\n            };\n        })();\n        return $20;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $23 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $21 = u64_to_word(self);\n                    var $22 = c0($21);\n                    return $22;\n            };\n        })();\n        return $23;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $28 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $24 = c0;\n                return $24;\n            } else {\n                var $25 = self.charCodeAt(0);\n                var $26 = self.slice(1);\n                var $27 = c1($25)($26);\n                return $27;\n            };\n        })();\n        return $28;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $32 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $29 = buffer32_to_depth(self);\n                    var $30 = buffer32_to_u32array(self);\n                    var $31 = c0($29)($30);\n                    return $31;\n            };\n        })();\n        return $32;\n    });\n\n    function App$Store$new$(_local$2, _global$3) {\n        var $33 = ({\n            _: 'App.Store.new',\n            'local': _local$2,\n            'global': _global$3\n        });\n        return $33;\n    };\n    const App$Store$new = x0 => x1 => App$Store$new$(x0, x1);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $34 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $34;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n    const App$State$new = Pair$new$(null, null);\n    const App$Playground$State = App$State$new;\n\n    function App$Playground$State$local$new$(_device$1, _window$2, _mouse_over$3, _code$4, _output$5, _kind_version$6) {\n        var $35 = ({\n            _: 'App.Playground.State.local.new',\n            'device': _device$1,\n            'window': _window$2,\n            'mouse_over': _mouse_over$3,\n            'code': _code$4,\n            'output': _output$5,\n            'kind_version': _kind_version$6\n        });\n        return $35;\n    };\n    const App$Playground$State$local$new = x0 => x1 => x2 => x3 => x4 => x5 => App$Playground$State$local$new$(x0, x1, x2, x3, x4, x5);\n    const Device$big_desktop = ({\n        _: 'Device.big_desktop'\n    });\n    const App$Playground$Window$input = ({\n        _: 'App.Playground.Window.input'\n    });\n    const App$Playground$State$local_empty = App$Playground$State$local$new$(Device$big_desktop, App$Playground$Window$input, \"\", \"\", \"\", \"\");\n    const Unit$new = null;\n\n    function DOM$node$(_tag$1, _props$2, _style$3, _children$4) {\n        var $36 = ({\n            _: 'DOM.node',\n            'tag': _tag$1,\n            'props': _props$2,\n            'style': _style$3,\n            'children': _children$4\n        });\n        return $36;\n    };\n    const DOM$node = x0 => x1 => x2 => x3 => DOM$node$(x0, x1, x2, x3);\n\n    function BitsMap$(_A$1) {\n        var $37 = null;\n        return $37;\n    };\n    const BitsMap = x0 => BitsMap$(x0);\n\n    function Map$(_V$1) {\n        var $38 = null;\n        return $38;\n    };\n    const Map = x0 => Map$(x0);\n    const BitsMap$new = ({\n        _: 'BitsMap.new'\n    });\n\n    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {\n        var $39 = ({\n            _: 'BitsMap.tie',\n            'val': _val$2,\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $39;\n    };\n    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);\n\n    function Maybe$some$(_value$2) {\n        var $40 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $40;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n    const BitsMap$set = a0 => a1 => a2 => (bitsmap_set(a0, a1, a2, 'set'));\n    const Bits$e = '';\n    const Bits$o = a0 => (a0 + '0');\n    const Bits$i = a0 => (a0 + '1');\n    const Bits$concat = a0 => a1 => (a1 + a0);\n\n    function Word$to_bits$(_a$2) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $42 = self.pred;\n                var $43 = (Word$to_bits$($42) + '0');\n                var $41 = $43;\n                break;\n            case 'Word.i':\n                var $44 = self.pred;\n                var $45 = (Word$to_bits$($44) + '1');\n                var $41 = $45;\n                break;\n            case 'Word.e':\n                var $46 = Bits$e;\n                var $41 = $46;\n                break;\n        };\n        return $41;\n    };\n    const Word$to_bits = x0 => Word$to_bits$(x0);\n\n    function Nat$succ$(_pred$1) {\n        var $47 = 1n + _pred$1;\n        return $47;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const U16$to_bits = a0 => (u16_to_bits(a0));\n\n    function String$to_bits$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $49 = Bits$e;\n            var $48 = $49;\n        } else {\n            var $50 = self.charCodeAt(0);\n            var $51 = self.slice(1);\n            var $52 = (String$to_bits$($51) + (u16_to_bits($50)));\n            var $48 = $52;\n        };\n        return $48;\n    };\n    const String$to_bits = x0 => String$to_bits$(x0);\n\n    function Map$from_list$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n            case 'List.cons':\n                var $54 = self.head;\n                var $55 = self.tail;\n                var self = $54;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $57 = self.fst;\n                        var $58 = self.snd;\n                        var $59 = (bitsmap_set(String$to_bits$($57), $58, Map$from_list$($55), 'set'));\n                        var $56 = $59;\n                        break;\n                };\n                var $53 = $56;\n                break;\n            case 'List.nil':\n                var $60 = BitsMap$new;\n                var $53 = $60;\n                break;\n        };\n        return $53;\n    };\n    const Map$from_list = x0 => Map$from_list$(x0);\n\n    function List$cons$(_head$2, _tail$3) {\n        var $61 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $61;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function Pair$(_A$1, _B$2) {\n        var $62 = null;\n        return $62;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n    const App$Playground$constant$light_gray_color = \"#E0E0E0\";\n    const App$Playground$constant$white_smoke = \"#F5F5F5\";\n\n    function DOM$text$(_value$1) {\n        var $63 = ({\n            _: 'DOM.text',\n            'value': _value$1\n        });\n        return $63;\n    };\n    const DOM$text = x0 => DOM$text$(x0);\n    const Bool$true = true;\n    const Bool$false = false;\n    const Bool$and = a0 => a1 => (a0 && a1);\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $65 = Bool$false;\n                var $64 = $65;\n                break;\n            case 'Cmp.eql':\n                var $66 = Bool$true;\n                var $64 = $66;\n                break;\n        };\n        return $64;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $68 = self.pred;\n                var $69 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $71 = self.pred;\n                            var $72 = (_a$pred$10 => {\n                                var $73 = Word$cmp$go$(_a$pred$10, $71, _c$4);\n                                return $73;\n                            });\n                            var $70 = $72;\n                            break;\n                        case 'Word.i':\n                            var $74 = self.pred;\n                            var $75 = (_a$pred$10 => {\n                                var $76 = Word$cmp$go$(_a$pred$10, $74, Cmp$ltn);\n                                return $76;\n                            });\n                            var $70 = $75;\n                            break;\n                        case 'Word.e':\n                            var $77 = (_a$pred$8 => {\n                                var $78 = _c$4;\n                                return $78;\n                            });\n                            var $70 = $77;\n                            break;\n                    };\n                    var $70 = $70($68);\n                    return $70;\n                });\n                var $67 = $69;\n                break;\n            case 'Word.i':\n                var $79 = self.pred;\n                var $80 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $82 = self.pred;\n                            var $83 = (_a$pred$10 => {\n                                var $84 = Word$cmp$go$(_a$pred$10, $82, Cmp$gtn);\n                                return $84;\n                            });\n                            var $81 = $83;\n                            break;\n                        case 'Word.i':\n                            var $85 = self.pred;\n                            var $86 = (_a$pred$10 => {\n                                var $87 = Word$cmp$go$(_a$pred$10, $85, _c$4);\n                                return $87;\n                            });\n                            var $81 = $86;\n                            break;\n                        case 'Word.e':\n                            var $88 = (_a$pred$8 => {\n                                var $89 = _c$4;\n                                return $89;\n                            });\n                            var $81 = $88;\n                            break;\n                    };\n                    var $81 = $81($79);\n                    return $81;\n                });\n                var $67 = $80;\n                break;\n            case 'Word.e':\n                var $90 = (_b$5 => {\n                    var $91 = _c$4;\n                    return $91;\n                });\n                var $67 = $90;\n                break;\n        };\n        var $67 = $67(_b$3);\n        return $67;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $92 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $92;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $93 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $93;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n    const U16$eql = a0 => a1 => (a0 === a1);\n    const String$eql = a0 => a1 => (a0 === a1);\n\n    function BitsMap$union$(_a$2, _b$3) {\n        var self = _a$2;\n        switch (self._) {\n            case 'BitsMap.tie':\n                var $95 = self.val;\n                var $96 = self.lft;\n                var $97 = self.rgt;\n                var self = _b$3;\n                switch (self._) {\n                    case 'BitsMap.tie':\n                        var $99 = self.val;\n                        var $100 = self.lft;\n                        var $101 = self.rgt;\n                        var self = $95;\n                        switch (self._) {\n                            case 'Maybe.none':\n                                var $103 = BitsMap$tie$($99, BitsMap$union$($96, $100), BitsMap$union$($97, $101));\n                                var $102 = $103;\n                                break;\n                            case 'Maybe.some':\n                                var $104 = BitsMap$tie$($95, BitsMap$union$($96, $100), BitsMap$union$($97, $101));\n                                var $102 = $104;\n                                break;\n                        };\n                        var $98 = $102;\n                        break;\n                    case 'BitsMap.new':\n                        var $105 = _a$2;\n                        var $98 = $105;\n                        break;\n                };\n                var $94 = $98;\n                break;\n            case 'BitsMap.new':\n                var $106 = _b$3;\n                var $94 = $106;\n                break;\n        };\n        return $94;\n    };\n    const BitsMap$union = x0 => x1 => BitsMap$union$(x0, x1);\n\n    function Map$union$(_a$2, _b$3) {\n        var $107 = BitsMap$union$(_a$2, _b$3);\n        return $107;\n    };\n    const Map$union = x0 => x1 => Map$union$(x0, x1);\n    const App$Kind$constant$secondary_color = \"#3891A6\";\n\n    function App$Playground$comp$btn$(_mouse_over$1, _id$2, _text$3) {\n        var _is_hover$4 = (_id$2 === _mouse_over$1);\n        var _normal$5 = Map$from_list$(List$cons$(Pair$new$(\"width\", \"50px\"), List$cons$(Pair$new$(\"height\", \"25px\"), List$cons$(Pair$new$(\"margin\", \"5px 0px\"), List$cons$(Pair$new$(\"color\", \"white\"), List$cons$(Pair$new$(\"cursor\", \"pointer\"), List$cons$(Pair$new$(\"border\", \"none\"), List$cons$(Pair$new$(\"border-radius\", \"4px\"), List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"justify-content\", \"center\"), List$cons$(Pair$new$(\"align-content\", \"center\"), List$cons$(Pair$new$(\"align-items\", \"center\"), List$nil))))))))))));\n        var $108 = DOM$node$(\"div\", Map$from_list$(List$cons$(Pair$new$(\"id\", _id$2), List$nil)), (() => {\n            var self = _is_hover$4;\n            if (self) {\n                var $109 = Map$union$(_normal$5, Map$from_list$(List$cons$(Pair$new$(\"background-color\", \"#44B8D3\"), List$nil)));\n                return $109;\n            } else {\n                var $110 = Map$union$(_normal$5, Map$from_list$(List$cons$(Pair$new$(\"background-color\", App$Kind$constant$secondary_color), List$nil)));\n                return $110;\n            };\n        })(), List$cons$(DOM$text$(_text$3), List$nil));\n        return $108;\n    };\n    const App$Playground$comp$btn = x0 => x1 => x2 => App$Playground$comp$btn$(x0, x1, x2);\n\n    function App$Playground$comp$header$(_device$1, _mouse_over$2, _window$3) {\n        var _playground$4 = DOM$node$(\"div\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"input_view\"), List$nil)), Map$from_list$(List$cons$(Pair$new$(\"font-size\", \"14px\"), List$cons$(Pair$new$(\"height\", \"35px\"), List$cons$(Pair$new$(\"padding\", \"8px 15px 0px 15px\"), List$cons$(Pair$new$(\"background-color\", (() => {\n            var self = _window$3;\n            switch (self._) {\n                case 'App.Playground.Window.input':\n                    var $112 = App$Playground$constant$light_gray_color;\n                    return $112;\n                case 'App.Playground.Window.terminal':\n                    var $113 = App$Playground$constant$white_smoke;\n                    return $113;\n            };\n        })()), List$cons$(Pair$new$(\"display\", \"flex\"), List$nil)))))), List$cons$(DOM$text$(\"playground.kind\"), List$nil));\n        var _btn_check$5 = App$Playground$comp$btn$(_mouse_over$2, \"btn_type_check\", \"check\");\n        var _btn_run$6 = App$Playground$comp$btn$(_mouse_over$2, \"btn_run_code\", \"run\");\n        var _style_header$7 = Map$from_list$(List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"flex-direction\", \"row\"), List$cons$(Pair$new$(\"justify-content\", \"space-between\"), List$cons$(Pair$new$(\"align-content\", \"center\"), List$cons$(Pair$new$(\"justify-content\", \"center\"), List$nil))))));\n        var _btn_area$8 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"width\", \"120px\"), List$cons$(Pair$new$(\"flex-direction\", \"row\"), List$cons$(Pair$new$(\"justify-content\", \"space-between\"), List$nil))))), List$cons$(_btn_check$5, List$cons$(_btn_run$6, List$nil)));\n        var self = _device$1;\n        switch (self._) {\n            case 'Device.phone':\n                var _terminal$9 = DOM$node$(\"div\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"terminal_view\"), List$nil)), Map$from_list$(List$cons$(Pair$new$(\"font-size\", \"14px\"), List$cons$(Pair$new$(\"height\", \"35px\"), List$cons$(Pair$new$(\"padding\", \"8px 15px 0px 15px\"), List$cons$(Pair$new$(\"background-color\", (() => {\n                    var self = _window$3;\n                    switch (self._) {\n                        case 'App.Playground.Window.input':\n                            var $115 = App$Playground$constant$white_smoke;\n                            return $115;\n                        case 'App.Playground.Window.terminal':\n                            var $116 = App$Playground$constant$light_gray_color;\n                            return $116;\n                    };\n                })()), List$cons$(Pair$new$(\"display\", \"flex\"), List$nil)))))), List$cons$(DOM$text$(\"output\"), List$nil));\n                var $114 = DOM$node$(\"div\", Map$from_list$(List$nil), _style_header$7, List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"justify-content\", \"flex-start\"), List$cons$(Pair$new$(\"flex-direction\", \"row\"), List$nil)))), List$cons$(_playground$4, List$cons$(_terminal$9, List$nil))), List$cons$(_btn_area$8, List$nil)));\n                var $111 = $114;\n                break;\n            case 'Device.tablet':\n            case 'Device.desktop':\n            case 'Device.big_desktop':\n                var $117 = DOM$node$(\"div\", Map$from_list$(List$nil), _style_header$7, List$cons$(_playground$4, List$cons$(_btn_area$8, List$nil)));\n                var $111 = $117;\n                break;\n        };\n        return $111;\n    };\n    const App$Playground$comp$header = x0 => x1 => x2 => App$Playground$comp$header$(x0, x1, x2);\n\n    function String$cons$(_head$1, _tail$2) {\n        var $118 = (String.fromCharCode(_head$1) + _tail$2);\n        return $118;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function App$Playground$comp$input$(_code$1) {\n        var $119 = DOM$node$(\"textarea\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"input_code\"), List$cons$(Pair$new$(\"placeholder\", \"Write Kind code in this online editor and run it <3\"), List$nil))), Map$from_list$(List$cons$(Pair$new$(\"cols\", \"100\"), List$cons$(Pair$new$(\"height\", \"100%\"), List$cons$(Pair$new$(\"border\", (\"solid 5px \" + App$Playground$constant$light_gray_color)), List$cons$(Pair$new$(\"resize\", \"none\"), List$cons$(Pair$new$(\"padding\", \"10px\"), List$nil)))))), List$cons$(DOM$text$(_code$1), List$nil));\n        return $119;\n    };\n    const App$Playground$comp$input = x0 => App$Playground$comp$input$(x0);\n\n    function App$Playground$comp$output_area$(_output$1, _device$2) {\n        var _style$3 = Map$from_list$(List$cons$(Pair$new$(\"width\", \"400px\"), List$cons$(Pair$new$(\"max-width\", \"500px\"), List$cons$(Pair$new$(\"overflow\", \"auto\"), List$cons$(Pair$new$(\"padding\", \"10px\"), List$cons$(Pair$new$(\"background-color\", App$Playground$constant$light_gray_color), List$nil))))));\n        var $120 = DOM$node$(\"div\", Map$from_list$(List$nil), (() => {\n            var self = _device$2;\n            switch (self._) {\n                case 'Device.phone':\n                    var $121 = Map$union$(_style$3, Map$from_list$(List$cons$(Pair$new$(\"height\", \"100%\"), List$cons$(Pair$new$(\"margin-top\", \"0px\"), List$nil))));\n                    return $121;\n                case 'Device.tablet':\n                case 'Device.desktop':\n                case 'Device.big_desktop':\n                    var $122 = Map$union$(_style$3, Map$from_list$(List$cons$(Pair$new$(\"height\", \"100% - 35px\"), List$cons$(Pair$new$(\"margin-top\", \"35px\"), List$nil))));\n                    return $122;\n            };\n        })(), List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), List$cons$(DOM$text$(\"kind-lang@1.0.51\"), List$nil)), List$cons$(DOM$node$(\"pre\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"margin-top\", \"10px\"), List$nil)), List$cons$(DOM$text$(_output$1), List$nil)), List$nil)));\n        return $120;\n    };\n    const App$Playground$comp$output_area = x0 => x1 => App$Playground$comp$output_area$(x0, x1);\n\n    function App$Playground$comp$main_area$(_stt$1) {\n        var self = _stt$1;\n        switch (self._) {\n            case 'App.Playground.State.local.new':\n                var $124 = self.device;\n                var $125 = self.window;\n                var $126 = self.mouse_over;\n                var $127 = self.code;\n                var $128 = self.output;\n                var _header$8 = App$Playground$comp$header$($124, $126, $125);\n                var _input_view$9 = App$Playground$comp$input$($127);\n                var _output_view$10 = App$Playground$comp$output_area$($128, $124);\n                var self = $124;\n                switch (self._) {\n                    case 'Device.phone':\n                        var $130 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"width\", \"100%\"), List$cons$(Pair$new$(\"height\", \"100%\"), List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"flex-direction\", \"column\"), List$nil))))), List$cons$(_header$8, List$cons$((() => {\n                            var self = $125;\n                            switch (self._) {\n                                case 'App.Playground.Window.input':\n                                    var $131 = _input_view$9;\n                                    return $131;\n                                case 'App.Playground.Window.terminal':\n                                    var $132 = _output_view$10;\n                                    return $132;\n                            };\n                        })(), List$nil)));\n                        var $129 = $130;\n                        break;\n                    case 'Device.tablet':\n                    case 'Device.desktop':\n                    case 'Device.big_desktop':\n                        var $133 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"width\", \"100%\"), List$cons$(Pair$new$(\"height\", \"100%\"), List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"flex-direction\", \"row\"), List$nil))))), List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"display\", \"flex\"), List$cons$(Pair$new$(\"flex-direction\", \"column\"), List$cons$(Pair$new$(\"width\", \"60%\"), List$nil)))), List$cons$(_header$8, List$cons$(_input_view$9, List$nil))), List$cons$(_output_view$10, List$nil)));\n                        var $129 = $133;\n                        break;\n                };\n                var $123 = $129;\n                break;\n        };\n        return $123;\n    };\n    const App$Playground$comp$main_area = x0 => App$Playground$comp$main_area$(x0);\n\n    function App$Playground$draw$(_stt$1) {\n        var self = _stt$1;\n        switch (self._) {\n            case 'App.Playground.State.local.new':\n                var $135 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$cons$(Pair$new$(\"width\", \"100%\"), List$cons$(Pair$new$(\"height\", \"100%\"), List$cons$(Pair$new$(\"margin\", \"20px 0x\"), List$cons$(Pair$new$(\"display\", \"flex\"), List$nil))))), List$cons$(App$Playground$comp$main_area$(_stt$1), List$nil));\n                var $134 = $135;\n                break;\n        };\n        return $134;\n    };\n    const App$Playground$draw = x0 => App$Playground$draw$(x0);\n\n    function App$playground$body$(_stt$1) {\n        var self = _stt$1;\n        switch (self._) {\n            case 'App.Playground.State.local.new':\n                var $137 = self.device;\n                var self = $137;\n                switch (self._) {\n                    case 'Device.phone':\n                        var $139 = DOM$node$(\"div\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"page\"), List$nil)), Map$from_list$(List$cons$(Pair$new$(\"margin\", \"10px\"), List$cons$(Pair$new$(\"height\", \"300px\"), List$nil))), List$cons$(App$Playground$draw$(_stt$1), List$nil));\n                        var $138 = $139;\n                        break;\n                    case 'Device.tablet':\n                    case 'Device.desktop':\n                    case 'Device.big_desktop':\n                        var $140 = DOM$node$(\"div\", Map$from_list$(List$cons$(Pair$new$(\"id\", \"page\"), List$nil)), Map$from_list$(List$cons$(Pair$new$(\"margin\", \"100px\"), List$cons$(Pair$new$(\"height\", \"500px\"), List$nil))), List$cons$(App$Playground$draw$(_stt$1), List$nil));\n                        var $138 = $140;\n                        break;\n                };\n                var $136 = $138;\n                break;\n        };\n        return $136;\n    };\n    const App$playground$body = x0 => App$playground$body$(x0);\n\n    function Pair$fst$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $142 = self.fst;\n                var $143 = $142;\n                var $141 = $143;\n                break;\n        };\n        return $141;\n    };\n    const Pair$fst = x0 => Pair$fst$(x0);\n    const App$State$local = Pair$fst;\n\n    function IO$(_A$1) {\n        var $144 = null;\n        return $144;\n    };\n    const IO = x0 => IO$(x0);\n\n    function Maybe$(_A$1) {\n        var $145 = null;\n        return $145;\n    };\n    const Maybe = x0 => Maybe$(x0);\n\n    function IO$ask$(_query$2, _param$3, _then$4) {\n        var $146 = ({\n            _: 'IO.ask',\n            'query': _query$2,\n            'param': _param$3,\n            'then': _then$4\n        });\n        return $146;\n    };\n    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);\n\n    function IO$bind$(_a$3, _f$4) {\n        var self = _a$3;\n        switch (self._) {\n            case 'IO.end':\n                var $148 = self.value;\n                var $149 = _f$4($148);\n                var $147 = $149;\n                break;\n            case 'IO.ask':\n                var $150 = self.query;\n                var $151 = self.param;\n                var $152 = self.then;\n                var $153 = IO$ask$($150, $151, (_x$8 => {\n                    var $154 = IO$bind$($152(_x$8), _f$4);\n                    return $154;\n                }));\n                var $147 = $153;\n                break;\n        };\n        return $147;\n    };\n    const IO$bind = x0 => x1 => IO$bind$(x0, x1);\n\n    function IO$end$(_value$2) {\n        var $155 = ({\n            _: 'IO.end',\n            'value': _value$2\n        });\n        return $155;\n    };\n    const IO$end = x0 => IO$end$(x0);\n\n    function IO$monad$(_new$2) {\n        var $156 = _new$2(IO$bind)(IO$end);\n        return $156;\n    };\n    const IO$monad = x0 => IO$monad$(x0);\n    const App$pass = IO$monad$((_m$bind$2 => _m$pure$3 => {\n        var $157 = _m$pure$3;\n        return $157;\n    }))(Maybe$none);\n\n    function Cmp$as_lte$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.eql':\n                var $159 = Bool$true;\n                var $158 = $159;\n                break;\n            case 'Cmp.gtn':\n                var $160 = Bool$false;\n                var $158 = $160;\n                break;\n        };\n        return $158;\n    };\n    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);\n\n    function Word$lte$(_a$2, _b$3) {\n        var $161 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));\n        return $161;\n    };\n    const Word$lte = x0 => x1 => Word$lte$(x0, x1);\n    const U32$lte = a0 => a1 => (a0 <= a1);\n\n    function U32$new$(_value$1) {\n        var $162 = word_to_u32(_value$1);\n        return $162;\n    };\n    const U32$new = x0 => U32$new$(x0);\n\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _f$3, _x$4]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [_n$2, _f$3, _x$4];\n        while (true) {\n            let [_n$2, _f$3, _x$4] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $163 = _x$4;\n                    return $163;\n                } else {\n                    var $164 = (self - 1n);\n                    var $165 = Nat$apply$($164, _f$3, _f$3(_x$4));\n                    return $165;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n\n    function Word$(_size$1) {\n        var $166 = null;\n        return $166;\n    };\n    const Word = x0 => Word$(x0);\n    const Word$e = ({\n        _: 'Word.e'\n    });\n\n    function Word$i$(_pred$2) {\n        var $167 = ({\n            _: 'Word.i',\n            'pred': _pred$2\n        });\n        return $167;\n    };\n    const Word$i = x0 => Word$i$(x0);\n\n    function Word$o$(_pred$2) {\n        var $168 = ({\n            _: 'Word.o',\n            'pred': _pred$2\n        });\n        return $168;\n    };\n    const Word$o = x0 => Word$o$(x0);\n\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $170 = self.pred;\n                var $171 = Word$i$($170);\n                var $169 = $171;\n                break;\n            case 'Word.i':\n                var $172 = self.pred;\n                var $173 = Word$o$(Word$inc$($172));\n                var $169 = $173;\n                break;\n            case 'Word.e':\n                var $174 = Word$e;\n                var $169 = $174;\n                break;\n        };\n        return $169;\n    };\n    const Word$inc = x0 => Word$inc$(x0);\n\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $176 = Word$e;\n            var $175 = $176;\n        } else {\n            var $177 = (self - 1n);\n            var $178 = Word$o$(Word$zero$($177));\n            var $175 = $178;\n        };\n        return $175;\n    };\n    const Word$zero = x0 => Word$zero$(x0);\n\n    function Nat$to_word$(_size$1, _n$2) {\n        var $179 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));\n        return $179;\n    };\n    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);\n    const Nat$to_u32 = a0 => (Number(a0) >>> 0);\n    const Device$phone = ({\n        _: 'Device.phone'\n    });\n    const Device$tablet = ({\n        _: 'Device.tablet'\n    });\n    const Device$desktop = ({\n        _: 'Device.desktop'\n    });\n\n    function Device$classify$(_width$1) {\n        var self = (_width$1 <= 600);\n        if (self) {\n            var $181 = Device$phone;\n            var $180 = $181;\n        } else {\n            var self = (_width$1 <= 768);\n            if (self) {\n                var $183 = Device$tablet;\n                var $182 = $183;\n            } else {\n                var self = (_width$1 <= 992);\n                if (self) {\n                    var $185 = Device$desktop;\n                    var $184 = $185;\n                } else {\n                    var $186 = Device$big_desktop;\n                    var $184 = $186;\n                };\n                var $182 = $184;\n            };\n            var $180 = $182;\n        };\n        return $180;\n    };\n    const Device$classify = x0 => Device$classify$(x0);\n\n    function App$set_local$(_value$2) {\n        var $187 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n            var $188 = _m$pure$4;\n            return $188;\n        }))(Maybe$some$(_value$2));\n        return $187;\n    };\n    const App$set_local = x0 => App$set_local$(x0);\n\n    function App$Playground$set_mouse_over$(_id$1, _stt$2) {\n        var self = _stt$2;\n        switch (self._) {\n            case 'App.Playground.State.local.new':\n                var $190 = self.device;\n                var $191 = self.window;\n                var $192 = self.code;\n                var $193 = self.output;\n                var $194 = self.kind_version;\n                var $195 = App$Playground$State$local$new$($190, $191, _id$1, $192, $193, $194);\n                var $189 = $195;\n                break;\n        };\n        return $189;\n    };\n    const App$Playground$set_mouse_over = x0 => x1 => App$Playground$set_mouse_over$(x0, x1);\n    const App$Playground$Window$terminal = ({\n        _: 'App.Playground.Window.terminal'\n    });\n\n    function String$is_empty$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $197 = Bool$true;\n            var $196 = $197;\n        } else {\n            var $198 = self.charCodeAt(0);\n            var $199 = self.slice(1);\n            var $200 = Bool$false;\n            var $196 = $200;\n        };\n        return $196;\n    };\n    const String$is_empty = x0 => String$is_empty$(x0);\n\n    function App$Playground$set_output$(_output$1, _state$2) {\n        var self = _state$2;\n        switch (self._) {\n            case 'App.Playground.State.local.new':\n                var $202 = self.device;\n                var $203 = self.window;\n                var $204 = self.mouse_over;\n                var $205 = self.code;\n                var $206 = self.kind_version;\n                var $207 = App$Playground$State$local$new$($202, $203, $204, $205, _output$1, $206);\n                var $201 = $207;\n                break;\n        };\n        return $201;\n    };\n    const App$Playground$set_output = x0 => x1 => App$Playground$set_output$(x0, x1);\n\n    function IO$request$(_url$1) {\n        var $208 = IO$ask$(\"request\", _url$1, (_text$2 => {\n            var $209 = IO$end$(_text$2);\n            return $209;\n        }));\n        return $208;\n    };\n    const IO$request = x0 => IO$request$(x0);\n\n    function App$Playground$set_window$(_window$1, _state$2) {\n        var self = _state$2;\n        switch (self._) {\n            case 'App.Playground.State.local.new':\n                var $211 = self.device;\n                var $212 = self.mouse_over;\n                var $213 = self.code;\n                var $214 = self.output;\n                var $215 = self.kind_version;\n                var $216 = App$Playground$State$local$new$($211, _window$1, $212, $213, $214, $215);\n                var $210 = $216;\n                break;\n        };\n        return $210;\n    };\n    const App$Playground$set_window = x0 => x1 => App$Playground$set_window$(x0, x1);\n\n    function App$Playground$set_code$(_input$1, _state$2) {\n        var self = _state$2;\n        switch (self._) {\n            case 'App.Playground.State.local.new':\n                var $218 = self.device;\n                var $219 = self.window;\n                var $220 = self.mouse_over;\n                var $221 = self.output;\n                var $222 = self.kind_version;\n                var $223 = App$Playground$State$local$new$($218, $219, $220, _input$1, $221, $222);\n                var $217 = $223;\n                break;\n        };\n        return $217;\n    };\n    const App$Playground$set_code = x0 => x1 => App$Playground$set_code$(x0, x1);\n\n    function App$Playground$when$(_event$1, _stt$2) {\n        var self = _stt$2;\n        switch (self._) {\n            case 'App.Store.new':\n                var $225 = self.local;\n                var $226 = $225;\n                var _state$3 = $226;\n                break;\n        };\n        var self = _state$3;\n        switch (self._) {\n            case 'App.Playground.State.local.new':\n                var $227 = self.device;\n                var $228 = self.code;\n                var self = _event$1;\n                switch (self._) {\n                    case 'App.Event.frame':\n                        var $230 = self.info;\n                        var self = $230;\n                        switch (self._) {\n                            case 'App.EnvInfo.new':\n                                var $232 = self.screen_size;\n                                var self = $232;\n                                switch (self._) {\n                                    case 'Pair.new':\n                                        var $234 = self.fst;\n                                        var _device$16 = Device$classify$($234);\n                                        var self = _state$3;\n                                        switch (self._) {\n                                            case 'App.Playground.State.local.new':\n                                                var $236 = self.window;\n                                                var $237 = self.mouse_over;\n                                                var $238 = self.code;\n                                                var $239 = self.output;\n                                                var $240 = self.kind_version;\n                                                var $241 = App$Playground$State$local$new$(_device$16, $236, $237, $238, $239, $240);\n                                                var _stt$17 = $241;\n                                                break;\n                                        };\n                                        var $235 = App$set_local$(_stt$17);\n                                        var $233 = $235;\n                                        break;\n                                };\n                                var $231 = $233;\n                                break;\n                        };\n                        var $229 = $231;\n                        break;\n                    case 'App.Event.mouse_over':\n                        var $242 = self.id;\n                        var $243 = App$set_local$(App$Playground$set_mouse_over$($242, _state$3));\n                        var $229 = $243;\n                        break;\n                    case 'App.Event.mouse_click':\n                        var $244 = self.id;\n                        var self = $227;\n                        switch (self._) {\n                            case 'Device.phone':\n                                var $246 = App$Playground$Window$terminal;\n                                var _window$13 = $246;\n                                break;\n                            case 'Device.tablet':\n                            case 'Device.desktop':\n                            case 'Device.big_desktop':\n                                var $247 = App$Playground$Window$input;\n                                var _window$13 = $247;\n                                break;\n                        };\n                        var self = ($244 === \"btn_type_check\");\n                        if (self) {\n                            var self = String$is_empty$($228);\n                            if (self) {\n                                var _stt$14 = App$Playground$set_output$(\"How can I type check an empty code? haha\", _state$3);\n                                var $249 = App$set_local$(_stt$14);\n                                var $248 = $249;\n                            } else {\n                                var $250 = IO$monad$((_m$bind$14 => _m$pure$15 => {\n                                    var $251 = _m$bind$14;\n                                    return $251;\n                                }))(IO$request$((\"http://localhost:3030/api/check_term?code=\" + $228)))((_checked$14 => {\n                                    var _stt$15 = App$Playground$set_output$(_checked$14, _state$3);\n                                    var _stt$16 = App$Playground$set_window$(_window$13, _stt$15);\n                                    var $252 = App$set_local$(_stt$16);\n                                    return $252;\n                                }));\n                                var $248 = $250;\n                            };\n                            var $245 = $248;\n                        } else {\n                            var self = ($244 === \"btn_run_code\");\n                            if (self) {\n                                var self = String$is_empty$($228);\n                                if (self) {\n                                    var self = _state$3;\n                                    switch (self._) {\n                                        case 'App.Playground.State.local.new':\n                                            var $256 = self.device;\n                                            var $257 = self.window;\n                                            var $258 = self.mouse_over;\n                                            var $259 = self.code;\n                                            var $260 = self.kind_version;\n                                            var $261 = App$Playground$State$local$new$($256, $257, $258, $259, \"How can I type check an empty code? haha\", $260);\n                                            var _stt$14 = $261;\n                                            break;\n                                    };\n                                    var $255 = App$set_local$(_stt$14);\n                                    var $254 = $255;\n                                } else {\n                                    var $262 = IO$monad$((_m$bind$14 => _m$pure$15 => {\n                                        var $263 = _m$bind$14;\n                                        return $263;\n                                    }))(IO$request$((\"http://localhost:3030/api/run_term?code=\" + $228)))((_checked$14 => {\n                                        var _stt$15 = App$Playground$set_output$(_checked$14, _state$3);\n                                        var _stt$16 = App$Playground$set_window$(_window$13, _stt$15);\n                                        var $264 = App$set_local$(_stt$16);\n                                        return $264;\n                                    }));\n                                    var $254 = $262;\n                                };\n                                var $253 = $254;\n                            } else {\n                                var self = ($244 === \"terminal_view\");\n                                if (self) {\n                                    var _stt$14 = App$Playground$set_window$(App$Playground$Window$terminal, _state$3);\n                                    var $266 = App$set_local$(_stt$14);\n                                    var $265 = $266;\n                                } else {\n                                    var self = ($244 === \"input_view\");\n                                    if (self) {\n                                        var _stt$14 = App$Playground$set_window$(App$Playground$Window$input, _state$3);\n                                        var $268 = App$set_local$(_stt$14);\n                                        var $267 = $268;\n                                    } else {\n                                        var $269 = App$pass;\n                                        var $267 = $269;\n                                    };\n                                    var $265 = $267;\n                                };\n                                var $253 = $265;\n                            };\n                            var $245 = $253;\n                        };\n                        var $229 = $245;\n                        break;\n                    case 'App.Event.input':\n                        var $270 = self.id;\n                        var $271 = self.text;\n                        var self = ($270 === \"input_code\");\n                        if (self) {\n                            var $273 = App$set_local$(App$Playground$set_code$($271, _state$3));\n                            var $272 = $273;\n                        } else {\n                            var $274 = App$pass;\n                            var $272 = $274;\n                        };\n                        var $229 = $272;\n                        break;\n                    case 'App.Event.init':\n                    case 'App.Event.mouse_down':\n                    case 'App.Event.mouse_up':\n                    case 'App.Event.key_down':\n                    case 'App.Event.key_up':\n                        var $275 = App$pass;\n                        var $229 = $275;\n                        break;\n                };\n                var $224 = $229;\n                break;\n        };\n        return $224;\n    };\n    const App$Playground$when = x0 => x1 => App$Playground$when$(x0, x1);\n\n    function App$new$(_init$2, _draw$3, _when$4, _tick$5, _post$6) {\n        var $276 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4,\n            'tick': _tick$5,\n            'post': _post$6\n        });\n        return $276;\n    };\n    const App$new = x0 => x1 => x2 => x3 => x4 => App$new$(x0, x1, x2, x3, x4);\n    const App$Playground = (() => {\n        var _init$1 = App$Store$new$(App$Playground$State$local_empty, Unit$new);\n        var _draw$2 = (_state$2 => {\n            var $278 = App$playground$body$((() => {\n                var self = _state$2;\n                switch (self._) {\n                    case 'App.Store.new':\n                        var $279 = self.local;\n                        var $280 = $279;\n                        return $280;\n                };\n            })());\n            return $278;\n        });\n        var _when$3 = App$Playground$when;\n        var _tick$4 = (_tick$4 => _glob$5 => {\n            var $281 = _glob$5;\n            return $281;\n        });\n        var _post$5 = (_time$5 => _room$6 => _addr$7 => _data$8 => _glob$9 => {\n            var $282 = _glob$9;\n            return $282;\n        });\n        var $277 = App$new$(_init$1, _draw$2, _when$3, _tick$4, _post$5);\n        return $277;\n    })();\n    return {\n        'App.Store.new': App$Store$new,\n        'Pair.new': Pair$new,\n        'App.State.new': App$State$new,\n        'App.Playground.State': App$Playground$State,\n        'App.Playground.State.local.new': App$Playground$State$local$new,\n        'Device.big_desktop': Device$big_desktop,\n        'App.Playground.Window.input': App$Playground$Window$input,\n        'App.Playground.State.local_empty': App$Playground$State$local_empty,\n        'Unit.new': Unit$new,\n        'DOM.node': DOM$node,\n        'BitsMap': BitsMap,\n        'Map': Map,\n        'BitsMap.new': BitsMap$new,\n        'BitsMap.tie': BitsMap$tie,\n        'Maybe.some': Maybe$some,\n        'Maybe.none': Maybe$none,\n        'BitsMap.set': BitsMap$set,\n        'Bits.e': Bits$e,\n        'Bits.o': Bits$o,\n        'Bits.i': Bits$i,\n        'Bits.concat': Bits$concat,\n        'Word.to_bits': Word$to_bits,\n        'Nat.succ': Nat$succ,\n        'Nat.zero': Nat$zero,\n        'U16.to_bits': U16$to_bits,\n        'String.to_bits': String$to_bits,\n        'Map.from_list': Map$from_list,\n        'List.cons': List$cons,\n        'Pair': Pair,\n        'List.nil': List$nil,\n        'App.Playground.constant.light_gray_color': App$Playground$constant$light_gray_color,\n        'App.Playground.constant.white_smoke': App$Playground$constant$white_smoke,\n        'DOM.text': DOM$text,\n        'Bool.true': Bool$true,\n        'Bool.false': Bool$false,\n        'Bool.and': Bool$and,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.eql': Word$eql,\n        'U16.eql': U16$eql,\n        'String.eql': String$eql,\n        'BitsMap.union': BitsMap$union,\n        'Map.union': Map$union,\n        'App.Kind.constant.secondary_color': App$Kind$constant$secondary_color,\n        'App.Playground.comp.btn': App$Playground$comp$btn,\n        'App.Playground.comp.header': App$Playground$comp$header,\n        'String.cons': String$cons,\n        'String.concat': String$concat,\n        'App.Playground.comp.input': App$Playground$comp$input,\n        'App.Playground.comp.output_area': App$Playground$comp$output_area,\n        'App.Playground.comp.main_area': App$Playground$comp$main_area,\n        'App.Playground.draw': App$Playground$draw,\n        'App.playground.body': App$playground$body,\n        'Pair.fst': Pair$fst,\n        'App.State.local': App$State$local,\n        'IO': IO,\n        'Maybe': Maybe,\n        'IO.ask': IO$ask,\n        'IO.bind': IO$bind,\n        'IO.end': IO$end,\n        'IO.monad': IO$monad,\n        'App.pass': App$pass,\n        'Cmp.as_lte': Cmp$as_lte,\n        'Word.lte': Word$lte,\n        'U32.lte': U32$lte,\n        'U32.new': U32$new,\n        'Nat.apply': Nat$apply,\n        'Word': Word,\n        'Word.e': Word$e,\n        'Word.i': Word$i,\n        'Word.o': Word$o,\n        'Word.inc': Word$inc,\n        'Word.zero': Word$zero,\n        'Nat.to_word': Nat$to_word,\n        'Nat.to_u32': Nat$to_u32,\n        'Device.phone': Device$phone,\n        'Device.tablet': Device$tablet,\n        'Device.desktop': Device$desktop,\n        'Device.classify': Device$classify,\n        'App.set_local': App$set_local,\n        'App.Playground.set_mouse_over': App$Playground$set_mouse_over,\n        'App.Playground.Window.terminal': App$Playground$Window$terminal,\n        'String.is_empty': String$is_empty,\n        'App.Playground.set_output': App$Playground$set_output,\n        'IO.request': IO$request,\n        'App.Playground.set_window': App$Playground$set_window,\n        'App.Playground.set_code': App$Playground$set_code,\n        'App.Playground.when': App$Playground$when,\n        'App.new': App$new,\n        'App.Playground': App$Playground,\n    };\n})();"],"sourceRoot":""}
>>>>>>> Stashed changes
