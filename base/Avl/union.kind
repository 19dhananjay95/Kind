Avl.union<K: Type, V: Type>(
  cmp  : K -> K -> Cmp,
  map_a: Avl<K,V>, 
  map_b: Avl<K,V>
) : Avl<K,V>
  
  case map_a {
    tip: case map_b {
      tip: Avl.tip<K,V>,
      bin: map_b
    },
    bin: case map_b {
      tip: map_a,
      bin:  
        let key   = map_b.key 
        let val   = map_b.val 
        let ltn   = Avl.split_ltn<K,V>(cmp, map_b.key, map_a)
        let gtn   = Avl.split_gtn<K,V>(cmp, map_b.key, map_a)
        let left  = Avl.union<K,V>(cmp, ltn, map_b.left)
        let right = Avl.union<K,V>(cmp, gtn, map_b.right)
        Avl.concat3<K,V>(cmp, key, val, left, right)
    }
  }