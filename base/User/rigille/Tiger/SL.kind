// straight-line programs Type and (very inefficient) interpreter
// statement
type User.rigille.Tiger.SL.Stm {
  CompoundStm(fst: User.rigille.Tiger.SL.Stm, snd: User.rigille.Tiger.SL.Stm)
  AssignStm(id: String, exp: User.rigille.Tiger.SL.Exp)
  PrintStm(exp_list: List<User.rigille.Tiger.SL.Exp>)
}

// expression
type User.rigille.Tiger.SL.Exp {
  IdExp(id: String)
  NumExp(num: Int) // #TODO include other numbers?
  OpExp(op: User.rigille.Tiger.SL.Binop, fst: User.rigille.Tiger.SL.Exp, snd: User.rigille.Tiger.SL.Exp)
  EseqExp(stm: User.rigille.Tiger.SL.Stm, exp: User.rigille.Tiger.SL.Exp)
}

type User.rigille.Tiger.SL.ExpList {
  PairExpList(head: User.rigille.Tiger.SL.Exp, tail: User.rigille.Tiger.SL.ExpList)
  LastExpList(head: User.rigille.Tiger.SL.Exp)
}

type User.rigille.Tiger.SL.Binop {
  plus
  minus
  times
  div
}

maxargs(stm: User.rigille.Tiger.SL.Stm): Nat
  case stm {
    CompoundStm: Nat.max(maxargs(stm.fst), maxargs(stm.snd))
    AssignStm: 0
    PrintStm: List.length!(stm.exp_list)
  }

User.rigille.Tiger.SL.interpStm(stm: User.rigille.Tiger.SL.Stm, table: List<Pair<String, Int>>): List<Pair<String, Int>>
  case stm {
    CompoundStm:
      let new_table = User.rigille.Tiger.SL.interpStm(stm.fst, table)
      User.rigille.Tiger.SL.interpStm(stm.snd, new_table)
    AssignStm:
      let {i, new_table} = User.rigille.Tiger.SL.interpExp(stm.exp, table)
      {stm.id, i} & new_table
    PrintStm:
      for exp in stm.exp_list with table:
        let {i, table} = User.rigille.Tiger.SL.interpExp(exp, table)
        log(Int.show(i))
        table
      table
  }

User.rigille.Tiger.SL.lookup(id: String, table: List<Pair<String, Int>>): Int
  case table {
    nil:
      0 :: Int
    cons:
      let {table_id, val} = table.head
      if id =? table_id then
        val
      else
        User.rigille.Tiger.SL.lookup(id, table.tail)
  }

User.rigille.Tiger.SL.interpExp(exp: User.rigille.Tiger.SL.Exp, table: List<Pair<String, Int>>): Pair<Int, List<Pair<String, Int>>>
  case exp {
    IdExp:
      {User.rigille.Tiger.SL.lookup(exp.id, table), table}
    NumExp:
      {exp.num, table}
    OpExp:
      let {fst_val, table} = User.rigille.Tiger.SL.interpExp(exp.fst, table)
      let {snd_val, table} = User.rigille.Tiger.SL.interpExp(exp.snd, table)
      case exp.op {
        plus:
          {fst_val + snd_val, table}
        minus:
          {fst_val - snd_val, table}
        times:
          {fst_val * snd_val, table}
        div:
          {fst_val / snd_val, table}
      }
    EseqExp:
      let table = User.rigille.Tiger.SL.interpStm(exp.stm, table)
      User.rigille.Tiger.SL.interpExp(exp.exp, table)
  }

