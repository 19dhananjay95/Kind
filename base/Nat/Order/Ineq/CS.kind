
// Vector.dot_nat_expan(
//   n: Nat
//   u: Vector<Nat>(n) 
//   v: Vector<Nat>(n)
// ): (Nat.mul(u.head,v.head) + Vector.dot_nat(n.pred, u.tail, v.tail)) == Vector.dot_nat(u, v)
//   ?b

// Nat.Order.cauchy(
//   n: Nat
//   u: Vector<Nat>(n)
//   v: Vector<Nat>(n)
// ):   Nat.lte(
//        Nat.pow(Vector.dot_nat(n, u, v), 2)
//        Nat.mul(Vector.dot_nat(n, u, u), Vector.dot_nat(n, v, v)))
//      == true
//   let lam =
//     case n {
//       zero:
//         (u, v)
//         refl
//       succ:
//         (u, v)
//           open u
//           open v
//           let HI = Nat.Order.cauchy(n.pred, u.tail, v.tail)
//           let H1 = Nat.Order.add.right!!(Nat.add(Nat.pow(Nat.mul(u.head, v.head),2), Nat.double(Nat.mul(Vector.dot_nat(n.pred, u.tail, v.tail), Nat.mul(u.head, v.head)))), HI)
//           let H2 = H1 :: rewrite X in (Nat.lte(X, _) == _) with mirror(Nat.square_sum!!) 
//           let H3 = H2 :: rewrite X in (Nat.lte(Nat.pow(X, 2), _)==_) with Nat.add.comm!!
//           let H4 = Nat.Order.cauchy_lemma(v.head, u.head, n.pred, u.tail, v.tail, HI)
//           let H5 = Nat.Order.add.left!!(Nat.pow(Nat.mul(u.head,v.head),2), H4)
//           let H6 = Nat.Order.add.left!!(Nat.mul(Vector.dot_nat(n.pred,u.tail,u.tail),Vector.dot_nat(n.pred,v.tail,v.tail)), H5)
//           let H7 = H6 :: rewrite X in (Nat.lte(Nat.add(_,Nat.add(_,Nat.double(Nat.mul(_,X)))),_) == _) with Nat.mul.comm!!
//           let H8 = Nat.Order.transitivity!!!(H3, H7)
//           let H9 = H8 :: rewrite X in (Nat.lte(_, Nat.add(_, Nat.add(X, _))) == _) with Nat.pow.mul_dist(u.head, v.head, 2)
//           let H10 = H9 :: rewrite X in (Nat.lte(_, X) == _) with mirror(Nat.mul.binom_dist!!!!)
//           let H11 = H10 :: rewrite X in (Nat.lte(_, Nat.mul(X,_)) == _) with Nat.add.comm!!
//           let H12 = H11 :: rewrite X in (Nat.lte(_, Nat.mul(_,X)) == _) with Nat.add.comm!!
//           let H13 = H12 :: rewrite X in (Nat.lte(_, Nat.mul(Nat.add(X,_),_)) == _) with Nat.pow.pow_square!
//           let H14 = H13 :: rewrite X in (Nat.lte(_, Nat.mul(_, Nat.add(X, _))) == _) with Nat.pow.pow_square!

//           ?H14
//     }: (u: Vector<Nat>(n), v: Vector<Nat>(n)) -> Equal(Bool,
//          Nat.lte(
//            Nat.pow(Vector.dot_nat(n, u, v), 2)
//            Nat.mul(Vector.dot_nat(n, u, u), Vector.dot_nat(n, v, v))
//          ),
//          true
//        )
//   lam(u, v)

Nat.Order.Ineq.CS(
  n: Nat
  u: Vector<Nat>(n)
  v: Vector<Nat>(n)
):   Nat.lte(
       Nat.pow(Vector.dot_nat(n, u, v), 2)
       Nat.mul(Vector.dot_nat(n, u, u), Vector.dot_nat(n, v, v)))
     == true
  let lam =
    case n with u v{
      zero:
        (u, v)
        refl
      succ:
        (u, v)
          open u
          open v
          let HI = Nat.Order.Ineq.CS(n.pred, u.tail, v.tail)
          let H1 = Nat.Order.add.right!!(Nat.add(Nat.pow(Nat.mul(u.head, v.head),2), Nat.double(Nat.mul(Vector.dot_nat(n.pred, u.tail, v.tail), Nat.mul(u.head, v.head)))), HI)
          let H2 = H1 :: rewrite X in (Nat.lte(X, _) == _) with mirror(Nat.square_sum!!) 
          let H3 = H2 :: rewrite X in (Nat.lte(Nat.pow(X, 2), _)==_) with Nat.add.comm!!
          let H4 = Nat.Order.Ineq.cauchy_lemma(v.head, u.head, n.pred, u.tail, v.tail, HI)
          let H5 = Nat.Order.add.left!!(Nat.pow(Nat.mul(u.head,v.head),2), H4)
          let H6 = Nat.Order.add.left!!(Nat.mul(Vector.dot_nat(n.pred,u.tail,u.tail),Vector.dot_nat(n.pred,v.tail,v.tail)), H5)
          let H7 = H6 :: rewrite X in (Nat.lte(Nat.add(_,Nat.add(_,Nat.double(Nat.mul(_,X)))),_) == _) with Nat.mul.comm!!
          let H8 = Nat.Order.transitivity!!!(H3, H7)
          let H9 = H8 :: rewrite X in (Nat.lte(_, Nat.add(_, Nat.add(X, _))) == _) with Nat.pow.mul_dist(u.head, v.head, 2)
          let H10 = H9 :: rewrite X in (Nat.lte(_, X) == _) with mirror(Nat.mul.binom_dist!!!!)
          let H11 = H10 :: rewrite X in (Nat.lte(_, Nat.mul(X,_)) == _) with Nat.add.comm!!
          let H12 = H11 :: rewrite X in (Nat.lte(_, Nat.mul(_,X)) == _) with Nat.add.comm!!
          let H13 = H12 :: rewrite X in (Nat.lte(_, Nat.mul(Nat.add(X,_),_)) == _) with Nat.pow.pow_square!
          let H14 = H13 :: rewrite X in (Nat.lte(_, Nat.mul(_, Nat.add(X, _))) == _) with Nat.pow.pow_square!
          //let H15 = Equal<Bool>(Nat.lte(Nat.pow(Vector.dot_nat(Nat.succ(n.pred), u, v),2),Nat.mul(Nat.add(Nat.mul(u.head,u.head),Vector.dot_nat(n.pred,u.tail,u.tail)),Nat.add(Nat.mul(v.head,v.head),Vector.dot_nat(n.pred,v.tail,v.tail)))), true)
          ?H14
    }: (u: Vector<Nat>(n), v: Vector<Nat>(n)) -> Equal(Bool,
         Nat.lte(
           Nat.pow(Vector.dot_nat(n, u, v), 2)
           Nat.mul(Vector.dot_nat(n, u, u), Vector.dot_nat(n, v, v))
         ),
         true
       )
  lam(u, v)