// LOBBY
// =====

// Lobby.State
// -----------

type App.KL.Lobby.State.Local {
  new(
    user: String
    page: App.KL.Lobby.State.Local.Page
  )
}

type App.KL.Lobby.State.Local.Page {
  front(room_input: String)
  heroes(hero: Maybe<App.KL.Game.Hero>, skill: Maybe<App.KL.Game.Skill>, tab: String)
} 

// Lobby.Draw
// ----------

App.KL.Lobby.draw(local: App.KL.Lobby.State.Local, global: App.KL.Global.State): DOM
  open local
  case local.page as page{
    front: App.KL.Lobby.draw.front(local@user, page.room_input, global)
    heroes: App.KL.Lobby.draw.heroes(page.hero, page.skill, page.tab)
  }

App.KL.Lobby.draw.heroes(hero: Maybe<App.KL.Game.Hero>, skill: Maybe<App.KL.Game.Skill>, tab: String): DOM
  let hero_list = List.map!!(App.KL.Game.Phase.Draft.draw.selection, App.KL.Game.Hero.list)

  <div class="w-full h-full bg-black flex flex-col justify-center items-center text-[2rem]">
    <div class="w-8/12 h-[40%] flex justify-center items-center">
      <div class="flex flex-wrap justify-center w-full">
        for div in hero_list: div
      </div>
    </div>
    {App.KL.Lobby.draw.heroes.hero_menu(hero, skill, tab)}
  </div>

App.KL.Lobby.draw.heroes.hero_menu(hero: Maybe<App.KL.Game.Hero>, skill: Maybe<App.KL.Game.Skill>, tab: String): DOM
  case hero {
    none:
      <div></div>
    some:
      <div class="w-10/12 h-[50%] m-2 mt-4 flex justify-around items-center border-4 border-[#d6dadc] bg-[#aeb4b7] radius-md">
        {App.KL.Lobby.draw.heroes.skill(hero.value)}
        {App.KL.Lobby.draw.heroes.skill_description(skill)}
        <div class="w-4/12 h-[90%] border-4 border-[#d6dadc] bg-[#d6dadc] hover:shadow-md radius-md">
        </div>
      </div>
  }

App.KL.Lobby.draw.heroes.skill(hero: App.KL.Game.Hero): DOM
  list = []
  for key:skill in hero@skills with list:
    key & list
  <div class="w-4/12 h-[90%] flex flex-col justify-start items-center">
    <div class="text-[2rem]"> "Skills"</div>
      <div class="w-full h-[90%] pt-2 grid grid-rows-2 grid-cols-2 gap-2">
        for key in list: App.KL.Lobby.draw.heroes.skill_button(key)
      </div>
  </div>
  

App.KL.Lobby.draw.heroes.skill_button(char: String): DOM
  id = "S" | char
  <div class="w-full h-[90%] bg-[#d6dadc] hover:shadow-md rounded-md border-6 border-[#d6dadc] cursor-pointer text-[2rem] flex items-center justify-center" id=id>
    <div id=id>char</div>
  </div>

App.KL.Lobby.draw.heroes.skill_description(skill: Maybe<App.KL.Game.Skill>): DOM
  skill_description_class = "w-4/12 h-[90%] flex flex-col justify-start"
  case skill {
    none: <div class=skill_description_class>"No skill selected"</div>
    some:
      <div class=skill_description_class >
        <div class="text-[2rem]" >skill.value@name</div>
        <div class="text-xl pt-5" >skill.value@description</div>
      </div>
  }


App.KL.Lobby.draw.front.button(id: String, content: String): DOM
  <button culass="text-[2rem] font-monospace ml-3 p-1 hover:shadow-lg w-[200px]" id=id>
    content
  </button>

App.KL.Lobby.draw.front.input(id: String, value: String): DOM
  <input id=id value=value class="text-[2rem] font-monospace mb-3"></input>

App.KL.Lobby.draw.front(user: String, room_input: String, global: App.KL.Global.State): DOM
  <div class="w-full h-full flex flex-col justify-center items-center text-[2rem]">
    <h1 class="animate-bounce mb-4 text-center">
      "Welcome to Kaelin"
    </h1>
    <div  class="flex justify-center flex-wrap text-center">
      "Enter a room number: "
      {App.KL.Lobby.draw.front.input("text", room_input)}
      <div>
        {App.KL.Lobby.draw.front.button("ready", "Enter")}
        {App.KL.Lobby.draw.front.button("random", "Random")}
        {App.KL.Lobby.draw.front.button("heroes", "Heroes")}
      </div>
    </div>
  </div>

// Lobby.When
// ----------

App.KL.Lobby.when(
  local: App.KL.Lobby.State.Local,
  global: App.KL.Global.State,
  event: App.Event
): IO<Maybe<App.KL.State.Local>>
  let page = local@page
  case event {
    init:
      let new_local = local@user <- String.to_lower(event.user)
      App.set_local<App.KL.State>(App.KL.State.Local.lobby(new_local))
    input:
      case page {
        front:
          let new_page = App.KL.Lobby.State.Local.Page.front(event.text)
          let new_local = local@page <- new_page
          App.set_local<App.KL.State>(App.KL.State.Local.lobby(new_local))
        heroes:
          App.pass<App.KL.State>
      }

    mouse_click:
      case page {
        front:
          switch String.eql(event.id) {
            "random": IO {
              get rnd = IO.random(10000000000)
              let str = Nat.show(rnd)
              let room = "4b4c494e" | String.take(8, str)
              let new_page = App.KL.Lobby.State.Local.Page.front(room)
              let new_local = local@page <- new_page
              App.set_local<App.KL.State>(App.KL.State.Local.lobby(new_local))
            }
            "ready": 
              case page.room_input {
                nil: IO {App.pass!}
                cons:
                  IO {
                    App.watch<App.KL.State>(page.room_input)
                    App.new_post<App.KL.State>(page.room_input, App.KL.Game.Phase.Draft.Event.join_room.serial)
                    App.set_local<App.KL.State>(App.KL.State.Local.game(App.KL.Game.State.Local.init(local@user, page.room_input)))
                  }
              
              }
            "heroes": IO {
              let new_page = App.KL.Lobby.State.Local.Page.heroes(none, none, "string")
              let new_local = local@page <- new_page
              App.set_local<App.KL.State>(App.KL.State.Local.lobby(new_local))
            }
          }default App.pass!
        heroes:
          switch String.starts_with(event.id) {
            "H": 
              let hero_id = String.drop(1, event.id)
              case App.KL.Game.Hero.get_by_name(hero_id) as hero {
                none: App.pass!
                some: 
                  let new_page = App.KL.Lobby.State.Local.Page.heroes(some(hero.value), none, page.tab)
                  let new_local = local@page <- new_page
                  App.set_local<App.KL.State>(App.KL.State.Local.lobby(new_local))
              }
            "S":
              let skill_key = String.drop(1, event.id)
              let skill     = Maybe {
                get hero = page.hero
                get skill = hero@skills{skill_key}
                return skill
              }
              let new_page = App.KL.Lobby.State.Local.Page.heroes(page.hero, skill, page.tab)
              let new_local = local@page <- new_page
              App.set_local<App.KL.State>(App.KL.State.Local.lobby(new_local))
          }default App.pass<App.KL.State>
      }
  } default App.pass<App.KL.State>
  
