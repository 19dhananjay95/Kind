// TODO : Organize these files

type Rectangular {
  new(x : U32, y : U32, height : U32, width : U32, lines_size : U32)
}

// TODO : Remove this?
App.Example.draw_line(destin : Pair<U32, U32>, x : U32, y : U32, z : U32, col : Col32, img : VoxBox) : VoxBox
  open destin
  VoxBox.Draw.line(
                   U32.to_i32(x),
                   U32.to_i32(y), 
                   U32.to_i32(destin.fst), 
                   U32.to_i32(destin.snd),
                   U32.to_i32(z),
                   col, 
                   img)

App.Example.progress_line(
  p : U32,
  col: Col32, //U32 -> U32 -> Col32,
  z : U32,
  rect : Rectangular,
  img: VoxBox,
): VoxBox // Draw a line using p as index in the progress bar
  open rect
  let size = rect.lines_size
  let x = rect.x + (p * size)
  let y = rect.y
  App.Example.draw_line({x, y+rect.height-rect.lines_size}, x, y+rect.lines_size, z, col, img) 

App.Example.complete_square(
  bar : App.Example.BarProgress,
  rect : Rectangular,
  img: VoxBox) : VoxBox
  let min = ((x, y) if U32.ltn(x, y) then x else y) :: U32 -> U32 -> U32
  open rect
  open bar
  let max = rect.width / rect.lines_size
  let line = (bar.max + bar.defense) / max
  let bar_max = min((bar.max + bar.defense) / line, max)
  let bar_actual = bar.loss / line
  let bar_defense = bar.defense / line
  let progress = bar_max - bar_actual

  // Draw the color depending on status by BarProgress
  for i : U32 from 1 to (bar_max - bar_defense) - bar_actual with img:
    App.Example.progress_line(i, bar.col_ful, 2, rect, img)
  for i : U32 from (bar_max - bar_defense) - bar_actual to bar_max - bar_actual with img :
    App.Example.progress_line(i, bar.col_defense, 2, rect, img)
  for i : U32 from bar_max - bar_actual to bar_max with img:
    App.Example.progress_line(i, bar.col_empty, 2, rect, img)
  
  // Draw separator depending on max value
  let separator = 5#32
  for i : U32 from 1 to 5 with img:   //U32
    App.Example.progress_line(i*(bar_max / separator), bar.col_empty, 3, rect, img)  
  img
  
App.Example.draw_bar(
  rect : Rectangular,
  bar : App.Example.BarProgress,
): VoxBox.Draw<Unit>
  open rect
  VoxBox.Draw {
     VoxBox.Draw.set_pos(rect.x, rect.y, 3)
     VoxBox.Draw.new(App.Example.draw_line({rect.x, rect.y+rect.height})) // The first horizontal line of rectangle
     VoxBox.Draw.new(App.Example.draw_line({rect.x+rect.width, rect.y})) // The second horizontal line of rectangle
  
     VoxBox.Draw.set_pos(rect.x+rect.width, rect.y, 3) 
     VoxBox.Draw.new(App.Example.draw_line({rect.x+rect.width, rect.y+rect.height})) // The second horizontal line of rectangle
     VoxBox.Draw.set_pos(rect.x, rect.y+rect.height, 3) 
     VoxBox.Draw.new(App.Example.draw_line({rect.x+rect.width, rect.y+rect.height})) // The second vertical line of rectangle
  
     // Complete the rectangle by the BarProgress
     VoxBox.Draw.map(App.Example.complete_square(bar, rect))
  }

App.Example.draw_progress_bar(x: U32,
  y: U32,
  z : U32,
  height : U32,
  width : U32,
  bar : App.Example.BarProgress,
  col: Col32, //U32 -> U32 -> Col32,
  img: VoxBox,
): VoxBox
  let rect = Rectangular.new(x, y, height, width, 1)
  let monad = App.Example.draw_bar(rect, bar, VoxBox.Draw.Paint.new(x, y, z, col, img))
  monad@snd@img

App.KL.Game.Board.Creature.show_hp(
  cx: U32,
  cy: U32, 
  creature: App.KL.Game.Creature,
  img: VoxBox
): VoxBox

  open creature
  let hp = I32.to_u32(creature.hp)
  let shield = I32.to_u32(App.KL.Game.Board.Creature.total_shield(creature))
  let bar = App.Example.BarProgress.new(hp+65, 10, shield+65, Col32.new(31, 203, 1, 255), Col32.new(202, 202, 201, 255), Col32.new(0, 0, 0, 255))
  App.Example.draw_progress_bar(cx, cy, 2, 4, 38, bar, Col32.new(157, 159, 158, 255), img)
    