App.KL.Game.Coord.Map.Cmp(
  x: App.KL.Game.Coord,
  y: App.KL.Game.Coord
): Cmp
  let c = I32.cmp(x@i, y@i)
  case c {
    eql : I32.cmp(x@j, y@j)
  } default c


App.Kl.Game.Map.insert<A : Type>(key : App.KL.Game.Coord, val : A, map : Avl<App.KL.Game.Coord, A>) :  Avl<App.KL.Game.Coord, A>
    Avl.insert!!(App.KL.Game.Coord.Map.Cmp, key, val, map)

App.Kl.Game.Map.find<A : Type>(key : App.KL.Game.Coord, map : Avl<App.KL.Game.Coord, A>) : Maybe<A>
    Avl.lookup!!(App.KL.Game.Coord.Map.Cmp, key map)

App.Kl.Game.Map.delete<A : Type>(key : App.KL.Game.Coord, map : Avl<App.KL.Game.Coord, A>) : Avl<App.KL.Game.Coord, A>
    Avl.delete!!(App.KL.Game.Coord.Map.Cmp, key, map)

App.Kl.Game.Map.union<A : Type>(map : Avl<App.KL.Game.Coord, A>) : Avl<App.KL.Game.Coord, A> -> Avl<App.KL.Game.Coord, A>
    Avl.union!!(App.KL.Game.Coord.Map.Cmp, map)

App.Kl.Game.Map.keys<A : Type>(map : Avl<App.KL.Game.Coord, A>) : List<App.KL.Game.Coord>
    Avl.foldr_with_key!!!((key, value, list) key & list, [], map)

App.Kl.Game.Map.values<A : Type>(map : Avl<App.KL.Game.Coord, A>) : List<A>
    Avl.foldr_with_key!!!((key, value, list) value & list, [], map)

App.Kl.Game.Map.values<A : Type, B : Type>(f : A -> B, map : Avl<App.KL.Game.Coord, A>) : List<B>
    Avl.map!!(f, map)

App.Kl.Game.Map.new<A : Type> : Avl<App.KL.Game.Coord, A>
    Avl.tip!!

App.Kl.Game.Map<A : Type> : Type
   Avl<App.KL.Game.Coord, A>

