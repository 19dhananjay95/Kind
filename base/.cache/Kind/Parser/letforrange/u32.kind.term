((((((Monad.bind Parser) Parser.monad) Nat) Kind.Term) Kind.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "for ")) # ((((((Monad.bind Parser) Parser.monad) Kind.Name) Kind.Term) Kind.Parser.name1) #elem ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text ":")) # ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "U32")) # ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "from")) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) Kind.Parser.term) #idx0 ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "to")) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) Kind.Parser.term) #idx1 ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "with ")) # ((((((Monad.bind Parser) Parser.monad) Kind.Name) Kind.Term) Kind.Parser.name1) #name ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text ":")) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) Kind.Parser.term) #loop ((((((Monad.bind Parser) Parser.monad) (Maybe Unit)) Kind.Term) ((Parser.maybe Unit) (Kind.Parser.text ";"))) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) Kind.Parser.term) #body ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Kind.Term) (Kind.Parser.stop init)) #orig !term = (Kind.Term.ref "U32.for"); !term = ((Kind.Term.app term) (Kind.Term.hol Bits.e)); !term = ((Kind.Term.app term) (Kind.Term.ref name)); !term = ((Kind.Term.app term) idx0); !term = ((Kind.Term.app term) idx1); !lamb = ((Kind.Term.lam elem) #e ((Kind.Term.lam name) #s loop)); !term = ((Kind.Term.app term) lamb); !term = (((Kind.Term.let name) term) #x body); ((((Monad.pure Parser) Parser.monad) Kind.Term) ((Kind.Term.ori orig) term))))))))))))))))))