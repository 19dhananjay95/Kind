// Creates a leftist tree from a list of type A
User.Rheidner.LeftistTree.from_list.go<A: Type>(list: List<A>, result: User.Rheidner.LeftistTree<A>, comparator: (x: A, y: A) -> Bool): User.Rheidner.LeftistTree<A>
  case list {
    nil: result
    cons:       
      User.Rheidner.LeftistTree.from_list.go!( list.tail, User.Rheidner.LeftistTree.insert<A>(list.head,  result, comparator), comparator )
  }!

User.Rheidner.LeftistTree.from_list<A: Type>(list: List<A>, comparator: (x: A, y: A) -> Bool): User.Rheidner.LeftistTree<A>
  User.Rheidner.LeftistTree.from_list.go!(list, User.Rheidner.LeftistTree.empty<A>, comparator)