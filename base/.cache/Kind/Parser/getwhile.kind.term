((((((Monad.bind Parser) Parser.monad) Nat) Kind.Term) Kind.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "while ")) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) Kind.Parser.term) #cond ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "with ")) # ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "{")) # ((((((Monad.bind Parser) Parser.monad) Kind.Name) Kind.Term) Kind.Parser.name) #nam0 ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text ",")) # ((((((Monad.bind Parser) Parser.monad) Kind.Name) Kind.Term) Kind.Parser.name) #nam1 ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "}")) # ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text ":")) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) Kind.Parser.term) #loop ((((((Monad.bind Parser) Parser.monad) (Maybe Unit)) Kind.Term) ((Parser.maybe Unit) (Kind.Parser.text ";"))) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) Kind.Parser.term) #body ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Kind.Term) (Kind.Parser.stop init)) #orig !moti = ((Kind.Term.lam "x") #x (Kind.Term.hol Bits.e)); !term = (Kind.Term.ref "Function.while"); !term = ((Kind.Term.app term) (Kind.Term.hol Bits.e)); !init = (Kind.Term.ref "Pair.new"); !init = ((Kind.Term.app init) (Kind.Term.hol Bits.e)); !init = ((Kind.Term.app init) (Kind.Term.hol Bits.e)); !init = ((Kind.Term.app init) (Kind.Term.ref nam0)); !init = ((Kind.Term.app init) (Kind.Term.ref nam1)); !term = ((Kind.Term.app term) init); !term = ((Kind.Term.app term) ((Kind.Term.lam "s") #s ((Kind.Term.app ((Kind.Term.app s) moti)) ((Kind.Term.lam nam0) #x ((Kind.Term.lam nam1) #y cond))))); !term = ((Kind.Term.app term) ((Kind.Term.lam "s") #s ((Kind.Term.app ((Kind.Term.app s) moti)) ((Kind.Term.lam nam0) #x ((Kind.Term.lam nam1) #y loop))))); !term = ((Kind.Term.app ((Kind.Term.app term) moti)) ((Kind.Term.lam nam0) #x ((Kind.Term.lam nam1) #y body))); ((((Monad.pure Parser) Parser.monad) Kind.Term) ((Kind.Term.ori orig) term))))))))))))))))