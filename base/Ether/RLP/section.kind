bool_dec(b : Bool, b2 : Bool) : Decidable<b == b2>
  case b {
    true : case b2 {
       true : Decidable.yep!(refl)
       false : Decidable.nop!((H) Bool.false_neq_true(mirror(H)))
    }!
    false : case b2 {
        true : Decidable.nop!(Bool.false_neq_true)
        false : Decidable.yep!(refl)
    }!
  }!

Ether.RLP.section(tree : Ether.RLP.Tree) : Equal(Ether.RLP.Tree, Ether.RLP.decode(Ether.RLP.encode(tree)), tree)
  case tree {
      tip: 
        ?a :: 
         Equal(Ether.RLP.Tree, Ether.RLP.decode(Ether.Bits.read_bytes(Ether.RLP.encode.bytes(Ether.RLP.Tree.tip(tree.value)))),
             Ether.RLP.Tree.tip(tree.value))
      list:
        ?b
  }!
