#monad_name ((Parser.first_of Kind.Term) (((List.cons (Parser Kind.Term)) ((((((Monad.bind Parser) Parser.monad) Nat) Kind.Term) Kind.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) ((Parser.first_of Unit) (((List.cons (Parser Unit)) (Kind.Parser.text "var ")) (((List.cons (Parser Unit)) (Kind.Parser.text "get ")) (List.nil (Parser Unit)))))) # ((((((Monad.bind Parser) Parser.monad) Kind.Name) Kind.Term) Kind.Parser.name1) #name ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "=")) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) Kind.Parser.term) #expr ((((((Monad.bind Parser) Parser.monad) (Maybe Unit)) Kind.Term) ((Parser.maybe Unit) (Kind.Parser.text ";"))) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) (Kind.Parser.do.statements monad_name)) #body ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Kind.Term) (Kind.Parser.stop init)) #orig !term = ((Kind.Term.app (Kind.Term.ref "Monad.bind")) (Kind.Term.ref monad_name)); !term = ((Kind.Term.app term) (Kind.Term.ref ((String.concat monad_name) ".monad"))); !term = ((Kind.Term.app term) (Kind.Term.hol Bits.e)); !term = ((Kind.Term.app term) (Kind.Term.hol Bits.e)); !term = ((Kind.Term.app term) expr); !term = ((Kind.Term.app term) ((Kind.Term.lam name) #x body)); ((((Monad.pure Parser) Parser.monad) Kind.Term) ((Kind.Term.ori orig) term))))))))))) (((List.cons (Parser Kind.Term)) ((((((Monad.bind Parser) Parser.monad) Nat) Kind.Term) Kind.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "let ")) # ((((((Monad.bind Parser) Parser.monad) Kind.Name) Kind.Term) Kind.Parser.name1) #name ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "=")) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) Kind.Parser.term) #expr ((((((Monad.bind Parser) Parser.monad) (Maybe Unit)) Kind.Term) ((Parser.maybe Unit) (Kind.Parser.text ";"))) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) (Kind.Parser.do.statements monad_name)) #body ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Kind.Term) (Kind.Parser.stop init)) #orig ((((Monad.pure Parser) Parser.monad) Kind.Term) ((Kind.Term.ori orig) (((Kind.Term.let name) expr) #x body)))))))))))) (((List.cons (Parser Kind.Term)) ((((((Monad.bind Parser) Parser.monad) Nat) Kind.Term) Kind.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "return ")) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) Kind.Parser.term) #expr ((((((Monad.bind Parser) Parser.monad) (Maybe Unit)) Kind.Term) ((Parser.maybe Unit) (Kind.Parser.text ";"))) # ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Kind.Term) (Kind.Parser.stop init)) #orig !term = ((Kind.Term.app (Kind.Term.ref "Monad.pure")) (Kind.Term.ref monad_name)); !term = ((Kind.Term.app term) (Kind.Term.ref ((String.concat monad_name) ".monad"))); !term = ((Kind.Term.app term) (Kind.Term.hol Bits.e)); !term = ((Kind.Term.app term) expr); ((((Monad.pure Parser) Parser.monad) Kind.Term) ((Kind.Term.ori orig) term)))))))) (((List.cons (Parser Kind.Term)) ((((((Monad.bind Parser) Parser.monad) Nat) Kind.Term) Kind.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) Kind.Parser.term) #expr ((((((Monad.bind Parser) Parser.monad) (Maybe Unit)) Kind.Term) ((Parser.maybe Unit) (Kind.Parser.text ";"))) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) (Kind.Parser.do.statements monad_name)) #body ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Kind.Term) (Kind.Parser.stop init)) #orig !term = ((Kind.Term.app (Kind.Term.ref "Monad.bind")) (Kind.Term.ref monad_name)); !term = ((Kind.Term.app term) (Kind.Term.ref ((String.concat monad_name) ".monad"))); !term = ((Kind.Term.app term) (Kind.Term.hol Bits.e)); !term = ((Kind.Term.app term) (Kind.Term.hol Bits.e)); !term = ((Kind.Term.app term) expr); !term = ((Kind.Term.app term) ((Kind.Term.lam "") #x body)); ((((Monad.pure Parser) Parser.monad) Kind.Term) ((Kind.Term.ori orig) term)))))))) (((List.cons (Parser Kind.Term)) ((((((Monad.bind Parser) Parser.monad) Kind.Term) Kind.Term) Kind.Parser.term) #expr ((((((Monad.bind Parser) Parser.monad) (Maybe Unit)) Kind.Term) ((Parser.maybe Unit) (Kind.Parser.text ";"))) # ((((Monad.pure Parser) Parser.monad) Kind.Term) expr)))) (List.nil (Parser Kind.Term))))))))