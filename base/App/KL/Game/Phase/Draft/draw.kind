App.KL.Game.Phase.Draft.draw(
  local: App.KL.Game.State.Local, 
  global: App.KL.Global.State
): DOM
  open global
  without global.game: <div>"No game"</div> // impossible
  
  App.KL.Game.Phase.Draft.draw.choose_page(global.game@players, local@page, local@tab, local@room, local@user)

// choose what page draw based on team
App.KL.Game.Phase.Draft.draw.choose_page(
  players: Map<App.KL.Game.Player>,
  page: String,
  tab:  String,
  room: String,
  user: String
): DOM
  let player = players{user}
  without player: <div>"No player"</div> // impossible

  let team_page = App.KL.Game.Phase.Draft.draw.choose_team(players)
    
  let team = player@team
  case team {
    // if any team is selected go to main draft selection
    // pass only allies
    blue:   App.KL.Game.Phase.Draft.draw.main(App.KL.Game.Phase.Draft.draw.choose_page.filter_team(players, team), page, tab, user)
    red:    App.KL.Game.Phase.Draft.draw.main(App.KL.Game.Phase.Draft.draw.choose_page.filter_team(players, team), page, tab, user)
  } default team_page // if no team is selected go to team selection

// aux function to filter players according with 
// its respective team
App.KL.Game.Phase.Draft.draw.choose_page.filter_team(
  players: Map<App.KL.Game.Player>
  team: App.KL.Game.Team
): Map<App.KL.Game.Player>
  let result = {}
  for id:player in players with result:
    if App.KL.Game.Team.eql(player@team, team) then
      result{id} <- player
    else
      result
  result

// CHOOSE TEAM SCREEN
// ----------
App.KL.Game.Phase.Draft.draw.choose_team(
  players: Map<App.KL.Game.Player>
): DOM
  <div style={ 
    "width": "100vw"
    "height": "100vh"
    "display": "flex"
    "flex-direction": "column"
    "justify-content": "center"
    "align-items": "center"
    "font-size": "2rem"
  }>
    <div style={ 
      // "width": "60%"
      // "height": "30%"
      "display": "flex"
      "justify-content": "center"
      "flex-wrap": "wrap"
    }>
      {App.KL.Game.Phase.Draft.draw.choose_team.button(players, App.KL.Game.Team.blue)}
      {App.KL.Game.Phase.Draft.draw.choose_team.button(players, App.KL.Game.Team.red)}
    </div>
  </div>

App.KL.Game.Phase.Draft.draw.choose_team.button(players: Map<App.KL.Game.Player>, team: App.KL.Game.Team): DOM
  let player_list   = Map.to_list!(players) // TODO BBT.count
  let fun = 
    (x)
      let y = x@snd@team
      App.KL.Game.Team.eql(y, team)
  let player_count  = List.count!(fun, player_list) // Player count in respective team
  let team_txt      = App.KL.Game.Team.show(team)
  let gradient      = 
    case team {
      blue:     "linear-gradient(#38a5fa, #2081e0)" // blue
      red:      "linear-gradient(#ff3537, #d60f10)" // red
      neutral:  "linear-gradient(#f2f2f2, #e6e6e6)" // light gray - not used
    }
  
  <button id = "T" | Nat.show(player_count) | team_txt style={ 
    "width": "40%"
    "height": "200px"
    "background-image": gradient
    "box-shadow": "2px -2px 2px black"
    "font-size": "2rem"
    "border": "0"
    "border-radius": "5px"
    "cursor": "inherit"
    "min-width": "270px"
    "margin": "20px"
  }>
    Nat.show(player_count) | "/3 Players"
  </button>


// DRAFT LAYOUT
// ==============================
App.KL.Game.Phase.Draft.draw.main(
  allies: Map<App.KL.Game.Player>, 
  page: String
  tab: String,
  user: String
): DOM
  <div style={"margin": "0", "height": "max(100%, 766px)", "width": "100%", "background-image": "url(https://i.imgur.com/H5BB1V3.png)", "image-rendering": "pixelated"}>
      <div style={"height": "100%", "width": "100%", "display": "flex", "flex-direction": "column", "justify-content": "center"}>
        <header style={"background-image": "url(https://i.imgur.com/duRFrIR.png)", "width": "100%", "height": "64px", "image-rendering": "pixelated", "display": "flex", "justify-content": "space-between", "padding": "0 5px"}>
          <div style={"display": "flex"}>
          
          </div>
          <div style={"display": "flex", "justify-content": "flex-end"}>
            <img src=App.CardPlayer.header.button.invite style={"height": "100%", "image-rendering": "pixelated"}></img>
            <img src=App.CardPlayer.header.button.help   style={"height": "100%", "image-rendering": "pixelated"}></img>
            <img src=App.CardPlayer.header.button.list   style={"height": "100%", "image-rendering": "pixelated"}></img>
            <img src=App.CardPlayer.header.button.logout style={"height": "100%", "image-rendering": "pixelated"}></img>
          </div>
        </header>
        <div style={"display": "flex", "width": "100%", "justify-content": "center", "align-items": "center", "height": "max(calc(100% - 128px), 500px)"}>
          <div style={"display": "flex", "padding": "4px"}>
            { App.KL.Game.Phase.Draft.draw.main.middle(allies, page, tab, user) }
          </div>
        </div>
        <footer style={"height": "64px", "display": "flex", "align-items": "flex-end", "width": "100%"}>
          <div style={"display": "flex", "height": "50%", "flex": "1"}>
            <div style={"flex": "1", "height": "100%", "align-self": "flex-end", "background-image": "url("| App.CardPlayer.footer.stencil.main |")"}></div>
            <div style={"align-self": "flex-end", "height": "100%"}><img style={"height": "100%", "image-rendering": "pixelated"} src=App.CardPlayer.footer.stencil.diagonal_left></img></div>
            <div style={"align-self": "flex-start", "zoom": "150%", "margin-top": "-32px"}><img style={"image-rendering": "pixelated"} src=App.CardPlayer.footer.ready_button></img></div>
            <div style={"align-self": "flex-end", "height": "100%"}><img style={"height": "100%", "image-rendering": "pixelated"} src=App.CardPlayer.footer.stencil.diagonal_right></img></div>
            <div style={"flex": "1", "height": "100%", "align-self": "flex-end", "background-image": "url("| App.CardPlayer.footer.stencil.main |")"}></div>
          </div>
        </footer>
      </div>
    </div>

App.KL.Game.Phase.Draft.draw.main.middle(
  allies: Map<App.KL.Game.Player>
  page: String
  tab:  String
  user: String
): DOM
  let max = 3 // max players TODO store in game?
  
  <div style={"display": "contents"}>
    
    // USER CARD
    {
      let player = allies{user}
      case player {
        none: <span></span> // Impossible
        some: App.KL.Game.Phase.Draft.draw.card.user(player.value, max / 2)
      }
    }

    // ALLIES CARDS
    {
      let allies   = Map.delete!(user, allies)
      let allies   = Map.to_list!(allies) // TODO formap in DOM
      let n_allies = max - 1
      // let allies = List.indices!(allies)
      <div style={"display": "contents"}>
        for index in [0 to n_allies]:
          let info = List.get!(index, allies)
          // distribute allies to right and left
          let order = if index <? (n_allies / 2) then 0 else max
          case info {
            // if there is some allie not connected
            none: App.KL.Game.Phase.Draft.draw.card.allies(none, order, page)
            some:
              let {id, player} = info.value
              App.KL.Game.Phase.Draft.draw.card.allies(some(player), order, page)
          }
      </div>
    }
    
    // MENU SELECTION
    <div style={
      "order": Nat.show(max + 1)
      "max-height": "416px"
      "height": "416px" 
      "overflow": "auto"
      "display": if String.eql(page, "heroes") then "grid" else "none" // page
      "grid-template-columns": "repeat(5, minmax(0, 1fr))"
      "grid-auto-rows": "max-content"
      "gap": "10px"
      "margin": "0 10px"
      "padding-top": "4px" // because of negative margin
    }>
      for card in [App.KL.Game.Phase.Draft.draw.portrait.hero(hero) for hero in App.KL.Game.Hero.list]:
        card
    </div>
  </div>


// draw user card in specific order
// this order sets the user card to stay in middle
App.KL.Game.Phase.Draft.draw.card.user(
  player: App.KL.Game.Player
  order:  Nat 
): DOM
  let fator  = 2
  let bt     = 2
  let id     = "user-card"

  let hero = Maybe {
    get hero_id = player@hero_id
    get hero    = App.KL.Game.Hero.get_by_id(hero_id)
    return hero
  }

  // TODO resolve this
  let skills = case hero {
    none: []
    some: Map.to_list!(hero.value@skills)
  }

  let slot   = ((el)
    <div style={
      "background-image": "url("|App.CardPlayer.card.button|")"
      "background-size": "100% 100%"
      "height": "20%"
      "width": "100%"
      // "font-size": "1.5rem"
      "border-radius": "5px"
      "display": "flex"
      "align-items": "center"
      "justify-content": "center"
      "color": "white"
    }>
      { el }
    </div>
  ) :: DOM -> DOM

  let inner  = 
    <div style={"display": "contents"}>
      <div style={"height": "40%", "width": "17%", "max-height": "40%", "overflow": "auto", "border-radius": "5px 0px 0px 5px"}>
        { slot(<span>"I"</span>) } // TODO LIST ICON
        for info in skills:
          let {key, skill} = info
          slot(<span>key</span>)
      </div>
      <div id=id style={"width": "82%", "border-radius": "0 5px 5px 0", "padding": Nat.show(fator * bt) | "px"}>
        {App.KL.Game.Phase.Draft.draw.card.hero(hero, id)}
      </div>
    </div>
  
  <div id=id style={"margin": "0 10px", "order": Nat.show(order)}>
    { App.KL.Game.Phase.Draft.draw.card.wrapper(99, 208, bt, id, fator, "https://i.imgur.com/HTnAVKj.png", inner) }
  </div>

App.KL.Game.Phase.Draft.draw.card.allies(
  player: Maybe<App.KL.Game.Player>,
  order: Nat
  page: String
): DOM
  let fator = 2
  let bt    = 2
  let type = "HEALER"

  let hero = Maybe {
    get player  = player
    get hero_id = player@hero_id
    get hero    = App.KL.Game.Hero.get_by_id(hero_id)
    return hero
  }

  let inner = 
    <div style={"width": "100%", "border-radius": "0 5px 5px 0", "padding": Nat.show(fator * bt) | "px"}>
      {App.KL.Game.Phase.Draft.draw.card.hero(hero, "")}
    </div>
  
  <div style={"margin": "0 10px", "order": Nat.show(order), "display": if String.eql(page, "users") then "block" else "none"}>
    { App.KL.Game.Phase.Draft.draw.card.wrapper(82, 208, bt, "", fator, "https://i.imgur.com/CI2xJrU.png", inner) }
  </div>

// draw hero parts of cards
App.KL.Game.Phase.Draft.draw.card.hero(
  hero: Maybe<App.KL.Game.Hero>
  id: String
): DOM
  let img   = "https://i.imgur.com/T49eUdC.png"
  <div id=id style={"height": "100%"}>
    // draw top of card
    <div id=id style={
      "height": "52%"
    }>
      {
        case hero {
          none: App.CardPlayer.card.img("", "", "", id) // TODO change to none
          some: App.CardPlayer.card.img(hero.value@name, "HEALER", img, id) // TODO change type
        }
      }
    </div>
    // draw bottom of card
    <div id=id style={"height": "48%", "width": "100%"}>
      {
        case hero {
          none: App.CardPlayer.card.attrs(App.KL.Game.Hero.Attributes.set(0,0,0,0,0,0), id) // when no hero is selected
          some:
            case hero.value@attributes as attrs {
              none: App.CardPlayer.card.attrs(App.KL.Game.Hero.Attributes.set(0,0,0,0,0,0), id) // when hero has no attribute
              some: App.CardPlayer.card.attrs(attrs.value, id) // show attributes
            }
        }
      }
    </div>
  </div>

App.KL.Game.Phase.Draft.draw.card.wrapper(width: Nat, height: Nat, bt: Nat, id: String, fator: Nat, background: String, inner: DOM): DOM
  <div id=id style={
    "height": Nat.show(fator * height) | "px", 
    "width": Nat.show(fator * width) | "px", 
    "display": "flex", 
    "background-image": "url("|background|")", 
    "background-size": "100% 100%", 
    "padding-top": Nat.show(fator * bt) | "px"
    // "margin": "0 10px"
    "image-rendering": "pixelated"
  }>
    {inner}
  </div>

App.KL.Game.Phase.Draft.draw.portrait.hero(hero: App.KL.Game.Hero): DOM
  let fator = 2
  let bt = 2
  let id = "H" | hero@name

  let portrait = hero@picture(true, 0)
  let inner =
    <div id=id style={"width": "100%", "padding": "0 " | Nat.show(bt * fator) | "px", "display": "flex", "flex-direction": "column", "align-items": "center"}>
      <img id=id style={"width": "100%", "image-rendering": "pixelated", "transform": "translateY(-"|Nat.show((2 + bt)*fator)|"px)", "margin-bottom": "4px"} src=portrait></img>
      <p id=id style={"text-transform": "uppercase", "color": "white"}>hero@name</p>
    </div>
  
  App.KL.Game.Phase.Draft.draw.card.wrapper(44, 74, bt, id, fator, App.CardPlayer.portrait.hero.background, inner)

// ROOM NUMBER AND READY BUTTON
// ==========================

// display room text, and ready/cancel button
App.KL.Game.Phase.Draft.draw.ready_button(players: Map<App.KL.Game.Player>, room: String, user: String): DOM
  info = players{user}
  let ready_count = App.KL.Game.Player.ready_count(players, room, user) // Pair(Total players, ready check)
  let total = Nat.show(ready_count@fst)
  let count = Nat.show(ready_count@snd)
  let {color, text} = 
    case info {
      none: {"#4CAF50", "Ready"}
      some: 
        let player = info.value
        if player@ready then
          {"gray",    count|"/"|total|"\n\n Cancel"}
        else
          {"#4CAF50", "Ready"}
  }
  <div style={ 
    "width": "30%"
    "height": "auto"
    "display": "flex"
    "justify-content": "center"
    "align-items": "center"
    "flex-direction": "column"
  }>
    <div style={ 
      "background-color": "#d6dadc"
      "color": "black"
      "padding": "8px"
      "text-align": "center"
      "border-radius": "5px"
      "margin-bottom": "10px"
      "font-size": "32px"
    }>
      room
    </div>
    <button id="Ready" style={ 
      "background-color": color
      "border": "none"
      "color": "white"
      "padding": "32px"
      "text-align": "center"
      "text-decoration": "none"
      "display": "inline-block"
      "font-size": "32px"
      "margin": "4px 2px"
      "cursor": "inherit"
    }>
      text
    </button>
  </div>

// BOTTOM MENU FOR CHOOSING HEROES 
// ======================
App.KL.Game.Phase.Draft.draw.menu(
  players: Map<App.KL.Game.Player>
): DOM

  heroes = App.KL.Game.Hero.list
  main_style = 
  {
    "width": "70%",
    "height": "100%"
    "display": "flex"
    "justify-content": "center"
    "align-items": "center"
  }
  
  display_style = 
  { 
    "display": "flex",
    "flex-wrap": "wrap",
    "justify-content": "center", 
    "width": "100%"
  }
  
  hero_list = List.map!!(App.KL.Game.Phase.Draft.draw.selection, App.KL.Game.Hero.list) 

  <div style=main_style>
    <div style=display_style>
      for div in hero_list: div
    </div>
  </div>

     //Selection
//----------------------------------------------
App.KL.Game.Phase.Draft.draw.selection(
  hero: App.KL.Game.Hero
): DOM
   
  image = hero@picture(true, 0) //TODO placeholder
  //assets = hero@assets
  //image  = assets@base64

  box_style = 
  { 
    "margin": "4px",
    "border": "5px solid #d6dadc",
    //"box-shadow":"0 2px 3px rgba(0, 0, 0, 0.1)",
    "background-color": "#Aeb4b7"
    "height": "auto",
    "width": "15%",
    "border-radius": "5px"
  }

  name_style =   
  {
    "display": "flex",
    "justify-content": "center",
    "font-size": "1.2vw"
  }

  img_box_style = 
  {
    "padding": "2px",
    "height": "100%",
    "width": "100%"
  } 

  corner_style = 
  {
    "width": "75%",
    "margin-left": "12.5%",
    "height": "auto",
    "image-rendering": "pixelated"
  }
  square_style = 
  {
    "display": "flex", "justify-content": "center", "height": "100%", "width":"100%"
  }
  
  <div style=box_style id="H" | hero@name>
    <div style=name_style id="H"| hero@name>hero@name</div>
      <img style=corner_style src=image id="H" | hero@name>
      </img>
  </div>

