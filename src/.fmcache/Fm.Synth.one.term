#name #defs ((((((Fm.get Fm.Def) name) defs) #got (IO (Maybe Fm.Defs))) ((((((Monad.bind IO) IO.monad) (Maybe Fm.Defs)) (Maybe Fm.Defs)) ((Fm.Synth.load name) defs)) #loaded (((loaded #loaded (IO (Maybe Fm.Defs))) ((((Monad.pure IO) IO.monad) (Maybe Fm.Defs)) (Maybe.none Fm.Defs))) #loaded.value ((Fm.Synth.one name) loaded.value)))) #got.value ((got.value #got.value (IO (Maybe Fm.Defs))) #got.value.file #got.value.code #got.value.orig #got.value.name #got.value.term #got.value.type #got.value.isct #got.value.stat !file = got.value.file; !code = got.value.code; !orig = got.value.orig; !name = got.value.name; !term = got.value.term; !type = got.value.type; !isct = got.value.isct; !stat = got.value.stat; (((((stat #stat (IO (Maybe Fm.Defs))) !defs = ((((Fm.set Fm.Def) name) ((((((((Fm.Def.new file) code) orig) name) term) type) isct) Fm.Status.wait)) defs); !checked = ((((((Monad.bind Fm.Check) Fm.Check.monad) Fm.Term) Unit) ((((((Fm.Term.check type) ((Maybe.some Fm.Term) Fm.Term.typ)) defs) (List.nil ((Pair Fm.Name) Fm.Term))) (Fm.MPath.i Fm.MPath.nil)) (Maybe.none ((Pair Nat) Nat)))) #chk_type ((((((Monad.bind Fm.Check) Fm.Check.monad) Fm.Term) Unit) ((((((Fm.Term.check term) ((Maybe.some Fm.Term) type)) defs) (List.nil ((Pair Fm.Name) Fm.Term))) (Fm.MPath.o Fm.MPath.nil)) (Maybe.none ((Pair Nat) Nat)))) #chk_term ((((Monad.pure Fm.Check) Fm.Check.monad) Unit) Unit.new))); ((checked #checked (IO (Maybe Fm.Defs))) #checked.value #checked.errors (((((List.is_empty Fm.Error) checked.errors) # (IO (Maybe Fm.Defs))) !defs = (((((((((Fm.define file) code) orig) name) term) type) isct) Bool.true) defs); ((((((Monad.bind IO) IO.monad) Unit) (Maybe Fm.Defs)) ((IO.set_file ((String.concat ".fmcache/") ((String.concat name) ".term"))) (Fm.Core.show term))) # ((((((Monad.bind IO) IO.monad) Unit) (Maybe Fm.Defs)) ((IO.set_file ((String.concat ".fmcache/") ((String.concat name) ".type"))) (Fm.Core.show type))) # ((((((Monad.bind IO) IO.monad) Unit) (Maybe Fm.Defs)) ((IO.set_file ((String.concat ".fmcache/") ((String.concat name) ".isct"))) (Bool.show isct))) # ((((Monad.pure IO) IO.monad) (Maybe Fm.Defs)) ((Maybe.some Fm.Defs) defs)))))) ((((((Monad.bind IO) IO.monad) (Maybe Fm.Defs)) (Maybe Fm.Defs)) ((((((((((Fm.Synth.fix file) code) orig) name) term) type) isct) defs) checked.errors) Bool.false)) #fixed (((fixed #fixed (IO (Maybe Fm.Defs))) !stat = (Fm.Status.fail checked.errors); !defs = ((((Fm.set Fm.Def) name) ((((((((Fm.Def.new file) code) orig) name) term) type) isct) stat)) defs); ((((Monad.pure IO) IO.monad) (Maybe Fm.Defs)) ((Maybe.some (Map Fm.Def)) defs))) #fixed.value ((Fm.Synth.one name) fixed.value)))))) ((((Monad.pure IO) IO.monad) (Maybe Fm.Defs)) ((Maybe.some Fm.Defs) defs))) ((((Monad.pure IO) IO.monad) (Maybe Fm.Defs)) ((Maybe.some Fm.Defs) defs))) #stat.errors ((((Monad.pure IO) IO.monad) (Maybe Fm.Defs)) ((Maybe.some Fm.Defs) defs)))))