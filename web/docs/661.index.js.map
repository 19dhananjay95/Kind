{"version":3,"sources":["webpack://kind-web/./src/apps/App.MiniMMO.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,+BAA+B;AACxC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzyBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzfile":"661.index.js","sourcesContent":["module.exports = function() {\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === \"Word.i\" ? 1 << i : 0);\n            w = w.pred;\n        }\n        return u;\n    }\n    function u16_to_word(u) {\n        var w = {\n            _: \"Word.e\"\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: u >>> 16 - i - 1 & 1 ? \"Word.i\" : \"Word.o\",\n                pred: w\n            };\n        }\n        return w;\n    }\n    function u16_to_bits(x) {\n        var s = \"\";\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? \"1\" : \"0\") + s;\n            x = x >>> 1;\n        }\n        return s;\n    }\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === \"Word.i\" ? 1 << i : 0);\n            w = w.pred;\n        }\n        return u;\n    }\n    function u32_to_word(u) {\n        var w = {\n            _: \"Word.e\"\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: u >>> 32 - i - 1 & 1 ? \"Word.i\" : \"Word.o\",\n                pred: w\n            };\n        }\n        return w;\n    }\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    }\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === \"Word.i\" ? 1n << i : 0n);\n            w = w.pred;\n        }\n        return u;\n    }\n    function u64_to_word(u) {\n        var w = {\n            _: \"Word.e\"\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: u >> 64n - i - 1n & 1n ? \"Word.i\" : \"Word.o\",\n                pred: w\n            };\n        }\n        return w;\n    }\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n              case \"Array.tip\":\n                buffer.push(a.value);\n                break;\n\n              case \"Array.tie\":\n                go(a.lft, buffer);\n                go(a.rgt, buffer);\n                break;\n            }\n            return buffer;\n        }\n        return new Uint32Array(go(a, []));\n    }\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: \"Array.tip\",\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: \"Array.tie\",\n                    lft: lft,\n                    rgt: rgt\n                };\n            }\n        }\n        return go(b);\n    }\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    }\n    var bitsmap_new = {\n        _: \"BitsMap.new\"\n    };\n    var bitsmap_tie = function(val, lft, rgt) {\n        return {\n            _: \"BitsMap.tip\",\n            val: val,\n            lft: lft,\n            rgt: rgt\n        };\n    };\n    var maybe_none = {\n        _: \"Maybe.none\"\n    };\n    var maybe_some = function(value) {\n        return {\n            _: \"Maybe.some\",\n            value: value\n        };\n    };\n    var bitsmap_get = function(bits, map) {\n        for (var i = bits.length - 1; i >= 0; --i) {\n            if (map._ !== \"BitsMap.new\") {\n                map = bits[i] === \"0\" ? map.lft : map.rgt;\n            }\n        }\n        return map._ === \"BitsMap.new\" ? maybe_none : map.val;\n    };\n    var bitsmap_set = function(bits, val, map, mode) {\n        var res = {\n            value: map\n        };\n        var key = \"value\";\n        var obj = res;\n        for (var i = bits.length - 1; i >= 0; --i) {\n            var map = obj[key];\n            if (map._ === \"BitsMap.new\") {\n                obj[key] = {\n                    _: \"BitsMap.tie\",\n                    val: maybe_none,\n                    lft: bitsmap_new,\n                    rgt: bitsmap_new\n                };\n            } else {\n                obj[key] = {\n                    _: \"BitsMap.tie\",\n                    val: map.val,\n                    lft: map.lft,\n                    rgt: map.rgt\n                };\n            }\n            obj = obj[key];\n            key = bits[i] === \"0\" ? \"lft\" : \"rgt\";\n        }\n        var map = obj[key];\n        if (map._ === \"BitsMap.new\") {\n            var x = mode === \"del\" ? maybe_none : {\n                _: \"Maybe.some\",\n                value: val\n            };\n            obj[key] = {\n                _: \"BitsMap.tie\",\n                val: x,\n                lft: bitsmap_new,\n                rgt: bitsmap_new\n            };\n        } else {\n            var x = mode === \"set\" ? {\n                _: \"Maybe.some\",\n                value: val\n            } : mode === \"del\" ? maybe_none : map.val;\n            obj[key] = {\n                _: \"BitsMap.tie\",\n                val: x,\n                lft: map.lft,\n                rgt: map.rgt\n            };\n        }\n        return res.value;\n    };\n    var list_for = list => nil => cons => {\n        while (list._ !== \"List.nil\") {\n            nil = cons(list.head)(nil);\n            list = list.tail;\n        }\n        return nil;\n    };\n    const inst_unit = x => x(null);\n    const elim_unit = x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n              case \"unit\":\n                var $0 = c0;\n                return $0;\n            }\n        })();\n        return $1;\n    };\n    const inst_bool = x => x(true)(false);\n    const elim_bool = x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c0;\n                return $2;\n            } else {\n                var $3 = c1;\n                return $3;\n            }\n        })();\n        return $4;\n    };\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c0;\n                return $5;\n            } else {\n                var $6 = self - 1n;\n                var $7 = c1($6);\n                return $7;\n            }\n        })();\n        return $8;\n    };\n    const inst_bits = x => x(\"\")(x0 => x0 + \"0\")(x0 => x0 + \"1\");\n    const elim_bits = x => {\n        var $14 = (() => c0 => c1 => c2 => {\n            var self = x;\n            switch (self.length === 0 ? \"e\" : self[self.length - 1] === \"0\" ? \"o\" : \"i\") {\n              case \"o\":\n                var $9 = self.slice(0, -1);\n                var $10 = c1($9);\n                return $10;\n\n              case \"i\":\n                var $11 = self.slice(0, -1);\n                var $12 = c2($11);\n                return $12;\n\n              case \"e\":\n                var $13 = c0;\n                return $13;\n            }\n        })();\n        return $14;\n    };\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = x => {\n        var $17 = (() => c0 => {\n            var self = x;\n            switch (\"u16\") {\n              case \"u16\":\n                var $15 = u16_to_word(self);\n                var $16 = c0($15);\n                return $16;\n            }\n        })();\n        return $17;\n    };\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = x => {\n        var $20 = (() => c0 => {\n            var self = x;\n            switch (\"u32\") {\n              case \"u32\":\n                var $18 = u32_to_word(self);\n                var $19 = c0($18);\n                return $19;\n            }\n        })();\n        return $20;\n    };\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = x => {\n        var $23 = (() => c0 => {\n            var self = x;\n            switch (\"u64\") {\n              case \"u64\":\n                var $21 = u64_to_word(self);\n                var $22 = c0($21);\n                return $22;\n            }\n        })();\n        return $23;\n    };\n    const inst_string = x => x(\"\")(x0 => x1 => String.fromCharCode(x0) + x1);\n    const elim_string = x => {\n        var $28 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $24 = c0;\n                return $24;\n            } else {\n                var $25 = self.charCodeAt(0);\n                var $26 = self.slice(1);\n                var $27 = c1($25)($26);\n                return $27;\n            }\n        })();\n        return $28;\n    };\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = x => {\n        var $32 = (() => c0 => {\n            var self = x;\n            switch (\"b32\") {\n              case \"b32\":\n                var $29 = buffer32_to_depth(self);\n                var $30 = buffer32_to_u32array(self);\n                var $31 = c0($29)($30);\n                return $31;\n            }\n        })();\n        return $32;\n    };\n    function App$new$(_init$2, _draw$3, _when$4, _tick$5, _post$6) {\n        var $33 = {\n            _: \"App.new\",\n            init: _init$2,\n            draw: _draw$3,\n            when: _when$4,\n            tick: _tick$5,\n            post: _post$6\n        };\n        return $33;\n    }\n    const App$new = x0 => x1 => x2 => x3 => x4 => App$new$(x0, x1, x2, x3, x4);\n    function Pair$new$(_fst$3, _snd$4) {\n        var $34 = {\n            _: \"Pair.new\",\n            fst: _fst$3,\n            snd: _snd$4\n        };\n        return $34;\n    }\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n    const App$State$new = Pair$new$(null, null);\n    function BitsMap$(_A$1) {\n        var $35 = null;\n        return $35;\n    }\n    const BitsMap = x0 => BitsMap$(x0);\n    function Map$(_V$1) {\n        var $36 = null;\n        return $36;\n    }\n    const Map = x0 => Map$(x0);\n    const App$MiniMMO$State = App$State$new;\n    function App$Store$new$(_local$2, _global$3) {\n        var $37 = {\n            _: \"App.Store.new\",\n            local: _local$2,\n            global: _global$3\n        };\n        return $37;\n    }\n    const App$Store$new = x0 => x1 => App$Store$new$(x0, x1);\n    const Unit$new = null;\n    const BitsMap$new = {\n        _: \"BitsMap.new\"\n    };\n    function BitsMap$tie$(_val$2, _lft$3, _rgt$4) {\n        var $38 = {\n            _: \"BitsMap.tie\",\n            val: _val$2,\n            lft: _lft$3,\n            rgt: _rgt$4\n        };\n        return $38;\n    }\n    const BitsMap$tie = x0 => x1 => x2 => BitsMap$tie$(x0, x1, x2);\n    function Maybe$some$(_value$2) {\n        var $39 = {\n            _: \"Maybe.some\",\n            value: _value$2\n        };\n        return $39;\n    }\n    const Maybe$some = x0 => Maybe$some$(x0);\n    const Maybe$none = {\n        _: \"Maybe.none\"\n    };\n    const BitsMap$set = a0 => a1 => a2 => bitsmap_set(a0, a1, a2, \"set\");\n    const Bits$e = \"\";\n    const Bits$o = a0 => a0 + \"0\";\n    const Bits$i = a0 => a0 + \"1\";\n    const Bits$concat = a0 => a1 => a1 + a0;\n    function Word$to_bits$(_a$2) {\n        var self = _a$2;\n        switch (self._) {\n          case \"Word.o\":\n            var $41 = self.pred;\n            var $42 = Word$to_bits$($41) + \"0\";\n            var $40 = $42;\n            break;\n\n          case \"Word.i\":\n            var $43 = self.pred;\n            var $44 = Word$to_bits$($43) + \"1\";\n            var $40 = $44;\n            break;\n\n          case \"Word.e\":\n            var $45 = Bits$e;\n            var $40 = $45;\n            break;\n        }\n        return $40;\n    }\n    const Word$to_bits = x0 => Word$to_bits$(x0);\n    function Nat$succ$(_pred$1) {\n        var $46 = 1n + _pred$1;\n        return $46;\n    }\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const U16$to_bits = a0 => u16_to_bits(a0);\n    function String$to_bits$(_str$1) {\n        var self = _str$1;\n        if (self.length === 0) {\n            var $48 = Bits$e;\n            var $47 = $48;\n        } else {\n            var $49 = self.charCodeAt(0);\n            var $50 = self.slice(1);\n            var $51 = String$to_bits$($50) + u16_to_bits($49);\n            var $47 = $51;\n        }\n        return $47;\n    }\n    const String$to_bits = x0 => String$to_bits$(x0);\n    function Map$from_list$(_xs$2) {\n        var self = _xs$2;\n        switch (self._) {\n          case \"List.cons\":\n            var $53 = self.head;\n            var $54 = self.tail;\n            var self = $53;\n            switch (self._) {\n              case \"Pair.new\":\n                var $56 = self.fst;\n                var $57 = self.snd;\n                var $58 = bitsmap_set(String$to_bits$($56), $57, Map$from_list$($54), \"set\");\n                var $55 = $58;\n                break;\n            }\n            ;\n            var $52 = $55;\n            break;\n\n          case \"List.nil\":\n            var $59 = BitsMap$new;\n            var $52 = $59;\n            break;\n        }\n        return $52;\n    }\n    const Map$from_list = x0 => Map$from_list$(x0);\n    const List$nil = {\n        _: \"List.nil\"\n    };\n    function Pair$(_A$1, _B$2) {\n        var $60 = null;\n        return $60;\n    }\n    const Pair = x0 => x1 => Pair$(x0, x1);\n    const App$MiniMMO$init = App$Store$new$(Unit$new, Map$from_list$(List$nil));\n    function Pair$snd$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n          case \"Pair.new\":\n            var $62 = self.snd;\n            var $63 = $62;\n            var $61 = $63;\n            break;\n        }\n        return $61;\n    }\n    const Pair$snd = x0 => Pair$snd$(x0);\n    const App$State$global = Pair$snd;\n    const List$for = a0 => a1 => a2 => list_for(a0)(a1)(a2);\n    function List$(_A$1) {\n        var $64 = null;\n        return $64;\n    }\n    const List = x0 => List$(x0);\n    function List$cons$(_head$2, _tail$3) {\n        var $65 = {\n            _: \"List.cons\",\n            head: _head$2,\n            tail: _tail$3\n        };\n        return $65;\n    }\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n    function BitsMap$values$go$(_xs$2, _list$3) {\n        var self = _xs$2;\n        switch (self._) {\n          case \"BitsMap.tie\":\n            var $67 = self.val;\n            var $68 = self.lft;\n            var $69 = self.rgt;\n            var self = $67;\n            switch (self._) {\n              case \"Maybe.some\":\n                var $71 = self.value;\n                var $72 = List$cons$($71, _list$3);\n                var _list0$7 = $72;\n                break;\n\n              case \"Maybe.none\":\n                var $73 = _list$3;\n                var _list0$7 = $73;\n                break;\n            }\n            ;\n            var _list1$8 = BitsMap$values$go$($68, _list0$7);\n            var _list2$9 = BitsMap$values$go$($69, _list1$8);\n            var $70 = _list2$9;\n            var $66 = $70;\n            break;\n\n          case \"BitsMap.new\":\n            var $74 = _list$3;\n            var $66 = $74;\n            break;\n        }\n        return $66;\n    }\n    const BitsMap$values$go = x0 => x1 => BitsMap$values$go$(x0, x1);\n    function Map$values$(_xs$2) {\n        var $75 = BitsMap$values$go$(_xs$2, List$nil);\n        return $75;\n    }\n    const Map$values = x0 => Map$values$(x0);\n    function String$cons$(_head$1, _tail$2) {\n        var $76 = String.fromCharCode(_head$1) + _tail$2;\n        return $76;\n    }\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n    const String$concat = a0 => a1 => a0 + a1;\n    function List$fold$(_list$2, _nil$4, _cons$5) {\n        var self = _list$2;\n        switch (self._) {\n          case \"List.cons\":\n            var $78 = self.head;\n            var $79 = self.tail;\n            var $80 = _cons$5($78)(List$fold$($79, _nil$4, _cons$5));\n            var $77 = $80;\n            break;\n\n          case \"List.nil\":\n            var $81 = _nil$4;\n            var $77 = $81;\n            break;\n        }\n        return $77;\n    }\n    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);\n    function Either$(_A$1, _B$2) {\n        var $82 = null;\n        return $82;\n    }\n    const Either = x0 => x1 => Either$(x0, x1);\n    function Either$left$(_value$3) {\n        var $83 = {\n            _: \"Either.left\",\n            value: _value$3\n        };\n        return $83;\n    }\n    const Either$left = x0 => Either$left$(x0);\n    function Either$right$(_value$3) {\n        var $84 = {\n            _: \"Either.right\",\n            value: _value$3\n        };\n        return $84;\n    }\n    const Either$right = x0 => Either$right$(x0);\n    function Nat$sub_rem$(_n$1, _m$2) {\n        var Nat$sub_rem$ = (_n$1, _m$2) => ({\n            ctr: \"TCO\",\n            arg: [ _n$1, _m$2 ]\n        });\n        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);\n        var arg = [ _n$1, _m$2 ];\n        while (true) {\n            let [ _n$1, _m$2 ] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $85 = Either$left$(_n$1);\n                    return $85;\n                } else {\n                    var $86 = self - 1n;\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $88 = Either$right$(Nat$succ$($86));\n                        var $87 = $88;\n                    } else {\n                        var $89 = self - 1n;\n                        var $90 = Nat$sub_rem$($89, $86);\n                        var $87 = $90;\n                    }\n                    return $87;\n                }\n            })();\n            if (R.ctr === \"TCO\") arg = R.arg; else return R;\n        }\n    }\n    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);\n    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {\n        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({\n            ctr: \"TCO\",\n            arg: [ _n$1, _m$2, _d$3 ]\n        });\n        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);\n        var arg = [ _n$1, _m$2, _d$3 ];\n        while (true) {\n            let [ _n$1, _m$2, _d$3 ] = arg;\n            var R = (() => {\n                var self = Nat$sub_rem$(_n$1, _m$2);\n                switch (self._) {\n                  case \"Either.left\":\n                    var $91 = self.value;\n                    var $92 = Nat$div_mod$go$($91, _m$2, Nat$succ$(_d$3));\n                    return $92;\n\n                  case \"Either.right\":\n                    var $93 = Pair$new$(_d$3, _n$1);\n                    return $93;\n                }\n            })();\n            if (R.ctr === \"TCO\") arg = R.arg; else return R;\n        }\n    }\n    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);\n    const Nat$div_mod = a0 => a1 => ({\n        _: \"Pair.new\",\n        fst: a0 / a1,\n        snd: a0 % a1\n    });\n    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {\n        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({\n            ctr: \"TCO\",\n            arg: [ _base$1, _nat$2, _res$3 ]\n        });\n        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);\n        var arg = [ _base$1, _nat$2, _res$3 ];\n        while (true) {\n            let [ _base$1, _nat$2, _res$3 ] = arg;\n            var R = (() => {\n                var self = {\n                    _: \"Pair.new\",\n                    fst: _nat$2 / _base$1,\n                    snd: _nat$2 % _base$1\n                };\n                switch (self._) {\n                  case \"Pair.new\":\n                    var $94 = self.fst;\n                    var $95 = self.snd;\n                    var self = $94;\n                    if (self === 0n) {\n                        var $97 = List$cons$($95, _res$3);\n                        var $96 = $97;\n                    } else {\n                        var $98 = self - 1n;\n                        var $99 = Nat$to_base$go$(_base$1, $94, List$cons$($95, _res$3));\n                        var $96 = $99;\n                    }\n                    ;\n                    return $96;\n                }\n            })();\n            if (R.ctr === \"TCO\") arg = R.arg; else return R;\n        }\n    }\n    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);\n    function Nat$to_base$(_base$1, _nat$2) {\n        var $100 = Nat$to_base$go$(_base$1, _nat$2, List$nil);\n        return $100;\n    }\n    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);\n    const String$nil = \"\";\n    function Nat$mod$go$(_n$1, _m$2, _r$3) {\n        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({\n            ctr: \"TCO\",\n            arg: [ _n$1, _m$2, _r$3 ]\n        });\n        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);\n        var arg = [ _n$1, _m$2, _r$3 ];\n        while (true) {\n            let [ _n$1, _m$2, _r$3 ] = arg;\n            var R = (() => {\n                var self = _m$2;\n                if (self === 0n) {\n                    var $101 = Nat$mod$go$(_n$1, _r$3, _m$2);\n                    return $101;\n                } else {\n                    var $102 = self - 1n;\n                    var self = _n$1;\n                    if (self === 0n) {\n                        var $104 = _r$3;\n                        var $103 = $104;\n                    } else {\n                        var $105 = self - 1n;\n                        var $106 = Nat$mod$go$($105, $102, Nat$succ$(_r$3));\n                        var $103 = $106;\n                    }\n                    return $103;\n                }\n            })();\n            if (R.ctr === \"TCO\") arg = R.arg; else return R;\n        }\n    }\n    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);\n    const Nat$mod = a0 => a1 => a0 % a1;\n    const Bool$false = false;\n    const Bool$and = a0 => a1 => a0 && a1;\n    const Bool$true = true;\n    const Nat$gtn = a0 => a1 => a0 > a1;\n    const Nat$lte = a0 => a1 => a0 <= a1;\n    function Maybe$(_A$1) {\n        var $107 = null;\n        return $107;\n    }\n    const Maybe = x0 => Maybe$(x0);\n    function List$at$(_index$2, _list$3) {\n        var List$at$ = (_index$2, _list$3) => ({\n            ctr: \"TCO\",\n            arg: [ _index$2, _list$3 ]\n        });\n        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);\n        var arg = [ _index$2, _list$3 ];\n        while (true) {\n            let [ _index$2, _list$3 ] = arg;\n            var R = (() => {\n                var self = _list$3;\n                switch (self._) {\n                  case \"List.cons\":\n                    var $108 = self.head;\n                    var $109 = self.tail;\n                    var self = _index$2;\n                    if (self === 0n) {\n                        var $111 = Maybe$some$($108);\n                        var $110 = $111;\n                    } else {\n                        var $112 = self - 1n;\n                        var $113 = List$at$($112, $109);\n                        var $110 = $113;\n                    }\n                    ;\n                    return $110;\n\n                  case \"List.nil\":\n                    var $114 = Maybe$none;\n                    return $114;\n                }\n            })();\n            if (R.ctr === \"TCO\") arg = R.arg; else return R;\n        }\n    }\n    const List$at = x0 => x1 => List$at$(x0, x1);\n    function Nat$show_digit$(_base$1, _n$2) {\n        var _m$3 = _n$2 % _base$1;\n        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));\n        var self = _base$1 > 0n && _base$1 <= 64n;\n        if (self) {\n            var self = List$at$(_m$3, _base64$4);\n            switch (self._) {\n              case \"Maybe.some\":\n                var $117 = self.value;\n                var $118 = $117;\n                var $116 = $118;\n                break;\n\n              case \"Maybe.none\":\n                var $119 = 35;\n                var $116 = $119;\n                break;\n            }\n            var $115 = $116;\n        } else {\n            var $120 = 35;\n            var $115 = $120;\n        }\n        return $115;\n    }\n    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);\n    function Nat$to_string_base$(_base$1, _nat$2) {\n        var $121 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, _n$3 => _str$4 => {\n            var $122 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);\n            return $122;\n        });\n        return $121;\n    }\n    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);\n    function Nat$show$(_n$1) {\n        var $123 = Nat$to_string_base$(10n, _n$1);\n        return $123;\n    }\n    const Nat$show = x0 => Nat$show$(x0);\n    function Word$fold$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var self = _word$6;\n        switch (self._) {\n          case \"Word.o\":\n            var $125 = self.pred;\n            var $126 = _w0$4(Word$fold$(_nil$3, _w0$4, _w1$5, $125));\n            var $124 = $126;\n            break;\n\n          case \"Word.i\":\n            var $127 = self.pred;\n            var $128 = _w1$5(Word$fold$(_nil$3, _w0$4, _w1$5, $127));\n            var $124 = $128;\n            break;\n\n          case \"Word.e\":\n            var $129 = _nil$3;\n            var $124 = $129;\n            break;\n        }\n        return $124;\n    }\n    const Word$fold = x0 => x1 => x2 => x3 => Word$fold$(x0, x1, x2, x3);\n    const Nat$add = a0 => a1 => a0 + a1;\n    const Nat$mul = a0 => a1 => a0 * a1;\n    function Word$to_nat$(_word$2) {\n        var $130 = Word$fold$(0n, a1 => 2n * a1, _x$4 => {\n            var $131 = Nat$succ$(2n * _x$4);\n            return $131;\n        }, _word$2);\n        return $130;\n    }\n    const Word$to_nat = x0 => Word$to_nat$(x0);\n    const U32$to_nat = a0 => BigInt(a0);\n    function DOM$node$(_tag$1, _props$2, _style$3, _children$4) {\n        var $132 = {\n            _: \"DOM.node\",\n            tag: _tag$1,\n            props: _props$2,\n            style: _style$3,\n            children: _children$4\n        };\n        return $132;\n    }\n    const DOM$node = x0 => x1 => x2 => x3 => DOM$node$(x0, x1, x2, x3);\n    function DOM$text$(_value$1) {\n        var $133 = {\n            _: \"DOM.text\",\n            value: _value$1\n        };\n        return $133;\n    }\n    const DOM$text = x0 => DOM$text$(x0);\n    function App$MiniMMO$draw$(_state$1) {\n        var _avatars$2 = List$nil;\n        var self = _state$1;\n        switch (self._) {\n          case \"App.Store.new\":\n            var $135 = self.global;\n            var $136 = $135;\n            var _map$3 = $136;\n            break;\n        }\n        var _avatars$4 = (() => {\n            var $138 = _avatars$2;\n            var $139 = Map$values$(_map$3);\n            let _avatars$5 = $138;\n            let _player$4;\n            while ($139._ === \"List.cons\") {\n                _player$4 = $139.head;\n                var _style$6 = Map$from_list$(List$cons$(Pair$new$(\"position\", \"absolute\"), List$cons$(Pair$new$(\"left\", Nat$show$(BigInt((() => {\n                    var self = _player$4;\n                    switch (self._) {\n                      case \"App.MiniMMO.Player.new\":\n                        var $140 = self.x;\n                        var $141 = $140;\n                        return $141;\n                    }\n                })())) + \"px\"), List$cons$(Pair$new$(\"top\", Nat$show$(BigInt((() => {\n                    var self = _player$4;\n                    switch (self._) {\n                      case \"App.MiniMMO.Player.new\":\n                        var $142 = self.y;\n                        var $143 = $142;\n                        return $143;\n                    }\n                })())) + \"px\"), List$nil))));\n                var $138 = List$cons$(DOM$node$(\"div\", Map$from_list$(List$nil), _style$6, List$cons$(DOM$text$(\"X\"), List$nil)), _avatars$5);\n                _avatars$5 = $138;\n                $139 = $139.tail;\n            }\n            return _avatars$5;\n        })();\n        var $134 = DOM$node$(\"div\", Map$from_list$(List$nil), Map$from_list$(List$nil), _avatars$4);\n        return $134;\n    }\n    const App$MiniMMO$draw = x0 => App$MiniMMO$draw$(x0);\n    function IO$(_A$1) {\n        var $144 = null;\n        return $144;\n    }\n    const IO = x0 => IO$(x0);\n    function Pair$fst$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n          case \"Pair.new\":\n            var $146 = self.fst;\n            var $147 = $146;\n            var $145 = $147;\n            break;\n        }\n        return $145;\n    }\n    const Pair$fst = x0 => Pair$fst$(x0);\n    const App$State$local = Pair$fst;\n    function IO$ask$(_query$2, _param$3, _then$4) {\n        var $148 = {\n            _: \"IO.ask\",\n            query: _query$2,\n            param: _param$3,\n            then: _then$4\n        };\n        return $148;\n    }\n    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);\n    function IO$bind$(_a$3, _f$4) {\n        var self = _a$3;\n        switch (self._) {\n          case \"IO.end\":\n            var $150 = self.value;\n            var $151 = _f$4($150);\n            var $149 = $151;\n            break;\n\n          case \"IO.ask\":\n            var $152 = self.query;\n            var $153 = self.param;\n            var $154 = self.then;\n            var $155 = IO$ask$($152, $153, _x$8 => {\n                var $156 = IO$bind$($154(_x$8), _f$4);\n                return $156;\n            });\n            var $149 = $155;\n            break;\n        }\n        return $149;\n    }\n    const IO$bind = x0 => x1 => IO$bind$(x0, x1);\n    function IO$end$(_value$2) {\n        var $157 = {\n            _: \"IO.end\",\n            value: _value$2\n        };\n        return $157;\n    }\n    const IO$end = x0 => IO$end$(x0);\n    function IO$monad$(_new$2) {\n        var $158 = _new$2(IO$bind)(IO$end);\n        return $158;\n    }\n    const IO$monad = x0 => IO$monad$(x0);\n    function IO$do$(_call$1, _param$2) {\n        var $159 = IO$ask$(_call$1, _param$2, _answer$3 => {\n            var $160 = IO$end$(Unit$new);\n            return $160;\n        });\n        return $159;\n    }\n    const IO$do = x0 => x1 => IO$do$(x0, x1);\n    const App$pass = IO$monad$(_m$bind$2 => _m$pure$3 => {\n        var $161 = _m$pure$3;\n        return $161;\n    })(Maybe$none);\n    function App$do$(_call$2, _param$3) {\n        var $162 = IO$monad$(_m$bind$4 => _m$pure$5 => {\n            var $163 = _m$bind$4;\n            return $163;\n        })(IO$do$(_call$2, _param$3))(_$4 => {\n            var $164 = App$pass;\n            return $164;\n        });\n        return $162;\n    }\n    const App$do = x0 => x1 => App$do$(x0, x1);\n    function App$watch$(_room$2) {\n        var $165 = App$do$(\"watch\", _room$2);\n        return $165;\n    }\n    const App$watch = x0 => App$watch$(x0);\n    const App$MiniMMO$room = \"0xc910a02b7c8a12\";\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n          case \"Cmp.ltn\":\n          case \"Cmp.gtn\":\n            var $167 = Bool$false;\n            var $166 = $167;\n            break;\n\n          case \"Cmp.eql\":\n            var $168 = Bool$true;\n            var $166 = $168;\n            break;\n        }\n        return $166;\n    }\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n    const Cmp$ltn = {\n        _: \"Cmp.ltn\"\n    };\n    const Cmp$gtn = {\n        _: \"Cmp.gtn\"\n    };\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n          case \"Word.o\":\n            var $170 = self.pred;\n            var $171 = _b$7 => {\n                var self = _b$7;\n                switch (self._) {\n                  case \"Word.o\":\n                    var $173 = self.pred;\n                    var $174 = _a$pred$10 => {\n                        var $175 = Word$cmp$go$(_a$pred$10, $173, _c$4);\n                        return $175;\n                    };\n                    var $172 = $174;\n                    break;\n\n                  case \"Word.i\":\n                    var $176 = self.pred;\n                    var $177 = _a$pred$10 => {\n                        var $178 = Word$cmp$go$(_a$pred$10, $176, Cmp$ltn);\n                        return $178;\n                    };\n                    var $172 = $177;\n                    break;\n\n                  case \"Word.e\":\n                    var $179 = _a$pred$8 => {\n                        var $180 = _c$4;\n                        return $180;\n                    };\n                    var $172 = $179;\n                    break;\n                }\n                var $172 = $172($170);\n                return $172;\n            };\n            var $169 = $171;\n            break;\n\n          case \"Word.i\":\n            var $181 = self.pred;\n            var $182 = _b$7 => {\n                var self = _b$7;\n                switch (self._) {\n                  case \"Word.o\":\n                    var $184 = self.pred;\n                    var $185 = _a$pred$10 => {\n                        var $186 = Word$cmp$go$(_a$pred$10, $184, Cmp$gtn);\n                        return $186;\n                    };\n                    var $183 = $185;\n                    break;\n\n                  case \"Word.i\":\n                    var $187 = self.pred;\n                    var $188 = _a$pred$10 => {\n                        var $189 = Word$cmp$go$(_a$pred$10, $187, _c$4);\n                        return $189;\n                    };\n                    var $183 = $188;\n                    break;\n\n                  case \"Word.e\":\n                    var $190 = _a$pred$8 => {\n                        var $191 = _c$4;\n                        return $191;\n                    };\n                    var $183 = $190;\n                    break;\n                }\n                var $183 = $183($181);\n                return $183;\n            };\n            var $169 = $182;\n            break;\n\n          case \"Word.e\":\n            var $192 = _b$5 => {\n                var $193 = _c$4;\n                return $193;\n            };\n            var $169 = $192;\n            break;\n        }\n        var $169 = $169(_b$3);\n        return $169;\n    }\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = {\n        _: \"Cmp.eql\"\n    };\n    function Word$cmp$(_a$2, _b$3) {\n        var $194 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $194;\n    }\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n    function Word$eql$(_a$2, _b$3) {\n        var $195 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $195;\n    }\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n    const U16$eql = a0 => a1 => a0 === a1;\n    function App$new_post$(_room$2, _data$3) {\n        var $196 = IO$monad$(_m$bind$4 => _m$pure$5 => {\n            var $197 = _m$bind$4;\n            return $197;\n        })(App$do$(\"post\", _room$2 + (\";\" + _data$3)))(_$4 => {\n            var $198 = App$pass;\n            return $198;\n        });\n        return $196;\n    }\n    const App$new_post = x0 => x1 => App$new_post$(x0, x1);\n    const App$MiniMMO$command$a_down = \"0x0000000000000000000000000000000000000000000000000000000000000001\";\n    const App$MiniMMO$command$d_down = \"0x0000000000000000000000000000000000000000000000000000000000000003\";\n    const App$MiniMMO$command$w_down = \"0x0000000000000000000000000000000000000000000000000000000000000007\";\n    const App$MiniMMO$command$s_down = \"0x0000000000000000000000000000000000000000000000000000000000000005\";\n    const App$MiniMMO$command$a_up = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n    const App$MiniMMO$command$d_up = \"0x0000000000000000000000000000000000000000000000000000000000000002\";\n    const App$MiniMMO$command$w_up = \"0x0000000000000000000000000000000000000000000000000000000000000006\";\n    const App$MiniMMO$command$s_up = \"0x0000000000000000000000000000000000000000000000000000000000000004\";\n    function App$MiniMMO$when$(_event$1, _state$2) {\n        var self = _event$1;\n        switch (self._) {\n          case \"App.Event.key_down\":\n            var $200 = self.code;\n            var self = $200 === 65;\n            if (self) {\n                var $202 = App$new_post$(App$MiniMMO$room, App$MiniMMO$command$a_down);\n                var $201 = $202;\n            } else {\n                var self = $200 === 68;\n                if (self) {\n                    var $204 = App$new_post$(App$MiniMMO$room, App$MiniMMO$command$d_down);\n                    var $203 = $204;\n                } else {\n                    var self = $200 === 87;\n                    if (self) {\n                        var $206 = App$new_post$(App$MiniMMO$room, App$MiniMMO$command$w_down);\n                        var $205 = $206;\n                    } else {\n                        var self = $200 === 83;\n                        if (self) {\n                            var $208 = App$new_post$(App$MiniMMO$room, App$MiniMMO$command$s_down);\n                            var $207 = $208;\n                        } else {\n                            var $209 = App$pass;\n                            var $207 = $209;\n                        }\n                        var $205 = $207;\n                    }\n                    var $203 = $205;\n                }\n                var $201 = $203;\n            }\n            ;\n            var $199 = $201;\n            break;\n\n          case \"App.Event.key_up\":\n            var $210 = self.code;\n            var self = $210 === 65;\n            if (self) {\n                var $212 = App$new_post$(App$MiniMMO$room, App$MiniMMO$command$a_up);\n                var $211 = $212;\n            } else {\n                var self = $210 === 68;\n                if (self) {\n                    var $214 = App$new_post$(App$MiniMMO$room, App$MiniMMO$command$d_up);\n                    var $213 = $214;\n                } else {\n                    var self = $210 === 87;\n                    if (self) {\n                        var $216 = App$new_post$(App$MiniMMO$room, App$MiniMMO$command$w_up);\n                        var $215 = $216;\n                    } else {\n                        var self = $210 === 83;\n                        if (self) {\n                            var $218 = App$new_post$(App$MiniMMO$room, App$MiniMMO$command$s_up);\n                            var $217 = $218;\n                        } else {\n                            var $219 = App$pass;\n                            var $217 = $219;\n                        }\n                        var $215 = $217;\n                    }\n                    var $213 = $215;\n                }\n                var $211 = $213;\n            }\n            ;\n            var $199 = $211;\n            break;\n\n          case \"App.Event.init\":\n            var $220 = App$watch$(App$MiniMMO$room);\n            var $199 = $220;\n            break;\n\n          case \"App.Event.frame\":\n          case \"App.Event.mouse_down\":\n          case \"App.Event.mouse_up\":\n          case \"App.Event.mouse_over\":\n          case \"App.Event.mouse_click\":\n          case \"App.Event.input\":\n            var $221 = App$pass;\n            var $199 = $221;\n            break;\n        }\n        return $199;\n    }\n    const App$MiniMMO$when = x0 => x1 => App$MiniMMO$when$(x0, x1);\n    function BitsMap$map$(_fn$3, _map$4) {\n        var self = _map$4;\n        switch (self._) {\n          case \"BitsMap.tie\":\n            var $223 = self.val;\n            var $224 = self.lft;\n            var $225 = self.rgt;\n            var self = $223;\n            switch (self._) {\n              case \"Maybe.some\":\n                var $227 = self.value;\n                var $228 = Maybe$some$(_fn$3($227));\n                var _val$8 = $228;\n                break;\n\n              case \"Maybe.none\":\n                var $229 = Maybe$none;\n                var _val$8 = $229;\n                break;\n            }\n            ;\n            var _lft$9 = BitsMap$map$(_fn$3, $224);\n            var _rgt$10 = BitsMap$map$(_fn$3, $225);\n            var $226 = BitsMap$tie$(_val$8, _lft$9, _rgt$10);\n            var $222 = $226;\n            break;\n\n          case \"BitsMap.new\":\n            var $230 = BitsMap$new;\n            var $222 = $230;\n            break;\n        }\n        return $222;\n    }\n    const BitsMap$map = x0 => x1 => BitsMap$map$(x0, x1);\n    function Map$map$(_fn$3, _map$4) {\n        var $231 = BitsMap$map$(_fn$3, _map$4);\n        return $231;\n    }\n    const Map$map = x0 => x1 => Map$map$(x0, x1);\n    function U32$new$(_value$1) {\n        var $232 = word_to_u32(_value$1);\n        return $232;\n    }\n    const U32$new = x0 => U32$new$(x0);\n    const Word$e = {\n        _: \"Word.e\"\n    };\n    function Word$(_size$1) {\n        var $233 = null;\n        return $233;\n    }\n    const Word = x0 => Word$(x0);\n    function Word$i$(_pred$2) {\n        var $234 = {\n            _: \"Word.i\",\n            pred: _pred$2\n        };\n        return $234;\n    }\n    const Word$i = x0 => Word$i$(x0);\n    function Word$o$(_pred$2) {\n        var $235 = {\n            _: \"Word.o\",\n            pred: _pred$2\n        };\n        return $235;\n    }\n    const Word$o = x0 => Word$o$(x0);\n    function Word$subber$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n          case \"Word.o\":\n            var $237 = self.pred;\n            var $238 = _b$7 => {\n                var self = _b$7;\n                switch (self._) {\n                  case \"Word.o\":\n                    var $240 = self.pred;\n                    var $241 = _a$pred$10 => {\n                        var self = _c$4;\n                        if (self) {\n                            var $243 = Word$i$(Word$subber$(_a$pred$10, $240, Bool$true));\n                            var $242 = $243;\n                        } else {\n                            var $244 = Word$o$(Word$subber$(_a$pred$10, $240, Bool$false));\n                            var $242 = $244;\n                        }\n                        return $242;\n                    };\n                    var $239 = $241;\n                    break;\n\n                  case \"Word.i\":\n                    var $245 = self.pred;\n                    var $246 = _a$pred$10 => {\n                        var self = _c$4;\n                        if (self) {\n                            var $248 = Word$o$(Word$subber$(_a$pred$10, $245, Bool$true));\n                            var $247 = $248;\n                        } else {\n                            var $249 = Word$i$(Word$subber$(_a$pred$10, $245, Bool$true));\n                            var $247 = $249;\n                        }\n                        return $247;\n                    };\n                    var $239 = $246;\n                    break;\n\n                  case \"Word.e\":\n                    var $250 = _a$pred$8 => {\n                        var $251 = Word$e;\n                        return $251;\n                    };\n                    var $239 = $250;\n                    break;\n                }\n                var $239 = $239($237);\n                return $239;\n            };\n            var $236 = $238;\n            break;\n\n          case \"Word.i\":\n            var $252 = self.pred;\n            var $253 = _b$7 => {\n                var self = _b$7;\n                switch (self._) {\n                  case \"Word.o\":\n                    var $255 = self.pred;\n                    var $256 = _a$pred$10 => {\n                        var self = _c$4;\n                        if (self) {\n                            var $258 = Word$o$(Word$subber$(_a$pred$10, $255, Bool$false));\n                            var $257 = $258;\n                        } else {\n                            var $259 = Word$i$(Word$subber$(_a$pred$10, $255, Bool$false));\n                            var $257 = $259;\n                        }\n                        return $257;\n                    };\n                    var $254 = $256;\n                    break;\n\n                  case \"Word.i\":\n                    var $260 = self.pred;\n                    var $261 = _a$pred$10 => {\n                        var self = _c$4;\n                        if (self) {\n                            var $263 = Word$i$(Word$subber$(_a$pred$10, $260, Bool$true));\n                            var $262 = $263;\n                        } else {\n                            var $264 = Word$o$(Word$subber$(_a$pred$10, $260, Bool$false));\n                            var $262 = $264;\n                        }\n                        return $262;\n                    };\n                    var $254 = $261;\n                    break;\n\n                  case \"Word.e\":\n                    var $265 = _a$pred$8 => {\n                        var $266 = Word$e;\n                        return $266;\n                    };\n                    var $254 = $265;\n                    break;\n                }\n                var $254 = $254($252);\n                return $254;\n            };\n            var $236 = $253;\n            break;\n\n          case \"Word.e\":\n            var $267 = _b$5 => {\n                var $268 = Word$e;\n                return $268;\n            };\n            var $236 = $267;\n            break;\n        }\n        var $236 = $236(_b$3);\n        return $236;\n    }\n    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);\n    function Word$sub$(_a$2, _b$3) {\n        var $269 = Word$subber$(_a$2, _b$3, Bool$false);\n        return $269;\n    }\n    const Word$sub = x0 => x1 => Word$sub$(x0, x1);\n    const U32$sub = a0 => a1 => a0 - a1 >>> 0;\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: \"TCO\",\n            arg: [ _n$2, _f$3, _x$4 ]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [ _n$2, _f$3, _x$4 ];\n        while (true) {\n            let [ _n$2, _f$3, _x$4 ] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $270 = _x$4;\n                    return $270;\n                } else {\n                    var $271 = self - 1n;\n                    var $272 = Nat$apply$($271, _f$3, _f$3(_x$4));\n                    return $272;\n                }\n            })();\n            if (R.ctr === \"TCO\") arg = R.arg; else return R;\n        }\n    }\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n          case \"Word.o\":\n            var $274 = self.pred;\n            var $275 = Word$i$($274);\n            var $273 = $275;\n            break;\n\n          case \"Word.i\":\n            var $276 = self.pred;\n            var $277 = Word$o$(Word$inc$($276));\n            var $273 = $277;\n            break;\n\n          case \"Word.e\":\n            var $278 = Word$e;\n            var $273 = $278;\n            break;\n        }\n        return $273;\n    }\n    const Word$inc = x0 => Word$inc$(x0);\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $280 = Word$e;\n            var $279 = $280;\n        } else {\n            var $281 = self - 1n;\n            var $282 = Word$o$(Word$zero$($281));\n            var $279 = $282;\n        }\n        return $279;\n    }\n    const Word$zero = x0 => Word$zero$(x0);\n    function Nat$to_word$(_size$1, _n$2) {\n        var $283 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));\n        return $283;\n    }\n    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);\n    const U32$from_nat = a0 => Number(a0) >>> 0;\n    function Word$adder$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n          case \"Word.o\":\n            var $285 = self.pred;\n            var $286 = _b$7 => {\n                var self = _b$7;\n                switch (self._) {\n                  case \"Word.o\":\n                    var $288 = self.pred;\n                    var $289 = _a$pred$10 => {\n                        var self = _c$4;\n                        if (self) {\n                            var $291 = Word$i$(Word$adder$(_a$pred$10, $288, Bool$false));\n                            var $290 = $291;\n                        } else {\n                            var $292 = Word$o$(Word$adder$(_a$pred$10, $288, Bool$false));\n                            var $290 = $292;\n                        }\n                        return $290;\n                    };\n                    var $287 = $289;\n                    break;\n\n                  case \"Word.i\":\n                    var $293 = self.pred;\n                    var $294 = _a$pred$10 => {\n                        var self = _c$4;\n                        if (self) {\n                            var $296 = Word$o$(Word$adder$(_a$pred$10, $293, Bool$true));\n                            var $295 = $296;\n                        } else {\n                            var $297 = Word$i$(Word$adder$(_a$pred$10, $293, Bool$false));\n                            var $295 = $297;\n                        }\n                        return $295;\n                    };\n                    var $287 = $294;\n                    break;\n\n                  case \"Word.e\":\n                    var $298 = _a$pred$8 => {\n                        var $299 = Word$e;\n                        return $299;\n                    };\n                    var $287 = $298;\n                    break;\n                }\n                var $287 = $287($285);\n                return $287;\n            };\n            var $284 = $286;\n            break;\n\n          case \"Word.i\":\n            var $300 = self.pred;\n            var $301 = _b$7 => {\n                var self = _b$7;\n                switch (self._) {\n                  case \"Word.o\":\n                    var $303 = self.pred;\n                    var $304 = _a$pred$10 => {\n                        var self = _c$4;\n                        if (self) {\n                            var $306 = Word$o$(Word$adder$(_a$pred$10, $303, Bool$true));\n                            var $305 = $306;\n                        } else {\n                            var $307 = Word$i$(Word$adder$(_a$pred$10, $303, Bool$false));\n                            var $305 = $307;\n                        }\n                        return $305;\n                    };\n                    var $302 = $304;\n                    break;\n\n                  case \"Word.i\":\n                    var $308 = self.pred;\n                    var $309 = _a$pred$10 => {\n                        var self = _c$4;\n                        if (self) {\n                            var $311 = Word$i$(Word$adder$(_a$pred$10, $308, Bool$true));\n                            var $310 = $311;\n                        } else {\n                            var $312 = Word$o$(Word$adder$(_a$pred$10, $308, Bool$true));\n                            var $310 = $312;\n                        }\n                        return $310;\n                    };\n                    var $302 = $309;\n                    break;\n\n                  case \"Word.e\":\n                    var $313 = _a$pred$8 => {\n                        var $314 = Word$e;\n                        return $314;\n                    };\n                    var $302 = $313;\n                    break;\n                }\n                var $302 = $302($300);\n                return $302;\n            };\n            var $284 = $301;\n            break;\n\n          case \"Word.e\":\n            var $315 = _b$5 => {\n                var $316 = Word$e;\n                return $316;\n            };\n            var $284 = $315;\n            break;\n        }\n        var $284 = $284(_b$3);\n        return $284;\n    }\n    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);\n    function Word$add$(_a$2, _b$3) {\n        var $317 = Word$adder$(_a$2, _b$3, Bool$false);\n        return $317;\n    }\n    const Word$add = x0 => x1 => Word$add$(x0, x1);\n    const U32$add = a0 => a1 => a0 + a1 >>> 0;\n    function App$MiniMMO$Player$new$(_w$1, _a$2, _s$3, _d$4, _x$5, _y$6) {\n        var $318 = {\n            _: \"App.MiniMMO.Player.new\",\n            w: _w$1,\n            a: _a$2,\n            s: _s$3,\n            d: _d$4,\n            x: _x$5,\n            y: _y$6\n        };\n        return $318;\n    }\n    const App$MiniMMO$Player$new = x0 => x1 => x2 => x3 => x4 => x5 => App$MiniMMO$Player$new$(x0, x1, x2, x3, x4, x5);\n    function App$MiniMMO$tick$(_tick$1, _map$2) {\n        var _map$3 = Map$map$(_player$3 => {\n            var self = _player$3;\n            switch (self._) {\n              case \"App.MiniMMO.Player.new\":\n                var $321 = self.w;\n                var $322 = self.a;\n                var $323 = self.s;\n                var $324 = self.d;\n                var $325 = self.x;\n                var $326 = self.y;\n                var _w$10 = $321;\n                var _a$11 = $322;\n                var _s$12 = $323;\n                var _d$13 = $324;\n                var _x$14 = $325;\n                var _y$15 = $326;\n                var self = $322;\n                if (self) {\n                    var $328 = _x$14 - 4 >>> 0;\n                    var _x$16 = $328;\n                } else {\n                    var $329 = _x$14;\n                    var _x$16 = $329;\n                }\n                ;\n                var self = $324;\n                if (self) {\n                    var $330 = _x$16 + 4 >>> 0;\n                    var _x$17 = $330;\n                } else {\n                    var $331 = _x$16;\n                    var _x$17 = $331;\n                }\n                ;\n                var self = $321;\n                if (self) {\n                    var $332 = _y$15 - 4 >>> 0;\n                    var _y$18 = $332;\n                } else {\n                    var $333 = _y$15;\n                    var _y$18 = $333;\n                }\n                ;\n                var self = $323;\n                if (self) {\n                    var $334 = _y$18 + 4 >>> 0;\n                    var _y$19 = $334;\n                } else {\n                    var $335 = _y$18;\n                    var _y$19 = $335;\n                }\n                ;\n                var $327 = App$MiniMMO$Player$new$(_w$10, _a$11, _s$12, _d$13, _x$17, _y$19);\n                var $320 = $327;\n                break;\n            }\n            return $320;\n        }, _map$2);\n        var $319 = _map$3;\n        return $319;\n    }\n    const App$MiniMMO$tick = x0 => x1 => App$MiniMMO$tick$(x0, x1);\n    const BitsMap$get = a0 => a1 => bitsmap_get(a0, a1);\n    function Map$get$(_key$2, _map$3) {\n        var $336 = bitsmap_get(String$to_bits$(_key$2), _map$3);\n        return $336;\n    }\n    const Map$get = x0 => x1 => Map$get$(x0, x1);\n    const String$eql = a0 => a1 => a0 === a1;\n    function Map$set$(_key$2, _val$3, _map$4) {\n        var $337 = bitsmap_set(String$to_bits$(_key$2), _val$3, _map$4, \"set\");\n        return $337;\n    }\n    const Map$set = x0 => x1 => x2 => Map$set$(x0, x1, x2);\n    function App$MiniMMO$post$(_time$1, _room$2, _addr$3, _data$4, _map$5) {\n        var self = Map$get$(_addr$3, _map$5);\n        switch (self._) {\n          case \"Maybe.some\":\n            var $339 = self.value;\n            var _player$7 = $339;\n            var self = _data$4 === App$MiniMMO$command$a_down;\n            if (self) {\n                var self = _player$7;\n                switch (self._) {\n                  case \"App.MiniMMO.Player.new\":\n                    var $342 = self.w;\n                    var $343 = self.s;\n                    var $344 = self.d;\n                    var $345 = self.x;\n                    var $346 = self.y;\n                    var $347 = App$MiniMMO$Player$new$($342, Bool$true, $343, $344, $345, $346);\n                    var $341 = $347;\n                    break;\n                }\n                var _player$8 = $341;\n            } else {\n                var self = _data$4 === App$MiniMMO$command$s_down;\n                if (self) {\n                    var self = _player$7;\n                    switch (self._) {\n                      case \"App.MiniMMO.Player.new\":\n                        var $350 = self.w;\n                        var $351 = self.a;\n                        var $352 = self.d;\n                        var $353 = self.x;\n                        var $354 = self.y;\n                        var $355 = App$MiniMMO$Player$new$($350, $351, Bool$true, $352, $353, $354);\n                        var $349 = $355;\n                        break;\n                    }\n                    var $348 = $349;\n                } else {\n                    var self = _data$4 === App$MiniMMO$command$d_down;\n                    if (self) {\n                        var self = _player$7;\n                        switch (self._) {\n                          case \"App.MiniMMO.Player.new\":\n                            var $358 = self.w;\n                            var $359 = self.a;\n                            var $360 = self.s;\n                            var $361 = self.x;\n                            var $362 = self.y;\n                            var $363 = App$MiniMMO$Player$new$($358, $359, $360, Bool$true, $361, $362);\n                            var $357 = $363;\n                            break;\n                        }\n                        var $356 = $357;\n                    } else {\n                        var self = _data$4 === App$MiniMMO$command$w_down;\n                        if (self) {\n                            var self = _player$7;\n                            switch (self._) {\n                              case \"App.MiniMMO.Player.new\":\n                                var $366 = self.a;\n                                var $367 = self.s;\n                                var $368 = self.d;\n                                var $369 = self.x;\n                                var $370 = self.y;\n                                var $371 = App$MiniMMO$Player$new$(Bool$true, $366, $367, $368, $369, $370);\n                                var $365 = $371;\n                                break;\n                            }\n                            var $364 = $365;\n                        } else {\n                            var self = _data$4 === App$MiniMMO$command$a_up;\n                            if (self) {\n                                var self = _player$7;\n                                switch (self._) {\n                                  case \"App.MiniMMO.Player.new\":\n                                    var $374 = self.w;\n                                    var $375 = self.s;\n                                    var $376 = self.d;\n                                    var $377 = self.x;\n                                    var $378 = self.y;\n                                    var $379 = App$MiniMMO$Player$new$($374, Bool$false, $375, $376, $377, $378);\n                                    var $373 = $379;\n                                    break;\n                                }\n                                var $372 = $373;\n                            } else {\n                                var self = _data$4 === App$MiniMMO$command$s_up;\n                                if (self) {\n                                    var self = _player$7;\n                                    switch (self._) {\n                                      case \"App.MiniMMO.Player.new\":\n                                        var $382 = self.w;\n                                        var $383 = self.a;\n                                        var $384 = self.d;\n                                        var $385 = self.x;\n                                        var $386 = self.y;\n                                        var $387 = App$MiniMMO$Player$new$($382, $383, Bool$false, $384, $385, $386);\n                                        var $381 = $387;\n                                        break;\n                                    }\n                                    var $380 = $381;\n                                } else {\n                                    var self = _data$4 === App$MiniMMO$command$d_up;\n                                    if (self) {\n                                        var self = _player$7;\n                                        switch (self._) {\n                                          case \"App.MiniMMO.Player.new\":\n                                            var $390 = self.w;\n                                            var $391 = self.a;\n                                            var $392 = self.s;\n                                            var $393 = self.x;\n                                            var $394 = self.y;\n                                            var $395 = App$MiniMMO$Player$new$($390, $391, $392, Bool$false, $393, $394);\n                                            var $389 = $395;\n                                            break;\n                                        }\n                                        var $388 = $389;\n                                    } else {\n                                        var self = _data$4 === App$MiniMMO$command$w_up;\n                                        if (self) {\n                                            var self = _player$7;\n                                            switch (self._) {\n                                              case \"App.MiniMMO.Player.new\":\n                                                var $398 = self.a;\n                                                var $399 = self.s;\n                                                var $400 = self.d;\n                                                var $401 = self.x;\n                                                var $402 = self.y;\n                                                var $403 = App$MiniMMO$Player$new$(Bool$false, $398, $399, $400, $401, $402);\n                                                var $397 = $403;\n                                                break;\n                                            }\n                                            var $396 = $397;\n                                        } else {\n                                            var $404 = _player$7;\n                                            var $396 = $404;\n                                        }\n                                        var $388 = $396;\n                                    }\n                                    var $380 = $388;\n                                }\n                                var $372 = $380;\n                            }\n                            var $364 = $372;\n                        }\n                        var $356 = $364;\n                    }\n                    var $348 = $356;\n                }\n                var _player$8 = $348;\n            }\n            ;\n            var $340 = _player$8;\n            var _player$6 = $340;\n            break;\n\n          case \"Maybe.none\":\n            var $405 = App$MiniMMO$Player$new$(Bool$false, Bool$false, Bool$false, Bool$false, 0, 0);\n            var _player$6 = $405;\n            break;\n        }\n        var $338 = Map$set$(_addr$3, _player$6, _map$5);\n        return $338;\n    }\n    const App$MiniMMO$post = x0 => x1 => x2 => x3 => x4 => App$MiniMMO$post$(x0, x1, x2, x3, x4);\n    const App$MiniMMO = App$new$(App$MiniMMO$init, App$MiniMMO$draw, App$MiniMMO$when, App$MiniMMO$tick, App$MiniMMO$post);\n    return {\n        \"App.new\": App$new,\n        \"Pair.new\": Pair$new,\n        \"App.State.new\": App$State$new,\n        BitsMap: BitsMap,\n        Map: Map,\n        \"App.MiniMMO.State\": App$MiniMMO$State,\n        \"App.Store.new\": App$Store$new,\n        \"Unit.new\": Unit$new,\n        \"BitsMap.new\": BitsMap$new,\n        \"BitsMap.tie\": BitsMap$tie,\n        \"Maybe.some\": Maybe$some,\n        \"Maybe.none\": Maybe$none,\n        \"BitsMap.set\": BitsMap$set,\n        \"Bits.e\": Bits$e,\n        \"Bits.o\": Bits$o,\n        \"Bits.i\": Bits$i,\n        \"Bits.concat\": Bits$concat,\n        \"Word.to_bits\": Word$to_bits,\n        \"Nat.succ\": Nat$succ,\n        \"Nat.zero\": Nat$zero,\n        \"U16.to_bits\": U16$to_bits,\n        \"String.to_bits\": String$to_bits,\n        \"Map.from_list\": Map$from_list,\n        \"List.nil\": List$nil,\n        Pair: Pair,\n        \"App.MiniMMO.init\": App$MiniMMO$init,\n        \"Pair.snd\": Pair$snd,\n        \"App.State.global\": App$State$global,\n        \"List.for\": List$for,\n        List: List,\n        \"List.cons\": List$cons,\n        \"BitsMap.values.go\": BitsMap$values$go,\n        \"Map.values\": Map$values,\n        \"String.cons\": String$cons,\n        \"String.concat\": String$concat,\n        \"List.fold\": List$fold,\n        Either: Either,\n        \"Either.left\": Either$left,\n        \"Either.right\": Either$right,\n        \"Nat.sub_rem\": Nat$sub_rem,\n        \"Nat.div_mod.go\": Nat$div_mod$go,\n        \"Nat.div_mod\": Nat$div_mod,\n        \"Nat.to_base.go\": Nat$to_base$go,\n        \"Nat.to_base\": Nat$to_base,\n        \"String.nil\": String$nil,\n        \"Nat.mod.go\": Nat$mod$go,\n        \"Nat.mod\": Nat$mod,\n        \"Bool.false\": Bool$false,\n        \"Bool.and\": Bool$and,\n        \"Bool.true\": Bool$true,\n        \"Nat.gtn\": Nat$gtn,\n        \"Nat.lte\": Nat$lte,\n        Maybe: Maybe,\n        \"List.at\": List$at,\n        \"Nat.show_digit\": Nat$show_digit,\n        \"Nat.to_string_base\": Nat$to_string_base,\n        \"Nat.show\": Nat$show,\n        \"Word.fold\": Word$fold,\n        \"Nat.add\": Nat$add,\n        \"Nat.mul\": Nat$mul,\n        \"Word.to_nat\": Word$to_nat,\n        \"U32.to_nat\": U32$to_nat,\n        \"DOM.node\": DOM$node,\n        \"DOM.text\": DOM$text,\n        \"App.MiniMMO.draw\": App$MiniMMO$draw,\n        IO: IO,\n        \"Pair.fst\": Pair$fst,\n        \"App.State.local\": App$State$local,\n        \"IO.ask\": IO$ask,\n        \"IO.bind\": IO$bind,\n        \"IO.end\": IO$end,\n        \"IO.monad\": IO$monad,\n        \"IO.do\": IO$do,\n        \"App.pass\": App$pass,\n        \"App.do\": App$do,\n        \"App.watch\": App$watch,\n        \"App.MiniMMO.room\": App$MiniMMO$room,\n        \"Cmp.as_eql\": Cmp$as_eql,\n        \"Cmp.ltn\": Cmp$ltn,\n        \"Cmp.gtn\": Cmp$gtn,\n        \"Word.cmp.go\": Word$cmp$go,\n        \"Cmp.eql\": Cmp$eql,\n        \"Word.cmp\": Word$cmp,\n        \"Word.eql\": Word$eql,\n        \"U16.eql\": U16$eql,\n        \"App.new_post\": App$new_post,\n        \"App.MiniMMO.command.a_down\": App$MiniMMO$command$a_down,\n        \"App.MiniMMO.command.d_down\": App$MiniMMO$command$d_down,\n        \"App.MiniMMO.command.w_down\": App$MiniMMO$command$w_down,\n        \"App.MiniMMO.command.s_down\": App$MiniMMO$command$s_down,\n        \"App.MiniMMO.command.a_up\": App$MiniMMO$command$a_up,\n        \"App.MiniMMO.command.d_up\": App$MiniMMO$command$d_up,\n        \"App.MiniMMO.command.w_up\": App$MiniMMO$command$w_up,\n        \"App.MiniMMO.command.s_up\": App$MiniMMO$command$s_up,\n        \"App.MiniMMO.when\": App$MiniMMO$when,\n        \"BitsMap.map\": BitsMap$map,\n        \"Map.map\": Map$map,\n        \"U32.new\": U32$new,\n        \"Word.e\": Word$e,\n        Word: Word,\n        \"Word.i\": Word$i,\n        \"Word.o\": Word$o,\n        \"Word.subber\": Word$subber,\n        \"Word.sub\": Word$sub,\n        \"U32.sub\": U32$sub,\n        \"Nat.apply\": Nat$apply,\n        \"Word.inc\": Word$inc,\n        \"Word.zero\": Word$zero,\n        \"Nat.to_word\": Nat$to_word,\n        \"U32.from_nat\": U32$from_nat,\n        \"Word.adder\": Word$adder,\n        \"Word.add\": Word$add,\n        \"U32.add\": U32$add,\n        \"App.MiniMMO.Player.new\": App$MiniMMO$Player$new,\n        \"App.MiniMMO.tick\": App$MiniMMO$tick,\n        \"BitsMap.get\": BitsMap$get,\n        \"Map.get\": Map$get,\n        \"String.eql\": String$eql,\n        \"Map.set\": Map$set,\n        \"App.MiniMMO.post\": App$MiniMMO$post,\n        \"App.MiniMMO\": App$MiniMMO\n    };\n}();\n"],"sourceRoot":""}