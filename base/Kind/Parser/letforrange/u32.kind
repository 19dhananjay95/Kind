Kind.Parser.letforrange.u32: Parser(Kind.Term)
  Parser {
    get init = Kind.Parser.init;
    Kind.Parser.text("let ");
    get name = Parser.override_error!(Kind.Parser.name1, "Expected identifier after \"let\"");
    get u = Kind.Parser.text_error("=", "Expected \"=\" after \"let\"");
    get u = Kind.Parser.text_error("for ", "Expected \"for\" after \"let … = \"");
    get elem = Parser.override_error!(Kind.Parser.name1, "Expected identifier after \"for\"");
    get u = Kind.Parser.text_error(":", "Missing ':' after \"for\"");
    get u = Kind.Parser.text_error("U32", "Expected range type after \"for … :\"");
    get u = Kind.Parser.text_error("from", "Expected \"from\" after \"U32\"");
    get idx0 = Kind.Parser.term;
    get u = Parser.override_error!(Kind.Parser.text("to"), "Expected \"to\" after \"from …\"");
    get idx1 = Kind.Parser.term;
    get u = Kind.Parser.text_error(":", "Missing ':' after \"to\" …");
    get loop = Kind.Parser.term;
    Parser.maybe!(Kind.Parser.text(";"));
    get body = Kind.Parser.term;
    get orig = Kind.Parser.stop(init);
    let term = Kind.Term.ref("U32.for");
    let term = Kind.Term.app(term, Kind.Term.hol(Bits.e));
    let term = Kind.Term.app(term, Kind.Term.ref(name));
    let term = Kind.Term.app(term, idx0);
    let term = Kind.Term.app(term, idx1);
    let lamb = Kind.Term.lam(elem, (e) Kind.Term.lam(name, (s) loop));
    let term = Kind.Term.app(term, lamb);
    let term = Kind.Term.let(name, term, (x) body);
    return Kind.Term.ori(orig, term);
  }

Kind.Parser.letforrange.u32.with: Parser(Kind.Term)
  Parser {
    get init = Kind.Parser.init;
    Kind.Parser.text("for ");
    get elem = Parser.override_error!(Kind.Parser.name1, "Expected identifier after \"for\"");
    get u = Kind.Parser.text_error(":", "Expected ':' after \"for …\"");
    get u = Kind.Parser.text_error("U32", "Expected range type after \"for … :\"");
    get u = Kind.Parser.text_error("from", "Expected \"from\" after \"U32\"");
    get idx0 = Parser.append_error!(Kind.Parser.term, "\nInside for lower bound.");
    get u = Kind.Parser.text_error("to", "Expected \"to\" after \"from …\"");
    get idx1 = Parser.append_error!(Kind.Parser.term, "\nInside for upper bound.");
    get u = Kind.Parser.text_error("with ", "Expected \"with\" after \"to …\"");
    get name = Parser.override_error!(Kind.Parser.name1, "Expected identifier after \"with\"");
    get u = Kind.Parser.text_error(":", "Missing ':' after \"with …\"");
    get loop = Parser.append_error!(Kind.Parser.term, "\nInside for body.");
    Parser.maybe!(Kind.Parser.text(";"));
    get body = Kind.Parser.term;
    get orig = Kind.Parser.stop(init);
    let term = Kind.Term.ref("U32.for");
    let term = Kind.Term.app(term, Kind.Term.hol(Bits.e));
    let term = Kind.Term.app(term, Kind.Term.ref(name));
    let term = Kind.Term.app(term, idx0);
    let term = Kind.Term.app(term, idx1);
    let lamb = Kind.Term.lam(elem, (e) Kind.Term.lam(name, (s) loop));
    let term = Kind.Term.app(term, lamb);
    let term = Kind.Term.let(name, term, (x) body);
    return Kind.Term.ori(orig, term);
  }
