// implements gresenham algorithm
// cf. https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm#Derivation
App.Drawing.draw.line(
  x0: I32,
  y0: I32,
  x1: I32,
  y1: I32,
  z:  I32,
  size: U32
  col: Col32,
  img: VoxBox,
): VoxBox

  size        = U32.to_i32(size)
  distance_x  = I32.abs(x0 - x1) + (2 * size) - 1
  distance_y  = I32.abs(y0 - y1) + (2 * size) - 1
  bool_x      = I32.ltn(x0, x1) 
  bool_y      = I32.ltn(y0, y1)
  let {x0,x1} =
    if bool_x then
      {x0 - size, x1 + size}
    else
      {x0 + size, x1 - size}

  let {y0,y1} =
    if bool_y then
      {y0 - size, y1 + size}
    else
      {y0 + size, y1 - size}
  
  for i from 0 to I32.to_nat(size)*2 - 1  with img:
    i32_i = Nat.to_i32(i)
    let start = 
      if bool_y then
        y0 + i32_i 
      else
        y0 - i32_i
    VoxBox.Draw.line(x0, start, x1, start, z, col, img)
  
  for i from 0 to I32.to_nat(size)*2 - 1  with img:
    i32_i = Nat.to_i32(i)
    let start = 
      if bool_y then
        y1 - i32_i 
      else
        y1 + i32_i
    VoxBox.Draw.line(x0, start, x1, start, z, col, img)

  for i from 0 to I32.to_nat(size)*2 - 1  with img:
    i32_i = Nat.to_i32(i)
    let start = 
      if bool_x then
        x0 + i32_i 
      else
        x0 - i32_i
    VoxBox.Draw.line(start, y0, start, y1, z, col, img)

  for i from 0 to I32.to_nat(size)*2 - 1  with img:
    i32_i = Nat.to_i32(i)
    let start = 
      if bool_x then
        x1 - i32_i 
      else
        x1 + i32_i
    VoxBox.Draw.line(start, y0, start, y1, z, col, img)
  
  img

  
  