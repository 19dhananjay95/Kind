((((((Monad.bind Parser) Parser.monad) Nat) Kind.Term) Kind.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "{")) # ((((((Monad.bind Parser) Parser.monad) (List ((Pair Kind.Term) Kind.Term))) Kind.Term) (((Parser.until ((Pair Kind.Term) Kind.Term)) (Kind.Parser.text "}")) ((Kind.Parser.item ((Pair Kind.Term) Kind.Term)) ((((((Monad.bind Parser) Parser.monad) Kind.Term) ((Pair Kind.Term) Kind.Term)) Kind.Parser.term) #key ((((((Monad.bind Parser) Parser.monad) Unit) ((Pair Kind.Term) Kind.Term)) (Kind.Parser.text ":")) # ((((((Monad.bind Parser) Parser.monad) Kind.Term) ((Pair Kind.Term) Kind.Term)) Kind.Parser.term) #val ((((Monad.pure Parser) Parser.monad) ((Pair Kind.Term) Kind.Term)) ((((Pair.new Kind.Term) Kind.Term) key) val)))))))) #vals ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Kind.Term) (Kind.Parser.stop init)) #orig !list = (((((List.fold ((Pair Kind.Term) Kind.Term)) vals) Kind.Term) ((Kind.Term.ori orig) ((Kind.Term.app (Kind.Term.ref "List.nil")) (Kind.Term.hol Bits.e)))) #kv #xs ((kv #x Kind.Term) #key #val !pair = (Kind.Term.ref "Pair.new"); !pair = ((Kind.Term.app pair) (Kind.Term.hol Bits.e)); !pair = ((Kind.Term.app pair) (Kind.Term.hol Bits.e)); !pair = ((Kind.Term.app pair) key); !pair = ((Kind.Term.app pair) val); !term = (Kind.Term.ref "List.cons"); !term = ((Kind.Term.app term) (Kind.Term.hol Bits.e)); !term = ((Kind.Term.app term) pair); !term = ((Kind.Term.app term) xs); ((Kind.Term.ori orig) term))); !term = (Kind.Term.ref "Map.from_list"); !term = ((Kind.Term.app term) (Kind.Term.hol Bits.e)); !term = ((Kind.Term.app term) list); ((((Monad.pure Parser) Parser.monad) Kind.Term) ((Kind.Term.ori orig) term))))))