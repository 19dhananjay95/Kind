// Bool
// ====

Bool: Type
  self<P: Bool -> Type> ->
  P(true) ->
  P(false) ->
  P(self)

true: Bool
  <> => (t) => (f) => t

false: Bool
  <> => (t) => (f) => f

case_bool : (b: Bool) -> <P: Bool -> Type> -> P(true) -> P(false) -> P(b)
  (b) => <P> => (t) => (f) =>
  b<P>(t)(f)

not: Bool -> Bool
  (a) =>
  let case_t = false
  let case_f = true
  a<()=>Bool>(case_t)(case_f)

or: Bool -> Bool -> Bool
  (a) => (b) =>
  let case_a_tru = (b)<()=>Bool>(true)(true)
  let case_a_fal = (b)<()=>Bool>(true)(false)
  a<()=>Bool>(case_a_tru)(case_a_fal)

and: Bool -> Bool -> Bool
  (a) => (b) =>
  let case_a_tru = (b)<()=>Bool>(true)(false)
  let case_a_fal = (b)<()=>Bool>(false)(false)
  a<()=>Bool>(case_a_tru)(case_a_fal)
  
// Cmp

Cmp : Type
  self<P: Cmp -> Type> ->
  P(ltn) ->
  P(eql) ->
  P(gtn) ->
  P(self)

ltn: Cmp
  <> => (ltn) => (eql) => (gtn) => ltn

eql: Cmp
  <> => (ltn) => (eql) => (gtn) => eql

gtn: Cmp
  <> => (ltn) => (eql) => (gtn) => gtn

// Bit
// ===

Bit : Type
  self<P: Bit -> Type> ->
  P(t0) ->
  P(t1) ->
  P(self)

t0: Bit
  <> => (t0) => (t1) => t0

t1: Bit
  <> => (t0) => (t1) => t1

// Nat
// ===

Nat: Type
  self<P: (x: Nat) -> Type> ->
  (P(zero)) ->
  ((pred: Nat) -> P(succ(pred))) ->
  P(self)

zero: Nat
  <> => (z) => (s) => z

succ: Nat -> Nat
  (n) => <> => (z) => (s) => s(n)

pred: Nat -> Nat
  (n) =>
  let case_zero = zero
  let case_succ = (pred) => pred
  n<()=>Nat>(case_zero)(case_succ)

fold_nat : (n: Nat) -> <P: Nat -> Type> -> P(zero) -> ((n:Nat) -> P(n) -> P(succ(n))) -> P(n)
  (n) => <P> => (z) => (s) =>
  n<P>(z)((pred) => s(pred)(fold_nat(pred)<P>(z)(s)))

double: Nat -> Nat
  (n) => 
  let case_zero = zero
  let case_succ = (pred) => succ(succ(double(pred)))
  n<() => Nat>(case_zero)(case_succ)

nat_cmp: Nat -> Nat -> Cmp
  (a) => (b) =>
  let case_a_zero =
    let case_b_zero = eql
    let case_b_succ = (b_pred) => ltn
    b<()=>Cmp>(case_b_zero)(case_b_succ)
  let case_a_succ = (a_pred) =>
    let case_b_zero = gtn
    let case_b_succ = (b_pred) => nat_cmp(a_pred)(b_pred)
    b<()=>Cmp>(case_b_zero)(case_b_succ)
  a<()=>Cmp>(case_a_zero)(case_a_succ)

nat_ltn: Nat -> Nat -> Bool
  (a) => (b) => nat_cmp(a)(b)<()=>Bool>(true)(false)(false)

nat_lte: Nat -> Nat -> Bool
  (a) => (b) => nat_cmp(a)(b)<()=>Bool>(true)(true)(false)

nat_eql: Nat -> Nat -> Bool
  (a) => (b) => nat_cmp(a)(b)<()=>Bool>(false)(true)(false)

nat_gte: Nat -> Nat -> Bool
  (a) => (b) => nat_cmp(a)(b)<()=>Bool>(false)(true)(true)

nat_gtn: Nat -> Nat -> Bool
  (a) => (b) => nat_cmp(a)(b)<()=>Bool>(false)(false)(true)

n0: Nat
  zero

n1: Nat
  succ(n0)

n2: Nat
  succ(n1)

n3: Nat
  succ(n2)

n4: Nat
  succ(n3)

n5: Nat
  succ(n4)

n6: Nat
  succ(n5)

n7: Nat
  succ(n6)

n8: Nat
  succ(n7)

n9: Nat
  succ(n8)

n9: Nat
  succ(n8)

n10: Nat
  succ(n9)

n11: Nat
  succ(n10)

n12: Nat
  succ(n11)

n13: Nat
  succ(n12)

n14: Nat
  succ(n13)

n15: Nat
  succ(n14)

n16: Nat
  succ(n15)

n17: Nat
  succ(n16)

n18: Nat
  succ(n17)

n19: Nat
  succ(n18)

n20: Nat
  succ(n19)

n21: Nat
  succ(n20)

n22: Nat
  succ(n21)

n23: Nat
  succ(n22)

n24: Nat
  succ(n23)

n25: Nat
  succ(n24)

n26: Nat
  succ(n25)

n27: Nat
  succ(n26)

n28: Nat
  succ(n27)

n29: Nat
  succ(n28)

n30: Nat
  succ(n29)

n31: Nat
  succ(n30)

n32: Nat
  succ(n31)

// Pair
// ====

Pair: Type -> Type -> Type
  (A) => (B) =>
  self<P: Pair(A)(B) -> Type> ->
  (pair: (a: A) -> (b: B) -> P(pair<A><B>(a)(b))) ->
  P(self)

pair: <A: Type> -> <B: Type> -> A -> B -> Pair(A)(B)
  <> => <> => (a) => (b) =>
  <> => (pair) =>
  pair(a)(b)

fst: <A: Type> -> <B: Type> -> Pair(A)(B) -> A
  <A> => <B> => (pair) =>
  pair<() => A>((a) => (b) => a)

snd: <A: Type> -> <B: Type> -> Pair(A)(B) -> B
  <A> => <B> => (pair) =>
  pair<() => B>((a) => (b) => b)

// Maybe
// =====

Maybe: Type -> Type
  (A) =>
  self<P: Maybe(A) -> Type> ->
  (P(none<A>)) ->
  ((value: A) -> P(some<A>(value))) ->
  P(self)

none: <A: Type> -> Maybe(A)
  <> =>
  <> => (none) => () => none

some: <A: Type> -> A -> Maybe(A)
  <> => (value) =>
  <> => () => (some) => some(value)

// List
// ====

List: (A: Type) -> Type
  (A) =>
  self<P: (x: List(A)) -> Type> ->
  (nil: P(nil<A>)) ->
  (ext: (head: A) -> (tail: List(A)) -> P(ext<A>(head)(tail))) ->
  P(self)

nil: <A: Type> -> List(A)
  <A> =>
  <> => (nil) => () => nil

ext: <A: Type> -> (:A) -> (:List(A)) -> List(A)
  <A> => (head) => (tail) =>
  <> => () => (ext) => ext(head)(tail)

find_aux: <A: Type> -> List(A) -> (A -> Nat -> Bool) -> Nat -> Maybe(Pair(A)(Nat))
  <A> => (list) => (cond) => (indx) =>
  let case_nil = none<Pair(A)(Nat)>
  let case_ext = (head) => (tail) =>
    let case_true  = some<Pair(A)(Nat)>(pair<A><Nat>(head)(indx))
    let case_false = find_aux<A>(tail)(cond)(succ(indx))
    cond(head)(indx)<() => Maybe(Pair(A)(Nat))>(case_true)(case_false)
  list<() => Maybe(Pair(A)(Nat))>(case_nil)(case_ext)

find: <A: Type> -> List(A) -> (A -> Nat -> Bool) -> Maybe(Pair(A)(Nat))
  <A> => (list) => (cond) =>
  find_aux<A>(list)(cond)(zero)

take: <A: Type> -> Nat -> List(A) -> List(A)
  <A> => (n) => (list) =>
  let case_nil = nil<A>
  let case_ext = (head) => (tail) =>
    let case_zero = nil<A>
    let case_succ = (pred) => ext<A>(head)(take<A>(pred)(tail))
    n<()=>List(A)>(case_zero)(case_succ)
  list<()=>List(A)>(case_nil)(case_ext)

drop: <A: Type> -> Nat -> List(A) -> List(A)
  <A> => (n) => (list) =>
  let case_nil = nil<A>
  let case_ext = (head) => (tail) =>
    let case_zero = tail
    let case_succ = (pred) => drop<A>(pred)(tail)
    n<()=>List(A)>(case_zero)(case_succ)
  list<()=>List(A)>(case_nil)(case_ext)

is_empty: <A: Type> -> List(A) -> Bool
  <A> => (list) =>
  let case_nil = true
  let case_ext = (head) => (tail) => false
  list<() => Bool>(case_nil)(case_ext)

zip_with: <A: Type> -> <B: Type> -> <C: Type> -> (A -> B -> C) -> List(A) -> List(B) -> List(C)
  <A> => <B> => <C> => (fn) => (as) => (bs) =>
  let case_a_nil = nil<C>
  let case_a_ext = (a_head) => (a_tail) =>
    let case_b_nil = nil<C>
    let case_b_ext = (b_head) => (b_tail) =>
      let head = fn(a_head)(b_head)
      let tail = zip_with<A><B><C>(fn)(a_tail)(b_tail)
      ext<C>(head)(tail)
    bs<()=>List(C)>(case_b_nil)(case_b_ext)
  as<()=>List(C)>(case_a_nil)(case_a_ext)

all_satisfy: <A: Type> -> (A -> Bool) -> List(A) -> Bool
  <A> => (cond) => (list) =>
  let case_nil = true
  let case_ext = (head) => (tail) =>
    let case_t = all_satisfy<A>(cond)(tail)
    let case_f = false
    cond(head)<()=>Bool>(case_t)(case_f)
  list<()=>Bool>(case_nil)(case_ext)

any_satisfy: <A: Type> -> (A -> Bool) -> List(A) -> Bool
  <A> => (cond) => (list) =>
  let case_nil = false
  let case_ext = (head) => (tail) =>
    let case_t = true
    let case_f = any_satisfy<A>(cond)(tail)
    cond(head)<()=>Bool>(case_t)(case_f)
  list<()=>Bool>(case_nil)(case_ext)

all_true: List(Bool) -> Bool
  (list) => all_satisfy<Bool>((x) => x)(list)

any_true: List(Bool) -> Bool
  (list) => any_satisfy<Bool>((x) => x)(list)

list_len: <A: Type> -> List(A) -> Nat
  <A> => (list) =>
  let case_nil = zero
  let case_ext = (head) => (tail) => succ(list_len<A>(tail))
  list<()=>Nat>(case_nil)(case_ext)

// Bits
// ====

Bits: Type
  self<P: Bits -> Type> ->
  (P(be)) ->
  ((pred: Bits) -> P(b0(pred))) ->
  ((pred: Bits) -> P(b1(pred))) ->
  P(self)

be: Bits
  <P> => (be) => (b0) => (b1) => be

b0: (bs: Bits) -> Bits
  (bs) => <P> => (be) => (b0) => (b1) => b0(bs)

b1: (bs: Bits) -> Bits
  (bs) => <P> => (be) => (b0) => (b1) => b1(bs)

// Word
// ====

Word: Nat -> Type
  (size) =>
  self<P: (size: Nat) -> Word(size) -> Type> ->
  (P(zero)(we)) ->
  (<size: Nat> -> (pred: Word(size)) -> P(succ(size))(w0<size>(pred))) ->
  (<size: Nat> -> (pred: Word(size)) -> P(succ(size))(w1<size>(pred))) ->
  P(size)(self)

we: Word(zero)
  <P> => (we) => (w0) => (w1) =>
  we

w0: <size: Nat> -> Word(size) -> Word(succ(size))
  <size> => (wo) => <P> => (we) => (w0) => (w1) =>
  w0<size>(wo)

w1: <size: Nat> -> Word(size) -> Word(succ(size))
  <size> => (wo) => <P> => (we) => (w0) => (w1) =>
  w1<size>(wo)

word_inc: <size: Nat> -> Word(size) -> Word(size)
  <size> => (word) =>
  let case_we = we
  let case_w0 = <size> => (pred) => w1<size>(pred)
  let case_w1 = <size> => (pred) => w0<size>(word_inc<size>(pred))
  let motive  = (size) => (word) => Word(size)
  word<motive>(case_we)(case_w0)(case_w1)

word_add_aux: <size: Nat> -> Word(size) -> Word(size) -> Bool -> Word(size)
  <size> => (a) => (b) => (c) =>
  let case_a_we = (b) => we
  let case_a_w0 = <a_size> => (a_pred) => (b) =>
    let case_b_we = (a_pred) =>
      we
    let case_b_w0 = <b_size> => (b_pred) => (a_pred) =>
      let case_c_tr = w1<b_size>(word_add_aux<b_size>(a_pred)(b_pred)(false))
      let case_c_fa = w0<b_size>(word_add_aux<b_size>(a_pred)(b_pred)(false))
      let case_c_ty = (c_bool) => Word(succ(b_size))
      c<case_c_ty>(case_c_tr)(case_c_fa)
    let case_b_w1 = <b_size> => (b_pred) => (a_pred) =>
      let case_c_tr = w0<b_size>(word_add_aux<b_size>(a_pred)(b_pred)(true))
      let case_c_fa = w1<b_size>(word_add_aux<b_size>(a_pred)(b_pred)(false))
      let case_c_ty = (c_bool) => Word(succ(b_size))
      c<case_c_ty>(case_c_tr)(case_c_fa)
    let case_b_ty = (b_size) => (b_word) =>
      Word(pred(b_size)) -> Word(b_size)
    b<case_b_ty>(case_b_we)(case_b_w0)(case_b_w1)(a_pred)
  let case_a_w1 = <a_size> => (a_pred) => (b) =>
    let case_b_we = (a_pred) => we
    let case_b_w0 = <b_size> => (b_pred) => (a_pred) =>
      let case_c_tr = w0<b_size>(word_add_aux<b_size>(a_pred)(b_pred)(true))
      let case_c_fa = w1<b_size>(word_add_aux<b_size>(a_pred)(b_pred)(false))
      let case_c_ty = (c_bool) => Word(succ(b_size))
      c<case_c_ty>(case_c_tr)(case_c_fa)
    let case_b_w1 = <b_size> => (b_pred) => (a_pred) =>
      let case_c_tr = w1<b_size>(word_add_aux<b_size>(a_pred)(b_pred)(true))
      let case_c_fa = w0<b_size>(word_add_aux<b_size>(a_pred)(b_pred)(true))
      let case_c_ty = (c_bool) => Word(succ(b_size))
      c<case_c_ty>(case_c_tr)(case_c_fa)
    let case_b_ty = (b_size) => (b_word) =>
      Word(pred(b_size)) -> Word(b_size)
    b<case_b_ty>(case_b_we)(case_b_w0)(case_b_w1)(a_pred)
  let case_a_ty = (a_size) => (a_word) =>
    Word(a_size) -> Word(a_size)
  a<case_a_ty>(case_a_we)(case_a_w0)(case_a_w1)(b)

word_add: <size: Nat> -> Word(size) -> Word(size) -> Word(size)
  <size> => (a) => (b) => word_add_aux<size>(a)(b)(false)

word_cmp_aux: <size: Nat> -> Word(size) -> Word(size) -> Cmp -> Cmp
  <size> => (a) => (b) => (c) =>
  let case_a_we = (b) => c
  let case_a_w0 = <a_size> => (a_pred) => (b) =>
    let case_b_we = (a_pred) => c
    let case_b_w0 = <b_size> => (b_pred) => (a_pred) => word_cmp_aux<b_size>(a_pred)(b_pred)(c)
    let case_b_w1 = <b_size> => (b_pred) => (a_pred) => word_cmp_aux<b_size>(a_pred)(b_pred)(ltn)
    let case_b_ty = (b_size) => (b_word) => Word(pred(b_size)) -> Cmp
    b<case_b_ty>(case_b_we)(case_b_w0)(case_b_w1)(a_pred)
  let case_a_w1 = <a_size> => (a_pred) => (b) =>
    let case_b_we = (a_pred) => c
    let case_b_w0 = <b_size> => (b_pred) => (a_pred) => word_cmp_aux<b_size>(a_pred)(b_pred)(gtn)
    let case_b_w1 = <b_size> => (b_pred) => (a_pred) => word_cmp_aux<b_size>(a_pred)(b_pred)(c)
    let case_b_ty = (b_size) => (b_word) => Word(pred(b_size)) -> Cmp
    b<case_b_ty>(case_b_we)(case_b_w0)(case_b_w1)(a_pred)
  let case_a_ty = (a_size) => (a_word) =>
    Word(a_size) -> Cmp
  a<case_a_ty>(case_a_we)(case_a_w0)(case_a_w1)(b)

word_cmp: <size: Nat> -> Word(size) -> Word(size) -> Cmp
  <size> => (a) => (b) =>
  word_cmp_aux<size>(a)(b)(eql)

// a < b
word_ltn: <size:Nat> -> Word(size) -> Word(size) -> Bool
  <size> => (a) => (b) =>
  word_cmp<size>(a)(b)<() => Bool>(true)(false)(false)

// a <= b
word_lte: <size:Nat> -> Word(size) -> Word(size) -> Bool
  <size> => (a) => (b) =>
  word_cmp<size>(a)(b)<() => Bool>(true)(true)(false)

// a == b
word_eql: <size:Nat> -> Word(size) -> Word(size) -> Bool
  <size> => (a) => (b) =>
  word_cmp<size>(a)(b)<() => Bool>(false)(true)(false)

// a >= b
word_gte: <size:Nat> -> Word(size) -> Word(size) -> Bool
  <size> => (a) => (b) =>
  word_cmp<size>(a)(b)<() => Bool>(false)(true)(true)

// a > b
word_gtn: <size:Nat> -> Word(size) -> Word(size) -> Bool
  <size> => (a) => (b) =>
  word_cmp<size>(a)(b)<() => Bool>(false)(false)(true)

// Uint32
// ======

U32: Type
  Word(n32)

u32_0: U32
  w0<n31>(w0<n30>(w0<n29>(w0<n28>(w0<n27>(w0<n26>(w0<n25>(w0<n24>(
  w0<n23>(w0<n22>(w0<n21>(w0<n20>(w0<n19>(w0<n18>(w0<n17>(w0<n16>(
  w0<n15>(w0<n14>(w0<n13>(w0<n12>(w0<n11>(w0<n10>(w0<n9 >(w0<n8 >(
  w0<n7 >(w0<n6 >(w0<n5 >(w0<n4 >(w0<n3 >(w0<n2 >(w0<n1 >(w0<n0 >(
  we))))))))))))))))))))))))))))))))

u32_inc: U32 -> U32
  word_inc<n32>

u32_add: U32 -> U32 -> U32
  word_add<n32>

// a < b
u32_ltn: U32 -> U32 -> Bool
  word_ltn<n32>

// a <= b
u32_lte: U32 -> U32 -> Bool
  word_lte<n32>

// a == b
u32_eql: U32 -> U32 -> Bool
  word_eql<n32>

// a >= b
u32_gte: U32 -> U32 -> Bool
  word_gte<n32>

// a > b
u32_gtn: U32 -> U32 -> Bool
  word_gtn<n32>

// Char
// ====

Char: Type
  Word(n32)

ascii: Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Bit -> Char
  (a) => (b) => (c) => (d) => (e) => (f) => (g) => (h) =>
  let ty = <size: Nat> -> Word(size) -> Word(succ(size))
  let wA = a<()=>ty>(w0)(w1)
  let wB = b<()=>ty>(w0)(w1)
  let wC = c<()=>ty>(w0)(w1)
  let wD = d<()=>ty>(w0)(w1)
  let wE = e<()=>ty>(w0)(w1)
  let wF = f<()=>ty>(w0)(w1)
  let wG = g<()=>ty>(w0)(w1)
  let wH = h<()=>ty>(w0)(w1)
  wH<n31>(wG<n30>(wF<n29>(wE<n28>(wD<n27>(wC<n26>(wB<n25>(wA<n24>(
  w0<n23>(w0<n22>(w0<n21>(w0<n20>(w0<n19>(w0<n18>(w0<n17>(w0<n16>(
  w0<n15>(w0<n14>(w0<n13>(w0<n12>(w0<n11>(w0<n10>(w0<n9 >(w0<n8 >(
  w0<n7 >(w0<n6 >(w0<n5 >(w0<n4 >(w0<n3 >(w0<n2 >(w0<n1 >(w0<n0 >(
  we))))))))))))))))))))))))))))))))

char_tab : Char
  ascii(t0)(t0)(t1)(t0)(t1)(t0)(t0)(t1)

char_newline : Char
  ascii(t0)(t0)(t1)(t0)(t1)(t0)(t1)(t0)

char_space : Char
  ascii(t0)(t0)(t1)(t0)(t0)(t0)(t0)(t0)

char_exclamation: Char
  ascii(t0)(t0)(t1)(t0)(t0)(t0)(t0)(t1)

char_quotation: Char
  ascii(t0)(t0)(t1)(t0)(t0)(t0)(t1)(t0)

char_number: Char
  ascii(t0)(t0)(t1)(t0)(t0)(t0)(t1)(t1)

char_dollar: Char
  ascii(t0)(t0)(t1)(t0)(t0)(t1)(t0)(t0)

char_percent: Char
  ascii(t0)(t0)(t1)(t0)(t0)(t1)(t0)(t1)

char_ampersand: Char
  ascii(t0)(t0)(t1)(t0)(t0)(t1)(t1)(t0)

char_apostrophe: Char
  ascii(t0)(t0)(t1)(t0)(t0)(t1)(t1)(t1)

char_left_parens: Char
  ascii(t0)(t0)(t1)(t0)(t1)(t0)(t0)(t0)

char_right_parens: Char
  ascii(t0)(t0)(t1)(t0)(t1)(t0)(t0)(t1)

char_asterisk: Char
  ascii(t0)(t0)(t1)(t0)(t1)(t0)(t1)(t0)

char_plus: Char
  ascii(t0)(t0)(t1)(t0)(t1)(t0)(t1)(t1)

char_comma: Char
  ascii(t0)(t0)(t1)(t0)(t1)(t1)(t0)(t0)

char_hyphen: Char
  ascii(t0)(t0)(t1)(t0)(t1)(t1)(t0)(t1)

char_period: Char
  ascii(t0)(t0)(t1)(t0)(t1)(t1)(t1)(t0)

char_slash: Char
  ascii(t0)(t0)(t1)(t0)(t1)(t1)(t1)(t1)

char_0: Char
  ascii(t0)(t0)(t1)(t1)(t0)(t0)(t0)(t0)

char_1: Char
  ascii(t0)(t0)(t1)(t1)(t0)(t0)(t0)(t1)

char_2: Char
  ascii(t0)(t0)(t1)(t1)(t0)(t0)(t1)(t0)

char_3: Char
  ascii(t0)(t0)(t1)(t1)(t0)(t0)(t1)(t1)

char_4: Char
  ascii(t0)(t0)(t1)(t1)(t0)(t1)(t0)(t0)

char_5: Char
  ascii(t0)(t0)(t1)(t1)(t0)(t1)(t0)(t1)

char_6: Char
  ascii(t0)(t0)(t1)(t1)(t0)(t1)(t1)(t0)

char_7: Char
  ascii(t0)(t0)(t1)(t1)(t0)(t1)(t1)(t1)

char_8: Char
  ascii(t0)(t0)(t1)(t1)(t1)(t0)(t0)(t0)

char_9: Char
  ascii(t0)(t0)(t1)(t1)(t1)(t0)(t0)(t1)

char_colon: Char
  ascii(t0)(t0)(t1)(t1)(t1)(t0)(t1)(t0)

char_semicolon: Char
  ascii(t0)(t0)(t1)(t1)(t1)(t0)(t1)(t1)

char_less_than: Char
  ascii(t0)(t0)(t1)(t1)(t1)(t1)(t0)(t0)

char_equal: Char
  ascii(t0)(t0)(t1)(t1)(t1)(t1)(t0)(t1)

char_greater_than: Char
  ascii(t0)(t0)(t1)(t1)(t1)(t1)(t1)(t0)

char_question: Char
  ascii(t0)(t0)(t1)(t1)(t1)(t1)(t1)(t1)

char_at: Char
  ascii(t0)(t1)(t0)(t0)(t0)(t0)(t0)(t0)

char_A: Char
  ascii(t0)(t1)(t0)(t0)(t0)(t0)(t0)(t1)

char_B: Char
  ascii(t0)(t1)(t0)(t0)(t0)(t0)(t1)(t0)

char_C: Char
  ascii(t0)(t1)(t0)(t0)(t0)(t0)(t1)(t1)

char_D: Char
  ascii(t0)(t1)(t0)(t0)(t0)(t1)(t0)(t0)

char_E: Char
  ascii(t0)(t1)(t0)(t0)(t0)(t1)(t0)(t1)

char_F: Char
  ascii(t0)(t1)(t0)(t0)(t0)(t1)(t1)(t0)

char_G: Char
  ascii(t0)(t1)(t0)(t0)(t0)(t1)(t1)(t1)

char_H: Char
  ascii(t0)(t1)(t0)(t0)(t1)(t0)(t0)(t0)

char_I: Char
  ascii(t0)(t1)(t0)(t0)(t1)(t0)(t0)(t1)

char_J: Char
  ascii(t0)(t1)(t0)(t0)(t1)(t0)(t1)(t0)

char_K: Char
  ascii(t0)(t1)(t0)(t0)(t1)(t0)(t1)(t1)

char_L: Char
  ascii(t0)(t1)(t0)(t0)(t1)(t1)(t0)(t0)

char_M: Char
  ascii(t0)(t1)(t0)(t0)(t1)(t1)(t0)(t1)

char_N: Char
  ascii(t0)(t1)(t0)(t0)(t1)(t1)(t1)(t0)

char_O: Char
  ascii(t0)(t1)(t0)(t0)(t1)(t1)(t1)(t1)

char_P: Char
  ascii(t0)(t1)(t0)(t1)(t0)(t0)(t0)(t0)

char_Q: Char
  ascii(t0)(t1)(t0)(t1)(t0)(t0)(t0)(t1)

char_R: Char
  ascii(t0)(t1)(t0)(t1)(t0)(t0)(t1)(t0)

char_S: Char
  ascii(t0)(t1)(t0)(t1)(t0)(t0)(t1)(t1)

char_T: Char
  ascii(t0)(t1)(t0)(t1)(t0)(t1)(t0)(t0)

char_U: Char
  ascii(t0)(t1)(t0)(t1)(t0)(t1)(t0)(t1)

char_V: Char
  ascii(t0)(t1)(t0)(t1)(t0)(t1)(t1)(t0)

char_W: Char
  ascii(t0)(t1)(t0)(t1)(t0)(t1)(t1)(t1)

char_X: Char
  ascii(t0)(t1)(t0)(t1)(t1)(t0)(t0)(t0)

char_Y: Char
  ascii(t0)(t1)(t0)(t1)(t1)(t0)(t0)(t1)

char_Z: Char
  ascii(t0)(t1)(t0)(t1)(t1)(t0)(t1)(t0)

char_left_bracket: Char
  ascii(t0)(t1)(t0)(t1)(t1)(t0)(t1)(t1)

char_backslash: Char
  ascii(t0)(t1)(t0)(t1)(t1)(t1)(t0)(t0)

char_right_bracket: Char
  ascii(t0)(t1)(t0)(t1)(t1)(t1)(t0)(t1)

char_caret: Char
  ascii(t0)(t1)(t0)(t1)(t1)(t1)(t1)(t0)

char_underscore: Char
  ascii(t0)(t1)(t0)(t1)(t1)(t1)(t1)(t1)

char_backtick: Char
  ascii(t0)(t1)(t1)(t0)(t0)(t0)(t0)(t0)

char_a: Char
  ascii(t0)(t1)(t1)(t0)(t0)(t0)(t0)(t1)

char_b: Char
  ascii(t0)(t1)(t1)(t0)(t0)(t0)(t1)(t0)

char_c: Char
  ascii(t0)(t1)(t1)(t0)(t0)(t0)(t1)(t1)

char_d: Char
  ascii(t0)(t1)(t1)(t0)(t0)(t1)(t0)(t0)

char_e: Char
  ascii(t0)(t1)(t1)(t0)(t0)(t1)(t0)(t1)

char_f: Char
  ascii(t0)(t1)(t1)(t0)(t0)(t1)(t1)(t0)

char_g: Char
  ascii(t0)(t1)(t1)(t0)(t0)(t1)(t1)(t1)

char_h: Char
  ascii(t0)(t1)(t1)(t0)(t1)(t0)(t0)(t0)

char_i: Char
  ascii(t0)(t1)(t1)(t0)(t1)(t0)(t0)(t1)

char_j: Char
  ascii(t0)(t1)(t1)(t0)(t1)(t0)(t1)(t0)

char_k: Char
  ascii(t0)(t1)(t1)(t0)(t1)(t0)(t1)(t1)

char_l: Char
  ascii(t0)(t1)(t1)(t0)(t1)(t1)(t0)(t0)

char_m: Char
  ascii(t0)(t1)(t1)(t0)(t1)(t1)(t0)(t1)

char_n: Char
  ascii(t0)(t1)(t1)(t0)(t1)(t1)(t1)(t0)

char_o: Char
  ascii(t0)(t1)(t1)(t0)(t1)(t1)(t1)(t1)

char_p: Char
  ascii(t0)(t1)(t1)(t1)(t0)(t0)(t0)(t0)

char_q: Char
  ascii(t0)(t1)(t1)(t1)(t0)(t0)(t0)(t1)

char_r: Char
  ascii(t0)(t1)(t1)(t1)(t0)(t0)(t1)(t0)

char_s: Char
  ascii(t0)(t1)(t1)(t1)(t0)(t0)(t1)(t1)

char_t: Char
  ascii(t0)(t1)(t1)(t1)(t0)(t1)(t0)(t0)

char_u: Char
  ascii(t0)(t1)(t1)(t1)(t0)(t1)(t0)(t1)

char_v: Char
  ascii(t0)(t1)(t1)(t1)(t0)(t1)(t1)(t0)

char_w: Char
  ascii(t0)(t1)(t1)(t1)(t0)(t1)(t1)(t1)

char_x: Char
  ascii(t0)(t1)(t1)(t1)(t1)(t0)(t0)(t0)

char_y: Char
  ascii(t0)(t1)(t1)(t1)(t1)(t0)(t0)(t1)

char_z: Char
  ascii(t0)(t1)(t1)(t1)(t1)(t0)(t1)(t0)

char_left_brace: Char
  ascii(t0)(t1)(t1)(t1)(t1)(t0)(t1)(t1)

char_bar: Char
  ascii(t0)(t1)(t1)(t1)(t1)(t1)(t0)(t0)

char_right_brace: Char
  ascii(t0)(t1)(t1)(t1)(t1)(t1)(t0)(t1)

char_tilde: Char
  ascii(t0)(t1)(t1)(t1)(t1)(t1)(t1)(t0)

// String
// ======

String : Type
  List(Char)

string_eql : String -> String -> Bool
  (a) => (b) =>
  let eql_len = nat_eql(list_len<Char>(a))(list_len<Char>(b))
  let eql_val = all_satisfy<Bool>((x)=>x)(zip_with<Char><Char><Bool>(u32_eql)(a)(b))
  and(eql_len)(eql_val)

// Term
// ====

Term: Type
  self<P: Term -> Type> ->
  (var:
    (hash: U32) ->
    (indx: Nat) ->
    P(var(indx))) ->
  (ref:
    (hash: U32) ->
    (name: String) ->
    P(ref(name))) ->
  (typ:
    (hash: U32) ->
    P(typ)) ->
  (all:
    (hash: U32) ->
    (eras: Bool) ->
    (self: String) ->
    (name: String) ->
    (bind: Term) ->
    (body: Term) ->
    P(all(eras)(self)(name)(bind)(body))) ->
  (lam:
    (hash: U32) ->
    (eras: Bool) ->
    (name: String) ->
    (body: Term) ->
    P(lam(eras)(name)(body))) ->
  (app:
    (hash: U32) ->
    (eras: Bool) ->
    (func: Term) ->
    (argm: Term) ->
    P(app(eras)(func)(argm))) ->
  (lit:
    (hash: U32) ->
    (name: String) ->
    (expr: Term) ->
    (body: Term) ->
    P(lit(name)(expr)(body))) ->
  (ann:
    (hash: U32) ->
    (done: Bool) ->
    (expr: Term) ->
    (type: Term) ->
    P(ann(done)(expr)(type))) ->
  P(self)

var: Nat -> Term
  (indx)=>
  <> => (var) => () => () => () => () => () => () => () =>
  var(u32_0)(indx)

ref: String -> Term
  (name)=>
  <> => () => (ref) => () => () => () => () => () => () =>
  ref(u32_0)(name)

typ: Term
  <> => () => () => (typ) => () => () => () => () => () =>
  typ(u32_0)

all: Bool -> String -> String -> Term -> Term -> Term
  (eras) => (self) => (name) => (bind) => (body) =>
  <> => () => () => () => (all) => () => () => () => () =>
  all(u32_0)(eras)(self)(name)(bind)(body)

lam: Bool -> String -> Term -> Term
  (eras) => (name) => (body) =>
  <> => () => () => () => () => (lam) => () => () => () =>
  lam(u32_0)(eras)(name)(body)

app: Bool -> Term -> Term -> Term
  (eras) => (func) => (argm) =>
  <> => () => () => () => () => () => (app) => () => () =>
  app(u32_0)(eras)(func)(argm)

lit: String -> Term -> Term -> Term
  (name) => (expr) => (body) =>
  <> => () => () => () => () => () => () => (lit) => () =>
  lit(u32_0)(name)(expr)(body)

ann: Bool -> Term -> Term -> Term
  (done) => (expr) => (type) =>
  <> => () => () => () => () => () => () => () => (ann) =>
  ann(u32_0)(done)(expr)(type)

// Parsing
// =======

Parsed : (A: Type) -> Type
  (A) => Maybe(Pair(String)(A))

parsed: <A: Type> -> String -> A -> Parsed(A)
  <A> => (code) => (val) =>
  some<Pair(String)(A)>(pair<String><A>(code)(val))

noparse: <A: Type> -> Parsed(A)
  <A> => none<Pair(String)(A)>

parsing
  : <A: Type> ->
    <B: Type> ->
    (x: Parsed(A)) ->
    (f: String -> A -> Parsed(B)) ->
    Parsed(B)
  <A> => <B> => (x) => (f) =>
  let case_none = noparse<B>
  let case_some = (value) => value<()=>Parsed(B)>(f)
  x<()=>Parsed(B)>(case_none)(case_some)

// "("
LPAR: String
  ext<Char>(char_left_parens)(
  nil<Char>)

// ")"
RPAR: String
  ext<Char>(char_right_parens)(
  nil<Char>)

// "<"
LSIG: String
  ext<Char>(char_less_than)(
  nil<Char>)

// ">"
RSIG: String
  ext<Char>(char_greater_than)(
  nil<Char>)

// ":"
COLO: String
  ext<Char>(char_colon)(
  nil<Char>)

// "::"
COLS: String
  ext<Char>(char_colon)(
  ext<Char>(char_colon)(
  nil<Char>))


// "->"
ARR0: String
  ext<Char>(char_hyphen)(
  ext<Char>(char_greater_than)(
  nil<Char>))

// "=>"
ARR1: String
  ext<Char>(char_hyphen)(
  ext<Char>(char_equal)(
  nil<Char>))

// "let "
LETS: String
  ext<Char>(char_l)(
  ext<Char>(char_e)(
  ext<Char>(char_t)(
  ext<Char>(char_space)(
  nil<Char>))))

// "="
EQLS: String
  ext<Char>(char_equal)(
  nil<Char>)

// Type
TYPS: String
  ext<Char>(char_T)(
  ext<Char>(char_y)(
  ext<Char>(char_p)(
  ext<Char>(char_e)(
  nil<Char>))))

// ["(","<"]
OPEN: List(String)
  ext<String>(LPAR)(
  ext<String>(LSIG)(
  nil<String>))

// [")",">"]
CLOS: List(String)
  ext<String>(LPAR)(
  ext<String>(LSIG)(
  nil<String>))

is_space: Char -> Bool
  (c) =>
    let is_spc = word_eql<n32>(c)(char_space)
    let is_tab = word_eql<n32>(c)(char_tab)
    let is_lin = word_eql<n32>(c)(char_newline)
    or(is_spc)(or(is_tab)(is_lin))

is_name: Char -> Bool
  (c) =>
    let is_num = and(word_gte<n32>(c)(char_0))(word_lte<n32>(c)(char_9))
    let is_low = and(word_gte<n32>(c)(char_a))(word_lte<n32>(c)(char_z))
    let is_upp = and(word_gte<n32>(c)(char_A))(word_lte<n32>(c)(char_Z))
    let is_und = word_eql<n32>(c)(char_underscore)
    or(is_num)(or(is_low)(or(is_upp)(is_und)))

first_valid: <A: Type> -> List(Maybe(A)) -> Maybe(A)
  <A> => (list) =>
  let case_nil = none<A>
  let case_ext = (head) => (tail) =>
    let case_none = first_valid<A>(tail)
    let case_some = (value) => some<A>(value)
    head<()=>Maybe(A)>(case_none)(case_some)
  list<()=>Maybe(A)>(case_nil)(case_ext)

drop_while: (Char -> Bool) -> String -> String
  (cond) => (code) =>
  let case_nil = nil<Char>
  let case_ext = (head) => (tail) =>
    let case_t = drop_while(cond)(tail)
    let case_f = tail
    cond(head)<()=>String>(case_t)(case_f)
  code<()=>String>(case_nil)(case_ext)

drop_spaces: String -> String
  drop_while(is_space)

// TODO: /* multi-line comment */
drop_comment: String -> String
  (code) =>
  let code = drop_spaces(code)
  // Removes "// ... \n"
  let code = 
    let fst2 = take<Char>(n2)(code)
    let sla2 = ext<Char>(char_slash)(ext<Char>(char_slash)(nil<Char>))
    let case_t =
      let code = drop<Char>(n2)(code)
      let code = drop_while((x) => not(u32_eql(char_newline)(x)))(code)
      code
    let case_f =
      code
    string_eql(fst2)(sla2)<()=>String>(case_t)(case_f)
  code

// TODO: remove many comments (not just one)
next: String -> String
  (code) => drop_comment(code)

parse_str: String -> String -> Parsed(String)
  (code) => (str) =>
  let case_str_nil = parsed<String>(code)(str)
  let case_str_ext = (str_head) => (str_tail) =>
    let case_code_nil = noparse<String>
    let case_code_ext = (code_head) => (code_tail) =>
      let case_t = parse_str(code_tail)(str_tail)
      let case_f = noparse<String>
      u32_eql(code_head)(str_head)<()=>Parsed(String)>(case_t)(case_f)
    code<()=>Parsed(String)>(case_code_nil)(case_code_ext)
  str<()=>Parsed(String)>(case_str_nil)(case_str_ext)

parse_one_aux: String -> List(String) -> Nat -> Maybe(Pair(String)(Nat))
  (code) => (strs) => (indx) =>
  let case_nil = noparse<Nat>
  let case_ext = (head) => (tail) =>
    let case_none = parse_one_aux(code)(tail)(succ(indx))
    let case_some = (value) => value<()=>Parsed(Nat)>((code)=>()=>parsed<Nat>(code)(indx))
    parse_str(code)(head)<()=>Maybe(Pair(String)(Nat))>(case_none)(case_some)
  strs<()=>Parsed(Nat)>(case_nil)(case_ext)

parse_one: String -> List(String) -> Maybe(Pair(String)(Nat))
  (code) => (strs) =>
  parse_one_aux(code)(strs)(zero)

parse_nam_aux: String -> Pair(String)(String)
  (code) =>
  let Ret = Pair(String)(String)
  let ret = pair<String><String>
  let case_nil = ret(code)(nil<Char>)
  let case_ext = (head) => (tail) =>
    let case_t =
      let case_pair = (code) => (rest) => ret(code)(ext<Char>(head)(rest))
      parse_nam_aux(tail)<()=>Ret>(case_pair)
    let case_f = ret(code)(nil<Char>)
    is_name(head)<()=>Ret>(case_t)(case_f)
  code<()=>Ret>(case_nil)(case_ext)

parse_nam: String -> Bool -> Maybe(Pair(String)(String))
  (code) => (allow_empty) =>
  let case_pair = (code) => (name) =>
    let case_t = parsed<String>(code)(name)
    let case_f = noparse<String>
    let valid = or(allow_empty)(not(is_empty<Char>(name)))
    valid<() => Parsed(String)>(case_t)(case_f)
  parse_nam_aux(code)<()=>Parsed(String)>(case_pair)

parse_par: String -> List(String) -> Parsed(Term)
  (code) => (vars) =>
  parsing<String><Term>(parse_str(next(code))(LPAR))((code) => (skip) =>
  parsing<Term  ><Term>(parse_trm(next(code))(vars))((code) => (term) =>
  parsing<String><Term>(parse_str(next(code))(RPAR))((code) => (skip) =>
  parsed<Term>(code)(term))))

parse_all: String -> List(String) -> Parsed(Term)
  (code) => (vars) =>
  parsing<String><Term>(parse_nam(next(code))(true))((code) => (self) =>
  parsing<Nat   ><Term>(parse_one(     code )(OPEN))((code) => (eras) =>
  parsing<String><Term>(parse_nam(next(code))(true))((code) => (name) =>
  parsing<String><Term>(parse_str(next(code))(COLO))((code) => (skip) =>
  parsing<Term  ><Term>(parse_trm(next(code))(ext<String>(self)(vars)))((code) => (bind) =>
  parsing<Nat   ><Term>(parse_one(next(code))(CLOS))((code) => (skip) =>
  parsing<String><Term>(parse_str(next(code))(ARR0))((code) => (skip) =>
  parsing<Term  ><Term>(parse_trm(next(code))(ext<String>(name)(ext<String>(self)(vars))))((code) => (body) =>
  parsed<Term>(code)(all(nat_eql(eras)(n1))(self)(name)(bind)(body))))))))))

parse_lam: String -> List(String) -> Parsed(Term)
  (code) => (vars) =>
  parsing<Nat   ><Term>(parse_one(next(code))(OPEN))((code) => (eras) =>
  parsing<String><Term>(parse_nam(next(code))(true))((code) => (name) =>
  parsing<Nat   ><Term>(parse_one(next(code))(CLOS))((code) => (skip) =>
  parsing<String><Term>(parse_str(next(code))(ARR1))((code) => (skip) =>
  parsing<Term  ><Term>(parse_trm(next(code))(ext<String>(name)(vars)))((code) => (body) =>
  parsed<Term>(code)(lam(nat_eql(eras)(n1))(name)(body)))))))

parse_let: String -> List(String) -> Parsed(Term)
  (code) => (vars) =>
  parsing<String><Term>(parse_str(next(code))(LETS))((code) => (skip) =>
  parsing<String><Term>(parse_nam(next(code))(false))((code) => (name) =>
  parsing<String><Term>(parse_str(next(code))(EQLS))((code) => (skip) =>
  parsing<Term  ><Term>(parse_trm(next(code))(vars))((code) => (expr) =>
  parsing<Term  ><Term>(parse_trm(next(code))(ext<String>(name)(vars)))((code) => (body) =>
  parsed<Term>(code)(lit(name)(expr)(body)))))))

parse_typ: String -> List(String) -> Parsed(Term)
  (code) => (vars) =>
  parsing<String><Term>(parse_str(next(code))(TYPS))((code) => (skip) =>
  parsed<Term>(code)(typ))

parse_var: String -> List(String) -> Parsed(Term)
  (code) => (vars) =>
  parsing<String><Term>(parse_nam(next(code))(false))((code) => (name) =>
  let got = find<String>(vars)((x) => (i) => string_eql(x)(name))
  let case_none = parsed<Term>(code)(ref(name))
  let case_some = (value) => parsed<Term>(code)(var(snd<String><Nat>(value)))
  got<() => Parsed(Term)>(case_none)(case_some))

parse_app: String -> Term -> List(String) -> Parsed(Term)
  (code) => (func) => (vars) =>
  parsing<Nat ><Term>(parse_one(next(code))(OPEN))((code) => (eras) =>
  parsing<Term><Term>(parse_trm(next(code))(vars))((code) => (argm) =>
  parsing<Nat ><Term>(parse_one(next(code))(CLOS))((code) => (skip) =>
  parsed<Term>(code)(app(nat_eql(eras)(n1))(func)(argm)))))

parse_arr: String -> Term -> List(String) -> Parsed(Term)
  (code) => (bind) => (vars) =>
  parsing<String><Term>(parse_str(next(code))(ARR0))((code) => (skip) =>
  parsing<Term  ><Term>(parse_trm(next(code))(ext<String>(nil<Char>)(ext<String>(nil<Char>)(vars))))((code) => (body) =>
  parsed<Term>(code)(all(false)(nil<Char>)(nil<Char>)(shift(bind)(n1)(n0))(body))))

parse_ann: String -> Term -> List(String) -> Parsed(Term)
  (code) => (expr) => (vars) =>
  parsing<String><Term>(parse_str(next(code))(COLS))((code) => (skip) =>
  parsing<Term  ><Term>(parse_trm(next(code))(vars))((code) => (type) =>
  parsed<Term>(code)(ann(false)(expr)(type))))

parse_pst: String -> Term -> List(String) -> Parsed(Term)
  (code) => (term) => (vars) =>
  let post_parse = first_valid<Pair(String)(Term)>(
    ext<Parsed(Term)>(parse_app(code)(term)(vars))(
    ext<Parsed(Term)>(parse_arr(code)(term)(vars))(
    ext<Parsed(Term)>(parse_ann(code)(term)(vars))(
    nil<Parsed(Term)>))))
  let case_none = parsed<Term>(code)(term)
  let case_some = (value) =>
    let case_pair = (code) => (term) => parse_pst(code)(term)(vars)
    value<() => Parsed(Term)>(case_pair)
  post_parse<() => Parsed(Term)>(case_none)(case_some)

parse_trm: String -> List(String) -> Parsed(Term)
  (code) => (vars) =>
  let base_parse = first_valid<Pair(String)(Term)>(
    ext<Parsed(Term)>(parse_all(code)(vars))(
    ext<Parsed(Term)>(parse_lam(code)(vars))(
    ext<Parsed(Term)>(parse_let(code)(vars))(
    ext<Parsed(Term)>(parse_par(code)(vars))(
    ext<Parsed(Term)>(parse_typ(code)(vars))(
    ext<Parsed(Term)>(parse_var(code)(vars))(
    nil<Parsed(Term)>)))))))
  parsing<Term><Term>(base_parse)((code) => (term) =>
    parse_pst(code)(term)(vars))

shift: Term -> Nat -> Nat -> Term
  (term) => (inc) => (dep) =>
  Type

// Main
// ====

example_0: Word(n4)
  let w0011 = w1<n3>(w1<n2>(w0<n1>(w0<n0>(we))))
  let w0101 = w1<n3>(w0<n2>(w1<n1>(w0<n0>(we))))
  word_add<n4>(w0011)(w0101) // 3 + 5 == 8

main: Bool
  nat_eql(n9)(n8)
