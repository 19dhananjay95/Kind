module.exports = (function() {
    function word_to_u16(w) {
        var u = 0;
        for (var i = 0; i < 16; ++i) {
            u = u | (w._ === 'Word.i' ? 1 << i : 0);
            w = w.pred;
        };
        return u;
    };

    function u16_to_word(u) {
        var w = {
            _: 'Word.e'
        };
        for (var i = 0; i < 16; ++i) {
            w = {
                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',
                pred: w
            };
        };
        return w;
    };

    function u16_to_bits(x) {
        var s = '';
        for (var i = 0; i < 16; ++i) {
            s = (x & 1 ? '1' : '0') + s;
            x = x >>> 1;
        }
        return s;
    };
    var list_for = list => nil => cons => {
        while (list._ !== 'List.nil') {
            nil = cons(list.head)(nil);
            list = list.tail;
        }
        return nil;
    };
    var list_length = list => {
        var len = 0;
        while (list._ === 'List.cons') {
            len += 1;
            list = list.tail;
        };
        return BigInt(len);
    };
    var nat_to_bits = n => {
        return n === 0n ? '' : n.toString(2);
    };
    var fm_name_to_bits = name => {
        const TABLE = {
            'A': '000000',
            'B': '100000',
            'C': '010000',
            'D': '110000',
            'E': '001000',
            'F': '101000',
            'G': '011000',
            'H': '111000',
            'I': '000100',
            'J': '100100',
            'K': '010100',
            'L': '110100',
            'M': '001100',
            'N': '101100',
            'O': '011100',
            'P': '111100',
            'Q': '000010',
            'R': '100010',
            'S': '010010',
            'T': '110010',
            'U': '001010',
            'V': '101010',
            'W': '011010',
            'X': '111010',
            'Y': '000110',
            'Z': '100110',
            'a': '010110',
            'b': '110110',
            'c': '001110',
            'd': '101110',
            'e': '011110',
            'f': '111110',
            'g': '000001',
            'h': '100001',
            'i': '010001',
            'j': '110001',
            'k': '001001',
            'l': '101001',
            'm': '011001',
            'n': '111001',
            'o': '000101',
            'p': '100101',
            'q': '010101',
            'r': '110101',
            's': '001101',
            't': '101101',
            'u': '011101',
            'v': '111101',
            'w': '000011',
            'x': '100011',
            'y': '010011',
            'z': '110011',
            '0': '001011',
            '1': '101011',
            '2': '011011',
            '3': '111011',
            '4': '000111',
            '5': '100111',
            '6': '010111',
            '7': '110111',
            '8': '001111',
            '9': '101111',
            '.': '011111',
            '_': '111111',
        }
        var a = '';
        for (var i = name.length - 1; i >= 0; --i) {
            a += TABLE[name[i]];
        }
        return a;
    };
    const inst_unit = x => x(1);
    const elim_unit = (x => {
        var $1 = (() => c0 => {
            var self = x;
            switch ("unit") {
                case 'unit':
                    var $0 = c0;
                    return $0;
            };
        })();
        return $1;
    });
    const inst_bool = x => x(true)(false);
    const elim_bool = (x => {
        var $4 = (() => c0 => c1 => {
            var self = x;
            if (self) {
                var $2 = c2;
                return $2;
            } else {
                var $3 = c2;
                return $3;
            };
        })();
        return $4;
    });
    const inst_nat = x => x(0n)(x0 => 1n + x0);
    const elim_nat = (x => {
        var $8 = (() => c0 => c1 => {
            var self = x;
            if (self === 0n) {
                var $5 = c2;
                return $5;
            } else {
                var $6 = (self - 1n);
                var $7 = c2($6);
                return $7;
            };
        })();
        return $8;
    });
    const inst_bits = x => x('')(x0 => x0 + '0')(x0 => x0 + '1');
    const elim_bits = (x => {
        var $14 = (() => c0 => c1 => c2 => {
            var self = x;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'e':
                    var $9 = c0;
                    return $9;
                case 'o':
                    var $10 = self.slice(0, -1);
                    var $11 = c1($10);
                    return $11;
                case 'i':
                    var $12 = self.slice(0, -1);
                    var $13 = c2($12);
                    return $13;
            };
        })();
        return $14;
    });
    const inst_u16 = x => x(x0 => word_to_u16(x0));
    const elim_u16 = (x => {
        var $17 = (() => c0 => {
            var self = x;
            switch ('u16') {
                case 'u16':
                    var $15 = u16_to_word(self);
                    var $16 = c0($15);
                    return $16;
            };
        })();
        return $17;
    });
    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));
    const elim_string = (x => {
        var $22 = (() => c0 => c1 => {
            var self = x;
            if (self.length === 0) {
                var $18 = c2;
                return $18;
            } else {
                var $19 = self.charCodeAt(0);
                var $20 = self.slice(1);
                var $21 = c2($19)($20);
                return $21;
            };
        })();
        return $22;
    });
    var run = (p) => {
        var rdl = require('readline').createInterface({
            input: process.stdin,
            output: process.stdout,
            terminal: false
        });
        return run_io(rdl, p).then((x) => {
            rdl.close();
            return x;
        });
    };
    var run_io = (rdl, p) => {
        switch (p._) {
            case 'IO.end':
                return Promise.resolve(p.value);
            case 'IO.ask':
                return new Promise((res, _) => {
                    switch (p.query) {
                        case 'print':
                            console.log(p.param);
                            run_io(rdl, p.then(1)).then(res);
                            break;
                        case 'exit':
                            process.exit();
                            break;
                        case 'get_line':
                            rdl.question('', (line) => run_io(rdl, p.then(line)).then(res));
                            break;
                        case 'get_file':
                            try {
                                run_io(rdl, p.then(require('fs').readFileSync(p.param, 'utf8'))).then(res);
                            } catch (e) {
                                run_io(rdl, p.then('')).then(res);
                            };
                            break;
                        case 'get_args':
                            run_io(rdl, p.then(process.argv[2] || '')).then(res);
                            break;
                    }
                });
        }
    };

    function IO$(_A$1) {
        var $23 = null;
        return $23;
    };
    const IO = x0 => IO$(x0);

    function IO$ask$(_query$2, _param$3, _then$4) {
        var $24 = ({
            _: 'IO.ask',
            'query': _query$2,
            'param': _param$3,
            'then': _then$4
        });
        return $24;
    };
    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);

    function IO$bind$(_a$3, _f$4) {
        var self = _a$3;
        switch (self._) {
            case 'IO.end':
                var $26 = self.value;
                var $27 = _f$4($26);
                var $25 = $27;
                break;
            case 'IO.ask':
                var $28 = self.query;
                var $29 = self.param;
                var $30 = self.then;
                var $31 = IO$ask$($28, $29, (_x$8 => {
                    var $32 = IO$bind$($30(_x$8), _f$4);
                    return $32;
                }));
                var $25 = $31;
                break;
        };
        return $25;
    };
    const IO$bind = x0 => x1 => IO$bind$(x0, x1);

    function IO$end$(_value$2) {
        var $33 = ({
            _: 'IO.end',
            'value': _value$2
        });
        return $33;
    };
    const IO$end = x0 => IO$end$(x0);

    function IO$monad$(_new$2) {
        var $34 = _new$2(IO$bind)(IO$end);
        return $34;
    };
    const IO$monad = x0 => IO$monad$(x0);

    function Maybe$(_A$1) {
        var $35 = null;
        return $35;
    };
    const Maybe = x0 => Maybe$(x0);

    function Map$(_A$1) {
        var $36 = null;
        return $36;
    };
    const Map = x0 => Map$(x0);
    const Maybe$none = ({
        _: 'Maybe.none'
    });

    function Map$get$(_bits$2, _map$3) {
        var Map$get$ = (_bits$2, _map$3) => ({
            ctr: 'TCO',
            arg: [_bits$2, _map$3]
        });
        var Map$get = _bits$2 => _map$3 => Map$get$(_bits$2, _map$3);
        var arg = [_bits$2, _map$3];
        while (true) {
            let [_bits$2, _map$3] = arg;
            var R = (() => {
                var self = _bits$2;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var self = _map$3;
                        switch (self._) {
                            case 'Map.new':
                                var $38 = Maybe$none;
                                var $37 = $38;
                                break;
                            case 'Map.tie':
                                var $39 = self.val;
                                var $40 = self.lft;
                                var $41 = self.rgt;
                                var $42 = $39;
                                var $37 = $42;
                                break;
                        };
                        return $37;
                    case 'o':
                        var $43 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'Map.new':
                                var $45 = Maybe$none;
                                var $44 = $45;
                                break;
                            case 'Map.tie':
                                var $46 = self.val;
                                var $47 = self.lft;
                                var $48 = self.rgt;
                                var $49 = Map$get$($43, $47);
                                var $44 = $49;
                                break;
                        };
                        return $44;
                    case 'i':
                        var $50 = self.slice(0, -1);
                        var self = _map$3;
                        switch (self._) {
                            case 'Map.new':
                                var $52 = Maybe$none;
                                var $51 = $52;
                                break;
                            case 'Map.tie':
                                var $53 = self.val;
                                var $54 = self.lft;
                                var $55 = self.rgt;
                                var $56 = Map$get$($50, $55);
                                var $51 = $56;
                                break;
                        };
                        return $51;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Map$get = x0 => x1 => Map$get$(x0, x1);
    const Bits$e = '';
    const Bool$false = false;
    const Bool$and = a0 => a1 => (a0 && a1);
    const Bool$true = true;

    function Cmp$as_lte$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $58 = Bool$true;
                var $57 = $58;
                break;
            case 'Cmp.eql':
                var $59 = Bool$true;
                var $57 = $59;
                break;
            case 'Cmp.gtn':
                var $60 = Bool$false;
                var $57 = $60;
                break;
        };
        return $57;
    };
    const Cmp$as_lte = x0 => Cmp$as_lte$(x0);
    const Cmp$ltn = ({
        _: 'Cmp.ltn'
    });
    const Cmp$gtn = ({
        _: 'Cmp.gtn'
    });

    function Word$cmp$go$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $62 = (_b$5 => {
                    var $63 = _c$4;
                    return $63;
                });
                var $61 = $62;
                break;
            case 'Word.o':
                var $64 = self.pred;
                var $65 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $67 = (_a$pred$8 => {
                                var $68 = _c$4;
                                return $68;
                            });
                            var $66 = $67;
                            break;
                        case 'Word.o':
                            var $69 = self.pred;
                            var $70 = (_a$pred$10 => {
                                var $71 = Word$cmp$go$(_a$pred$10, $69, _c$4);
                                return $71;
                            });
                            var $66 = $70;
                            break;
                        case 'Word.i':
                            var $72 = self.pred;
                            var $73 = (_a$pred$10 => {
                                var $74 = Word$cmp$go$(_a$pred$10, $72, Cmp$ltn);
                                return $74;
                            });
                            var $66 = $73;
                            break;
                    };
                    var $66 = $66($64);
                    return $66;
                });
                var $61 = $65;
                break;
            case 'Word.i':
                var $75 = self.pred;
                var $76 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $78 = (_a$pred$8 => {
                                var $79 = _c$4;
                                return $79;
                            });
                            var $77 = $78;
                            break;
                        case 'Word.o':
                            var $80 = self.pred;
                            var $81 = (_a$pred$10 => {
                                var $82 = Word$cmp$go$(_a$pred$10, $80, Cmp$gtn);
                                return $82;
                            });
                            var $77 = $81;
                            break;
                        case 'Word.i':
                            var $83 = self.pred;
                            var $84 = (_a$pred$10 => {
                                var $85 = Word$cmp$go$(_a$pred$10, $83, _c$4);
                                return $85;
                            });
                            var $77 = $84;
                            break;
                    };
                    var $77 = $77($75);
                    return $77;
                });
                var $61 = $76;
                break;
        };
        var $61 = $61(_b$3);
        return $61;
    };
    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);
    const Cmp$eql = ({
        _: 'Cmp.eql'
    });

    function Word$cmp$(_a$2, _b$3) {
        var $86 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);
        return $86;
    };
    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);

    function Word$lte$(_a$2, _b$3) {
        var $87 = Cmp$as_lte$(Word$cmp$(_a$2, _b$3));
        return $87;
    };
    const Word$lte = x0 => x1 => Word$lte$(x0, x1);

    function Nat$succ$(_pred$1) {
        var $88 = 1n + _pred$1;
        return $88;
    };
    const Nat$succ = x0 => Nat$succ$(x0);
    const Nat$zero = 0n;
    const U16$lte = a0 => a1 => (a0 <= a1);

    function U16$btw$(_a$1, _b$2, _c$3) {
        var $89 = ((_a$1 <= _b$2) && (_b$2 <= _c$3));
        return $89;
    };
    const U16$btw = x0 => x1 => x2 => U16$btw$(x0, x1, x2);

    function U16$new$(_value$1) {
        var $90 = word_to_u16(_value$1);
        return $90;
    };
    const U16$new = x0 => U16$new$(x0);
    const Word$e = ({
        _: 'Word.e'
    });

    function Word$(_size$1) {
        var $91 = null;
        return $91;
    };
    const Word = x0 => Word$(x0);

    function Word$i$(_pred$2) {
        var $92 = ({
            _: 'Word.i',
            'pred': _pred$2
        });
        return $92;
    };
    const Word$i = x0 => Word$i$(x0);

    function Word$o$(_pred$2) {
        var $93 = ({
            _: 'Word.o',
            'pred': _pred$2
        });
        return $93;
    };
    const Word$o = x0 => Word$o$(x0);

    function Word$subber$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $95 = (_b$5 => {
                    var $96 = Word$e;
                    return $96;
                });
                var $94 = $95;
                break;
            case 'Word.o':
                var $97 = self.pred;
                var $98 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $100 = (_a$pred$8 => {
                                var $101 = Word$e;
                                return $101;
                            });
                            var $99 = $100;
                            break;
                        case 'Word.o':
                            var $102 = self.pred;
                            var $103 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $105 = Word$i$(Word$subber$(_a$pred$10, $102, Bool$true));
                                    var $104 = $105;
                                } else {
                                    var $106 = Word$o$(Word$subber$(_a$pred$10, $102, Bool$false));
                                    var $104 = $106;
                                };
                                return $104;
                            });
                            var $99 = $103;
                            break;
                        case 'Word.i':
                            var $107 = self.pred;
                            var $108 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $110 = Word$o$(Word$subber$(_a$pred$10, $107, Bool$true));
                                    var $109 = $110;
                                } else {
                                    var $111 = Word$i$(Word$subber$(_a$pred$10, $107, Bool$true));
                                    var $109 = $111;
                                };
                                return $109;
                            });
                            var $99 = $108;
                            break;
                    };
                    var $99 = $99($97);
                    return $99;
                });
                var $94 = $98;
                break;
            case 'Word.i':
                var $112 = self.pred;
                var $113 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $115 = (_a$pred$8 => {
                                var $116 = Word$e;
                                return $116;
                            });
                            var $114 = $115;
                            break;
                        case 'Word.o':
                            var $117 = self.pred;
                            var $118 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $120 = Word$o$(Word$subber$(_a$pred$10, $117, Bool$false));
                                    var $119 = $120;
                                } else {
                                    var $121 = Word$i$(Word$subber$(_a$pred$10, $117, Bool$false));
                                    var $119 = $121;
                                };
                                return $119;
                            });
                            var $114 = $118;
                            break;
                        case 'Word.i':
                            var $122 = self.pred;
                            var $123 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $125 = Word$i$(Word$subber$(_a$pred$10, $122, Bool$true));
                                    var $124 = $125;
                                } else {
                                    var $126 = Word$o$(Word$subber$(_a$pred$10, $122, Bool$false));
                                    var $124 = $126;
                                };
                                return $124;
                            });
                            var $114 = $123;
                            break;
                    };
                    var $114 = $114($112);
                    return $114;
                });
                var $94 = $113;
                break;
        };
        var $94 = $94(_b$3);
        return $94;
    };
    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);

    function Word$sub$(_a$2, _b$3) {
        var $127 = Word$subber$(_a$2, _b$3, Bool$false);
        return $127;
    };
    const Word$sub = x0 => x1 => Word$sub$(x0, x1);
    const U16$sub = a0 => a1 => (Math.max(a0 - a1, 0));

    function Nat$apply$(_n$2, _f$3, _x$4) {
        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({
            ctr: 'TCO',
            arg: [_n$2, _f$3, _x$4]
        });
        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);
        var arg = [_n$2, _f$3, _x$4];
        while (true) {
            let [_n$2, _f$3, _x$4] = arg;
            var R = (() => {
                var self = _n$2;
                if (self === 0n) {
                    var $128 = _x$4;
                    return $128;
                } else {
                    var $129 = (self - 1n);
                    var $130 = Nat$apply$($129, _f$3, _f$3(_x$4));
                    return $130;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);

    function Word$inc$(_word$2) {
        var self = _word$2;
        switch (self._) {
            case 'Word.e':
                var $132 = Word$e;
                var $131 = $132;
                break;
            case 'Word.o':
                var $133 = self.pred;
                var $134 = Word$i$($133);
                var $131 = $134;
                break;
            case 'Word.i':
                var $135 = self.pred;
                var $136 = Word$o$(Word$inc$($135));
                var $131 = $136;
                break;
        };
        return $131;
    };
    const Word$inc = x0 => Word$inc$(x0);

    function U16$inc$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $138 = u16_to_word(self);
                var $139 = U16$new$(Word$inc$($138));
                var $137 = $139;
                break;
        };
        return $137;
    };
    const U16$inc = x0 => U16$inc$(x0);

    function Word$zero$(_size$1) {
        var self = _size$1;
        if (self === 0n) {
            var $141 = Word$e;
            var $140 = $141;
        } else {
            var $142 = (self - 1n);
            var $143 = Word$o$(Word$zero$($142));
            var $140 = $143;
        };
        return $140;
    };
    const Word$zero = x0 => Word$zero$(x0);
    const U16$zero = U16$new$(Word$zero$(16n));
    const Nat$to_u16 = a0 => (Number(a0));

    function Word$adder$(_a$2, _b$3, _c$4) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $145 = (_b$5 => {
                    var $146 = Word$e;
                    return $146;
                });
                var $144 = $145;
                break;
            case 'Word.o':
                var $147 = self.pred;
                var $148 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $150 = (_a$pred$8 => {
                                var $151 = Word$e;
                                return $151;
                            });
                            var $149 = $150;
                            break;
                        case 'Word.o':
                            var $152 = self.pred;
                            var $153 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $155 = Word$i$(Word$adder$(_a$pred$10, $152, Bool$false));
                                    var $154 = $155;
                                } else {
                                    var $156 = Word$o$(Word$adder$(_a$pred$10, $152, Bool$false));
                                    var $154 = $156;
                                };
                                return $154;
                            });
                            var $149 = $153;
                            break;
                        case 'Word.i':
                            var $157 = self.pred;
                            var $158 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $160 = Word$o$(Word$adder$(_a$pred$10, $157, Bool$true));
                                    var $159 = $160;
                                } else {
                                    var $161 = Word$i$(Word$adder$(_a$pred$10, $157, Bool$false));
                                    var $159 = $161;
                                };
                                return $159;
                            });
                            var $149 = $158;
                            break;
                    };
                    var $149 = $149($147);
                    return $149;
                });
                var $144 = $148;
                break;
            case 'Word.i':
                var $162 = self.pred;
                var $163 = (_b$7 => {
                    var self = _b$7;
                    switch (self._) {
                        case 'Word.e':
                            var $165 = (_a$pred$8 => {
                                var $166 = Word$e;
                                return $166;
                            });
                            var $164 = $165;
                            break;
                        case 'Word.o':
                            var $167 = self.pred;
                            var $168 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $170 = Word$o$(Word$adder$(_a$pred$10, $167, Bool$true));
                                    var $169 = $170;
                                } else {
                                    var $171 = Word$i$(Word$adder$(_a$pred$10, $167, Bool$false));
                                    var $169 = $171;
                                };
                                return $169;
                            });
                            var $164 = $168;
                            break;
                        case 'Word.i':
                            var $172 = self.pred;
                            var $173 = (_a$pred$10 => {
                                var self = _c$4;
                                if (self) {
                                    var $175 = Word$i$(Word$adder$(_a$pred$10, $172, Bool$true));
                                    var $174 = $175;
                                } else {
                                    var $176 = Word$o$(Word$adder$(_a$pred$10, $172, Bool$true));
                                    var $174 = $176;
                                };
                                return $174;
                            });
                            var $164 = $173;
                            break;
                    };
                    var $164 = $164($162);
                    return $164;
                });
                var $144 = $163;
                break;
        };
        var $144 = $144(_b$3);
        return $144;
    };
    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);

    function Word$add$(_a$2, _b$3) {
        var $177 = Word$adder$(_a$2, _b$3, Bool$false);
        return $177;
    };
    const Word$add = x0 => x1 => Word$add$(x0, x1);
    const U16$add = a0 => a1 => ((a0 + a1) & 0xFFFF);

    function Cmp$as_eql$(_cmp$1) {
        var self = _cmp$1;
        switch (self._) {
            case 'Cmp.ltn':
                var $179 = Bool$false;
                var $178 = $179;
                break;
            case 'Cmp.eql':
                var $180 = Bool$true;
                var $178 = $180;
                break;
            case 'Cmp.gtn':
                var $181 = Bool$false;
                var $178 = $181;
                break;
        };
        return $178;
    };
    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);

    function Word$eql$(_a$2, _b$3) {
        var $182 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));
        return $182;
    };
    const Word$eql = x0 => x1 => Word$eql$(x0, x1);
    const U16$eql = a0 => a1 => (a0 === a1);
    const Bits$o = a0 => (a0 + '0');
    const Bits$i = a0 => (a0 + '1');

    function Word$to_bits$(_a$2) {
        var self = _a$2;
        switch (self._) {
            case 'Word.e':
                var $184 = Bits$e;
                var $183 = $184;
                break;
            case 'Word.o':
                var $185 = self.pred;
                var $186 = (Word$to_bits$($185) + '0');
                var $183 = $186;
                break;
            case 'Word.i':
                var $187 = self.pred;
                var $188 = (Word$to_bits$($187) + '1');
                var $183 = $188;
                break;
        };
        return $183;
    };
    const Word$to_bits = x0 => Word$to_bits$(x0);

    function Word$trim$(_new_size$2, _word$3) {
        var self = _new_size$2;
        if (self === 0n) {
            var $190 = Word$e;
            var $189 = $190;
        } else {
            var $191 = (self - 1n);
            var self = _word$3;
            switch (self._) {
                case 'Word.e':
                    var $193 = Word$o$(Word$trim$($191, Word$e));
                    var $192 = $193;
                    break;
                case 'Word.o':
                    var $194 = self.pred;
                    var $195 = Word$o$(Word$trim$($191, $194));
                    var $192 = $195;
                    break;
                case 'Word.i':
                    var $196 = self.pred;
                    var $197 = Word$i$(Word$trim$($191, $196));
                    var $192 = $197;
                    break;
            };
            var $189 = $192;
        };
        return $189;
    };
    const Word$trim = x0 => x1 => Word$trim$(x0, x1);
    const Bits$concat = a0 => a1 => (a1 + a0);

    function Bits$reverse$tco$(_a$1, _r$2) {
        var Bits$reverse$tco$ = (_a$1, _r$2) => ({
            ctr: 'TCO',
            arg: [_a$1, _r$2]
        });
        var Bits$reverse$tco = _a$1 => _r$2 => Bits$reverse$tco$(_a$1, _r$2);
        var arg = [_a$1, _r$2];
        while (true) {
            let [_a$1, _r$2] = arg;
            var R = (() => {
                var self = _a$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $198 = _r$2;
                        return $198;
                    case 'o':
                        var $199 = self.slice(0, -1);
                        var $200 = Bits$reverse$tco$($199, (_r$2 + '0'));
                        return $200;
                    case 'i':
                        var $201 = self.slice(0, -1);
                        var $202 = Bits$reverse$tco$($201, (_r$2 + '1'));
                        return $202;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Bits$reverse$tco = x0 => x1 => Bits$reverse$tco$(x0, x1);

    function Bits$reverse$(_a$1) {
        var $203 = Bits$reverse$tco$(_a$1, Bits$e);
        return $203;
    };
    const Bits$reverse = x0 => Bits$reverse$(x0);
    const Fm$Name$to_bits = a0 => (fm_name_to_bits(a0));

    function Fm$get$(_name$2, _map$3) {
        var $204 = Map$get$((fm_name_to_bits(_name$2)), _map$3);
        return $204;
    };
    const Fm$get = x0 => x1 => Fm$get$(x0, x1);

    function String$cons$(_head$1, _tail$2) {
        var $205 = (String.fromCharCode(_head$1) + _tail$2);
        return $205;
    };
    const String$cons = x0 => x1 => String$cons$(x0, x1);

    function Fm$Synth$file_of$(_name$1) {
        var self = _name$1;
        if (self.length === 0) {
            var $207 = ".fm";
            var $206 = $207;
        } else {
            var $208 = self.charCodeAt(0);
            var $209 = self.slice(1);
            var self = ($208 === 46);
            if (self) {
                var $211 = ".fm";
                var $210 = $211;
            } else {
                var $212 = String$cons$($208, Fm$Synth$file_of$($209));
                var $210 = $212;
            };
            var $206 = $210;
        };
        return $206;
    };
    const Fm$Synth$file_of = x0 => Fm$Synth$file_of$(x0);

    function IO$get_file$(_name$1) {
        var $213 = IO$ask$("get_file", _name$1, (_file$2 => {
            var $214 = IO$end$(_file$2);
            return $214;
        }));
        return $213;
    };
    const IO$get_file = x0 => IO$get_file$(x0);

    function Parser$Reply$(_V$1) {
        var $215 = null;
        return $215;
    };
    const Parser$Reply = x0 => Parser$Reply$(x0);

    function Parser$Reply$value$(_idx$2, _code$3, _val$4) {
        var $216 = ({
            _: 'Parser.Reply.value',
            'idx': _idx$2,
            'code': _code$3,
            'val': _val$4
        });
        return $216;
    };
    const Parser$Reply$value = x0 => x1 => x2 => Parser$Reply$value$(x0, x1, x2);

    function Parser$is_eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $218 = Parser$Reply$value$(_idx$1, _code$2, Bool$true);
            var $217 = $218;
        } else {
            var $219 = self.charCodeAt(0);
            var $220 = self.slice(1);
            var $221 = Parser$Reply$value$(_idx$1, _code$2, Bool$false);
            var $217 = $221;
        };
        return $217;
    };
    const Parser$is_eof = x0 => x1 => Parser$is_eof$(x0, x1);

    function Parser$Reply$error$(_idx$2, _code$3, _err$4) {
        var $222 = ({
            _: 'Parser.Reply.error',
            'idx': _idx$2,
            'code': _code$3,
            'err': _err$4
        });
        return $222;
    };
    const Parser$Reply$error = x0 => x1 => x2 => Parser$Reply$error$(x0, x1, x2);

    function Parser$(_V$1) {
        var $223 = null;
        return $223;
    };
    const Parser = x0 => Parser$(x0);

    function Maybe$some$(_value$2) {
        var $224 = ({
            _: 'Maybe.some',
            'value': _value$2
        });
        return $224;
    };
    const Maybe$some = x0 => Maybe$some$(x0);

    function Parser$ErrorAt$new$(_idx$1, _code$2, _err$3) {
        var $225 = ({
            _: 'Parser.ErrorAt.new',
            'idx': _idx$1,
            'code': _code$2,
            'err': _err$3
        });
        return $225;
    };
    const Parser$ErrorAt$new = x0 => x1 => x2 => Parser$ErrorAt$new$(x0, x1, x2);
    const Nat$gtn = a0 => a1 => (a0 > a1);

    function Parser$ErrorAt$combine$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Maybe.none':
                var $227 = _b$2;
                var $226 = $227;
                break;
            case 'Maybe.some':
                var $228 = self.value;
                var self = _b$2;
                switch (self._) {
                    case 'Maybe.none':
                        var $230 = _a$1;
                        var $229 = $230;
                        break;
                    case 'Maybe.some':
                        var $231 = self.value;
                        var self = $228;
                        switch (self._) {
                            case 'Parser.ErrorAt.new':
                                var $233 = self.idx;
                                var $234 = self.code;
                                var $235 = self.err;
                                var self = $231;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $237 = self.idx;
                                        var $238 = self.code;
                                        var $239 = self.err;
                                        var self = ($233 > $237);
                                        if (self) {
                                            var $241 = _a$1;
                                            var $240 = $241;
                                        } else {
                                            var $242 = _b$2;
                                            var $240 = $242;
                                        };
                                        var $236 = $240;
                                        break;
                                };
                                var $232 = $236;
                                break;
                        };
                        var $229 = $232;
                        break;
                };
                var $226 = $229;
                break;
        };
        return $226;
    };
    const Parser$ErrorAt$combine = x0 => x1 => Parser$ErrorAt$combine$(x0, x1);

    function Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5) {
        var Parser$first_of$go$ = (_pars$2, _err$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_pars$2, _err$3, _idx$4, _code$5]
        });
        var Parser$first_of$go = _pars$2 => _err$3 => _idx$4 => _code$5 => Parser$first_of$go$(_pars$2, _err$3, _idx$4, _code$5);
        var arg = [_pars$2, _err$3, _idx$4, _code$5];
        while (true) {
            let [_pars$2, _err$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _pars$2;
                switch (self._) {
                    case 'List.nil':
                        var self = _err$3;
                        switch (self._) {
                            case 'Maybe.none':
                                var $244 = Parser$Reply$error$(_idx$4, _code$5, "No parse.");
                                var $243 = $244;
                                break;
                            case 'Maybe.some':
                                var $245 = self.value;
                                var self = $245;
                                switch (self._) {
                                    case 'Parser.ErrorAt.new':
                                        var $247 = self.idx;
                                        var $248 = self.code;
                                        var $249 = self.err;
                                        var $250 = Parser$Reply$error$($247, $248, $249);
                                        var $246 = $250;
                                        break;
                                };
                                var $243 = $246;
                                break;
                        };
                        return $243;
                    case 'List.cons':
                        var $251 = self.head;
                        var $252 = self.tail;
                        var _parsed$8 = $251(_idx$4)(_code$5);
                        var self = _parsed$8;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $254 = self.idx;
                                var $255 = self.code;
                                var $256 = self.err;
                                var _neo$12 = Maybe$some$(Parser$ErrorAt$new$($254, $255, $256));
                                var _err$13 = Parser$ErrorAt$combine$(_neo$12, _err$3);
                                var $257 = Parser$first_of$go$($252, _err$13, _idx$4, _code$5);
                                var $253 = $257;
                                break;
                            case 'Parser.Reply.value':
                                var $258 = self.idx;
                                var $259 = self.code;
                                var $260 = self.val;
                                var $261 = Parser$Reply$value$($258, $259, $260);
                                var $253 = $261;
                                break;
                        };
                        return $253;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$first_of$go = x0 => x1 => x2 => x3 => Parser$first_of$go$(x0, x1, x2, x3);

    function Parser$first_of$(_pars$2) {
        var $262 = Parser$first_of$go(_pars$2)(Maybe$none);
        return $262;
    };
    const Parser$first_of = x0 => Parser$first_of$(x0);

    function List$cons$(_head$2, _tail$3) {
        var $263 = ({
            _: 'List.cons',
            'head': _head$2,
            'tail': _tail$3
        });
        return $263;
    };
    const List$cons = x0 => x1 => List$cons$(x0, x1);

    function List$(_A$1) {
        var $264 = null;
        return $264;
    };
    const List = x0 => List$(x0);
    const List$nil = ({
        _: 'List.nil'
    });

    function Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5) {
        var Parser$many$go$ = (_parse$2, _values$3, _idx$4, _code$5) => ({
            ctr: 'TCO',
            arg: [_parse$2, _values$3, _idx$4, _code$5]
        });
        var Parser$many$go = _parse$2 => _values$3 => _idx$4 => _code$5 => Parser$many$go$(_parse$2, _values$3, _idx$4, _code$5);
        var arg = [_parse$2, _values$3, _idx$4, _code$5];
        while (true) {
            let [_parse$2, _values$3, _idx$4, _code$5] = arg;
            var R = (() => {
                var self = _parse$2(_idx$4)(_code$5);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $265 = self.idx;
                        var $266 = self.code;
                        var $267 = self.err;
                        var $268 = Parser$Reply$value$(_idx$4, _code$5, _values$3(List$nil));
                        return $268;
                    case 'Parser.Reply.value':
                        var $269 = self.idx;
                        var $270 = self.code;
                        var $271 = self.val;
                        var $272 = Parser$many$go$(_parse$2, (_xs$9 => {
                            var $273 = _values$3(List$cons$($271, _xs$9));
                            return $273;
                        }), $269, $270);
                        return $272;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$many$go = x0 => x1 => x2 => x3 => Parser$many$go$(x0, x1, x2, x3);

    function Parser$many$(_parser$2) {
        var $274 = Parser$many$go(_parser$2)((_x$3 => {
            var $275 = _x$3;
            return $275;
        }));
        return $274;
    };
    const Parser$many = x0 => Parser$many$(x0);
    const Unit$new = 1;
    const String$concat = a0 => a1 => (a0 + a1);

    function String$flatten$go$(_xs$1, _res$2) {
        var String$flatten$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$flatten$go = _xs$1 => _res$2 => String$flatten$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                switch (self._) {
                    case 'List.nil':
                        var $276 = _res$2;
                        return $276;
                    case 'List.cons':
                        var $277 = self.head;
                        var $278 = self.tail;
                        var $279 = String$flatten$go$($278, (_res$2 + $277));
                        return $279;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$flatten$go = x0 => x1 => String$flatten$go$(x0, x1);

    function String$flatten$(_xs$1) {
        var $280 = String$flatten$go$(_xs$1, "");
        return $280;
    };
    const String$flatten = x0 => String$flatten$(x0);
    const String$nil = '';

    function Parser$text$go$(_text$1, _idx$2, _code$3) {
        var self = _text$1;
        if (self.length === 0) {
            var $282 = Parser$Reply$value$(_idx$2, _code$3, Unit$new);
            var $281 = $282;
        } else {
            var $283 = self.charCodeAt(0);
            var $284 = self.slice(1);
            var self = _code$3;
            if (self.length === 0) {
                var _error$6 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found end of file.", List$nil))));
                var $286 = Parser$Reply$error$(_idx$2, _code$3, _error$6);
                var $285 = $286;
            } else {
                var $287 = self.charCodeAt(0);
                var $288 = self.slice(1);
                var self = ($283 === $287);
                if (self) {
                    var $290 = Parser$text$($284, Nat$succ$(_idx$2), $288);
                    var $289 = $290;
                } else {
                    var _error$8 = String$flatten$(List$cons$("Expected \'", List$cons$(_text$1, List$cons$("\', found \'", List$cons$(String$cons$($287, String$nil), List$cons$("\'.", List$nil))))));
                    var $291 = Parser$Reply$error$(_idx$2, _code$3, _error$8);
                    var $289 = $291;
                };
                var $285 = $289;
            };
            var $281 = $285;
        };
        return $281;
    };
    const Parser$text$go = x0 => x1 => x2 => Parser$text$go$(x0, x1, x2);

    function Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Parser$text$go$(_text$1, _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $293 = self.idx;
                var $294 = self.code;
                var $295 = self.err;
                var $296 = Parser$Reply$error$(_idx$2, _code$3, $295);
                var $292 = $296;
                break;
            case 'Parser.Reply.value':
                var $297 = self.idx;
                var $298 = self.code;
                var $299 = self.val;
                var $300 = Parser$Reply$value$($297, $298, $299);
                var $292 = $300;
                break;
        };
        return $292;
    };
    const Parser$text = x0 => x1 => x2 => Parser$text$(x0, x1, x2);

    function Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6) {
        var Parser$until$go$ = (_until$2, _parse$3, _values$4, _idx$5, _code$6) => ({
            ctr: 'TCO',
            arg: [_until$2, _parse$3, _values$4, _idx$5, _code$6]
        });
        var Parser$until$go = _until$2 => _parse$3 => _values$4 => _idx$5 => _code$6 => Parser$until$go$(_until$2, _parse$3, _values$4, _idx$5, _code$6);
        var arg = [_until$2, _parse$3, _values$4, _idx$5, _code$6];
        while (true) {
            let [_until$2, _parse$3, _values$4, _idx$5, _code$6] = arg;
            var R = (() => {
                var _until_reply$7 = _until$2(_idx$5)(_code$6);
                var self = _until_reply$7;
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $302 = self.idx;
                        var $303 = self.code;
                        var $304 = self.err;
                        var _reply$11 = _parse$3(_idx$5)(_code$6);
                        var self = _reply$11;
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $306 = self.idx;
                                var $307 = self.code;
                                var $308 = self.err;
                                var $309 = Parser$Reply$error$($306, $307, $308);
                                var $305 = $309;
                                break;
                            case 'Parser.Reply.value':
                                var $310 = self.idx;
                                var $311 = self.code;
                                var $312 = self.val;
                                var $313 = Parser$until$go$(_until$2, _parse$3, (_xs$15 => {
                                    var $314 = _values$4(List$cons$($312, _xs$15));
                                    return $314;
                                }), $310, $311);
                                var $305 = $313;
                                break;
                        };
                        var $301 = $305;
                        break;
                    case 'Parser.Reply.value':
                        var $315 = self.idx;
                        var $316 = self.code;
                        var $317 = self.val;
                        var $318 = Parser$Reply$value$($315, $316, _values$4(List$nil));
                        var $301 = $318;
                        break;
                };
                return $301;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Parser$until$go = x0 => x1 => x2 => x3 => x4 => Parser$until$go$(x0, x1, x2, x3, x4);

    function Parser$until$(_until$2, _parse$3) {
        var $319 = Parser$until$go(_until$2)(_parse$3)((_x$4 => {
            var $320 = _x$4;
            return $320;
        }));
        return $319;
    };
    const Parser$until = x0 => x1 => Parser$until$(x0, x1);

    function Parser$one$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $322 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected end of file.");
            var $321 = $322;
        } else {
            var $323 = self.charCodeAt(0);
            var $324 = self.slice(1);
            var $325 = Parser$Reply$value$(Nat$succ$(_idx$1), $324, $323);
            var $321 = $325;
        };
        return $321;
    };
    const Parser$one = x0 => x1 => Parser$one$(x0, x1);
    const Fm$Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{a}"), List$cons$((_idx$1 => _code$2 => {
        var self = Parser$text$("//", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $327 = self.idx;
                var $328 = self.code;
                var $329 = self.err;
                var $330 = Parser$Reply$error$($327, $328, $329);
                var $326 = $330;
                break;
            case 'Parser.Reply.value':
                var $331 = self.idx;
                var $332 = self.code;
                var $333 = self.val;
                var self = Parser$until$(Parser$text("\u{a}"), Parser$one)($331)($332);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $335 = self.idx;
                        var $336 = self.code;
                        var $337 = self.err;
                        var $338 = Parser$Reply$error$($335, $336, $337);
                        var $334 = $338;
                        break;
                    case 'Parser.Reply.value':
                        var $339 = self.idx;
                        var $340 = self.code;
                        var $341 = self.val;
                        var $342 = Parser$Reply$value$($339, $340, Unit$new);
                        var $334 = $342;
                        break;
                };
                var $326 = $334;
                break;
        };
        return $326;
    }), List$nil)))));

    function Fm$Parser$text$(_text$1, _idx$2, _code$3) {
        var self = Fm$Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $344 = self.idx;
                var $345 = self.code;
                var $346 = self.err;
                var $347 = Parser$Reply$error$($344, $345, $346);
                var $343 = $347;
                break;
            case 'Parser.Reply.value':
                var $348 = self.idx;
                var $349 = self.code;
                var $350 = self.val;
                var $351 = Parser$text$(_text$1, $348, $349);
                var $343 = $351;
                break;
        };
        return $343;
    };
    const Fm$Parser$text = x0 => x1 => x2 => Fm$Parser$text$(x0, x1, x2);

    function Parser$many1$(_parser$2, _idx$3, _code$4) {
        var self = _parser$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $353 = self.idx;
                var $354 = self.code;
                var $355 = self.err;
                var $356 = Parser$Reply$error$($353, $354, $355);
                var $352 = $356;
                break;
            case 'Parser.Reply.value':
                var $357 = self.idx;
                var $358 = self.code;
                var $359 = self.val;
                var self = Parser$many$(_parser$2)($357)($358);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $361 = self.idx;
                        var $362 = self.code;
                        var $363 = self.err;
                        var $364 = Parser$Reply$error$($361, $362, $363);
                        var $360 = $364;
                        break;
                    case 'Parser.Reply.value':
                        var $365 = self.idx;
                        var $366 = self.code;
                        var $367 = self.val;
                        var $368 = Parser$Reply$value$($365, $366, List$cons$($359, $367));
                        var $360 = $368;
                        break;
                };
                var $352 = $360;
                break;
        };
        return $352;
    };
    const Parser$many1 = x0 => x1 => x2 => Parser$many1$(x0, x1, x2);

    function Fm$Name$is_letter$(_chr$1) {
        var self = U16$btw$(65, _chr$1, 90);
        if (self) {
            var $370 = Bool$true;
            var $369 = $370;
        } else {
            var self = U16$btw$(97, _chr$1, 122);
            if (self) {
                var $372 = Bool$true;
                var $371 = $372;
            } else {
                var self = U16$btw$(48, _chr$1, 57);
                if (self) {
                    var $374 = Bool$true;
                    var $373 = $374;
                } else {
                    var self = (46 === _chr$1);
                    if (self) {
                        var $376 = Bool$true;
                        var $375 = $376;
                    } else {
                        var self = (95 === _chr$1);
                        if (self) {
                            var $378 = Bool$true;
                            var $377 = $378;
                        } else {
                            var self = (94 === _chr$1);
                            if (self) {
                                var $380 = Bool$true;
                                var $379 = $380;
                            } else {
                                var $381 = Bool$false;
                                var $379 = $381;
                            };
                            var $377 = $379;
                        };
                        var $375 = $377;
                    };
                    var $373 = $375;
                };
                var $371 = $373;
            };
            var $369 = $371;
        };
        return $369;
    };
    const Fm$Name$is_letter = x0 => Fm$Name$is_letter$(x0);

    function Fm$Parser$letter$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $383 = Parser$Reply$error$(_idx$1, _code$2, "Unexpected eof.");
            var $382 = $383;
        } else {
            var $384 = self.charCodeAt(0);
            var $385 = self.slice(1);
            var self = Fm$Name$is_letter$($384);
            if (self) {
                var $387 = Parser$Reply$value$(Nat$succ$(_idx$1), $385, $384);
                var $386 = $387;
            } else {
                var $388 = Parser$Reply$error$(_idx$1, _code$2, "Expected letter.");
                var $386 = $388;
            };
            var $382 = $386;
        };
        return $382;
    };
    const Fm$Parser$letter = x0 => x1 => Fm$Parser$letter$(x0, x1);

    function List$fold$(_list$2, _nil$4, _cons$5) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $390 = _nil$4;
                var $389 = $390;
                break;
            case 'List.cons':
                var $391 = self.head;
                var $392 = self.tail;
                var $393 = _cons$5($391)(List$fold$($392, _nil$4, _cons$5));
                var $389 = $393;
                break;
        };
        return $389;
    };
    const List$fold = x0 => x1 => x2 => List$fold$(x0, x1, x2);

    function Fm$Parser$name1$(_idx$1, _code$2) {
        var self = Fm$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $395 = self.idx;
                var $396 = self.code;
                var $397 = self.err;
                var $398 = Parser$Reply$error$($395, $396, $397);
                var $394 = $398;
                break;
            case 'Parser.Reply.value':
                var $399 = self.idx;
                var $400 = self.code;
                var $401 = self.val;
                var self = Parser$many1$(Fm$Parser$letter, $399, $400);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $403 = self.idx;
                        var $404 = self.code;
                        var $405 = self.err;
                        var $406 = Parser$Reply$error$($403, $404, $405);
                        var $402 = $406;
                        break;
                    case 'Parser.Reply.value':
                        var $407 = self.idx;
                        var $408 = self.code;
                        var $409 = self.val;
                        var $410 = Parser$Reply$value$($407, $408, List$fold$($409, String$nil, String$cons));
                        var $402 = $410;
                        break;
                };
                var $394 = $402;
                break;
        };
        return $394;
    };
    const Fm$Parser$name1 = x0 => x1 => Fm$Parser$name1$(x0, x1);

    function Parser$until1$(_cond$2, _parser$3, _idx$4, _code$5) {
        var self = _parser$3(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $412 = self.idx;
                var $413 = self.code;
                var $414 = self.err;
                var $415 = Parser$Reply$error$($412, $413, $414);
                var $411 = $415;
                break;
            case 'Parser.Reply.value':
                var $416 = self.idx;
                var $417 = self.code;
                var $418 = self.val;
                var self = Parser$until$(_cond$2, _parser$3)($416)($417);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $420 = self.idx;
                        var $421 = self.code;
                        var $422 = self.err;
                        var $423 = Parser$Reply$error$($420, $421, $422);
                        var $419 = $423;
                        break;
                    case 'Parser.Reply.value':
                        var $424 = self.idx;
                        var $425 = self.code;
                        var $426 = self.val;
                        var $427 = Parser$Reply$value$($424, $425, List$cons$($418, $426));
                        var $419 = $427;
                        break;
                };
                var $411 = $419;
                break;
        };
        return $411;
    };
    const Parser$until1 = x0 => x1 => x2 => x3 => Parser$until1$(x0, x1, x2, x3);

    function Pair$(_A$1, _B$2) {
        var $428 = null;
        return $428;
    };
    const Pair = x0 => x1 => Pair$(x0, x1);

    function Parser$maybe$(_parse$2, _idx$3, _code$4) {
        var self = _parse$2(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $430 = self.idx;
                var $431 = self.code;
                var $432 = self.err;
                var $433 = Parser$Reply$value$(_idx$3, _code$4, Maybe$none);
                var $429 = $433;
                break;
            case 'Parser.Reply.value':
                var $434 = self.idx;
                var $435 = self.code;
                var $436 = self.val;
                var $437 = Parser$Reply$value$($434, $435, Maybe$some$($436));
                var $429 = $437;
                break;
        };
        return $429;
    };
    const Parser$maybe = x0 => x1 => x2 => Parser$maybe$(x0, x1, x2);

    function Fm$Parser$item$(_parser$2, _idx$3, _code$4) {
        var self = Fm$Parser$spaces(_idx$3)(_code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $439 = self.idx;
                var $440 = self.code;
                var $441 = self.err;
                var $442 = Parser$Reply$error$($439, $440, $441);
                var $438 = $442;
                break;
            case 'Parser.Reply.value':
                var $443 = self.idx;
                var $444 = self.code;
                var $445 = self.val;
                var self = _parser$2($443)($444);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $447 = self.idx;
                        var $448 = self.code;
                        var $449 = self.err;
                        var $450 = Parser$Reply$error$($447, $448, $449);
                        var $446 = $450;
                        break;
                    case 'Parser.Reply.value':
                        var $451 = self.idx;
                        var $452 = self.code;
                        var $453 = self.val;
                        var self = Parser$maybe$(Fm$Parser$text(","), $451, $452);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $455 = self.idx;
                                var $456 = self.code;
                                var $457 = self.err;
                                var $458 = Parser$Reply$error$($455, $456, $457);
                                var $454 = $458;
                                break;
                            case 'Parser.Reply.value':
                                var $459 = self.idx;
                                var $460 = self.code;
                                var $461 = self.val;
                                var $462 = Parser$Reply$value$($459, $460, $453);
                                var $454 = $462;
                                break;
                        };
                        var $446 = $454;
                        break;
                };
                var $438 = $446;
                break;
        };
        return $438;
    };
    const Fm$Parser$item = x0 => x1 => x2 => Fm$Parser$item$(x0, x1, x2);

    function Fm$Parser$name$(_idx$1, _code$2) {
        var self = Fm$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $464 = self.idx;
                var $465 = self.code;
                var $466 = self.err;
                var $467 = Parser$Reply$error$($464, $465, $466);
                var $463 = $467;
                break;
            case 'Parser.Reply.value':
                var $468 = self.idx;
                var $469 = self.code;
                var $470 = self.val;
                var self = Parser$many$(Fm$Parser$letter)($468)($469);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $472 = self.idx;
                        var $473 = self.code;
                        var $474 = self.err;
                        var $475 = Parser$Reply$error$($472, $473, $474);
                        var $471 = $475;
                        break;
                    case 'Parser.Reply.value':
                        var $476 = self.idx;
                        var $477 = self.code;
                        var $478 = self.val;
                        var $479 = Parser$Reply$value$($476, $477, List$fold$($478, String$nil, String$cons));
                        var $471 = $479;
                        break;
                };
                var $463 = $471;
                break;
        };
        return $463;
    };
    const Fm$Parser$name = x0 => x1 => Fm$Parser$name$(x0, x1);

    function Parser$get_code$(_idx$1, _code$2) {
        var $480 = Parser$Reply$value$(_idx$1, _code$2, _code$2);
        return $480;
    };
    const Parser$get_code = x0 => x1 => Parser$get_code$(x0, x1);

    function Parser$get_index$(_idx$1, _code$2) {
        var $481 = Parser$Reply$value$(_idx$1, _code$2, _idx$1);
        return $481;
    };
    const Parser$get_index = x0 => x1 => Parser$get_index$(x0, x1);

    function Fm$Parser$init$(_idx$1, _code$2) {
        var self = Fm$Parser$spaces(_idx$1)(_code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $483 = self.idx;
                var $484 = self.code;
                var $485 = self.err;
                var $486 = Parser$Reply$error$($483, $484, $485);
                var $482 = $486;
                break;
            case 'Parser.Reply.value':
                var $487 = self.idx;
                var $488 = self.code;
                var $489 = self.val;
                var self = Parser$get_index$($487, $488);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $491 = self.idx;
                        var $492 = self.code;
                        var $493 = self.err;
                        var $494 = Parser$Reply$error$($491, $492, $493);
                        var $490 = $494;
                        break;
                    case 'Parser.Reply.value':
                        var $495 = self.idx;
                        var $496 = self.code;
                        var $497 = self.val;
                        var $498 = Parser$Reply$value$($495, $496, $497);
                        var $490 = $498;
                        break;
                };
                var $482 = $490;
                break;
        };
        return $482;
    };
    const Fm$Parser$init = x0 => x1 => Fm$Parser$init$(x0, x1);

    function Fm$Origin$new$(_file$1, _from$2, _upto$3) {
        var $499 = ({
            _: 'Fm.Origin.new',
            'file': _file$1,
            'from': _from$2,
            'upto': _upto$3
        });
        return $499;
    };
    const Fm$Origin$new = x0 => x1 => x2 => Fm$Origin$new$(x0, x1, x2);

    function Fm$Parser$stop$(_from$1, _idx$2, _code$3) {
        var self = Parser$get_index$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $501 = self.idx;
                var $502 = self.code;
                var $503 = self.err;
                var $504 = Parser$Reply$error$($501, $502, $503);
                var $500 = $504;
                break;
            case 'Parser.Reply.value':
                var $505 = self.idx;
                var $506 = self.code;
                var $507 = self.val;
                var _orig$7 = Fm$Origin$new$("", _from$1, $507);
                var $508 = Parser$Reply$value$($505, $506, _orig$7);
                var $500 = $508;
                break;
        };
        return $500;
    };
    const Fm$Parser$stop = x0 => x1 => x2 => Fm$Parser$stop$(x0, x1, x2);

    function Fm$Term$ori$(_orig$1, _expr$2) {
        var $509 = ({
            _: 'Fm.Term.ori',
            'orig': _orig$1,
            'expr': _expr$2
        });
        return $509;
    };
    const Fm$Term$ori = x0 => x1 => Fm$Term$ori$(x0, x1);
    const Fm$Term$typ = ({
        _: 'Fm.Term.typ'
    });

    function Fm$Parser$type$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $511 = self.idx;
                var $512 = self.code;
                var $513 = self.err;
                var $514 = Parser$Reply$error$($511, $512, $513);
                var $510 = $514;
                break;
            case 'Parser.Reply.value':
                var $515 = self.idx;
                var $516 = self.code;
                var $517 = self.val;
                var self = Fm$Parser$text$("Type", $515, $516);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $519 = self.idx;
                        var $520 = self.code;
                        var $521 = self.err;
                        var $522 = Parser$Reply$error$($519, $520, $521);
                        var $518 = $522;
                        break;
                    case 'Parser.Reply.value':
                        var $523 = self.idx;
                        var $524 = self.code;
                        var $525 = self.val;
                        var self = Fm$Parser$stop$($517, $523, $524);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $527 = self.idx;
                                var $528 = self.code;
                                var $529 = self.err;
                                var $530 = Parser$Reply$error$($527, $528, $529);
                                var $526 = $530;
                                break;
                            case 'Parser.Reply.value':
                                var $531 = self.idx;
                                var $532 = self.code;
                                var $533 = self.val;
                                var $534 = Parser$Reply$value$($531, $532, Fm$Term$ori$($533, Fm$Term$typ));
                                var $526 = $534;
                                break;
                        };
                        var $518 = $526;
                        break;
                };
                var $510 = $518;
                break;
        };
        return $510;
    };
    const Fm$Parser$type = x0 => x1 => Fm$Parser$type$(x0, x1);

    function Fm$Term$all$(_eras$1, _self$2, _name$3, _xtyp$4, _body$5) {
        var $535 = ({
            _: 'Fm.Term.all',
            'eras': _eras$1,
            'self': _self$2,
            'name': _name$3,
            'xtyp': _xtyp$4,
            'body': _body$5
        });
        return $535;
    };
    const Fm$Term$all = x0 => x1 => x2 => x3 => x4 => Fm$Term$all$(x0, x1, x2, x3, x4);

    function Fm$Parser$forall$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $537 = self.idx;
                var $538 = self.code;
                var $539 = self.err;
                var $540 = Parser$Reply$error$($537, $538, $539);
                var $536 = $540;
                break;
            case 'Parser.Reply.value':
                var $541 = self.idx;
                var $542 = self.code;
                var $543 = self.val;
                var self = Fm$Parser$name$($541, $542);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $545 = self.idx;
                        var $546 = self.code;
                        var $547 = self.err;
                        var $548 = Parser$Reply$error$($545, $546, $547);
                        var $544 = $548;
                        break;
                    case 'Parser.Reply.value':
                        var $549 = self.idx;
                        var $550 = self.code;
                        var $551 = self.val;
                        var self = Fm$Parser$binder$($549, $550);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $553 = self.idx;
                                var $554 = self.code;
                                var $555 = self.err;
                                var $556 = Parser$Reply$error$($553, $554, $555);
                                var $552 = $556;
                                break;
                            case 'Parser.Reply.value':
                                var $557 = self.idx;
                                var $558 = self.code;
                                var $559 = self.val;
                                var self = Parser$maybe$(Fm$Parser$text("->"), $557, $558);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $561 = self.idx;
                                        var $562 = self.code;
                                        var $563 = self.err;
                                        var $564 = Parser$Reply$error$($561, $562, $563);
                                        var $560 = $564;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $565 = self.idx;
                                        var $566 = self.code;
                                        var $567 = self.val;
                                        var self = Fm$Parser$term$($565, $566);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $569 = self.idx;
                                                var $570 = self.code;
                                                var $571 = self.err;
                                                var $572 = Parser$Reply$error$($569, $570, $571);
                                                var $568 = $572;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $573 = self.idx;
                                                var $574 = self.code;
                                                var $575 = self.val;
                                                var _term$18 = List$fold$($559, $575, (_x$18 => _t$19 => {
                                                    var self = _x$18;
                                                    switch (self._) {
                                                        case 'Fm.Binder.new':
                                                            var $578 = self.eras;
                                                            var $579 = self.name;
                                                            var $580 = self.term;
                                                            var $581 = Fm$Term$all$($578, "", $579, $580, (_s$23 => _x$24 => {
                                                                var $582 = _t$19;
                                                                return $582;
                                                            }));
                                                            var $577 = $581;
                                                            break;
                                                    };
                                                    return $577;
                                                }));
                                                var self = Fm$Parser$stop$($543, $573, $574);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $583 = self.idx;
                                                        var $584 = self.code;
                                                        var $585 = self.err;
                                                        var $586 = Parser$Reply$error$($583, $584, $585);
                                                        var $576 = $586;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $587 = self.idx;
                                                        var $588 = self.code;
                                                        var $589 = self.val;
                                                        var $590 = Parser$Reply$value$($587, $588, (() => {
                                                            var self = _term$18;
                                                            switch (self._) {
                                                                case 'Fm.Term.var':
                                                                    var $591 = self.name;
                                                                    var $592 = self.indx;
                                                                    var $593 = _term$18;
                                                                    return $593;
                                                                case 'Fm.Term.ref':
                                                                    var $594 = self.name;
                                                                    var $595 = _term$18;
                                                                    return $595;
                                                                case 'Fm.Term.typ':
                                                                    var $596 = _term$18;
                                                                    return $596;
                                                                case 'Fm.Term.all':
                                                                    var $597 = self.eras;
                                                                    var $598 = self.self;
                                                                    var $599 = self.name;
                                                                    var $600 = self.xtyp;
                                                                    var $601 = self.body;
                                                                    var $602 = Fm$Term$ori$($589, Fm$Term$all$($597, $551, $599, $600, $601));
                                                                    return $602;
                                                                case 'Fm.Term.lam':
                                                                    var $603 = self.name;
                                                                    var $604 = self.body;
                                                                    var $605 = _term$18;
                                                                    return $605;
                                                                case 'Fm.Term.app':
                                                                    var $606 = self.func;
                                                                    var $607 = self.argm;
                                                                    var $608 = _term$18;
                                                                    return $608;
                                                                case 'Fm.Term.let':
                                                                    var $609 = self.name;
                                                                    var $610 = self.expr;
                                                                    var $611 = self.body;
                                                                    var $612 = _term$18;
                                                                    return $612;
                                                                case 'Fm.Term.def':
                                                                    var $613 = self.name;
                                                                    var $614 = self.expr;
                                                                    var $615 = self.body;
                                                                    var $616 = _term$18;
                                                                    return $616;
                                                                case 'Fm.Term.ann':
                                                                    var $617 = self.done;
                                                                    var $618 = self.term;
                                                                    var $619 = self.type;
                                                                    var $620 = _term$18;
                                                                    return $620;
                                                                case 'Fm.Term.gol':
                                                                    var $621 = self.name;
                                                                    var $622 = self.dref;
                                                                    var $623 = self.verb;
                                                                    var $624 = _term$18;
                                                                    return $624;
                                                                case 'Fm.Term.hol':
                                                                    var $625 = self.path;
                                                                    var $626 = _term$18;
                                                                    return $626;
                                                                case 'Fm.Term.nat':
                                                                    var $627 = self.natx;
                                                                    var $628 = _term$18;
                                                                    return $628;
                                                                case 'Fm.Term.chr':
                                                                    var $629 = self.chrx;
                                                                    var $630 = _term$18;
                                                                    return $630;
                                                                case 'Fm.Term.str':
                                                                    var $631 = self.strx;
                                                                    var $632 = _term$18;
                                                                    return $632;
                                                                case 'Fm.Term.cse':
                                                                    var $633 = self.path;
                                                                    var $634 = self.expr;
                                                                    var $635 = self.name;
                                                                    var $636 = self.with;
                                                                    var $637 = self.cses;
                                                                    var $638 = self.moti;
                                                                    var $639 = _term$18;
                                                                    return $639;
                                                                case 'Fm.Term.ori':
                                                                    var $640 = self.orig;
                                                                    var $641 = self.expr;
                                                                    var $642 = _term$18;
                                                                    return $642;
                                                            };
                                                        })());
                                                        var $576 = $590;
                                                        break;
                                                };
                                                var $568 = $576;
                                                break;
                                        };
                                        var $560 = $568;
                                        break;
                                };
                                var $552 = $560;
                                break;
                        };
                        var $544 = $552;
                        break;
                };
                var $536 = $544;
                break;
        };
        return $536;
    };
    const Fm$Parser$forall = x0 => x1 => Fm$Parser$forall$(x0, x1);

    function Fm$Term$lam$(_name$1, _body$2) {
        var $643 = ({
            _: 'Fm.Term.lam',
            'name': _name$1,
            'body': _body$2
        });
        return $643;
    };
    const Fm$Term$lam = x0 => x1 => Fm$Term$lam$(x0, x1);

    function Fm$Parser$make_lambda$(_names$1, _body$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.nil':
                var $645 = _body$2;
                var $644 = $645;
                break;
            case 'List.cons':
                var $646 = self.head;
                var $647 = self.tail;
                var $648 = Fm$Term$lam$($646, (_x$5 => {
                    var $649 = Fm$Parser$make_lambda$($647, _body$2);
                    return $649;
                }));
                var $644 = $648;
                break;
        };
        return $644;
    };
    const Fm$Parser$make_lambda = x0 => x1 => Fm$Parser$make_lambda$(x0, x1);

    function Fm$Parser$lambda$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $651 = self.idx;
                var $652 = self.code;
                var $653 = self.err;
                var $654 = Parser$Reply$error$($651, $652, $653);
                var $650 = $654;
                break;
            case 'Parser.Reply.value':
                var $655 = self.idx;
                var $656 = self.code;
                var $657 = self.val;
                var self = Fm$Parser$text$("(", $655, $656);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $659 = self.idx;
                        var $660 = self.code;
                        var $661 = self.err;
                        var $662 = Parser$Reply$error$($659, $660, $661);
                        var $658 = $662;
                        break;
                    case 'Parser.Reply.value':
                        var $663 = self.idx;
                        var $664 = self.code;
                        var $665 = self.val;
                        var self = Parser$until1$(Fm$Parser$text(")"), Fm$Parser$item(Fm$Parser$name1), $663, $664);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $667 = self.idx;
                                var $668 = self.code;
                                var $669 = self.err;
                                var $670 = Parser$Reply$error$($667, $668, $669);
                                var $666 = $670;
                                break;
                            case 'Parser.Reply.value':
                                var $671 = self.idx;
                                var $672 = self.code;
                                var $673 = self.val;
                                var self = Fm$Parser$term$($671, $672);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $675 = self.idx;
                                        var $676 = self.code;
                                        var $677 = self.err;
                                        var $678 = Parser$Reply$error$($675, $676, $677);
                                        var $674 = $678;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $679 = self.idx;
                                        var $680 = self.code;
                                        var $681 = self.val;
                                        var self = Fm$Parser$stop$($657, $679, $680);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $683 = self.idx;
                                                var $684 = self.code;
                                                var $685 = self.err;
                                                var $686 = Parser$Reply$error$($683, $684, $685);
                                                var $682 = $686;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $687 = self.idx;
                                                var $688 = self.code;
                                                var $689 = self.val;
                                                var _expr$18 = Fm$Parser$make_lambda$($673, $681);
                                                var $690 = Parser$Reply$value$($687, $688, Fm$Term$ori$($689, _expr$18));
                                                var $682 = $690;
                                                break;
                                        };
                                        var $674 = $682;
                                        break;
                                };
                                var $666 = $674;
                                break;
                        };
                        var $658 = $666;
                        break;
                };
                var $650 = $658;
                break;
        };
        return $650;
    };
    const Fm$Parser$lambda = x0 => x1 => Fm$Parser$lambda$(x0, x1);

    function Fm$Parser$lambda$erased$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $692 = self.idx;
                var $693 = self.code;
                var $694 = self.err;
                var $695 = Parser$Reply$error$($692, $693, $694);
                var $691 = $695;
                break;
            case 'Parser.Reply.value':
                var $696 = self.idx;
                var $697 = self.code;
                var $698 = self.val;
                var self = Fm$Parser$text$("<", $696, $697);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $700 = self.idx;
                        var $701 = self.code;
                        var $702 = self.err;
                        var $703 = Parser$Reply$error$($700, $701, $702);
                        var $699 = $703;
                        break;
                    case 'Parser.Reply.value':
                        var $704 = self.idx;
                        var $705 = self.code;
                        var $706 = self.val;
                        var self = Parser$until1$(Fm$Parser$text(">"), Fm$Parser$item(Fm$Parser$name1), $704, $705);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $708 = self.idx;
                                var $709 = self.code;
                                var $710 = self.err;
                                var $711 = Parser$Reply$error$($708, $709, $710);
                                var $707 = $711;
                                break;
                            case 'Parser.Reply.value':
                                var $712 = self.idx;
                                var $713 = self.code;
                                var $714 = self.val;
                                var self = Fm$Parser$term$($712, $713);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $716 = self.idx;
                                        var $717 = self.code;
                                        var $718 = self.err;
                                        var $719 = Parser$Reply$error$($716, $717, $718);
                                        var $715 = $719;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $720 = self.idx;
                                        var $721 = self.code;
                                        var $722 = self.val;
                                        var self = Fm$Parser$stop$($698, $720, $721);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $724 = self.idx;
                                                var $725 = self.code;
                                                var $726 = self.err;
                                                var $727 = Parser$Reply$error$($724, $725, $726);
                                                var $723 = $727;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $728 = self.idx;
                                                var $729 = self.code;
                                                var $730 = self.val;
                                                var _expr$18 = Fm$Parser$make_lambda$($714, $722);
                                                var $731 = Parser$Reply$value$($728, $729, Fm$Term$ori$($730, _expr$18));
                                                var $723 = $731;
                                                break;
                                        };
                                        var $715 = $723;
                                        break;
                                };
                                var $707 = $715;
                                break;
                        };
                        var $699 = $707;
                        break;
                };
                var $691 = $699;
                break;
        };
        return $691;
    };
    const Fm$Parser$lambda$erased = x0 => x1 => Fm$Parser$lambda$erased$(x0, x1);

    function Fm$Parser$lambda$nameless$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $733 = self.idx;
                var $734 = self.code;
                var $735 = self.err;
                var $736 = Parser$Reply$error$($733, $734, $735);
                var $732 = $736;
                break;
            case 'Parser.Reply.value':
                var $737 = self.idx;
                var $738 = self.code;
                var $739 = self.val;
                var self = Fm$Parser$text$("()", $737, $738);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $741 = self.idx;
                        var $742 = self.code;
                        var $743 = self.err;
                        var $744 = Parser$Reply$error$($741, $742, $743);
                        var $740 = $744;
                        break;
                    case 'Parser.Reply.value':
                        var $745 = self.idx;
                        var $746 = self.code;
                        var $747 = self.val;
                        var self = Fm$Parser$term$($745, $746);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $749 = self.idx;
                                var $750 = self.code;
                                var $751 = self.err;
                                var $752 = Parser$Reply$error$($749, $750, $751);
                                var $748 = $752;
                                break;
                            case 'Parser.Reply.value':
                                var $753 = self.idx;
                                var $754 = self.code;
                                var $755 = self.val;
                                var self = Fm$Parser$stop$($739, $753, $754);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $757 = self.idx;
                                        var $758 = self.code;
                                        var $759 = self.err;
                                        var $760 = Parser$Reply$error$($757, $758, $759);
                                        var $756 = $760;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $761 = self.idx;
                                        var $762 = self.code;
                                        var $763 = self.val;
                                        var _expr$15 = Fm$Term$lam$("", (_x$15 => {
                                            var $765 = $755;
                                            return $765;
                                        }));
                                        var $764 = Parser$Reply$value$($761, $762, Fm$Term$ori$($763, _expr$15));
                                        var $756 = $764;
                                        break;
                                };
                                var $748 = $756;
                                break;
                        };
                        var $740 = $748;
                        break;
                };
                var $732 = $740;
                break;
        };
        return $732;
    };
    const Fm$Parser$lambda$nameless = x0 => x1 => Fm$Parser$lambda$nameless$(x0, x1);

    function Fm$Parser$parenthesis$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("(", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $767 = self.idx;
                var $768 = self.code;
                var $769 = self.err;
                var $770 = Parser$Reply$error$($767, $768, $769);
                var $766 = $770;
                break;
            case 'Parser.Reply.value':
                var $771 = self.idx;
                var $772 = self.code;
                var $773 = self.val;
                var self = Fm$Parser$term$($771, $772);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $775 = self.idx;
                        var $776 = self.code;
                        var $777 = self.err;
                        var $778 = Parser$Reply$error$($775, $776, $777);
                        var $774 = $778;
                        break;
                    case 'Parser.Reply.value':
                        var $779 = self.idx;
                        var $780 = self.code;
                        var $781 = self.val;
                        var self = Fm$Parser$text$(")", $779, $780);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $783 = self.idx;
                                var $784 = self.code;
                                var $785 = self.err;
                                var $786 = Parser$Reply$error$($783, $784, $785);
                                var $782 = $786;
                                break;
                            case 'Parser.Reply.value':
                                var $787 = self.idx;
                                var $788 = self.code;
                                var $789 = self.val;
                                var $790 = Parser$Reply$value$($787, $788, $781);
                                var $782 = $790;
                                break;
                        };
                        var $774 = $782;
                        break;
                };
                var $766 = $774;
                break;
        };
        return $766;
    };
    const Fm$Parser$parenthesis = x0 => x1 => Fm$Parser$parenthesis$(x0, x1);

    function Fm$Term$ref$(_name$1) {
        var $791 = ({
            _: 'Fm.Term.ref',
            'name': _name$1
        });
        return $791;
    };
    const Fm$Term$ref = x0 => Fm$Term$ref$(x0);

    function Fm$Term$app$(_func$1, _argm$2) {
        var $792 = ({
            _: 'Fm.Term.app',
            'func': _func$1,
            'argm': _argm$2
        });
        return $792;
    };
    const Fm$Term$app = x0 => x1 => Fm$Term$app$(x0, x1);

    function Fm$Term$hol$(_path$1) {
        var $793 = ({
            _: 'Fm.Term.hol',
            'path': _path$1
        });
        return $793;
    };
    const Fm$Term$hol = x0 => Fm$Term$hol$(x0);

    function Fm$Term$let$(_name$1, _expr$2, _body$3) {
        var $794 = ({
            _: 'Fm.Term.let',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $794;
    };
    const Fm$Term$let = x0 => x1 => x2 => Fm$Term$let$(x0, x1, x2);

    function Fm$Parser$letforrange$u32$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $796 = self.idx;
                var $797 = self.code;
                var $798 = self.err;
                var $799 = Parser$Reply$error$($796, $797, $798);
                var $795 = $799;
                break;
            case 'Parser.Reply.value':
                var $800 = self.idx;
                var $801 = self.code;
                var $802 = self.val;
                var self = Fm$Parser$text$("let ", $800, $801);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $804 = self.idx;
                        var $805 = self.code;
                        var $806 = self.err;
                        var $807 = Parser$Reply$error$($804, $805, $806);
                        var $803 = $807;
                        break;
                    case 'Parser.Reply.value':
                        var $808 = self.idx;
                        var $809 = self.code;
                        var $810 = self.val;
                        var self = Fm$Parser$name1$($808, $809);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $812 = self.idx;
                                var $813 = self.code;
                                var $814 = self.err;
                                var $815 = Parser$Reply$error$($812, $813, $814);
                                var $811 = $815;
                                break;
                            case 'Parser.Reply.value':
                                var $816 = self.idx;
                                var $817 = self.code;
                                var $818 = self.val;
                                var self = Fm$Parser$text$("=", $816, $817);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $820 = self.idx;
                                        var $821 = self.code;
                                        var $822 = self.err;
                                        var $823 = Parser$Reply$error$($820, $821, $822);
                                        var $819 = $823;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $824 = self.idx;
                                        var $825 = self.code;
                                        var $826 = self.val;
                                        var self = Fm$Parser$text$("for ", $824, $825);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $828 = self.idx;
                                                var $829 = self.code;
                                                var $830 = self.err;
                                                var $831 = Parser$Reply$error$($828, $829, $830);
                                                var $827 = $831;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $832 = self.idx;
                                                var $833 = self.code;
                                                var $834 = self.val;
                                                var self = Fm$Parser$name1$($832, $833);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $836 = self.idx;
                                                        var $837 = self.code;
                                                        var $838 = self.err;
                                                        var $839 = Parser$Reply$error$($836, $837, $838);
                                                        var $835 = $839;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $840 = self.idx;
                                                        var $841 = self.code;
                                                        var $842 = self.val;
                                                        var self = Fm$Parser$text$(":", $840, $841);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $844 = self.idx;
                                                                var $845 = self.code;
                                                                var $846 = self.err;
                                                                var $847 = Parser$Reply$error$($844, $845, $846);
                                                                var $843 = $847;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $848 = self.idx;
                                                                var $849 = self.code;
                                                                var $850 = self.val;
                                                                var self = Fm$Parser$text$("U32", $848, $849);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $852 = self.idx;
                                                                        var $853 = self.code;
                                                                        var $854 = self.err;
                                                                        var $855 = Parser$Reply$error$($852, $853, $854);
                                                                        var $851 = $855;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $856 = self.idx;
                                                                        var $857 = self.code;
                                                                        var $858 = self.val;
                                                                        var self = Fm$Parser$text$("=", $856, $857);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $860 = self.idx;
                                                                                var $861 = self.code;
                                                                                var $862 = self.err;
                                                                                var $863 = Parser$Reply$error$($860, $861, $862);
                                                                                var $859 = $863;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $864 = self.idx;
                                                                                var $865 = self.code;
                                                                                var $866 = self.val;
                                                                                var self = Fm$Parser$term$($864, $865);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $868 = self.idx;
                                                                                        var $869 = self.code;
                                                                                        var $870 = self.err;
                                                                                        var $871 = Parser$Reply$error$($868, $869, $870);
                                                                                        var $867 = $871;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $872 = self.idx;
                                                                                        var $873 = self.code;
                                                                                        var $874 = self.val;
                                                                                        var self = Fm$Parser$text$("..", $872, $873);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $876 = self.idx;
                                                                                                var $877 = self.code;
                                                                                                var $878 = self.err;
                                                                                                var $879 = Parser$Reply$error$($876, $877, $878);
                                                                                                var $875 = $879;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $880 = self.idx;
                                                                                                var $881 = self.code;
                                                                                                var $882 = self.val;
                                                                                                var self = Fm$Parser$term$($880, $881);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $884 = self.idx;
                                                                                                        var $885 = self.code;
                                                                                                        var $886 = self.err;
                                                                                                        var $887 = Parser$Reply$error$($884, $885, $886);
                                                                                                        var $883 = $887;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $888 = self.idx;
                                                                                                        var $889 = self.code;
                                                                                                        var $890 = self.val;
                                                                                                        var self = Fm$Parser$text$(":", $888, $889);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $892 = self.idx;
                                                                                                                var $893 = self.code;
                                                                                                                var $894 = self.err;
                                                                                                                var $895 = Parser$Reply$error$($892, $893, $894);
                                                                                                                var $891 = $895;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $896 = self.idx;
                                                                                                                var $897 = self.code;
                                                                                                                var $898 = self.val;
                                                                                                                var self = Fm$Parser$term$($896, $897);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $900 = self.idx;
                                                                                                                        var $901 = self.code;
                                                                                                                        var $902 = self.err;
                                                                                                                        var $903 = Parser$Reply$error$($900, $901, $902);
                                                                                                                        var $899 = $903;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $904 = self.idx;
                                                                                                                        var $905 = self.code;
                                                                                                                        var $906 = self.val;
                                                                                                                        var self = Parser$maybe$(Fm$Parser$text(";"), $904, $905);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $908 = self.idx;
                                                                                                                                var $909 = self.code;
                                                                                                                                var $910 = self.err;
                                                                                                                                var $911 = Parser$Reply$error$($908, $909, $910);
                                                                                                                                var $907 = $911;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $912 = self.idx;
                                                                                                                                var $913 = self.code;
                                                                                                                                var $914 = self.val;
                                                                                                                                var self = Fm$Parser$term$($912, $913);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $916 = self.idx;
                                                                                                                                        var $917 = self.code;
                                                                                                                                        var $918 = self.err;
                                                                                                                                        var $919 = Parser$Reply$error$($916, $917, $918);
                                                                                                                                        var $915 = $919;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $920 = self.idx;
                                                                                                                                        var $921 = self.code;
                                                                                                                                        var $922 = self.val;
                                                                                                                                        var self = Fm$Parser$stop$($802, $920, $921);
                                                                                                                                        switch (self._) {
                                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                                var $924 = self.idx;
                                                                                                                                                var $925 = self.code;
                                                                                                                                                var $926 = self.err;
                                                                                                                                                var $927 = Parser$Reply$error$($924, $925, $926);
                                                                                                                                                var $923 = $927;
                                                                                                                                                break;
                                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                                var $928 = self.idx;
                                                                                                                                                var $929 = self.code;
                                                                                                                                                var $930 = self.val;
                                                                                                                                                var _term$54 = Fm$Term$ref$("U32.for");
                                                                                                                                                var _term$55 = Fm$Term$app$(_term$54, Fm$Term$hol$(Bits$e));
                                                                                                                                                var _term$56 = Fm$Term$app$(_term$55, Fm$Term$ref$($818));
                                                                                                                                                var _term$57 = Fm$Term$app$(_term$56, $874);
                                                                                                                                                var _term$58 = Fm$Term$app$(_term$57, $890);
                                                                                                                                                var _lamb$59 = Fm$Term$lam$($842, (_e$59 => {
                                                                                                                                                    var $932 = Fm$Term$lam$($818, (_s$60 => {
                                                                                                                                                        var $933 = $906;
                                                                                                                                                        return $933;
                                                                                                                                                    }));
                                                                                                                                                    return $932;
                                                                                                                                                }));
                                                                                                                                                var _term$60 = Fm$Term$app$(_term$58, _lamb$59);
                                                                                                                                                var _term$61 = Fm$Term$let$($818, _term$60, (_x$61 => {
                                                                                                                                                    var $934 = $922;
                                                                                                                                                    return $934;
                                                                                                                                                }));
                                                                                                                                                var $931 = Parser$Reply$value$($928, $929, Fm$Term$ori$($930, _term$61));
                                                                                                                                                var $923 = $931;
                                                                                                                                                break;
                                                                                                                                        };
                                                                                                                                        var $915 = $923;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $907 = $915;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $899 = $907;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $891 = $899;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $883 = $891;
                                                                                                        break;
                                                                                                };
                                                                                                var $875 = $883;
                                                                                                break;
                                                                                        };
                                                                                        var $867 = $875;
                                                                                        break;
                                                                                };
                                                                                var $859 = $867;
                                                                                break;
                                                                        };
                                                                        var $851 = $859;
                                                                        break;
                                                                };
                                                                var $843 = $851;
                                                                break;
                                                        };
                                                        var $835 = $843;
                                                        break;
                                                };
                                                var $827 = $835;
                                                break;
                                        };
                                        var $819 = $827;
                                        break;
                                };
                                var $811 = $819;
                                break;
                        };
                        var $803 = $811;
                        break;
                };
                var $795 = $803;
                break;
        };
        return $795;
    };
    const Fm$Parser$letforrange$u32 = x0 => x1 => Fm$Parser$letforrange$u32$(x0, x1);

    function Fm$Parser$letforin$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $936 = self.idx;
                var $937 = self.code;
                var $938 = self.err;
                var $939 = Parser$Reply$error$($936, $937, $938);
                var $935 = $939;
                break;
            case 'Parser.Reply.value':
                var $940 = self.idx;
                var $941 = self.code;
                var $942 = self.val;
                var self = Fm$Parser$text$("let ", $940, $941);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $944 = self.idx;
                        var $945 = self.code;
                        var $946 = self.err;
                        var $947 = Parser$Reply$error$($944, $945, $946);
                        var $943 = $947;
                        break;
                    case 'Parser.Reply.value':
                        var $948 = self.idx;
                        var $949 = self.code;
                        var $950 = self.val;
                        var self = Fm$Parser$name1$($948, $949);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $952 = self.idx;
                                var $953 = self.code;
                                var $954 = self.err;
                                var $955 = Parser$Reply$error$($952, $953, $954);
                                var $951 = $955;
                                break;
                            case 'Parser.Reply.value':
                                var $956 = self.idx;
                                var $957 = self.code;
                                var $958 = self.val;
                                var self = Fm$Parser$text$("=", $956, $957);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $960 = self.idx;
                                        var $961 = self.code;
                                        var $962 = self.err;
                                        var $963 = Parser$Reply$error$($960, $961, $962);
                                        var $959 = $963;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $964 = self.idx;
                                        var $965 = self.code;
                                        var $966 = self.val;
                                        var self = Fm$Parser$text$("for ", $964, $965);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $968 = self.idx;
                                                var $969 = self.code;
                                                var $970 = self.err;
                                                var $971 = Parser$Reply$error$($968, $969, $970);
                                                var $967 = $971;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $972 = self.idx;
                                                var $973 = self.code;
                                                var $974 = self.val;
                                                var self = Fm$Parser$name1$($972, $973);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $976 = self.idx;
                                                        var $977 = self.code;
                                                        var $978 = self.err;
                                                        var $979 = Parser$Reply$error$($976, $977, $978);
                                                        var $975 = $979;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $980 = self.idx;
                                                        var $981 = self.code;
                                                        var $982 = self.val;
                                                        var self = Fm$Parser$text$("in", $980, $981);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $984 = self.idx;
                                                                var $985 = self.code;
                                                                var $986 = self.err;
                                                                var $987 = Parser$Reply$error$($984, $985, $986);
                                                                var $983 = $987;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $988 = self.idx;
                                                                var $989 = self.code;
                                                                var $990 = self.val;
                                                                var self = Fm$Parser$term$($988, $989);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $992 = self.idx;
                                                                        var $993 = self.code;
                                                                        var $994 = self.err;
                                                                        var $995 = Parser$Reply$error$($992, $993, $994);
                                                                        var $991 = $995;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $996 = self.idx;
                                                                        var $997 = self.code;
                                                                        var $998 = self.val;
                                                                        var self = Fm$Parser$text$(":", $996, $997);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1000 = self.idx;
                                                                                var $1001 = self.code;
                                                                                var $1002 = self.err;
                                                                                var $1003 = Parser$Reply$error$($1000, $1001, $1002);
                                                                                var $999 = $1003;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1004 = self.idx;
                                                                                var $1005 = self.code;
                                                                                var $1006 = self.val;
                                                                                var self = Fm$Parser$term$($1004, $1005);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1008 = self.idx;
                                                                                        var $1009 = self.code;
                                                                                        var $1010 = self.err;
                                                                                        var $1011 = Parser$Reply$error$($1008, $1009, $1010);
                                                                                        var $1007 = $1011;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1012 = self.idx;
                                                                                        var $1013 = self.code;
                                                                                        var $1014 = self.val;
                                                                                        var self = Parser$maybe$(Fm$Parser$text(";"), $1012, $1013);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1016 = self.idx;
                                                                                                var $1017 = self.code;
                                                                                                var $1018 = self.err;
                                                                                                var $1019 = Parser$Reply$error$($1016, $1017, $1018);
                                                                                                var $1015 = $1019;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1020 = self.idx;
                                                                                                var $1021 = self.code;
                                                                                                var $1022 = self.val;
                                                                                                var self = Fm$Parser$term$($1020, $1021);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1024 = self.idx;
                                                                                                        var $1025 = self.code;
                                                                                                        var $1026 = self.err;
                                                                                                        var $1027 = Parser$Reply$error$($1024, $1025, $1026);
                                                                                                        var $1023 = $1027;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1028 = self.idx;
                                                                                                        var $1029 = self.code;
                                                                                                        var $1030 = self.val;
                                                                                                        var self = Fm$Parser$stop$($942, $1028, $1029);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1032 = self.idx;
                                                                                                                var $1033 = self.code;
                                                                                                                var $1034 = self.err;
                                                                                                                var $1035 = Parser$Reply$error$($1032, $1033, $1034);
                                                                                                                var $1031 = $1035;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1036 = self.idx;
                                                                                                                var $1037 = self.code;
                                                                                                                var $1038 = self.val;
                                                                                                                var _term$42 = Fm$Term$ref$("List.for");
                                                                                                                var _term$43 = Fm$Term$app$(_term$42, Fm$Term$hol$(Bits$e));
                                                                                                                var _term$44 = Fm$Term$app$(_term$43, $998);
                                                                                                                var _term$45 = Fm$Term$app$(_term$44, Fm$Term$hol$(Bits$e));
                                                                                                                var _term$46 = Fm$Term$app$(_term$45, Fm$Term$ref$($958));
                                                                                                                var _lamb$47 = Fm$Term$lam$($982, (_i$47 => {
                                                                                                                    var $1040 = Fm$Term$lam$($958, (_x$48 => {
                                                                                                                        var $1041 = $1014;
                                                                                                                        return $1041;
                                                                                                                    }));
                                                                                                                    return $1040;
                                                                                                                }));
                                                                                                                var _term$48 = Fm$Term$app$(_term$46, _lamb$47);
                                                                                                                var _term$49 = Fm$Term$let$($958, _term$48, (_x$49 => {
                                                                                                                    var $1042 = $1030;
                                                                                                                    return $1042;
                                                                                                                }));
                                                                                                                var $1039 = Parser$Reply$value$($1036, $1037, Fm$Term$ori$($1038, _term$49));
                                                                                                                var $1031 = $1039;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1023 = $1031;
                                                                                                        break;
                                                                                                };
                                                                                                var $1015 = $1023;
                                                                                                break;
                                                                                        };
                                                                                        var $1007 = $1015;
                                                                                        break;
                                                                                };
                                                                                var $999 = $1007;
                                                                                break;
                                                                        };
                                                                        var $991 = $999;
                                                                        break;
                                                                };
                                                                var $983 = $991;
                                                                break;
                                                        };
                                                        var $975 = $983;
                                                        break;
                                                };
                                                var $967 = $975;
                                                break;
                                        };
                                        var $959 = $967;
                                        break;
                                };
                                var $951 = $959;
                                break;
                        };
                        var $943 = $951;
                        break;
                };
                var $935 = $943;
                break;
        };
        return $935;
    };
    const Fm$Parser$letforin = x0 => x1 => Fm$Parser$letforin$(x0, x1);

    function Fm$Parser$let$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1044 = self.idx;
                var $1045 = self.code;
                var $1046 = self.err;
                var $1047 = Parser$Reply$error$($1044, $1045, $1046);
                var $1043 = $1047;
                break;
            case 'Parser.Reply.value':
                var $1048 = self.idx;
                var $1049 = self.code;
                var $1050 = self.val;
                var self = Fm$Parser$text$("let ", $1048, $1049);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1052 = self.idx;
                        var $1053 = self.code;
                        var $1054 = self.err;
                        var $1055 = Parser$Reply$error$($1052, $1053, $1054);
                        var $1051 = $1055;
                        break;
                    case 'Parser.Reply.value':
                        var $1056 = self.idx;
                        var $1057 = self.code;
                        var $1058 = self.val;
                        var self = Fm$Parser$name$($1056, $1057);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1060 = self.idx;
                                var $1061 = self.code;
                                var $1062 = self.err;
                                var $1063 = Parser$Reply$error$($1060, $1061, $1062);
                                var $1059 = $1063;
                                break;
                            case 'Parser.Reply.value':
                                var $1064 = self.idx;
                                var $1065 = self.code;
                                var $1066 = self.val;
                                var self = Fm$Parser$text$("=", $1064, $1065);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1068 = self.idx;
                                        var $1069 = self.code;
                                        var $1070 = self.err;
                                        var $1071 = Parser$Reply$error$($1068, $1069, $1070);
                                        var $1067 = $1071;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1072 = self.idx;
                                        var $1073 = self.code;
                                        var $1074 = self.val;
                                        var self = Fm$Parser$term$($1072, $1073);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1076 = self.idx;
                                                var $1077 = self.code;
                                                var $1078 = self.err;
                                                var $1079 = Parser$Reply$error$($1076, $1077, $1078);
                                                var $1075 = $1079;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1080 = self.idx;
                                                var $1081 = self.code;
                                                var $1082 = self.val;
                                                var self = Parser$maybe$(Fm$Parser$text(";"), $1080, $1081);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1084 = self.idx;
                                                        var $1085 = self.code;
                                                        var $1086 = self.err;
                                                        var $1087 = Parser$Reply$error$($1084, $1085, $1086);
                                                        var $1083 = $1087;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1088 = self.idx;
                                                        var $1089 = self.code;
                                                        var $1090 = self.val;
                                                        var self = Fm$Parser$term$($1088, $1089);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1092 = self.idx;
                                                                var $1093 = self.code;
                                                                var $1094 = self.err;
                                                                var $1095 = Parser$Reply$error$($1092, $1093, $1094);
                                                                var $1091 = $1095;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1096 = self.idx;
                                                                var $1097 = self.code;
                                                                var $1098 = self.val;
                                                                var self = Fm$Parser$stop$($1050, $1096, $1097);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1100 = self.idx;
                                                                        var $1101 = self.code;
                                                                        var $1102 = self.err;
                                                                        var $1103 = Parser$Reply$error$($1100, $1101, $1102);
                                                                        var $1099 = $1103;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1104 = self.idx;
                                                                        var $1105 = self.code;
                                                                        var $1106 = self.val;
                                                                        var $1107 = Parser$Reply$value$($1104, $1105, Fm$Term$ori$($1106, Fm$Term$let$($1066, $1082, (_x$27 => {
                                                                            var $1108 = $1098;
                                                                            return $1108;
                                                                        }))));
                                                                        var $1099 = $1107;
                                                                        break;
                                                                };
                                                                var $1091 = $1099;
                                                                break;
                                                        };
                                                        var $1083 = $1091;
                                                        break;
                                                };
                                                var $1075 = $1083;
                                                break;
                                        };
                                        var $1067 = $1075;
                                        break;
                                };
                                var $1059 = $1067;
                                break;
                        };
                        var $1051 = $1059;
                        break;
                };
                var $1043 = $1051;
                break;
        };
        return $1043;
    };
    const Fm$Parser$let = x0 => x1 => Fm$Parser$let$(x0, x1);

    function Fm$Parser$get$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1110 = self.idx;
                var $1111 = self.code;
                var $1112 = self.err;
                var $1113 = Parser$Reply$error$($1110, $1111, $1112);
                var $1109 = $1113;
                break;
            case 'Parser.Reply.value':
                var $1114 = self.idx;
                var $1115 = self.code;
                var $1116 = self.val;
                var self = Fm$Parser$text$("let ", $1114, $1115);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1118 = self.idx;
                        var $1119 = self.code;
                        var $1120 = self.err;
                        var $1121 = Parser$Reply$error$($1118, $1119, $1120);
                        var $1117 = $1121;
                        break;
                    case 'Parser.Reply.value':
                        var $1122 = self.idx;
                        var $1123 = self.code;
                        var $1124 = self.val;
                        var self = Fm$Parser$text$("{", $1122, $1123);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1126 = self.idx;
                                var $1127 = self.code;
                                var $1128 = self.err;
                                var $1129 = Parser$Reply$error$($1126, $1127, $1128);
                                var $1125 = $1129;
                                break;
                            case 'Parser.Reply.value':
                                var $1130 = self.idx;
                                var $1131 = self.code;
                                var $1132 = self.val;
                                var self = Fm$Parser$name$($1130, $1131);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1134 = self.idx;
                                        var $1135 = self.code;
                                        var $1136 = self.err;
                                        var $1137 = Parser$Reply$error$($1134, $1135, $1136);
                                        var $1133 = $1137;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1138 = self.idx;
                                        var $1139 = self.code;
                                        var $1140 = self.val;
                                        var self = Fm$Parser$text$(",", $1138, $1139);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1142 = self.idx;
                                                var $1143 = self.code;
                                                var $1144 = self.err;
                                                var $1145 = Parser$Reply$error$($1142, $1143, $1144);
                                                var $1141 = $1145;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1146 = self.idx;
                                                var $1147 = self.code;
                                                var $1148 = self.val;
                                                var self = Fm$Parser$name$($1146, $1147);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1150 = self.idx;
                                                        var $1151 = self.code;
                                                        var $1152 = self.err;
                                                        var $1153 = Parser$Reply$error$($1150, $1151, $1152);
                                                        var $1149 = $1153;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1154 = self.idx;
                                                        var $1155 = self.code;
                                                        var $1156 = self.val;
                                                        var self = Fm$Parser$text$("}", $1154, $1155);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1158 = self.idx;
                                                                var $1159 = self.code;
                                                                var $1160 = self.err;
                                                                var $1161 = Parser$Reply$error$($1158, $1159, $1160);
                                                                var $1157 = $1161;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1162 = self.idx;
                                                                var $1163 = self.code;
                                                                var $1164 = self.val;
                                                                var self = Fm$Parser$text$("=", $1162, $1163);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1166 = self.idx;
                                                                        var $1167 = self.code;
                                                                        var $1168 = self.err;
                                                                        var $1169 = Parser$Reply$error$($1166, $1167, $1168);
                                                                        var $1165 = $1169;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1170 = self.idx;
                                                                        var $1171 = self.code;
                                                                        var $1172 = self.val;
                                                                        var self = Fm$Parser$term$($1170, $1171);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1174 = self.idx;
                                                                                var $1175 = self.code;
                                                                                var $1176 = self.err;
                                                                                var $1177 = Parser$Reply$error$($1174, $1175, $1176);
                                                                                var $1173 = $1177;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1178 = self.idx;
                                                                                var $1179 = self.code;
                                                                                var $1180 = self.val;
                                                                                var self = Parser$maybe$(Fm$Parser$text(";"), $1178, $1179);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1182 = self.idx;
                                                                                        var $1183 = self.code;
                                                                                        var $1184 = self.err;
                                                                                        var $1185 = Parser$Reply$error$($1182, $1183, $1184);
                                                                                        var $1181 = $1185;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1186 = self.idx;
                                                                                        var $1187 = self.code;
                                                                                        var $1188 = self.val;
                                                                                        var self = Fm$Parser$term$($1186, $1187);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1190 = self.idx;
                                                                                                var $1191 = self.code;
                                                                                                var $1192 = self.err;
                                                                                                var $1193 = Parser$Reply$error$($1190, $1191, $1192);
                                                                                                var $1189 = $1193;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1194 = self.idx;
                                                                                                var $1195 = self.code;
                                                                                                var $1196 = self.val;
                                                                                                var self = Fm$Parser$stop$($1116, $1194, $1195);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1198 = self.idx;
                                                                                                        var $1199 = self.code;
                                                                                                        var $1200 = self.err;
                                                                                                        var $1201 = Parser$Reply$error$($1198, $1199, $1200);
                                                                                                        var $1197 = $1201;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1202 = self.idx;
                                                                                                        var $1203 = self.code;
                                                                                                        var $1204 = self.val;
                                                                                                        var _term$39 = $1180;
                                                                                                        var _term$40 = Fm$Term$app$(_term$39, Fm$Term$lam$("x", (_x$40 => {
                                                                                                            var $1206 = Fm$Term$hol$(Bits$e);
                                                                                                            return $1206;
                                                                                                        })));
                                                                                                        var _term$41 = Fm$Term$app$(_term$40, Fm$Term$lam$($1140, (_x$41 => {
                                                                                                            var $1207 = Fm$Term$lam$($1156, (_y$42 => {
                                                                                                                var $1208 = $1196;
                                                                                                                return $1208;
                                                                                                            }));
                                                                                                            return $1207;
                                                                                                        })));
                                                                                                        var $1205 = Parser$Reply$value$($1202, $1203, Fm$Term$ori$($1204, _term$41));
                                                                                                        var $1197 = $1205;
                                                                                                        break;
                                                                                                };
                                                                                                var $1189 = $1197;
                                                                                                break;
                                                                                        };
                                                                                        var $1181 = $1189;
                                                                                        break;
                                                                                };
                                                                                var $1173 = $1181;
                                                                                break;
                                                                        };
                                                                        var $1165 = $1173;
                                                                        break;
                                                                };
                                                                var $1157 = $1165;
                                                                break;
                                                        };
                                                        var $1149 = $1157;
                                                        break;
                                                };
                                                var $1141 = $1149;
                                                break;
                                        };
                                        var $1133 = $1141;
                                        break;
                                };
                                var $1125 = $1133;
                                break;
                        };
                        var $1117 = $1125;
                        break;
                };
                var $1109 = $1117;
                break;
        };
        return $1109;
    };
    const Fm$Parser$get = x0 => x1 => Fm$Parser$get$(x0, x1);

    function Fm$Term$def$(_name$1, _expr$2, _body$3) {
        var $1209 = ({
            _: 'Fm.Term.def',
            'name': _name$1,
            'expr': _expr$2,
            'body': _body$3
        });
        return $1209;
    };
    const Fm$Term$def = x0 => x1 => x2 => Fm$Term$def$(x0, x1, x2);

    function Fm$Parser$def$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1211 = self.idx;
                var $1212 = self.code;
                var $1213 = self.err;
                var $1214 = Parser$Reply$error$($1211, $1212, $1213);
                var $1210 = $1214;
                break;
            case 'Parser.Reply.value':
                var $1215 = self.idx;
                var $1216 = self.code;
                var $1217 = self.val;
                var self = Fm$Parser$text$("def ", $1215, $1216);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1219 = self.idx;
                        var $1220 = self.code;
                        var $1221 = self.err;
                        var $1222 = Parser$Reply$error$($1219, $1220, $1221);
                        var $1218 = $1222;
                        break;
                    case 'Parser.Reply.value':
                        var $1223 = self.idx;
                        var $1224 = self.code;
                        var $1225 = self.val;
                        var self = Fm$Parser$name$($1223, $1224);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1227 = self.idx;
                                var $1228 = self.code;
                                var $1229 = self.err;
                                var $1230 = Parser$Reply$error$($1227, $1228, $1229);
                                var $1226 = $1230;
                                break;
                            case 'Parser.Reply.value':
                                var $1231 = self.idx;
                                var $1232 = self.code;
                                var $1233 = self.val;
                                var self = Fm$Parser$text$("=", $1231, $1232);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1235 = self.idx;
                                        var $1236 = self.code;
                                        var $1237 = self.err;
                                        var $1238 = Parser$Reply$error$($1235, $1236, $1237);
                                        var $1234 = $1238;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1239 = self.idx;
                                        var $1240 = self.code;
                                        var $1241 = self.val;
                                        var self = Fm$Parser$term$($1239, $1240);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1243 = self.idx;
                                                var $1244 = self.code;
                                                var $1245 = self.err;
                                                var $1246 = Parser$Reply$error$($1243, $1244, $1245);
                                                var $1242 = $1246;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1247 = self.idx;
                                                var $1248 = self.code;
                                                var $1249 = self.val;
                                                var self = Parser$maybe$(Fm$Parser$text(";"), $1247, $1248);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1251 = self.idx;
                                                        var $1252 = self.code;
                                                        var $1253 = self.err;
                                                        var $1254 = Parser$Reply$error$($1251, $1252, $1253);
                                                        var $1250 = $1254;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1255 = self.idx;
                                                        var $1256 = self.code;
                                                        var $1257 = self.val;
                                                        var self = Fm$Parser$term$($1255, $1256);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1259 = self.idx;
                                                                var $1260 = self.code;
                                                                var $1261 = self.err;
                                                                var $1262 = Parser$Reply$error$($1259, $1260, $1261);
                                                                var $1258 = $1262;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1263 = self.idx;
                                                                var $1264 = self.code;
                                                                var $1265 = self.val;
                                                                var self = Fm$Parser$stop$($1217, $1263, $1264);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1267 = self.idx;
                                                                        var $1268 = self.code;
                                                                        var $1269 = self.err;
                                                                        var $1270 = Parser$Reply$error$($1267, $1268, $1269);
                                                                        var $1266 = $1270;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1271 = self.idx;
                                                                        var $1272 = self.code;
                                                                        var $1273 = self.val;
                                                                        var $1274 = Parser$Reply$value$($1271, $1272, Fm$Term$ori$($1273, Fm$Term$def$($1233, $1249, (_x$27 => {
                                                                            var $1275 = $1265;
                                                                            return $1275;
                                                                        }))));
                                                                        var $1266 = $1274;
                                                                        break;
                                                                };
                                                                var $1258 = $1266;
                                                                break;
                                                        };
                                                        var $1250 = $1258;
                                                        break;
                                                };
                                                var $1242 = $1250;
                                                break;
                                        };
                                        var $1234 = $1242;
                                        break;
                                };
                                var $1226 = $1234;
                                break;
                        };
                        var $1218 = $1226;
                        break;
                };
                var $1210 = $1218;
                break;
        };
        return $1210;
    };
    const Fm$Parser$def = x0 => x1 => Fm$Parser$def$(x0, x1);

    function Fm$Parser$if$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1277 = self.idx;
                var $1278 = self.code;
                var $1279 = self.err;
                var $1280 = Parser$Reply$error$($1277, $1278, $1279);
                var $1276 = $1280;
                break;
            case 'Parser.Reply.value':
                var $1281 = self.idx;
                var $1282 = self.code;
                var $1283 = self.val;
                var self = Fm$Parser$text$("if ", $1281, $1282);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1285 = self.idx;
                        var $1286 = self.code;
                        var $1287 = self.err;
                        var $1288 = Parser$Reply$error$($1285, $1286, $1287);
                        var $1284 = $1288;
                        break;
                    case 'Parser.Reply.value':
                        var $1289 = self.idx;
                        var $1290 = self.code;
                        var $1291 = self.val;
                        var self = Fm$Parser$term$($1289, $1290);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1293 = self.idx;
                                var $1294 = self.code;
                                var $1295 = self.err;
                                var $1296 = Parser$Reply$error$($1293, $1294, $1295);
                                var $1292 = $1296;
                                break;
                            case 'Parser.Reply.value':
                                var $1297 = self.idx;
                                var $1298 = self.code;
                                var $1299 = self.val;
                                var self = Fm$Parser$text$("then", $1297, $1298);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1301 = self.idx;
                                        var $1302 = self.code;
                                        var $1303 = self.err;
                                        var $1304 = Parser$Reply$error$($1301, $1302, $1303);
                                        var $1300 = $1304;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1305 = self.idx;
                                        var $1306 = self.code;
                                        var $1307 = self.val;
                                        var self = Fm$Parser$term$($1305, $1306);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1309 = self.idx;
                                                var $1310 = self.code;
                                                var $1311 = self.err;
                                                var $1312 = Parser$Reply$error$($1309, $1310, $1311);
                                                var $1308 = $1312;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1313 = self.idx;
                                                var $1314 = self.code;
                                                var $1315 = self.val;
                                                var self = Fm$Parser$text$("else", $1313, $1314);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1317 = self.idx;
                                                        var $1318 = self.code;
                                                        var $1319 = self.err;
                                                        var $1320 = Parser$Reply$error$($1317, $1318, $1319);
                                                        var $1316 = $1320;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1321 = self.idx;
                                                        var $1322 = self.code;
                                                        var $1323 = self.val;
                                                        var self = Fm$Parser$term$($1321, $1322);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1325 = self.idx;
                                                                var $1326 = self.code;
                                                                var $1327 = self.err;
                                                                var $1328 = Parser$Reply$error$($1325, $1326, $1327);
                                                                var $1324 = $1328;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1329 = self.idx;
                                                                var $1330 = self.code;
                                                                var $1331 = self.val;
                                                                var self = Fm$Parser$stop$($1283, $1329, $1330);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1333 = self.idx;
                                                                        var $1334 = self.code;
                                                                        var $1335 = self.err;
                                                                        var $1336 = Parser$Reply$error$($1333, $1334, $1335);
                                                                        var $1332 = $1336;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1337 = self.idx;
                                                                        var $1338 = self.code;
                                                                        var $1339 = self.val;
                                                                        var _term$27 = $1299;
                                                                        var _term$28 = Fm$Term$app$(_term$27, Fm$Term$lam$("", (_x$28 => {
                                                                            var $1341 = Fm$Term$hol$(Bits$e);
                                                                            return $1341;
                                                                        })));
                                                                        var _term$29 = Fm$Term$app$(_term$28, $1315);
                                                                        var _term$30 = Fm$Term$app$(_term$29, $1331);
                                                                        var $1340 = Parser$Reply$value$($1337, $1338, Fm$Term$ori$($1339, _term$30));
                                                                        var $1332 = $1340;
                                                                        break;
                                                                };
                                                                var $1324 = $1332;
                                                                break;
                                                        };
                                                        var $1316 = $1324;
                                                        break;
                                                };
                                                var $1308 = $1316;
                                                break;
                                        };
                                        var $1300 = $1308;
                                        break;
                                };
                                var $1292 = $1300;
                                break;
                        };
                        var $1284 = $1292;
                        break;
                };
                var $1276 = $1284;
                break;
        };
        return $1276;
    };
    const Fm$Parser$if = x0 => x1 => Fm$Parser$if$(x0, x1);

    function List$mapped$(_as$2, _f$4) {
        var self = _as$2;
        switch (self._) {
            case 'List.nil':
                var $1343 = List$nil;
                var $1342 = $1343;
                break;
            case 'List.cons':
                var $1344 = self.head;
                var $1345 = self.tail;
                var $1346 = List$cons$(_f$4($1344), List$mapped$($1345, _f$4));
                var $1342 = $1346;
                break;
        };
        return $1342;
    };
    const List$mapped = x0 => x1 => List$mapped$(x0, x1);

    function Pair$new$(_fst$3, _snd$4) {
        var $1347 = ({
            _: 'Pair.new',
            'fst': _fst$3,
            'snd': _snd$4
        });
        return $1347;
    };
    const Pair$new = x0 => x1 => Pair$new$(x0, x1);
    const Fm$backslash = 92;
    const Fm$escapes = List$cons$(Pair$new$("\\b", 8), List$cons$(Pair$new$("\\f", 12), List$cons$(Pair$new$("\\n", 10), List$cons$(Pair$new$("\\r", 13), List$cons$(Pair$new$("\\t", 9), List$cons$(Pair$new$("\\v", 11), List$cons$(Pair$new$(String$cons$(Fm$backslash, String$cons$(Fm$backslash, String$nil)), Fm$backslash), List$cons$(Pair$new$("\\\"", 34), List$cons$(Pair$new$("\\0", 0), List$cons$(Pair$new$("\\\'", 39), List$nil))))))))));
    const Fm$Parser$char$single = Parser$first_of$(List$cons$(Parser$first_of$(List$mapped$(Fm$escapes, (_esc$1 => {
        var self = _esc$1;
        switch (self._) {
            case 'Pair.new':
                var $1349 = self.fst;
                var $1350 = self.snd;
                var $1351 = (_idx$4 => _code$5 => {
                    var self = Parser$text$($1349, _idx$4, _code$5);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $1353 = self.idx;
                            var $1354 = self.code;
                            var $1355 = self.err;
                            var $1356 = Parser$Reply$error$($1353, $1354, $1355);
                            var $1352 = $1356;
                            break;
                        case 'Parser.Reply.value':
                            var $1357 = self.idx;
                            var $1358 = self.code;
                            var $1359 = self.val;
                            var $1360 = Parser$Reply$value$($1357, $1358, $1350);
                            var $1352 = $1360;
                            break;
                    };
                    return $1352;
                });
                var $1348 = $1351;
                break;
        };
        return $1348;
    }))), List$cons$(Parser$one, List$nil)));

    function Fm$Term$chr$(_chrx$1) {
        var $1361 = ({
            _: 'Fm.Term.chr',
            'chrx': _chrx$1
        });
        return $1361;
    };
    const Fm$Term$chr = x0 => Fm$Term$chr$(x0);

    function Fm$Parser$char$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1363 = self.idx;
                var $1364 = self.code;
                var $1365 = self.err;
                var $1366 = Parser$Reply$error$($1363, $1364, $1365);
                var $1362 = $1366;
                break;
            case 'Parser.Reply.value':
                var $1367 = self.idx;
                var $1368 = self.code;
                var $1369 = self.val;
                var self = Fm$Parser$text$("\'", $1367, $1368);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1371 = self.idx;
                        var $1372 = self.code;
                        var $1373 = self.err;
                        var $1374 = Parser$Reply$error$($1371, $1372, $1373);
                        var $1370 = $1374;
                        break;
                    case 'Parser.Reply.value':
                        var $1375 = self.idx;
                        var $1376 = self.code;
                        var $1377 = self.val;
                        var self = Fm$Parser$char$single($1375)($1376);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1379 = self.idx;
                                var $1380 = self.code;
                                var $1381 = self.err;
                                var $1382 = Parser$Reply$error$($1379, $1380, $1381);
                                var $1378 = $1382;
                                break;
                            case 'Parser.Reply.value':
                                var $1383 = self.idx;
                                var $1384 = self.code;
                                var $1385 = self.val;
                                var self = Parser$text$("\'", $1383, $1384);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1387 = self.idx;
                                        var $1388 = self.code;
                                        var $1389 = self.err;
                                        var $1390 = Parser$Reply$error$($1387, $1388, $1389);
                                        var $1386 = $1390;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1391 = self.idx;
                                        var $1392 = self.code;
                                        var $1393 = self.val;
                                        var self = Fm$Parser$stop$($1369, $1391, $1392);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1395 = self.idx;
                                                var $1396 = self.code;
                                                var $1397 = self.err;
                                                var $1398 = Parser$Reply$error$($1395, $1396, $1397);
                                                var $1394 = $1398;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1399 = self.idx;
                                                var $1400 = self.code;
                                                var $1401 = self.val;
                                                var $1402 = Parser$Reply$value$($1399, $1400, Fm$Term$ori$($1401, Fm$Term$chr$($1385)));
                                                var $1394 = $1402;
                                                break;
                                        };
                                        var $1386 = $1394;
                                        break;
                                };
                                var $1378 = $1386;
                                break;
                        };
                        var $1370 = $1378;
                        break;
                };
                var $1362 = $1370;
                break;
        };
        return $1362;
    };
    const Fm$Parser$char = x0 => x1 => Fm$Parser$char$(x0, x1);

    function Fm$Term$str$(_strx$1) {
        var $1403 = ({
            _: 'Fm.Term.str',
            'strx': _strx$1
        });
        return $1403;
    };
    const Fm$Term$str = x0 => Fm$Term$str$(x0);

    function Fm$Parser$string$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1405 = self.idx;
                var $1406 = self.code;
                var $1407 = self.err;
                var $1408 = Parser$Reply$error$($1405, $1406, $1407);
                var $1404 = $1408;
                break;
            case 'Parser.Reply.value':
                var $1409 = self.idx;
                var $1410 = self.code;
                var $1411 = self.val;
                var _quot$6 = String$cons$(34, String$nil);
                var self = Fm$Parser$text$(_quot$6, $1409, $1410);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1413 = self.idx;
                        var $1414 = self.code;
                        var $1415 = self.err;
                        var $1416 = Parser$Reply$error$($1413, $1414, $1415);
                        var $1412 = $1416;
                        break;
                    case 'Parser.Reply.value':
                        var $1417 = self.idx;
                        var $1418 = self.code;
                        var $1419 = self.val;
                        var self = Parser$until$(Parser$text(_quot$6), Fm$Parser$char$single)($1417)($1418);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1421 = self.idx;
                                var $1422 = self.code;
                                var $1423 = self.err;
                                var $1424 = Parser$Reply$error$($1421, $1422, $1423);
                                var $1420 = $1424;
                                break;
                            case 'Parser.Reply.value':
                                var $1425 = self.idx;
                                var $1426 = self.code;
                                var $1427 = self.val;
                                var _strx$13 = List$fold$($1427, String$nil, String$cons);
                                var self = Fm$Parser$stop$($1411, $1425, $1426);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1429 = self.idx;
                                        var $1430 = self.code;
                                        var $1431 = self.err;
                                        var $1432 = Parser$Reply$error$($1429, $1430, $1431);
                                        var $1428 = $1432;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1433 = self.idx;
                                        var $1434 = self.code;
                                        var $1435 = self.val;
                                        var $1436 = Parser$Reply$value$($1433, $1434, Fm$Term$ori$($1435, Fm$Term$str$(_strx$13)));
                                        var $1428 = $1436;
                                        break;
                                };
                                var $1420 = $1428;
                                break;
                        };
                        var $1412 = $1420;
                        break;
                };
                var $1404 = $1412;
                break;
        };
        return $1404;
    };
    const Fm$Parser$string = x0 => x1 => Fm$Parser$string$(x0, x1);

    function Fm$Parser$pair$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1438 = self.idx;
                var $1439 = self.code;
                var $1440 = self.err;
                var $1441 = Parser$Reply$error$($1438, $1439, $1440);
                var $1437 = $1441;
                break;
            case 'Parser.Reply.value':
                var $1442 = self.idx;
                var $1443 = self.code;
                var $1444 = self.val;
                var self = Fm$Parser$text$("{", $1442, $1443);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1446 = self.idx;
                        var $1447 = self.code;
                        var $1448 = self.err;
                        var $1449 = Parser$Reply$error$($1446, $1447, $1448);
                        var $1445 = $1449;
                        break;
                    case 'Parser.Reply.value':
                        var $1450 = self.idx;
                        var $1451 = self.code;
                        var $1452 = self.val;
                        var self = Fm$Parser$term$($1450, $1451);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1454 = self.idx;
                                var $1455 = self.code;
                                var $1456 = self.err;
                                var $1457 = Parser$Reply$error$($1454, $1455, $1456);
                                var $1453 = $1457;
                                break;
                            case 'Parser.Reply.value':
                                var $1458 = self.idx;
                                var $1459 = self.code;
                                var $1460 = self.val;
                                var self = Fm$Parser$text$(",", $1458, $1459);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1462 = self.idx;
                                        var $1463 = self.code;
                                        var $1464 = self.err;
                                        var $1465 = Parser$Reply$error$($1462, $1463, $1464);
                                        var $1461 = $1465;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1466 = self.idx;
                                        var $1467 = self.code;
                                        var $1468 = self.val;
                                        var self = Fm$Parser$term$($1466, $1467);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1470 = self.idx;
                                                var $1471 = self.code;
                                                var $1472 = self.err;
                                                var $1473 = Parser$Reply$error$($1470, $1471, $1472);
                                                var $1469 = $1473;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1474 = self.idx;
                                                var $1475 = self.code;
                                                var $1476 = self.val;
                                                var self = Fm$Parser$text$("}", $1474, $1475);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1478 = self.idx;
                                                        var $1479 = self.code;
                                                        var $1480 = self.err;
                                                        var $1481 = Parser$Reply$error$($1478, $1479, $1480);
                                                        var $1477 = $1481;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1482 = self.idx;
                                                        var $1483 = self.code;
                                                        var $1484 = self.val;
                                                        var self = Fm$Parser$stop$($1444, $1482, $1483);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1486 = self.idx;
                                                                var $1487 = self.code;
                                                                var $1488 = self.err;
                                                                var $1489 = Parser$Reply$error$($1486, $1487, $1488);
                                                                var $1485 = $1489;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1490 = self.idx;
                                                                var $1491 = self.code;
                                                                var $1492 = self.val;
                                                                var _term$24 = Fm$Term$ref$("Pair.new");
                                                                var _term$25 = Fm$Term$app$(_term$24, Fm$Term$hol$(Bits$e));
                                                                var _term$26 = Fm$Term$app$(_term$25, Fm$Term$hol$(Bits$e));
                                                                var _term$27 = Fm$Term$app$(_term$26, $1460);
                                                                var _term$28 = Fm$Term$app$(_term$27, $1476);
                                                                var $1493 = Parser$Reply$value$($1490, $1491, Fm$Term$ori$($1492, _term$28));
                                                                var $1485 = $1493;
                                                                break;
                                                        };
                                                        var $1477 = $1485;
                                                        break;
                                                };
                                                var $1469 = $1477;
                                                break;
                                        };
                                        var $1461 = $1469;
                                        break;
                                };
                                var $1453 = $1461;
                                break;
                        };
                        var $1445 = $1453;
                        break;
                };
                var $1437 = $1445;
                break;
        };
        return $1437;
    };
    const Fm$Parser$pair = x0 => x1 => Fm$Parser$pair$(x0, x1);

    function Fm$Parser$sigma$type$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1495 = self.idx;
                var $1496 = self.code;
                var $1497 = self.err;
                var $1498 = Parser$Reply$error$($1495, $1496, $1497);
                var $1494 = $1498;
                break;
            case 'Parser.Reply.value':
                var $1499 = self.idx;
                var $1500 = self.code;
                var $1501 = self.val;
                var self = Fm$Parser$text$("{", $1499, $1500);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1503 = self.idx;
                        var $1504 = self.code;
                        var $1505 = self.err;
                        var $1506 = Parser$Reply$error$($1503, $1504, $1505);
                        var $1502 = $1506;
                        break;
                    case 'Parser.Reply.value':
                        var $1507 = self.idx;
                        var $1508 = self.code;
                        var $1509 = self.val;
                        var self = Fm$Parser$name1$($1507, $1508);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1511 = self.idx;
                                var $1512 = self.code;
                                var $1513 = self.err;
                                var $1514 = Parser$Reply$error$($1511, $1512, $1513);
                                var $1510 = $1514;
                                break;
                            case 'Parser.Reply.value':
                                var $1515 = self.idx;
                                var $1516 = self.code;
                                var $1517 = self.val;
                                var self = Fm$Parser$text$(":", $1515, $1516);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1519 = self.idx;
                                        var $1520 = self.code;
                                        var $1521 = self.err;
                                        var $1522 = Parser$Reply$error$($1519, $1520, $1521);
                                        var $1518 = $1522;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1523 = self.idx;
                                        var $1524 = self.code;
                                        var $1525 = self.val;
                                        var self = Fm$Parser$term$($1523, $1524);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1527 = self.idx;
                                                var $1528 = self.code;
                                                var $1529 = self.err;
                                                var $1530 = Parser$Reply$error$($1527, $1528, $1529);
                                                var $1526 = $1530;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1531 = self.idx;
                                                var $1532 = self.code;
                                                var $1533 = self.val;
                                                var self = Fm$Parser$text$("}", $1531, $1532);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1535 = self.idx;
                                                        var $1536 = self.code;
                                                        var $1537 = self.err;
                                                        var $1538 = Parser$Reply$error$($1535, $1536, $1537);
                                                        var $1534 = $1538;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1539 = self.idx;
                                                        var $1540 = self.code;
                                                        var $1541 = self.val;
                                                        var self = Fm$Parser$term$($1539, $1540);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1543 = self.idx;
                                                                var $1544 = self.code;
                                                                var $1545 = self.err;
                                                                var $1546 = Parser$Reply$error$($1543, $1544, $1545);
                                                                var $1542 = $1546;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1547 = self.idx;
                                                                var $1548 = self.code;
                                                                var $1549 = self.val;
                                                                var self = Fm$Parser$stop$($1501, $1547, $1548);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1551 = self.idx;
                                                                        var $1552 = self.code;
                                                                        var $1553 = self.err;
                                                                        var $1554 = Parser$Reply$error$($1551, $1552, $1553);
                                                                        var $1550 = $1554;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1555 = self.idx;
                                                                        var $1556 = self.code;
                                                                        var $1557 = self.val;
                                                                        var _term$27 = Fm$Term$ref$("Sigma");
                                                                        var _term$28 = Fm$Term$app$(_term$27, $1533);
                                                                        var _term$29 = Fm$Term$app$(_term$28, Fm$Term$lam$("x", (_x$29 => {
                                                                            var $1559 = $1549;
                                                                            return $1559;
                                                                        })));
                                                                        var $1558 = Parser$Reply$value$($1555, $1556, Fm$Term$ori$($1557, _term$29));
                                                                        var $1550 = $1558;
                                                                        break;
                                                                };
                                                                var $1542 = $1550;
                                                                break;
                                                        };
                                                        var $1534 = $1542;
                                                        break;
                                                };
                                                var $1526 = $1534;
                                                break;
                                        };
                                        var $1518 = $1526;
                                        break;
                                };
                                var $1510 = $1518;
                                break;
                        };
                        var $1502 = $1510;
                        break;
                };
                var $1494 = $1502;
                break;
        };
        return $1494;
    };
    const Fm$Parser$sigma$type = x0 => x1 => Fm$Parser$sigma$type$(x0, x1);

    function Fm$Parser$some$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1561 = self.idx;
                var $1562 = self.code;
                var $1563 = self.err;
                var $1564 = Parser$Reply$error$($1561, $1562, $1563);
                var $1560 = $1564;
                break;
            case 'Parser.Reply.value':
                var $1565 = self.idx;
                var $1566 = self.code;
                var $1567 = self.val;
                var self = Fm$Parser$text$("some(", $1565, $1566);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1569 = self.idx;
                        var $1570 = self.code;
                        var $1571 = self.err;
                        var $1572 = Parser$Reply$error$($1569, $1570, $1571);
                        var $1568 = $1572;
                        break;
                    case 'Parser.Reply.value':
                        var $1573 = self.idx;
                        var $1574 = self.code;
                        var $1575 = self.val;
                        var self = Fm$Parser$term$($1573, $1574);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1577 = self.idx;
                                var $1578 = self.code;
                                var $1579 = self.err;
                                var $1580 = Parser$Reply$error$($1577, $1578, $1579);
                                var $1576 = $1580;
                                break;
                            case 'Parser.Reply.value':
                                var $1581 = self.idx;
                                var $1582 = self.code;
                                var $1583 = self.val;
                                var self = Fm$Parser$text$(")", $1581, $1582);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1585 = self.idx;
                                        var $1586 = self.code;
                                        var $1587 = self.err;
                                        var $1588 = Parser$Reply$error$($1585, $1586, $1587);
                                        var $1584 = $1588;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1589 = self.idx;
                                        var $1590 = self.code;
                                        var $1591 = self.val;
                                        var self = Fm$Parser$stop$($1567, $1589, $1590);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1593 = self.idx;
                                                var $1594 = self.code;
                                                var $1595 = self.err;
                                                var $1596 = Parser$Reply$error$($1593, $1594, $1595);
                                                var $1592 = $1596;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1597 = self.idx;
                                                var $1598 = self.code;
                                                var $1599 = self.val;
                                                var _term$18 = Fm$Term$ref$("Maybe.some");
                                                var _term$19 = Fm$Term$app$(_term$18, Fm$Term$hol$(Bits$e));
                                                var _term$20 = Fm$Term$app$(_term$19, $1583);
                                                var $1600 = Parser$Reply$value$($1597, $1598, Fm$Term$ori$($1599, _term$20));
                                                var $1592 = $1600;
                                                break;
                                        };
                                        var $1584 = $1592;
                                        break;
                                };
                                var $1576 = $1584;
                                break;
                        };
                        var $1568 = $1576;
                        break;
                };
                var $1560 = $1568;
                break;
        };
        return $1560;
    };
    const Fm$Parser$some = x0 => x1 => Fm$Parser$some$(x0, x1);

    function Fm$Parser$apply$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1602 = self.idx;
                var $1603 = self.code;
                var $1604 = self.err;
                var $1605 = Parser$Reply$error$($1602, $1603, $1604);
                var $1601 = $1605;
                break;
            case 'Parser.Reply.value':
                var $1606 = self.idx;
                var $1607 = self.code;
                var $1608 = self.val;
                var self = Fm$Parser$text$("apply(", $1606, $1607);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1610 = self.idx;
                        var $1611 = self.code;
                        var $1612 = self.err;
                        var $1613 = Parser$Reply$error$($1610, $1611, $1612);
                        var $1609 = $1613;
                        break;
                    case 'Parser.Reply.value':
                        var $1614 = self.idx;
                        var $1615 = self.code;
                        var $1616 = self.val;
                        var self = Fm$Parser$term$($1614, $1615);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1618 = self.idx;
                                var $1619 = self.code;
                                var $1620 = self.err;
                                var $1621 = Parser$Reply$error$($1618, $1619, $1620);
                                var $1617 = $1621;
                                break;
                            case 'Parser.Reply.value':
                                var $1622 = self.idx;
                                var $1623 = self.code;
                                var $1624 = self.val;
                                var self = Fm$Parser$text$(",", $1622, $1623);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1626 = self.idx;
                                        var $1627 = self.code;
                                        var $1628 = self.err;
                                        var $1629 = Parser$Reply$error$($1626, $1627, $1628);
                                        var $1625 = $1629;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1630 = self.idx;
                                        var $1631 = self.code;
                                        var $1632 = self.val;
                                        var self = Fm$Parser$term$($1630, $1631);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1634 = self.idx;
                                                var $1635 = self.code;
                                                var $1636 = self.err;
                                                var $1637 = Parser$Reply$error$($1634, $1635, $1636);
                                                var $1633 = $1637;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1638 = self.idx;
                                                var $1639 = self.code;
                                                var $1640 = self.val;
                                                var self = Fm$Parser$text$(")", $1638, $1639);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1642 = self.idx;
                                                        var $1643 = self.code;
                                                        var $1644 = self.err;
                                                        var $1645 = Parser$Reply$error$($1642, $1643, $1644);
                                                        var $1641 = $1645;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1646 = self.idx;
                                                        var $1647 = self.code;
                                                        var $1648 = self.val;
                                                        var self = Fm$Parser$stop$($1608, $1646, $1647);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1650 = self.idx;
                                                                var $1651 = self.code;
                                                                var $1652 = self.err;
                                                                var $1653 = Parser$Reply$error$($1650, $1651, $1652);
                                                                var $1649 = $1653;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1654 = self.idx;
                                                                var $1655 = self.code;
                                                                var $1656 = self.val;
                                                                var _term$24 = Fm$Term$ref$("Equal.apply");
                                                                var _term$25 = Fm$Term$app$(_term$24, Fm$Term$hol$(Bits$e));
                                                                var _term$26 = Fm$Term$app$(_term$25, Fm$Term$hol$(Bits$e));
                                                                var _term$27 = Fm$Term$app$(_term$26, Fm$Term$hol$(Bits$e));
                                                                var _term$28 = Fm$Term$app$(_term$27, Fm$Term$hol$(Bits$e));
                                                                var _term$29 = Fm$Term$app$(_term$28, $1624);
                                                                var _term$30 = Fm$Term$app$(_term$29, $1640);
                                                                var $1657 = Parser$Reply$value$($1654, $1655, Fm$Term$ori$($1656, _term$30));
                                                                var $1649 = $1657;
                                                                break;
                                                        };
                                                        var $1641 = $1649;
                                                        break;
                                                };
                                                var $1633 = $1641;
                                                break;
                                        };
                                        var $1625 = $1633;
                                        break;
                                };
                                var $1617 = $1625;
                                break;
                        };
                        var $1609 = $1617;
                        break;
                };
                var $1601 = $1609;
                break;
        };
        return $1601;
    };
    const Fm$Parser$apply = x0 => x1 => Fm$Parser$apply$(x0, x1);

    function Fm$Name$read$(_str$1) {
        var $1658 = _str$1;
        return $1658;
    };
    const Fm$Name$read = x0 => Fm$Name$read$(x0);

    function Fm$Parser$list$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1660 = self.idx;
                var $1661 = self.code;
                var $1662 = self.err;
                var $1663 = Parser$Reply$error$($1660, $1661, $1662);
                var $1659 = $1663;
                break;
            case 'Parser.Reply.value':
                var $1664 = self.idx;
                var $1665 = self.code;
                var $1666 = self.val;
                var self = Fm$Parser$text$("[", $1664, $1665);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1668 = self.idx;
                        var $1669 = self.code;
                        var $1670 = self.err;
                        var $1671 = Parser$Reply$error$($1668, $1669, $1670);
                        var $1667 = $1671;
                        break;
                    case 'Parser.Reply.value':
                        var $1672 = self.idx;
                        var $1673 = self.code;
                        var $1674 = self.val;
                        var self = Parser$until$(Fm$Parser$text("]"), Fm$Parser$item(Fm$Parser$term))($1672)($1673);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1676 = self.idx;
                                var $1677 = self.code;
                                var $1678 = self.err;
                                var $1679 = Parser$Reply$error$($1676, $1677, $1678);
                                var $1675 = $1679;
                                break;
                            case 'Parser.Reply.value':
                                var $1680 = self.idx;
                                var $1681 = self.code;
                                var $1682 = self.val;
                                var self = Fm$Parser$stop$($1666, $1680, $1681);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1684 = self.idx;
                                        var $1685 = self.code;
                                        var $1686 = self.err;
                                        var $1687 = Parser$Reply$error$($1684, $1685, $1686);
                                        var $1683 = $1687;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1688 = self.idx;
                                        var $1689 = self.code;
                                        var $1690 = self.val;
                                        var $1691 = Parser$Reply$value$($1688, $1689, List$fold$($1682, Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("List.nil")), Fm$Term$hol$(Bits$e)), (_x$15 => _xs$16 => {
                                            var _term$17 = Fm$Term$ref$(Fm$Name$read$("List.cons"));
                                            var _term$18 = Fm$Term$app$(_term$17, Fm$Term$hol$(Bits$e));
                                            var _term$19 = Fm$Term$app$(_term$18, _x$15);
                                            var _term$20 = Fm$Term$app$(_term$19, _xs$16);
                                            var $1692 = Fm$Term$ori$($1690, _term$20);
                                            return $1692;
                                        })));
                                        var $1683 = $1691;
                                        break;
                                };
                                var $1675 = $1683;
                                break;
                        };
                        var $1667 = $1675;
                        break;
                };
                var $1659 = $1667;
                break;
        };
        return $1659;
    };
    const Fm$Parser$list = x0 => x1 => Fm$Parser$list$(x0, x1);

    function Fm$Parser$log$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1694 = self.idx;
                var $1695 = self.code;
                var $1696 = self.err;
                var $1697 = Parser$Reply$error$($1694, $1695, $1696);
                var $1693 = $1697;
                break;
            case 'Parser.Reply.value':
                var $1698 = self.idx;
                var $1699 = self.code;
                var $1700 = self.val;
                var self = Fm$Parser$text$("log(", $1698, $1699);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1702 = self.idx;
                        var $1703 = self.code;
                        var $1704 = self.err;
                        var $1705 = Parser$Reply$error$($1702, $1703, $1704);
                        var $1701 = $1705;
                        break;
                    case 'Parser.Reply.value':
                        var $1706 = self.idx;
                        var $1707 = self.code;
                        var $1708 = self.val;
                        var self = Parser$until$(Fm$Parser$text(")"), Fm$Parser$item(Fm$Parser$term))($1706)($1707);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1710 = self.idx;
                                var $1711 = self.code;
                                var $1712 = self.err;
                                var $1713 = Parser$Reply$error$($1710, $1711, $1712);
                                var $1709 = $1713;
                                break;
                            case 'Parser.Reply.value':
                                var $1714 = self.idx;
                                var $1715 = self.code;
                                var $1716 = self.val;
                                var self = Fm$Parser$term$($1714, $1715);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1718 = self.idx;
                                        var $1719 = self.code;
                                        var $1720 = self.err;
                                        var $1721 = Parser$Reply$error$($1718, $1719, $1720);
                                        var $1717 = $1721;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1722 = self.idx;
                                        var $1723 = self.code;
                                        var $1724 = self.val;
                                        var _term$15 = Fm$Term$ref$("Debug.log");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$hol$(Bits$e));
                                        var _args$17 = List$fold$($1716, Fm$Term$ref$("String.nil"), (_x$17 => _xs$18 => {
                                            var _arg$19 = Fm$Term$ref$("String.concat");
                                            var _arg$20 = Fm$Term$app$(_arg$19, _x$17);
                                            var _arg$21 = Fm$Term$app$(_arg$20, _xs$18);
                                            var $1726 = _arg$21;
                                            return $1726;
                                        }));
                                        var _term$18 = Fm$Term$app$(_term$16, _args$17);
                                        var _term$19 = Fm$Term$app$(_term$18, Fm$Term$lam$("x", (_x$19 => {
                                            var $1727 = $1724;
                                            return $1727;
                                        })));
                                        var self = Fm$Parser$stop$($1700, $1722, $1723);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1728 = self.idx;
                                                var $1729 = self.code;
                                                var $1730 = self.err;
                                                var $1731 = Parser$Reply$error$($1728, $1729, $1730);
                                                var $1725 = $1731;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1732 = self.idx;
                                                var $1733 = self.code;
                                                var $1734 = self.val;
                                                var $1735 = Parser$Reply$value$($1732, $1733, Fm$Term$ori$($1734, _term$19));
                                                var $1725 = $1735;
                                                break;
                                        };
                                        var $1717 = $1725;
                                        break;
                                };
                                var $1709 = $1717;
                                break;
                        };
                        var $1701 = $1709;
                        break;
                };
                var $1693 = $1701;
                break;
        };
        return $1693;
    };
    const Fm$Parser$log = x0 => x1 => Fm$Parser$log$(x0, x1);

    function Fm$Parser$forrange$u32$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1737 = self.idx;
                var $1738 = self.code;
                var $1739 = self.err;
                var $1740 = Parser$Reply$error$($1737, $1738, $1739);
                var $1736 = $1740;
                break;
            case 'Parser.Reply.value':
                var $1741 = self.idx;
                var $1742 = self.code;
                var $1743 = self.val;
                var self = Fm$Parser$text$("for ", $1741, $1742);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1745 = self.idx;
                        var $1746 = self.code;
                        var $1747 = self.err;
                        var $1748 = Parser$Reply$error$($1745, $1746, $1747);
                        var $1744 = $1748;
                        break;
                    case 'Parser.Reply.value':
                        var $1749 = self.idx;
                        var $1750 = self.code;
                        var $1751 = self.val;
                        var self = Fm$Parser$name1$($1749, $1750);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1753 = self.idx;
                                var $1754 = self.code;
                                var $1755 = self.err;
                                var $1756 = Parser$Reply$error$($1753, $1754, $1755);
                                var $1752 = $1756;
                                break;
                            case 'Parser.Reply.value':
                                var $1757 = self.idx;
                                var $1758 = self.code;
                                var $1759 = self.val;
                                var self = Fm$Parser$text$(":", $1757, $1758);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1761 = self.idx;
                                        var $1762 = self.code;
                                        var $1763 = self.err;
                                        var $1764 = Parser$Reply$error$($1761, $1762, $1763);
                                        var $1760 = $1764;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1765 = self.idx;
                                        var $1766 = self.code;
                                        var $1767 = self.val;
                                        var self = Fm$Parser$text$("U32", $1765, $1766);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1769 = self.idx;
                                                var $1770 = self.code;
                                                var $1771 = self.err;
                                                var $1772 = Parser$Reply$error$($1769, $1770, $1771);
                                                var $1768 = $1772;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1773 = self.idx;
                                                var $1774 = self.code;
                                                var $1775 = self.val;
                                                var self = Fm$Parser$text$("=", $1773, $1774);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1777 = self.idx;
                                                        var $1778 = self.code;
                                                        var $1779 = self.err;
                                                        var $1780 = Parser$Reply$error$($1777, $1778, $1779);
                                                        var $1776 = $1780;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1781 = self.idx;
                                                        var $1782 = self.code;
                                                        var $1783 = self.val;
                                                        var self = Fm$Parser$term$($1781, $1782);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1785 = self.idx;
                                                                var $1786 = self.code;
                                                                var $1787 = self.err;
                                                                var $1788 = Parser$Reply$error$($1785, $1786, $1787);
                                                                var $1784 = $1788;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1789 = self.idx;
                                                                var $1790 = self.code;
                                                                var $1791 = self.val;
                                                                var self = Fm$Parser$text$("..", $1789, $1790);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1793 = self.idx;
                                                                        var $1794 = self.code;
                                                                        var $1795 = self.err;
                                                                        var $1796 = Parser$Reply$error$($1793, $1794, $1795);
                                                                        var $1792 = $1796;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1797 = self.idx;
                                                                        var $1798 = self.code;
                                                                        var $1799 = self.val;
                                                                        var self = Fm$Parser$term$($1797, $1798);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1801 = self.idx;
                                                                                var $1802 = self.code;
                                                                                var $1803 = self.err;
                                                                                var $1804 = Parser$Reply$error$($1801, $1802, $1803);
                                                                                var $1800 = $1804;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1805 = self.idx;
                                                                                var $1806 = self.code;
                                                                                var $1807 = self.val;
                                                                                var self = Fm$Parser$text$("with", $1805, $1806);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1809 = self.idx;
                                                                                        var $1810 = self.code;
                                                                                        var $1811 = self.err;
                                                                                        var $1812 = Parser$Reply$error$($1809, $1810, $1811);
                                                                                        var $1808 = $1812;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1813 = self.idx;
                                                                                        var $1814 = self.code;
                                                                                        var $1815 = self.val;
                                                                                        var self = Fm$Parser$name1$($1813, $1814);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1817 = self.idx;
                                                                                                var $1818 = self.code;
                                                                                                var $1819 = self.err;
                                                                                                var $1820 = Parser$Reply$error$($1817, $1818, $1819);
                                                                                                var $1816 = $1820;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1821 = self.idx;
                                                                                                var $1822 = self.code;
                                                                                                var $1823 = self.val;
                                                                                                var self = Fm$Parser$text$(":", $1821, $1822);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1825 = self.idx;
                                                                                                        var $1826 = self.code;
                                                                                                        var $1827 = self.err;
                                                                                                        var $1828 = Parser$Reply$error$($1825, $1826, $1827);
                                                                                                        var $1824 = $1828;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1829 = self.idx;
                                                                                                        var $1830 = self.code;
                                                                                                        var $1831 = self.val;
                                                                                                        var self = Fm$Parser$term$($1829, $1830);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1833 = self.idx;
                                                                                                                var $1834 = self.code;
                                                                                                                var $1835 = self.err;
                                                                                                                var $1836 = Parser$Reply$error$($1833, $1834, $1835);
                                                                                                                var $1832 = $1836;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1837 = self.idx;
                                                                                                                var $1838 = self.code;
                                                                                                                var $1839 = self.val;
                                                                                                                var self = Fm$Parser$stop$($1743, $1837, $1838);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1841 = self.idx;
                                                                                                                        var $1842 = self.code;
                                                                                                                        var $1843 = self.err;
                                                                                                                        var $1844 = Parser$Reply$error$($1841, $1842, $1843);
                                                                                                                        var $1840 = $1844;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1845 = self.idx;
                                                                                                                        var $1846 = self.code;
                                                                                                                        var $1847 = self.val;
                                                                                                                        var _term$45 = Fm$Term$ref$("U32.for");
                                                                                                                        var _term$46 = Fm$Term$app$(_term$45, Fm$Term$hol$(Bits$e));
                                                                                                                        var _term$47 = Fm$Term$app$(_term$46, Fm$Term$ref$($1823));
                                                                                                                        var _term$48 = Fm$Term$app$(_term$47, $1791);
                                                                                                                        var _term$49 = Fm$Term$app$(_term$48, $1807);
                                                                                                                        var _lamb$50 = Fm$Term$lam$($1759, (_e$50 => {
                                                                                                                            var $1849 = Fm$Term$lam$($1823, (_s$51 => {
                                                                                                                                var $1850 = $1839;
                                                                                                                                return $1850;
                                                                                                                            }));
                                                                                                                            return $1849;
                                                                                                                        }));
                                                                                                                        var _term$51 = Fm$Term$app$(_term$49, _lamb$50);
                                                                                                                        var _term$52 = Fm$Term$let$($1823, _term$51, (_x$52 => {
                                                                                                                            var $1851 = Fm$Term$ref$($1823);
                                                                                                                            return $1851;
                                                                                                                        }));
                                                                                                                        var $1848 = Parser$Reply$value$($1845, $1846, Fm$Term$ori$($1847, _term$52));
                                                                                                                        var $1840 = $1848;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1832 = $1840;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1824 = $1832;
                                                                                                        break;
                                                                                                };
                                                                                                var $1816 = $1824;
                                                                                                break;
                                                                                        };
                                                                                        var $1808 = $1816;
                                                                                        break;
                                                                                };
                                                                                var $1800 = $1808;
                                                                                break;
                                                                        };
                                                                        var $1792 = $1800;
                                                                        break;
                                                                };
                                                                var $1784 = $1792;
                                                                break;
                                                        };
                                                        var $1776 = $1784;
                                                        break;
                                                };
                                                var $1768 = $1776;
                                                break;
                                        };
                                        var $1760 = $1768;
                                        break;
                                };
                                var $1752 = $1760;
                                break;
                        };
                        var $1744 = $1752;
                        break;
                };
                var $1736 = $1744;
                break;
        };
        return $1736;
    };
    const Fm$Parser$forrange$u32 = x0 => x1 => Fm$Parser$forrange$u32$(x0, x1);

    function Fm$Parser$forrange$u32$2$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1853 = self.idx;
                var $1854 = self.code;
                var $1855 = self.err;
                var $1856 = Parser$Reply$error$($1853, $1854, $1855);
                var $1852 = $1856;
                break;
            case 'Parser.Reply.value':
                var $1857 = self.idx;
                var $1858 = self.code;
                var $1859 = self.val;
                var self = Fm$Parser$text$("for ", $1857, $1858);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1861 = self.idx;
                        var $1862 = self.code;
                        var $1863 = self.err;
                        var $1864 = Parser$Reply$error$($1861, $1862, $1863);
                        var $1860 = $1864;
                        break;
                    case 'Parser.Reply.value':
                        var $1865 = self.idx;
                        var $1866 = self.code;
                        var $1867 = self.val;
                        var self = Fm$Parser$name1$($1865, $1866);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $1869 = self.idx;
                                var $1870 = self.code;
                                var $1871 = self.err;
                                var $1872 = Parser$Reply$error$($1869, $1870, $1871);
                                var $1868 = $1872;
                                break;
                            case 'Parser.Reply.value':
                                var $1873 = self.idx;
                                var $1874 = self.code;
                                var $1875 = self.val;
                                var self = Fm$Parser$text$(":", $1873, $1874);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $1877 = self.idx;
                                        var $1878 = self.code;
                                        var $1879 = self.err;
                                        var $1880 = Parser$Reply$error$($1877, $1878, $1879);
                                        var $1876 = $1880;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $1881 = self.idx;
                                        var $1882 = self.code;
                                        var $1883 = self.val;
                                        var self = Fm$Parser$text$("U32", $1881, $1882);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $1885 = self.idx;
                                                var $1886 = self.code;
                                                var $1887 = self.err;
                                                var $1888 = Parser$Reply$error$($1885, $1886, $1887);
                                                var $1884 = $1888;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $1889 = self.idx;
                                                var $1890 = self.code;
                                                var $1891 = self.val;
                                                var self = Fm$Parser$text$("=", $1889, $1890);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $1893 = self.idx;
                                                        var $1894 = self.code;
                                                        var $1895 = self.err;
                                                        var $1896 = Parser$Reply$error$($1893, $1894, $1895);
                                                        var $1892 = $1896;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $1897 = self.idx;
                                                        var $1898 = self.code;
                                                        var $1899 = self.val;
                                                        var self = Fm$Parser$term$($1897, $1898);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $1901 = self.idx;
                                                                var $1902 = self.code;
                                                                var $1903 = self.err;
                                                                var $1904 = Parser$Reply$error$($1901, $1902, $1903);
                                                                var $1900 = $1904;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $1905 = self.idx;
                                                                var $1906 = self.code;
                                                                var $1907 = self.val;
                                                                var self = Fm$Parser$text$("..", $1905, $1906);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $1909 = self.idx;
                                                                        var $1910 = self.code;
                                                                        var $1911 = self.err;
                                                                        var $1912 = Parser$Reply$error$($1909, $1910, $1911);
                                                                        var $1908 = $1912;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $1913 = self.idx;
                                                                        var $1914 = self.code;
                                                                        var $1915 = self.val;
                                                                        var self = Fm$Parser$term$($1913, $1914);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $1917 = self.idx;
                                                                                var $1918 = self.code;
                                                                                var $1919 = self.err;
                                                                                var $1920 = Parser$Reply$error$($1917, $1918, $1919);
                                                                                var $1916 = $1920;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $1921 = self.idx;
                                                                                var $1922 = self.code;
                                                                                var $1923 = self.val;
                                                                                var self = Fm$Parser$text$(":", $1921, $1922);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $1925 = self.idx;
                                                                                        var $1926 = self.code;
                                                                                        var $1927 = self.err;
                                                                                        var $1928 = Parser$Reply$error$($1925, $1926, $1927);
                                                                                        var $1924 = $1928;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $1929 = self.idx;
                                                                                        var $1930 = self.code;
                                                                                        var $1931 = self.val;
                                                                                        var self = Fm$Parser$name1$($1929, $1930);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $1933 = self.idx;
                                                                                                var $1934 = self.code;
                                                                                                var $1935 = self.err;
                                                                                                var $1936 = Parser$Reply$error$($1933, $1934, $1935);
                                                                                                var $1932 = $1936;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $1937 = self.idx;
                                                                                                var $1938 = self.code;
                                                                                                var $1939 = self.val;
                                                                                                var self = Fm$Parser$text$("=", $1937, $1938);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $1941 = self.idx;
                                                                                                        var $1942 = self.code;
                                                                                                        var $1943 = self.err;
                                                                                                        var $1944 = Parser$Reply$error$($1941, $1942, $1943);
                                                                                                        var $1940 = $1944;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $1945 = self.idx;
                                                                                                        var $1946 = self.code;
                                                                                                        var $1947 = self.val;
                                                                                                        var self = Fm$Parser$term$($1945, $1946);
                                                                                                        switch (self._) {
                                                                                                            case 'Parser.Reply.error':
                                                                                                                var $1949 = self.idx;
                                                                                                                var $1950 = self.code;
                                                                                                                var $1951 = self.err;
                                                                                                                var $1952 = Parser$Reply$error$($1949, $1950, $1951);
                                                                                                                var $1948 = $1952;
                                                                                                                break;
                                                                                                            case 'Parser.Reply.value':
                                                                                                                var $1953 = self.idx;
                                                                                                                var $1954 = self.code;
                                                                                                                var $1955 = self.val;
                                                                                                                var self = Parser$maybe$(Fm$Parser$text(";"), $1953, $1954);
                                                                                                                switch (self._) {
                                                                                                                    case 'Parser.Reply.error':
                                                                                                                        var $1957 = self.idx;
                                                                                                                        var $1958 = self.code;
                                                                                                                        var $1959 = self.err;
                                                                                                                        var $1960 = Parser$Reply$error$($1957, $1958, $1959);
                                                                                                                        var $1956 = $1960;
                                                                                                                        break;
                                                                                                                    case 'Parser.Reply.value':
                                                                                                                        var $1961 = self.idx;
                                                                                                                        var $1962 = self.code;
                                                                                                                        var $1963 = self.val;
                                                                                                                        var self = Fm$Parser$term$($1961, $1962);
                                                                                                                        switch (self._) {
                                                                                                                            case 'Parser.Reply.error':
                                                                                                                                var $1965 = self.idx;
                                                                                                                                var $1966 = self.code;
                                                                                                                                var $1967 = self.err;
                                                                                                                                var $1968 = Parser$Reply$error$($1965, $1966, $1967);
                                                                                                                                var $1964 = $1968;
                                                                                                                                break;
                                                                                                                            case 'Parser.Reply.value':
                                                                                                                                var $1969 = self.idx;
                                                                                                                                var $1970 = self.code;
                                                                                                                                var $1971 = self.val;
                                                                                                                                var self = Fm$Parser$stop$($1859, $1969, $1970);
                                                                                                                                switch (self._) {
                                                                                                                                    case 'Parser.Reply.error':
                                                                                                                                        var $1973 = self.idx;
                                                                                                                                        var $1974 = self.code;
                                                                                                                                        var $1975 = self.err;
                                                                                                                                        var $1976 = Parser$Reply$error$($1973, $1974, $1975);
                                                                                                                                        var $1972 = $1976;
                                                                                                                                        break;
                                                                                                                                    case 'Parser.Reply.value':
                                                                                                                                        var $1977 = self.idx;
                                                                                                                                        var $1978 = self.code;
                                                                                                                                        var $1979 = self.val;
                                                                                                                                        var _term$51 = Fm$Term$ref$("U32.for");
                                                                                                                                        var _term$52 = Fm$Term$app$(_term$51, Fm$Term$hol$(Bits$e));
                                                                                                                                        var _term$53 = Fm$Term$app$(_term$52, Fm$Term$ref$($1939));
                                                                                                                                        var _term$54 = Fm$Term$app$(_term$53, $1907);
                                                                                                                                        var _term$55 = Fm$Term$app$(_term$54, $1923);
                                                                                                                                        var _lamb$56 = Fm$Term$lam$($1875, (_e$56 => {
                                                                                                                                            var $1981 = Fm$Term$lam$($1939, (_s$57 => {
                                                                                                                                                var $1982 = $1955;
                                                                                                                                                return $1982;
                                                                                                                                            }));
                                                                                                                                            return $1981;
                                                                                                                                        }));
                                                                                                                                        var _term$57 = Fm$Term$app$(_term$55, _lamb$56);
                                                                                                                                        var _term$58 = Fm$Term$let$($1939, _term$57, (_x$58 => {
                                                                                                                                            var $1983 = $1971;
                                                                                                                                            return $1983;
                                                                                                                                        }));
                                                                                                                                        var $1980 = Parser$Reply$value$($1977, $1978, Fm$Term$ori$($1979, _term$58));
                                                                                                                                        var $1972 = $1980;
                                                                                                                                        break;
                                                                                                                                };
                                                                                                                                var $1964 = $1972;
                                                                                                                                break;
                                                                                                                        };
                                                                                                                        var $1956 = $1964;
                                                                                                                        break;
                                                                                                                };
                                                                                                                var $1948 = $1956;
                                                                                                                break;
                                                                                                        };
                                                                                                        var $1940 = $1948;
                                                                                                        break;
                                                                                                };
                                                                                                var $1932 = $1940;
                                                                                                break;
                                                                                        };
                                                                                        var $1924 = $1932;
                                                                                        break;
                                                                                };
                                                                                var $1916 = $1924;
                                                                                break;
                                                                        };
                                                                        var $1908 = $1916;
                                                                        break;
                                                                };
                                                                var $1900 = $1908;
                                                                break;
                                                        };
                                                        var $1892 = $1900;
                                                        break;
                                                };
                                                var $1884 = $1892;
                                                break;
                                        };
                                        var $1876 = $1884;
                                        break;
                                };
                                var $1868 = $1876;
                                break;
                        };
                        var $1860 = $1868;
                        break;
                };
                var $1852 = $1860;
                break;
        };
        return $1852;
    };
    const Fm$Parser$forrange$u32$2 = x0 => x1 => Fm$Parser$forrange$u32$2$(x0, x1);

    function Fm$Parser$forin$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $1985 = self.idx;
                var $1986 = self.code;
                var $1987 = self.err;
                var $1988 = Parser$Reply$error$($1985, $1986, $1987);
                var $1984 = $1988;
                break;
            case 'Parser.Reply.value':
                var $1989 = self.idx;
                var $1990 = self.code;
                var $1991 = self.val;
                var self = Fm$Parser$text$("for ", $1989, $1990);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $1993 = self.idx;
                        var $1994 = self.code;
                        var $1995 = self.err;
                        var $1996 = Parser$Reply$error$($1993, $1994, $1995);
                        var $1992 = $1996;
                        break;
                    case 'Parser.Reply.value':
                        var $1997 = self.idx;
                        var $1998 = self.code;
                        var $1999 = self.val;
                        var self = Fm$Parser$name1$($1997, $1998);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2001 = self.idx;
                                var $2002 = self.code;
                                var $2003 = self.err;
                                var $2004 = Parser$Reply$error$($2001, $2002, $2003);
                                var $2000 = $2004;
                                break;
                            case 'Parser.Reply.value':
                                var $2005 = self.idx;
                                var $2006 = self.code;
                                var $2007 = self.val;
                                var self = Fm$Parser$text$("in", $2005, $2006);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2009 = self.idx;
                                        var $2010 = self.code;
                                        var $2011 = self.err;
                                        var $2012 = Parser$Reply$error$($2009, $2010, $2011);
                                        var $2008 = $2012;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2013 = self.idx;
                                        var $2014 = self.code;
                                        var $2015 = self.val;
                                        var self = Fm$Parser$term$($2013, $2014);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2017 = self.idx;
                                                var $2018 = self.code;
                                                var $2019 = self.err;
                                                var $2020 = Parser$Reply$error$($2017, $2018, $2019);
                                                var $2016 = $2020;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2021 = self.idx;
                                                var $2022 = self.code;
                                                var $2023 = self.val;
                                                var self = Fm$Parser$text$("with", $2021, $2022);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2025 = self.idx;
                                                        var $2026 = self.code;
                                                        var $2027 = self.err;
                                                        var $2028 = Parser$Reply$error$($2025, $2026, $2027);
                                                        var $2024 = $2028;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2029 = self.idx;
                                                        var $2030 = self.code;
                                                        var $2031 = self.val;
                                                        var self = Fm$Parser$name1$($2029, $2030);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2033 = self.idx;
                                                                var $2034 = self.code;
                                                                var $2035 = self.err;
                                                                var $2036 = Parser$Reply$error$($2033, $2034, $2035);
                                                                var $2032 = $2036;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2037 = self.idx;
                                                                var $2038 = self.code;
                                                                var $2039 = self.val;
                                                                var self = Fm$Parser$text$(":", $2037, $2038);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2041 = self.idx;
                                                                        var $2042 = self.code;
                                                                        var $2043 = self.err;
                                                                        var $2044 = Parser$Reply$error$($2041, $2042, $2043);
                                                                        var $2040 = $2044;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2045 = self.idx;
                                                                        var $2046 = self.code;
                                                                        var $2047 = self.val;
                                                                        var self = Fm$Parser$term$($2045, $2046);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2049 = self.idx;
                                                                                var $2050 = self.code;
                                                                                var $2051 = self.err;
                                                                                var $2052 = Parser$Reply$error$($2049, $2050, $2051);
                                                                                var $2048 = $2052;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2053 = self.idx;
                                                                                var $2054 = self.code;
                                                                                var $2055 = self.val;
                                                                                var self = Fm$Parser$stop$($1991, $2053, $2054);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2057 = self.idx;
                                                                                        var $2058 = self.code;
                                                                                        var $2059 = self.err;
                                                                                        var $2060 = Parser$Reply$error$($2057, $2058, $2059);
                                                                                        var $2056 = $2060;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2061 = self.idx;
                                                                                        var $2062 = self.code;
                                                                                        var $2063 = self.val;
                                                                                        var _term$33 = Fm$Term$ref$("List.for");
                                                                                        var _term$34 = Fm$Term$app$(_term$33, Fm$Term$hol$(Bits$e));
                                                                                        var _term$35 = Fm$Term$app$(_term$34, $2023);
                                                                                        var _term$36 = Fm$Term$app$(_term$35, Fm$Term$hol$(Bits$e));
                                                                                        var _term$37 = Fm$Term$app$(_term$36, Fm$Term$ref$($2039));
                                                                                        var _lamb$38 = Fm$Term$lam$($2007, (_i$38 => {
                                                                                            var $2065 = Fm$Term$lam$($2039, (_x$39 => {
                                                                                                var $2066 = $2055;
                                                                                                return $2066;
                                                                                            }));
                                                                                            return $2065;
                                                                                        }));
                                                                                        var _term$39 = Fm$Term$app$(_term$37, _lamb$38);
                                                                                        var _term$40 = Fm$Term$let$($2039, _term$39, (_x$40 => {
                                                                                            var $2067 = Fm$Term$ref$($2039);
                                                                                            return $2067;
                                                                                        }));
                                                                                        var $2064 = Parser$Reply$value$($2061, $2062, Fm$Term$ori$($2063, _term$40));
                                                                                        var $2056 = $2064;
                                                                                        break;
                                                                                };
                                                                                var $2048 = $2056;
                                                                                break;
                                                                        };
                                                                        var $2040 = $2048;
                                                                        break;
                                                                };
                                                                var $2032 = $2040;
                                                                break;
                                                        };
                                                        var $2024 = $2032;
                                                        break;
                                                };
                                                var $2016 = $2024;
                                                break;
                                        };
                                        var $2008 = $2016;
                                        break;
                                };
                                var $2000 = $2008;
                                break;
                        };
                        var $1992 = $2000;
                        break;
                };
                var $1984 = $1992;
                break;
        };
        return $1984;
    };
    const Fm$Parser$forin = x0 => x1 => Fm$Parser$forin$(x0, x1);

    function Fm$Parser$forin$2$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2069 = self.idx;
                var $2070 = self.code;
                var $2071 = self.err;
                var $2072 = Parser$Reply$error$($2069, $2070, $2071);
                var $2068 = $2072;
                break;
            case 'Parser.Reply.value':
                var $2073 = self.idx;
                var $2074 = self.code;
                var $2075 = self.val;
                var self = Fm$Parser$text$("for ", $2073, $2074);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2077 = self.idx;
                        var $2078 = self.code;
                        var $2079 = self.err;
                        var $2080 = Parser$Reply$error$($2077, $2078, $2079);
                        var $2076 = $2080;
                        break;
                    case 'Parser.Reply.value':
                        var $2081 = self.idx;
                        var $2082 = self.code;
                        var $2083 = self.val;
                        var self = Fm$Parser$name1$($2081, $2082);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2085 = self.idx;
                                var $2086 = self.code;
                                var $2087 = self.err;
                                var $2088 = Parser$Reply$error$($2085, $2086, $2087);
                                var $2084 = $2088;
                                break;
                            case 'Parser.Reply.value':
                                var $2089 = self.idx;
                                var $2090 = self.code;
                                var $2091 = self.val;
                                var self = Fm$Parser$text$("in", $2089, $2090);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2093 = self.idx;
                                        var $2094 = self.code;
                                        var $2095 = self.err;
                                        var $2096 = Parser$Reply$error$($2093, $2094, $2095);
                                        var $2092 = $2096;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2097 = self.idx;
                                        var $2098 = self.code;
                                        var $2099 = self.val;
                                        var self = Fm$Parser$term$($2097, $2098);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2101 = self.idx;
                                                var $2102 = self.code;
                                                var $2103 = self.err;
                                                var $2104 = Parser$Reply$error$($2101, $2102, $2103);
                                                var $2100 = $2104;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2105 = self.idx;
                                                var $2106 = self.code;
                                                var $2107 = self.val;
                                                var self = Fm$Parser$text$(":", $2105, $2106);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2109 = self.idx;
                                                        var $2110 = self.code;
                                                        var $2111 = self.err;
                                                        var $2112 = Parser$Reply$error$($2109, $2110, $2111);
                                                        var $2108 = $2112;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2113 = self.idx;
                                                        var $2114 = self.code;
                                                        var $2115 = self.val;
                                                        var self = Fm$Parser$name1$($2113, $2114);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2117 = self.idx;
                                                                var $2118 = self.code;
                                                                var $2119 = self.err;
                                                                var $2120 = Parser$Reply$error$($2117, $2118, $2119);
                                                                var $2116 = $2120;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2121 = self.idx;
                                                                var $2122 = self.code;
                                                                var $2123 = self.val;
                                                                var self = Fm$Parser$text$("=", $2121, $2122);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2125 = self.idx;
                                                                        var $2126 = self.code;
                                                                        var $2127 = self.err;
                                                                        var $2128 = Parser$Reply$error$($2125, $2126, $2127);
                                                                        var $2124 = $2128;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2129 = self.idx;
                                                                        var $2130 = self.code;
                                                                        var $2131 = self.val;
                                                                        var self = Fm$Parser$term$($2129, $2130);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2133 = self.idx;
                                                                                var $2134 = self.code;
                                                                                var $2135 = self.err;
                                                                                var $2136 = Parser$Reply$error$($2133, $2134, $2135);
                                                                                var $2132 = $2136;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2137 = self.idx;
                                                                                var $2138 = self.code;
                                                                                var $2139 = self.val;
                                                                                var self = Parser$maybe$(Fm$Parser$text(";"), $2137, $2138);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2141 = self.idx;
                                                                                        var $2142 = self.code;
                                                                                        var $2143 = self.err;
                                                                                        var $2144 = Parser$Reply$error$($2141, $2142, $2143);
                                                                                        var $2140 = $2144;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2145 = self.idx;
                                                                                        var $2146 = self.code;
                                                                                        var $2147 = self.val;
                                                                                        var self = Fm$Parser$term$($2145, $2146);
                                                                                        switch (self._) {
                                                                                            case 'Parser.Reply.error':
                                                                                                var $2149 = self.idx;
                                                                                                var $2150 = self.code;
                                                                                                var $2151 = self.err;
                                                                                                var $2152 = Parser$Reply$error$($2149, $2150, $2151);
                                                                                                var $2148 = $2152;
                                                                                                break;
                                                                                            case 'Parser.Reply.value':
                                                                                                var $2153 = self.idx;
                                                                                                var $2154 = self.code;
                                                                                                var $2155 = self.val;
                                                                                                var self = Fm$Parser$stop$($2075, $2153, $2154);
                                                                                                switch (self._) {
                                                                                                    case 'Parser.Reply.error':
                                                                                                        var $2157 = self.idx;
                                                                                                        var $2158 = self.code;
                                                                                                        var $2159 = self.err;
                                                                                                        var $2160 = Parser$Reply$error$($2157, $2158, $2159);
                                                                                                        var $2156 = $2160;
                                                                                                        break;
                                                                                                    case 'Parser.Reply.value':
                                                                                                        var $2161 = self.idx;
                                                                                                        var $2162 = self.code;
                                                                                                        var $2163 = self.val;
                                                                                                        var _term$39 = Fm$Term$ref$("List.for");
                                                                                                        var _term$40 = Fm$Term$app$(_term$39, Fm$Term$hol$(Bits$e));
                                                                                                        var _term$41 = Fm$Term$app$(_term$40, $2107);
                                                                                                        var _term$42 = Fm$Term$app$(_term$41, Fm$Term$hol$(Bits$e));
                                                                                                        var _term$43 = Fm$Term$app$(_term$42, Fm$Term$ref$($2123));
                                                                                                        var _lamb$44 = Fm$Term$lam$($2091, (_i$44 => {
                                                                                                            var $2165 = Fm$Term$lam$($2123, (_x$45 => {
                                                                                                                var $2166 = $2139;
                                                                                                                return $2166;
                                                                                                            }));
                                                                                                            return $2165;
                                                                                                        }));
                                                                                                        var _term$45 = Fm$Term$app$(_term$43, _lamb$44);
                                                                                                        var _term$46 = Fm$Term$let$($2123, _term$45, (_x$46 => {
                                                                                                            var $2167 = $2155;
                                                                                                            return $2167;
                                                                                                        }));
                                                                                                        var $2164 = Parser$Reply$value$($2161, $2162, Fm$Term$ori$($2163, _term$46));
                                                                                                        var $2156 = $2164;
                                                                                                        break;
                                                                                                };
                                                                                                var $2148 = $2156;
                                                                                                break;
                                                                                        };
                                                                                        var $2140 = $2148;
                                                                                        break;
                                                                                };
                                                                                var $2132 = $2140;
                                                                                break;
                                                                        };
                                                                        var $2124 = $2132;
                                                                        break;
                                                                };
                                                                var $2116 = $2124;
                                                                break;
                                                        };
                                                        var $2108 = $2116;
                                                        break;
                                                };
                                                var $2100 = $2108;
                                                break;
                                        };
                                        var $2092 = $2100;
                                        break;
                                };
                                var $2084 = $2092;
                                break;
                        };
                        var $2076 = $2084;
                        break;
                };
                var $2068 = $2076;
                break;
        };
        return $2068;
    };
    const Fm$Parser$forin$2 = x0 => x1 => Fm$Parser$forin$2$(x0, x1);

    function Fm$Parser$do$statements$(_monad_name$1) {
        var $2168 = Parser$first_of$(List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2170 = self.idx;
                    var $2171 = self.code;
                    var $2172 = self.err;
                    var $2173 = Parser$Reply$error$($2170, $2171, $2172);
                    var $2169 = $2173;
                    break;
                case 'Parser.Reply.value':
                    var $2174 = self.idx;
                    var $2175 = self.code;
                    var $2176 = self.val;
                    var self = Fm$Parser$text$("var ", $2174, $2175);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2178 = self.idx;
                            var $2179 = self.code;
                            var $2180 = self.err;
                            var $2181 = Parser$Reply$error$($2178, $2179, $2180);
                            var $2177 = $2181;
                            break;
                        case 'Parser.Reply.value':
                            var $2182 = self.idx;
                            var $2183 = self.code;
                            var $2184 = self.val;
                            var self = Fm$Parser$name1$($2182, $2183);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2186 = self.idx;
                                    var $2187 = self.code;
                                    var $2188 = self.err;
                                    var $2189 = Parser$Reply$error$($2186, $2187, $2188);
                                    var $2185 = $2189;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2190 = self.idx;
                                    var $2191 = self.code;
                                    var $2192 = self.val;
                                    var self = Fm$Parser$text$("=", $2190, $2191);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2194 = self.idx;
                                            var $2195 = self.code;
                                            var $2196 = self.err;
                                            var $2197 = Parser$Reply$error$($2194, $2195, $2196);
                                            var $2193 = $2197;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2198 = self.idx;
                                            var $2199 = self.code;
                                            var $2200 = self.val;
                                            var self = Fm$Parser$term$($2198, $2199);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2202 = self.idx;
                                                    var $2203 = self.code;
                                                    var $2204 = self.err;
                                                    var $2205 = Parser$Reply$error$($2202, $2203, $2204);
                                                    var $2201 = $2205;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2206 = self.idx;
                                                    var $2207 = self.code;
                                                    var $2208 = self.val;
                                                    var self = Parser$maybe$(Fm$Parser$text(";"), $2206, $2207);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $2210 = self.idx;
                                                            var $2211 = self.code;
                                                            var $2212 = self.err;
                                                            var $2213 = Parser$Reply$error$($2210, $2211, $2212);
                                                            var $2209 = $2213;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $2214 = self.idx;
                                                            var $2215 = self.code;
                                                            var $2216 = self.val;
                                                            var self = Fm$Parser$do$statements$(_monad_name$1)($2214)($2215);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $2218 = self.idx;
                                                                    var $2219 = self.code;
                                                                    var $2220 = self.err;
                                                                    var $2221 = Parser$Reply$error$($2218, $2219, $2220);
                                                                    var $2217 = $2221;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $2222 = self.idx;
                                                                    var $2223 = self.code;
                                                                    var $2224 = self.val;
                                                                    var self = Fm$Parser$stop$($2176, $2222, $2223);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $2226 = self.idx;
                                                                            var $2227 = self.code;
                                                                            var $2228 = self.err;
                                                                            var $2229 = Parser$Reply$error$($2226, $2227, $2228);
                                                                            var $2225 = $2229;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $2230 = self.idx;
                                                                            var $2231 = self.code;
                                                                            var $2232 = self.val;
                                                                            var _term$28 = Fm$Term$app$(Fm$Term$ref$("Monad.bind"), Fm$Term$ref$(_monad_name$1));
                                                                            var _term$29 = Fm$Term$app$(_term$28, Fm$Term$ref$((_monad_name$1 + ".monad")));
                                                                            var _term$30 = Fm$Term$app$(_term$29, Fm$Term$hol$(Bits$e));
                                                                            var _term$31 = Fm$Term$app$(_term$30, Fm$Term$hol$(Bits$e));
                                                                            var _term$32 = Fm$Term$app$(_term$31, $2208);
                                                                            var _term$33 = Fm$Term$app$(_term$32, Fm$Term$lam$($2192, (_x$33 => {
                                                                                var $2234 = $2224;
                                                                                return $2234;
                                                                            })));
                                                                            var $2233 = Parser$Reply$value$($2230, $2231, Fm$Term$ori$($2232, _term$33));
                                                                            var $2225 = $2233;
                                                                            break;
                                                                    };
                                                                    var $2217 = $2225;
                                                                    break;
                                                            };
                                                            var $2209 = $2217;
                                                            break;
                                                    };
                                                    var $2201 = $2209;
                                                    break;
                                            };
                                            var $2193 = $2201;
                                            break;
                                    };
                                    var $2185 = $2193;
                                    break;
                            };
                            var $2177 = $2185;
                            break;
                    };
                    var $2169 = $2177;
                    break;
            };
            return $2169;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2236 = self.idx;
                    var $2237 = self.code;
                    var $2238 = self.err;
                    var $2239 = Parser$Reply$error$($2236, $2237, $2238);
                    var $2235 = $2239;
                    break;
                case 'Parser.Reply.value':
                    var $2240 = self.idx;
                    var $2241 = self.code;
                    var $2242 = self.val;
                    var self = Fm$Parser$text$("let ", $2240, $2241);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2244 = self.idx;
                            var $2245 = self.code;
                            var $2246 = self.err;
                            var $2247 = Parser$Reply$error$($2244, $2245, $2246);
                            var $2243 = $2247;
                            break;
                        case 'Parser.Reply.value':
                            var $2248 = self.idx;
                            var $2249 = self.code;
                            var $2250 = self.val;
                            var self = Fm$Parser$name1$($2248, $2249);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2252 = self.idx;
                                    var $2253 = self.code;
                                    var $2254 = self.err;
                                    var $2255 = Parser$Reply$error$($2252, $2253, $2254);
                                    var $2251 = $2255;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2256 = self.idx;
                                    var $2257 = self.code;
                                    var $2258 = self.val;
                                    var self = Fm$Parser$text$("=", $2256, $2257);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2260 = self.idx;
                                            var $2261 = self.code;
                                            var $2262 = self.err;
                                            var $2263 = Parser$Reply$error$($2260, $2261, $2262);
                                            var $2259 = $2263;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2264 = self.idx;
                                            var $2265 = self.code;
                                            var $2266 = self.val;
                                            var self = Fm$Parser$term$($2264, $2265);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2268 = self.idx;
                                                    var $2269 = self.code;
                                                    var $2270 = self.err;
                                                    var $2271 = Parser$Reply$error$($2268, $2269, $2270);
                                                    var $2267 = $2271;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2272 = self.idx;
                                                    var $2273 = self.code;
                                                    var $2274 = self.val;
                                                    var self = Parser$maybe$(Fm$Parser$text(";"), $2272, $2273);
                                                    switch (self._) {
                                                        case 'Parser.Reply.error':
                                                            var $2276 = self.idx;
                                                            var $2277 = self.code;
                                                            var $2278 = self.err;
                                                            var $2279 = Parser$Reply$error$($2276, $2277, $2278);
                                                            var $2275 = $2279;
                                                            break;
                                                        case 'Parser.Reply.value':
                                                            var $2280 = self.idx;
                                                            var $2281 = self.code;
                                                            var $2282 = self.val;
                                                            var self = Fm$Parser$do$statements$(_monad_name$1)($2280)($2281);
                                                            switch (self._) {
                                                                case 'Parser.Reply.error':
                                                                    var $2284 = self.idx;
                                                                    var $2285 = self.code;
                                                                    var $2286 = self.err;
                                                                    var $2287 = Parser$Reply$error$($2284, $2285, $2286);
                                                                    var $2283 = $2287;
                                                                    break;
                                                                case 'Parser.Reply.value':
                                                                    var $2288 = self.idx;
                                                                    var $2289 = self.code;
                                                                    var $2290 = self.val;
                                                                    var self = Fm$Parser$stop$($2242, $2288, $2289);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $2292 = self.idx;
                                                                            var $2293 = self.code;
                                                                            var $2294 = self.err;
                                                                            var $2295 = Parser$Reply$error$($2292, $2293, $2294);
                                                                            var $2291 = $2295;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $2296 = self.idx;
                                                                            var $2297 = self.code;
                                                                            var $2298 = self.val;
                                                                            var $2299 = Parser$Reply$value$($2296, $2297, Fm$Term$ori$($2298, Fm$Term$let$($2258, $2274, (_x$28 => {
                                                                                var $2300 = $2290;
                                                                                return $2300;
                                                                            }))));
                                                                            var $2291 = $2299;
                                                                            break;
                                                                    };
                                                                    var $2283 = $2291;
                                                                    break;
                                                            };
                                                            var $2275 = $2283;
                                                            break;
                                                    };
                                                    var $2267 = $2275;
                                                    break;
                                            };
                                            var $2259 = $2267;
                                            break;
                                    };
                                    var $2251 = $2259;
                                    break;
                            };
                            var $2243 = $2251;
                            break;
                    };
                    var $2235 = $2243;
                    break;
            };
            return $2235;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2302 = self.idx;
                    var $2303 = self.code;
                    var $2304 = self.err;
                    var $2305 = Parser$Reply$error$($2302, $2303, $2304);
                    var $2301 = $2305;
                    break;
                case 'Parser.Reply.value':
                    var $2306 = self.idx;
                    var $2307 = self.code;
                    var $2308 = self.val;
                    var self = Fm$Parser$text$("return ", $2306, $2307);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2310 = self.idx;
                            var $2311 = self.code;
                            var $2312 = self.err;
                            var $2313 = Parser$Reply$error$($2310, $2311, $2312);
                            var $2309 = $2313;
                            break;
                        case 'Parser.Reply.value':
                            var $2314 = self.idx;
                            var $2315 = self.code;
                            var $2316 = self.val;
                            var self = Fm$Parser$term$($2314, $2315);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2318 = self.idx;
                                    var $2319 = self.code;
                                    var $2320 = self.err;
                                    var $2321 = Parser$Reply$error$($2318, $2319, $2320);
                                    var $2317 = $2321;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2322 = self.idx;
                                    var $2323 = self.code;
                                    var $2324 = self.val;
                                    var self = Parser$maybe$(Fm$Parser$text(";"), $2322, $2323);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2326 = self.idx;
                                            var $2327 = self.code;
                                            var $2328 = self.err;
                                            var $2329 = Parser$Reply$error$($2326, $2327, $2328);
                                            var $2325 = $2329;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2330 = self.idx;
                                            var $2331 = self.code;
                                            var $2332 = self.val;
                                            var self = Fm$Parser$stop$($2308, $2330, $2331);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2334 = self.idx;
                                                    var $2335 = self.code;
                                                    var $2336 = self.err;
                                                    var $2337 = Parser$Reply$error$($2334, $2335, $2336);
                                                    var $2333 = $2337;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2338 = self.idx;
                                                    var $2339 = self.code;
                                                    var $2340 = self.val;
                                                    var _term$19 = Fm$Term$app$(Fm$Term$ref$("Monad.pure"), Fm$Term$ref$(_monad_name$1));
                                                    var _term$20 = Fm$Term$app$(_term$19, Fm$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Fm$Term$app$(_term$20, Fm$Term$hol$(Bits$e));
                                                    var _term$22 = Fm$Term$app$(_term$21, $2324);
                                                    var $2341 = Parser$Reply$value$($2338, $2339, Fm$Term$ori$($2340, _term$22));
                                                    var $2333 = $2341;
                                                    break;
                                            };
                                            var $2325 = $2333;
                                            break;
                                    };
                                    var $2317 = $2325;
                                    break;
                            };
                            var $2309 = $2317;
                            break;
                    };
                    var $2301 = $2309;
                    break;
            };
            return $2301;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$init$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2343 = self.idx;
                    var $2344 = self.code;
                    var $2345 = self.err;
                    var $2346 = Parser$Reply$error$($2343, $2344, $2345);
                    var $2342 = $2346;
                    break;
                case 'Parser.Reply.value':
                    var $2347 = self.idx;
                    var $2348 = self.code;
                    var $2349 = self.val;
                    var self = Fm$Parser$term$($2347, $2348);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2351 = self.idx;
                            var $2352 = self.code;
                            var $2353 = self.err;
                            var $2354 = Parser$Reply$error$($2351, $2352, $2353);
                            var $2350 = $2354;
                            break;
                        case 'Parser.Reply.value':
                            var $2355 = self.idx;
                            var $2356 = self.code;
                            var $2357 = self.val;
                            var self = Parser$maybe$(Fm$Parser$text(";"), $2355, $2356);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $2359 = self.idx;
                                    var $2360 = self.code;
                                    var $2361 = self.err;
                                    var $2362 = Parser$Reply$error$($2359, $2360, $2361);
                                    var $2358 = $2362;
                                    break;
                                case 'Parser.Reply.value':
                                    var $2363 = self.idx;
                                    var $2364 = self.code;
                                    var $2365 = self.val;
                                    var self = Fm$Parser$do$statements$(_monad_name$1)($2363)($2364);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $2367 = self.idx;
                                            var $2368 = self.code;
                                            var $2369 = self.err;
                                            var $2370 = Parser$Reply$error$($2367, $2368, $2369);
                                            var $2366 = $2370;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $2371 = self.idx;
                                            var $2372 = self.code;
                                            var $2373 = self.val;
                                            var self = Fm$Parser$stop$($2349, $2371, $2372);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2375 = self.idx;
                                                    var $2376 = self.code;
                                                    var $2377 = self.err;
                                                    var $2378 = Parser$Reply$error$($2375, $2376, $2377);
                                                    var $2374 = $2378;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2379 = self.idx;
                                                    var $2380 = self.code;
                                                    var $2381 = self.val;
                                                    var _term$19 = Fm$Term$app$(Fm$Term$ref$("Monad.bind"), Fm$Term$ref$(_monad_name$1));
                                                    var _term$20 = Fm$Term$app$(_term$19, Fm$Term$ref$((_monad_name$1 + ".monad")));
                                                    var _term$21 = Fm$Term$app$(_term$20, Fm$Term$hol$(Bits$e));
                                                    var _term$22 = Fm$Term$app$(_term$21, Fm$Term$hol$(Bits$e));
                                                    var _term$23 = Fm$Term$app$(_term$22, $2357);
                                                    var _term$24 = Fm$Term$app$(_term$23, Fm$Term$lam$("", (_x$24 => {
                                                        var $2383 = $2373;
                                                        return $2383;
                                                    })));
                                                    var $2382 = Parser$Reply$value$($2379, $2380, Fm$Term$ori$($2381, _term$24));
                                                    var $2374 = $2382;
                                                    break;
                                            };
                                            var $2366 = $2374;
                                            break;
                                    };
                                    var $2358 = $2366;
                                    break;
                            };
                            var $2350 = $2358;
                            break;
                    };
                    var $2342 = $2350;
                    break;
            };
            return $2342;
        }), List$cons$((_idx$2 => _code$3 => {
            var self = Fm$Parser$term$(_idx$2, _code$3);
            switch (self._) {
                case 'Parser.Reply.error':
                    var $2385 = self.idx;
                    var $2386 = self.code;
                    var $2387 = self.err;
                    var $2388 = Parser$Reply$error$($2385, $2386, $2387);
                    var $2384 = $2388;
                    break;
                case 'Parser.Reply.value':
                    var $2389 = self.idx;
                    var $2390 = self.code;
                    var $2391 = self.val;
                    var self = Parser$maybe$(Fm$Parser$text(";"), $2389, $2390);
                    switch (self._) {
                        case 'Parser.Reply.error':
                            var $2393 = self.idx;
                            var $2394 = self.code;
                            var $2395 = self.err;
                            var $2396 = Parser$Reply$error$($2393, $2394, $2395);
                            var $2392 = $2396;
                            break;
                        case 'Parser.Reply.value':
                            var $2397 = self.idx;
                            var $2398 = self.code;
                            var $2399 = self.val;
                            var $2400 = Parser$Reply$value$($2397, $2398, $2391);
                            var $2392 = $2400;
                            break;
                    };
                    var $2384 = $2392;
                    break;
            };
            return $2384;
        }), List$nil))))));
        return $2168;
    };
    const Fm$Parser$do$statements = x0 => Fm$Parser$do$statements$(x0);

    function Fm$Parser$do$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("do ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2402 = self.idx;
                var $2403 = self.code;
                var $2404 = self.err;
                var $2405 = Parser$Reply$error$($2402, $2403, $2404);
                var $2401 = $2405;
                break;
            case 'Parser.Reply.value':
                var $2406 = self.idx;
                var $2407 = self.code;
                var $2408 = self.val;
                var self = Fm$Parser$name1$($2406, $2407);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2410 = self.idx;
                        var $2411 = self.code;
                        var $2412 = self.err;
                        var $2413 = Parser$Reply$error$($2410, $2411, $2412);
                        var $2409 = $2413;
                        break;
                    case 'Parser.Reply.value':
                        var $2414 = self.idx;
                        var $2415 = self.code;
                        var $2416 = self.val;
                        var self = Fm$Parser$text$("{", $2414, $2415);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2418 = self.idx;
                                var $2419 = self.code;
                                var $2420 = self.err;
                                var $2421 = Parser$Reply$error$($2418, $2419, $2420);
                                var $2417 = $2421;
                                break;
                            case 'Parser.Reply.value':
                                var $2422 = self.idx;
                                var $2423 = self.code;
                                var $2424 = self.val;
                                var self = Fm$Parser$do$statements$($2416)($2422)($2423);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2426 = self.idx;
                                        var $2427 = self.code;
                                        var $2428 = self.err;
                                        var $2429 = Parser$Reply$error$($2426, $2427, $2428);
                                        var $2425 = $2429;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2430 = self.idx;
                                        var $2431 = self.code;
                                        var $2432 = self.val;
                                        var self = Fm$Parser$text$("}", $2430, $2431);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2434 = self.idx;
                                                var $2435 = self.code;
                                                var $2436 = self.err;
                                                var $2437 = Parser$Reply$error$($2434, $2435, $2436);
                                                var $2433 = $2437;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2438 = self.idx;
                                                var $2439 = self.code;
                                                var $2440 = self.val;
                                                var $2441 = Parser$Reply$value$($2438, $2439, $2432);
                                                var $2433 = $2441;
                                                break;
                                        };
                                        var $2425 = $2433;
                                        break;
                                };
                                var $2417 = $2425;
                                break;
                        };
                        var $2409 = $2417;
                        break;
                };
                var $2401 = $2409;
                break;
        };
        return $2401;
    };
    const Fm$Parser$do = x0 => x1 => Fm$Parser$do$(x0, x1);

    function Fm$Term$nat$(_natx$1) {
        var $2442 = ({
            _: 'Fm.Term.nat',
            'natx': _natx$1
        });
        return $2442;
    };
    const Fm$Term$nat = x0 => Fm$Term$nat$(x0);

    function Fm$Term$unroll_nat$(_natx$1) {
        var self = _natx$1;
        if (self === 0n) {
            var $2444 = Fm$Term$ref$(Fm$Name$read$("Nat.zero"));
            var $2443 = $2444;
        } else {
            var $2445 = (self - 1n);
            var _func$3 = Fm$Term$ref$(Fm$Name$read$("Nat.succ"));
            var _argm$4 = Fm$Term$nat$($2445);
            var $2446 = Fm$Term$app$(_func$3, _argm$4);
            var $2443 = $2446;
        };
        return $2443;
    };
    const Fm$Term$unroll_nat = x0 => Fm$Term$unroll_nat$(x0);
    const U16$to_bits = a0 => (u16_to_bits(a0));

    function Fm$Term$unroll_chr$bits$(_bits$1) {
        var self = _bits$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $2448 = Fm$Term$ref$(Fm$Name$read$("Bits.e"));
                var $2447 = $2448;
                break;
            case 'o':
                var $2449 = self.slice(0, -1);
                var $2450 = Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("Bits.o")), Fm$Term$unroll_chr$bits$($2449));
                var $2447 = $2450;
                break;
            case 'i':
                var $2451 = self.slice(0, -1);
                var $2452 = Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("Bits.i")), Fm$Term$unroll_chr$bits$($2451));
                var $2447 = $2452;
                break;
        };
        return $2447;
    };
    const Fm$Term$unroll_chr$bits = x0 => Fm$Term$unroll_chr$bits$(x0);

    function Fm$Term$unroll_chr$(_chrx$1) {
        var _bits$2 = (u16_to_bits(_chrx$1));
        var _term$3 = Fm$Term$ref$(Fm$Name$read$("Word.from_bits"));
        var _term$4 = Fm$Term$app$(_term$3, Fm$Term$nat$(16n));
        var _term$5 = Fm$Term$app$(_term$4, Fm$Term$unroll_chr$bits$(_bits$2));
        var _term$6 = Fm$Term$app$(Fm$Term$ref$(Fm$Name$read$("U16.new")), _term$5);
        var $2453 = _term$6;
        return $2453;
    };
    const Fm$Term$unroll_chr = x0 => Fm$Term$unroll_chr$(x0);

    function Fm$Term$unroll_str$(_strx$1) {
        var self = _strx$1;
        if (self.length === 0) {
            var $2455 = Fm$Term$ref$(Fm$Name$read$("String.nil"));
            var $2454 = $2455;
        } else {
            var $2456 = self.charCodeAt(0);
            var $2457 = self.slice(1);
            var _char$4 = Fm$Term$chr$($2456);
            var _term$5 = Fm$Term$ref$(Fm$Name$read$("String.cons"));
            var _term$6 = Fm$Term$app$(_term$5, _char$4);
            var _term$7 = Fm$Term$app$(_term$6, Fm$Term$str$($2457));
            var $2458 = _term$7;
            var $2454 = $2458;
        };
        return $2454;
    };
    const Fm$Term$unroll_str = x0 => Fm$Term$unroll_str$(x0);

    function Fm$Term$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $2460 = self.name;
                var $2461 = self.indx;
                var $2462 = _term$1;
                var $2459 = $2462;
                break;
            case 'Fm.Term.ref':
                var $2463 = self.name;
                var self = Fm$get$($2463, _defs$2);
                switch (self._) {
                    case 'Maybe.none':
                        var $2465 = Fm$Term$ref$($2463);
                        var $2464 = $2465;
                        break;
                    case 'Maybe.some':
                        var $2466 = self.value;
                        var self = $2466;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $2468 = self.file;
                                var $2469 = self.code;
                                var $2470 = self.name;
                                var $2471 = self.term;
                                var $2472 = self.type;
                                var $2473 = self.stat;
                                var $2474 = Fm$Term$reduce$($2471, _defs$2);
                                var $2467 = $2474;
                                break;
                        };
                        var $2464 = $2467;
                        break;
                };
                var $2459 = $2464;
                break;
            case 'Fm.Term.typ':
                var $2475 = _term$1;
                var $2459 = $2475;
                break;
            case 'Fm.Term.all':
                var $2476 = self.eras;
                var $2477 = self.self;
                var $2478 = self.name;
                var $2479 = self.xtyp;
                var $2480 = self.body;
                var $2481 = _term$1;
                var $2459 = $2481;
                break;
            case 'Fm.Term.lam':
                var $2482 = self.name;
                var $2483 = self.body;
                var $2484 = _term$1;
                var $2459 = $2484;
                break;
            case 'Fm.Term.app':
                var $2485 = self.func;
                var $2486 = self.argm;
                var _func$5 = Fm$Term$reduce$($2485, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $2488 = self.name;
                        var $2489 = self.indx;
                        var $2490 = _term$1;
                        var $2487 = $2490;
                        break;
                    case 'Fm.Term.ref':
                        var $2491 = self.name;
                        var $2492 = _term$1;
                        var $2487 = $2492;
                        break;
                    case 'Fm.Term.typ':
                        var $2493 = _term$1;
                        var $2487 = $2493;
                        break;
                    case 'Fm.Term.all':
                        var $2494 = self.eras;
                        var $2495 = self.self;
                        var $2496 = self.name;
                        var $2497 = self.xtyp;
                        var $2498 = self.body;
                        var $2499 = _term$1;
                        var $2487 = $2499;
                        break;
                    case 'Fm.Term.lam':
                        var $2500 = self.name;
                        var $2501 = self.body;
                        var $2502 = Fm$Term$reduce$($2501($2486), _defs$2);
                        var $2487 = $2502;
                        break;
                    case 'Fm.Term.app':
                        var $2503 = self.func;
                        var $2504 = self.argm;
                        var $2505 = _term$1;
                        var $2487 = $2505;
                        break;
                    case 'Fm.Term.let':
                        var $2506 = self.name;
                        var $2507 = self.expr;
                        var $2508 = self.body;
                        var $2509 = _term$1;
                        var $2487 = $2509;
                        break;
                    case 'Fm.Term.def':
                        var $2510 = self.name;
                        var $2511 = self.expr;
                        var $2512 = self.body;
                        var $2513 = _term$1;
                        var $2487 = $2513;
                        break;
                    case 'Fm.Term.ann':
                        var $2514 = self.done;
                        var $2515 = self.term;
                        var $2516 = self.type;
                        var $2517 = _term$1;
                        var $2487 = $2517;
                        break;
                    case 'Fm.Term.gol':
                        var $2518 = self.name;
                        var $2519 = self.dref;
                        var $2520 = self.verb;
                        var $2521 = _term$1;
                        var $2487 = $2521;
                        break;
                    case 'Fm.Term.hol':
                        var $2522 = self.path;
                        var $2523 = _term$1;
                        var $2487 = $2523;
                        break;
                    case 'Fm.Term.nat':
                        var $2524 = self.natx;
                        var $2525 = _term$1;
                        var $2487 = $2525;
                        break;
                    case 'Fm.Term.chr':
                        var $2526 = self.chrx;
                        var $2527 = _term$1;
                        var $2487 = $2527;
                        break;
                    case 'Fm.Term.str':
                        var $2528 = self.strx;
                        var $2529 = _term$1;
                        var $2487 = $2529;
                        break;
                    case 'Fm.Term.cse':
                        var $2530 = self.path;
                        var $2531 = self.expr;
                        var $2532 = self.name;
                        var $2533 = self.with;
                        var $2534 = self.cses;
                        var $2535 = self.moti;
                        var $2536 = _term$1;
                        var $2487 = $2536;
                        break;
                    case 'Fm.Term.ori':
                        var $2537 = self.orig;
                        var $2538 = self.expr;
                        var $2539 = _term$1;
                        var $2487 = $2539;
                        break;
                };
                var $2459 = $2487;
                break;
            case 'Fm.Term.let':
                var $2540 = self.name;
                var $2541 = self.expr;
                var $2542 = self.body;
                var $2543 = Fm$Term$reduce$($2542($2541), _defs$2);
                var $2459 = $2543;
                break;
            case 'Fm.Term.def':
                var $2544 = self.name;
                var $2545 = self.expr;
                var $2546 = self.body;
                var $2547 = Fm$Term$reduce$($2546($2545), _defs$2);
                var $2459 = $2547;
                break;
            case 'Fm.Term.ann':
                var $2548 = self.done;
                var $2549 = self.term;
                var $2550 = self.type;
                var $2551 = Fm$Term$reduce$($2549, _defs$2);
                var $2459 = $2551;
                break;
            case 'Fm.Term.gol':
                var $2552 = self.name;
                var $2553 = self.dref;
                var $2554 = self.verb;
                var $2555 = _term$1;
                var $2459 = $2555;
                break;
            case 'Fm.Term.hol':
                var $2556 = self.path;
                var $2557 = _term$1;
                var $2459 = $2557;
                break;
            case 'Fm.Term.nat':
                var $2558 = self.natx;
                var $2559 = Fm$Term$reduce$(Fm$Term$unroll_nat$($2558), _defs$2);
                var $2459 = $2559;
                break;
            case 'Fm.Term.chr':
                var $2560 = self.chrx;
                var $2561 = Fm$Term$reduce$(Fm$Term$unroll_chr$($2560), _defs$2);
                var $2459 = $2561;
                break;
            case 'Fm.Term.str':
                var $2562 = self.strx;
                var $2563 = Fm$Term$reduce$(Fm$Term$unroll_str$($2562), _defs$2);
                var $2459 = $2563;
                break;
            case 'Fm.Term.cse':
                var $2564 = self.path;
                var $2565 = self.expr;
                var $2566 = self.name;
                var $2567 = self.with;
                var $2568 = self.cses;
                var $2569 = self.moti;
                var $2570 = _term$1;
                var $2459 = $2570;
                break;
            case 'Fm.Term.ori':
                var $2571 = self.orig;
                var $2572 = self.expr;
                var $2573 = Fm$Term$reduce$($2572, _defs$2);
                var $2459 = $2573;
                break;
        };
        return $2459;
    };
    const Fm$Term$reduce = x0 => x1 => Fm$Term$reduce$(x0, x1);
    const Map$new = ({
        _: 'Map.new'
    });

    function Fm$Def$new$(_file$1, _code$2, _name$3, _term$4, _type$5, _stat$6) {
        var $2574 = ({
            _: 'Fm.Def.new',
            'file': _file$1,
            'code': _code$2,
            'name': _name$3,
            'term': _term$4,
            'type': _type$5,
            'stat': _stat$6
        });
        return $2574;
    };
    const Fm$Def$new = x0 => x1 => x2 => x3 => x4 => x5 => Fm$Def$new$(x0, x1, x2, x3, x4, x5);
    const Fm$Status$init = ({
        _: 'Fm.Status.init'
    });

    function Fm$Parser$case$with$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("with", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2576 = self.idx;
                var $2577 = self.code;
                var $2578 = self.err;
                var $2579 = Parser$Reply$error$($2576, $2577, $2578);
                var $2575 = $2579;
                break;
            case 'Parser.Reply.value':
                var $2580 = self.idx;
                var $2581 = self.code;
                var $2582 = self.val;
                var self = Fm$Parser$name1$($2580, $2581);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2584 = self.idx;
                        var $2585 = self.code;
                        var $2586 = self.err;
                        var $2587 = Parser$Reply$error$($2584, $2585, $2586);
                        var $2583 = $2587;
                        break;
                    case 'Parser.Reply.value':
                        var $2588 = self.idx;
                        var $2589 = self.code;
                        var $2590 = self.val;
                        var self = Fm$Parser$text$(":", $2588, $2589);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2592 = self.idx;
                                var $2593 = self.code;
                                var $2594 = self.err;
                                var $2595 = Parser$Reply$error$($2592, $2593, $2594);
                                var $2591 = $2595;
                                break;
                            case 'Parser.Reply.value':
                                var $2596 = self.idx;
                                var $2597 = self.code;
                                var $2598 = self.val;
                                var self = Fm$Parser$term$($2596, $2597);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2600 = self.idx;
                                        var $2601 = self.code;
                                        var $2602 = self.err;
                                        var $2603 = Parser$Reply$error$($2600, $2601, $2602);
                                        var $2599 = $2603;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2604 = self.idx;
                                        var $2605 = self.code;
                                        var $2606 = self.val;
                                        var self = Fm$Parser$text$("=", $2604, $2605);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2608 = self.idx;
                                                var $2609 = self.code;
                                                var $2610 = self.err;
                                                var $2611 = Parser$Reply$error$($2608, $2609, $2610);
                                                var $2607 = $2611;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2612 = self.idx;
                                                var $2613 = self.code;
                                                var $2614 = self.val;
                                                var self = Fm$Parser$term$($2612, $2613);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2616 = self.idx;
                                                        var $2617 = self.code;
                                                        var $2618 = self.err;
                                                        var $2619 = Parser$Reply$error$($2616, $2617, $2618);
                                                        var $2615 = $2619;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2620 = self.idx;
                                                        var $2621 = self.code;
                                                        var $2622 = self.val;
                                                        var $2623 = Parser$Reply$value$($2620, $2621, Fm$Def$new$("", "", $2590, $2622, $2606, Fm$Status$init));
                                                        var $2615 = $2623;
                                                        break;
                                                };
                                                var $2607 = $2615;
                                                break;
                                        };
                                        var $2599 = $2607;
                                        break;
                                };
                                var $2591 = $2599;
                                break;
                        };
                        var $2583 = $2591;
                        break;
                };
                var $2575 = $2583;
                break;
        };
        return $2575;
    };
    const Fm$Parser$case$with = x0 => x1 => Fm$Parser$case$with$(x0, x1);

    function Fm$Parser$case$case$(_idx$1, _code$2) {
        var self = Fm$Parser$name1$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2625 = self.idx;
                var $2626 = self.code;
                var $2627 = self.err;
                var $2628 = Parser$Reply$error$($2625, $2626, $2627);
                var $2624 = $2628;
                break;
            case 'Parser.Reply.value':
                var $2629 = self.idx;
                var $2630 = self.code;
                var $2631 = self.val;
                var self = Fm$Parser$text$(":", $2629, $2630);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2633 = self.idx;
                        var $2634 = self.code;
                        var $2635 = self.err;
                        var $2636 = Parser$Reply$error$($2633, $2634, $2635);
                        var $2632 = $2636;
                        break;
                    case 'Parser.Reply.value':
                        var $2637 = self.idx;
                        var $2638 = self.code;
                        var $2639 = self.val;
                        var self = Fm$Parser$term$($2637, $2638);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2641 = self.idx;
                                var $2642 = self.code;
                                var $2643 = self.err;
                                var $2644 = Parser$Reply$error$($2641, $2642, $2643);
                                var $2640 = $2644;
                                break;
                            case 'Parser.Reply.value':
                                var $2645 = self.idx;
                                var $2646 = self.code;
                                var $2647 = self.val;
                                var self = Parser$maybe$(Fm$Parser$text(","), $2645, $2646);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2649 = self.idx;
                                        var $2650 = self.code;
                                        var $2651 = self.err;
                                        var $2652 = Parser$Reply$error$($2649, $2650, $2651);
                                        var $2648 = $2652;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2653 = self.idx;
                                        var $2654 = self.code;
                                        var $2655 = self.val;
                                        var $2656 = Parser$Reply$value$($2653, $2654, Pair$new$($2631, $2647));
                                        var $2648 = $2656;
                                        break;
                                };
                                var $2640 = $2648;
                                break;
                        };
                        var $2632 = $2640;
                        break;
                };
                var $2624 = $2632;
                break;
        };
        return $2624;
    };
    const Fm$Parser$case$case = x0 => x1 => Fm$Parser$case$case$(x0, x1);

    function Map$tie$(_val$2, _lft$3, _rgt$4) {
        var $2657 = ({
            _: 'Map.tie',
            'val': _val$2,
            'lft': _lft$3,
            'rgt': _rgt$4
        });
        return $2657;
    };
    const Map$tie = x0 => x1 => x2 => Map$tie$(x0, x1, x2);

    function Map$set$(_bits$2, _val$3, _map$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var self = _map$4;
                switch (self._) {
                    case 'Map.new':
                        var $2660 = Map$tie$(Maybe$some$(_val$3), Map$new, Map$new);
                        var $2659 = $2660;
                        break;
                    case 'Map.tie':
                        var $2661 = self.val;
                        var $2662 = self.lft;
                        var $2663 = self.rgt;
                        var $2664 = Map$tie$(Maybe$some$(_val$3), $2662, $2663);
                        var $2659 = $2664;
                        break;
                };
                var $2658 = $2659;
                break;
            case 'o':
                var $2665 = self.slice(0, -1);
                var self = _map$4;
                switch (self._) {
                    case 'Map.new':
                        var $2667 = Map$tie$(Maybe$none, Map$set$($2665, _val$3, Map$new), Map$new);
                        var $2666 = $2667;
                        break;
                    case 'Map.tie':
                        var $2668 = self.val;
                        var $2669 = self.lft;
                        var $2670 = self.rgt;
                        var $2671 = Map$tie$($2668, Map$set$($2665, _val$3, $2669), $2670);
                        var $2666 = $2671;
                        break;
                };
                var $2658 = $2666;
                break;
            case 'i':
                var $2672 = self.slice(0, -1);
                var self = _map$4;
                switch (self._) {
                    case 'Map.new':
                        var $2674 = Map$tie$(Maybe$none, Map$new, Map$set$($2672, _val$3, Map$new));
                        var $2673 = $2674;
                        break;
                    case 'Map.tie':
                        var $2675 = self.val;
                        var $2676 = self.lft;
                        var $2677 = self.rgt;
                        var $2678 = Map$tie$($2675, $2676, Map$set$($2672, _val$3, $2677));
                        var $2673 = $2678;
                        break;
                };
                var $2658 = $2673;
                break;
        };
        return $2658;
    };
    const Map$set = x0 => x1 => x2 => Map$set$(x0, x1, x2);

    function Map$from_list$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.nil':
                var $2680 = Map$new;
                var $2679 = $2680;
                break;
            case 'List.cons':
                var $2681 = self.head;
                var $2682 = self.tail;
                var self = $2681;
                switch (self._) {
                    case 'Pair.new':
                        var $2684 = self.fst;
                        var $2685 = self.snd;
                        var $2686 = Map$set$($2684, $2685, Map$from_list$($2682));
                        var $2683 = $2686;
                        break;
                };
                var $2679 = $2683;
                break;
        };
        return $2679;
    };
    const Map$from_list = x0 => Map$from_list$(x0);

    function Pair$fst$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $2688 = self.fst;
                var $2689 = self.snd;
                var $2690 = $2688;
                var $2687 = $2690;
                break;
        };
        return $2687;
    };
    const Pair$fst = x0 => Pair$fst$(x0);

    function Pair$snd$(_pair$3) {
        var self = _pair$3;
        switch (self._) {
            case 'Pair.new':
                var $2692 = self.fst;
                var $2693 = self.snd;
                var $2694 = $2693;
                var $2691 = $2694;
                break;
        };
        return $2691;
    };
    const Pair$snd = x0 => Pair$snd$(x0);

    function Fm$Term$cse$(_path$1, _expr$2, _name$3, _with$4, _cses$5, _moti$6) {
        var $2695 = ({
            _: 'Fm.Term.cse',
            'path': _path$1,
            'expr': _expr$2,
            'name': _name$3,
            'with': _with$4,
            'cses': _cses$5,
            'moti': _moti$6
        });
        return $2695;
    };
    const Fm$Term$cse = x0 => x1 => x2 => x3 => x4 => x5 => Fm$Term$cse$(x0, x1, x2, x3, x4, x5);

    function Fm$Parser$case$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2697 = self.idx;
                var $2698 = self.code;
                var $2699 = self.err;
                var $2700 = Parser$Reply$error$($2697, $2698, $2699);
                var $2696 = $2700;
                break;
            case 'Parser.Reply.value':
                var $2701 = self.idx;
                var $2702 = self.code;
                var $2703 = self.val;
                var self = Fm$Parser$text$("case ", $2701, $2702);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2705 = self.idx;
                        var $2706 = self.code;
                        var $2707 = self.err;
                        var $2708 = Parser$Reply$error$($2705, $2706, $2707);
                        var $2704 = $2708;
                        break;
                    case 'Parser.Reply.value':
                        var $2709 = self.idx;
                        var $2710 = self.code;
                        var $2711 = self.val;
                        var self = Fm$Parser$spaces($2709)($2710);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2713 = self.idx;
                                var $2714 = self.code;
                                var $2715 = self.err;
                                var $2716 = Parser$Reply$error$($2713, $2714, $2715);
                                var $2712 = $2716;
                                break;
                            case 'Parser.Reply.value':
                                var $2717 = self.idx;
                                var $2718 = self.code;
                                var $2719 = self.val;
                                var self = Fm$Parser$term$($2717, $2718);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2721 = self.idx;
                                        var $2722 = self.code;
                                        var $2723 = self.err;
                                        var $2724 = Parser$Reply$error$($2721, $2722, $2723);
                                        var $2720 = $2724;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2725 = self.idx;
                                        var $2726 = self.code;
                                        var $2727 = self.val;
                                        var self = Parser$maybe$((_idx$15 => _code$16 => {
                                            var self = Fm$Parser$text$("as", _idx$15, _code$16);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2730 = self.idx;
                                                    var $2731 = self.code;
                                                    var $2732 = self.err;
                                                    var $2733 = Parser$Reply$error$($2730, $2731, $2732);
                                                    var $2729 = $2733;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2734 = self.idx;
                                                    var $2735 = self.code;
                                                    var $2736 = self.val;
                                                    var $2737 = Fm$Parser$name1$($2734, $2735);
                                                    var $2729 = $2737;
                                                    break;
                                            };
                                            return $2729;
                                        }), $2725, $2726);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2738 = self.idx;
                                                var $2739 = self.code;
                                                var $2740 = self.err;
                                                var $2741 = Parser$Reply$error$($2738, $2739, $2740);
                                                var $2728 = $2741;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2742 = self.idx;
                                                var $2743 = self.code;
                                                var $2744 = self.val;
                                                var self = $2744;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var self = Fm$Term$reduce$($2727, Map$new);
                                                        switch (self._) {
                                                            case 'Fm.Term.var':
                                                                var $2747 = self.name;
                                                                var $2748 = self.indx;
                                                                var $2749 = $2747;
                                                                var $2746 = $2749;
                                                                break;
                                                            case 'Fm.Term.ref':
                                                                var $2750 = self.name;
                                                                var $2751 = $2750;
                                                                var $2746 = $2751;
                                                                break;
                                                            case 'Fm.Term.typ':
                                                                var $2752 = Fm$Name$read$("self");
                                                                var $2746 = $2752;
                                                                break;
                                                            case 'Fm.Term.all':
                                                                var $2753 = self.eras;
                                                                var $2754 = self.self;
                                                                var $2755 = self.name;
                                                                var $2756 = self.xtyp;
                                                                var $2757 = self.body;
                                                                var $2758 = Fm$Name$read$("self");
                                                                var $2746 = $2758;
                                                                break;
                                                            case 'Fm.Term.lam':
                                                                var $2759 = self.name;
                                                                var $2760 = self.body;
                                                                var $2761 = Fm$Name$read$("self");
                                                                var $2746 = $2761;
                                                                break;
                                                            case 'Fm.Term.app':
                                                                var $2762 = self.func;
                                                                var $2763 = self.argm;
                                                                var $2764 = Fm$Name$read$("self");
                                                                var $2746 = $2764;
                                                                break;
                                                            case 'Fm.Term.let':
                                                                var $2765 = self.name;
                                                                var $2766 = self.expr;
                                                                var $2767 = self.body;
                                                                var $2768 = Fm$Name$read$("self");
                                                                var $2746 = $2768;
                                                                break;
                                                            case 'Fm.Term.def':
                                                                var $2769 = self.name;
                                                                var $2770 = self.expr;
                                                                var $2771 = self.body;
                                                                var $2772 = Fm$Name$read$("self");
                                                                var $2746 = $2772;
                                                                break;
                                                            case 'Fm.Term.ann':
                                                                var $2773 = self.done;
                                                                var $2774 = self.term;
                                                                var $2775 = self.type;
                                                                var $2776 = Fm$Name$read$("self");
                                                                var $2746 = $2776;
                                                                break;
                                                            case 'Fm.Term.gol':
                                                                var $2777 = self.name;
                                                                var $2778 = self.dref;
                                                                var $2779 = self.verb;
                                                                var $2780 = Fm$Name$read$("self");
                                                                var $2746 = $2780;
                                                                break;
                                                            case 'Fm.Term.hol':
                                                                var $2781 = self.path;
                                                                var $2782 = Fm$Name$read$("self");
                                                                var $2746 = $2782;
                                                                break;
                                                            case 'Fm.Term.nat':
                                                                var $2783 = self.natx;
                                                                var $2784 = Fm$Name$read$("self");
                                                                var $2746 = $2784;
                                                                break;
                                                            case 'Fm.Term.chr':
                                                                var $2785 = self.chrx;
                                                                var $2786 = Fm$Name$read$("self");
                                                                var $2746 = $2786;
                                                                break;
                                                            case 'Fm.Term.str':
                                                                var $2787 = self.strx;
                                                                var $2788 = Fm$Name$read$("self");
                                                                var $2746 = $2788;
                                                                break;
                                                            case 'Fm.Term.cse':
                                                                var $2789 = self.path;
                                                                var $2790 = self.expr;
                                                                var $2791 = self.name;
                                                                var $2792 = self.with;
                                                                var $2793 = self.cses;
                                                                var $2794 = self.moti;
                                                                var $2795 = Fm$Name$read$("self");
                                                                var $2746 = $2795;
                                                                break;
                                                            case 'Fm.Term.ori':
                                                                var $2796 = self.orig;
                                                                var $2797 = self.expr;
                                                                var $2798 = Fm$Name$read$("self");
                                                                var $2746 = $2798;
                                                                break;
                                                        };
                                                        var _name$18 = $2746;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $2799 = self.value;
                                                        var $2800 = $2799;
                                                        var _name$18 = $2800;
                                                        break;
                                                };
                                                var self = Parser$many$(Fm$Parser$case$with)($2742)($2743);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2801 = self.idx;
                                                        var $2802 = self.code;
                                                        var $2803 = self.err;
                                                        var $2804 = Parser$Reply$error$($2801, $2802, $2803);
                                                        var $2745 = $2804;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2805 = self.idx;
                                                        var $2806 = self.code;
                                                        var $2807 = self.val;
                                                        var self = Fm$Parser$text$("{", $2805, $2806);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2809 = self.idx;
                                                                var $2810 = self.code;
                                                                var $2811 = self.err;
                                                                var $2812 = Parser$Reply$error$($2809, $2810, $2811);
                                                                var $2808 = $2812;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2813 = self.idx;
                                                                var $2814 = self.code;
                                                                var $2815 = self.val;
                                                                var self = Parser$until$(Fm$Parser$text("}"), Fm$Parser$case$case)($2813)($2814);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2817 = self.idx;
                                                                        var $2818 = self.code;
                                                                        var $2819 = self.err;
                                                                        var $2820 = Parser$Reply$error$($2817, $2818, $2819);
                                                                        var $2816 = $2820;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2821 = self.idx;
                                                                        var $2822 = self.code;
                                                                        var $2823 = self.val;
                                                                        var _cses$28 = Map$from_list$(List$mapped$($2823, (_x$28 => {
                                                                            var $2825 = Pair$new$((fm_name_to_bits(Pair$fst$(_x$28))), Pair$snd$(_x$28));
                                                                            return $2825;
                                                                        })));
                                                                        var self = Parser$first_of$(List$cons$((_idx$29 => _code$30 => {
                                                                            var self = Fm$Parser$text$(":", _idx$29, _code$30);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $2827 = self.idx;
                                                                                    var $2828 = self.code;
                                                                                    var $2829 = self.err;
                                                                                    var $2830 = Parser$Reply$error$($2827, $2828, $2829);
                                                                                    var $2826 = $2830;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $2831 = self.idx;
                                                                                    var $2832 = self.code;
                                                                                    var $2833 = self.val;
                                                                                    var self = Fm$Parser$term$($2831, $2832);
                                                                                    switch (self._) {
                                                                                        case 'Parser.Reply.error':
                                                                                            var $2835 = self.idx;
                                                                                            var $2836 = self.code;
                                                                                            var $2837 = self.err;
                                                                                            var $2838 = Parser$Reply$error$($2835, $2836, $2837);
                                                                                            var $2834 = $2838;
                                                                                            break;
                                                                                        case 'Parser.Reply.value':
                                                                                            var $2839 = self.idx;
                                                                                            var $2840 = self.code;
                                                                                            var $2841 = self.val;
                                                                                            var $2842 = Parser$Reply$value$($2839, $2840, Maybe$some$($2841));
                                                                                            var $2834 = $2842;
                                                                                            break;
                                                                                    };
                                                                                    var $2826 = $2834;
                                                                                    break;
                                                                            };
                                                                            return $2826;
                                                                        }), List$cons$((_idx$29 => _code$30 => {
                                                                            var self = Fm$Parser$text$("!", _idx$29, _code$30);
                                                                            switch (self._) {
                                                                                case 'Parser.Reply.error':
                                                                                    var $2844 = self.idx;
                                                                                    var $2845 = self.code;
                                                                                    var $2846 = self.err;
                                                                                    var $2847 = Parser$Reply$error$($2844, $2845, $2846);
                                                                                    var $2843 = $2847;
                                                                                    break;
                                                                                case 'Parser.Reply.value':
                                                                                    var $2848 = self.idx;
                                                                                    var $2849 = self.code;
                                                                                    var $2850 = self.val;
                                                                                    var $2851 = Parser$Reply$value$($2848, $2849, Maybe$none);
                                                                                    var $2843 = $2851;
                                                                                    break;
                                                                            };
                                                                            return $2843;
                                                                        }), List$cons$((_idx$29 => _code$30 => {
                                                                            var $2852 = Parser$Reply$value$(_idx$29, _code$30, Maybe$some$(Fm$Term$hol$(Bits$e)));
                                                                            return $2852;
                                                                        }), List$nil))))($2821)($2822);
                                                                        switch (self._) {
                                                                            case 'Parser.Reply.error':
                                                                                var $2853 = self.idx;
                                                                                var $2854 = self.code;
                                                                                var $2855 = self.err;
                                                                                var $2856 = Parser$Reply$error$($2853, $2854, $2855);
                                                                                var $2824 = $2856;
                                                                                break;
                                                                            case 'Parser.Reply.value':
                                                                                var $2857 = self.idx;
                                                                                var $2858 = self.code;
                                                                                var $2859 = self.val;
                                                                                var self = Fm$Parser$stop$($2703, $2857, $2858);
                                                                                switch (self._) {
                                                                                    case 'Parser.Reply.error':
                                                                                        var $2861 = self.idx;
                                                                                        var $2862 = self.code;
                                                                                        var $2863 = self.err;
                                                                                        var $2864 = Parser$Reply$error$($2861, $2862, $2863);
                                                                                        var $2860 = $2864;
                                                                                        break;
                                                                                    case 'Parser.Reply.value':
                                                                                        var $2865 = self.idx;
                                                                                        var $2866 = self.code;
                                                                                        var $2867 = self.val;
                                                                                        var $2868 = Parser$Reply$value$($2865, $2866, Fm$Term$ori$($2867, Fm$Term$cse$(Bits$e, $2727, _name$18, $2807, _cses$28, $2859)));
                                                                                        var $2860 = $2868;
                                                                                        break;
                                                                                };
                                                                                var $2824 = $2860;
                                                                                break;
                                                                        };
                                                                        var $2816 = $2824;
                                                                        break;
                                                                };
                                                                var $2808 = $2816;
                                                                break;
                                                        };
                                                        var $2745 = $2808;
                                                        break;
                                                };
                                                var $2728 = $2745;
                                                break;
                                        };
                                        var $2720 = $2728;
                                        break;
                                };
                                var $2712 = $2720;
                                break;
                        };
                        var $2704 = $2712;
                        break;
                };
                var $2696 = $2704;
                break;
        };
        return $2696;
    };
    const Fm$Parser$case = x0 => x1 => Fm$Parser$case$(x0, x1);

    function Fm$set$(_name$2, _val$3, _map$4) {
        var $2869 = Map$set$((fm_name_to_bits(_name$2)), _val$3, _map$4);
        return $2869;
    };
    const Fm$set = x0 => x1 => x2 => Fm$set$(x0, x1, x2);

    function Fm$Parser$open$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $2871 = self.idx;
                var $2872 = self.code;
                var $2873 = self.err;
                var $2874 = Parser$Reply$error$($2871, $2872, $2873);
                var $2870 = $2874;
                break;
            case 'Parser.Reply.value':
                var $2875 = self.idx;
                var $2876 = self.code;
                var $2877 = self.val;
                var self = Fm$Parser$text$("open ", $2875, $2876);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $2879 = self.idx;
                        var $2880 = self.code;
                        var $2881 = self.err;
                        var $2882 = Parser$Reply$error$($2879, $2880, $2881);
                        var $2878 = $2882;
                        break;
                    case 'Parser.Reply.value':
                        var $2883 = self.idx;
                        var $2884 = self.code;
                        var $2885 = self.val;
                        var self = Fm$Parser$spaces($2883)($2884);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $2887 = self.idx;
                                var $2888 = self.code;
                                var $2889 = self.err;
                                var $2890 = Parser$Reply$error$($2887, $2888, $2889);
                                var $2886 = $2890;
                                break;
                            case 'Parser.Reply.value':
                                var $2891 = self.idx;
                                var $2892 = self.code;
                                var $2893 = self.val;
                                var self = Fm$Parser$term$($2891, $2892);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $2895 = self.idx;
                                        var $2896 = self.code;
                                        var $2897 = self.err;
                                        var $2898 = Parser$Reply$error$($2895, $2896, $2897);
                                        var $2894 = $2898;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $2899 = self.idx;
                                        var $2900 = self.code;
                                        var $2901 = self.val;
                                        var self = Parser$maybe$((_idx$15 => _code$16 => {
                                            var self = Fm$Parser$text$("as", _idx$15, _code$16);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $2904 = self.idx;
                                                    var $2905 = self.code;
                                                    var $2906 = self.err;
                                                    var $2907 = Parser$Reply$error$($2904, $2905, $2906);
                                                    var $2903 = $2907;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $2908 = self.idx;
                                                    var $2909 = self.code;
                                                    var $2910 = self.val;
                                                    var $2911 = Fm$Parser$name1$($2908, $2909);
                                                    var $2903 = $2911;
                                                    break;
                                            };
                                            return $2903;
                                        }), $2899, $2900);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $2912 = self.idx;
                                                var $2913 = self.code;
                                                var $2914 = self.err;
                                                var $2915 = Parser$Reply$error$($2912, $2913, $2914);
                                                var $2902 = $2915;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $2916 = self.idx;
                                                var $2917 = self.code;
                                                var $2918 = self.val;
                                                var self = Parser$maybe$(Fm$Parser$text(";"), $2916, $2917);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $2920 = self.idx;
                                                        var $2921 = self.code;
                                                        var $2922 = self.err;
                                                        var $2923 = Parser$Reply$error$($2920, $2921, $2922);
                                                        var $2919 = $2923;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $2924 = self.idx;
                                                        var $2925 = self.code;
                                                        var $2926 = self.val;
                                                        var self = $2918;
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var self = Fm$Term$reduce$($2901, Map$new);
                                                                switch (self._) {
                                                                    case 'Fm.Term.var':
                                                                        var $2929 = self.name;
                                                                        var $2930 = self.indx;
                                                                        var $2931 = $2929;
                                                                        var $2928 = $2931;
                                                                        break;
                                                                    case 'Fm.Term.ref':
                                                                        var $2932 = self.name;
                                                                        var $2933 = $2932;
                                                                        var $2928 = $2933;
                                                                        break;
                                                                    case 'Fm.Term.typ':
                                                                        var $2934 = Fm$Name$read$("self");
                                                                        var $2928 = $2934;
                                                                        break;
                                                                    case 'Fm.Term.all':
                                                                        var $2935 = self.eras;
                                                                        var $2936 = self.self;
                                                                        var $2937 = self.name;
                                                                        var $2938 = self.xtyp;
                                                                        var $2939 = self.body;
                                                                        var $2940 = Fm$Name$read$("self");
                                                                        var $2928 = $2940;
                                                                        break;
                                                                    case 'Fm.Term.lam':
                                                                        var $2941 = self.name;
                                                                        var $2942 = self.body;
                                                                        var $2943 = Fm$Name$read$("self");
                                                                        var $2928 = $2943;
                                                                        break;
                                                                    case 'Fm.Term.app':
                                                                        var $2944 = self.func;
                                                                        var $2945 = self.argm;
                                                                        var $2946 = Fm$Name$read$("self");
                                                                        var $2928 = $2946;
                                                                        break;
                                                                    case 'Fm.Term.let':
                                                                        var $2947 = self.name;
                                                                        var $2948 = self.expr;
                                                                        var $2949 = self.body;
                                                                        var $2950 = Fm$Name$read$("self");
                                                                        var $2928 = $2950;
                                                                        break;
                                                                    case 'Fm.Term.def':
                                                                        var $2951 = self.name;
                                                                        var $2952 = self.expr;
                                                                        var $2953 = self.body;
                                                                        var $2954 = Fm$Name$read$("self");
                                                                        var $2928 = $2954;
                                                                        break;
                                                                    case 'Fm.Term.ann':
                                                                        var $2955 = self.done;
                                                                        var $2956 = self.term;
                                                                        var $2957 = self.type;
                                                                        var $2958 = Fm$Name$read$("self");
                                                                        var $2928 = $2958;
                                                                        break;
                                                                    case 'Fm.Term.gol':
                                                                        var $2959 = self.name;
                                                                        var $2960 = self.dref;
                                                                        var $2961 = self.verb;
                                                                        var $2962 = Fm$Name$read$("self");
                                                                        var $2928 = $2962;
                                                                        break;
                                                                    case 'Fm.Term.hol':
                                                                        var $2963 = self.path;
                                                                        var $2964 = Fm$Name$read$("self");
                                                                        var $2928 = $2964;
                                                                        break;
                                                                    case 'Fm.Term.nat':
                                                                        var $2965 = self.natx;
                                                                        var $2966 = Fm$Name$read$("self");
                                                                        var $2928 = $2966;
                                                                        break;
                                                                    case 'Fm.Term.chr':
                                                                        var $2967 = self.chrx;
                                                                        var $2968 = Fm$Name$read$("self");
                                                                        var $2928 = $2968;
                                                                        break;
                                                                    case 'Fm.Term.str':
                                                                        var $2969 = self.strx;
                                                                        var $2970 = Fm$Name$read$("self");
                                                                        var $2928 = $2970;
                                                                        break;
                                                                    case 'Fm.Term.cse':
                                                                        var $2971 = self.path;
                                                                        var $2972 = self.expr;
                                                                        var $2973 = self.name;
                                                                        var $2974 = self.with;
                                                                        var $2975 = self.cses;
                                                                        var $2976 = self.moti;
                                                                        var $2977 = Fm$Name$read$("self");
                                                                        var $2928 = $2977;
                                                                        break;
                                                                    case 'Fm.Term.ori':
                                                                        var $2978 = self.orig;
                                                                        var $2979 = self.expr;
                                                                        var $2980 = Fm$Name$read$("self");
                                                                        var $2928 = $2980;
                                                                        break;
                                                                };
                                                                var _name$21 = $2928;
                                                                break;
                                                            case 'Maybe.some':
                                                                var $2981 = self.value;
                                                                var $2982 = $2981;
                                                                var _name$21 = $2982;
                                                                break;
                                                        };
                                                        var _wyth$22 = List$nil;
                                                        var self = Fm$Parser$term$($2924, $2925);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $2983 = self.idx;
                                                                var $2984 = self.code;
                                                                var $2985 = self.err;
                                                                var $2986 = Parser$Reply$error$($2983, $2984, $2985);
                                                                var $2927 = $2986;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $2987 = self.idx;
                                                                var $2988 = self.code;
                                                                var $2989 = self.val;
                                                                var _cses$26 = Fm$set$("_", $2989, Map$new);
                                                                var _moti$27 = Maybe$some$(Fm$Term$hol$(Bits$e));
                                                                var self = Fm$Parser$stop$($2877, $2987, $2988);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $2991 = self.idx;
                                                                        var $2992 = self.code;
                                                                        var $2993 = self.err;
                                                                        var $2994 = Parser$Reply$error$($2991, $2992, $2993);
                                                                        var $2990 = $2994;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $2995 = self.idx;
                                                                        var $2996 = self.code;
                                                                        var $2997 = self.val;
                                                                        var $2998 = Parser$Reply$value$($2995, $2996, Fm$Term$ori$($2997, Fm$Term$cse$(Bits$e, $2901, _name$21, _wyth$22, _cses$26, _moti$27)));
                                                                        var $2990 = $2998;
                                                                        break;
                                                                };
                                                                var $2927 = $2990;
                                                                break;
                                                        };
                                                        var $2919 = $2927;
                                                        break;
                                                };
                                                var $2902 = $2919;
                                                break;
                                        };
                                        var $2894 = $2902;
                                        break;
                                };
                                var $2886 = $2894;
                                break;
                        };
                        var $2878 = $2886;
                        break;
                };
                var $2870 = $2878;
                break;
        };
        return $2870;
    };
    const Fm$Parser$open = x0 => x1 => Fm$Parser$open$(x0, x1);

    function Parser$digit$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $3000 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
            var $2999 = $3000;
        } else {
            var $3001 = self.charCodeAt(0);
            var $3002 = self.slice(1);
            var _sidx$5 = Nat$succ$(_idx$1);
            var self = ($3001 === 48);
            if (self) {
                var $3004 = Parser$Reply$value$(_sidx$5, $3002, 0n);
                var $3003 = $3004;
            } else {
                var self = ($3001 === 49);
                if (self) {
                    var $3006 = Parser$Reply$value$(_sidx$5, $3002, 1n);
                    var $3005 = $3006;
                } else {
                    var self = ($3001 === 50);
                    if (self) {
                        var $3008 = Parser$Reply$value$(_sidx$5, $3002, 2n);
                        var $3007 = $3008;
                    } else {
                        var self = ($3001 === 51);
                        if (self) {
                            var $3010 = Parser$Reply$value$(_sidx$5, $3002, 3n);
                            var $3009 = $3010;
                        } else {
                            var self = ($3001 === 52);
                            if (self) {
                                var $3012 = Parser$Reply$value$(_sidx$5, $3002, 4n);
                                var $3011 = $3012;
                            } else {
                                var self = ($3001 === 53);
                                if (self) {
                                    var $3014 = Parser$Reply$value$(_sidx$5, $3002, 5n);
                                    var $3013 = $3014;
                                } else {
                                    var self = ($3001 === 54);
                                    if (self) {
                                        var $3016 = Parser$Reply$value$(_sidx$5, $3002, 6n);
                                        var $3015 = $3016;
                                    } else {
                                        var self = ($3001 === 55);
                                        if (self) {
                                            var $3018 = Parser$Reply$value$(_sidx$5, $3002, 7n);
                                            var $3017 = $3018;
                                        } else {
                                            var self = ($3001 === 56);
                                            if (self) {
                                                var $3020 = Parser$Reply$value$(_sidx$5, $3002, 8n);
                                                var $3019 = $3020;
                                            } else {
                                                var self = ($3001 === 57);
                                                if (self) {
                                                    var $3022 = Parser$Reply$value$(_sidx$5, $3002, 9n);
                                                    var $3021 = $3022;
                                                } else {
                                                    var $3023 = Parser$Reply$error$(_idx$1, _code$2, "Not a digit.");
                                                    var $3021 = $3023;
                                                };
                                                var $3019 = $3021;
                                            };
                                            var $3017 = $3019;
                                        };
                                        var $3015 = $3017;
                                    };
                                    var $3013 = $3015;
                                };
                                var $3011 = $3013;
                            };
                            var $3009 = $3011;
                        };
                        var $3007 = $3009;
                    };
                    var $3005 = $3007;
                };
                var $3003 = $3005;
            };
            var $2999 = $3003;
        };
        return $2999;
    };
    const Parser$digit = x0 => x1 => Parser$digit$(x0, x1);
    const Nat$add = a0 => a1 => (a0 + a1);
    const Nat$mul = a0 => a1 => (a0 * a1);

    function Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4) {
        var Nat$from_base$go$ = (_b$1, _ds$2, _p$3, _res$4) => ({
            ctr: 'TCO',
            arg: [_b$1, _ds$2, _p$3, _res$4]
        });
        var Nat$from_base$go = _b$1 => _ds$2 => _p$3 => _res$4 => Nat$from_base$go$(_b$1, _ds$2, _p$3, _res$4);
        var arg = [_b$1, _ds$2, _p$3, _res$4];
        while (true) {
            let [_b$1, _ds$2, _p$3, _res$4] = arg;
            var R = (() => {
                var self = _ds$2;
                switch (self._) {
                    case 'List.nil':
                        var $3024 = _res$4;
                        return $3024;
                    case 'List.cons':
                        var $3025 = self.head;
                        var $3026 = self.tail;
                        var $3027 = Nat$from_base$go$(_b$1, $3026, (_b$1 * _p$3), (($3025 * _p$3) + _res$4));
                        return $3027;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$from_base$go = x0 => x1 => x2 => x3 => Nat$from_base$go$(x0, x1, x2, x3);

    function List$reverse$go$(_xs$2, _res$3) {
        var List$reverse$go$ = (_xs$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_xs$2, _res$3]
        });
        var List$reverse$go = _xs$2 => _res$3 => List$reverse$go$(_xs$2, _res$3);
        var arg = [_xs$2, _res$3];
        while (true) {
            let [_xs$2, _res$3] = arg;
            var R = (() => {
                var self = _xs$2;
                switch (self._) {
                    case 'List.nil':
                        var $3028 = _res$3;
                        return $3028;
                    case 'List.cons':
                        var $3029 = self.head;
                        var $3030 = self.tail;
                        var $3031 = List$reverse$go$($3030, List$cons$($3029, _res$3));
                        return $3031;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$reverse$go = x0 => x1 => List$reverse$go$(x0, x1);

    function List$reverse$(_xs$2) {
        var $3032 = List$reverse$go$(_xs$2, List$nil);
        return $3032;
    };
    const List$reverse = x0 => List$reverse$(x0);

    function Nat$from_base$(_base$1, _ds$2) {
        var $3033 = Nat$from_base$go$(_base$1, List$reverse$(_ds$2), 1n, 0n);
        return $3033;
    };
    const Nat$from_base = x0 => x1 => Nat$from_base$(x0, x1);

    function Parser$nat$(_idx$1, _code$2) {
        var self = Parser$many1$(Parser$digit, _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3035 = self.idx;
                var $3036 = self.code;
                var $3037 = self.err;
                var $3038 = Parser$Reply$error$($3035, $3036, $3037);
                var $3034 = $3038;
                break;
            case 'Parser.Reply.value':
                var $3039 = self.idx;
                var $3040 = self.code;
                var $3041 = self.val;
                var $3042 = Parser$Reply$value$($3039, $3040, Nat$from_base$(10n, $3041));
                var $3034 = $3042;
                break;
        };
        return $3034;
    };
    const Parser$nat = x0 => x1 => Parser$nat$(x0, x1);

    function Bits$tail$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $3044 = Bits$e;
                var $3043 = $3044;
                break;
            case 'o':
                var $3045 = self.slice(0, -1);
                var $3046 = $3045;
                var $3043 = $3046;
                break;
            case 'i':
                var $3047 = self.slice(0, -1);
                var $3048 = $3047;
                var $3043 = $3048;
                break;
        };
        return $3043;
    };
    const Bits$tail = x0 => Bits$tail$(x0);

    function Bits$inc$(_a$1) {
        var self = _a$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $3050 = (Bits$e + '1');
                var $3049 = $3050;
                break;
            case 'o':
                var $3051 = self.slice(0, -1);
                var $3052 = ($3051 + '1');
                var $3049 = $3052;
                break;
            case 'i':
                var $3053 = self.slice(0, -1);
                var $3054 = (Bits$inc$($3053) + '0');
                var $3049 = $3054;
                break;
        };
        return $3049;
    };
    const Bits$inc = x0 => Bits$inc$(x0);
    const Nat$to_bits = a0 => (nat_to_bits(a0));

    function Maybe$to_bool$(_m$2) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $3056 = Bool$false;
                var $3055 = $3056;
                break;
            case 'Maybe.some':
                var $3057 = self.value;
                var $3058 = Bool$true;
                var $3055 = $3058;
                break;
        };
        return $3055;
    };
    const Maybe$to_bool = x0 => Maybe$to_bool$(x0);

    function Fm$Term$gol$(_name$1, _dref$2, _verb$3) {
        var $3059 = ({
            _: 'Fm.Term.gol',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3
        });
        return $3059;
    };
    const Fm$Term$gol = x0 => x1 => x2 => Fm$Term$gol$(x0, x1, x2);

    function Fm$Parser$goal$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3061 = self.idx;
                var $3062 = self.code;
                var $3063 = self.err;
                var $3064 = Parser$Reply$error$($3061, $3062, $3063);
                var $3060 = $3064;
                break;
            case 'Parser.Reply.value':
                var $3065 = self.idx;
                var $3066 = self.code;
                var $3067 = self.val;
                var self = Fm$Parser$text$("?", $3065, $3066);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3069 = self.idx;
                        var $3070 = self.code;
                        var $3071 = self.err;
                        var $3072 = Parser$Reply$error$($3069, $3070, $3071);
                        var $3068 = $3072;
                        break;
                    case 'Parser.Reply.value':
                        var $3073 = self.idx;
                        var $3074 = self.code;
                        var $3075 = self.val;
                        var self = Fm$Parser$name$($3073, $3074);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3077 = self.idx;
                                var $3078 = self.code;
                                var $3079 = self.err;
                                var $3080 = Parser$Reply$error$($3077, $3078, $3079);
                                var $3076 = $3080;
                                break;
                            case 'Parser.Reply.value':
                                var $3081 = self.idx;
                                var $3082 = self.code;
                                var $3083 = self.val;
                                var self = Parser$many$((_idx$12 => _code$13 => {
                                    var self = Fm$Parser$text$("-", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $3086 = self.idx;
                                            var $3087 = self.code;
                                            var $3088 = self.err;
                                            var $3089 = Parser$Reply$error$($3086, $3087, $3088);
                                            var $3085 = $3089;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $3090 = self.idx;
                                            var $3091 = self.code;
                                            var $3092 = self.val;
                                            var self = Parser$nat$($3090, $3091);
                                            switch (self._) {
                                                case 'Parser.Reply.error':
                                                    var $3094 = self.idx;
                                                    var $3095 = self.code;
                                                    var $3096 = self.err;
                                                    var $3097 = Parser$Reply$error$($3094, $3095, $3096);
                                                    var $3093 = $3097;
                                                    break;
                                                case 'Parser.Reply.value':
                                                    var $3098 = self.idx;
                                                    var $3099 = self.code;
                                                    var $3100 = self.val;
                                                    var _bits$20 = Bits$reverse$(Bits$tail$(Bits$reverse$((nat_to_bits($3100)))));
                                                    var $3101 = Parser$Reply$value$($3098, $3099, _bits$20);
                                                    var $3093 = $3101;
                                                    break;
                                            };
                                            var $3085 = $3093;
                                            break;
                                    };
                                    return $3085;
                                }))($3081)($3082);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3102 = self.idx;
                                        var $3103 = self.code;
                                        var $3104 = self.err;
                                        var $3105 = Parser$Reply$error$($3102, $3103, $3104);
                                        var $3084 = $3105;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3106 = self.idx;
                                        var $3107 = self.code;
                                        var $3108 = self.val;
                                        var self = Parser$maybe$(Parser$text("-"), $3106, $3107);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3110 = self.idx;
                                                var $3111 = self.code;
                                                var $3112 = self.err;
                                                var $3113 = Parser$Reply$error$($3110, $3111, $3112);
                                                var self = $3113;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3114 = self.idx;
                                                var $3115 = self.code;
                                                var $3116 = self.val;
                                                var $3117 = Parser$Reply$value$($3114, $3115, Maybe$to_bool$($3116));
                                                var self = $3117;
                                                break;
                                        };
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3118 = self.idx;
                                                var $3119 = self.code;
                                                var $3120 = self.err;
                                                var $3121 = Parser$Reply$error$($3118, $3119, $3120);
                                                var $3109 = $3121;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3122 = self.idx;
                                                var $3123 = self.code;
                                                var $3124 = self.val;
                                                var self = Fm$Parser$stop$($3067, $3122, $3123);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3126 = self.idx;
                                                        var $3127 = self.code;
                                                        var $3128 = self.err;
                                                        var $3129 = Parser$Reply$error$($3126, $3127, $3128);
                                                        var $3125 = $3129;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3130 = self.idx;
                                                        var $3131 = self.code;
                                                        var $3132 = self.val;
                                                        var $3133 = Parser$Reply$value$($3130, $3131, Fm$Term$ori$($3132, Fm$Term$gol$($3083, $3108, $3124)));
                                                        var $3125 = $3133;
                                                        break;
                                                };
                                                var $3109 = $3125;
                                                break;
                                        };
                                        var $3084 = $3109;
                                        break;
                                };
                                var $3076 = $3084;
                                break;
                        };
                        var $3068 = $3076;
                        break;
                };
                var $3060 = $3068;
                break;
        };
        return $3060;
    };
    const Fm$Parser$goal = x0 => x1 => Fm$Parser$goal$(x0, x1);

    function Fm$Parser$hole$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3135 = self.idx;
                var $3136 = self.code;
                var $3137 = self.err;
                var $3138 = Parser$Reply$error$($3135, $3136, $3137);
                var $3134 = $3138;
                break;
            case 'Parser.Reply.value':
                var $3139 = self.idx;
                var $3140 = self.code;
                var $3141 = self.val;
                var self = Fm$Parser$text$("_", $3139, $3140);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3143 = self.idx;
                        var $3144 = self.code;
                        var $3145 = self.err;
                        var $3146 = Parser$Reply$error$($3143, $3144, $3145);
                        var $3142 = $3146;
                        break;
                    case 'Parser.Reply.value':
                        var $3147 = self.idx;
                        var $3148 = self.code;
                        var $3149 = self.val;
                        var self = Fm$Parser$stop$($3141, $3147, $3148);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3151 = self.idx;
                                var $3152 = self.code;
                                var $3153 = self.err;
                                var $3154 = Parser$Reply$error$($3151, $3152, $3153);
                                var $3150 = $3154;
                                break;
                            case 'Parser.Reply.value':
                                var $3155 = self.idx;
                                var $3156 = self.code;
                                var $3157 = self.val;
                                var $3158 = Parser$Reply$value$($3155, $3156, Fm$Term$ori$($3157, Fm$Term$hol$(Bits$e)));
                                var $3150 = $3158;
                                break;
                        };
                        var $3142 = $3150;
                        break;
                };
                var $3134 = $3142;
                break;
        };
        return $3134;
    };
    const Fm$Parser$hole = x0 => x1 => Fm$Parser$hole$(x0, x1);

    function Fm$Parser$u8$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3160 = self.idx;
                var $3161 = self.code;
                var $3162 = self.err;
                var $3163 = Parser$Reply$error$($3160, $3161, $3162);
                var $3159 = $3163;
                break;
            case 'Parser.Reply.value':
                var $3164 = self.idx;
                var $3165 = self.code;
                var $3166 = self.val;
                var self = Fm$Parser$spaces($3164)($3165);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3168 = self.idx;
                        var $3169 = self.code;
                        var $3170 = self.err;
                        var $3171 = Parser$Reply$error$($3168, $3169, $3170);
                        var $3167 = $3171;
                        break;
                    case 'Parser.Reply.value':
                        var $3172 = self.idx;
                        var $3173 = self.code;
                        var $3174 = self.val;
                        var self = Parser$nat$($3172, $3173);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3176 = self.idx;
                                var $3177 = self.code;
                                var $3178 = self.err;
                                var $3179 = Parser$Reply$error$($3176, $3177, $3178);
                                var $3175 = $3179;
                                break;
                            case 'Parser.Reply.value':
                                var $3180 = self.idx;
                                var $3181 = self.code;
                                var $3182 = self.val;
                                var self = Parser$text$("b", $3180, $3181);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3184 = self.idx;
                                        var $3185 = self.code;
                                        var $3186 = self.err;
                                        var $3187 = Parser$Reply$error$($3184, $3185, $3186);
                                        var $3183 = $3187;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3188 = self.idx;
                                        var $3189 = self.code;
                                        var $3190 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u8");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3182));
                                        var self = Fm$Parser$stop$($3166, $3188, $3189);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3192 = self.idx;
                                                var $3193 = self.code;
                                                var $3194 = self.err;
                                                var $3195 = Parser$Reply$error$($3192, $3193, $3194);
                                                var $3191 = $3195;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3196 = self.idx;
                                                var $3197 = self.code;
                                                var $3198 = self.val;
                                                var $3199 = Parser$Reply$value$($3196, $3197, Fm$Term$ori$($3198, _term$16));
                                                var $3191 = $3199;
                                                break;
                                        };
                                        var $3183 = $3191;
                                        break;
                                };
                                var $3175 = $3183;
                                break;
                        };
                        var $3167 = $3175;
                        break;
                };
                var $3159 = $3167;
                break;
        };
        return $3159;
    };
    const Fm$Parser$u8 = x0 => x1 => Fm$Parser$u8$(x0, x1);

    function Fm$Parser$u16$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3201 = self.idx;
                var $3202 = self.code;
                var $3203 = self.err;
                var $3204 = Parser$Reply$error$($3201, $3202, $3203);
                var $3200 = $3204;
                break;
            case 'Parser.Reply.value':
                var $3205 = self.idx;
                var $3206 = self.code;
                var $3207 = self.val;
                var self = Fm$Parser$spaces($3205)($3206);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3209 = self.idx;
                        var $3210 = self.code;
                        var $3211 = self.err;
                        var $3212 = Parser$Reply$error$($3209, $3210, $3211);
                        var $3208 = $3212;
                        break;
                    case 'Parser.Reply.value':
                        var $3213 = self.idx;
                        var $3214 = self.code;
                        var $3215 = self.val;
                        var self = Parser$nat$($3213, $3214);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3217 = self.idx;
                                var $3218 = self.code;
                                var $3219 = self.err;
                                var $3220 = Parser$Reply$error$($3217, $3218, $3219);
                                var $3216 = $3220;
                                break;
                            case 'Parser.Reply.value':
                                var $3221 = self.idx;
                                var $3222 = self.code;
                                var $3223 = self.val;
                                var self = Parser$text$("s", $3221, $3222);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3225 = self.idx;
                                        var $3226 = self.code;
                                        var $3227 = self.err;
                                        var $3228 = Parser$Reply$error$($3225, $3226, $3227);
                                        var $3224 = $3228;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3229 = self.idx;
                                        var $3230 = self.code;
                                        var $3231 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u16");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3223));
                                        var self = Fm$Parser$stop$($3207, $3229, $3230);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3233 = self.idx;
                                                var $3234 = self.code;
                                                var $3235 = self.err;
                                                var $3236 = Parser$Reply$error$($3233, $3234, $3235);
                                                var $3232 = $3236;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3237 = self.idx;
                                                var $3238 = self.code;
                                                var $3239 = self.val;
                                                var $3240 = Parser$Reply$value$($3237, $3238, Fm$Term$ori$($3239, _term$16));
                                                var $3232 = $3240;
                                                break;
                                        };
                                        var $3224 = $3232;
                                        break;
                                };
                                var $3216 = $3224;
                                break;
                        };
                        var $3208 = $3216;
                        break;
                };
                var $3200 = $3208;
                break;
        };
        return $3200;
    };
    const Fm$Parser$u16 = x0 => x1 => Fm$Parser$u16$(x0, x1);

    function Fm$Parser$u32$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3242 = self.idx;
                var $3243 = self.code;
                var $3244 = self.err;
                var $3245 = Parser$Reply$error$($3242, $3243, $3244);
                var $3241 = $3245;
                break;
            case 'Parser.Reply.value':
                var $3246 = self.idx;
                var $3247 = self.code;
                var $3248 = self.val;
                var self = Fm$Parser$spaces($3246)($3247);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3250 = self.idx;
                        var $3251 = self.code;
                        var $3252 = self.err;
                        var $3253 = Parser$Reply$error$($3250, $3251, $3252);
                        var $3249 = $3253;
                        break;
                    case 'Parser.Reply.value':
                        var $3254 = self.idx;
                        var $3255 = self.code;
                        var $3256 = self.val;
                        var self = Parser$nat$($3254, $3255);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3258 = self.idx;
                                var $3259 = self.code;
                                var $3260 = self.err;
                                var $3261 = Parser$Reply$error$($3258, $3259, $3260);
                                var $3257 = $3261;
                                break;
                            case 'Parser.Reply.value':
                                var $3262 = self.idx;
                                var $3263 = self.code;
                                var $3264 = self.val;
                                var self = Parser$text$("u", $3262, $3263);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3266 = self.idx;
                                        var $3267 = self.code;
                                        var $3268 = self.err;
                                        var $3269 = Parser$Reply$error$($3266, $3267, $3268);
                                        var $3265 = $3269;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3270 = self.idx;
                                        var $3271 = self.code;
                                        var $3272 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u32");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3264));
                                        var self = Fm$Parser$stop$($3248, $3270, $3271);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3274 = self.idx;
                                                var $3275 = self.code;
                                                var $3276 = self.err;
                                                var $3277 = Parser$Reply$error$($3274, $3275, $3276);
                                                var $3273 = $3277;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3278 = self.idx;
                                                var $3279 = self.code;
                                                var $3280 = self.val;
                                                var $3281 = Parser$Reply$value$($3278, $3279, Fm$Term$ori$($3280, _term$16));
                                                var $3273 = $3281;
                                                break;
                                        };
                                        var $3265 = $3273;
                                        break;
                                };
                                var $3257 = $3265;
                                break;
                        };
                        var $3249 = $3257;
                        break;
                };
                var $3241 = $3249;
                break;
        };
        return $3241;
    };
    const Fm$Parser$u32 = x0 => x1 => Fm$Parser$u32$(x0, x1);

    function Fm$Parser$u64$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3283 = self.idx;
                var $3284 = self.code;
                var $3285 = self.err;
                var $3286 = Parser$Reply$error$($3283, $3284, $3285);
                var $3282 = $3286;
                break;
            case 'Parser.Reply.value':
                var $3287 = self.idx;
                var $3288 = self.code;
                var $3289 = self.val;
                var self = Fm$Parser$spaces($3287)($3288);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3291 = self.idx;
                        var $3292 = self.code;
                        var $3293 = self.err;
                        var $3294 = Parser$Reply$error$($3291, $3292, $3293);
                        var $3290 = $3294;
                        break;
                    case 'Parser.Reply.value':
                        var $3295 = self.idx;
                        var $3296 = self.code;
                        var $3297 = self.val;
                        var self = Parser$nat$($3295, $3296);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3299 = self.idx;
                                var $3300 = self.code;
                                var $3301 = self.err;
                                var $3302 = Parser$Reply$error$($3299, $3300, $3301);
                                var $3298 = $3302;
                                break;
                            case 'Parser.Reply.value':
                                var $3303 = self.idx;
                                var $3304 = self.code;
                                var $3305 = self.val;
                                var self = Parser$text$("l", $3303, $3304);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3307 = self.idx;
                                        var $3308 = self.code;
                                        var $3309 = self.err;
                                        var $3310 = Parser$Reply$error$($3307, $3308, $3309);
                                        var $3306 = $3310;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3311 = self.idx;
                                        var $3312 = self.code;
                                        var $3313 = self.val;
                                        var _term$15 = Fm$Term$ref$("Nat.to_u64");
                                        var _term$16 = Fm$Term$app$(_term$15, Fm$Term$nat$($3305));
                                        var self = Fm$Parser$stop$($3289, $3311, $3312);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3315 = self.idx;
                                                var $3316 = self.code;
                                                var $3317 = self.err;
                                                var $3318 = Parser$Reply$error$($3315, $3316, $3317);
                                                var $3314 = $3318;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3319 = self.idx;
                                                var $3320 = self.code;
                                                var $3321 = self.val;
                                                var $3322 = Parser$Reply$value$($3319, $3320, Fm$Term$ori$($3321, _term$16));
                                                var $3314 = $3322;
                                                break;
                                        };
                                        var $3306 = $3314;
                                        break;
                                };
                                var $3298 = $3306;
                                break;
                        };
                        var $3290 = $3298;
                        break;
                };
                var $3282 = $3290;
                break;
        };
        return $3282;
    };
    const Fm$Parser$u64 = x0 => x1 => Fm$Parser$u64$(x0, x1);

    function Fm$Parser$nat$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3324 = self.idx;
                var $3325 = self.code;
                var $3326 = self.err;
                var $3327 = Parser$Reply$error$($3324, $3325, $3326);
                var $3323 = $3327;
                break;
            case 'Parser.Reply.value':
                var $3328 = self.idx;
                var $3329 = self.code;
                var $3330 = self.val;
                var self = Fm$Parser$spaces($3328)($3329);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3332 = self.idx;
                        var $3333 = self.code;
                        var $3334 = self.err;
                        var $3335 = Parser$Reply$error$($3332, $3333, $3334);
                        var $3331 = $3335;
                        break;
                    case 'Parser.Reply.value':
                        var $3336 = self.idx;
                        var $3337 = self.code;
                        var $3338 = self.val;
                        var self = Parser$nat$($3336, $3337);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3340 = self.idx;
                                var $3341 = self.code;
                                var $3342 = self.err;
                                var $3343 = Parser$Reply$error$($3340, $3341, $3342);
                                var $3339 = $3343;
                                break;
                            case 'Parser.Reply.value':
                                var $3344 = self.idx;
                                var $3345 = self.code;
                                var $3346 = self.val;
                                var self = Fm$Parser$stop$($3330, $3344, $3345);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3348 = self.idx;
                                        var $3349 = self.code;
                                        var $3350 = self.err;
                                        var $3351 = Parser$Reply$error$($3348, $3349, $3350);
                                        var $3347 = $3351;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3352 = self.idx;
                                        var $3353 = self.code;
                                        var $3354 = self.val;
                                        var $3355 = Parser$Reply$value$($3352, $3353, Fm$Term$ori$($3354, Fm$Term$nat$($3346)));
                                        var $3347 = $3355;
                                        break;
                                };
                                var $3339 = $3347;
                                break;
                        };
                        var $3331 = $3339;
                        break;
                };
                var $3323 = $3331;
                break;
        };
        return $3323;
    };
    const Fm$Parser$nat = x0 => x1 => Fm$Parser$nat$(x0, x1);
    const String$eql = a0 => a1 => (a0 === a1);

    function Parser$fail$(_error$2, _idx$3, _code$4) {
        var $3356 = Parser$Reply$error$(_idx$3, _code$4, _error$2);
        return $3356;
    };
    const Parser$fail = x0 => x1 => x2 => Parser$fail$(x0, x1, x2);

    function Fm$Parser$reference$(_idx$1, _code$2) {
        var self = Fm$Parser$init$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3358 = self.idx;
                var $3359 = self.code;
                var $3360 = self.err;
                var $3361 = Parser$Reply$error$($3358, $3359, $3360);
                var $3357 = $3361;
                break;
            case 'Parser.Reply.value':
                var $3362 = self.idx;
                var $3363 = self.code;
                var $3364 = self.val;
                var self = Fm$Parser$name1$($3362, $3363);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3366 = self.idx;
                        var $3367 = self.code;
                        var $3368 = self.err;
                        var $3369 = Parser$Reply$error$($3366, $3367, $3368);
                        var $3365 = $3369;
                        break;
                    case 'Parser.Reply.value':
                        var $3370 = self.idx;
                        var $3371 = self.code;
                        var $3372 = self.val;
                        var self = ($3372 === "case");
                        if (self) {
                            var $3374 = Parser$fail("Reserved keyword.");
                            var $3373 = $3374;
                        } else {
                            var self = ($3372 === "do");
                            if (self) {
                                var $3376 = Parser$fail("Reserved keyword.");
                                var $3375 = $3376;
                            } else {
                                var self = ($3372 === "if");
                                if (self) {
                                    var $3378 = Parser$fail("Reserved keyword.");
                                    var $3377 = $3378;
                                } else {
                                    var self = ($3372 === "let");
                                    if (self) {
                                        var $3380 = Parser$fail("Reserved keyword.");
                                        var $3379 = $3380;
                                    } else {
                                        var self = ($3372 === "def");
                                        if (self) {
                                            var $3382 = Parser$fail("Reserved keyword.");
                                            var $3381 = $3382;
                                        } else {
                                            var self = ($3372 === "true");
                                            if (self) {
                                                var $3384 = (_idx$9 => _code$10 => {
                                                    var $3385 = Parser$Reply$value$(_idx$9, _code$10, Fm$Term$ref$("Bool.true"));
                                                    return $3385;
                                                });
                                                var $3383 = $3384;
                                            } else {
                                                var self = ($3372 === "false");
                                                if (self) {
                                                    var $3387 = (_idx$9 => _code$10 => {
                                                        var $3388 = Parser$Reply$value$(_idx$9, _code$10, Fm$Term$ref$("Bool.false"));
                                                        return $3388;
                                                    });
                                                    var $3386 = $3387;
                                                } else {
                                                    var self = ($3372 === "unit");
                                                    if (self) {
                                                        var $3390 = (_idx$9 => _code$10 => {
                                                            var $3391 = Parser$Reply$value$(_idx$9, _code$10, Fm$Term$ref$("Unit.new"));
                                                            return $3391;
                                                        });
                                                        var $3389 = $3390;
                                                    } else {
                                                        var self = ($3372 === "none");
                                                        if (self) {
                                                            var _term$9 = Fm$Term$ref$("Maybe.none");
                                                            var _term$10 = Fm$Term$app$(_term$9, Fm$Term$hol$(Bits$e));
                                                            var $3393 = (_idx$11 => _code$12 => {
                                                                var $3394 = Parser$Reply$value$(_idx$11, _code$12, _term$10);
                                                                return $3394;
                                                            });
                                                            var $3392 = $3393;
                                                        } else {
                                                            var self = ($3372 === "refl");
                                                            if (self) {
                                                                var _term$9 = Fm$Term$ref$("Equal.refl");
                                                                var _term$10 = Fm$Term$app$(_term$9, Fm$Term$hol$(Bits$e));
                                                                var _term$11 = Fm$Term$app$(_term$10, Fm$Term$hol$(Bits$e));
                                                                var $3396 = (_idx$12 => _code$13 => {
                                                                    var $3397 = Parser$Reply$value$(_idx$12, _code$13, _term$11);
                                                                    return $3397;
                                                                });
                                                                var $3395 = $3396;
                                                            } else {
                                                                var $3398 = (_idx$9 => _code$10 => {
                                                                    var self = Fm$Parser$stop$($3364, _idx$9, _code$10);
                                                                    switch (self._) {
                                                                        case 'Parser.Reply.error':
                                                                            var $3400 = self.idx;
                                                                            var $3401 = self.code;
                                                                            var $3402 = self.err;
                                                                            var $3403 = Parser$Reply$error$($3400, $3401, $3402);
                                                                            var $3399 = $3403;
                                                                            break;
                                                                        case 'Parser.Reply.value':
                                                                            var $3404 = self.idx;
                                                                            var $3405 = self.code;
                                                                            var $3406 = self.val;
                                                                            var $3407 = Parser$Reply$value$($3404, $3405, Fm$Term$ori$($3406, Fm$Term$ref$($3372)));
                                                                            var $3399 = $3407;
                                                                            break;
                                                                    };
                                                                    return $3399;
                                                                });
                                                                var $3395 = $3398;
                                                            };
                                                            var $3392 = $3395;
                                                        };
                                                        var $3389 = $3392;
                                                    };
                                                    var $3386 = $3389;
                                                };
                                                var $3383 = $3386;
                                            };
                                            var $3381 = $3383;
                                        };
                                        var $3379 = $3381;
                                    };
                                    var $3377 = $3379;
                                };
                                var $3375 = $3377;
                            };
                            var $3373 = $3375;
                        };
                        var $3373 = $3373($3370)($3371);
                        var $3365 = $3373;
                        break;
                };
                var $3357 = $3365;
                break;
        };
        return $3357;
    };
    const Fm$Parser$reference = x0 => x1 => Fm$Parser$reference$(x0, x1);
    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));

    function Fm$Parser$application$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$text$("(", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3409 = self.idx;
                var $3410 = self.code;
                var $3411 = self.err;
                var $3412 = Parser$Reply$error$($3409, $3410, $3411);
                var $3408 = $3412;
                break;
            case 'Parser.Reply.value':
                var $3413 = self.idx;
                var $3414 = self.code;
                var $3415 = self.val;
                var self = Parser$until1$(Fm$Parser$text(")"), Fm$Parser$item(Fm$Parser$term), $3413, $3414);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3417 = self.idx;
                        var $3418 = self.code;
                        var $3419 = self.err;
                        var $3420 = Parser$Reply$error$($3417, $3418, $3419);
                        var $3416 = $3420;
                        break;
                    case 'Parser.Reply.value':
                        var $3421 = self.idx;
                        var $3422 = self.code;
                        var $3423 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3421, $3422);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3425 = self.idx;
                                var $3426 = self.code;
                                var $3427 = self.err;
                                var $3428 = Parser$Reply$error$($3425, $3426, $3427);
                                var $3424 = $3428;
                                break;
                            case 'Parser.Reply.value':
                                var $3429 = self.idx;
                                var $3430 = self.code;
                                var $3431 = self.val;
                                var _expr$14 = (() => {
                                    var $3434 = _func$2;
                                    var $3435 = $3423;
                                    let _f$15 = $3434;
                                    let _x$14;
                                    while ($3435._ === 'List.cons') {
                                        _x$14 = $3435.head;
                                        var $3434 = Fm$Term$app$(_f$15, _x$14);
                                        _f$15 = $3434;
                                        $3435 = $3435.tail;
                                    }
                                    return _f$15;
                                })();
                                var $3432 = Parser$Reply$value$($3429, $3430, Fm$Term$ori$($3431, _expr$14));
                                var $3424 = $3432;
                                break;
                        };
                        var $3416 = $3424;
                        break;
                };
                var $3408 = $3416;
                break;
        };
        return $3408;
    };
    const Fm$Parser$application = x0 => x1 => x2 => x3 => Fm$Parser$application$(x0, x1, x2, x3);
    const Parser$spaces = Parser$many$(Parser$first_of$(List$cons$(Parser$text(" "), List$cons$(Parser$text("\u{a}"), List$nil))));

    function Parser$spaces_text$(_text$1, _idx$2, _code$3) {
        var self = Parser$spaces(_idx$2)(_code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3437 = self.idx;
                var $3438 = self.code;
                var $3439 = self.err;
                var $3440 = Parser$Reply$error$($3437, $3438, $3439);
                var $3436 = $3440;
                break;
            case 'Parser.Reply.value':
                var $3441 = self.idx;
                var $3442 = self.code;
                var $3443 = self.val;
                var $3444 = Parser$text$(_text$1, $3441, $3442);
                var $3436 = $3444;
                break;
        };
        return $3436;
    };
    const Parser$spaces_text = x0 => x1 => x2 => Parser$spaces_text$(x0, x1, x2);

    function Fm$Parser$application$erased$(_init$1, _func$2, _idx$3, _code$4) {
        var self = Parser$get_index$(_idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3446 = self.idx;
                var $3447 = self.code;
                var $3448 = self.err;
                var $3449 = Parser$Reply$error$($3446, $3447, $3448);
                var $3445 = $3449;
                break;
            case 'Parser.Reply.value':
                var $3450 = self.idx;
                var $3451 = self.code;
                var $3452 = self.val;
                var self = Parser$text$("<", $3450, $3451);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3454 = self.idx;
                        var $3455 = self.code;
                        var $3456 = self.err;
                        var $3457 = Parser$Reply$error$($3454, $3455, $3456);
                        var $3453 = $3457;
                        break;
                    case 'Parser.Reply.value':
                        var $3458 = self.idx;
                        var $3459 = self.code;
                        var $3460 = self.val;
                        var self = Parser$until1$(Parser$spaces_text(">"), Fm$Parser$item(Fm$Parser$term), $3458, $3459);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3462 = self.idx;
                                var $3463 = self.code;
                                var $3464 = self.err;
                                var $3465 = Parser$Reply$error$($3462, $3463, $3464);
                                var $3461 = $3465;
                                break;
                            case 'Parser.Reply.value':
                                var $3466 = self.idx;
                                var $3467 = self.code;
                                var $3468 = self.val;
                                var self = Fm$Parser$stop$($3452, $3466, $3467);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3470 = self.idx;
                                        var $3471 = self.code;
                                        var $3472 = self.err;
                                        var $3473 = Parser$Reply$error$($3470, $3471, $3472);
                                        var $3469 = $3473;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3474 = self.idx;
                                        var $3475 = self.code;
                                        var $3476 = self.val;
                                        var _expr$17 = (() => {
                                            var $3479 = _func$2;
                                            var $3480 = $3468;
                                            let _f$18 = $3479;
                                            let _x$17;
                                            while ($3480._ === 'List.cons') {
                                                _x$17 = $3480.head;
                                                var $3479 = Fm$Term$app$(_f$18, _x$17);
                                                _f$18 = $3479;
                                                $3480 = $3480.tail;
                                            }
                                            return _f$18;
                                        })();
                                        var $3477 = Parser$Reply$value$($3474, $3475, Fm$Term$ori$($3476, _expr$17));
                                        var $3469 = $3477;
                                        break;
                                };
                                var $3461 = $3469;
                                break;
                        };
                        var $3453 = $3461;
                        break;
                };
                var $3445 = $3453;
                break;
        };
        return $3445;
    };
    const Fm$Parser$application$erased = x0 => x1 => x2 => x3 => Fm$Parser$application$erased$(x0, x1, x2, x3);

    function Fm$Parser$arrow$(_init$1, _xtyp$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("->", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3482 = self.idx;
                var $3483 = self.code;
                var $3484 = self.err;
                var $3485 = Parser$Reply$error$($3482, $3483, $3484);
                var $3481 = $3485;
                break;
            case 'Parser.Reply.value':
                var $3486 = self.idx;
                var $3487 = self.code;
                var $3488 = self.val;
                var self = Fm$Parser$term$($3486, $3487);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3490 = self.idx;
                        var $3491 = self.code;
                        var $3492 = self.err;
                        var $3493 = Parser$Reply$error$($3490, $3491, $3492);
                        var $3489 = $3493;
                        break;
                    case 'Parser.Reply.value':
                        var $3494 = self.idx;
                        var $3495 = self.code;
                        var $3496 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3494, $3495);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3498 = self.idx;
                                var $3499 = self.code;
                                var $3500 = self.err;
                                var $3501 = Parser$Reply$error$($3498, $3499, $3500);
                                var $3497 = $3501;
                                break;
                            case 'Parser.Reply.value':
                                var $3502 = self.idx;
                                var $3503 = self.code;
                                var $3504 = self.val;
                                var $3505 = Parser$Reply$value$($3502, $3503, Fm$Term$ori$($3504, Fm$Term$all$(Bool$false, "", "", _xtyp$2, (_s$14 => _x$15 => {
                                    var $3506 = $3496;
                                    return $3506;
                                }))));
                                var $3497 = $3505;
                                break;
                        };
                        var $3489 = $3497;
                        break;
                };
                var $3481 = $3489;
                break;
        };
        return $3481;
    };
    const Fm$Parser$arrow = x0 => x1 => x2 => x3 => Fm$Parser$arrow$(x0, x1, x2, x3);

    function Fm$Parser$op$(_sym$1, _ref$2, _init$3, _val0$4, _idx$5, _code$6) {
        var self = Fm$Parser$text$(_sym$1, _idx$5, _code$6);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3508 = self.idx;
                var $3509 = self.code;
                var $3510 = self.err;
                var $3511 = Parser$Reply$error$($3508, $3509, $3510);
                var $3507 = $3511;
                break;
            case 'Parser.Reply.value':
                var $3512 = self.idx;
                var $3513 = self.code;
                var $3514 = self.val;
                var self = Fm$Parser$term$($3512, $3513);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3516 = self.idx;
                        var $3517 = self.code;
                        var $3518 = self.err;
                        var $3519 = Parser$Reply$error$($3516, $3517, $3518);
                        var $3515 = $3519;
                        break;
                    case 'Parser.Reply.value':
                        var $3520 = self.idx;
                        var $3521 = self.code;
                        var $3522 = self.val;
                        var self = Fm$Parser$stop$(_init$3, $3520, $3521);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3524 = self.idx;
                                var $3525 = self.code;
                                var $3526 = self.err;
                                var $3527 = Parser$Reply$error$($3524, $3525, $3526);
                                var $3523 = $3527;
                                break;
                            case 'Parser.Reply.value':
                                var $3528 = self.idx;
                                var $3529 = self.code;
                                var $3530 = self.val;
                                var _term$16 = Fm$Term$ref$(_ref$2);
                                var _term$17 = Fm$Term$app$(_term$16, _val0$4);
                                var _term$18 = Fm$Term$app$(_term$17, $3522);
                                var $3531 = Parser$Reply$value$($3528, $3529, Fm$Term$ori$($3530, _term$18));
                                var $3523 = $3531;
                                break;
                        };
                        var $3515 = $3523;
                        break;
                };
                var $3507 = $3515;
                break;
        };
        return $3507;
    };
    const Fm$Parser$op = x0 => x1 => x2 => x3 => x4 => x5 => Fm$Parser$op$(x0, x1, x2, x3, x4, x5);
    const Fm$Parser$add = Fm$Parser$op("+")("Nat.add");
    const Fm$Parser$sub = Fm$Parser$op("+")("Nat.add");
    const Fm$Parser$mul = Fm$Parser$op("*")("Nat.mul");
    const Fm$Parser$div = Fm$Parser$op("/")("Nat.div");
    const Fm$Parser$mod = Fm$Parser$op("%")("Nat.mod");

    function Fm$Parser$cons$(_init$1, _head$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("&", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3533 = self.idx;
                var $3534 = self.code;
                var $3535 = self.err;
                var $3536 = Parser$Reply$error$($3533, $3534, $3535);
                var $3532 = $3536;
                break;
            case 'Parser.Reply.value':
                var $3537 = self.idx;
                var $3538 = self.code;
                var $3539 = self.val;
                var self = Fm$Parser$term$($3537, $3538);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3541 = self.idx;
                        var $3542 = self.code;
                        var $3543 = self.err;
                        var $3544 = Parser$Reply$error$($3541, $3542, $3543);
                        var $3540 = $3544;
                        break;
                    case 'Parser.Reply.value':
                        var $3545 = self.idx;
                        var $3546 = self.code;
                        var $3547 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3545, $3546);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3549 = self.idx;
                                var $3550 = self.code;
                                var $3551 = self.err;
                                var $3552 = Parser$Reply$error$($3549, $3550, $3551);
                                var $3548 = $3552;
                                break;
                            case 'Parser.Reply.value':
                                var $3553 = self.idx;
                                var $3554 = self.code;
                                var $3555 = self.val;
                                var _term$14 = Fm$Term$ref$("List.cons");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _head$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3547);
                                var self = Fm$Parser$stop$(_init$1, $3553, $3554);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3557 = self.idx;
                                        var $3558 = self.code;
                                        var $3559 = self.err;
                                        var $3560 = Parser$Reply$error$($3557, $3558, $3559);
                                        var $3556 = $3560;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3561 = self.idx;
                                        var $3562 = self.code;
                                        var $3563 = self.val;
                                        var $3564 = Parser$Reply$value$($3561, $3562, Fm$Term$ori$($3563, _term$17));
                                        var $3556 = $3564;
                                        break;
                                };
                                var $3548 = $3556;
                                break;
                        };
                        var $3540 = $3548;
                        break;
                };
                var $3532 = $3540;
                break;
        };
        return $3532;
    };
    const Fm$Parser$cons = x0 => x1 => x2 => x3 => Fm$Parser$cons$(x0, x1, x2, x3);

    function Fm$Parser$concat$(_init$1, _lst0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("++", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3566 = self.idx;
                var $3567 = self.code;
                var $3568 = self.err;
                var $3569 = Parser$Reply$error$($3566, $3567, $3568);
                var $3565 = $3569;
                break;
            case 'Parser.Reply.value':
                var $3570 = self.idx;
                var $3571 = self.code;
                var $3572 = self.val;
                var self = Fm$Parser$term$($3570, $3571);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3574 = self.idx;
                        var $3575 = self.code;
                        var $3576 = self.err;
                        var $3577 = Parser$Reply$error$($3574, $3575, $3576);
                        var $3573 = $3577;
                        break;
                    case 'Parser.Reply.value':
                        var $3578 = self.idx;
                        var $3579 = self.code;
                        var $3580 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3578, $3579);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3582 = self.idx;
                                var $3583 = self.code;
                                var $3584 = self.err;
                                var $3585 = Parser$Reply$error$($3582, $3583, $3584);
                                var $3581 = $3585;
                                break;
                            case 'Parser.Reply.value':
                                var $3586 = self.idx;
                                var $3587 = self.code;
                                var $3588 = self.val;
                                var _term$14 = Fm$Term$ref$("List.concat");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _lst0$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3580);
                                var self = Fm$Parser$stop$(_init$1, $3586, $3587);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3590 = self.idx;
                                        var $3591 = self.code;
                                        var $3592 = self.err;
                                        var $3593 = Parser$Reply$error$($3590, $3591, $3592);
                                        var $3589 = $3593;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3594 = self.idx;
                                        var $3595 = self.code;
                                        var $3596 = self.val;
                                        var $3597 = Parser$Reply$value$($3594, $3595, Fm$Term$ori$($3596, _term$17));
                                        var $3589 = $3597;
                                        break;
                                };
                                var $3581 = $3589;
                                break;
                        };
                        var $3573 = $3581;
                        break;
                };
                var $3565 = $3573;
                break;
        };
        return $3565;
    };
    const Fm$Parser$concat = x0 => x1 => x2 => x3 => Fm$Parser$concat$(x0, x1, x2, x3);

    function Fm$Parser$string_concat$(_init$1, _str0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("|", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3599 = self.idx;
                var $3600 = self.code;
                var $3601 = self.err;
                var $3602 = Parser$Reply$error$($3599, $3600, $3601);
                var $3598 = $3602;
                break;
            case 'Parser.Reply.value':
                var $3603 = self.idx;
                var $3604 = self.code;
                var $3605 = self.val;
                var self = Fm$Parser$term$($3603, $3604);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3607 = self.idx;
                        var $3608 = self.code;
                        var $3609 = self.err;
                        var $3610 = Parser$Reply$error$($3607, $3608, $3609);
                        var $3606 = $3610;
                        break;
                    case 'Parser.Reply.value':
                        var $3611 = self.idx;
                        var $3612 = self.code;
                        var $3613 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3611, $3612);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3615 = self.idx;
                                var $3616 = self.code;
                                var $3617 = self.err;
                                var $3618 = Parser$Reply$error$($3615, $3616, $3617);
                                var $3614 = $3618;
                                break;
                            case 'Parser.Reply.value':
                                var $3619 = self.idx;
                                var $3620 = self.code;
                                var $3621 = self.val;
                                var _term$14 = Fm$Term$ref$("String.concat");
                                var _term$15 = Fm$Term$app$(_term$14, _str0$2);
                                var _term$16 = Fm$Term$app$(_term$15, $3613);
                                var self = Fm$Parser$stop$(_init$1, $3619, $3620);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3623 = self.idx;
                                        var $3624 = self.code;
                                        var $3625 = self.err;
                                        var $3626 = Parser$Reply$error$($3623, $3624, $3625);
                                        var $3622 = $3626;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3627 = self.idx;
                                        var $3628 = self.code;
                                        var $3629 = self.val;
                                        var $3630 = Parser$Reply$value$($3627, $3628, Fm$Term$ori$($3629, _term$16));
                                        var $3622 = $3630;
                                        break;
                                };
                                var $3614 = $3622;
                                break;
                        };
                        var $3606 = $3614;
                        break;
                };
                var $3598 = $3606;
                break;
        };
        return $3598;
    };
    const Fm$Parser$string_concat = x0 => x1 => x2 => x3 => Fm$Parser$string_concat$(x0, x1, x2, x3);

    function Fm$Parser$sigma$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("~", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3632 = self.idx;
                var $3633 = self.code;
                var $3634 = self.err;
                var $3635 = Parser$Reply$error$($3632, $3633, $3634);
                var $3631 = $3635;
                break;
            case 'Parser.Reply.value':
                var $3636 = self.idx;
                var $3637 = self.code;
                var $3638 = self.val;
                var self = Fm$Parser$term$($3636, $3637);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3640 = self.idx;
                        var $3641 = self.code;
                        var $3642 = self.err;
                        var $3643 = Parser$Reply$error$($3640, $3641, $3642);
                        var $3639 = $3643;
                        break;
                    case 'Parser.Reply.value':
                        var $3644 = self.idx;
                        var $3645 = self.code;
                        var $3646 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3644, $3645);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3648 = self.idx;
                                var $3649 = self.code;
                                var $3650 = self.err;
                                var $3651 = Parser$Reply$error$($3648, $3649, $3650);
                                var $3647 = $3651;
                                break;
                            case 'Parser.Reply.value':
                                var $3652 = self.idx;
                                var $3653 = self.code;
                                var $3654 = self.val;
                                var _term$14 = Fm$Term$ref$("Sigma.new");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, Fm$Term$hol$(Bits$e));
                                var _term$17 = Fm$Term$app$(_term$16, _val0$2);
                                var _term$18 = Fm$Term$app$(_term$17, $3646);
                                var $3655 = Parser$Reply$value$($3652, $3653, Fm$Term$ori$($3654, _term$18));
                                var $3647 = $3655;
                                break;
                        };
                        var $3639 = $3647;
                        break;
                };
                var $3631 = $3639;
                break;
        };
        return $3631;
    };
    const Fm$Parser$sigma = x0 => x1 => x2 => x3 => Fm$Parser$sigma$(x0, x1, x2, x3);

    function Fm$Parser$equality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("==", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3657 = self.idx;
                var $3658 = self.code;
                var $3659 = self.err;
                var $3660 = Parser$Reply$error$($3657, $3658, $3659);
                var $3656 = $3660;
                break;
            case 'Parser.Reply.value':
                var $3661 = self.idx;
                var $3662 = self.code;
                var $3663 = self.val;
                var self = Fm$Parser$term$($3661, $3662);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3665 = self.idx;
                        var $3666 = self.code;
                        var $3667 = self.err;
                        var $3668 = Parser$Reply$error$($3665, $3666, $3667);
                        var $3664 = $3668;
                        break;
                    case 'Parser.Reply.value':
                        var $3669 = self.idx;
                        var $3670 = self.code;
                        var $3671 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3669, $3670);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3673 = self.idx;
                                var $3674 = self.code;
                                var $3675 = self.err;
                                var $3676 = Parser$Reply$error$($3673, $3674, $3675);
                                var $3672 = $3676;
                                break;
                            case 'Parser.Reply.value':
                                var $3677 = self.idx;
                                var $3678 = self.code;
                                var $3679 = self.val;
                                var _term$14 = Fm$Term$ref$("Equal");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _val0$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3671);
                                var $3680 = Parser$Reply$value$($3677, $3678, Fm$Term$ori$($3679, _term$17));
                                var $3672 = $3680;
                                break;
                        };
                        var $3664 = $3672;
                        break;
                };
                var $3656 = $3664;
                break;
        };
        return $3656;
    };
    const Fm$Parser$equality = x0 => x1 => x2 => x3 => Fm$Parser$equality$(x0, x1, x2, x3);

    function Fm$Parser$inequality$(_init$1, _val0$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("!=", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3682 = self.idx;
                var $3683 = self.code;
                var $3684 = self.err;
                var $3685 = Parser$Reply$error$($3682, $3683, $3684);
                var $3681 = $3685;
                break;
            case 'Parser.Reply.value':
                var $3686 = self.idx;
                var $3687 = self.code;
                var $3688 = self.val;
                var self = Fm$Parser$term$($3686, $3687);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3690 = self.idx;
                        var $3691 = self.code;
                        var $3692 = self.err;
                        var $3693 = Parser$Reply$error$($3690, $3691, $3692);
                        var $3689 = $3693;
                        break;
                    case 'Parser.Reply.value':
                        var $3694 = self.idx;
                        var $3695 = self.code;
                        var $3696 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3694, $3695);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3698 = self.idx;
                                var $3699 = self.code;
                                var $3700 = self.err;
                                var $3701 = Parser$Reply$error$($3698, $3699, $3700);
                                var $3697 = $3701;
                                break;
                            case 'Parser.Reply.value':
                                var $3702 = self.idx;
                                var $3703 = self.code;
                                var $3704 = self.val;
                                var _term$14 = Fm$Term$ref$("Equal");
                                var _term$15 = Fm$Term$app$(_term$14, Fm$Term$hol$(Bits$e));
                                var _term$16 = Fm$Term$app$(_term$15, _val0$2);
                                var _term$17 = Fm$Term$app$(_term$16, $3696);
                                var _term$18 = Fm$Term$app$(Fm$Term$ref$("Not"), _term$17);
                                var $3705 = Parser$Reply$value$($3702, $3703, Fm$Term$ori$($3704, _term$18));
                                var $3697 = $3705;
                                break;
                        };
                        var $3689 = $3697;
                        break;
                };
                var $3681 = $3689;
                break;
        };
        return $3681;
    };
    const Fm$Parser$inequality = x0 => x1 => x2 => x3 => Fm$Parser$inequality$(x0, x1, x2, x3);

    function Fm$Parser$rewrite$(_init$1, _subt$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3707 = self.idx;
                var $3708 = self.code;
                var $3709 = self.err;
                var $3710 = Parser$Reply$error$($3707, $3708, $3709);
                var $3706 = $3710;
                break;
            case 'Parser.Reply.value':
                var $3711 = self.idx;
                var $3712 = self.code;
                var $3713 = self.val;
                var self = Fm$Parser$text$("rewrite", $3711, $3712);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3715 = self.idx;
                        var $3716 = self.code;
                        var $3717 = self.err;
                        var $3718 = Parser$Reply$error$($3715, $3716, $3717);
                        var $3714 = $3718;
                        break;
                    case 'Parser.Reply.value':
                        var $3719 = self.idx;
                        var $3720 = self.code;
                        var $3721 = self.val;
                        var self = Fm$Parser$name1$($3719, $3720);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3723 = self.idx;
                                var $3724 = self.code;
                                var $3725 = self.err;
                                var $3726 = Parser$Reply$error$($3723, $3724, $3725);
                                var $3722 = $3726;
                                break;
                            case 'Parser.Reply.value':
                                var $3727 = self.idx;
                                var $3728 = self.code;
                                var $3729 = self.val;
                                var self = Fm$Parser$text$("in", $3727, $3728);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $3731 = self.idx;
                                        var $3732 = self.code;
                                        var $3733 = self.err;
                                        var $3734 = Parser$Reply$error$($3731, $3732, $3733);
                                        var $3730 = $3734;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $3735 = self.idx;
                                        var $3736 = self.code;
                                        var $3737 = self.val;
                                        var self = Fm$Parser$term$($3735, $3736);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $3739 = self.idx;
                                                var $3740 = self.code;
                                                var $3741 = self.err;
                                                var $3742 = Parser$Reply$error$($3739, $3740, $3741);
                                                var $3738 = $3742;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $3743 = self.idx;
                                                var $3744 = self.code;
                                                var $3745 = self.val;
                                                var self = Fm$Parser$text$("with", $3743, $3744);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $3747 = self.idx;
                                                        var $3748 = self.code;
                                                        var $3749 = self.err;
                                                        var $3750 = Parser$Reply$error$($3747, $3748, $3749);
                                                        var $3746 = $3750;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $3751 = self.idx;
                                                        var $3752 = self.code;
                                                        var $3753 = self.val;
                                                        var self = Fm$Parser$term$($3751, $3752);
                                                        switch (self._) {
                                                            case 'Parser.Reply.error':
                                                                var $3755 = self.idx;
                                                                var $3756 = self.code;
                                                                var $3757 = self.err;
                                                                var $3758 = Parser$Reply$error$($3755, $3756, $3757);
                                                                var $3754 = $3758;
                                                                break;
                                                            case 'Parser.Reply.value':
                                                                var $3759 = self.idx;
                                                                var $3760 = self.code;
                                                                var $3761 = self.val;
                                                                var self = Fm$Parser$stop$(_init$1, $3759, $3760);
                                                                switch (self._) {
                                                                    case 'Parser.Reply.error':
                                                                        var $3763 = self.idx;
                                                                        var $3764 = self.code;
                                                                        var $3765 = self.err;
                                                                        var $3766 = Parser$Reply$error$($3763, $3764, $3765);
                                                                        var $3762 = $3766;
                                                                        break;
                                                                    case 'Parser.Reply.value':
                                                                        var $3767 = self.idx;
                                                                        var $3768 = self.code;
                                                                        var $3769 = self.val;
                                                                        var _term$29 = Fm$Term$ref$("Equal.rewrite");
                                                                        var _term$30 = Fm$Term$app$(_term$29, Fm$Term$hol$(Bits$e));
                                                                        var _term$31 = Fm$Term$app$(_term$30, Fm$Term$hol$(Bits$e));
                                                                        var _term$32 = Fm$Term$app$(_term$31, Fm$Term$hol$(Bits$e));
                                                                        var _term$33 = Fm$Term$app$(_term$32, Fm$Term$lam$($3729, (_x$33 => {
                                                                            var $3771 = $3745;
                                                                            return $3771;
                                                                        })));
                                                                        var _term$34 = Fm$Term$app$(_term$33, $3761);
                                                                        var _term$35 = Fm$Term$app$(_term$34, _subt$2);
                                                                        var $3770 = Parser$Reply$value$($3767, $3768, Fm$Term$ori$($3769, _term$35));
                                                                        var $3762 = $3770;
                                                                        break;
                                                                };
                                                                var $3754 = $3762;
                                                                break;
                                                        };
                                                        var $3746 = $3754;
                                                        break;
                                                };
                                                var $3738 = $3746;
                                                break;
                                        };
                                        var $3730 = $3738;
                                        break;
                                };
                                var $3722 = $3730;
                                break;
                        };
                        var $3714 = $3722;
                        break;
                };
                var $3706 = $3714;
                break;
        };
        return $3706;
    };
    const Fm$Parser$rewrite = x0 => x1 => x2 => x3 => Fm$Parser$rewrite$(x0, x1, x2, x3);

    function Fm$Term$ann$(_done$1, _term$2, _type$3) {
        var $3772 = ({
            _: 'Fm.Term.ann',
            'done': _done$1,
            'term': _term$2,
            'type': _type$3
        });
        return $3772;
    };
    const Fm$Term$ann = x0 => x1 => x2 => Fm$Term$ann$(x0, x1, x2);

    function Fm$Parser$annotation$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("::", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3774 = self.idx;
                var $3775 = self.code;
                var $3776 = self.err;
                var $3777 = Parser$Reply$error$($3774, $3775, $3776);
                var $3773 = $3777;
                break;
            case 'Parser.Reply.value':
                var $3778 = self.idx;
                var $3779 = self.code;
                var $3780 = self.val;
                var self = Fm$Parser$term$($3778, $3779);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3782 = self.idx;
                        var $3783 = self.code;
                        var $3784 = self.err;
                        var $3785 = Parser$Reply$error$($3782, $3783, $3784);
                        var $3781 = $3785;
                        break;
                    case 'Parser.Reply.value':
                        var $3786 = self.idx;
                        var $3787 = self.code;
                        var $3788 = self.val;
                        var self = Fm$Parser$stop$(_init$1, $3786, $3787);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3790 = self.idx;
                                var $3791 = self.code;
                                var $3792 = self.err;
                                var $3793 = Parser$Reply$error$($3790, $3791, $3792);
                                var $3789 = $3793;
                                break;
                            case 'Parser.Reply.value':
                                var $3794 = self.idx;
                                var $3795 = self.code;
                                var $3796 = self.val;
                                var $3797 = Parser$Reply$value$($3794, $3795, Fm$Term$ori$($3796, Fm$Term$ann$(Bool$false, _term$2, $3788)));
                                var $3789 = $3797;
                                break;
                        };
                        var $3781 = $3789;
                        break;
                };
                var $3773 = $3781;
                break;
        };
        return $3773;
    };
    const Fm$Parser$annotation = x0 => x1 => x2 => x3 => Fm$Parser$annotation$(x0, x1, x2, x3);

    function Fm$Parser$application$hole$(_init$1, _term$2, _idx$3, _code$4) {
        var self = Fm$Parser$text$("!", _idx$3, _code$4);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3799 = self.idx;
                var $3800 = self.code;
                var $3801 = self.err;
                var $3802 = Parser$Reply$error$($3799, $3800, $3801);
                var $3798 = $3802;
                break;
            case 'Parser.Reply.value':
                var $3803 = self.idx;
                var $3804 = self.code;
                var $3805 = self.val;
                var self = Fm$Parser$stop$(_init$1, $3803, $3804);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3807 = self.idx;
                        var $3808 = self.code;
                        var $3809 = self.err;
                        var $3810 = Parser$Reply$error$($3807, $3808, $3809);
                        var $3806 = $3810;
                        break;
                    case 'Parser.Reply.value':
                        var $3811 = self.idx;
                        var $3812 = self.code;
                        var $3813 = self.val;
                        var $3814 = Parser$Reply$value$($3811, $3812, Fm$Term$ori$($3813, Fm$Term$app$(_term$2, Fm$Term$hol$(Bits$e))));
                        var $3806 = $3814;
                        break;
                };
                var $3798 = $3806;
                break;
        };
        return $3798;
    };
    const Fm$Parser$application$hole = x0 => x1 => x2 => x3 => Fm$Parser$application$hole$(x0, x1, x2, x3);

    function Fm$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4) {
        var Fm$Parser$suffix$ = (_init$1, _term$2, _idx$3, _code$4) => ({
            ctr: 'TCO',
            arg: [_init$1, _term$2, _idx$3, _code$4]
        });
        var Fm$Parser$suffix = _init$1 => _term$2 => _idx$3 => _code$4 => Fm$Parser$suffix$(_init$1, _term$2, _idx$3, _code$4);
        var arg = [_init$1, _term$2, _idx$3, _code$4];
        while (true) {
            let [_init$1, _term$2, _idx$3, _code$4] = arg;
            var R = (() => {
                var _suffix_parser$5 = Parser$first_of$(List$cons$(Fm$Parser$application(_init$1)(_term$2), List$cons$(Fm$Parser$application$erased(_init$1)(_term$2), List$cons$(Fm$Parser$arrow(_init$1)(_term$2), List$cons$(Fm$Parser$add(_init$1)(_term$2), List$cons$(Fm$Parser$sub(_init$1)(_term$2), List$cons$(Fm$Parser$mul(_init$1)(_term$2), List$cons$(Fm$Parser$div(_init$1)(_term$2), List$cons$(Fm$Parser$mod(_init$1)(_term$2), List$cons$(Fm$Parser$cons(_init$1)(_term$2), List$cons$(Fm$Parser$concat(_init$1)(_term$2), List$cons$(Fm$Parser$string_concat(_init$1)(_term$2), List$cons$(Fm$Parser$sigma(_init$1)(_term$2), List$cons$(Fm$Parser$equality(_init$1)(_term$2), List$cons$(Fm$Parser$inequality(_init$1)(_term$2), List$cons$(Fm$Parser$rewrite(_init$1)(_term$2), List$cons$(Fm$Parser$annotation(_init$1)(_term$2), List$cons$(Fm$Parser$application$hole(_init$1)(_term$2), List$nil))))))))))))))))));
                var self = _suffix_parser$5(_idx$3)(_code$4);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3816 = self.idx;
                        var $3817 = self.code;
                        var $3818 = self.err;
                        var $3819 = Parser$Reply$value$(_idx$3, _code$4, _term$2);
                        var $3815 = $3819;
                        break;
                    case 'Parser.Reply.value':
                        var $3820 = self.idx;
                        var $3821 = self.code;
                        var $3822 = self.val;
                        var $3823 = Fm$Parser$suffix$(_init$1, $3822, $3820, $3821);
                        var $3815 = $3823;
                        break;
                };
                return $3815;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Parser$suffix = x0 => x1 => x2 => x3 => Fm$Parser$suffix$(x0, x1, x2, x3);

    function Fm$Parser$term$(_idx$1, _code$2) {
        var self = Parser$get_code$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3825 = self.idx;
                var $3826 = self.code;
                var $3827 = self.err;
                var $3828 = Parser$Reply$error$($3825, $3826, $3827);
                var $3824 = $3828;
                break;
            case 'Parser.Reply.value':
                var $3829 = self.idx;
                var $3830 = self.code;
                var $3831 = self.val;
                var self = Fm$Parser$init$($3829, $3830);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3833 = self.idx;
                        var $3834 = self.code;
                        var $3835 = self.err;
                        var $3836 = Parser$Reply$error$($3833, $3834, $3835);
                        var $3832 = $3836;
                        break;
                    case 'Parser.Reply.value':
                        var $3837 = self.idx;
                        var $3838 = self.code;
                        var $3839 = self.val;
                        var self = Parser$first_of$(List$cons$(Fm$Parser$type, List$cons$(Fm$Parser$forall, List$cons$(Fm$Parser$lambda, List$cons$(Fm$Parser$lambda$erased, List$cons$(Fm$Parser$lambda$nameless, List$cons$(Fm$Parser$parenthesis, List$cons$(Fm$Parser$letforrange$u32, List$cons$(Fm$Parser$letforin, List$cons$(Fm$Parser$let, List$cons$(Fm$Parser$get, List$cons$(Fm$Parser$def, List$cons$(Fm$Parser$if, List$cons$(Fm$Parser$char, List$cons$(Fm$Parser$string, List$cons$(Fm$Parser$pair, List$cons$(Fm$Parser$sigma$type, List$cons$(Fm$Parser$some, List$cons$(Fm$Parser$apply, List$cons$(Fm$Parser$list, List$cons$(Fm$Parser$log, List$cons$(Fm$Parser$forrange$u32, List$cons$(Fm$Parser$forrange$u32$2, List$cons$(Fm$Parser$forin, List$cons$(Fm$Parser$forin$2, List$cons$(Fm$Parser$do, List$cons$(Fm$Parser$case, List$cons$(Fm$Parser$open, List$cons$(Fm$Parser$goal, List$cons$(Fm$Parser$hole, List$cons$(Fm$Parser$u8, List$cons$(Fm$Parser$u16, List$cons$(Fm$Parser$u32, List$cons$(Fm$Parser$u64, List$cons$(Fm$Parser$nat, List$cons$(Fm$Parser$reference, List$nil))))))))))))))))))))))))))))))))))))($3837)($3838);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3841 = self.idx;
                                var $3842 = self.code;
                                var $3843 = self.err;
                                var $3844 = Parser$Reply$error$($3841, $3842, $3843);
                                var $3840 = $3844;
                                break;
                            case 'Parser.Reply.value':
                                var $3845 = self.idx;
                                var $3846 = self.code;
                                var $3847 = self.val;
                                var $3848 = Fm$Parser$suffix$($3839, $3847, $3845, $3846);
                                var $3840 = $3848;
                                break;
                        };
                        var $3832 = $3840;
                        break;
                };
                var $3824 = $3832;
                break;
        };
        return $3824;
    };
    const Fm$Parser$term = x0 => x1 => Fm$Parser$term$(x0, x1);

    function Fm$Parser$name_term$(_idx$1, _code$2) {
        var self = Fm$Parser$name$(_idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3850 = self.idx;
                var $3851 = self.code;
                var $3852 = self.err;
                var $3853 = Parser$Reply$error$($3850, $3851, $3852);
                var $3849 = $3853;
                break;
            case 'Parser.Reply.value':
                var $3854 = self.idx;
                var $3855 = self.code;
                var $3856 = self.val;
                var self = Fm$Parser$text$(":", $3854, $3855);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3858 = self.idx;
                        var $3859 = self.code;
                        var $3860 = self.err;
                        var $3861 = Parser$Reply$error$($3858, $3859, $3860);
                        var $3857 = $3861;
                        break;
                    case 'Parser.Reply.value':
                        var $3862 = self.idx;
                        var $3863 = self.code;
                        var $3864 = self.val;
                        var self = Fm$Parser$term$($3862, $3863);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $3866 = self.idx;
                                var $3867 = self.code;
                                var $3868 = self.err;
                                var $3869 = Parser$Reply$error$($3866, $3867, $3868);
                                var $3865 = $3869;
                                break;
                            case 'Parser.Reply.value':
                                var $3870 = self.idx;
                                var $3871 = self.code;
                                var $3872 = self.val;
                                var $3873 = Parser$Reply$value$($3870, $3871, Pair$new$($3856, $3872));
                                var $3865 = $3873;
                                break;
                        };
                        var $3857 = $3865;
                        break;
                };
                var $3849 = $3857;
                break;
        };
        return $3849;
    };
    const Fm$Parser$name_term = x0 => x1 => Fm$Parser$name_term$(x0, x1);

    function Fm$Binder$new$(_eras$1, _name$2, _term$3) {
        var $3874 = ({
            _: 'Fm.Binder.new',
            'eras': _eras$1,
            'name': _name$2,
            'term': _term$3
        });
        return $3874;
    };
    const Fm$Binder$new = x0 => x1 => x2 => Fm$Binder$new$(x0, x1, x2);

    function Fm$Parser$binder$homo$(_eras$1, _idx$2, _code$3) {
        var self = Fm$Parser$text$((() => {
            var self = _eras$1;
            if (self) {
                var $3876 = "<";
                return $3876;
            } else {
                var $3877 = "(";
                return $3877;
            };
        })(), _idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3878 = self.idx;
                var $3879 = self.code;
                var $3880 = self.err;
                var $3881 = Parser$Reply$error$($3878, $3879, $3880);
                var $3875 = $3881;
                break;
            case 'Parser.Reply.value':
                var $3882 = self.idx;
                var $3883 = self.code;
                var $3884 = self.val;
                var self = Parser$until1$(Fm$Parser$text((() => {
                    var self = _eras$1;
                    if (self) {
                        var $3886 = ">";
                        return $3886;
                    } else {
                        var $3887 = ")";
                        return $3887;
                    };
                })()), Fm$Parser$item(Fm$Parser$name_term), $3882, $3883);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $3888 = self.idx;
                        var $3889 = self.code;
                        var $3890 = self.err;
                        var $3891 = Parser$Reply$error$($3888, $3889, $3890);
                        var $3885 = $3891;
                        break;
                    case 'Parser.Reply.value':
                        var $3892 = self.idx;
                        var $3893 = self.code;
                        var $3894 = self.val;
                        var $3895 = Parser$Reply$value$($3892, $3893, List$mapped$($3894, (_pair$10 => {
                            var self = _pair$10;
                            switch (self._) {
                                case 'Pair.new':
                                    var $3897 = self.fst;
                                    var $3898 = self.snd;
                                    var $3899 = Fm$Binder$new$(_eras$1, $3897, $3898);
                                    var $3896 = $3899;
                                    break;
                            };
                            return $3896;
                        })));
                        var $3885 = $3895;
                        break;
                };
                var $3875 = $3885;
                break;
        };
        return $3875;
    };
    const Fm$Parser$binder$homo = x0 => x1 => x2 => Fm$Parser$binder$homo$(x0, x1, x2);

    function List$concat$(_as$2, _bs$3) {
        var self = _as$2;
        switch (self._) {
            case 'List.nil':
                var $3901 = _bs$3;
                var $3900 = $3901;
                break;
            case 'List.cons':
                var $3902 = self.head;
                var $3903 = self.tail;
                var $3904 = List$cons$($3902, List$concat$($3903, _bs$3));
                var $3900 = $3904;
                break;
        };
        return $3900;
    };
    const List$concat = x0 => x1 => List$concat$(x0, x1);

    function List$flatten$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.nil':
                var $3906 = List$nil;
                var $3905 = $3906;
                break;
            case 'List.cons':
                var $3907 = self.head;
                var $3908 = self.tail;
                var $3909 = List$concat$($3907, List$flatten$($3908));
                var $3905 = $3909;
                break;
        };
        return $3905;
    };
    const List$flatten = x0 => List$flatten$(x0);

    function Fm$Parser$binder$(_idx$1, _code$2) {
        var self = Parser$many1$(Parser$first_of$(List$cons$(Fm$Parser$binder$homo(Bool$true), List$cons$(Fm$Parser$binder$homo(Bool$false), List$nil))), _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $3911 = self.idx;
                var $3912 = self.code;
                var $3913 = self.err;
                var $3914 = Parser$Reply$error$($3911, $3912, $3913);
                var $3910 = $3914;
                break;
            case 'Parser.Reply.value':
                var $3915 = self.idx;
                var $3916 = self.code;
                var $3917 = self.val;
                var $3918 = Parser$Reply$value$($3915, $3916, List$flatten$($3917));
                var $3910 = $3918;
                break;
        };
        return $3910;
    };
    const Fm$Parser$binder = x0 => x1 => Fm$Parser$binder$(x0, x1);

    function Fm$Parser$make_forall$(_binds$1, _body$2) {
        var self = _binds$1;
        switch (self._) {
            case 'List.nil':
                var $3920 = _body$2;
                var $3919 = $3920;
                break;
            case 'List.cons':
                var $3921 = self.head;
                var $3922 = self.tail;
                var self = $3921;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $3924 = self.eras;
                        var $3925 = self.name;
                        var $3926 = self.term;
                        var $3927 = Fm$Term$all$($3924, "", $3925, $3926, (_s$8 => _x$9 => {
                            var $3928 = Fm$Parser$make_forall$($3922, _body$2);
                            return $3928;
                        }));
                        var $3923 = $3927;
                        break;
                };
                var $3919 = $3923;
                break;
        };
        return $3919;
    };
    const Fm$Parser$make_forall = x0 => x1 => Fm$Parser$make_forall$(x0, x1);

    function List$at$(_index$2, _list$3) {
        var List$at$ = (_index$2, _list$3) => ({
            ctr: 'TCO',
            arg: [_index$2, _list$3]
        });
        var List$at = _index$2 => _list$3 => List$at$(_index$2, _list$3);
        var arg = [_index$2, _list$3];
        while (true) {
            let [_index$2, _list$3] = arg;
            var R = (() => {
                var self = _list$3;
                switch (self._) {
                    case 'List.nil':
                        var $3929 = Maybe$none;
                        return $3929;
                    case 'List.cons':
                        var $3930 = self.head;
                        var $3931 = self.tail;
                        var self = _index$2;
                        if (self === 0n) {
                            var $3933 = Maybe$some$($3930);
                            var $3932 = $3933;
                        } else {
                            var $3934 = (self - 1n);
                            var $3935 = List$at$($3934, $3931);
                            var $3932 = $3935;
                        };
                        return $3932;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const List$at = x0 => x1 => List$at$(x0, x1);

    function List$at_last$(_index$2, _list$3) {
        var $3936 = List$at$(_index$2, List$reverse$(_list$3));
        return $3936;
    };
    const List$at_last = x0 => x1 => List$at_last$(x0, x1);

    function Fm$Term$var$(_name$1, _indx$2) {
        var $3937 = ({
            _: 'Fm.Term.var',
            'name': _name$1,
            'indx': _indx$2
        });
        return $3937;
    };
    const Fm$Term$var = x0 => x1 => Fm$Term$var$(x0, x1);

    function Fm$Context$get_name_skips$(_name$1) {
        var self = _name$1;
        if (self.length === 0) {
            var $3939 = Pair$new$("", 0n);
            var $3938 = $3939;
        } else {
            var $3940 = self.charCodeAt(0);
            var $3941 = self.slice(1);
            var _name_skips$4 = Fm$Context$get_name_skips$($3941);
            var self = _name_skips$4;
            switch (self._) {
                case 'Pair.new':
                    var $3943 = self.fst;
                    var $3944 = self.snd;
                    var self = ($3940 === 94);
                    if (self) {
                        var $3946 = Pair$new$($3943, Nat$succ$($3944));
                        var $3945 = $3946;
                    } else {
                        var $3947 = Pair$new$(String$cons$($3940, $3943), $3944);
                        var $3945 = $3947;
                    };
                    var $3942 = $3945;
                    break;
            };
            var $3938 = $3942;
        };
        return $3938;
    };
    const Fm$Context$get_name_skips = x0 => Fm$Context$get_name_skips$(x0);

    function Fm$Name$eql$(_a$1, _b$2) {
        var $3948 = (_a$1 === _b$2);
        return $3948;
    };
    const Fm$Name$eql = x0 => x1 => Fm$Name$eql$(x0, x1);

    function Fm$Context$find$go$(_name$1, _skip$2, _ctx$3) {
        var Fm$Context$find$go$ = (_name$1, _skip$2, _ctx$3) => ({
            ctr: 'TCO',
            arg: [_name$1, _skip$2, _ctx$3]
        });
        var Fm$Context$find$go = _name$1 => _skip$2 => _ctx$3 => Fm$Context$find$go$(_name$1, _skip$2, _ctx$3);
        var arg = [_name$1, _skip$2, _ctx$3];
        while (true) {
            let [_name$1, _skip$2, _ctx$3] = arg;
            var R = (() => {
                var self = _ctx$3;
                switch (self._) {
                    case 'List.nil':
                        var $3949 = Maybe$none;
                        return $3949;
                    case 'List.cons':
                        var $3950 = self.head;
                        var $3951 = self.tail;
                        var self = $3950;
                        switch (self._) {
                            case 'Pair.new':
                                var $3953 = self.fst;
                                var $3954 = self.snd;
                                var self = Fm$Name$eql$(_name$1, $3953);
                                if (self) {
                                    var self = _skip$2;
                                    if (self === 0n) {
                                        var $3957 = Maybe$some$($3954);
                                        var $3956 = $3957;
                                    } else {
                                        var $3958 = (self - 1n);
                                        var $3959 = Fm$Context$find$go$(_name$1, $3958, $3951);
                                        var $3956 = $3959;
                                    };
                                    var $3955 = $3956;
                                } else {
                                    var $3960 = Fm$Context$find$go$(_name$1, _skip$2, $3951);
                                    var $3955 = $3960;
                                };
                                var $3952 = $3955;
                                break;
                        };
                        return $3952;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Context$find$go = x0 => x1 => x2 => Fm$Context$find$go$(x0, x1, x2);

    function Fm$Context$find$(_name$1, _ctx$2) {
        var self = Fm$Context$get_name_skips$(_name$1);
        switch (self._) {
            case 'Pair.new':
                var $3962 = self.fst;
                var $3963 = self.snd;
                var $3964 = Fm$Context$find$go$($3962, $3963, _ctx$2);
                var $3961 = $3964;
                break;
        };
        return $3961;
    };
    const Fm$Context$find = x0 => x1 => Fm$Context$find$(x0, x1);
    const List$length = a0 => (list_length(a0));

    function Fm$Path$o$(_path$1, _x$2) {
        var $3965 = _path$1((_x$2 + '0'));
        return $3965;
    };
    const Fm$Path$o = x0 => x1 => Fm$Path$o$(x0, x1);

    function Fm$Path$i$(_path$1, _x$2) {
        var $3966 = _path$1((_x$2 + '1'));
        return $3966;
    };
    const Fm$Path$i = x0 => x1 => Fm$Path$i$(x0, x1);

    function Fm$Path$to_bits$(_path$1) {
        var $3967 = _path$1(Bits$e);
        return $3967;
    };
    const Fm$Path$to_bits = x0 => Fm$Path$to_bits$(x0);

    function Fm$Term$bind$(_vars$1, _path$2, _term$3) {
        var self = _term$3;
        switch (self._) {
            case 'Fm.Term.var':
                var $3969 = self.name;
                var $3970 = self.indx;
                var self = List$at_last$($3970, _vars$1);
                switch (self._) {
                    case 'Maybe.none':
                        var $3972 = Fm$Term$var$($3969, $3970);
                        var $3971 = $3972;
                        break;
                    case 'Maybe.some':
                        var $3973 = self.value;
                        var $3974 = Pair$snd$($3973);
                        var $3971 = $3974;
                        break;
                };
                var $3968 = $3971;
                break;
            case 'Fm.Term.ref':
                var $3975 = self.name;
                var self = Fm$Context$find$($3975, _vars$1);
                switch (self._) {
                    case 'Maybe.none':
                        var $3977 = Fm$Term$ref$($3975);
                        var $3976 = $3977;
                        break;
                    case 'Maybe.some':
                        var $3978 = self.value;
                        var $3979 = $3978;
                        var $3976 = $3979;
                        break;
                };
                var $3968 = $3976;
                break;
            case 'Fm.Term.typ':
                var $3980 = Fm$Term$typ;
                var $3968 = $3980;
                break;
            case 'Fm.Term.all':
                var $3981 = self.eras;
                var $3982 = self.self;
                var $3983 = self.name;
                var $3984 = self.xtyp;
                var $3985 = self.body;
                var _vlen$9 = (list_length(_vars$1));
                var $3986 = Fm$Term$all$($3981, $3982, $3983, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $3984), (_s$10 => _x$11 => {
                    var $3987 = Fm$Term$bind$(List$cons$(Pair$new$($3983, _x$11), List$cons$(Pair$new$($3982, _s$10), _vars$1)), Fm$Path$i(_path$2), $3985(Fm$Term$var$($3982, _vlen$9))(Fm$Term$var$($3983, Nat$succ$(_vlen$9))));
                    return $3987;
                }));
                var $3968 = $3986;
                break;
            case 'Fm.Term.lam':
                var $3988 = self.name;
                var $3989 = self.body;
                var _vlen$6 = (list_length(_vars$1));
                var $3990 = Fm$Term$lam$($3988, (_x$7 => {
                    var $3991 = Fm$Term$bind$(List$cons$(Pair$new$($3988, _x$7), _vars$1), Fm$Path$o(_path$2), $3989(Fm$Term$var$($3988, _vlen$6)));
                    return $3991;
                }));
                var $3968 = $3990;
                break;
            case 'Fm.Term.app':
                var $3992 = self.func;
                var $3993 = self.argm;
                var $3994 = Fm$Term$app$(Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $3992), Fm$Term$bind$(_vars$1, Fm$Path$i(_path$2), $3993));
                var $3968 = $3994;
                break;
            case 'Fm.Term.let':
                var $3995 = self.name;
                var $3996 = self.expr;
                var $3997 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $3998 = Fm$Term$let$($3995, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $3996), (_x$8 => {
                    var $3999 = Fm$Term$bind$(List$cons$(Pair$new$($3995, _x$8), _vars$1), Fm$Path$i(_path$2), $3997(Fm$Term$var$($3995, _vlen$7)));
                    return $3999;
                }));
                var $3968 = $3998;
                break;
            case 'Fm.Term.def':
                var $4000 = self.name;
                var $4001 = self.expr;
                var $4002 = self.body;
                var _vlen$7 = (list_length(_vars$1));
                var $4003 = Fm$Term$def$($4000, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4001), (_x$8 => {
                    var $4004 = Fm$Term$bind$(List$cons$(Pair$new$($4000, _x$8), _vars$1), Fm$Path$i(_path$2), $4002(Fm$Term$var$($4000, _vlen$7)));
                    return $4004;
                }));
                var $3968 = $4003;
                break;
            case 'Fm.Term.ann':
                var $4005 = self.done;
                var $4006 = self.term;
                var $4007 = self.type;
                var $4008 = Fm$Term$ann$($4005, Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4006), Fm$Term$bind$(_vars$1, Fm$Path$i(_path$2), $4007));
                var $3968 = $4008;
                break;
            case 'Fm.Term.gol':
                var $4009 = self.name;
                var $4010 = self.dref;
                var $4011 = self.verb;
                var $4012 = Fm$Term$gol$($4009, $4010, $4011);
                var $3968 = $4012;
                break;
            case 'Fm.Term.hol':
                var $4013 = self.path;
                var $4014 = Fm$Term$hol$(Fm$Path$to_bits$(_path$2));
                var $3968 = $4014;
                break;
            case 'Fm.Term.nat':
                var $4015 = self.natx;
                var $4016 = Fm$Term$nat$($4015);
                var $3968 = $4016;
                break;
            case 'Fm.Term.chr':
                var $4017 = self.chrx;
                var $4018 = Fm$Term$chr$($4017);
                var $3968 = $4018;
                break;
            case 'Fm.Term.str':
                var $4019 = self.strx;
                var $4020 = Fm$Term$str$($4019);
                var $3968 = $4020;
                break;
            case 'Fm.Term.cse':
                var $4021 = self.path;
                var $4022 = self.expr;
                var $4023 = self.name;
                var $4024 = self.with;
                var $4025 = self.cses;
                var $4026 = self.moti;
                var _expr$10 = Fm$Term$bind$(_vars$1, Fm$Path$o(_path$2), $4022);
                var _name$11 = $4023;
                var _wyth$12 = $4024;
                var _cses$13 = $4025;
                var _moti$14 = $4026;
                var $4027 = Fm$Term$cse$(Fm$Path$to_bits$(_path$2), _expr$10, _name$11, _wyth$12, _cses$13, _moti$14);
                var $3968 = $4027;
                break;
            case 'Fm.Term.ori':
                var $4028 = self.orig;
                var $4029 = self.expr;
                var $4030 = Fm$Term$ori$($4028, Fm$Term$bind$(_vars$1, _path$2, $4029));
                var $3968 = $4030;
                break;
        };
        return $3968;
    };
    const Fm$Term$bind = x0 => x1 => x2 => Fm$Term$bind$(x0, x1, x2);
    const Fm$Status$done = ({
        _: 'Fm.Status.done'
    });

    function Fm$define$(_file$1, _code$2, _name$3, _term$4, _type$5, _done$6, _defs$7) {
        var self = _done$6;
        if (self) {
            var $4032 = Fm$Status$done;
            var _stat$8 = $4032;
        } else {
            var $4033 = Fm$Status$init;
            var _stat$8 = $4033;
        };
        var $4031 = Fm$set$(_name$3, Fm$Def$new$(_file$1, _code$2, _name$3, _term$4, _type$5, _stat$8), _defs$7);
        return $4031;
    };
    const Fm$define = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Fm$define$(x0, x1, x2, x3, x4, x5, x6);

    function Fm$Parser$file$def$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Fm$Parser$name1$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4035 = self.idx;
                var $4036 = self.code;
                var $4037 = self.err;
                var $4038 = Parser$Reply$error$($4035, $4036, $4037);
                var $4034 = $4038;
                break;
            case 'Parser.Reply.value':
                var $4039 = self.idx;
                var $4040 = self.code;
                var $4041 = self.val;
                var self = Parser$many$(Fm$Parser$binder)($4039)($4040);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4043 = self.idx;
                        var $4044 = self.code;
                        var $4045 = self.err;
                        var $4046 = Parser$Reply$error$($4043, $4044, $4045);
                        var $4042 = $4046;
                        break;
                    case 'Parser.Reply.value':
                        var $4047 = self.idx;
                        var $4048 = self.code;
                        var $4049 = self.val;
                        var _args$12 = List$flatten$($4049);
                        var self = Fm$Parser$text$(":", $4047, $4048);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4051 = self.idx;
                                var $4052 = self.code;
                                var $4053 = self.err;
                                var $4054 = Parser$Reply$error$($4051, $4052, $4053);
                                var $4050 = $4054;
                                break;
                            case 'Parser.Reply.value':
                                var $4055 = self.idx;
                                var $4056 = self.code;
                                var $4057 = self.val;
                                var self = Fm$Parser$term$($4055, $4056);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4059 = self.idx;
                                        var $4060 = self.code;
                                        var $4061 = self.err;
                                        var $4062 = Parser$Reply$error$($4059, $4060, $4061);
                                        var $4058 = $4062;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4063 = self.idx;
                                        var $4064 = self.code;
                                        var $4065 = self.val;
                                        var self = Fm$Parser$term$($4063, $4064);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4067 = self.idx;
                                                var $4068 = self.code;
                                                var $4069 = self.err;
                                                var $4070 = Parser$Reply$error$($4067, $4068, $4069);
                                                var $4066 = $4070;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4071 = self.idx;
                                                var $4072 = self.code;
                                                var $4073 = self.val;
                                                var _type$22 = Fm$Parser$make_forall$(_args$12, $4065);
                                                var _term$23 = Fm$Parser$make_lambda$(List$mapped$(_args$12, (_x$23 => {
                                                    var self = _x$23;
                                                    switch (self._) {
                                                        case 'Fm.Binder.new':
                                                            var $4076 = self.eras;
                                                            var $4077 = self.name;
                                                            var $4078 = self.term;
                                                            var $4079 = $4077;
                                                            var $4075 = $4079;
                                                            break;
                                                    };
                                                    return $4075;
                                                })), $4073);
                                                var _type$24 = Fm$Term$bind$(List$nil, (_x$24 => {
                                                    var $4080 = (_x$24 + '1');
                                                    return $4080;
                                                }), _type$22);
                                                var _term$25 = Fm$Term$bind$(List$nil, (_x$25 => {
                                                    var $4081 = (_x$25 + '0');
                                                    return $4081;
                                                }), _term$23);
                                                var _defs$26 = Fm$define$(_file$1, _code$2, $4041, _term$25, _type$24, Bool$false, _defs$3);
                                                var $4074 = Parser$Reply$value$($4071, $4072, _defs$26);
                                                var $4066 = $4074;
                                                break;
                                        };
                                        var $4058 = $4066;
                                        break;
                                };
                                var $4050 = $4058;
                                break;
                        };
                        var $4042 = $4050;
                        break;
                };
                var $4034 = $4042;
                break;
        };
        return $4034;
    };
    const Fm$Parser$file$def = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$def$(x0, x1, x2, x3, x4);

    function Maybe$default$(_a$2, _m$3) {
        var self = _m$3;
        switch (self._) {
            case 'Maybe.none':
                var $4083 = _a$2;
                var $4082 = $4083;
                break;
            case 'Maybe.some':
                var $4084 = self.value;
                var $4085 = $4084;
                var $4082 = $4085;
                break;
        };
        return $4082;
    };
    const Maybe$default = x0 => x1 => Maybe$default$(x0, x1);

    function Fm$Constructor$new$(_name$1, _args$2, _inds$3) {
        var $4086 = ({
            _: 'Fm.Constructor.new',
            'name': _name$1,
            'args': _args$2,
            'inds': _inds$3
        });
        return $4086;
    };
    const Fm$Constructor$new = x0 => x1 => x2 => Fm$Constructor$new$(x0, x1, x2);

    function Fm$Parser$constructor$(_namespace$1, _idx$2, _code$3) {
        var self = Fm$Parser$name1$(_idx$2, _code$3);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4088 = self.idx;
                var $4089 = self.code;
                var $4090 = self.err;
                var $4091 = Parser$Reply$error$($4088, $4089, $4090);
                var $4087 = $4091;
                break;
            case 'Parser.Reply.value':
                var $4092 = self.idx;
                var $4093 = self.code;
                var $4094 = self.val;
                var self = Parser$maybe$(Fm$Parser$binder, $4092, $4093);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4096 = self.idx;
                        var $4097 = self.code;
                        var $4098 = self.err;
                        var $4099 = Parser$Reply$error$($4096, $4097, $4098);
                        var $4095 = $4099;
                        break;
                    case 'Parser.Reply.value':
                        var $4100 = self.idx;
                        var $4101 = self.code;
                        var $4102 = self.val;
                        var self = Parser$maybe$((_idx$10 => _code$11 => {
                            var self = Fm$Parser$text$("~", _idx$10, _code$11);
                            switch (self._) {
                                case 'Parser.Reply.error':
                                    var $4105 = self.idx;
                                    var $4106 = self.code;
                                    var $4107 = self.err;
                                    var $4108 = Parser$Reply$error$($4105, $4106, $4107);
                                    var $4104 = $4108;
                                    break;
                                case 'Parser.Reply.value':
                                    var $4109 = self.idx;
                                    var $4110 = self.code;
                                    var $4111 = self.val;
                                    var $4112 = Fm$Parser$binder$($4109, $4110);
                                    var $4104 = $4112;
                                    break;
                            };
                            return $4104;
                        }), $4100, $4101);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4113 = self.idx;
                                var $4114 = self.code;
                                var $4115 = self.err;
                                var $4116 = Parser$Reply$error$($4113, $4114, $4115);
                                var $4103 = $4116;
                                break;
                            case 'Parser.Reply.value':
                                var $4117 = self.idx;
                                var $4118 = self.code;
                                var $4119 = self.val;
                                var _args$13 = Maybe$default$(List$nil, $4102);
                                var _inds$14 = Maybe$default$(List$nil, $4119);
                                var $4120 = Parser$Reply$value$($4117, $4118, Fm$Constructor$new$($4094, _args$13, _inds$14));
                                var $4103 = $4120;
                                break;
                        };
                        var $4095 = $4103;
                        break;
                };
                var $4087 = $4095;
                break;
        };
        return $4087;
    };
    const Fm$Parser$constructor = x0 => x1 => x2 => Fm$Parser$constructor$(x0, x1, x2);

    function Fm$Datatype$new$(_name$1, _pars$2, _inds$3, _ctrs$4) {
        var $4121 = ({
            _: 'Fm.Datatype.new',
            'name': _name$1,
            'pars': _pars$2,
            'inds': _inds$3,
            'ctrs': _ctrs$4
        });
        return $4121;
    };
    const Fm$Datatype$new = x0 => x1 => x2 => x3 => Fm$Datatype$new$(x0, x1, x2, x3);

    function Fm$Parser$datatype$(_idx$1, _code$2) {
        var self = Fm$Parser$text$("type ", _idx$1, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4123 = self.idx;
                var $4124 = self.code;
                var $4125 = self.err;
                var $4126 = Parser$Reply$error$($4123, $4124, $4125);
                var $4122 = $4126;
                break;
            case 'Parser.Reply.value':
                var $4127 = self.idx;
                var $4128 = self.code;
                var $4129 = self.val;
                var self = Fm$Parser$name1$($4127, $4128);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4131 = self.idx;
                        var $4132 = self.code;
                        var $4133 = self.err;
                        var $4134 = Parser$Reply$error$($4131, $4132, $4133);
                        var $4130 = $4134;
                        break;
                    case 'Parser.Reply.value':
                        var $4135 = self.idx;
                        var $4136 = self.code;
                        var $4137 = self.val;
                        var self = Parser$maybe$(Fm$Parser$binder, $4135, $4136);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4139 = self.idx;
                                var $4140 = self.code;
                                var $4141 = self.err;
                                var $4142 = Parser$Reply$error$($4139, $4140, $4141);
                                var $4138 = $4142;
                                break;
                            case 'Parser.Reply.value':
                                var $4143 = self.idx;
                                var $4144 = self.code;
                                var $4145 = self.val;
                                var self = Parser$maybe$((_idx$12 => _code$13 => {
                                    var self = Fm$Parser$text$("~", _idx$12, _code$13);
                                    switch (self._) {
                                        case 'Parser.Reply.error':
                                            var $4148 = self.idx;
                                            var $4149 = self.code;
                                            var $4150 = self.err;
                                            var $4151 = Parser$Reply$error$($4148, $4149, $4150);
                                            var $4147 = $4151;
                                            break;
                                        case 'Parser.Reply.value':
                                            var $4152 = self.idx;
                                            var $4153 = self.code;
                                            var $4154 = self.val;
                                            var $4155 = Fm$Parser$binder$($4152, $4153);
                                            var $4147 = $4155;
                                            break;
                                    };
                                    return $4147;
                                }), $4143, $4144);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4156 = self.idx;
                                        var $4157 = self.code;
                                        var $4158 = self.err;
                                        var $4159 = Parser$Reply$error$($4156, $4157, $4158);
                                        var $4146 = $4159;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4160 = self.idx;
                                        var $4161 = self.code;
                                        var $4162 = self.val;
                                        var _pars$15 = Maybe$default$(List$nil, $4145);
                                        var _inds$16 = Maybe$default$(List$nil, $4162);
                                        var self = Fm$Parser$text$("{", $4160, $4161);
                                        switch (self._) {
                                            case 'Parser.Reply.error':
                                                var $4164 = self.idx;
                                                var $4165 = self.code;
                                                var $4166 = self.err;
                                                var $4167 = Parser$Reply$error$($4164, $4165, $4166);
                                                var $4163 = $4167;
                                                break;
                                            case 'Parser.Reply.value':
                                                var $4168 = self.idx;
                                                var $4169 = self.code;
                                                var $4170 = self.val;
                                                var self = Parser$until$(Fm$Parser$text("}"), Fm$Parser$item(Fm$Parser$constructor($4137)))($4168)($4169);
                                                switch (self._) {
                                                    case 'Parser.Reply.error':
                                                        var $4172 = self.idx;
                                                        var $4173 = self.code;
                                                        var $4174 = self.err;
                                                        var $4175 = Parser$Reply$error$($4172, $4173, $4174);
                                                        var $4171 = $4175;
                                                        break;
                                                    case 'Parser.Reply.value':
                                                        var $4176 = self.idx;
                                                        var $4177 = self.code;
                                                        var $4178 = self.val;
                                                        var $4179 = Parser$Reply$value$($4176, $4177, Fm$Datatype$new$($4137, _pars$15, _inds$16, $4178));
                                                        var $4171 = $4179;
                                                        break;
                                                };
                                                var $4163 = $4171;
                                                break;
                                        };
                                        var $4146 = $4163;
                                        break;
                                };
                                var $4138 = $4146;
                                break;
                        };
                        var $4130 = $4138;
                        break;
                };
                var $4122 = $4130;
                break;
        };
        return $4122;
    };
    const Fm$Parser$datatype = x0 => x1 => Fm$Parser$datatype$(x0, x1);

    function Fm$Datatype$build_term$motive$go$(_type$1, _name$2, _inds$3) {
        var self = _inds$3;
        switch (self._) {
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Fm.Datatype.new':
                        var $4182 = self.name;
                        var $4183 = self.pars;
                        var $4184 = self.inds;
                        var $4185 = self.ctrs;
                        var _slf$8 = Fm$Term$ref$(_name$2);
                        var _slf$9 = (() => {
                            var $4188 = _slf$8;
                            var $4189 = $4183;
                            let _slf$10 = $4188;
                            let _var$9;
                            while ($4189._ === 'List.cons') {
                                _var$9 = $4189.head;
                                var $4188 = Fm$Term$app$(_slf$10, Fm$Term$ref$((() => {
                                    var self = _var$9;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4190 = self.eras;
                                            var $4191 = self.name;
                                            var $4192 = self.term;
                                            var $4193 = $4191;
                                            return $4193;
                                    };
                                })()));
                                _slf$10 = $4188;
                                $4189 = $4189.tail;
                            }
                            return _slf$10;
                        })();
                        var _slf$10 = (() => {
                            var $4195 = _slf$9;
                            var $4196 = $4184;
                            let _slf$11 = $4195;
                            let _var$10;
                            while ($4196._ === 'List.cons') {
                                _var$10 = $4196.head;
                                var $4195 = Fm$Term$app$(_slf$11, Fm$Term$ref$((() => {
                                    var self = _var$10;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4197 = self.eras;
                                            var $4198 = self.name;
                                            var $4199 = self.term;
                                            var $4200 = $4198;
                                            return $4200;
                                    };
                                })()));
                                _slf$11 = $4195;
                                $4196 = $4196.tail;
                            }
                            return _slf$11;
                        })();
                        var $4186 = Fm$Term$all$(Bool$false, "", "", _slf$10, (_s$11 => _x$12 => {
                            var $4201 = Fm$Term$typ;
                            return $4201;
                        }));
                        var $4181 = $4186;
                        break;
                };
                var $4180 = $4181;
                break;
            case 'List.cons':
                var $4202 = self.head;
                var $4203 = self.tail;
                var self = $4202;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4205 = self.eras;
                        var $4206 = self.name;
                        var $4207 = self.term;
                        var $4208 = Fm$Term$all$($4205, "", $4206, $4207, (_s$9 => _x$10 => {
                            var $4209 = Fm$Datatype$build_term$motive$go$(_type$1, _name$2, $4203);
                            return $4209;
                        }));
                        var $4204 = $4208;
                        break;
                };
                var $4180 = $4204;
                break;
        };
        return $4180;
    };
    const Fm$Datatype$build_term$motive$go = x0 => x1 => x2 => Fm$Datatype$build_term$motive$go$(x0, x1, x2);

    function Fm$Datatype$build_term$motive$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4211 = self.name;
                var $4212 = self.pars;
                var $4213 = self.inds;
                var $4214 = self.ctrs;
                var $4215 = Fm$Datatype$build_term$motive$go$(_type$1, $4211, $4213);
                var $4210 = $4215;
                break;
        };
        return $4210;
    };
    const Fm$Datatype$build_term$motive = x0 => Fm$Datatype$build_term$motive$(x0);

    function Fm$Datatype$build_term$constructor$go$(_type$1, _ctor$2, _args$3) {
        var self = _args$3;
        switch (self._) {
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Fm.Datatype.new':
                        var $4218 = self.name;
                        var $4219 = self.pars;
                        var $4220 = self.inds;
                        var $4221 = self.ctrs;
                        var self = _ctor$2;
                        switch (self._) {
                            case 'Fm.Constructor.new':
                                var $4223 = self.name;
                                var $4224 = self.args;
                                var $4225 = self.inds;
                                var _ret$11 = Fm$Term$ref$(Fm$Name$read$("P"));
                                var _ret$12 = (() => {
                                    var $4228 = _ret$11;
                                    var $4229 = $4225;
                                    let _ret$13 = $4228;
                                    let _var$12;
                                    while ($4229._ === 'List.cons') {
                                        _var$12 = $4229.head;
                                        var $4228 = Fm$Term$app$(_ret$13, (() => {
                                            var self = _var$12;
                                            switch (self._) {
                                                case 'Fm.Binder.new':
                                                    var $4230 = self.eras;
                                                    var $4231 = self.name;
                                                    var $4232 = self.term;
                                                    var $4233 = $4232;
                                                    return $4233;
                                            };
                                        })());
                                        _ret$13 = $4228;
                                        $4229 = $4229.tail;
                                    }
                                    return _ret$13;
                                })();
                                var _ctr$13 = String$flatten$(List$cons$($4218, List$cons$(Fm$Name$read$("."), List$cons$($4223, List$nil))));
                                var _slf$14 = Fm$Term$ref$(_ctr$13);
                                var _slf$15 = (() => {
                                    var $4235 = _slf$14;
                                    var $4236 = $4219;
                                    let _slf$16 = $4235;
                                    let _var$15;
                                    while ($4236._ === 'List.cons') {
                                        _var$15 = $4236.head;
                                        var $4235 = Fm$Term$app$(_slf$16, Fm$Term$ref$((() => {
                                            var self = _var$15;
                                            switch (self._) {
                                                case 'Fm.Binder.new':
                                                    var $4237 = self.eras;
                                                    var $4238 = self.name;
                                                    var $4239 = self.term;
                                                    var $4240 = $4238;
                                                    return $4240;
                                            };
                                        })()));
                                        _slf$16 = $4235;
                                        $4236 = $4236.tail;
                                    }
                                    return _slf$16;
                                })();
                                var _slf$16 = (() => {
                                    var $4242 = _slf$15;
                                    var $4243 = $4224;
                                    let _slf$17 = $4242;
                                    let _var$16;
                                    while ($4243._ === 'List.cons') {
                                        _var$16 = $4243.head;
                                        var $4242 = Fm$Term$app$(_slf$17, Fm$Term$ref$((() => {
                                            var self = _var$16;
                                            switch (self._) {
                                                case 'Fm.Binder.new':
                                                    var $4244 = self.eras;
                                                    var $4245 = self.name;
                                                    var $4246 = self.term;
                                                    var $4247 = $4245;
                                                    return $4247;
                                            };
                                        })()));
                                        _slf$17 = $4242;
                                        $4243 = $4243.tail;
                                    }
                                    return _slf$17;
                                })();
                                var $4226 = Fm$Term$app$(_ret$12, _slf$16);
                                var $4222 = $4226;
                                break;
                        };
                        var $4217 = $4222;
                        break;
                };
                var $4216 = $4217;
                break;
            case 'List.cons':
                var $4248 = self.head;
                var $4249 = self.tail;
                var self = $4248;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4251 = self.eras;
                        var $4252 = self.name;
                        var $4253 = self.term;
                        var _eras$9 = $4251;
                        var _name$10 = $4252;
                        var _xtyp$11 = $4253;
                        var _body$12 = Fm$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $4249);
                        var $4254 = Fm$Term$all$(_eras$9, "", _name$10, _xtyp$11, (_s$13 => _x$14 => {
                            var $4255 = _body$12;
                            return $4255;
                        }));
                        var $4250 = $4254;
                        break;
                };
                var $4216 = $4250;
                break;
        };
        return $4216;
    };
    const Fm$Datatype$build_term$constructor$go = x0 => x1 => x2 => Fm$Datatype$build_term$constructor$go$(x0, x1, x2);

    function Fm$Datatype$build_term$constructor$(_type$1, _ctor$2) {
        var self = _ctor$2;
        switch (self._) {
            case 'Fm.Constructor.new':
                var $4257 = self.name;
                var $4258 = self.args;
                var $4259 = self.inds;
                var $4260 = Fm$Datatype$build_term$constructor$go$(_type$1, _ctor$2, $4258);
                var $4256 = $4260;
                break;
        };
        return $4256;
    };
    const Fm$Datatype$build_term$constructor = x0 => x1 => Fm$Datatype$build_term$constructor$(x0, x1);

    function Fm$Datatype$build_term$constructors$go$(_type$1, _name$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.nil':
                var self = _type$1;
                switch (self._) {
                    case 'Fm.Datatype.new':
                        var $4263 = self.name;
                        var $4264 = self.pars;
                        var $4265 = self.inds;
                        var $4266 = self.ctrs;
                        var _ret$8 = Fm$Term$ref$(Fm$Name$read$("P"));
                        var _ret$9 = (() => {
                            var $4269 = _ret$8;
                            var $4270 = $4265;
                            let _ret$10 = $4269;
                            let _var$9;
                            while ($4270._ === 'List.cons') {
                                _var$9 = $4270.head;
                                var $4269 = Fm$Term$app$(_ret$10, Fm$Term$ref$((() => {
                                    var self = _var$9;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4271 = self.eras;
                                            var $4272 = self.name;
                                            var $4273 = self.term;
                                            var $4274 = $4272;
                                            return $4274;
                                    };
                                })()));
                                _ret$10 = $4269;
                                $4270 = $4270.tail;
                            }
                            return _ret$10;
                        })();
                        var $4267 = Fm$Term$app$(_ret$9, Fm$Term$ref$((_name$2 + ".Self")));
                        var $4262 = $4267;
                        break;
                };
                var $4261 = $4262;
                break;
            case 'List.cons':
                var $4275 = self.head;
                var $4276 = self.tail;
                var self = $4275;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4278 = self.name;
                        var $4279 = self.args;
                        var $4280 = self.inds;
                        var $4281 = Fm$Term$all$(Bool$false, "", $4278, Fm$Datatype$build_term$constructor$(_type$1, $4275), (_s$9 => _x$10 => {
                            var $4282 = Fm$Datatype$build_term$constructors$go$(_type$1, _name$2, $4276);
                            return $4282;
                        }));
                        var $4277 = $4281;
                        break;
                };
                var $4261 = $4277;
                break;
        };
        return $4261;
    };
    const Fm$Datatype$build_term$constructors$go = x0 => x1 => x2 => Fm$Datatype$build_term$constructors$go$(x0, x1, x2);

    function Fm$Datatype$build_term$constructors$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4284 = self.name;
                var $4285 = self.pars;
                var $4286 = self.inds;
                var $4287 = self.ctrs;
                var $4288 = Fm$Datatype$build_term$constructors$go$(_type$1, $4284, $4287);
                var $4283 = $4288;
                break;
        };
        return $4283;
    };
    const Fm$Datatype$build_term$constructors = x0 => Fm$Datatype$build_term$constructors$(x0);

    function Fm$Datatype$build_term$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.nil':
                        var $4291 = Fm$Term$all$(Bool$true, (_name$2 + ".Self"), Fm$Name$read$("P"), Fm$Datatype$build_term$motive$(_type$1), (_s$5 => _x$6 => {
                            var $4292 = Fm$Datatype$build_term$constructors$(_type$1);
                            return $4292;
                        }));
                        var $4290 = $4291;
                        break;
                    case 'List.cons':
                        var $4293 = self.head;
                        var $4294 = self.tail;
                        var self = $4293;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4296 = self.eras;
                                var $4297 = self.name;
                                var $4298 = self.term;
                                var $4299 = Fm$Term$lam$($4297, (_x$10 => {
                                    var $4300 = Fm$Datatype$build_term$go$(_type$1, _name$2, _pars$3, $4294);
                                    return $4300;
                                }));
                                var $4295 = $4299;
                                break;
                        };
                        var $4290 = $4295;
                        break;
                };
                var $4289 = $4290;
                break;
            case 'List.cons':
                var $4301 = self.head;
                var $4302 = self.tail;
                var self = $4301;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4304 = self.eras;
                        var $4305 = self.name;
                        var $4306 = self.term;
                        var $4307 = Fm$Term$lam$($4305, (_x$10 => {
                            var $4308 = Fm$Datatype$build_term$go$(_type$1, _name$2, $4302, _inds$4);
                            return $4308;
                        }));
                        var $4303 = $4307;
                        break;
                };
                var $4289 = $4303;
                break;
        };
        return $4289;
    };
    const Fm$Datatype$build_term$go = x0 => x1 => x2 => x3 => Fm$Datatype$build_term$go$(x0, x1, x2, x3);

    function Fm$Datatype$build_term$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4310 = self.name;
                var $4311 = self.pars;
                var $4312 = self.inds;
                var $4313 = self.ctrs;
                var $4314 = Fm$Datatype$build_term$go$(_type$1, $4310, $4311, $4312);
                var $4309 = $4314;
                break;
        };
        return $4309;
    };
    const Fm$Datatype$build_term = x0 => Fm$Datatype$build_term$(x0);

    function Fm$Datatype$build_type$go$(_type$1, _name$2, _pars$3, _inds$4) {
        var self = _pars$3;
        switch (self._) {
            case 'List.nil':
                var self = _inds$4;
                switch (self._) {
                    case 'List.nil':
                        var $4317 = Fm$Term$typ;
                        var $4316 = $4317;
                        break;
                    case 'List.cons':
                        var $4318 = self.head;
                        var $4319 = self.tail;
                        var self = $4318;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4321 = self.eras;
                                var $4322 = self.name;
                                var $4323 = self.term;
                                var $4324 = Fm$Term$all$(Bool$false, "", $4322, $4323, (_s$10 => _x$11 => {
                                    var $4325 = Fm$Datatype$build_type$go$(_type$1, _name$2, _pars$3, $4319);
                                    return $4325;
                                }));
                                var $4320 = $4324;
                                break;
                        };
                        var $4316 = $4320;
                        break;
                };
                var $4315 = $4316;
                break;
            case 'List.cons':
                var $4326 = self.head;
                var $4327 = self.tail;
                var self = $4326;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4329 = self.eras;
                        var $4330 = self.name;
                        var $4331 = self.term;
                        var $4332 = Fm$Term$all$(Bool$false, "", $4330, $4331, (_s$10 => _x$11 => {
                            var $4333 = Fm$Datatype$build_type$go$(_type$1, _name$2, $4327, _inds$4);
                            return $4333;
                        }));
                        var $4328 = $4332;
                        break;
                };
                var $4315 = $4328;
                break;
        };
        return $4315;
    };
    const Fm$Datatype$build_type$go = x0 => x1 => x2 => x3 => Fm$Datatype$build_type$go$(x0, x1, x2, x3);

    function Fm$Datatype$build_type$(_type$1) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4335 = self.name;
                var $4336 = self.pars;
                var $4337 = self.inds;
                var $4338 = self.ctrs;
                var $4339 = Fm$Datatype$build_type$go$(_type$1, $4335, $4336, $4337);
                var $4334 = $4339;
                break;
        };
        return $4334;
    };
    const Fm$Datatype$build_type = x0 => Fm$Datatype$build_type$(x0);

    function Fm$Constructor$build_term$opt$go$(_type$1, _ctor$2, _ctrs$3) {
        var self = _ctrs$3;
        switch (self._) {
            case 'List.nil':
                var self = _ctor$2;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4342 = self.name;
                        var $4343 = self.args;
                        var $4344 = self.inds;
                        var _ret$7 = Fm$Term$ref$($4342);
                        var _ret$8 = (() => {
                            var $4347 = _ret$7;
                            var $4348 = $4343;
                            let _ret$9 = $4347;
                            let _arg$8;
                            while ($4348._ === 'List.cons') {
                                _arg$8 = $4348.head;
                                var $4347 = Fm$Term$app$(_ret$9, Fm$Term$ref$((() => {
                                    var self = _arg$8;
                                    switch (self._) {
                                        case 'Fm.Binder.new':
                                            var $4349 = self.eras;
                                            var $4350 = self.name;
                                            var $4351 = self.term;
                                            var $4352 = $4350;
                                            return $4352;
                                    };
                                })()));
                                _ret$9 = $4347;
                                $4348 = $4348.tail;
                            }
                            return _ret$9;
                        })();
                        var $4345 = _ret$8;
                        var $4341 = $4345;
                        break;
                };
                var $4340 = $4341;
                break;
            case 'List.cons':
                var $4353 = self.head;
                var $4354 = self.tail;
                var self = $4353;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4356 = self.name;
                        var $4357 = self.args;
                        var $4358 = self.inds;
                        var $4359 = Fm$Term$lam$($4356, (_x$9 => {
                            var $4360 = Fm$Constructor$build_term$opt$go$(_type$1, _ctor$2, $4354);
                            return $4360;
                        }));
                        var $4355 = $4359;
                        break;
                };
                var $4340 = $4355;
                break;
        };
        return $4340;
    };
    const Fm$Constructor$build_term$opt$go = x0 => x1 => x2 => Fm$Constructor$build_term$opt$go$(x0, x1, x2);

    function Fm$Constructor$build_term$opt$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4362 = self.name;
                var $4363 = self.pars;
                var $4364 = self.inds;
                var $4365 = self.ctrs;
                var $4366 = Fm$Constructor$build_term$opt$go$(_type$1, _ctor$2, $4365);
                var $4361 = $4366;
                break;
        };
        return $4361;
    };
    const Fm$Constructor$build_term$opt = x0 => x1 => Fm$Constructor$build_term$opt$(x0, x1);

    function Fm$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.nil':
                        var $4369 = Fm$Term$lam$(Fm$Name$read$("P"), (_x$6 => {
                            var $4370 = Fm$Constructor$build_term$opt$(_type$1, _ctor$2);
                            return $4370;
                        }));
                        var $4368 = $4369;
                        break;
                    case 'List.cons':
                        var $4371 = self.head;
                        var $4372 = self.tail;
                        var self = $4371;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4374 = self.eras;
                                var $4375 = self.name;
                                var $4376 = self.term;
                                var $4377 = Fm$Term$lam$($4375, (_x$11 => {
                                    var $4378 = Fm$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, _pars$4, $4372);
                                    return $4378;
                                }));
                                var $4373 = $4377;
                                break;
                        };
                        var $4368 = $4373;
                        break;
                };
                var $4367 = $4368;
                break;
            case 'List.cons':
                var $4379 = self.head;
                var $4380 = self.tail;
                var self = $4379;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4382 = self.eras;
                        var $4383 = self.name;
                        var $4384 = self.term;
                        var $4385 = Fm$Term$lam$($4383, (_x$11 => {
                            var $4386 = Fm$Constructor$build_term$go$(_type$1, _ctor$2, _name$3, $4380, _args$5);
                            return $4386;
                        }));
                        var $4381 = $4385;
                        break;
                };
                var $4367 = $4381;
                break;
        };
        return $4367;
    };
    const Fm$Constructor$build_term$go = x0 => x1 => x2 => x3 => x4 => Fm$Constructor$build_term$go$(x0, x1, x2, x3, x4);

    function Fm$Constructor$build_term$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4388 = self.name;
                var $4389 = self.pars;
                var $4390 = self.inds;
                var $4391 = self.ctrs;
                var self = _ctor$2;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4393 = self.name;
                        var $4394 = self.args;
                        var $4395 = self.inds;
                        var $4396 = Fm$Constructor$build_term$go$(_type$1, _ctor$2, $4388, $4389, $4394);
                        var $4392 = $4396;
                        break;
                };
                var $4387 = $4392;
                break;
        };
        return $4387;
    };
    const Fm$Constructor$build_term = x0 => x1 => Fm$Constructor$build_term$(x0, x1);

    function Fm$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, _args$5) {
        var self = _pars$4;
        switch (self._) {
            case 'List.nil':
                var self = _args$5;
                switch (self._) {
                    case 'List.nil':
                        var self = _type$1;
                        switch (self._) {
                            case 'Fm.Datatype.new':
                                var $4400 = self.name;
                                var $4401 = self.pars;
                                var $4402 = self.inds;
                                var $4403 = self.ctrs;
                                var self = _ctor$2;
                                switch (self._) {
                                    case 'Fm.Constructor.new':
                                        var $4405 = self.name;
                                        var $4406 = self.args;
                                        var $4407 = self.inds;
                                        var _type$13 = Fm$Term$ref$(_name$3);
                                        var _type$14 = (() => {
                                            var $4410 = _type$13;
                                            var $4411 = $4401;
                                            let _type$15 = $4410;
                                            let _var$14;
                                            while ($4411._ === 'List.cons') {
                                                _var$14 = $4411.head;
                                                var $4410 = Fm$Term$app$(_type$15, Fm$Term$ref$((() => {
                                                    var self = _var$14;
                                                    switch (self._) {
                                                        case 'Fm.Binder.new':
                                                            var $4412 = self.eras;
                                                            var $4413 = self.name;
                                                            var $4414 = self.term;
                                                            var $4415 = $4413;
                                                            return $4415;
                                                    };
                                                })()));
                                                _type$15 = $4410;
                                                $4411 = $4411.tail;
                                            }
                                            return _type$15;
                                        })();
                                        var _type$15 = (() => {
                                            var $4417 = _type$14;
                                            var $4418 = $4407;
                                            let _type$16 = $4417;
                                            let _var$15;
                                            while ($4418._ === 'List.cons') {
                                                _var$15 = $4418.head;
                                                var $4417 = Fm$Term$app$(_type$16, (() => {
                                                    var self = _var$15;
                                                    switch (self._) {
                                                        case 'Fm.Binder.new':
                                                            var $4419 = self.eras;
                                                            var $4420 = self.name;
                                                            var $4421 = self.term;
                                                            var $4422 = $4421;
                                                            return $4422;
                                                    };
                                                })());
                                                _type$16 = $4417;
                                                $4418 = $4418.tail;
                                            }
                                            return _type$16;
                                        })();
                                        var $4408 = _type$15;
                                        var $4404 = $4408;
                                        break;
                                };
                                var $4399 = $4404;
                                break;
                        };
                        var $4398 = $4399;
                        break;
                    case 'List.cons':
                        var $4423 = self.head;
                        var $4424 = self.tail;
                        var self = $4423;
                        switch (self._) {
                            case 'Fm.Binder.new':
                                var $4426 = self.eras;
                                var $4427 = self.name;
                                var $4428 = self.term;
                                var $4429 = Fm$Term$all$($4426, "", $4427, $4428, (_s$11 => _x$12 => {
                                    var $4430 = Fm$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, _pars$4, $4424);
                                    return $4430;
                                }));
                                var $4425 = $4429;
                                break;
                        };
                        var $4398 = $4425;
                        break;
                };
                var $4397 = $4398;
                break;
            case 'List.cons':
                var $4431 = self.head;
                var $4432 = self.tail;
                var self = $4431;
                switch (self._) {
                    case 'Fm.Binder.new':
                        var $4434 = self.eras;
                        var $4435 = self.name;
                        var $4436 = self.term;
                        var $4437 = Fm$Term$all$($4434, "", $4435, $4436, (_s$11 => _x$12 => {
                            var $4438 = Fm$Constructor$build_type$go$(_type$1, _ctor$2, _name$3, $4432, _args$5);
                            return $4438;
                        }));
                        var $4433 = $4437;
                        break;
                };
                var $4397 = $4433;
                break;
        };
        return $4397;
    };
    const Fm$Constructor$build_type$go = x0 => x1 => x2 => x3 => x4 => Fm$Constructor$build_type$go$(x0, x1, x2, x3, x4);

    function Fm$Constructor$build_type$(_type$1, _ctor$2) {
        var self = _type$1;
        switch (self._) {
            case 'Fm.Datatype.new':
                var $4440 = self.name;
                var $4441 = self.pars;
                var $4442 = self.inds;
                var $4443 = self.ctrs;
                var self = _ctor$2;
                switch (self._) {
                    case 'Fm.Constructor.new':
                        var $4445 = self.name;
                        var $4446 = self.args;
                        var $4447 = self.inds;
                        var $4448 = Fm$Constructor$build_type$go$(_type$1, _ctor$2, $4440, $4441, $4446);
                        var $4444 = $4448;
                        break;
                };
                var $4439 = $4444;
                break;
        };
        return $4439;
    };
    const Fm$Constructor$build_type = x0 => x1 => Fm$Constructor$build_type$(x0, x1);

    function Fm$Parser$file$adt$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Fm$Parser$datatype$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4450 = self.idx;
                var $4451 = self.code;
                var $4452 = self.err;
                var $4453 = Parser$Reply$error$($4450, $4451, $4452);
                var $4449 = $4453;
                break;
            case 'Parser.Reply.value':
                var $4454 = self.idx;
                var $4455 = self.code;
                var $4456 = self.val;
                var self = $4456;
                switch (self._) {
                    case 'Fm.Datatype.new':
                        var $4458 = self.name;
                        var $4459 = self.pars;
                        var $4460 = self.inds;
                        var $4461 = self.ctrs;
                        var _term$13 = Fm$Datatype$build_term$($4456);
                        var _term$14 = Fm$Term$bind$(List$nil, (_x$14 => {
                            var $4463 = (_x$14 + '1');
                            return $4463;
                        }), _term$13);
                        var _type$15 = Fm$Datatype$build_type$($4456);
                        var _type$16 = Fm$Term$bind$(List$nil, (_x$16 => {
                            var $4464 = (_x$16 + '0');
                            return $4464;
                        }), _type$15);
                        var _defs$17 = Fm$define$(_file$1, _code$2, $4458, _term$14, _type$16, Bool$false, _defs$3);
                        var _defs$18 = List$fold$($4461, _defs$17, (_ctr$18 => _defs$19 => {
                            var _typ_name$20 = $4458;
                            var _ctr_name$21 = String$flatten$(List$cons$(_typ_name$20, List$cons$(Fm$Name$read$("."), List$cons$((() => {
                                var self = _ctr$18;
                                switch (self._) {
                                    case 'Fm.Constructor.new':
                                        var $4466 = self.name;
                                        var $4467 = self.args;
                                        var $4468 = self.inds;
                                        var $4469 = $4466;
                                        return $4469;
                                };
                            })(), List$nil))));
                            var _ctr_term$22 = Fm$Constructor$build_term$($4456, _ctr$18);
                            var _ctr_term$23 = Fm$Term$bind$(List$nil, (_x$23 => {
                                var $4470 = (_x$23 + '1');
                                return $4470;
                            }), _ctr_term$22);
                            var _ctr_type$24 = Fm$Constructor$build_type$($4456, _ctr$18);
                            var _ctr_type$25 = Fm$Term$bind$(List$nil, (_x$25 => {
                                var $4471 = (_x$25 + '0');
                                return $4471;
                            }), _ctr_type$24);
                            var $4465 = Fm$define$(_file$1, _code$2, _ctr_name$21, _ctr_term$23, _ctr_type$25, Bool$false, _defs$19);
                            return $4465;
                        }));
                        var $4462 = (_idx$19 => _code$20 => {
                            var $4472 = Parser$Reply$value$(_idx$19, _code$20, _defs$18);
                            return $4472;
                        });
                        var $4457 = $4462;
                        break;
                };
                var $4457 = $4457($4454)($4455);
                var $4449 = $4457;
                break;
        };
        return $4449;
    };
    const Fm$Parser$file$adt = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$adt$(x0, x1, x2, x3, x4);

    function Parser$eof$(_idx$1, _code$2) {
        var self = _code$2;
        if (self.length === 0) {
            var $4474 = Parser$Reply$value$(_idx$1, _code$2, Unit$new);
            var $4473 = $4474;
        } else {
            var $4475 = self.charCodeAt(0);
            var $4476 = self.slice(1);
            var $4477 = Parser$Reply$error$(_idx$1, _code$2, "Expected end-of-file.");
            var $4473 = $4477;
        };
        return $4473;
    };
    const Parser$eof = x0 => x1 => Parser$eof$(x0, x1);

    function Fm$Parser$file$end$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Fm$Parser$spaces(_idx$4)(_code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4479 = self.idx;
                var $4480 = self.code;
                var $4481 = self.err;
                var $4482 = Parser$Reply$error$($4479, $4480, $4481);
                var $4478 = $4482;
                break;
            case 'Parser.Reply.value':
                var $4483 = self.idx;
                var $4484 = self.code;
                var $4485 = self.val;
                var self = Parser$eof$($4483, $4484);
                switch (self._) {
                    case 'Parser.Reply.error':
                        var $4487 = self.idx;
                        var $4488 = self.code;
                        var $4489 = self.err;
                        var $4490 = Parser$Reply$error$($4487, $4488, $4489);
                        var $4486 = $4490;
                        break;
                    case 'Parser.Reply.value':
                        var $4491 = self.idx;
                        var $4492 = self.code;
                        var $4493 = self.val;
                        var $4494 = Parser$Reply$value$($4491, $4492, _defs$3);
                        var $4486 = $4494;
                        break;
                };
                var $4478 = $4486;
                break;
        };
        return $4478;
    };
    const Fm$Parser$file$end = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$end$(x0, x1, x2, x3, x4);

    function Fm$Parser$file$(_file$1, _code$2, _defs$3, _idx$4, _code$5) {
        var self = Parser$is_eof$(_idx$4, _code$5);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4496 = self.idx;
                var $4497 = self.code;
                var $4498 = self.err;
                var $4499 = Parser$Reply$error$($4496, $4497, $4498);
                var $4495 = $4499;
                break;
            case 'Parser.Reply.value':
                var $4500 = self.idx;
                var $4501 = self.code;
                var $4502 = self.val;
                var self = $4502;
                if (self) {
                    var $4504 = (_idx$9 => _code$10 => {
                        var $4505 = Parser$Reply$value$(_idx$9, _code$10, _defs$3);
                        return $4505;
                    });
                    var $4503 = $4504;
                } else {
                    var $4506 = Parser$first_of$(List$cons$((_idx$9 => _code$10 => {
                        var self = Fm$Parser$text$("#", _idx$9, _code$10);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4508 = self.idx;
                                var $4509 = self.code;
                                var $4510 = self.err;
                                var $4511 = Parser$Reply$error$($4508, $4509, $4510);
                                var $4507 = $4511;
                                break;
                            case 'Parser.Reply.value':
                                var $4512 = self.idx;
                                var $4513 = self.code;
                                var $4514 = self.val;
                                var self = Fm$Parser$name1$($4512, $4513);
                                switch (self._) {
                                    case 'Parser.Reply.error':
                                        var $4516 = self.idx;
                                        var $4517 = self.code;
                                        var $4518 = self.err;
                                        var $4519 = Parser$Reply$error$($4516, $4517, $4518);
                                        var $4515 = $4519;
                                        break;
                                    case 'Parser.Reply.value':
                                        var $4520 = self.idx;
                                        var $4521 = self.code;
                                        var $4522 = self.val;
                                        var $4523 = Fm$Parser$file$($4522, _code$2, _defs$3, $4520, $4521);
                                        var $4515 = $4523;
                                        break;
                                };
                                var $4507 = $4515;
                                break;
                        };
                        return $4507;
                    }), List$cons$((_idx$9 => _code$10 => {
                        var self = Parser$first_of$(List$cons$(Fm$Parser$file$def(_file$1)(_code$2)(_defs$3), List$cons$(Fm$Parser$file$adt(_file$1)(_code$2)(_defs$3), List$cons$(Fm$Parser$file$end(_file$1)(_code$2)(_defs$3), List$nil))))(_idx$9)(_code$10);
                        switch (self._) {
                            case 'Parser.Reply.error':
                                var $4525 = self.idx;
                                var $4526 = self.code;
                                var $4527 = self.err;
                                var $4528 = Parser$Reply$error$($4525, $4526, $4527);
                                var $4524 = $4528;
                                break;
                            case 'Parser.Reply.value':
                                var $4529 = self.idx;
                                var $4530 = self.code;
                                var $4531 = self.val;
                                var $4532 = Fm$Parser$file$(_file$1, _code$2, $4531, $4529, $4530);
                                var $4524 = $4532;
                                break;
                        };
                        return $4524;
                    }), List$nil)));
                    var $4503 = $4506;
                };
                var $4503 = $4503($4500)($4501);
                var $4495 = $4503;
                break;
        };
        return $4495;
    };
    const Fm$Parser$file = x0 => x1 => x2 => x3 => x4 => Fm$Parser$file$(x0, x1, x2, x3, x4);

    function Either$(_A$1, _B$2) {
        var $4533 = null;
        return $4533;
    };
    const Either = x0 => x1 => Either$(x0, x1);

    function String$join$go$(_sep$1, _list$2, _fst$3) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $4535 = "";
                var $4534 = $4535;
                break;
            case 'List.cons':
                var $4536 = self.head;
                var $4537 = self.tail;
                var $4538 = String$flatten$(List$cons$((() => {
                    var self = _fst$3;
                    if (self) {
                        var $4539 = "";
                        return $4539;
                    } else {
                        var $4540 = _sep$1;
                        return $4540;
                    };
                })(), List$cons$($4536, List$cons$(String$join$go$(_sep$1, $4537, Bool$false), List$nil))));
                var $4534 = $4538;
                break;
        };
        return $4534;
    };
    const String$join$go = x0 => x1 => x2 => String$join$go$(x0, x1, x2);

    function String$join$(_sep$1, _list$2) {
        var $4541 = String$join$go$(_sep$1, _list$2, Bool$true);
        return $4541;
    };
    const String$join = x0 => x1 => String$join$(x0, x1);

    function Fm$highlight$end$(_col$1, _row$2, _res$3) {
        var $4542 = String$join$("\u{a}", _res$3);
        return $4542;
    };
    const Fm$highlight$end = x0 => x1 => x2 => Fm$highlight$end$(x0, x1, x2);

    function Maybe$extract$(_m$2, _a$4, _f$5) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $4544 = _a$4;
                var $4543 = $4544;
                break;
            case 'Maybe.some':
                var $4545 = self.value;
                var $4546 = _f$5($4545);
                var $4543 = $4546;
                break;
        };
        return $4543;
    };
    const Maybe$extract = x0 => x1 => x2 => Maybe$extract$(x0, x1, x2);

    function Nat$is_zero$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $4548 = Bool$true;
            var $4547 = $4548;
        } else {
            var $4549 = (self - 1n);
            var $4550 = Bool$false;
            var $4547 = $4550;
        };
        return $4547;
    };
    const Nat$is_zero = x0 => Nat$is_zero$(x0);

    function Nat$double$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $4552 = Nat$zero;
            var $4551 = $4552;
        } else {
            var $4553 = (self - 1n);
            var $4554 = Nat$succ$(Nat$succ$(Nat$double$($4553)));
            var $4551 = $4554;
        };
        return $4551;
    };
    const Nat$double = x0 => Nat$double$(x0);

    function Nat$pred$(_n$1) {
        var self = _n$1;
        if (self === 0n) {
            var $4556 = Nat$zero;
            var $4555 = $4556;
        } else {
            var $4557 = (self - 1n);
            var $4558 = $4557;
            var $4555 = $4558;
        };
        return $4555;
    };
    const Nat$pred = x0 => Nat$pred$(x0);

    function String$reverse$go$(_xs$1, _res$2) {
        var String$reverse$go$ = (_xs$1, _res$2) => ({
            ctr: 'TCO',
            arg: [_xs$1, _res$2]
        });
        var String$reverse$go = _xs$1 => _res$2 => String$reverse$go$(_xs$1, _res$2);
        var arg = [_xs$1, _res$2];
        while (true) {
            let [_xs$1, _res$2] = arg;
            var R = (() => {
                var self = _xs$1;
                if (self.length === 0) {
                    var $4559 = _res$2;
                    return $4559;
                } else {
                    var $4560 = self.charCodeAt(0);
                    var $4561 = self.slice(1);
                    var $4562 = String$reverse$go$($4561, String$cons$($4560, _res$2));
                    return $4562;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const String$reverse$go = x0 => x1 => String$reverse$go$(x0, x1);

    function String$reverse$(_xs$1) {
        var $4563 = String$reverse$go$(_xs$1, String$nil);
        return $4563;
    };
    const String$reverse = x0 => String$reverse$(x0);

    function String$pad_right$(_size$1, _chr$2, _str$3) {
        var self = _size$1;
        if (self === 0n) {
            var $4565 = _str$3;
            var $4564 = $4565;
        } else {
            var $4566 = (self - 1n);
            var self = _str$3;
            if (self.length === 0) {
                var $4568 = String$cons$(_chr$2, String$pad_right$($4566, _chr$2, ""));
                var $4567 = $4568;
            } else {
                var $4569 = self.charCodeAt(0);
                var $4570 = self.slice(1);
                var $4571 = String$cons$($4569, String$pad_right$($4566, _chr$2, $4570));
                var $4567 = $4571;
            };
            var $4564 = $4567;
        };
        return $4564;
    };
    const String$pad_right = x0 => x1 => x2 => String$pad_right$(x0, x1, x2);

    function String$pad_left$(_size$1, _chr$2, _str$3) {
        var $4572 = String$reverse$(String$pad_right$(_size$1, _chr$2, String$reverse$(_str$3)));
        return $4572;
    };
    const String$pad_left = x0 => x1 => x2 => String$pad_left$(x0, x1, x2);

    function Either$left$(_value$3) {
        var $4573 = ({
            _: 'Either.left',
            'value': _value$3
        });
        return $4573;
    };
    const Either$left = x0 => Either$left$(x0);

    function Either$right$(_value$3) {
        var $4574 = ({
            _: 'Either.right',
            'value': _value$3
        });
        return $4574;
    };
    const Either$right = x0 => Either$right$(x0);

    function Nat$sub_rem$(_n$1, _m$2) {
        var Nat$sub_rem$ = (_n$1, _m$2) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2]
        });
        var Nat$sub_rem = _n$1 => _m$2 => Nat$sub_rem$(_n$1, _m$2);
        var arg = [_n$1, _m$2];
        while (true) {
            let [_n$1, _m$2] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4575 = Either$left$(_n$1);
                    return $4575;
                } else {
                    var $4576 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4578 = Either$right$(Nat$succ$($4576));
                        var $4577 = $4578;
                    } else {
                        var $4579 = (self - 1n);
                        var $4580 = Nat$sub_rem$($4579, $4576);
                        var $4577 = $4580;
                    };
                    return $4577;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$sub_rem = x0 => x1 => Nat$sub_rem$(x0, x1);

    function Nat$div_mod$go$(_n$1, _m$2, _d$3) {
        var Nat$div_mod$go$ = (_n$1, _m$2, _d$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _d$3]
        });
        var Nat$div_mod$go = _n$1 => _m$2 => _d$3 => Nat$div_mod$go$(_n$1, _m$2, _d$3);
        var arg = [_n$1, _m$2, _d$3];
        while (true) {
            let [_n$1, _m$2, _d$3] = arg;
            var R = (() => {
                var self = Nat$sub_rem$(_n$1, _m$2);
                switch (self._) {
                    case 'Either.left':
                        var $4581 = self.value;
                        var $4582 = Nat$div_mod$go$($4581, _m$2, Nat$succ$(_d$3));
                        return $4582;
                    case 'Either.right':
                        var $4583 = self.value;
                        var $4584 = Pair$new$(_d$3, _n$1);
                        return $4584;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$div_mod$go = x0 => x1 => x2 => Nat$div_mod$go$(x0, x1, x2);
    const Nat$div_mod = a0 => a1 => (({
        _: 'Pair.new',
        'fst': a0 / a1,
        'snd': a0 % a1
    }));

    function Nat$to_base$go$(_base$1, _nat$2, _res$3) {
        var Nat$to_base$go$ = (_base$1, _nat$2, _res$3) => ({
            ctr: 'TCO',
            arg: [_base$1, _nat$2, _res$3]
        });
        var Nat$to_base$go = _base$1 => _nat$2 => _res$3 => Nat$to_base$go$(_base$1, _nat$2, _res$3);
        var arg = [_base$1, _nat$2, _res$3];
        while (true) {
            let [_base$1, _nat$2, _res$3] = arg;
            var R = (() => {
                var self = (({
                    _: 'Pair.new',
                    'fst': _nat$2 / _base$1,
                    'snd': _nat$2 % _base$1
                }));
                switch (self._) {
                    case 'Pair.new':
                        var $4585 = self.fst;
                        var $4586 = self.snd;
                        var self = $4585;
                        if (self === 0n) {
                            var $4588 = List$cons$($4586, _res$3);
                            var $4587 = $4588;
                        } else {
                            var $4589 = (self - 1n);
                            var $4590 = Nat$to_base$go$(_base$1, $4585, List$cons$($4586, _res$3));
                            var $4587 = $4590;
                        };
                        return $4587;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$to_base$go = x0 => x1 => x2 => Nat$to_base$go$(x0, x1, x2);

    function Nat$to_base$(_base$1, _nat$2) {
        var $4591 = Nat$to_base$go$(_base$1, _nat$2, List$nil);
        return $4591;
    };
    const Nat$to_base = x0 => x1 => Nat$to_base$(x0, x1);

    function Nat$mod$go$(_n$1, _m$2, _r$3) {
        var Nat$mod$go$ = (_n$1, _m$2, _r$3) => ({
            ctr: 'TCO',
            arg: [_n$1, _m$2, _r$3]
        });
        var Nat$mod$go = _n$1 => _m$2 => _r$3 => Nat$mod$go$(_n$1, _m$2, _r$3);
        var arg = [_n$1, _m$2, _r$3];
        while (true) {
            let [_n$1, _m$2, _r$3] = arg;
            var R = (() => {
                var self = _m$2;
                if (self === 0n) {
                    var $4592 = Nat$mod$go$(_n$1, _r$3, _m$2);
                    return $4592;
                } else {
                    var $4593 = (self - 1n);
                    var self = _n$1;
                    if (self === 0n) {
                        var $4595 = _r$3;
                        var $4594 = $4595;
                    } else {
                        var $4596 = (self - 1n);
                        var $4597 = Nat$mod$go$($4596, $4593, Nat$succ$(_r$3));
                        var $4594 = $4597;
                    };
                    return $4594;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Nat$mod$go = x0 => x1 => x2 => Nat$mod$go$(x0, x1, x2);

    function Nat$mod$(_n$1, _m$2) {
        var $4598 = Nat$mod$go$(_n$1, _m$2, 0n);
        return $4598;
    };
    const Nat$mod = x0 => x1 => Nat$mod$(x0, x1);
    const Nat$lte = a0 => a1 => (a0 <= a1);

    function Nat$show_digit$(_base$1, _n$2) {
        var _m$3 = Nat$mod$(_n$2, _base$1);
        var _base64$4 = List$cons$(48, List$cons$(49, List$cons$(50, List$cons$(51, List$cons$(52, List$cons$(53, List$cons$(54, List$cons$(55, List$cons$(56, List$cons$(57, List$cons$(65, List$cons$(66, List$cons$(67, List$cons$(68, List$cons$(69, List$cons$(70, List$cons$(71, List$cons$(72, List$cons$(73, List$cons$(74, List$cons$(75, List$cons$(76, List$cons$(77, List$cons$(78, List$cons$(79, List$cons$(80, List$cons$(81, List$cons$(82, List$cons$(83, List$cons$(84, List$cons$(85, List$cons$(86, List$cons$(87, List$cons$(88, List$cons$(89, List$cons$(90, List$cons$(97, List$cons$(98, List$cons$(99, List$cons$(100, List$cons$(101, List$cons$(102, List$cons$(103, List$cons$(104, List$cons$(105, List$cons$(106, List$cons$(107, List$cons$(108, List$cons$(109, List$cons$(110, List$cons$(111, List$cons$(112, List$cons$(113, List$cons$(114, List$cons$(115, List$cons$(116, List$cons$(117, List$cons$(118, List$cons$(119, List$cons$(120, List$cons$(121, List$cons$(122, List$cons$(43, List$cons$(47, List$nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
        var self = ((_base$1 > 0n) && (_base$1 <= 64n));
        if (self) {
            var self = List$at$(_m$3, _base64$4);
            switch (self._) {
                case 'Maybe.none':
                    var $4601 = 35;
                    var $4600 = $4601;
                    break;
                case 'Maybe.some':
                    var $4602 = self.value;
                    var $4603 = $4602;
                    var $4600 = $4603;
                    break;
            };
            var $4599 = $4600;
        } else {
            var $4604 = 35;
            var $4599 = $4604;
        };
        return $4599;
    };
    const Nat$show_digit = x0 => x1 => Nat$show_digit$(x0, x1);

    function Nat$to_string_base$(_base$1, _nat$2) {
        var $4605 = List$fold$(Nat$to_base$(_base$1, _nat$2), String$nil, (_n$3 => _str$4 => {
            var $4606 = String$cons$(Nat$show_digit$(_base$1, _n$3), _str$4);
            return $4606;
        }));
        return $4605;
    };
    const Nat$to_string_base = x0 => x1 => Nat$to_string_base$(x0, x1);

    function Nat$show$(_n$1) {
        var $4607 = Nat$to_string_base$(10n, _n$1);
        return $4607;
    };
    const Nat$show = x0 => Nat$show$(x0);
    const Bool$not = a0 => (!a0);

    function Fm$color$(_col$1, _str$2) {
        var $4608 = String$cons$(27, String$cons$(91, (_col$1 + String$cons$(109, (_str$2 + String$cons$(27, String$cons$(91, String$cons$(48, String$cons$(109, String$nil)))))))));
        return $4608;
    };
    const Fm$color = x0 => x1 => Fm$color$(x0, x1);
    const Nat$eql = a0 => a1 => (a0 === a1);

    function List$take$(_n$2, _xs$3) {
        var self = _xs$3;
        switch (self._) {
            case 'List.nil':
                var $4610 = List$nil;
                var $4609 = $4610;
                break;
            case 'List.cons':
                var $4611 = self.head;
                var $4612 = self.tail;
                var self = _n$2;
                if (self === 0n) {
                    var $4614 = List$nil;
                    var $4613 = $4614;
                } else {
                    var $4615 = (self - 1n);
                    var $4616 = List$cons$($4611, List$take$($4615, $4612));
                    var $4613 = $4616;
                };
                var $4609 = $4613;
                break;
        };
        return $4609;
    };
    const List$take = x0 => x1 => List$take$(x0, x1);

    function Fm$highlight$tc$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) {
        var Fm$highlight$tc$ = (_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8) => ({
            ctr: 'TCO',
            arg: [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8]
        });
        var Fm$highlight$tc = _code$1 => _ix0$2 => _ix1$3 => _col$4 => _row$5 => _lft$6 => _lin$7 => _res$8 => Fm$highlight$tc$(_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8);
        var arg = [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8];
        while (true) {
            let [_code$1, _ix0$2, _ix1$3, _col$4, _row$5, _lft$6, _lin$7, _res$8] = arg;
            var R = (() => {
                var _spa$9 = 3n;
                var self = _code$1;
                if (self.length === 0) {
                    var $4618 = Fm$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                    var $4617 = $4618;
                } else {
                    var $4619 = self.charCodeAt(0);
                    var $4620 = self.slice(1);
                    var self = ($4619 === 10);
                    if (self) {
                        var _stp$12 = Maybe$extract$(_lft$6, Bool$false, Nat$is_zero);
                        var self = _stp$12;
                        if (self) {
                            var $4623 = Fm$highlight$end$(_col$4, _row$5, List$reverse$(_res$8));
                            var $4622 = $4623;
                        } else {
                            var _siz$13 = Nat$succ$(Nat$double$(_spa$9));
                            var self = _ix1$3;
                            if (self === 0n) {
                                var self = _lft$6;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $4626 = Maybe$some$(_spa$9);
                                        var $4625 = $4626;
                                        break;
                                    case 'Maybe.some':
                                        var $4627 = self.value;
                                        var $4628 = Maybe$some$(Nat$pred$($4627));
                                        var $4625 = $4628;
                                        break;
                                };
                                var _lft$14 = $4625;
                            } else {
                                var $4629 = (self - 1n);
                                var $4630 = _lft$6;
                                var _lft$14 = $4630;
                            };
                            var _ix0$15 = Nat$pred$(_ix0$2);
                            var _ix1$16 = Nat$pred$(_ix1$3);
                            var _col$17 = 0n;
                            var _row$18 = Nat$succ$(_row$5);
                            var _res$19 = List$cons$(String$reverse$(_lin$7), _res$8);
                            var _lin$20 = String$reverse$(String$flatten$(List$cons$(String$pad_left$(4n, 32, Nat$show$(_row$18)), List$cons$(" | ", List$nil))));
                            var $4624 = Fm$highlight$tc$($4620, _ix0$15, _ix1$16, _col$17, _row$18, _lft$14, _lin$20, _res$19);
                            var $4622 = $4624;
                        };
                        var $4621 = $4622;
                    } else {
                        var _chr$12 = String$cons$($4619, String$nil);
                        var self = (Nat$is_zero$(_ix0$2) && (!Nat$is_zero$(_ix1$3)));
                        if (self) {
                            var $4632 = String$reverse$(Fm$color$("31", Fm$color$("4", _chr$12)));
                            var _chr$13 = $4632;
                        } else {
                            var $4633 = _chr$12;
                            var _chr$13 = $4633;
                        };
                        var self = (_ix0$2 === 1n);
                        if (self) {
                            var $4634 = List$take$(_spa$9, _res$8);
                            var _res$14 = $4634;
                        } else {
                            var $4635 = _res$8;
                            var _res$14 = $4635;
                        };
                        var _ix0$15 = Nat$pred$(_ix0$2);
                        var _ix1$16 = Nat$pred$(_ix1$3);
                        var _col$17 = Nat$succ$(_col$4);
                        var _lin$18 = String$flatten$(List$cons$(_chr$13, List$cons$(_lin$7, List$nil)));
                        var $4631 = Fm$highlight$tc$($4620, _ix0$15, _ix1$16, _col$17, _row$5, _lft$6, _lin$18, _res$14);
                        var $4621 = $4631;
                    };
                    var $4617 = $4621;
                };
                return $4617;
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$highlight$tc = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Fm$highlight$tc$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Fm$highlight$(_code$1, _idx0$2, _idx1$3) {
        var $4636 = Fm$highlight$tc$(_code$1, _idx0$2, _idx1$3, 0n, 1n, Maybe$none, String$reverse$("   1 | "), List$nil);
        return $4636;
    };
    const Fm$highlight = x0 => x1 => x2 => Fm$highlight$(x0, x1, x2);

    function Fm$Defs$read$(_file$1, _code$2, _defs$3) {
        var self = Fm$Parser$file$(_file$1, _code$2, _defs$3, 0n, _code$2);
        switch (self._) {
            case 'Parser.Reply.error':
                var $4638 = self.idx;
                var $4639 = self.code;
                var $4640 = self.err;
                var _err$7 = $4640;
                var _hig$8 = Fm$highlight$(_code$2, $4638, Nat$succ$($4638));
                var _str$9 = String$flatten$(List$cons$(_err$7, List$cons$("\u{a}", List$cons$(_hig$8, List$nil))));
                var $4641 = Either$left$(_str$9);
                var $4637 = $4641;
                break;
            case 'Parser.Reply.value':
                var $4642 = self.idx;
                var $4643 = self.code;
                var $4644 = self.val;
                var $4645 = Either$right$($4644);
                var $4637 = $4645;
                break;
        };
        return $4637;
    };
    const Fm$Defs$read = x0 => x1 => x2 => Fm$Defs$read$(x0, x1, x2);

    function Fm$Synth$load$(_name$1, _defs$2) {
        var _file$3 = Fm$Synth$file_of$(_name$1);
        var $4646 = IO$monad$((_m$bind$4 => _m$pure$5 => {
            var $4647 = _m$bind$4;
            return $4647;
        }))(IO$get_file$(_file$3))((_code$4 => {
            var _read$5 = Fm$Defs$read$(_file$3, _code$4, _defs$2);
            var self = _read$5;
            switch (self._) {
                case 'Either.left':
                    var $4649 = self.value;
                    var $4650 = IO$monad$((_m$bind$7 => _m$pure$8 => {
                        var $4651 = _m$pure$8;
                        return $4651;
                    }))(Maybe$none);
                    var $4648 = $4650;
                    break;
                case 'Either.right':
                    var $4652 = self.value;
                    var _defs$7 = $4652;
                    var self = Fm$get$(_name$1, _defs$7);
                    switch (self._) {
                        case 'Maybe.none':
                            var $4654 = IO$monad$((_m$bind$8 => _m$pure$9 => {
                                var $4655 = _m$pure$9;
                                return $4655;
                            }))(Maybe$none);
                            var $4653 = $4654;
                            break;
                        case 'Maybe.some':
                            var $4656 = self.value;
                            var $4657 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                                var $4658 = _m$pure$10;
                                return $4658;
                            }))(Maybe$some$(_defs$7));
                            var $4653 = $4657;
                            break;
                    };
                    var $4648 = $4653;
                    break;
            };
            return $4648;
        }));
        return $4646;
    };
    const Fm$Synth$load = x0 => x1 => Fm$Synth$load$(x0, x1);
    const Fm$Status$wait = ({
        _: 'Fm.Status.wait'
    });

    function Fm$Check$(_V$1) {
        var $4659 = null;
        return $4659;
    };
    const Fm$Check = x0 => Fm$Check$(x0);

    function Fm$Check$result$(_value$2, _errors$3) {
        var $4660 = ({
            _: 'Fm.Check.result',
            'value': _value$2,
            'errors': _errors$3
        });
        return $4660;
    };
    const Fm$Check$result = x0 => x1 => Fm$Check$result$(x0, x1);

    function Fm$Error$undefined_reference$(_origin$1, _name$2) {
        var $4661 = ({
            _: 'Fm.Error.undefined_reference',
            'origin': _origin$1,
            'name': _name$2
        });
        return $4661;
    };
    const Fm$Error$undefined_reference = x0 => x1 => Fm$Error$undefined_reference$(x0, x1);

    function Fm$Error$waiting$(_name$1) {
        var $4662 = ({
            _: 'Fm.Error.waiting',
            'name': _name$1
        });
        return $4662;
    };
    const Fm$Error$waiting = x0 => Fm$Error$waiting$(x0);

    function Fm$Error$indirect$(_name$1) {
        var $4663 = ({
            _: 'Fm.Error.indirect',
            'name': _name$1
        });
        return $4663;
    };
    const Fm$Error$indirect = x0 => Fm$Error$indirect$(x0);

    function Maybe$mapped$(_m$2, _f$4) {
        var self = _m$2;
        switch (self._) {
            case 'Maybe.none':
                var $4665 = Maybe$none;
                var $4664 = $4665;
                break;
            case 'Maybe.some':
                var $4666 = self.value;
                var $4667 = Maybe$some$(_f$4($4666));
                var $4664 = $4667;
                break;
        };
        return $4664;
    };
    const Maybe$mapped = x0 => x1 => Maybe$mapped$(x0, x1);

    function Fm$MPath$o$(_path$1) {
        var $4668 = Maybe$mapped$(_path$1, Fm$Path$o);
        return $4668;
    };
    const Fm$MPath$o = x0 => Fm$MPath$o$(x0);

    function Fm$MPath$i$(_path$1) {
        var $4669 = Maybe$mapped$(_path$1, Fm$Path$i);
        return $4669;
    };
    const Fm$MPath$i = x0 => Fm$MPath$i$(x0);

    function Fm$Error$patch$(_path$1, _term$2) {
        var $4670 = ({
            _: 'Fm.Error.patch',
            'path': _path$1,
            'term': _term$2
        });
        return $4670;
    };
    const Fm$Error$patch = x0 => x1 => Fm$Error$patch$(x0, x1);

    function Fm$MPath$to_bits$(_path$1) {
        var self = _path$1;
        switch (self._) {
            case 'Maybe.none':
                var $4672 = Bits$e;
                var $4671 = $4672;
                break;
            case 'Maybe.some':
                var $4673 = self.value;
                var $4674 = $4673(Bits$e);
                var $4671 = $4674;
                break;
        };
        return $4671;
    };
    const Fm$MPath$to_bits = x0 => Fm$MPath$to_bits$(x0);

    function Fm$Error$type_mismatch$(_origin$1, _expected$2, _detected$3, _context$4) {
        var $4675 = ({
            _: 'Fm.Error.type_mismatch',
            'origin': _origin$1,
            'expected': _expected$2,
            'detected': _detected$3,
            'context': _context$4
        });
        return $4675;
    };
    const Fm$Error$type_mismatch = x0 => x1 => x2 => x3 => Fm$Error$type_mismatch$(x0, x1, x2, x3);

    function Fm$Error$show_goal$(_name$1, _dref$2, _verb$3, _goal$4, _context$5) {
        var $4676 = ({
            _: 'Fm.Error.show_goal',
            'name': _name$1,
            'dref': _dref$2,
            'verb': _verb$3,
            'goal': _goal$4,
            'context': _context$5
        });
        return $4676;
    };
    const Fm$Error$show_goal = x0 => x1 => x2 => x3 => x4 => Fm$Error$show_goal$(x0, x1, x2, x3, x4);

    function Fm$Term$normalize$(_term$1, _defs$2) {
        var self = Fm$Term$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Fm.Term.var':
                var $4678 = self.name;
                var $4679 = self.indx;
                var $4680 = Fm$Term$var$($4678, $4679);
                var $4677 = $4680;
                break;
            case 'Fm.Term.ref':
                var $4681 = self.name;
                var $4682 = Fm$Term$ref$($4681);
                var $4677 = $4682;
                break;
            case 'Fm.Term.typ':
                var $4683 = Fm$Term$typ;
                var $4677 = $4683;
                break;
            case 'Fm.Term.all':
                var $4684 = self.eras;
                var $4685 = self.self;
                var $4686 = self.name;
                var $4687 = self.xtyp;
                var $4688 = self.body;
                var $4689 = Fm$Term$all$($4684, $4685, $4686, Fm$Term$normalize$($4687, _defs$2), (_s$8 => _x$9 => {
                    var $4690 = Fm$Term$normalize$($4688(_s$8)(_x$9), _defs$2);
                    return $4690;
                }));
                var $4677 = $4689;
                break;
            case 'Fm.Term.lam':
                var $4691 = self.name;
                var $4692 = self.body;
                var $4693 = Fm$Term$lam$($4691, (_x$5 => {
                    var $4694 = Fm$Term$normalize$($4692(_x$5), _defs$2);
                    return $4694;
                }));
                var $4677 = $4693;
                break;
            case 'Fm.Term.app':
                var $4695 = self.func;
                var $4696 = self.argm;
                var $4697 = Fm$Term$app$(Fm$Term$normalize$($4695, _defs$2), Fm$Term$normalize$($4696, _defs$2));
                var $4677 = $4697;
                break;
            case 'Fm.Term.let':
                var $4698 = self.name;
                var $4699 = self.expr;
                var $4700 = self.body;
                var $4701 = Fm$Term$let$($4698, Fm$Term$normalize$($4699, _defs$2), (_x$6 => {
                    var $4702 = Fm$Term$normalize$($4700(_x$6), _defs$2);
                    return $4702;
                }));
                var $4677 = $4701;
                break;
            case 'Fm.Term.def':
                var $4703 = self.name;
                var $4704 = self.expr;
                var $4705 = self.body;
                var $4706 = Fm$Term$def$($4703, Fm$Term$normalize$($4704, _defs$2), (_x$6 => {
                    var $4707 = Fm$Term$normalize$($4705(_x$6), _defs$2);
                    return $4707;
                }));
                var $4677 = $4706;
                break;
            case 'Fm.Term.ann':
                var $4708 = self.done;
                var $4709 = self.term;
                var $4710 = self.type;
                var $4711 = Fm$Term$ann$($4708, Fm$Term$normalize$($4709, _defs$2), Fm$Term$normalize$($4710, _defs$2));
                var $4677 = $4711;
                break;
            case 'Fm.Term.gol':
                var $4712 = self.name;
                var $4713 = self.dref;
                var $4714 = self.verb;
                var $4715 = Fm$Term$gol$($4712, $4713, $4714);
                var $4677 = $4715;
                break;
            case 'Fm.Term.hol':
                var $4716 = self.path;
                var $4717 = Fm$Term$hol$($4716);
                var $4677 = $4717;
                break;
            case 'Fm.Term.nat':
                var $4718 = self.natx;
                var $4719 = Fm$Term$nat$($4718);
                var $4677 = $4719;
                break;
            case 'Fm.Term.chr':
                var $4720 = self.chrx;
                var $4721 = Fm$Term$chr$($4720);
                var $4677 = $4721;
                break;
            case 'Fm.Term.str':
                var $4722 = self.strx;
                var $4723 = Fm$Term$str$($4722);
                var $4677 = $4723;
                break;
            case 'Fm.Term.cse':
                var $4724 = self.path;
                var $4725 = self.expr;
                var $4726 = self.name;
                var $4727 = self.with;
                var $4728 = self.cses;
                var $4729 = self.moti;
                var $4730 = _term$1;
                var $4677 = $4730;
                break;
            case 'Fm.Term.ori':
                var $4731 = self.orig;
                var $4732 = self.expr;
                var $4733 = Fm$Term$normalize$($4732, _defs$2);
                var $4677 = $4733;
                break;
        };
        return $4677;
    };
    const Fm$Term$normalize = x0 => x1 => Fm$Term$normalize$(x0, x1);

    function List$tail$(_xs$2) {
        var self = _xs$2;
        switch (self._) {
            case 'List.nil':
                var $4735 = List$nil;
                var $4734 = $4735;
                break;
            case 'List.cons':
                var $4736 = self.head;
                var $4737 = self.tail;
                var $4738 = $4737;
                var $4734 = $4738;
                break;
        };
        return $4734;
    };
    const List$tail = x0 => List$tail$(x0);

    function Fm$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4) {
        var Fm$SmartMotive$vals$cont$ = (_expr$1, _term$2, _args$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_expr$1, _term$2, _args$3, _defs$4]
        });
        var Fm$SmartMotive$vals$cont = _expr$1 => _term$2 => _args$3 => _defs$4 => Fm$SmartMotive$vals$cont$(_expr$1, _term$2, _args$3, _defs$4);
        var arg = [_expr$1, _term$2, _args$3, _defs$4];
        while (true) {
            let [_expr$1, _term$2, _args$3, _defs$4] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $4739 = self.name;
                        var $4740 = self.indx;
                        var $4741 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4741;
                    case 'Fm.Term.ref':
                        var $4742 = self.name;
                        var $4743 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4743;
                    case 'Fm.Term.typ':
                        var $4744 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4744;
                    case 'Fm.Term.all':
                        var $4745 = self.eras;
                        var $4746 = self.self;
                        var $4747 = self.name;
                        var $4748 = self.xtyp;
                        var $4749 = self.body;
                        var $4750 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4750;
                    case 'Fm.Term.lam':
                        var $4751 = self.name;
                        var $4752 = self.body;
                        var $4753 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4753;
                    case 'Fm.Term.app':
                        var $4754 = self.func;
                        var $4755 = self.argm;
                        var $4756 = Fm$SmartMotive$vals$cont$(_expr$1, $4754, List$cons$($4755, _args$3), _defs$4);
                        return $4756;
                    case 'Fm.Term.let':
                        var $4757 = self.name;
                        var $4758 = self.expr;
                        var $4759 = self.body;
                        var $4760 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4760;
                    case 'Fm.Term.def':
                        var $4761 = self.name;
                        var $4762 = self.expr;
                        var $4763 = self.body;
                        var $4764 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4764;
                    case 'Fm.Term.ann':
                        var $4765 = self.done;
                        var $4766 = self.term;
                        var $4767 = self.type;
                        var $4768 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4768;
                    case 'Fm.Term.gol':
                        var $4769 = self.name;
                        var $4770 = self.dref;
                        var $4771 = self.verb;
                        var $4772 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4772;
                    case 'Fm.Term.hol':
                        var $4773 = self.path;
                        var $4774 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4774;
                    case 'Fm.Term.nat':
                        var $4775 = self.natx;
                        var $4776 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4776;
                    case 'Fm.Term.chr':
                        var $4777 = self.chrx;
                        var $4778 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4778;
                    case 'Fm.Term.str':
                        var $4779 = self.strx;
                        var $4780 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4780;
                    case 'Fm.Term.cse':
                        var $4781 = self.path;
                        var $4782 = self.expr;
                        var $4783 = self.name;
                        var $4784 = self.with;
                        var $4785 = self.cses;
                        var $4786 = self.moti;
                        var $4787 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4787;
                    case 'Fm.Term.ori':
                        var $4788 = self.orig;
                        var $4789 = self.expr;
                        var $4790 = List$cons$(_expr$1, List$tail$(List$reverse$(_args$3)));
                        return $4790;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$SmartMotive$vals$cont = x0 => x1 => x2 => x3 => Fm$SmartMotive$vals$cont$(x0, x1, x2, x3);

    function Fm$SmartMotive$vals$(_expr$1, _type$2, _defs$3) {
        var Fm$SmartMotive$vals$ = (_expr$1, _type$2, _defs$3) => ({
            ctr: 'TCO',
            arg: [_expr$1, _type$2, _defs$3]
        });
        var Fm$SmartMotive$vals = _expr$1 => _type$2 => _defs$3 => Fm$SmartMotive$vals$(_expr$1, _type$2, _defs$3);
        var arg = [_expr$1, _type$2, _defs$3];
        while (true) {
            let [_expr$1, _type$2, _defs$3] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_type$2, _defs$3);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $4791 = self.name;
                        var $4792 = self.indx;
                        var $4793 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4793;
                    case 'Fm.Term.ref':
                        var $4794 = self.name;
                        var $4795 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4795;
                    case 'Fm.Term.typ':
                        var $4796 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4796;
                    case 'Fm.Term.all':
                        var $4797 = self.eras;
                        var $4798 = self.self;
                        var $4799 = self.name;
                        var $4800 = self.xtyp;
                        var $4801 = self.body;
                        var $4802 = Fm$SmartMotive$vals$(_expr$1, $4801(Fm$Term$typ)(Fm$Term$typ), _defs$3);
                        return $4802;
                    case 'Fm.Term.lam':
                        var $4803 = self.name;
                        var $4804 = self.body;
                        var $4805 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4805;
                    case 'Fm.Term.app':
                        var $4806 = self.func;
                        var $4807 = self.argm;
                        var $4808 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4808;
                    case 'Fm.Term.let':
                        var $4809 = self.name;
                        var $4810 = self.expr;
                        var $4811 = self.body;
                        var $4812 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4812;
                    case 'Fm.Term.def':
                        var $4813 = self.name;
                        var $4814 = self.expr;
                        var $4815 = self.body;
                        var $4816 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4816;
                    case 'Fm.Term.ann':
                        var $4817 = self.done;
                        var $4818 = self.term;
                        var $4819 = self.type;
                        var $4820 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4820;
                    case 'Fm.Term.gol':
                        var $4821 = self.name;
                        var $4822 = self.dref;
                        var $4823 = self.verb;
                        var $4824 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4824;
                    case 'Fm.Term.hol':
                        var $4825 = self.path;
                        var $4826 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4826;
                    case 'Fm.Term.nat':
                        var $4827 = self.natx;
                        var $4828 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4828;
                    case 'Fm.Term.chr':
                        var $4829 = self.chrx;
                        var $4830 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4830;
                    case 'Fm.Term.str':
                        var $4831 = self.strx;
                        var $4832 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4832;
                    case 'Fm.Term.cse':
                        var $4833 = self.path;
                        var $4834 = self.expr;
                        var $4835 = self.name;
                        var $4836 = self.with;
                        var $4837 = self.cses;
                        var $4838 = self.moti;
                        var $4839 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4839;
                    case 'Fm.Term.ori':
                        var $4840 = self.orig;
                        var $4841 = self.expr;
                        var $4842 = Fm$SmartMotive$vals$cont$(_expr$1, _type$2, List$nil, _defs$3);
                        return $4842;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$SmartMotive$vals = x0 => x1 => x2 => Fm$SmartMotive$vals$(x0, x1, x2);

    function Fm$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4) {
        var Fm$SmartMotive$nams$cont$ = (_name$1, _term$2, _binds$3, _defs$4) => ({
            ctr: 'TCO',
            arg: [_name$1, _term$2, _binds$3, _defs$4]
        });
        var Fm$SmartMotive$nams$cont = _name$1 => _term$2 => _binds$3 => _defs$4 => Fm$SmartMotive$nams$cont$(_name$1, _term$2, _binds$3, _defs$4);
        var arg = [_name$1, _term$2, _binds$3, _defs$4];
        while (true) {
            let [_name$1, _term$2, _binds$3, _defs$4] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_term$2, _defs$4);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $4843 = self.name;
                        var $4844 = self.indx;
                        var $4845 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4845;
                    case 'Fm.Term.ref':
                        var $4846 = self.name;
                        var $4847 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4847;
                    case 'Fm.Term.typ':
                        var $4848 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4848;
                    case 'Fm.Term.all':
                        var $4849 = self.eras;
                        var $4850 = self.self;
                        var $4851 = self.name;
                        var $4852 = self.xtyp;
                        var $4853 = self.body;
                        var $4854 = Fm$SmartMotive$nams$cont$(_name$1, $4853(Fm$Term$ref$($4850))(Fm$Term$ref$($4851)), List$cons$(String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($4851, List$nil)))), _binds$3), _defs$4);
                        return $4854;
                    case 'Fm.Term.lam':
                        var $4855 = self.name;
                        var $4856 = self.body;
                        var $4857 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4857;
                    case 'Fm.Term.app':
                        var $4858 = self.func;
                        var $4859 = self.argm;
                        var $4860 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4860;
                    case 'Fm.Term.let':
                        var $4861 = self.name;
                        var $4862 = self.expr;
                        var $4863 = self.body;
                        var $4864 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4864;
                    case 'Fm.Term.def':
                        var $4865 = self.name;
                        var $4866 = self.expr;
                        var $4867 = self.body;
                        var $4868 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4868;
                    case 'Fm.Term.ann':
                        var $4869 = self.done;
                        var $4870 = self.term;
                        var $4871 = self.type;
                        var $4872 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4872;
                    case 'Fm.Term.gol':
                        var $4873 = self.name;
                        var $4874 = self.dref;
                        var $4875 = self.verb;
                        var $4876 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4876;
                    case 'Fm.Term.hol':
                        var $4877 = self.path;
                        var $4878 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4878;
                    case 'Fm.Term.nat':
                        var $4879 = self.natx;
                        var $4880 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4880;
                    case 'Fm.Term.chr':
                        var $4881 = self.chrx;
                        var $4882 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4882;
                    case 'Fm.Term.str':
                        var $4883 = self.strx;
                        var $4884 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4884;
                    case 'Fm.Term.cse':
                        var $4885 = self.path;
                        var $4886 = self.expr;
                        var $4887 = self.name;
                        var $4888 = self.with;
                        var $4889 = self.cses;
                        var $4890 = self.moti;
                        var $4891 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4891;
                    case 'Fm.Term.ori':
                        var $4892 = self.orig;
                        var $4893 = self.expr;
                        var $4894 = List$cons$(_name$1, List$tail$(_binds$3));
                        return $4894;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$SmartMotive$nams$cont = x0 => x1 => x2 => x3 => Fm$SmartMotive$nams$cont$(x0, x1, x2, x3);

    function Fm$SmartMotive$nams$(_name$1, _type$2, _defs$3) {
        var self = Fm$Term$reduce$(_type$2, _defs$3);
        switch (self._) {
            case 'Fm.Term.var':
                var $4896 = self.name;
                var $4897 = self.indx;
                var $4898 = List$nil;
                var $4895 = $4898;
                break;
            case 'Fm.Term.ref':
                var $4899 = self.name;
                var $4900 = List$nil;
                var $4895 = $4900;
                break;
            case 'Fm.Term.typ':
                var $4901 = List$nil;
                var $4895 = $4901;
                break;
            case 'Fm.Term.all':
                var $4902 = self.eras;
                var $4903 = self.self;
                var $4904 = self.name;
                var $4905 = self.xtyp;
                var $4906 = self.body;
                var $4907 = Fm$SmartMotive$nams$cont$(_name$1, $4905, List$nil, _defs$3);
                var $4895 = $4907;
                break;
            case 'Fm.Term.lam':
                var $4908 = self.name;
                var $4909 = self.body;
                var $4910 = List$nil;
                var $4895 = $4910;
                break;
            case 'Fm.Term.app':
                var $4911 = self.func;
                var $4912 = self.argm;
                var $4913 = List$nil;
                var $4895 = $4913;
                break;
            case 'Fm.Term.let':
                var $4914 = self.name;
                var $4915 = self.expr;
                var $4916 = self.body;
                var $4917 = List$nil;
                var $4895 = $4917;
                break;
            case 'Fm.Term.def':
                var $4918 = self.name;
                var $4919 = self.expr;
                var $4920 = self.body;
                var $4921 = List$nil;
                var $4895 = $4921;
                break;
            case 'Fm.Term.ann':
                var $4922 = self.done;
                var $4923 = self.term;
                var $4924 = self.type;
                var $4925 = List$nil;
                var $4895 = $4925;
                break;
            case 'Fm.Term.gol':
                var $4926 = self.name;
                var $4927 = self.dref;
                var $4928 = self.verb;
                var $4929 = List$nil;
                var $4895 = $4929;
                break;
            case 'Fm.Term.hol':
                var $4930 = self.path;
                var $4931 = List$nil;
                var $4895 = $4931;
                break;
            case 'Fm.Term.nat':
                var $4932 = self.natx;
                var $4933 = List$nil;
                var $4895 = $4933;
                break;
            case 'Fm.Term.chr':
                var $4934 = self.chrx;
                var $4935 = List$nil;
                var $4895 = $4935;
                break;
            case 'Fm.Term.str':
                var $4936 = self.strx;
                var $4937 = List$nil;
                var $4895 = $4937;
                break;
            case 'Fm.Term.cse':
                var $4938 = self.path;
                var $4939 = self.expr;
                var $4940 = self.name;
                var $4941 = self.with;
                var $4942 = self.cses;
                var $4943 = self.moti;
                var $4944 = List$nil;
                var $4895 = $4944;
                break;
            case 'Fm.Term.ori':
                var $4945 = self.orig;
                var $4946 = self.expr;
                var $4947 = List$nil;
                var $4895 = $4947;
                break;
        };
        return $4895;
    };
    const Fm$SmartMotive$nams = x0 => x1 => x2 => Fm$SmartMotive$nams$(x0, x1, x2);

    function List$zip$(_as$3, _bs$4) {
        var self = _as$3;
        switch (self._) {
            case 'List.nil':
                var $4949 = List$nil;
                var $4948 = $4949;
                break;
            case 'List.cons':
                var $4950 = self.head;
                var $4951 = self.tail;
                var self = _bs$4;
                switch (self._) {
                    case 'List.nil':
                        var $4953 = List$nil;
                        var $4952 = $4953;
                        break;
                    case 'List.cons':
                        var $4954 = self.head;
                        var $4955 = self.tail;
                        var $4956 = List$cons$(Pair$new$($4950, $4954), List$zip$($4951, $4955));
                        var $4952 = $4956;
                        break;
                };
                var $4948 = $4952;
                break;
        };
        return $4948;
    };
    const List$zip = x0 => x1 => List$zip$(x0, x1);
    const Nat$gte = a0 => a1 => (a0 >= a1);
    const Nat$sub = a0 => a1 => (a0 - a1 <= 0n ? 0n : a0 - a1);

    function Fm$Term$serialize$name$(_name$1) {
        var $4957 = (fm_name_to_bits(_name$1));
        return $4957;
    };
    const Fm$Term$serialize$name = x0 => Fm$Term$serialize$name$(x0);

    function Fm$Term$serialize$(_term$1, _depth$2, _init$3, _diff$4, _x$5) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $4959 = self.name;
                var $4960 = self.indx;
                var self = ($4960 >= _init$3);
                if (self) {
                    var _name$8 = a1 => (a1 + (nat_to_bits(Nat$pred$((_depth$2 - $4960 <= 0n ? 0n : _depth$2 - $4960)))));
                    var $4962 = (((_name$8(_x$5) + '1') + '0') + '0');
                    var $4961 = $4962;
                } else {
                    var _name$8 = a1 => (a1 + (nat_to_bits($4960)));
                    var $4963 = (((_name$8(_x$5) + '0') + '1') + '0');
                    var $4961 = $4963;
                };
                var $4958 = $4961;
                break;
            case 'Fm.Term.ref':
                var $4964 = self.name;
                var _name$7 = a1 => (a1 + Fm$Term$serialize$name$($4964));
                var $4965 = (((_name$7(_x$5) + '0') + '0') + '0');
                var $4958 = $4965;
                break;
            case 'Fm.Term.typ':
                var $4966 = (((_x$5 + '1') + '1') + '0');
                var $4958 = $4966;
                break;
            case 'Fm.Term.all':
                var $4967 = self.eras;
                var $4968 = self.self;
                var $4969 = self.name;
                var $4970 = self.xtyp;
                var $4971 = self.body;
                var self = $4967;
                if (self) {
                    var $4973 = Bits$i;
                    var _eras$11 = $4973;
                } else {
                    var $4974 = Bits$o;
                    var _eras$11 = $4974;
                };
                var _self$12 = a1 => (a1 + (fm_name_to_bits($4968)));
                var _xtyp$13 = Fm$Term$serialize($4970)(_depth$2)(_init$3)(_diff$4);
                var _body$14 = Fm$Term$serialize($4971(Fm$Term$var$($4968, _depth$2))(Fm$Term$var$($4969, Nat$succ$(_depth$2))))(Nat$succ$(Nat$succ$(_depth$2)))(_init$3)(_diff$4);
                var $4972 = (((_eras$11(_self$12(_xtyp$13(_body$14(_x$5)))) + '0') + '0') + '1');
                var $4958 = $4972;
                break;
            case 'Fm.Term.lam':
                var $4975 = self.name;
                var $4976 = self.body;
                var _body$8 = Fm$Term$serialize($4976(Fm$Term$var$($4975, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $4977 = (((_body$8(_x$5) + '1') + '0') + '1');
                var $4958 = $4977;
                break;
            case 'Fm.Term.app':
                var $4978 = self.func;
                var $4979 = self.argm;
                var _func$8 = Fm$Term$serialize($4978)(_depth$2)(_init$3)(_diff$4);
                var _argm$9 = Fm$Term$serialize($4979)(_depth$2)(_init$3)(_diff$4);
                var $4980 = (((_func$8(_argm$9(_x$5)) + '0') + '1') + '1');
                var $4958 = $4980;
                break;
            case 'Fm.Term.let':
                var $4981 = self.name;
                var $4982 = self.expr;
                var $4983 = self.body;
                var _expr$9 = Fm$Term$serialize($4982)(_depth$2)(_init$3)(_diff$4);
                var _body$10 = Fm$Term$serialize($4983(Fm$Term$var$($4981, _depth$2)))(Nat$succ$(_depth$2))(_init$3)(_diff$4);
                var $4984 = (((_expr$9(_body$10(_x$5)) + '1') + '1') + '1');
                var $4958 = $4984;
                break;
            case 'Fm.Term.def':
                var $4985 = self.name;
                var $4986 = self.expr;
                var $4987 = self.body;
                var $4988 = Fm$Term$serialize$($4987($4986), _depth$2, _init$3, _diff$4, _x$5);
                var $4958 = $4988;
                break;
            case 'Fm.Term.ann':
                var $4989 = self.done;
                var $4990 = self.term;
                var $4991 = self.type;
                var $4992 = Fm$Term$serialize$($4990, _depth$2, _init$3, _diff$4, _x$5);
                var $4958 = $4992;
                break;
            case 'Fm.Term.gol':
                var $4993 = self.name;
                var $4994 = self.dref;
                var $4995 = self.verb;
                var _name$9 = a1 => (a1 + (fm_name_to_bits($4993)));
                var $4996 = (((_name$9(_x$5) + '0') + '0') + '0');
                var $4958 = $4996;
                break;
            case 'Fm.Term.hol':
                var $4997 = self.path;
                var $4998 = _x$5;
                var $4958 = $4998;
                break;
            case 'Fm.Term.nat':
                var $4999 = self.natx;
                var $5000 = Fm$Term$serialize$(Fm$Term$unroll_nat$($4999), _depth$2, _init$3, _diff$4, _x$5);
                var $4958 = $5000;
                break;
            case 'Fm.Term.chr':
                var $5001 = self.chrx;
                var $5002 = Fm$Term$serialize$(Fm$Term$unroll_chr$($5001), _depth$2, _init$3, _diff$4, _x$5);
                var $4958 = $5002;
                break;
            case 'Fm.Term.str':
                var $5003 = self.strx;
                var $5004 = Fm$Term$serialize$(Fm$Term$unroll_str$($5003), _depth$2, _init$3, _diff$4, _x$5);
                var $4958 = $5004;
                break;
            case 'Fm.Term.cse':
                var $5005 = self.path;
                var $5006 = self.expr;
                var $5007 = self.name;
                var $5008 = self.with;
                var $5009 = self.cses;
                var $5010 = self.moti;
                var $5011 = _diff$4(_x$5);
                var $4958 = $5011;
                break;
            case 'Fm.Term.ori':
                var $5012 = self.orig;
                var $5013 = self.expr;
                var $5014 = Fm$Term$serialize$($5013, _depth$2, _init$3, _diff$4, _x$5);
                var $4958 = $5014;
                break;
        };
        return $4958;
    };
    const Fm$Term$serialize = x0 => x1 => x2 => x3 => x4 => Fm$Term$serialize$(x0, x1, x2, x3, x4);
    const Bits$eql = a0 => a1 => (a1 === a0);

    function Fm$Term$identical$(_a$1, _b$2, _lv$3) {
        var _ah$4 = Fm$Term$serialize$(_a$1, _lv$3, _lv$3, Bits$o, Bits$e);
        var _bh$5 = Fm$Term$serialize$(_b$2, _lv$3, _lv$3, Bits$i, Bits$e);
        var $5015 = (_bh$5 === _ah$4);
        return $5015;
    };
    const Fm$Term$identical = x0 => x1 => x2 => Fm$Term$identical$(x0, x1, x2);

    function Fm$SmartMotive$replace$(_term$1, _from$2, _to$3, _lv$4) {
        var self = Fm$Term$identical$(_term$1, _from$2, _lv$4);
        if (self) {
            var $5017 = _to$3;
            var $5016 = $5017;
        } else {
            var self = _term$1;
            switch (self._) {
                case 'Fm.Term.var':
                    var $5019 = self.name;
                    var $5020 = self.indx;
                    var $5021 = Fm$Term$var$($5019, $5020);
                    var $5018 = $5021;
                    break;
                case 'Fm.Term.ref':
                    var $5022 = self.name;
                    var $5023 = Fm$Term$ref$($5022);
                    var $5018 = $5023;
                    break;
                case 'Fm.Term.typ':
                    var $5024 = Fm$Term$typ;
                    var $5018 = $5024;
                    break;
                case 'Fm.Term.all':
                    var $5025 = self.eras;
                    var $5026 = self.self;
                    var $5027 = self.name;
                    var $5028 = self.xtyp;
                    var $5029 = self.body;
                    var _xtyp$10 = Fm$SmartMotive$replace$($5028, _from$2, _to$3, _lv$4);
                    var _body$11 = $5029(Fm$Term$ref$($5026))(Fm$Term$ref$($5027));
                    var _body$12 = Fm$SmartMotive$replace$(_body$11, _from$2, _to$3, Nat$succ$(Nat$succ$(_lv$4)));
                    var $5030 = Fm$Term$all$($5025, $5026, $5027, _xtyp$10, (_s$13 => _x$14 => {
                        var $5031 = _body$12;
                        return $5031;
                    }));
                    var $5018 = $5030;
                    break;
                case 'Fm.Term.lam':
                    var $5032 = self.name;
                    var $5033 = self.body;
                    var _body$7 = $5033(Fm$Term$ref$($5032));
                    var _body$8 = Fm$SmartMotive$replace$(_body$7, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5034 = Fm$Term$lam$($5032, (_x$9 => {
                        var $5035 = _body$8;
                        return $5035;
                    }));
                    var $5018 = $5034;
                    break;
                case 'Fm.Term.app':
                    var $5036 = self.func;
                    var $5037 = self.argm;
                    var _func$7 = Fm$SmartMotive$replace$($5036, _from$2, _to$3, _lv$4);
                    var _argm$8 = Fm$SmartMotive$replace$($5037, _from$2, _to$3, _lv$4);
                    var $5038 = Fm$Term$app$(_func$7, _argm$8);
                    var $5018 = $5038;
                    break;
                case 'Fm.Term.let':
                    var $5039 = self.name;
                    var $5040 = self.expr;
                    var $5041 = self.body;
                    var _expr$8 = Fm$SmartMotive$replace$($5040, _from$2, _to$3, _lv$4);
                    var _body$9 = $5041(Fm$Term$ref$($5039));
                    var _body$10 = Fm$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5042 = Fm$Term$let$($5039, _expr$8, (_x$11 => {
                        var $5043 = _body$10;
                        return $5043;
                    }));
                    var $5018 = $5042;
                    break;
                case 'Fm.Term.def':
                    var $5044 = self.name;
                    var $5045 = self.expr;
                    var $5046 = self.body;
                    var _expr$8 = Fm$SmartMotive$replace$($5045, _from$2, _to$3, _lv$4);
                    var _body$9 = $5046(Fm$Term$ref$($5044));
                    var _body$10 = Fm$SmartMotive$replace$(_body$9, _from$2, _to$3, Nat$succ$(_lv$4));
                    var $5047 = Fm$Term$def$($5044, _expr$8, (_x$11 => {
                        var $5048 = _body$10;
                        return $5048;
                    }));
                    var $5018 = $5047;
                    break;
                case 'Fm.Term.ann':
                    var $5049 = self.done;
                    var $5050 = self.term;
                    var $5051 = self.type;
                    var _term$8 = Fm$SmartMotive$replace$($5050, _from$2, _to$3, _lv$4);
                    var _type$9 = Fm$SmartMotive$replace$($5051, _from$2, _to$3, _lv$4);
                    var $5052 = Fm$Term$ann$($5049, _term$8, _type$9);
                    var $5018 = $5052;
                    break;
                case 'Fm.Term.gol':
                    var $5053 = self.name;
                    var $5054 = self.dref;
                    var $5055 = self.verb;
                    var $5056 = _term$1;
                    var $5018 = $5056;
                    break;
                case 'Fm.Term.hol':
                    var $5057 = self.path;
                    var $5058 = _term$1;
                    var $5018 = $5058;
                    break;
                case 'Fm.Term.nat':
                    var $5059 = self.natx;
                    var $5060 = _term$1;
                    var $5018 = $5060;
                    break;
                case 'Fm.Term.chr':
                    var $5061 = self.chrx;
                    var $5062 = _term$1;
                    var $5018 = $5062;
                    break;
                case 'Fm.Term.str':
                    var $5063 = self.strx;
                    var $5064 = _term$1;
                    var $5018 = $5064;
                    break;
                case 'Fm.Term.cse':
                    var $5065 = self.path;
                    var $5066 = self.expr;
                    var $5067 = self.name;
                    var $5068 = self.with;
                    var $5069 = self.cses;
                    var $5070 = self.moti;
                    var $5071 = _term$1;
                    var $5018 = $5071;
                    break;
                case 'Fm.Term.ori':
                    var $5072 = self.orig;
                    var $5073 = self.expr;
                    var $5074 = Fm$SmartMotive$replace$($5073, _from$2, _to$3, _lv$4);
                    var $5018 = $5074;
                    break;
            };
            var $5016 = $5018;
        };
        return $5016;
    };
    const Fm$SmartMotive$replace = x0 => x1 => x2 => x3 => Fm$SmartMotive$replace$(x0, x1, x2, x3);

    function Fm$SmartMotive$make$(_name$1, _expr$2, _type$3, _moti$4, _lv$5, _defs$6) {
        var _vals$7 = Fm$SmartMotive$vals$(_expr$2, _type$3, _defs$6);
        var _nams$8 = Fm$SmartMotive$nams$(_name$1, _type$3, _defs$6);
        var _subs$9 = List$zip$(_nams$8, _vals$7);
        var _moti$10 = List$fold$(_subs$9, _moti$4, (_sub$10 => _moti$11 => {
            var self = _sub$10;
            switch (self._) {
                case 'Pair.new':
                    var $5077 = self.fst;
                    var $5078 = self.snd;
                    var $5079 = Fm$SmartMotive$replace$(_moti$11, $5078, Fm$Term$ref$($5077), _lv$5);
                    var $5076 = $5079;
                    break;
            };
            return $5076;
        }));
        var $5075 = _moti$10;
        return $5075;
    };
    const Fm$SmartMotive$make = x0 => x1 => x2 => x3 => x4 => x5 => Fm$SmartMotive$make$(x0, x1, x2, x3, x4, x5);

    function Fm$Term$desugar_cse$motive$(_wyth$1, _moti$2) {
        var self = _wyth$1;
        switch (self._) {
            case 'List.nil':
                var $5081 = _moti$2;
                var $5080 = $5081;
                break;
            case 'List.cons':
                var $5082 = self.head;
                var $5083 = self.tail;
                var self = $5082;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $5085 = self.file;
                        var $5086 = self.code;
                        var $5087 = self.name;
                        var $5088 = self.term;
                        var $5089 = self.type;
                        var $5090 = self.stat;
                        var $5091 = Fm$Term$all$(Bool$false, "", $5087, $5089, (_s$11 => _x$12 => {
                            var $5092 = Fm$Term$desugar_cse$motive$($5083, _moti$2);
                            return $5092;
                        }));
                        var $5084 = $5091;
                        break;
                };
                var $5080 = $5084;
                break;
        };
        return $5080;
    };
    const Fm$Term$desugar_cse$motive = x0 => x1 => Fm$Term$desugar_cse$motive$(x0, x1);

    function String$is_empty$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $5094 = Bool$true;
            var $5093 = $5094;
        } else {
            var $5095 = self.charCodeAt(0);
            var $5096 = self.slice(1);
            var $5097 = Bool$false;
            var $5093 = $5097;
        };
        return $5093;
    };
    const String$is_empty = x0 => String$is_empty$(x0);

    function Fm$Term$desugar_cse$argument$(_name$1, _wyth$2, _type$3, _body$4, _defs$5) {
        var self = Fm$Term$reduce$(_type$3, _defs$5);
        switch (self._) {
            case 'Fm.Term.var':
                var $5099 = self.name;
                var $5100 = self.indx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5102 = _body$4;
                        var $5101 = $5102;
                        break;
                    case 'List.cons':
                        var $5103 = self.head;
                        var $5104 = self.tail;
                        var self = $5103;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5106 = self.file;
                                var $5107 = self.code;
                                var $5108 = self.name;
                                var $5109 = self.term;
                                var $5110 = self.type;
                                var $5111 = self.stat;
                                var $5112 = Fm$Term$lam$($5108, (_x$16 => {
                                    var $5113 = Fm$Term$desugar_cse$argument$(_name$1, $5104, _type$3, _body$4, _defs$5);
                                    return $5113;
                                }));
                                var $5105 = $5112;
                                break;
                        };
                        var $5101 = $5105;
                        break;
                };
                var $5098 = $5101;
                break;
            case 'Fm.Term.ref':
                var $5114 = self.name;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5116 = _body$4;
                        var $5115 = $5116;
                        break;
                    case 'List.cons':
                        var $5117 = self.head;
                        var $5118 = self.tail;
                        var self = $5117;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5120 = self.file;
                                var $5121 = self.code;
                                var $5122 = self.name;
                                var $5123 = self.term;
                                var $5124 = self.type;
                                var $5125 = self.stat;
                                var $5126 = Fm$Term$lam$($5122, (_x$15 => {
                                    var $5127 = Fm$Term$desugar_cse$argument$(_name$1, $5118, _type$3, _body$4, _defs$5);
                                    return $5127;
                                }));
                                var $5119 = $5126;
                                break;
                        };
                        var $5115 = $5119;
                        break;
                };
                var $5098 = $5115;
                break;
            case 'Fm.Term.typ':
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5129 = _body$4;
                        var $5128 = $5129;
                        break;
                    case 'List.cons':
                        var $5130 = self.head;
                        var $5131 = self.tail;
                        var self = $5130;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5133 = self.file;
                                var $5134 = self.code;
                                var $5135 = self.name;
                                var $5136 = self.term;
                                var $5137 = self.type;
                                var $5138 = self.stat;
                                var $5139 = Fm$Term$lam$($5135, (_x$14 => {
                                    var $5140 = Fm$Term$desugar_cse$argument$(_name$1, $5131, _type$3, _body$4, _defs$5);
                                    return $5140;
                                }));
                                var $5132 = $5139;
                                break;
                        };
                        var $5128 = $5132;
                        break;
                };
                var $5098 = $5128;
                break;
            case 'Fm.Term.all':
                var $5141 = self.eras;
                var $5142 = self.self;
                var $5143 = self.name;
                var $5144 = self.xtyp;
                var $5145 = self.body;
                var $5146 = Fm$Term$lam$((() => {
                    var self = String$is_empty$($5143);
                    if (self) {
                        var $5147 = _name$1;
                        return $5147;
                    } else {
                        var $5148 = String$flatten$(List$cons$(_name$1, List$cons$(".", List$cons$($5143, List$nil))));
                        return $5148;
                    };
                })(), (_x$11 => {
                    var $5149 = Fm$Term$desugar_cse$argument$(_name$1, _wyth$2, $5145(Fm$Term$var$($5142, 0n))(Fm$Term$var$($5143, 0n)), _body$4, _defs$5);
                    return $5149;
                }));
                var $5098 = $5146;
                break;
            case 'Fm.Term.lam':
                var $5150 = self.name;
                var $5151 = self.body;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5153 = _body$4;
                        var $5152 = $5153;
                        break;
                    case 'List.cons':
                        var $5154 = self.head;
                        var $5155 = self.tail;
                        var self = $5154;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5157 = self.file;
                                var $5158 = self.code;
                                var $5159 = self.name;
                                var $5160 = self.term;
                                var $5161 = self.type;
                                var $5162 = self.stat;
                                var $5163 = Fm$Term$lam$($5159, (_x$16 => {
                                    var $5164 = Fm$Term$desugar_cse$argument$(_name$1, $5155, _type$3, _body$4, _defs$5);
                                    return $5164;
                                }));
                                var $5156 = $5163;
                                break;
                        };
                        var $5152 = $5156;
                        break;
                };
                var $5098 = $5152;
                break;
            case 'Fm.Term.app':
                var $5165 = self.func;
                var $5166 = self.argm;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5168 = _body$4;
                        var $5167 = $5168;
                        break;
                    case 'List.cons':
                        var $5169 = self.head;
                        var $5170 = self.tail;
                        var self = $5169;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5172 = self.file;
                                var $5173 = self.code;
                                var $5174 = self.name;
                                var $5175 = self.term;
                                var $5176 = self.type;
                                var $5177 = self.stat;
                                var $5178 = Fm$Term$lam$($5174, (_x$16 => {
                                    var $5179 = Fm$Term$desugar_cse$argument$(_name$1, $5170, _type$3, _body$4, _defs$5);
                                    return $5179;
                                }));
                                var $5171 = $5178;
                                break;
                        };
                        var $5167 = $5171;
                        break;
                };
                var $5098 = $5167;
                break;
            case 'Fm.Term.let':
                var $5180 = self.name;
                var $5181 = self.expr;
                var $5182 = self.body;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5184 = _body$4;
                        var $5183 = $5184;
                        break;
                    case 'List.cons':
                        var $5185 = self.head;
                        var $5186 = self.tail;
                        var self = $5185;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5188 = self.file;
                                var $5189 = self.code;
                                var $5190 = self.name;
                                var $5191 = self.term;
                                var $5192 = self.type;
                                var $5193 = self.stat;
                                var $5194 = Fm$Term$lam$($5190, (_x$17 => {
                                    var $5195 = Fm$Term$desugar_cse$argument$(_name$1, $5186, _type$3, _body$4, _defs$5);
                                    return $5195;
                                }));
                                var $5187 = $5194;
                                break;
                        };
                        var $5183 = $5187;
                        break;
                };
                var $5098 = $5183;
                break;
            case 'Fm.Term.def':
                var $5196 = self.name;
                var $5197 = self.expr;
                var $5198 = self.body;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5200 = _body$4;
                        var $5199 = $5200;
                        break;
                    case 'List.cons':
                        var $5201 = self.head;
                        var $5202 = self.tail;
                        var self = $5201;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5204 = self.file;
                                var $5205 = self.code;
                                var $5206 = self.name;
                                var $5207 = self.term;
                                var $5208 = self.type;
                                var $5209 = self.stat;
                                var $5210 = Fm$Term$lam$($5206, (_x$17 => {
                                    var $5211 = Fm$Term$desugar_cse$argument$(_name$1, $5202, _type$3, _body$4, _defs$5);
                                    return $5211;
                                }));
                                var $5203 = $5210;
                                break;
                        };
                        var $5199 = $5203;
                        break;
                };
                var $5098 = $5199;
                break;
            case 'Fm.Term.ann':
                var $5212 = self.done;
                var $5213 = self.term;
                var $5214 = self.type;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5216 = _body$4;
                        var $5215 = $5216;
                        break;
                    case 'List.cons':
                        var $5217 = self.head;
                        var $5218 = self.tail;
                        var self = $5217;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5220 = self.file;
                                var $5221 = self.code;
                                var $5222 = self.name;
                                var $5223 = self.term;
                                var $5224 = self.type;
                                var $5225 = self.stat;
                                var $5226 = Fm$Term$lam$($5222, (_x$17 => {
                                    var $5227 = Fm$Term$desugar_cse$argument$(_name$1, $5218, _type$3, _body$4, _defs$5);
                                    return $5227;
                                }));
                                var $5219 = $5226;
                                break;
                        };
                        var $5215 = $5219;
                        break;
                };
                var $5098 = $5215;
                break;
            case 'Fm.Term.gol':
                var $5228 = self.name;
                var $5229 = self.dref;
                var $5230 = self.verb;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5232 = _body$4;
                        var $5231 = $5232;
                        break;
                    case 'List.cons':
                        var $5233 = self.head;
                        var $5234 = self.tail;
                        var self = $5233;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5236 = self.file;
                                var $5237 = self.code;
                                var $5238 = self.name;
                                var $5239 = self.term;
                                var $5240 = self.type;
                                var $5241 = self.stat;
                                var $5242 = Fm$Term$lam$($5238, (_x$17 => {
                                    var $5243 = Fm$Term$desugar_cse$argument$(_name$1, $5234, _type$3, _body$4, _defs$5);
                                    return $5243;
                                }));
                                var $5235 = $5242;
                                break;
                        };
                        var $5231 = $5235;
                        break;
                };
                var $5098 = $5231;
                break;
            case 'Fm.Term.hol':
                var $5244 = self.path;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5246 = _body$4;
                        var $5245 = $5246;
                        break;
                    case 'List.cons':
                        var $5247 = self.head;
                        var $5248 = self.tail;
                        var self = $5247;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5250 = self.file;
                                var $5251 = self.code;
                                var $5252 = self.name;
                                var $5253 = self.term;
                                var $5254 = self.type;
                                var $5255 = self.stat;
                                var $5256 = Fm$Term$lam$($5252, (_x$15 => {
                                    var $5257 = Fm$Term$desugar_cse$argument$(_name$1, $5248, _type$3, _body$4, _defs$5);
                                    return $5257;
                                }));
                                var $5249 = $5256;
                                break;
                        };
                        var $5245 = $5249;
                        break;
                };
                var $5098 = $5245;
                break;
            case 'Fm.Term.nat':
                var $5258 = self.natx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5260 = _body$4;
                        var $5259 = $5260;
                        break;
                    case 'List.cons':
                        var $5261 = self.head;
                        var $5262 = self.tail;
                        var self = $5261;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5264 = self.file;
                                var $5265 = self.code;
                                var $5266 = self.name;
                                var $5267 = self.term;
                                var $5268 = self.type;
                                var $5269 = self.stat;
                                var $5270 = Fm$Term$lam$($5266, (_x$15 => {
                                    var $5271 = Fm$Term$desugar_cse$argument$(_name$1, $5262, _type$3, _body$4, _defs$5);
                                    return $5271;
                                }));
                                var $5263 = $5270;
                                break;
                        };
                        var $5259 = $5263;
                        break;
                };
                var $5098 = $5259;
                break;
            case 'Fm.Term.chr':
                var $5272 = self.chrx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5274 = _body$4;
                        var $5273 = $5274;
                        break;
                    case 'List.cons':
                        var $5275 = self.head;
                        var $5276 = self.tail;
                        var self = $5275;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5278 = self.file;
                                var $5279 = self.code;
                                var $5280 = self.name;
                                var $5281 = self.term;
                                var $5282 = self.type;
                                var $5283 = self.stat;
                                var $5284 = Fm$Term$lam$($5280, (_x$15 => {
                                    var $5285 = Fm$Term$desugar_cse$argument$(_name$1, $5276, _type$3, _body$4, _defs$5);
                                    return $5285;
                                }));
                                var $5277 = $5284;
                                break;
                        };
                        var $5273 = $5277;
                        break;
                };
                var $5098 = $5273;
                break;
            case 'Fm.Term.str':
                var $5286 = self.strx;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5288 = _body$4;
                        var $5287 = $5288;
                        break;
                    case 'List.cons':
                        var $5289 = self.head;
                        var $5290 = self.tail;
                        var self = $5289;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5292 = self.file;
                                var $5293 = self.code;
                                var $5294 = self.name;
                                var $5295 = self.term;
                                var $5296 = self.type;
                                var $5297 = self.stat;
                                var $5298 = Fm$Term$lam$($5294, (_x$15 => {
                                    var $5299 = Fm$Term$desugar_cse$argument$(_name$1, $5290, _type$3, _body$4, _defs$5);
                                    return $5299;
                                }));
                                var $5291 = $5298;
                                break;
                        };
                        var $5287 = $5291;
                        break;
                };
                var $5098 = $5287;
                break;
            case 'Fm.Term.cse':
                var $5300 = self.path;
                var $5301 = self.expr;
                var $5302 = self.name;
                var $5303 = self.with;
                var $5304 = self.cses;
                var $5305 = self.moti;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5307 = _body$4;
                        var $5306 = $5307;
                        break;
                    case 'List.cons':
                        var $5308 = self.head;
                        var $5309 = self.tail;
                        var self = $5308;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5311 = self.file;
                                var $5312 = self.code;
                                var $5313 = self.name;
                                var $5314 = self.term;
                                var $5315 = self.type;
                                var $5316 = self.stat;
                                var $5317 = Fm$Term$lam$($5313, (_x$20 => {
                                    var $5318 = Fm$Term$desugar_cse$argument$(_name$1, $5309, _type$3, _body$4, _defs$5);
                                    return $5318;
                                }));
                                var $5310 = $5317;
                                break;
                        };
                        var $5306 = $5310;
                        break;
                };
                var $5098 = $5306;
                break;
            case 'Fm.Term.ori':
                var $5319 = self.orig;
                var $5320 = self.expr;
                var self = _wyth$2;
                switch (self._) {
                    case 'List.nil':
                        var $5322 = _body$4;
                        var $5321 = $5322;
                        break;
                    case 'List.cons':
                        var $5323 = self.head;
                        var $5324 = self.tail;
                        var self = $5323;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $5326 = self.file;
                                var $5327 = self.code;
                                var $5328 = self.name;
                                var $5329 = self.term;
                                var $5330 = self.type;
                                var $5331 = self.stat;
                                var $5332 = Fm$Term$lam$($5328, (_x$16 => {
                                    var $5333 = Fm$Term$desugar_cse$argument$(_name$1, $5324, _type$3, _body$4, _defs$5);
                                    return $5333;
                                }));
                                var $5325 = $5332;
                                break;
                        };
                        var $5321 = $5325;
                        break;
                };
                var $5098 = $5321;
                break;
        };
        return $5098;
    };
    const Fm$Term$desugar_cse$argument = x0 => x1 => x2 => x3 => x4 => Fm$Term$desugar_cse$argument$(x0, x1, x2, x3, x4);

    function Maybe$or$(_a$2, _b$3) {
        var self = _a$2;
        switch (self._) {
            case 'Maybe.none':
                var $5335 = _b$3;
                var $5334 = $5335;
                break;
            case 'Maybe.some':
                var $5336 = self.value;
                var $5337 = Maybe$some$($5336);
                var $5334 = $5337;
                break;
        };
        return $5334;
    };
    const Maybe$or = x0 => x1 => Maybe$or$(x0, x1);

    function Fm$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) {
        var Fm$Term$desugar_cse$cases$ = (_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7) => ({
            ctr: 'TCO',
            arg: [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7]
        });
        var Fm$Term$desugar_cse$cases = _expr$1 => _name$2 => _wyth$3 => _cses$4 => _type$5 => _defs$6 => _ctxt$7 => Fm$Term$desugar_cse$cases$(_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7);
        var arg = [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7];
        while (true) {
            let [_expr$1, _name$2, _wyth$3, _cses$4, _type$5, _defs$6, _ctxt$7] = arg;
            var R = (() => {
                var self = Fm$Term$reduce$(_type$5, _defs$6);
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5338 = self.name;
                        var $5339 = self.indx;
                        var _expr$10 = (() => {
                            var $5342 = _expr$1;
                            var $5343 = _wyth$3;
                            let _expr$11 = $5342;
                            let _defn$10;
                            while ($5343._ === 'List.cons') {
                                _defn$10 = $5343.head;
                                var $5342 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5344 = self.file;
                                            var $5345 = self.code;
                                            var $5346 = self.name;
                                            var $5347 = self.term;
                                            var $5348 = self.type;
                                            var $5349 = self.stat;
                                            var $5350 = $5347;
                                            return $5350;
                                    };
                                })());
                                _expr$11 = $5342;
                                $5343 = $5343.tail;
                            }
                            return _expr$11;
                        })();
                        var $5340 = _expr$10;
                        return $5340;
                    case 'Fm.Term.ref':
                        var $5351 = self.name;
                        var _expr$9 = (() => {
                            var $5354 = _expr$1;
                            var $5355 = _wyth$3;
                            let _expr$10 = $5354;
                            let _defn$9;
                            while ($5355._ === 'List.cons') {
                                _defn$9 = $5355.head;
                                var $5354 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5356 = self.file;
                                            var $5357 = self.code;
                                            var $5358 = self.name;
                                            var $5359 = self.term;
                                            var $5360 = self.type;
                                            var $5361 = self.stat;
                                            var $5362 = $5359;
                                            return $5362;
                                    };
                                })());
                                _expr$10 = $5354;
                                $5355 = $5355.tail;
                            }
                            return _expr$10;
                        })();
                        var $5352 = _expr$9;
                        return $5352;
                    case 'Fm.Term.typ':
                        var _expr$8 = (() => {
                            var $5365 = _expr$1;
                            var $5366 = _wyth$3;
                            let _expr$9 = $5365;
                            let _defn$8;
                            while ($5366._ === 'List.cons') {
                                _defn$8 = $5366.head;
                                var $5365 = Fm$Term$app$(_expr$9, (() => {
                                    var self = _defn$8;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5367 = self.file;
                                            var $5368 = self.code;
                                            var $5369 = self.name;
                                            var $5370 = self.term;
                                            var $5371 = self.type;
                                            var $5372 = self.stat;
                                            var $5373 = $5370;
                                            return $5373;
                                    };
                                })());
                                _expr$9 = $5365;
                                $5366 = $5366.tail;
                            }
                            return _expr$9;
                        })();
                        var $5363 = _expr$8;
                        return $5363;
                    case 'Fm.Term.all':
                        var $5374 = self.eras;
                        var $5375 = self.self;
                        var $5376 = self.name;
                        var $5377 = self.xtyp;
                        var $5378 = self.body;
                        var _got$13 = Maybe$or$(Fm$get$($5376, _cses$4), Fm$get$("_", _cses$4));
                        var self = _got$13;
                        switch (self._) {
                            case 'Maybe.none':
                                var _expr$14 = (() => {
                                    var $5382 = _expr$1;
                                    var $5383 = _wyth$3;
                                    let _expr$15 = $5382;
                                    let _defn$14;
                                    while ($5383._ === 'List.cons') {
                                        _defn$14 = $5383.head;
                                        var self = _defn$14;
                                        switch (self._) {
                                            case 'Fm.Def.new':
                                                var $5384 = self.file;
                                                var $5385 = self.code;
                                                var $5386 = self.name;
                                                var $5387 = self.term;
                                                var $5388 = self.type;
                                                var $5389 = self.stat;
                                                var $5390 = Fm$Term$app$(_expr$15, $5387);
                                                var $5382 = $5390;
                                                break;
                                        };
                                        _expr$15 = $5382;
                                        $5383 = $5383.tail;
                                    }
                                    return _expr$15;
                                })();
                                var $5380 = _expr$14;
                                var $5379 = $5380;
                                break;
                            case 'Maybe.some':
                                var $5391 = self.value;
                                var _argm$15 = Fm$Term$desugar_cse$argument$(_name$2, _wyth$3, $5377, $5391, _defs$6);
                                var _expr$16 = Fm$Term$app$(_expr$1, _argm$15);
                                var _type$17 = $5378(Fm$Term$var$($5375, 0n))(Fm$Term$var$($5376, 0n));
                                var $5392 = Fm$Term$desugar_cse$cases$(_expr$16, _name$2, _wyth$3, _cses$4, _type$17, _defs$6, _ctxt$7);
                                var $5379 = $5392;
                                break;
                        };
                        return $5379;
                    case 'Fm.Term.lam':
                        var $5393 = self.name;
                        var $5394 = self.body;
                        var _expr$10 = (() => {
                            var $5397 = _expr$1;
                            var $5398 = _wyth$3;
                            let _expr$11 = $5397;
                            let _defn$10;
                            while ($5398._ === 'List.cons') {
                                _defn$10 = $5398.head;
                                var $5397 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5399 = self.file;
                                            var $5400 = self.code;
                                            var $5401 = self.name;
                                            var $5402 = self.term;
                                            var $5403 = self.type;
                                            var $5404 = self.stat;
                                            var $5405 = $5402;
                                            return $5405;
                                    };
                                })());
                                _expr$11 = $5397;
                                $5398 = $5398.tail;
                            }
                            return _expr$11;
                        })();
                        var $5395 = _expr$10;
                        return $5395;
                    case 'Fm.Term.app':
                        var $5406 = self.func;
                        var $5407 = self.argm;
                        var _expr$10 = (() => {
                            var $5410 = _expr$1;
                            var $5411 = _wyth$3;
                            let _expr$11 = $5410;
                            let _defn$10;
                            while ($5411._ === 'List.cons') {
                                _defn$10 = $5411.head;
                                var $5410 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5412 = self.file;
                                            var $5413 = self.code;
                                            var $5414 = self.name;
                                            var $5415 = self.term;
                                            var $5416 = self.type;
                                            var $5417 = self.stat;
                                            var $5418 = $5415;
                                            return $5418;
                                    };
                                })());
                                _expr$11 = $5410;
                                $5411 = $5411.tail;
                            }
                            return _expr$11;
                        })();
                        var $5408 = _expr$10;
                        return $5408;
                    case 'Fm.Term.let':
                        var $5419 = self.name;
                        var $5420 = self.expr;
                        var $5421 = self.body;
                        var _expr$11 = (() => {
                            var $5424 = _expr$1;
                            var $5425 = _wyth$3;
                            let _expr$12 = $5424;
                            let _defn$11;
                            while ($5425._ === 'List.cons') {
                                _defn$11 = $5425.head;
                                var $5424 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5426 = self.file;
                                            var $5427 = self.code;
                                            var $5428 = self.name;
                                            var $5429 = self.term;
                                            var $5430 = self.type;
                                            var $5431 = self.stat;
                                            var $5432 = $5429;
                                            return $5432;
                                    };
                                })());
                                _expr$12 = $5424;
                                $5425 = $5425.tail;
                            }
                            return _expr$12;
                        })();
                        var $5422 = _expr$11;
                        return $5422;
                    case 'Fm.Term.def':
                        var $5433 = self.name;
                        var $5434 = self.expr;
                        var $5435 = self.body;
                        var _expr$11 = (() => {
                            var $5438 = _expr$1;
                            var $5439 = _wyth$3;
                            let _expr$12 = $5438;
                            let _defn$11;
                            while ($5439._ === 'List.cons') {
                                _defn$11 = $5439.head;
                                var $5438 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5440 = self.file;
                                            var $5441 = self.code;
                                            var $5442 = self.name;
                                            var $5443 = self.term;
                                            var $5444 = self.type;
                                            var $5445 = self.stat;
                                            var $5446 = $5443;
                                            return $5446;
                                    };
                                })());
                                _expr$12 = $5438;
                                $5439 = $5439.tail;
                            }
                            return _expr$12;
                        })();
                        var $5436 = _expr$11;
                        return $5436;
                    case 'Fm.Term.ann':
                        var $5447 = self.done;
                        var $5448 = self.term;
                        var $5449 = self.type;
                        var _expr$11 = (() => {
                            var $5452 = _expr$1;
                            var $5453 = _wyth$3;
                            let _expr$12 = $5452;
                            let _defn$11;
                            while ($5453._ === 'List.cons') {
                                _defn$11 = $5453.head;
                                var $5452 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5454 = self.file;
                                            var $5455 = self.code;
                                            var $5456 = self.name;
                                            var $5457 = self.term;
                                            var $5458 = self.type;
                                            var $5459 = self.stat;
                                            var $5460 = $5457;
                                            return $5460;
                                    };
                                })());
                                _expr$12 = $5452;
                                $5453 = $5453.tail;
                            }
                            return _expr$12;
                        })();
                        var $5450 = _expr$11;
                        return $5450;
                    case 'Fm.Term.gol':
                        var $5461 = self.name;
                        var $5462 = self.dref;
                        var $5463 = self.verb;
                        var _expr$11 = (() => {
                            var $5466 = _expr$1;
                            var $5467 = _wyth$3;
                            let _expr$12 = $5466;
                            let _defn$11;
                            while ($5467._ === 'List.cons') {
                                _defn$11 = $5467.head;
                                var $5466 = Fm$Term$app$(_expr$12, (() => {
                                    var self = _defn$11;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5468 = self.file;
                                            var $5469 = self.code;
                                            var $5470 = self.name;
                                            var $5471 = self.term;
                                            var $5472 = self.type;
                                            var $5473 = self.stat;
                                            var $5474 = $5471;
                                            return $5474;
                                    };
                                })());
                                _expr$12 = $5466;
                                $5467 = $5467.tail;
                            }
                            return _expr$12;
                        })();
                        var $5464 = _expr$11;
                        return $5464;
                    case 'Fm.Term.hol':
                        var $5475 = self.path;
                        var _expr$9 = (() => {
                            var $5478 = _expr$1;
                            var $5479 = _wyth$3;
                            let _expr$10 = $5478;
                            let _defn$9;
                            while ($5479._ === 'List.cons') {
                                _defn$9 = $5479.head;
                                var $5478 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5480 = self.file;
                                            var $5481 = self.code;
                                            var $5482 = self.name;
                                            var $5483 = self.term;
                                            var $5484 = self.type;
                                            var $5485 = self.stat;
                                            var $5486 = $5483;
                                            return $5486;
                                    };
                                })());
                                _expr$10 = $5478;
                                $5479 = $5479.tail;
                            }
                            return _expr$10;
                        })();
                        var $5476 = _expr$9;
                        return $5476;
                    case 'Fm.Term.nat':
                        var $5487 = self.natx;
                        var _expr$9 = (() => {
                            var $5490 = _expr$1;
                            var $5491 = _wyth$3;
                            let _expr$10 = $5490;
                            let _defn$9;
                            while ($5491._ === 'List.cons') {
                                _defn$9 = $5491.head;
                                var $5490 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5492 = self.file;
                                            var $5493 = self.code;
                                            var $5494 = self.name;
                                            var $5495 = self.term;
                                            var $5496 = self.type;
                                            var $5497 = self.stat;
                                            var $5498 = $5495;
                                            return $5498;
                                    };
                                })());
                                _expr$10 = $5490;
                                $5491 = $5491.tail;
                            }
                            return _expr$10;
                        })();
                        var $5488 = _expr$9;
                        return $5488;
                    case 'Fm.Term.chr':
                        var $5499 = self.chrx;
                        var _expr$9 = (() => {
                            var $5502 = _expr$1;
                            var $5503 = _wyth$3;
                            let _expr$10 = $5502;
                            let _defn$9;
                            while ($5503._ === 'List.cons') {
                                _defn$9 = $5503.head;
                                var $5502 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5504 = self.file;
                                            var $5505 = self.code;
                                            var $5506 = self.name;
                                            var $5507 = self.term;
                                            var $5508 = self.type;
                                            var $5509 = self.stat;
                                            var $5510 = $5507;
                                            return $5510;
                                    };
                                })());
                                _expr$10 = $5502;
                                $5503 = $5503.tail;
                            }
                            return _expr$10;
                        })();
                        var $5500 = _expr$9;
                        return $5500;
                    case 'Fm.Term.str':
                        var $5511 = self.strx;
                        var _expr$9 = (() => {
                            var $5514 = _expr$1;
                            var $5515 = _wyth$3;
                            let _expr$10 = $5514;
                            let _defn$9;
                            while ($5515._ === 'List.cons') {
                                _defn$9 = $5515.head;
                                var $5514 = Fm$Term$app$(_expr$10, (() => {
                                    var self = _defn$9;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5516 = self.file;
                                            var $5517 = self.code;
                                            var $5518 = self.name;
                                            var $5519 = self.term;
                                            var $5520 = self.type;
                                            var $5521 = self.stat;
                                            var $5522 = $5519;
                                            return $5522;
                                    };
                                })());
                                _expr$10 = $5514;
                                $5515 = $5515.tail;
                            }
                            return _expr$10;
                        })();
                        var $5512 = _expr$9;
                        return $5512;
                    case 'Fm.Term.cse':
                        var $5523 = self.path;
                        var $5524 = self.expr;
                        var $5525 = self.name;
                        var $5526 = self.with;
                        var $5527 = self.cses;
                        var $5528 = self.moti;
                        var _expr$14 = (() => {
                            var $5531 = _expr$1;
                            var $5532 = _wyth$3;
                            let _expr$15 = $5531;
                            let _defn$14;
                            while ($5532._ === 'List.cons') {
                                _defn$14 = $5532.head;
                                var $5531 = Fm$Term$app$(_expr$15, (() => {
                                    var self = _defn$14;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5533 = self.file;
                                            var $5534 = self.code;
                                            var $5535 = self.name;
                                            var $5536 = self.term;
                                            var $5537 = self.type;
                                            var $5538 = self.stat;
                                            var $5539 = $5536;
                                            return $5539;
                                    };
                                })());
                                _expr$15 = $5531;
                                $5532 = $5532.tail;
                            }
                            return _expr$15;
                        })();
                        var $5529 = _expr$14;
                        return $5529;
                    case 'Fm.Term.ori':
                        var $5540 = self.orig;
                        var $5541 = self.expr;
                        var _expr$10 = (() => {
                            var $5544 = _expr$1;
                            var $5545 = _wyth$3;
                            let _expr$11 = $5544;
                            let _defn$10;
                            while ($5545._ === 'List.cons') {
                                _defn$10 = $5545.head;
                                var $5544 = Fm$Term$app$(_expr$11, (() => {
                                    var self = _defn$10;
                                    switch (self._) {
                                        case 'Fm.Def.new':
                                            var $5546 = self.file;
                                            var $5547 = self.code;
                                            var $5548 = self.name;
                                            var $5549 = self.term;
                                            var $5550 = self.type;
                                            var $5551 = self.stat;
                                            var $5552 = $5549;
                                            return $5552;
                                    };
                                })());
                                _expr$11 = $5544;
                                $5545 = $5545.tail;
                            }
                            return _expr$11;
                        })();
                        var $5542 = _expr$10;
                        return $5542;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Term$desugar_cse$cases = x0 => x1 => x2 => x3 => x4 => x5 => x6 => Fm$Term$desugar_cse$cases$(x0, x1, x2, x3, x4, x5, x6);

    function Fm$Term$desugar_cse$(_expr$1, _name$2, _with$3, _cses$4, _moti$5, _type$6, _defs$7, _ctxt$8) {
        var self = Fm$Term$reduce$(_type$6, _defs$7);
        switch (self._) {
            case 'Fm.Term.var':
                var $5554 = self.name;
                var $5555 = self.indx;
                var $5556 = Maybe$none;
                var $5553 = $5556;
                break;
            case 'Fm.Term.ref':
                var $5557 = self.name;
                var $5558 = Maybe$none;
                var $5553 = $5558;
                break;
            case 'Fm.Term.typ':
                var $5559 = Maybe$none;
                var $5553 = $5559;
                break;
            case 'Fm.Term.all':
                var $5560 = self.eras;
                var $5561 = self.self;
                var $5562 = self.name;
                var $5563 = self.xtyp;
                var $5564 = self.body;
                var _moti$14 = Fm$Term$desugar_cse$motive$(_with$3, _moti$5);
                var _argm$15 = Fm$Term$desugar_cse$argument$(_name$2, List$nil, $5563, _moti$14, _defs$7);
                var _expr$16 = Fm$Term$app$(_expr$1, _argm$15);
                var _type$17 = $5564(Fm$Term$var$($5561, 0n))(Fm$Term$var$($5562, 0n));
                var $5565 = Maybe$some$(Fm$Term$desugar_cse$cases$(_expr$16, _name$2, _with$3, _cses$4, _type$17, _defs$7, _ctxt$8));
                var $5553 = $5565;
                break;
            case 'Fm.Term.lam':
                var $5566 = self.name;
                var $5567 = self.body;
                var $5568 = Maybe$none;
                var $5553 = $5568;
                break;
            case 'Fm.Term.app':
                var $5569 = self.func;
                var $5570 = self.argm;
                var $5571 = Maybe$none;
                var $5553 = $5571;
                break;
            case 'Fm.Term.let':
                var $5572 = self.name;
                var $5573 = self.expr;
                var $5574 = self.body;
                var $5575 = Maybe$none;
                var $5553 = $5575;
                break;
            case 'Fm.Term.def':
                var $5576 = self.name;
                var $5577 = self.expr;
                var $5578 = self.body;
                var $5579 = Maybe$none;
                var $5553 = $5579;
                break;
            case 'Fm.Term.ann':
                var $5580 = self.done;
                var $5581 = self.term;
                var $5582 = self.type;
                var $5583 = Maybe$none;
                var $5553 = $5583;
                break;
            case 'Fm.Term.gol':
                var $5584 = self.name;
                var $5585 = self.dref;
                var $5586 = self.verb;
                var $5587 = Maybe$none;
                var $5553 = $5587;
                break;
            case 'Fm.Term.hol':
                var $5588 = self.path;
                var $5589 = Maybe$none;
                var $5553 = $5589;
                break;
            case 'Fm.Term.nat':
                var $5590 = self.natx;
                var $5591 = Maybe$none;
                var $5553 = $5591;
                break;
            case 'Fm.Term.chr':
                var $5592 = self.chrx;
                var $5593 = Maybe$none;
                var $5553 = $5593;
                break;
            case 'Fm.Term.str':
                var $5594 = self.strx;
                var $5595 = Maybe$none;
                var $5553 = $5595;
                break;
            case 'Fm.Term.cse':
                var $5596 = self.path;
                var $5597 = self.expr;
                var $5598 = self.name;
                var $5599 = self.with;
                var $5600 = self.cses;
                var $5601 = self.moti;
                var $5602 = Maybe$none;
                var $5553 = $5602;
                break;
            case 'Fm.Term.ori':
                var $5603 = self.orig;
                var $5604 = self.expr;
                var $5605 = Maybe$none;
                var $5553 = $5605;
                break;
        };
        return $5553;
    };
    const Fm$Term$desugar_cse = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Fm$Term$desugar_cse$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Fm$Error$cant_infer$(_origin$1, _term$2, _context$3) {
        var $5606 = ({
            _: 'Fm.Error.cant_infer',
            'origin': _origin$1,
            'term': _term$2,
            'context': _context$3
        });
        return $5606;
    };
    const Fm$Error$cant_infer = x0 => x1 => x2 => Fm$Error$cant_infer$(x0, x1, x2);

    function Set$has$(_bits$1, _set$2) {
        var self = Map$get$(_bits$1, _set$2);
        switch (self._) {
            case 'Maybe.none':
                var $5608 = Bool$false;
                var $5607 = $5608;
                break;
            case 'Maybe.some':
                var $5609 = self.value;
                var $5610 = Bool$true;
                var $5607 = $5610;
                break;
        };
        return $5607;
    };
    const Set$has = x0 => x1 => Set$has$(x0, x1);
    const Bool$or = a0 => a1 => (a0 || a1);

    function Fm$Term$has_holes$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $5612 = self.name;
                var $5613 = self.indx;
                var $5614 = Bool$false;
                var $5611 = $5614;
                break;
            case 'Fm.Term.ref':
                var $5615 = self.name;
                var $5616 = Bool$false;
                var $5611 = $5616;
                break;
            case 'Fm.Term.typ':
                var $5617 = Bool$false;
                var $5611 = $5617;
                break;
            case 'Fm.Term.all':
                var $5618 = self.eras;
                var $5619 = self.self;
                var $5620 = self.name;
                var $5621 = self.xtyp;
                var $5622 = self.body;
                var $5623 = (Fm$Term$has_holes$($5621) || Fm$Term$has_holes$($5622(Fm$Term$typ)(Fm$Term$typ)));
                var $5611 = $5623;
                break;
            case 'Fm.Term.lam':
                var $5624 = self.name;
                var $5625 = self.body;
                var $5626 = Fm$Term$has_holes$($5625(Fm$Term$typ));
                var $5611 = $5626;
                break;
            case 'Fm.Term.app':
                var $5627 = self.func;
                var $5628 = self.argm;
                var $5629 = (Fm$Term$has_holes$($5627) || Fm$Term$has_holes$($5628));
                var $5611 = $5629;
                break;
            case 'Fm.Term.let':
                var $5630 = self.name;
                var $5631 = self.expr;
                var $5632 = self.body;
                var $5633 = (Fm$Term$has_holes$($5631) || Fm$Term$has_holes$($5632(Fm$Term$typ)));
                var $5611 = $5633;
                break;
            case 'Fm.Term.def':
                var $5634 = self.name;
                var $5635 = self.expr;
                var $5636 = self.body;
                var $5637 = (Fm$Term$has_holes$($5635) || Fm$Term$has_holes$($5636(Fm$Term$typ)));
                var $5611 = $5637;
                break;
            case 'Fm.Term.ann':
                var $5638 = self.done;
                var $5639 = self.term;
                var $5640 = self.type;
                var $5641 = (Fm$Term$has_holes$($5639) || Fm$Term$has_holes$($5640));
                var $5611 = $5641;
                break;
            case 'Fm.Term.gol':
                var $5642 = self.name;
                var $5643 = self.dref;
                var $5644 = self.verb;
                var $5645 = Bool$false;
                var $5611 = $5645;
                break;
            case 'Fm.Term.hol':
                var $5646 = self.path;
                var $5647 = Bool$true;
                var $5611 = $5647;
                break;
            case 'Fm.Term.nat':
                var $5648 = self.natx;
                var $5649 = Bool$false;
                var $5611 = $5649;
                break;
            case 'Fm.Term.chr':
                var $5650 = self.chrx;
                var $5651 = Bool$false;
                var $5611 = $5651;
                break;
            case 'Fm.Term.str':
                var $5652 = self.strx;
                var $5653 = Bool$false;
                var $5611 = $5653;
                break;
            case 'Fm.Term.cse':
                var $5654 = self.path;
                var $5655 = self.expr;
                var $5656 = self.name;
                var $5657 = self.with;
                var $5658 = self.cses;
                var $5659 = self.moti;
                var $5660 = Bool$false;
                var $5611 = $5660;
                break;
            case 'Fm.Term.ori':
                var $5661 = self.orig;
                var $5662 = self.expr;
                var $5663 = Fm$Term$has_holes$($5662);
                var $5611 = $5663;
                break;
        };
        return $5611;
    };
    const Fm$Term$has_holes = x0 => Fm$Term$has_holes$(x0);

    function Fm$Term$equal$hole$(_path$1, _term$2) {
        var self = _term$2;
        switch (self._) {
            case 'Fm.Term.var':
                var $5665 = self.name;
                var $5666 = self.indx;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5668 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5667 = $5668;
                } else {
                    var $5669 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5667 = $5669;
                };
                var $5664 = $5667;
                break;
            case 'Fm.Term.ref':
                var $5670 = self.name;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5672 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5671 = $5672;
                } else {
                    var $5673 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5671 = $5673;
                };
                var $5664 = $5671;
                break;
            case 'Fm.Term.typ':
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5675 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5674 = $5675;
                } else {
                    var $5676 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5674 = $5676;
                };
                var $5664 = $5674;
                break;
            case 'Fm.Term.all':
                var $5677 = self.eras;
                var $5678 = self.self;
                var $5679 = self.name;
                var $5680 = self.xtyp;
                var $5681 = self.body;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5683 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5682 = $5683;
                } else {
                    var $5684 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5682 = $5684;
                };
                var $5664 = $5682;
                break;
            case 'Fm.Term.lam':
                var $5685 = self.name;
                var $5686 = self.body;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5688 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5687 = $5688;
                } else {
                    var $5689 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5687 = $5689;
                };
                var $5664 = $5687;
                break;
            case 'Fm.Term.app':
                var $5690 = self.func;
                var $5691 = self.argm;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5693 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5692 = $5693;
                } else {
                    var $5694 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5692 = $5694;
                };
                var $5664 = $5692;
                break;
            case 'Fm.Term.let':
                var $5695 = self.name;
                var $5696 = self.expr;
                var $5697 = self.body;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5699 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5698 = $5699;
                } else {
                    var $5700 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5698 = $5700;
                };
                var $5664 = $5698;
                break;
            case 'Fm.Term.def':
                var $5701 = self.name;
                var $5702 = self.expr;
                var $5703 = self.body;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5705 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5704 = $5705;
                } else {
                    var $5706 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5704 = $5706;
                };
                var $5664 = $5704;
                break;
            case 'Fm.Term.ann':
                var $5707 = self.done;
                var $5708 = self.term;
                var $5709 = self.type;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5711 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5710 = $5711;
                } else {
                    var $5712 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5710 = $5712;
                };
                var $5664 = $5710;
                break;
            case 'Fm.Term.gol':
                var $5713 = self.name;
                var $5714 = self.dref;
                var $5715 = self.verb;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5717 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5716 = $5717;
                } else {
                    var $5718 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5716 = $5718;
                };
                var $5664 = $5716;
                break;
            case 'Fm.Term.hol':
                var $5719 = self.path;
                var $5720 = Fm$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $5664 = $5720;
                break;
            case 'Fm.Term.nat':
                var $5721 = self.natx;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5723 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5722 = $5723;
                } else {
                    var $5724 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5722 = $5724;
                };
                var $5664 = $5722;
                break;
            case 'Fm.Term.chr':
                var $5725 = self.chrx;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5727 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5726 = $5727;
                } else {
                    var $5728 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5726 = $5728;
                };
                var $5664 = $5726;
                break;
            case 'Fm.Term.str':
                var $5729 = self.strx;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5731 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5730 = $5731;
                } else {
                    var $5732 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5730 = $5732;
                };
                var $5664 = $5730;
                break;
            case 'Fm.Term.cse':
                var $5733 = self.path;
                var $5734 = self.expr;
                var $5735 = self.name;
                var $5736 = self.with;
                var $5737 = self.cses;
                var $5738 = self.moti;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5740 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5739 = $5740;
                } else {
                    var $5741 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5739 = $5741;
                };
                var $5664 = $5739;
                break;
            case 'Fm.Term.ori':
                var $5742 = self.orig;
                var $5743 = self.expr;
                var self = Fm$Term$has_holes$(_term$2);
                if (self) {
                    var $5745 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                    var $5744 = $5745;
                } else {
                    var $5746 = Fm$Check$result$(Maybe$some$(Bool$true), List$cons$(Fm$Error$patch$(_path$1, Fm$Term$normalize$(_term$2, Map$new)), List$nil));
                    var $5744 = $5746;
                };
                var $5664 = $5744;
                break;
        };
        return $5664;
    };
    const Fm$Term$equal$hole = x0 => x1 => Fm$Term$equal$hole$(x0, x1);

    function Fm$Term$equal$extra_holes$(_a$1, _b$2) {
        var self = _a$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $5748 = self.name;
                var $5749 = self.indx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5751 = self.name;
                        var $5752 = self.indx;
                        var $5753 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5750 = $5753;
                        break;
                    case 'Fm.Term.ref':
                        var $5754 = self.name;
                        var $5755 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5750 = $5755;
                        break;
                    case 'Fm.Term.typ':
                        var $5756 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5750 = $5756;
                        break;
                    case 'Fm.Term.all':
                        var $5757 = self.eras;
                        var $5758 = self.self;
                        var $5759 = self.name;
                        var $5760 = self.xtyp;
                        var $5761 = self.body;
                        var $5762 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5750 = $5762;
                        break;
                    case 'Fm.Term.lam':
                        var $5763 = self.name;
                        var $5764 = self.body;
                        var $5765 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5750 = $5765;
                        break;
                    case 'Fm.Term.app':
                        var $5766 = self.func;
                        var $5767 = self.argm;
                        var $5768 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5750 = $5768;
                        break;
                    case 'Fm.Term.let':
                        var $5769 = self.name;
                        var $5770 = self.expr;
                        var $5771 = self.body;
                        var $5772 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5750 = $5772;
                        break;
                    case 'Fm.Term.def':
                        var $5773 = self.name;
                        var $5774 = self.expr;
                        var $5775 = self.body;
                        var $5776 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5750 = $5776;
                        break;
                    case 'Fm.Term.ann':
                        var $5777 = self.done;
                        var $5778 = self.term;
                        var $5779 = self.type;
                        var $5780 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5750 = $5780;
                        break;
                    case 'Fm.Term.gol':
                        var $5781 = self.name;
                        var $5782 = self.dref;
                        var $5783 = self.verb;
                        var $5784 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5750 = $5784;
                        break;
                    case 'Fm.Term.hol':
                        var $5785 = self.path;
                        var self = Fm$Term$equal$hole$($5785, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $5787 = self.value;
                                var $5788 = self.errors;
                                var self = $5787;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5790 = Fm$Check$result$(Maybe$none, $5788);
                                        var $5789 = $5790;
                                        break;
                                    case 'Maybe.some':
                                        var $5791 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $5793 = self.value;
                                                var $5794 = self.errors;
                                                var $5795 = Fm$Check$result$($5793, List$concat$($5788, $5794));
                                                var $5792 = $5795;
                                                break;
                                        };
                                        var $5789 = $5792;
                                        break;
                                };
                                var $5786 = $5789;
                                break;
                        };
                        var $5750 = $5786;
                        break;
                    case 'Fm.Term.nat':
                        var $5796 = self.natx;
                        var $5797 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5750 = $5797;
                        break;
                    case 'Fm.Term.chr':
                        var $5798 = self.chrx;
                        var $5799 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5750 = $5799;
                        break;
                    case 'Fm.Term.str':
                        var $5800 = self.strx;
                        var $5801 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5750 = $5801;
                        break;
                    case 'Fm.Term.cse':
                        var $5802 = self.path;
                        var $5803 = self.expr;
                        var $5804 = self.name;
                        var $5805 = self.with;
                        var $5806 = self.cses;
                        var $5807 = self.moti;
                        var $5808 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5750 = $5808;
                        break;
                    case 'Fm.Term.ori':
                        var $5809 = self.orig;
                        var $5810 = self.expr;
                        var $5811 = Fm$Term$equal$extra_holes$(_a$1, $5810);
                        var $5750 = $5811;
                        break;
                };
                var $5747 = $5750;
                break;
            case 'Fm.Term.ref':
                var $5812 = self.name;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5814 = self.name;
                        var $5815 = self.indx;
                        var $5816 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5813 = $5816;
                        break;
                    case 'Fm.Term.ref':
                        var $5817 = self.name;
                        var $5818 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5813 = $5818;
                        break;
                    case 'Fm.Term.typ':
                        var $5819 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5813 = $5819;
                        break;
                    case 'Fm.Term.all':
                        var $5820 = self.eras;
                        var $5821 = self.self;
                        var $5822 = self.name;
                        var $5823 = self.xtyp;
                        var $5824 = self.body;
                        var $5825 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5813 = $5825;
                        break;
                    case 'Fm.Term.lam':
                        var $5826 = self.name;
                        var $5827 = self.body;
                        var $5828 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5813 = $5828;
                        break;
                    case 'Fm.Term.app':
                        var $5829 = self.func;
                        var $5830 = self.argm;
                        var $5831 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5813 = $5831;
                        break;
                    case 'Fm.Term.let':
                        var $5832 = self.name;
                        var $5833 = self.expr;
                        var $5834 = self.body;
                        var $5835 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5813 = $5835;
                        break;
                    case 'Fm.Term.def':
                        var $5836 = self.name;
                        var $5837 = self.expr;
                        var $5838 = self.body;
                        var $5839 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5813 = $5839;
                        break;
                    case 'Fm.Term.ann':
                        var $5840 = self.done;
                        var $5841 = self.term;
                        var $5842 = self.type;
                        var $5843 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5813 = $5843;
                        break;
                    case 'Fm.Term.gol':
                        var $5844 = self.name;
                        var $5845 = self.dref;
                        var $5846 = self.verb;
                        var $5847 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5813 = $5847;
                        break;
                    case 'Fm.Term.hol':
                        var $5848 = self.path;
                        var self = Fm$Term$equal$hole$($5848, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $5850 = self.value;
                                var $5851 = self.errors;
                                var self = $5850;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5853 = Fm$Check$result$(Maybe$none, $5851);
                                        var $5852 = $5853;
                                        break;
                                    case 'Maybe.some':
                                        var $5854 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $5856 = self.value;
                                                var $5857 = self.errors;
                                                var $5858 = Fm$Check$result$($5856, List$concat$($5851, $5857));
                                                var $5855 = $5858;
                                                break;
                                        };
                                        var $5852 = $5855;
                                        break;
                                };
                                var $5849 = $5852;
                                break;
                        };
                        var $5813 = $5849;
                        break;
                    case 'Fm.Term.nat':
                        var $5859 = self.natx;
                        var $5860 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5813 = $5860;
                        break;
                    case 'Fm.Term.chr':
                        var $5861 = self.chrx;
                        var $5862 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5813 = $5862;
                        break;
                    case 'Fm.Term.str':
                        var $5863 = self.strx;
                        var $5864 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5813 = $5864;
                        break;
                    case 'Fm.Term.cse':
                        var $5865 = self.path;
                        var $5866 = self.expr;
                        var $5867 = self.name;
                        var $5868 = self.with;
                        var $5869 = self.cses;
                        var $5870 = self.moti;
                        var $5871 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5813 = $5871;
                        break;
                    case 'Fm.Term.ori':
                        var $5872 = self.orig;
                        var $5873 = self.expr;
                        var $5874 = Fm$Term$equal$extra_holes$(_a$1, $5873);
                        var $5813 = $5874;
                        break;
                };
                var $5747 = $5813;
                break;
            case 'Fm.Term.typ':
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5876 = self.name;
                        var $5877 = self.indx;
                        var $5878 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5875 = $5878;
                        break;
                    case 'Fm.Term.ref':
                        var $5879 = self.name;
                        var $5880 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5875 = $5880;
                        break;
                    case 'Fm.Term.typ':
                        var $5881 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5875 = $5881;
                        break;
                    case 'Fm.Term.all':
                        var $5882 = self.eras;
                        var $5883 = self.self;
                        var $5884 = self.name;
                        var $5885 = self.xtyp;
                        var $5886 = self.body;
                        var $5887 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5875 = $5887;
                        break;
                    case 'Fm.Term.lam':
                        var $5888 = self.name;
                        var $5889 = self.body;
                        var $5890 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5875 = $5890;
                        break;
                    case 'Fm.Term.app':
                        var $5891 = self.func;
                        var $5892 = self.argm;
                        var $5893 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5875 = $5893;
                        break;
                    case 'Fm.Term.let':
                        var $5894 = self.name;
                        var $5895 = self.expr;
                        var $5896 = self.body;
                        var $5897 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5875 = $5897;
                        break;
                    case 'Fm.Term.def':
                        var $5898 = self.name;
                        var $5899 = self.expr;
                        var $5900 = self.body;
                        var $5901 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5875 = $5901;
                        break;
                    case 'Fm.Term.ann':
                        var $5902 = self.done;
                        var $5903 = self.term;
                        var $5904 = self.type;
                        var $5905 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5875 = $5905;
                        break;
                    case 'Fm.Term.gol':
                        var $5906 = self.name;
                        var $5907 = self.dref;
                        var $5908 = self.verb;
                        var $5909 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5875 = $5909;
                        break;
                    case 'Fm.Term.hol':
                        var $5910 = self.path;
                        var self = Fm$Term$equal$hole$($5910, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $5912 = self.value;
                                var $5913 = self.errors;
                                var self = $5912;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5915 = Fm$Check$result$(Maybe$none, $5913);
                                        var $5914 = $5915;
                                        break;
                                    case 'Maybe.some':
                                        var $5916 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $5918 = self.value;
                                                var $5919 = self.errors;
                                                var $5920 = Fm$Check$result$($5918, List$concat$($5913, $5919));
                                                var $5917 = $5920;
                                                break;
                                        };
                                        var $5914 = $5917;
                                        break;
                                };
                                var $5911 = $5914;
                                break;
                        };
                        var $5875 = $5911;
                        break;
                    case 'Fm.Term.nat':
                        var $5921 = self.natx;
                        var $5922 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5875 = $5922;
                        break;
                    case 'Fm.Term.chr':
                        var $5923 = self.chrx;
                        var $5924 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5875 = $5924;
                        break;
                    case 'Fm.Term.str':
                        var $5925 = self.strx;
                        var $5926 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5875 = $5926;
                        break;
                    case 'Fm.Term.cse':
                        var $5927 = self.path;
                        var $5928 = self.expr;
                        var $5929 = self.name;
                        var $5930 = self.with;
                        var $5931 = self.cses;
                        var $5932 = self.moti;
                        var $5933 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5875 = $5933;
                        break;
                    case 'Fm.Term.ori':
                        var $5934 = self.orig;
                        var $5935 = self.expr;
                        var $5936 = Fm$Term$equal$extra_holes$(_a$1, $5935);
                        var $5875 = $5936;
                        break;
                };
                var $5747 = $5875;
                break;
            case 'Fm.Term.all':
                var $5937 = self.eras;
                var $5938 = self.self;
                var $5939 = self.name;
                var $5940 = self.xtyp;
                var $5941 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $5943 = self.name;
                        var $5944 = self.indx;
                        var $5945 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5942 = $5945;
                        break;
                    case 'Fm.Term.ref':
                        var $5946 = self.name;
                        var $5947 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5942 = $5947;
                        break;
                    case 'Fm.Term.typ':
                        var $5948 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5942 = $5948;
                        break;
                    case 'Fm.Term.all':
                        var $5949 = self.eras;
                        var $5950 = self.self;
                        var $5951 = self.name;
                        var $5952 = self.xtyp;
                        var $5953 = self.body;
                        var $5954 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5942 = $5954;
                        break;
                    case 'Fm.Term.lam':
                        var $5955 = self.name;
                        var $5956 = self.body;
                        var $5957 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5942 = $5957;
                        break;
                    case 'Fm.Term.app':
                        var $5958 = self.func;
                        var $5959 = self.argm;
                        var $5960 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5942 = $5960;
                        break;
                    case 'Fm.Term.let':
                        var $5961 = self.name;
                        var $5962 = self.expr;
                        var $5963 = self.body;
                        var $5964 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5942 = $5964;
                        break;
                    case 'Fm.Term.def':
                        var $5965 = self.name;
                        var $5966 = self.expr;
                        var $5967 = self.body;
                        var $5968 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5942 = $5968;
                        break;
                    case 'Fm.Term.ann':
                        var $5969 = self.done;
                        var $5970 = self.term;
                        var $5971 = self.type;
                        var $5972 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5942 = $5972;
                        break;
                    case 'Fm.Term.gol':
                        var $5973 = self.name;
                        var $5974 = self.dref;
                        var $5975 = self.verb;
                        var $5976 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5942 = $5976;
                        break;
                    case 'Fm.Term.hol':
                        var $5977 = self.path;
                        var self = Fm$Term$equal$hole$($5977, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $5979 = self.value;
                                var $5980 = self.errors;
                                var self = $5979;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $5982 = Fm$Check$result$(Maybe$none, $5980);
                                        var $5981 = $5982;
                                        break;
                                    case 'Maybe.some':
                                        var $5983 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $5985 = self.value;
                                                var $5986 = self.errors;
                                                var $5987 = Fm$Check$result$($5985, List$concat$($5980, $5986));
                                                var $5984 = $5987;
                                                break;
                                        };
                                        var $5981 = $5984;
                                        break;
                                };
                                var $5978 = $5981;
                                break;
                        };
                        var $5942 = $5978;
                        break;
                    case 'Fm.Term.nat':
                        var $5988 = self.natx;
                        var $5989 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5942 = $5989;
                        break;
                    case 'Fm.Term.chr':
                        var $5990 = self.chrx;
                        var $5991 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5942 = $5991;
                        break;
                    case 'Fm.Term.str':
                        var $5992 = self.strx;
                        var $5993 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5942 = $5993;
                        break;
                    case 'Fm.Term.cse':
                        var $5994 = self.path;
                        var $5995 = self.expr;
                        var $5996 = self.name;
                        var $5997 = self.with;
                        var $5998 = self.cses;
                        var $5999 = self.moti;
                        var $6000 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $5942 = $6000;
                        break;
                    case 'Fm.Term.ori':
                        var $6001 = self.orig;
                        var $6002 = self.expr;
                        var $6003 = Fm$Term$equal$extra_holes$(_a$1, $6002);
                        var $5942 = $6003;
                        break;
                };
                var $5747 = $5942;
                break;
            case 'Fm.Term.lam':
                var $6004 = self.name;
                var $6005 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6007 = self.name;
                        var $6008 = self.indx;
                        var $6009 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6006 = $6009;
                        break;
                    case 'Fm.Term.ref':
                        var $6010 = self.name;
                        var $6011 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6006 = $6011;
                        break;
                    case 'Fm.Term.typ':
                        var $6012 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6006 = $6012;
                        break;
                    case 'Fm.Term.all':
                        var $6013 = self.eras;
                        var $6014 = self.self;
                        var $6015 = self.name;
                        var $6016 = self.xtyp;
                        var $6017 = self.body;
                        var $6018 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6006 = $6018;
                        break;
                    case 'Fm.Term.lam':
                        var $6019 = self.name;
                        var $6020 = self.body;
                        var $6021 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6006 = $6021;
                        break;
                    case 'Fm.Term.app':
                        var $6022 = self.func;
                        var $6023 = self.argm;
                        var $6024 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6006 = $6024;
                        break;
                    case 'Fm.Term.let':
                        var $6025 = self.name;
                        var $6026 = self.expr;
                        var $6027 = self.body;
                        var $6028 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6006 = $6028;
                        break;
                    case 'Fm.Term.def':
                        var $6029 = self.name;
                        var $6030 = self.expr;
                        var $6031 = self.body;
                        var $6032 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6006 = $6032;
                        break;
                    case 'Fm.Term.ann':
                        var $6033 = self.done;
                        var $6034 = self.term;
                        var $6035 = self.type;
                        var $6036 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6006 = $6036;
                        break;
                    case 'Fm.Term.gol':
                        var $6037 = self.name;
                        var $6038 = self.dref;
                        var $6039 = self.verb;
                        var $6040 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6006 = $6040;
                        break;
                    case 'Fm.Term.hol':
                        var $6041 = self.path;
                        var self = Fm$Term$equal$hole$($6041, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6043 = self.value;
                                var $6044 = self.errors;
                                var self = $6043;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6046 = Fm$Check$result$(Maybe$none, $6044);
                                        var $6045 = $6046;
                                        break;
                                    case 'Maybe.some':
                                        var $6047 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6049 = self.value;
                                                var $6050 = self.errors;
                                                var $6051 = Fm$Check$result$($6049, List$concat$($6044, $6050));
                                                var $6048 = $6051;
                                                break;
                                        };
                                        var $6045 = $6048;
                                        break;
                                };
                                var $6042 = $6045;
                                break;
                        };
                        var $6006 = $6042;
                        break;
                    case 'Fm.Term.nat':
                        var $6052 = self.natx;
                        var $6053 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6006 = $6053;
                        break;
                    case 'Fm.Term.chr':
                        var $6054 = self.chrx;
                        var $6055 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6006 = $6055;
                        break;
                    case 'Fm.Term.str':
                        var $6056 = self.strx;
                        var $6057 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6006 = $6057;
                        break;
                    case 'Fm.Term.cse':
                        var $6058 = self.path;
                        var $6059 = self.expr;
                        var $6060 = self.name;
                        var $6061 = self.with;
                        var $6062 = self.cses;
                        var $6063 = self.moti;
                        var $6064 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6006 = $6064;
                        break;
                    case 'Fm.Term.ori':
                        var $6065 = self.orig;
                        var $6066 = self.expr;
                        var $6067 = Fm$Term$equal$extra_holes$(_a$1, $6066);
                        var $6006 = $6067;
                        break;
                };
                var $5747 = $6006;
                break;
            case 'Fm.Term.app':
                var $6068 = self.func;
                var $6069 = self.argm;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6071 = self.name;
                        var $6072 = self.indx;
                        var $6073 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6070 = $6073;
                        break;
                    case 'Fm.Term.ref':
                        var $6074 = self.name;
                        var $6075 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6070 = $6075;
                        break;
                    case 'Fm.Term.typ':
                        var $6076 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6070 = $6076;
                        break;
                    case 'Fm.Term.all':
                        var $6077 = self.eras;
                        var $6078 = self.self;
                        var $6079 = self.name;
                        var $6080 = self.xtyp;
                        var $6081 = self.body;
                        var $6082 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6070 = $6082;
                        break;
                    case 'Fm.Term.lam':
                        var $6083 = self.name;
                        var $6084 = self.body;
                        var $6085 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6070 = $6085;
                        break;
                    case 'Fm.Term.app':
                        var $6086 = self.func;
                        var $6087 = self.argm;
                        var self = Fm$Term$equal$extra_holes$($6068, $6086);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6089 = self.value;
                                var $6090 = self.errors;
                                var self = $6089;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6092 = Fm$Check$result$(Maybe$none, $6090);
                                        var $6091 = $6092;
                                        break;
                                    case 'Maybe.some':
                                        var $6093 = self.value;
                                        var self = Fm$Term$equal$extra_holes$($6069, $6087);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6095 = self.value;
                                                var $6096 = self.errors;
                                                var $6097 = Fm$Check$result$($6095, List$concat$($6090, $6096));
                                                var $6094 = $6097;
                                                break;
                                        };
                                        var $6091 = $6094;
                                        break;
                                };
                                var $6088 = $6091;
                                break;
                        };
                        var $6070 = $6088;
                        break;
                    case 'Fm.Term.let':
                        var $6098 = self.name;
                        var $6099 = self.expr;
                        var $6100 = self.body;
                        var $6101 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6070 = $6101;
                        break;
                    case 'Fm.Term.def':
                        var $6102 = self.name;
                        var $6103 = self.expr;
                        var $6104 = self.body;
                        var $6105 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6070 = $6105;
                        break;
                    case 'Fm.Term.ann':
                        var $6106 = self.done;
                        var $6107 = self.term;
                        var $6108 = self.type;
                        var $6109 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6070 = $6109;
                        break;
                    case 'Fm.Term.gol':
                        var $6110 = self.name;
                        var $6111 = self.dref;
                        var $6112 = self.verb;
                        var $6113 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6070 = $6113;
                        break;
                    case 'Fm.Term.hol':
                        var $6114 = self.path;
                        var self = Fm$Term$equal$hole$($6114, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6116 = self.value;
                                var $6117 = self.errors;
                                var self = $6116;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6119 = Fm$Check$result$(Maybe$none, $6117);
                                        var $6118 = $6119;
                                        break;
                                    case 'Maybe.some':
                                        var $6120 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6122 = self.value;
                                                var $6123 = self.errors;
                                                var $6124 = Fm$Check$result$($6122, List$concat$($6117, $6123));
                                                var $6121 = $6124;
                                                break;
                                        };
                                        var $6118 = $6121;
                                        break;
                                };
                                var $6115 = $6118;
                                break;
                        };
                        var $6070 = $6115;
                        break;
                    case 'Fm.Term.nat':
                        var $6125 = self.natx;
                        var $6126 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6070 = $6126;
                        break;
                    case 'Fm.Term.chr':
                        var $6127 = self.chrx;
                        var $6128 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6070 = $6128;
                        break;
                    case 'Fm.Term.str':
                        var $6129 = self.strx;
                        var $6130 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6070 = $6130;
                        break;
                    case 'Fm.Term.cse':
                        var $6131 = self.path;
                        var $6132 = self.expr;
                        var $6133 = self.name;
                        var $6134 = self.with;
                        var $6135 = self.cses;
                        var $6136 = self.moti;
                        var $6137 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6070 = $6137;
                        break;
                    case 'Fm.Term.ori':
                        var $6138 = self.orig;
                        var $6139 = self.expr;
                        var $6140 = Fm$Term$equal$extra_holes$(_a$1, $6139);
                        var $6070 = $6140;
                        break;
                };
                var $5747 = $6070;
                break;
            case 'Fm.Term.let':
                var $6141 = self.name;
                var $6142 = self.expr;
                var $6143 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6145 = self.name;
                        var $6146 = self.indx;
                        var $6147 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6144 = $6147;
                        break;
                    case 'Fm.Term.ref':
                        var $6148 = self.name;
                        var $6149 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6144 = $6149;
                        break;
                    case 'Fm.Term.typ':
                        var $6150 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6144 = $6150;
                        break;
                    case 'Fm.Term.all':
                        var $6151 = self.eras;
                        var $6152 = self.self;
                        var $6153 = self.name;
                        var $6154 = self.xtyp;
                        var $6155 = self.body;
                        var $6156 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6144 = $6156;
                        break;
                    case 'Fm.Term.lam':
                        var $6157 = self.name;
                        var $6158 = self.body;
                        var $6159 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6144 = $6159;
                        break;
                    case 'Fm.Term.app':
                        var $6160 = self.func;
                        var $6161 = self.argm;
                        var $6162 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6144 = $6162;
                        break;
                    case 'Fm.Term.let':
                        var $6163 = self.name;
                        var $6164 = self.expr;
                        var $6165 = self.body;
                        var $6166 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6144 = $6166;
                        break;
                    case 'Fm.Term.def':
                        var $6167 = self.name;
                        var $6168 = self.expr;
                        var $6169 = self.body;
                        var $6170 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6144 = $6170;
                        break;
                    case 'Fm.Term.ann':
                        var $6171 = self.done;
                        var $6172 = self.term;
                        var $6173 = self.type;
                        var $6174 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6144 = $6174;
                        break;
                    case 'Fm.Term.gol':
                        var $6175 = self.name;
                        var $6176 = self.dref;
                        var $6177 = self.verb;
                        var $6178 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6144 = $6178;
                        break;
                    case 'Fm.Term.hol':
                        var $6179 = self.path;
                        var self = Fm$Term$equal$hole$($6179, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6181 = self.value;
                                var $6182 = self.errors;
                                var self = $6181;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6184 = Fm$Check$result$(Maybe$none, $6182);
                                        var $6183 = $6184;
                                        break;
                                    case 'Maybe.some':
                                        var $6185 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6187 = self.value;
                                                var $6188 = self.errors;
                                                var $6189 = Fm$Check$result$($6187, List$concat$($6182, $6188));
                                                var $6186 = $6189;
                                                break;
                                        };
                                        var $6183 = $6186;
                                        break;
                                };
                                var $6180 = $6183;
                                break;
                        };
                        var $6144 = $6180;
                        break;
                    case 'Fm.Term.nat':
                        var $6190 = self.natx;
                        var $6191 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6144 = $6191;
                        break;
                    case 'Fm.Term.chr':
                        var $6192 = self.chrx;
                        var $6193 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6144 = $6193;
                        break;
                    case 'Fm.Term.str':
                        var $6194 = self.strx;
                        var $6195 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6144 = $6195;
                        break;
                    case 'Fm.Term.cse':
                        var $6196 = self.path;
                        var $6197 = self.expr;
                        var $6198 = self.name;
                        var $6199 = self.with;
                        var $6200 = self.cses;
                        var $6201 = self.moti;
                        var $6202 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6144 = $6202;
                        break;
                    case 'Fm.Term.ori':
                        var $6203 = self.orig;
                        var $6204 = self.expr;
                        var $6205 = Fm$Term$equal$extra_holes$(_a$1, $6204);
                        var $6144 = $6205;
                        break;
                };
                var $5747 = $6144;
                break;
            case 'Fm.Term.def':
                var $6206 = self.name;
                var $6207 = self.expr;
                var $6208 = self.body;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6210 = self.name;
                        var $6211 = self.indx;
                        var $6212 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6209 = $6212;
                        break;
                    case 'Fm.Term.ref':
                        var $6213 = self.name;
                        var $6214 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6209 = $6214;
                        break;
                    case 'Fm.Term.typ':
                        var $6215 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6209 = $6215;
                        break;
                    case 'Fm.Term.all':
                        var $6216 = self.eras;
                        var $6217 = self.self;
                        var $6218 = self.name;
                        var $6219 = self.xtyp;
                        var $6220 = self.body;
                        var $6221 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6209 = $6221;
                        break;
                    case 'Fm.Term.lam':
                        var $6222 = self.name;
                        var $6223 = self.body;
                        var $6224 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6209 = $6224;
                        break;
                    case 'Fm.Term.app':
                        var $6225 = self.func;
                        var $6226 = self.argm;
                        var $6227 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6209 = $6227;
                        break;
                    case 'Fm.Term.let':
                        var $6228 = self.name;
                        var $6229 = self.expr;
                        var $6230 = self.body;
                        var $6231 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6209 = $6231;
                        break;
                    case 'Fm.Term.def':
                        var $6232 = self.name;
                        var $6233 = self.expr;
                        var $6234 = self.body;
                        var $6235 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6209 = $6235;
                        break;
                    case 'Fm.Term.ann':
                        var $6236 = self.done;
                        var $6237 = self.term;
                        var $6238 = self.type;
                        var $6239 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6209 = $6239;
                        break;
                    case 'Fm.Term.gol':
                        var $6240 = self.name;
                        var $6241 = self.dref;
                        var $6242 = self.verb;
                        var $6243 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6209 = $6243;
                        break;
                    case 'Fm.Term.hol':
                        var $6244 = self.path;
                        var self = Fm$Term$equal$hole$($6244, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6246 = self.value;
                                var $6247 = self.errors;
                                var self = $6246;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6249 = Fm$Check$result$(Maybe$none, $6247);
                                        var $6248 = $6249;
                                        break;
                                    case 'Maybe.some':
                                        var $6250 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6252 = self.value;
                                                var $6253 = self.errors;
                                                var $6254 = Fm$Check$result$($6252, List$concat$($6247, $6253));
                                                var $6251 = $6254;
                                                break;
                                        };
                                        var $6248 = $6251;
                                        break;
                                };
                                var $6245 = $6248;
                                break;
                        };
                        var $6209 = $6245;
                        break;
                    case 'Fm.Term.nat':
                        var $6255 = self.natx;
                        var $6256 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6209 = $6256;
                        break;
                    case 'Fm.Term.chr':
                        var $6257 = self.chrx;
                        var $6258 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6209 = $6258;
                        break;
                    case 'Fm.Term.str':
                        var $6259 = self.strx;
                        var $6260 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6209 = $6260;
                        break;
                    case 'Fm.Term.cse':
                        var $6261 = self.path;
                        var $6262 = self.expr;
                        var $6263 = self.name;
                        var $6264 = self.with;
                        var $6265 = self.cses;
                        var $6266 = self.moti;
                        var $6267 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6209 = $6267;
                        break;
                    case 'Fm.Term.ori':
                        var $6268 = self.orig;
                        var $6269 = self.expr;
                        var $6270 = Fm$Term$equal$extra_holes$(_a$1, $6269);
                        var $6209 = $6270;
                        break;
                };
                var $5747 = $6209;
                break;
            case 'Fm.Term.ann':
                var $6271 = self.done;
                var $6272 = self.term;
                var $6273 = self.type;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6275 = self.name;
                        var $6276 = self.indx;
                        var $6277 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6274 = $6277;
                        break;
                    case 'Fm.Term.ref':
                        var $6278 = self.name;
                        var $6279 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6274 = $6279;
                        break;
                    case 'Fm.Term.typ':
                        var $6280 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6274 = $6280;
                        break;
                    case 'Fm.Term.all':
                        var $6281 = self.eras;
                        var $6282 = self.self;
                        var $6283 = self.name;
                        var $6284 = self.xtyp;
                        var $6285 = self.body;
                        var $6286 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6274 = $6286;
                        break;
                    case 'Fm.Term.lam':
                        var $6287 = self.name;
                        var $6288 = self.body;
                        var $6289 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6274 = $6289;
                        break;
                    case 'Fm.Term.app':
                        var $6290 = self.func;
                        var $6291 = self.argm;
                        var $6292 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6274 = $6292;
                        break;
                    case 'Fm.Term.let':
                        var $6293 = self.name;
                        var $6294 = self.expr;
                        var $6295 = self.body;
                        var $6296 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6274 = $6296;
                        break;
                    case 'Fm.Term.def':
                        var $6297 = self.name;
                        var $6298 = self.expr;
                        var $6299 = self.body;
                        var $6300 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6274 = $6300;
                        break;
                    case 'Fm.Term.ann':
                        var $6301 = self.done;
                        var $6302 = self.term;
                        var $6303 = self.type;
                        var $6304 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6274 = $6304;
                        break;
                    case 'Fm.Term.gol':
                        var $6305 = self.name;
                        var $6306 = self.dref;
                        var $6307 = self.verb;
                        var $6308 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6274 = $6308;
                        break;
                    case 'Fm.Term.hol':
                        var $6309 = self.path;
                        var self = Fm$Term$equal$hole$($6309, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6311 = self.value;
                                var $6312 = self.errors;
                                var self = $6311;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6314 = Fm$Check$result$(Maybe$none, $6312);
                                        var $6313 = $6314;
                                        break;
                                    case 'Maybe.some':
                                        var $6315 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6317 = self.value;
                                                var $6318 = self.errors;
                                                var $6319 = Fm$Check$result$($6317, List$concat$($6312, $6318));
                                                var $6316 = $6319;
                                                break;
                                        };
                                        var $6313 = $6316;
                                        break;
                                };
                                var $6310 = $6313;
                                break;
                        };
                        var $6274 = $6310;
                        break;
                    case 'Fm.Term.nat':
                        var $6320 = self.natx;
                        var $6321 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6274 = $6321;
                        break;
                    case 'Fm.Term.chr':
                        var $6322 = self.chrx;
                        var $6323 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6274 = $6323;
                        break;
                    case 'Fm.Term.str':
                        var $6324 = self.strx;
                        var $6325 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6274 = $6325;
                        break;
                    case 'Fm.Term.cse':
                        var $6326 = self.path;
                        var $6327 = self.expr;
                        var $6328 = self.name;
                        var $6329 = self.with;
                        var $6330 = self.cses;
                        var $6331 = self.moti;
                        var $6332 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6274 = $6332;
                        break;
                    case 'Fm.Term.ori':
                        var $6333 = self.orig;
                        var $6334 = self.expr;
                        var $6335 = Fm$Term$equal$extra_holes$(_a$1, $6334);
                        var $6274 = $6335;
                        break;
                };
                var $5747 = $6274;
                break;
            case 'Fm.Term.gol':
                var $6336 = self.name;
                var $6337 = self.dref;
                var $6338 = self.verb;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6340 = self.name;
                        var $6341 = self.indx;
                        var $6342 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6339 = $6342;
                        break;
                    case 'Fm.Term.ref':
                        var $6343 = self.name;
                        var $6344 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6339 = $6344;
                        break;
                    case 'Fm.Term.typ':
                        var $6345 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6339 = $6345;
                        break;
                    case 'Fm.Term.all':
                        var $6346 = self.eras;
                        var $6347 = self.self;
                        var $6348 = self.name;
                        var $6349 = self.xtyp;
                        var $6350 = self.body;
                        var $6351 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6339 = $6351;
                        break;
                    case 'Fm.Term.lam':
                        var $6352 = self.name;
                        var $6353 = self.body;
                        var $6354 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6339 = $6354;
                        break;
                    case 'Fm.Term.app':
                        var $6355 = self.func;
                        var $6356 = self.argm;
                        var $6357 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6339 = $6357;
                        break;
                    case 'Fm.Term.let':
                        var $6358 = self.name;
                        var $6359 = self.expr;
                        var $6360 = self.body;
                        var $6361 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6339 = $6361;
                        break;
                    case 'Fm.Term.def':
                        var $6362 = self.name;
                        var $6363 = self.expr;
                        var $6364 = self.body;
                        var $6365 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6339 = $6365;
                        break;
                    case 'Fm.Term.ann':
                        var $6366 = self.done;
                        var $6367 = self.term;
                        var $6368 = self.type;
                        var $6369 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6339 = $6369;
                        break;
                    case 'Fm.Term.gol':
                        var $6370 = self.name;
                        var $6371 = self.dref;
                        var $6372 = self.verb;
                        var $6373 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6339 = $6373;
                        break;
                    case 'Fm.Term.hol':
                        var $6374 = self.path;
                        var self = Fm$Term$equal$hole$($6374, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6376 = self.value;
                                var $6377 = self.errors;
                                var self = $6376;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6379 = Fm$Check$result$(Maybe$none, $6377);
                                        var $6378 = $6379;
                                        break;
                                    case 'Maybe.some':
                                        var $6380 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6382 = self.value;
                                                var $6383 = self.errors;
                                                var $6384 = Fm$Check$result$($6382, List$concat$($6377, $6383));
                                                var $6381 = $6384;
                                                break;
                                        };
                                        var $6378 = $6381;
                                        break;
                                };
                                var $6375 = $6378;
                                break;
                        };
                        var $6339 = $6375;
                        break;
                    case 'Fm.Term.nat':
                        var $6385 = self.natx;
                        var $6386 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6339 = $6386;
                        break;
                    case 'Fm.Term.chr':
                        var $6387 = self.chrx;
                        var $6388 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6339 = $6388;
                        break;
                    case 'Fm.Term.str':
                        var $6389 = self.strx;
                        var $6390 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6339 = $6390;
                        break;
                    case 'Fm.Term.cse':
                        var $6391 = self.path;
                        var $6392 = self.expr;
                        var $6393 = self.name;
                        var $6394 = self.with;
                        var $6395 = self.cses;
                        var $6396 = self.moti;
                        var $6397 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6339 = $6397;
                        break;
                    case 'Fm.Term.ori':
                        var $6398 = self.orig;
                        var $6399 = self.expr;
                        var $6400 = Fm$Term$equal$extra_holes$(_a$1, $6399);
                        var $6339 = $6400;
                        break;
                };
                var $5747 = $6339;
                break;
            case 'Fm.Term.hol':
                var $6401 = self.path;
                var self = Fm$Term$equal$hole$($6401, _b$2);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $6403 = self.value;
                        var $6404 = self.errors;
                        var self = $6403;
                        switch (self._) {
                            case 'Maybe.none':
                                var $6406 = Fm$Check$result$(Maybe$none, $6404);
                                var $6405 = $6406;
                                break;
                            case 'Maybe.some':
                                var $6407 = self.value;
                                var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $6409 = self.value;
                                        var $6410 = self.errors;
                                        var $6411 = Fm$Check$result$($6409, List$concat$($6404, $6410));
                                        var $6408 = $6411;
                                        break;
                                };
                                var $6405 = $6408;
                                break;
                        };
                        var $6402 = $6405;
                        break;
                };
                var $5747 = $6402;
                break;
            case 'Fm.Term.nat':
                var $6412 = self.natx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6414 = self.name;
                        var $6415 = self.indx;
                        var $6416 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6413 = $6416;
                        break;
                    case 'Fm.Term.ref':
                        var $6417 = self.name;
                        var $6418 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6413 = $6418;
                        break;
                    case 'Fm.Term.typ':
                        var $6419 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6413 = $6419;
                        break;
                    case 'Fm.Term.all':
                        var $6420 = self.eras;
                        var $6421 = self.self;
                        var $6422 = self.name;
                        var $6423 = self.xtyp;
                        var $6424 = self.body;
                        var $6425 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6413 = $6425;
                        break;
                    case 'Fm.Term.lam':
                        var $6426 = self.name;
                        var $6427 = self.body;
                        var $6428 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6413 = $6428;
                        break;
                    case 'Fm.Term.app':
                        var $6429 = self.func;
                        var $6430 = self.argm;
                        var $6431 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6413 = $6431;
                        break;
                    case 'Fm.Term.let':
                        var $6432 = self.name;
                        var $6433 = self.expr;
                        var $6434 = self.body;
                        var $6435 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6413 = $6435;
                        break;
                    case 'Fm.Term.def':
                        var $6436 = self.name;
                        var $6437 = self.expr;
                        var $6438 = self.body;
                        var $6439 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6413 = $6439;
                        break;
                    case 'Fm.Term.ann':
                        var $6440 = self.done;
                        var $6441 = self.term;
                        var $6442 = self.type;
                        var $6443 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6413 = $6443;
                        break;
                    case 'Fm.Term.gol':
                        var $6444 = self.name;
                        var $6445 = self.dref;
                        var $6446 = self.verb;
                        var $6447 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6413 = $6447;
                        break;
                    case 'Fm.Term.hol':
                        var $6448 = self.path;
                        var self = Fm$Term$equal$hole$($6448, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6450 = self.value;
                                var $6451 = self.errors;
                                var self = $6450;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6453 = Fm$Check$result$(Maybe$none, $6451);
                                        var $6452 = $6453;
                                        break;
                                    case 'Maybe.some':
                                        var $6454 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6456 = self.value;
                                                var $6457 = self.errors;
                                                var $6458 = Fm$Check$result$($6456, List$concat$($6451, $6457));
                                                var $6455 = $6458;
                                                break;
                                        };
                                        var $6452 = $6455;
                                        break;
                                };
                                var $6449 = $6452;
                                break;
                        };
                        var $6413 = $6449;
                        break;
                    case 'Fm.Term.nat':
                        var $6459 = self.natx;
                        var $6460 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6413 = $6460;
                        break;
                    case 'Fm.Term.chr':
                        var $6461 = self.chrx;
                        var $6462 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6413 = $6462;
                        break;
                    case 'Fm.Term.str':
                        var $6463 = self.strx;
                        var $6464 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6413 = $6464;
                        break;
                    case 'Fm.Term.cse':
                        var $6465 = self.path;
                        var $6466 = self.expr;
                        var $6467 = self.name;
                        var $6468 = self.with;
                        var $6469 = self.cses;
                        var $6470 = self.moti;
                        var $6471 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6413 = $6471;
                        break;
                    case 'Fm.Term.ori':
                        var $6472 = self.orig;
                        var $6473 = self.expr;
                        var $6474 = Fm$Term$equal$extra_holes$(_a$1, $6473);
                        var $6413 = $6474;
                        break;
                };
                var $5747 = $6413;
                break;
            case 'Fm.Term.chr':
                var $6475 = self.chrx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6477 = self.name;
                        var $6478 = self.indx;
                        var $6479 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6476 = $6479;
                        break;
                    case 'Fm.Term.ref':
                        var $6480 = self.name;
                        var $6481 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6476 = $6481;
                        break;
                    case 'Fm.Term.typ':
                        var $6482 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6476 = $6482;
                        break;
                    case 'Fm.Term.all':
                        var $6483 = self.eras;
                        var $6484 = self.self;
                        var $6485 = self.name;
                        var $6486 = self.xtyp;
                        var $6487 = self.body;
                        var $6488 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6476 = $6488;
                        break;
                    case 'Fm.Term.lam':
                        var $6489 = self.name;
                        var $6490 = self.body;
                        var $6491 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6476 = $6491;
                        break;
                    case 'Fm.Term.app':
                        var $6492 = self.func;
                        var $6493 = self.argm;
                        var $6494 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6476 = $6494;
                        break;
                    case 'Fm.Term.let':
                        var $6495 = self.name;
                        var $6496 = self.expr;
                        var $6497 = self.body;
                        var $6498 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6476 = $6498;
                        break;
                    case 'Fm.Term.def':
                        var $6499 = self.name;
                        var $6500 = self.expr;
                        var $6501 = self.body;
                        var $6502 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6476 = $6502;
                        break;
                    case 'Fm.Term.ann':
                        var $6503 = self.done;
                        var $6504 = self.term;
                        var $6505 = self.type;
                        var $6506 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6476 = $6506;
                        break;
                    case 'Fm.Term.gol':
                        var $6507 = self.name;
                        var $6508 = self.dref;
                        var $6509 = self.verb;
                        var $6510 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6476 = $6510;
                        break;
                    case 'Fm.Term.hol':
                        var $6511 = self.path;
                        var self = Fm$Term$equal$hole$($6511, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6513 = self.value;
                                var $6514 = self.errors;
                                var self = $6513;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6516 = Fm$Check$result$(Maybe$none, $6514);
                                        var $6515 = $6516;
                                        break;
                                    case 'Maybe.some':
                                        var $6517 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6519 = self.value;
                                                var $6520 = self.errors;
                                                var $6521 = Fm$Check$result$($6519, List$concat$($6514, $6520));
                                                var $6518 = $6521;
                                                break;
                                        };
                                        var $6515 = $6518;
                                        break;
                                };
                                var $6512 = $6515;
                                break;
                        };
                        var $6476 = $6512;
                        break;
                    case 'Fm.Term.nat':
                        var $6522 = self.natx;
                        var $6523 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6476 = $6523;
                        break;
                    case 'Fm.Term.chr':
                        var $6524 = self.chrx;
                        var $6525 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6476 = $6525;
                        break;
                    case 'Fm.Term.str':
                        var $6526 = self.strx;
                        var $6527 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6476 = $6527;
                        break;
                    case 'Fm.Term.cse':
                        var $6528 = self.path;
                        var $6529 = self.expr;
                        var $6530 = self.name;
                        var $6531 = self.with;
                        var $6532 = self.cses;
                        var $6533 = self.moti;
                        var $6534 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6476 = $6534;
                        break;
                    case 'Fm.Term.ori':
                        var $6535 = self.orig;
                        var $6536 = self.expr;
                        var $6537 = Fm$Term$equal$extra_holes$(_a$1, $6536);
                        var $6476 = $6537;
                        break;
                };
                var $5747 = $6476;
                break;
            case 'Fm.Term.str':
                var $6538 = self.strx;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6540 = self.name;
                        var $6541 = self.indx;
                        var $6542 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6539 = $6542;
                        break;
                    case 'Fm.Term.ref':
                        var $6543 = self.name;
                        var $6544 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6539 = $6544;
                        break;
                    case 'Fm.Term.typ':
                        var $6545 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6539 = $6545;
                        break;
                    case 'Fm.Term.all':
                        var $6546 = self.eras;
                        var $6547 = self.self;
                        var $6548 = self.name;
                        var $6549 = self.xtyp;
                        var $6550 = self.body;
                        var $6551 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6539 = $6551;
                        break;
                    case 'Fm.Term.lam':
                        var $6552 = self.name;
                        var $6553 = self.body;
                        var $6554 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6539 = $6554;
                        break;
                    case 'Fm.Term.app':
                        var $6555 = self.func;
                        var $6556 = self.argm;
                        var $6557 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6539 = $6557;
                        break;
                    case 'Fm.Term.let':
                        var $6558 = self.name;
                        var $6559 = self.expr;
                        var $6560 = self.body;
                        var $6561 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6539 = $6561;
                        break;
                    case 'Fm.Term.def':
                        var $6562 = self.name;
                        var $6563 = self.expr;
                        var $6564 = self.body;
                        var $6565 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6539 = $6565;
                        break;
                    case 'Fm.Term.ann':
                        var $6566 = self.done;
                        var $6567 = self.term;
                        var $6568 = self.type;
                        var $6569 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6539 = $6569;
                        break;
                    case 'Fm.Term.gol':
                        var $6570 = self.name;
                        var $6571 = self.dref;
                        var $6572 = self.verb;
                        var $6573 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6539 = $6573;
                        break;
                    case 'Fm.Term.hol':
                        var $6574 = self.path;
                        var self = Fm$Term$equal$hole$($6574, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6576 = self.value;
                                var $6577 = self.errors;
                                var self = $6576;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6579 = Fm$Check$result$(Maybe$none, $6577);
                                        var $6578 = $6579;
                                        break;
                                    case 'Maybe.some':
                                        var $6580 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6582 = self.value;
                                                var $6583 = self.errors;
                                                var $6584 = Fm$Check$result$($6582, List$concat$($6577, $6583));
                                                var $6581 = $6584;
                                                break;
                                        };
                                        var $6578 = $6581;
                                        break;
                                };
                                var $6575 = $6578;
                                break;
                        };
                        var $6539 = $6575;
                        break;
                    case 'Fm.Term.nat':
                        var $6585 = self.natx;
                        var $6586 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6539 = $6586;
                        break;
                    case 'Fm.Term.chr':
                        var $6587 = self.chrx;
                        var $6588 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6539 = $6588;
                        break;
                    case 'Fm.Term.str':
                        var $6589 = self.strx;
                        var $6590 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6539 = $6590;
                        break;
                    case 'Fm.Term.cse':
                        var $6591 = self.path;
                        var $6592 = self.expr;
                        var $6593 = self.name;
                        var $6594 = self.with;
                        var $6595 = self.cses;
                        var $6596 = self.moti;
                        var $6597 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6539 = $6597;
                        break;
                    case 'Fm.Term.ori':
                        var $6598 = self.orig;
                        var $6599 = self.expr;
                        var $6600 = Fm$Term$equal$extra_holes$(_a$1, $6599);
                        var $6539 = $6600;
                        break;
                };
                var $5747 = $6539;
                break;
            case 'Fm.Term.cse':
                var $6601 = self.path;
                var $6602 = self.expr;
                var $6603 = self.name;
                var $6604 = self.with;
                var $6605 = self.cses;
                var $6606 = self.moti;
                var self = _b$2;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $6608 = self.name;
                        var $6609 = self.indx;
                        var $6610 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6607 = $6610;
                        break;
                    case 'Fm.Term.ref':
                        var $6611 = self.name;
                        var $6612 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6607 = $6612;
                        break;
                    case 'Fm.Term.typ':
                        var $6613 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6607 = $6613;
                        break;
                    case 'Fm.Term.all':
                        var $6614 = self.eras;
                        var $6615 = self.self;
                        var $6616 = self.name;
                        var $6617 = self.xtyp;
                        var $6618 = self.body;
                        var $6619 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6607 = $6619;
                        break;
                    case 'Fm.Term.lam':
                        var $6620 = self.name;
                        var $6621 = self.body;
                        var $6622 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6607 = $6622;
                        break;
                    case 'Fm.Term.app':
                        var $6623 = self.func;
                        var $6624 = self.argm;
                        var $6625 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6607 = $6625;
                        break;
                    case 'Fm.Term.let':
                        var $6626 = self.name;
                        var $6627 = self.expr;
                        var $6628 = self.body;
                        var $6629 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6607 = $6629;
                        break;
                    case 'Fm.Term.def':
                        var $6630 = self.name;
                        var $6631 = self.expr;
                        var $6632 = self.body;
                        var $6633 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6607 = $6633;
                        break;
                    case 'Fm.Term.ann':
                        var $6634 = self.done;
                        var $6635 = self.term;
                        var $6636 = self.type;
                        var $6637 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6607 = $6637;
                        break;
                    case 'Fm.Term.gol':
                        var $6638 = self.name;
                        var $6639 = self.dref;
                        var $6640 = self.verb;
                        var $6641 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6607 = $6641;
                        break;
                    case 'Fm.Term.hol':
                        var $6642 = self.path;
                        var self = Fm$Term$equal$hole$($6642, _a$1);
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $6644 = self.value;
                                var $6645 = self.errors;
                                var self = $6644;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $6647 = Fm$Check$result$(Maybe$none, $6645);
                                        var $6646 = $6647;
                                        break;
                                    case 'Maybe.some':
                                        var $6648 = self.value;
                                        var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6650 = self.value;
                                                var $6651 = self.errors;
                                                var $6652 = Fm$Check$result$($6650, List$concat$($6645, $6651));
                                                var $6649 = $6652;
                                                break;
                                        };
                                        var $6646 = $6649;
                                        break;
                                };
                                var $6643 = $6646;
                                break;
                        };
                        var $6607 = $6643;
                        break;
                    case 'Fm.Term.nat':
                        var $6653 = self.natx;
                        var $6654 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6607 = $6654;
                        break;
                    case 'Fm.Term.chr':
                        var $6655 = self.chrx;
                        var $6656 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6607 = $6656;
                        break;
                    case 'Fm.Term.str':
                        var $6657 = self.strx;
                        var $6658 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6607 = $6658;
                        break;
                    case 'Fm.Term.cse':
                        var $6659 = self.path;
                        var $6660 = self.expr;
                        var $6661 = self.name;
                        var $6662 = self.with;
                        var $6663 = self.cses;
                        var $6664 = self.moti;
                        var $6665 = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                        var $6607 = $6665;
                        break;
                    case 'Fm.Term.ori':
                        var $6666 = self.orig;
                        var $6667 = self.expr;
                        var $6668 = Fm$Term$equal$extra_holes$(_a$1, $6667);
                        var $6607 = $6668;
                        break;
                };
                var $5747 = $6607;
                break;
            case 'Fm.Term.ori':
                var $6669 = self.orig;
                var $6670 = self.expr;
                var $6671 = Fm$Term$equal$extra_holes$($6670, _b$2);
                var $5747 = $6671;
                break;
        };
        return $5747;
    };
    const Fm$Term$equal$extra_holes = x0 => x1 => Fm$Term$equal$extra_holes$(x0, x1);

    function Set$set$(_bits$1, _set$2) {
        var $6672 = Map$set$(_bits$1, Unit$new, _set$2);
        return $6672;
    };
    const Set$set = x0 => x1 => Set$set$(x0, x1);

    function Bool$eql$(_a$1, _b$2) {
        var self = _a$1;
        if (self) {
            var $6674 = _b$2;
            var $6673 = $6674;
        } else {
            var $6675 = (!_b$2);
            var $6673 = $6675;
        };
        return $6673;
    };
    const Bool$eql = x0 => x1 => Bool$eql$(x0, x1);

    function Fm$Term$equal$(_a$1, _b$2, _defs$3, _lv$4, _seen$5) {
        var _ah$6 = Fm$Term$serialize$(Fm$Term$reduce$(_a$1, Map$new), _lv$4, _lv$4, Bits$o, Bits$e);
        var _bh$7 = Fm$Term$serialize$(Fm$Term$reduce$(_b$2, Map$new), _lv$4, _lv$4, Bits$i, Bits$e);
        var self = (_bh$7 === _ah$6);
        if (self) {
            var $6677 = Fm$Check$result$(Maybe$some$(Bool$true), List$nil);
            var $6676 = $6677;
        } else {
            var _a1$8 = Fm$Term$reduce$(_a$1, _defs$3);
            var _b1$9 = Fm$Term$reduce$(_b$2, _defs$3);
            var _ah$10 = Fm$Term$serialize$(_a1$8, _lv$4, _lv$4, Bits$o, Bits$e);
            var _bh$11 = Fm$Term$serialize$(_b1$9, _lv$4, _lv$4, Bits$i, Bits$e);
            var self = (_bh$11 === _ah$10);
            if (self) {
                var $6679 = Fm$Check$result$(Maybe$some$(Bool$true), List$nil);
                var $6678 = $6679;
            } else {
                var _id$12 = (_bh$11 + _ah$10);
                var self = Set$has$(_id$12, _seen$5);
                if (self) {
                    var self = Fm$Term$equal$extra_holes$(_a$1, _b$2);
                    switch (self._) {
                        case 'Fm.Check.result':
                            var $6682 = self.value;
                            var $6683 = self.errors;
                            var self = $6682;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $6685 = Fm$Check$result$(Maybe$none, $6683);
                                    var $6684 = $6685;
                                    break;
                                case 'Maybe.some':
                                    var $6686 = self.value;
                                    var self = Fm$Check$result$(Maybe$some$(Bool$true), List$nil);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $6688 = self.value;
                                            var $6689 = self.errors;
                                            var $6690 = Fm$Check$result$($6688, List$concat$($6683, $6689));
                                            var $6687 = $6690;
                                            break;
                                    };
                                    var $6684 = $6687;
                                    break;
                            };
                            var $6681 = $6684;
                            break;
                    };
                    var $6680 = $6681;
                } else {
                    var self = _a1$8;
                    switch (self._) {
                        case 'Fm.Term.var':
                            var $6692 = self.name;
                            var $6693 = self.indx;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6695 = self.name;
                                    var $6696 = self.indx;
                                    var $6697 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6694 = $6697;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6698 = self.name;
                                    var $6699 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6694 = $6699;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6700 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6694 = $6700;
                                    break;
                                case 'Fm.Term.all':
                                    var $6701 = self.eras;
                                    var $6702 = self.self;
                                    var $6703 = self.name;
                                    var $6704 = self.xtyp;
                                    var $6705 = self.body;
                                    var $6706 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6694 = $6706;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6707 = self.name;
                                    var $6708 = self.body;
                                    var $6709 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6694 = $6709;
                                    break;
                                case 'Fm.Term.app':
                                    var $6710 = self.func;
                                    var $6711 = self.argm;
                                    var $6712 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6694 = $6712;
                                    break;
                                case 'Fm.Term.let':
                                    var $6713 = self.name;
                                    var $6714 = self.expr;
                                    var $6715 = self.body;
                                    var $6716 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6694 = $6716;
                                    break;
                                case 'Fm.Term.def':
                                    var $6717 = self.name;
                                    var $6718 = self.expr;
                                    var $6719 = self.body;
                                    var $6720 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6694 = $6720;
                                    break;
                                case 'Fm.Term.ann':
                                    var $6721 = self.done;
                                    var $6722 = self.term;
                                    var $6723 = self.type;
                                    var $6724 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6694 = $6724;
                                    break;
                                case 'Fm.Term.gol':
                                    var $6725 = self.name;
                                    var $6726 = self.dref;
                                    var $6727 = self.verb;
                                    var $6728 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6694 = $6728;
                                    break;
                                case 'Fm.Term.hol':
                                    var $6729 = self.path;
                                    var $6730 = Fm$Term$equal$hole$($6729, _a$1);
                                    var $6694 = $6730;
                                    break;
                                case 'Fm.Term.nat':
                                    var $6731 = self.natx;
                                    var $6732 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6694 = $6732;
                                    break;
                                case 'Fm.Term.chr':
                                    var $6733 = self.chrx;
                                    var $6734 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6694 = $6734;
                                    break;
                                case 'Fm.Term.str':
                                    var $6735 = self.strx;
                                    var $6736 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6694 = $6736;
                                    break;
                                case 'Fm.Term.cse':
                                    var $6737 = self.path;
                                    var $6738 = self.expr;
                                    var $6739 = self.name;
                                    var $6740 = self.with;
                                    var $6741 = self.cses;
                                    var $6742 = self.moti;
                                    var $6743 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6694 = $6743;
                                    break;
                                case 'Fm.Term.ori':
                                    var $6744 = self.orig;
                                    var $6745 = self.expr;
                                    var $6746 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6694 = $6746;
                                    break;
                            };
                            var $6691 = $6694;
                            break;
                        case 'Fm.Term.ref':
                            var $6747 = self.name;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6749 = self.name;
                                    var $6750 = self.indx;
                                    var $6751 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6748 = $6751;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6752 = self.name;
                                    var $6753 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6748 = $6753;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6754 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6748 = $6754;
                                    break;
                                case 'Fm.Term.all':
                                    var $6755 = self.eras;
                                    var $6756 = self.self;
                                    var $6757 = self.name;
                                    var $6758 = self.xtyp;
                                    var $6759 = self.body;
                                    var $6760 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6748 = $6760;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6761 = self.name;
                                    var $6762 = self.body;
                                    var $6763 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6748 = $6763;
                                    break;
                                case 'Fm.Term.app':
                                    var $6764 = self.func;
                                    var $6765 = self.argm;
                                    var $6766 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6748 = $6766;
                                    break;
                                case 'Fm.Term.let':
                                    var $6767 = self.name;
                                    var $6768 = self.expr;
                                    var $6769 = self.body;
                                    var $6770 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6748 = $6770;
                                    break;
                                case 'Fm.Term.def':
                                    var $6771 = self.name;
                                    var $6772 = self.expr;
                                    var $6773 = self.body;
                                    var $6774 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6748 = $6774;
                                    break;
                                case 'Fm.Term.ann':
                                    var $6775 = self.done;
                                    var $6776 = self.term;
                                    var $6777 = self.type;
                                    var $6778 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6748 = $6778;
                                    break;
                                case 'Fm.Term.gol':
                                    var $6779 = self.name;
                                    var $6780 = self.dref;
                                    var $6781 = self.verb;
                                    var $6782 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6748 = $6782;
                                    break;
                                case 'Fm.Term.hol':
                                    var $6783 = self.path;
                                    var $6784 = Fm$Term$equal$hole$($6783, _a$1);
                                    var $6748 = $6784;
                                    break;
                                case 'Fm.Term.nat':
                                    var $6785 = self.natx;
                                    var $6786 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6748 = $6786;
                                    break;
                                case 'Fm.Term.chr':
                                    var $6787 = self.chrx;
                                    var $6788 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6748 = $6788;
                                    break;
                                case 'Fm.Term.str':
                                    var $6789 = self.strx;
                                    var $6790 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6748 = $6790;
                                    break;
                                case 'Fm.Term.cse':
                                    var $6791 = self.path;
                                    var $6792 = self.expr;
                                    var $6793 = self.name;
                                    var $6794 = self.with;
                                    var $6795 = self.cses;
                                    var $6796 = self.moti;
                                    var $6797 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6748 = $6797;
                                    break;
                                case 'Fm.Term.ori':
                                    var $6798 = self.orig;
                                    var $6799 = self.expr;
                                    var $6800 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6748 = $6800;
                                    break;
                            };
                            var $6691 = $6748;
                            break;
                        case 'Fm.Term.typ':
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6802 = self.name;
                                    var $6803 = self.indx;
                                    var $6804 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6801 = $6804;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6805 = self.name;
                                    var $6806 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6801 = $6806;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6807 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6801 = $6807;
                                    break;
                                case 'Fm.Term.all':
                                    var $6808 = self.eras;
                                    var $6809 = self.self;
                                    var $6810 = self.name;
                                    var $6811 = self.xtyp;
                                    var $6812 = self.body;
                                    var $6813 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6801 = $6813;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6814 = self.name;
                                    var $6815 = self.body;
                                    var $6816 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6801 = $6816;
                                    break;
                                case 'Fm.Term.app':
                                    var $6817 = self.func;
                                    var $6818 = self.argm;
                                    var $6819 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6801 = $6819;
                                    break;
                                case 'Fm.Term.let':
                                    var $6820 = self.name;
                                    var $6821 = self.expr;
                                    var $6822 = self.body;
                                    var $6823 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6801 = $6823;
                                    break;
                                case 'Fm.Term.def':
                                    var $6824 = self.name;
                                    var $6825 = self.expr;
                                    var $6826 = self.body;
                                    var $6827 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6801 = $6827;
                                    break;
                                case 'Fm.Term.ann':
                                    var $6828 = self.done;
                                    var $6829 = self.term;
                                    var $6830 = self.type;
                                    var $6831 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6801 = $6831;
                                    break;
                                case 'Fm.Term.gol':
                                    var $6832 = self.name;
                                    var $6833 = self.dref;
                                    var $6834 = self.verb;
                                    var $6835 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6801 = $6835;
                                    break;
                                case 'Fm.Term.hol':
                                    var $6836 = self.path;
                                    var $6837 = Fm$Term$equal$hole$($6836, _a$1);
                                    var $6801 = $6837;
                                    break;
                                case 'Fm.Term.nat':
                                    var $6838 = self.natx;
                                    var $6839 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6801 = $6839;
                                    break;
                                case 'Fm.Term.chr':
                                    var $6840 = self.chrx;
                                    var $6841 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6801 = $6841;
                                    break;
                                case 'Fm.Term.str':
                                    var $6842 = self.strx;
                                    var $6843 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6801 = $6843;
                                    break;
                                case 'Fm.Term.cse':
                                    var $6844 = self.path;
                                    var $6845 = self.expr;
                                    var $6846 = self.name;
                                    var $6847 = self.with;
                                    var $6848 = self.cses;
                                    var $6849 = self.moti;
                                    var $6850 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6801 = $6850;
                                    break;
                                case 'Fm.Term.ori':
                                    var $6851 = self.orig;
                                    var $6852 = self.expr;
                                    var $6853 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6801 = $6853;
                                    break;
                            };
                            var $6691 = $6801;
                            break;
                        case 'Fm.Term.all':
                            var $6854 = self.eras;
                            var $6855 = self.self;
                            var $6856 = self.name;
                            var $6857 = self.xtyp;
                            var $6858 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6860 = self.name;
                                    var $6861 = self.indx;
                                    var $6862 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6859 = $6862;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6863 = self.name;
                                    var $6864 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6859 = $6864;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6865 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6859 = $6865;
                                    break;
                                case 'Fm.Term.all':
                                    var $6866 = self.eras;
                                    var $6867 = self.self;
                                    var $6868 = self.name;
                                    var $6869 = self.xtyp;
                                    var $6870 = self.body;
                                    var _seen$23 = Set$set$(_id$12, _seen$5);
                                    var _a1_body$24 = $6858(Fm$Term$var$($6855, _lv$4))(Fm$Term$var$($6856, Nat$succ$(_lv$4)));
                                    var _b1_body$25 = $6870(Fm$Term$var$($6867, _lv$4))(Fm$Term$var$($6868, Nat$succ$(_lv$4)));
                                    var _eq_self$26 = ($6855 === $6867);
                                    var _eq_eras$27 = Bool$eql$($6854, $6866);
                                    var self = (_eq_self$26 && _eq_eras$27);
                                    if (self) {
                                        var self = Fm$Term$equal$($6857, $6869, _defs$3, _lv$4, _seen$23);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $6873 = self.value;
                                                var $6874 = self.errors;
                                                var self = $6873;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $6876 = Fm$Check$result$(Maybe$none, $6874);
                                                        var $6875 = $6876;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $6877 = self.value;
                                                        var self = Fm$Term$equal$(_a1_body$24, _b1_body$25, _defs$3, Nat$succ$(Nat$succ$(_lv$4)), _seen$23);
                                                        switch (self._) {
                                                            case 'Fm.Check.result':
                                                                var $6879 = self.value;
                                                                var $6880 = self.errors;
                                                                var self = $6879;
                                                                switch (self._) {
                                                                    case 'Maybe.none':
                                                                        var $6882 = Fm$Check$result$(Maybe$none, $6880);
                                                                        var $6881 = $6882;
                                                                        break;
                                                                    case 'Maybe.some':
                                                                        var $6883 = self.value;
                                                                        var self = Fm$Check$result$(Maybe$some$(($6877 && $6883)), List$nil);
                                                                        switch (self._) {
                                                                            case 'Fm.Check.result':
                                                                                var $6885 = self.value;
                                                                                var $6886 = self.errors;
                                                                                var $6887 = Fm$Check$result$($6885, List$concat$($6880, $6886));
                                                                                var $6884 = $6887;
                                                                                break;
                                                                        };
                                                                        var $6881 = $6884;
                                                                        break;
                                                                };
                                                                var self = $6881;
                                                                break;
                                                        };
                                                        switch (self._) {
                                                            case 'Fm.Check.result':
                                                                var $6888 = self.value;
                                                                var $6889 = self.errors;
                                                                var $6890 = Fm$Check$result$($6888, List$concat$($6874, $6889));
                                                                var $6878 = $6890;
                                                                break;
                                                        };
                                                        var $6875 = $6878;
                                                        break;
                                                };
                                                var $6872 = $6875;
                                                break;
                                        };
                                        var $6871 = $6872;
                                    } else {
                                        var $6891 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                        var $6871 = $6891;
                                    };
                                    var $6859 = $6871;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6892 = self.name;
                                    var $6893 = self.body;
                                    var $6894 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6859 = $6894;
                                    break;
                                case 'Fm.Term.app':
                                    var $6895 = self.func;
                                    var $6896 = self.argm;
                                    var $6897 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6859 = $6897;
                                    break;
                                case 'Fm.Term.let':
                                    var $6898 = self.name;
                                    var $6899 = self.expr;
                                    var $6900 = self.body;
                                    var $6901 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6859 = $6901;
                                    break;
                                case 'Fm.Term.def':
                                    var $6902 = self.name;
                                    var $6903 = self.expr;
                                    var $6904 = self.body;
                                    var $6905 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6859 = $6905;
                                    break;
                                case 'Fm.Term.ann':
                                    var $6906 = self.done;
                                    var $6907 = self.term;
                                    var $6908 = self.type;
                                    var $6909 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6859 = $6909;
                                    break;
                                case 'Fm.Term.gol':
                                    var $6910 = self.name;
                                    var $6911 = self.dref;
                                    var $6912 = self.verb;
                                    var $6913 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6859 = $6913;
                                    break;
                                case 'Fm.Term.hol':
                                    var $6914 = self.path;
                                    var $6915 = Fm$Term$equal$hole$($6914, _a$1);
                                    var $6859 = $6915;
                                    break;
                                case 'Fm.Term.nat':
                                    var $6916 = self.natx;
                                    var $6917 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6859 = $6917;
                                    break;
                                case 'Fm.Term.chr':
                                    var $6918 = self.chrx;
                                    var $6919 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6859 = $6919;
                                    break;
                                case 'Fm.Term.str':
                                    var $6920 = self.strx;
                                    var $6921 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6859 = $6921;
                                    break;
                                case 'Fm.Term.cse':
                                    var $6922 = self.path;
                                    var $6923 = self.expr;
                                    var $6924 = self.name;
                                    var $6925 = self.with;
                                    var $6926 = self.cses;
                                    var $6927 = self.moti;
                                    var $6928 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6859 = $6928;
                                    break;
                                case 'Fm.Term.ori':
                                    var $6929 = self.orig;
                                    var $6930 = self.expr;
                                    var $6931 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6859 = $6931;
                                    break;
                            };
                            var $6691 = $6859;
                            break;
                        case 'Fm.Term.lam':
                            var $6932 = self.name;
                            var $6933 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6935 = self.name;
                                    var $6936 = self.indx;
                                    var $6937 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6934 = $6937;
                                    break;
                                case 'Fm.Term.ref':
                                    var $6938 = self.name;
                                    var $6939 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6934 = $6939;
                                    break;
                                case 'Fm.Term.typ':
                                    var $6940 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6934 = $6940;
                                    break;
                                case 'Fm.Term.all':
                                    var $6941 = self.eras;
                                    var $6942 = self.self;
                                    var $6943 = self.name;
                                    var $6944 = self.xtyp;
                                    var $6945 = self.body;
                                    var $6946 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6934 = $6946;
                                    break;
                                case 'Fm.Term.lam':
                                    var $6947 = self.name;
                                    var $6948 = self.body;
                                    var _seen$17 = Set$set$(_id$12, _seen$5);
                                    var _a1_body$18 = $6933(Fm$Term$var$($6932, _lv$4));
                                    var _b1_body$19 = $6948(Fm$Term$var$($6947, _lv$4));
                                    var self = Fm$Term$equal$(_a1_body$18, _b1_body$19, _defs$3, Nat$succ$(_lv$4), _seen$17);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $6950 = self.value;
                                            var $6951 = self.errors;
                                            var self = $6950;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $6953 = Fm$Check$result$(Maybe$none, $6951);
                                                    var $6952 = $6953;
                                                    break;
                                                case 'Maybe.some':
                                                    var $6954 = self.value;
                                                    var self = Fm$Check$result$(Maybe$some$($6954), List$nil);
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $6956 = self.value;
                                                            var $6957 = self.errors;
                                                            var $6958 = Fm$Check$result$($6956, List$concat$($6951, $6957));
                                                            var $6955 = $6958;
                                                            break;
                                                    };
                                                    var $6952 = $6955;
                                                    break;
                                            };
                                            var $6949 = $6952;
                                            break;
                                    };
                                    var $6934 = $6949;
                                    break;
                                case 'Fm.Term.app':
                                    var $6959 = self.func;
                                    var $6960 = self.argm;
                                    var $6961 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6934 = $6961;
                                    break;
                                case 'Fm.Term.let':
                                    var $6962 = self.name;
                                    var $6963 = self.expr;
                                    var $6964 = self.body;
                                    var $6965 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6934 = $6965;
                                    break;
                                case 'Fm.Term.def':
                                    var $6966 = self.name;
                                    var $6967 = self.expr;
                                    var $6968 = self.body;
                                    var $6969 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6934 = $6969;
                                    break;
                                case 'Fm.Term.ann':
                                    var $6970 = self.done;
                                    var $6971 = self.term;
                                    var $6972 = self.type;
                                    var $6973 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6934 = $6973;
                                    break;
                                case 'Fm.Term.gol':
                                    var $6974 = self.name;
                                    var $6975 = self.dref;
                                    var $6976 = self.verb;
                                    var $6977 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6934 = $6977;
                                    break;
                                case 'Fm.Term.hol':
                                    var $6978 = self.path;
                                    var $6979 = Fm$Term$equal$hole$($6978, _a$1);
                                    var $6934 = $6979;
                                    break;
                                case 'Fm.Term.nat':
                                    var $6980 = self.natx;
                                    var $6981 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6934 = $6981;
                                    break;
                                case 'Fm.Term.chr':
                                    var $6982 = self.chrx;
                                    var $6983 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6934 = $6983;
                                    break;
                                case 'Fm.Term.str':
                                    var $6984 = self.strx;
                                    var $6985 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6934 = $6985;
                                    break;
                                case 'Fm.Term.cse':
                                    var $6986 = self.path;
                                    var $6987 = self.expr;
                                    var $6988 = self.name;
                                    var $6989 = self.with;
                                    var $6990 = self.cses;
                                    var $6991 = self.moti;
                                    var $6992 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6934 = $6992;
                                    break;
                                case 'Fm.Term.ori':
                                    var $6993 = self.orig;
                                    var $6994 = self.expr;
                                    var $6995 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6934 = $6995;
                                    break;
                            };
                            var $6691 = $6934;
                            break;
                        case 'Fm.Term.app':
                            var $6996 = self.func;
                            var $6997 = self.argm;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $6999 = self.name;
                                    var $7000 = self.indx;
                                    var $7001 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7001;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7002 = self.name;
                                    var $7003 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7003;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7004 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7004;
                                    break;
                                case 'Fm.Term.all':
                                    var $7005 = self.eras;
                                    var $7006 = self.self;
                                    var $7007 = self.name;
                                    var $7008 = self.xtyp;
                                    var $7009 = self.body;
                                    var $7010 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7010;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7011 = self.name;
                                    var $7012 = self.body;
                                    var $7013 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7013;
                                    break;
                                case 'Fm.Term.app':
                                    var $7014 = self.func;
                                    var $7015 = self.argm;
                                    var _seen$17 = Set$set$(_id$12, _seen$5);
                                    var self = Fm$Term$equal$($6996, $7014, _defs$3, _lv$4, _seen$17);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $7017 = self.value;
                                            var $7018 = self.errors;
                                            var self = $7017;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $7020 = Fm$Check$result$(Maybe$none, $7018);
                                                    var $7019 = $7020;
                                                    break;
                                                case 'Maybe.some':
                                                    var $7021 = self.value;
                                                    var self = Fm$Term$equal$($6997, $7015, _defs$3, _lv$4, _seen$17);
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $7023 = self.value;
                                                            var $7024 = self.errors;
                                                            var self = $7023;
                                                            switch (self._) {
                                                                case 'Maybe.none':
                                                                    var $7026 = Fm$Check$result$(Maybe$none, $7024);
                                                                    var $7025 = $7026;
                                                                    break;
                                                                case 'Maybe.some':
                                                                    var $7027 = self.value;
                                                                    var self = Fm$Check$result$(Maybe$some$(($7021 && $7027)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Fm.Check.result':
                                                                            var $7029 = self.value;
                                                                            var $7030 = self.errors;
                                                                            var $7031 = Fm$Check$result$($7029, List$concat$($7024, $7030));
                                                                            var $7028 = $7031;
                                                                            break;
                                                                    };
                                                                    var $7025 = $7028;
                                                                    break;
                                                            };
                                                            var self = $7025;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $7032 = self.value;
                                                            var $7033 = self.errors;
                                                            var $7034 = Fm$Check$result$($7032, List$concat$($7018, $7033));
                                                            var $7022 = $7034;
                                                            break;
                                                    };
                                                    var $7019 = $7022;
                                                    break;
                                            };
                                            var $7016 = $7019;
                                            break;
                                    };
                                    var $6998 = $7016;
                                    break;
                                case 'Fm.Term.let':
                                    var $7035 = self.name;
                                    var $7036 = self.expr;
                                    var $7037 = self.body;
                                    var $7038 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7038;
                                    break;
                                case 'Fm.Term.def':
                                    var $7039 = self.name;
                                    var $7040 = self.expr;
                                    var $7041 = self.body;
                                    var $7042 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7042;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7043 = self.done;
                                    var $7044 = self.term;
                                    var $7045 = self.type;
                                    var $7046 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7046;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7047 = self.name;
                                    var $7048 = self.dref;
                                    var $7049 = self.verb;
                                    var $7050 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7050;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7051 = self.path;
                                    var $7052 = Fm$Term$equal$hole$($7051, _a$1);
                                    var $6998 = $7052;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7053 = self.natx;
                                    var $7054 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7054;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7055 = self.chrx;
                                    var $7056 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7056;
                                    break;
                                case 'Fm.Term.str':
                                    var $7057 = self.strx;
                                    var $7058 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7058;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7059 = self.path;
                                    var $7060 = self.expr;
                                    var $7061 = self.name;
                                    var $7062 = self.with;
                                    var $7063 = self.cses;
                                    var $7064 = self.moti;
                                    var $7065 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7065;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7066 = self.orig;
                                    var $7067 = self.expr;
                                    var $7068 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $6998 = $7068;
                                    break;
                            };
                            var $6691 = $6998;
                            break;
                        case 'Fm.Term.let':
                            var $7069 = self.name;
                            var $7070 = self.expr;
                            var $7071 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7073 = self.name;
                                    var $7074 = self.indx;
                                    var $7075 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7072 = $7075;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7076 = self.name;
                                    var $7077 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7072 = $7077;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7078 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7072 = $7078;
                                    break;
                                case 'Fm.Term.all':
                                    var $7079 = self.eras;
                                    var $7080 = self.self;
                                    var $7081 = self.name;
                                    var $7082 = self.xtyp;
                                    var $7083 = self.body;
                                    var $7084 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7072 = $7084;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7085 = self.name;
                                    var $7086 = self.body;
                                    var $7087 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7072 = $7087;
                                    break;
                                case 'Fm.Term.app':
                                    var $7088 = self.func;
                                    var $7089 = self.argm;
                                    var $7090 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7072 = $7090;
                                    break;
                                case 'Fm.Term.let':
                                    var $7091 = self.name;
                                    var $7092 = self.expr;
                                    var $7093 = self.body;
                                    var _seen$19 = Set$set$(_id$12, _seen$5);
                                    var _a1_body$20 = $7071(Fm$Term$var$($7069, _lv$4));
                                    var _b1_body$21 = $7093(Fm$Term$var$($7091, _lv$4));
                                    var self = Fm$Term$equal$($7070, $7092, _defs$3, _lv$4, _seen$19);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $7095 = self.value;
                                            var $7096 = self.errors;
                                            var self = $7095;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $7098 = Fm$Check$result$(Maybe$none, $7096);
                                                    var $7097 = $7098;
                                                    break;
                                                case 'Maybe.some':
                                                    var $7099 = self.value;
                                                    var self = Fm$Term$equal$(_a1_body$20, _b1_body$21, _defs$3, Nat$succ$(_lv$4), _seen$19);
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $7101 = self.value;
                                                            var $7102 = self.errors;
                                                            var self = $7101;
                                                            switch (self._) {
                                                                case 'Maybe.none':
                                                                    var $7104 = Fm$Check$result$(Maybe$none, $7102);
                                                                    var $7103 = $7104;
                                                                    break;
                                                                case 'Maybe.some':
                                                                    var $7105 = self.value;
                                                                    var self = Fm$Check$result$(Maybe$some$(($7099 && $7105)), List$nil);
                                                                    switch (self._) {
                                                                        case 'Fm.Check.result':
                                                                            var $7107 = self.value;
                                                                            var $7108 = self.errors;
                                                                            var $7109 = Fm$Check$result$($7107, List$concat$($7102, $7108));
                                                                            var $7106 = $7109;
                                                                            break;
                                                                    };
                                                                    var $7103 = $7106;
                                                                    break;
                                                            };
                                                            var self = $7103;
                                                            break;
                                                    };
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $7110 = self.value;
                                                            var $7111 = self.errors;
                                                            var $7112 = Fm$Check$result$($7110, List$concat$($7096, $7111));
                                                            var $7100 = $7112;
                                                            break;
                                                    };
                                                    var $7097 = $7100;
                                                    break;
                                            };
                                            var $7094 = $7097;
                                            break;
                                    };
                                    var $7072 = $7094;
                                    break;
                                case 'Fm.Term.def':
                                    var $7113 = self.name;
                                    var $7114 = self.expr;
                                    var $7115 = self.body;
                                    var $7116 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7072 = $7116;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7117 = self.done;
                                    var $7118 = self.term;
                                    var $7119 = self.type;
                                    var $7120 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7072 = $7120;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7121 = self.name;
                                    var $7122 = self.dref;
                                    var $7123 = self.verb;
                                    var $7124 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7072 = $7124;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7125 = self.path;
                                    var $7126 = Fm$Term$equal$hole$($7125, _a$1);
                                    var $7072 = $7126;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7127 = self.natx;
                                    var $7128 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7072 = $7128;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7129 = self.chrx;
                                    var $7130 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7072 = $7130;
                                    break;
                                case 'Fm.Term.str':
                                    var $7131 = self.strx;
                                    var $7132 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7072 = $7132;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7133 = self.path;
                                    var $7134 = self.expr;
                                    var $7135 = self.name;
                                    var $7136 = self.with;
                                    var $7137 = self.cses;
                                    var $7138 = self.moti;
                                    var $7139 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7072 = $7139;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7140 = self.orig;
                                    var $7141 = self.expr;
                                    var $7142 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7072 = $7142;
                                    break;
                            };
                            var $6691 = $7072;
                            break;
                        case 'Fm.Term.def':
                            var $7143 = self.name;
                            var $7144 = self.expr;
                            var $7145 = self.body;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7147 = self.name;
                                    var $7148 = self.indx;
                                    var $7149 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7146 = $7149;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7150 = self.name;
                                    var $7151 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7146 = $7151;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7152 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7146 = $7152;
                                    break;
                                case 'Fm.Term.all':
                                    var $7153 = self.eras;
                                    var $7154 = self.self;
                                    var $7155 = self.name;
                                    var $7156 = self.xtyp;
                                    var $7157 = self.body;
                                    var $7158 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7146 = $7158;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7159 = self.name;
                                    var $7160 = self.body;
                                    var $7161 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7146 = $7161;
                                    break;
                                case 'Fm.Term.app':
                                    var $7162 = self.func;
                                    var $7163 = self.argm;
                                    var $7164 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7146 = $7164;
                                    break;
                                case 'Fm.Term.let':
                                    var $7165 = self.name;
                                    var $7166 = self.expr;
                                    var $7167 = self.body;
                                    var $7168 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7146 = $7168;
                                    break;
                                case 'Fm.Term.def':
                                    var $7169 = self.name;
                                    var $7170 = self.expr;
                                    var $7171 = self.body;
                                    var $7172 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7146 = $7172;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7173 = self.done;
                                    var $7174 = self.term;
                                    var $7175 = self.type;
                                    var $7176 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7146 = $7176;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7177 = self.name;
                                    var $7178 = self.dref;
                                    var $7179 = self.verb;
                                    var $7180 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7146 = $7180;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7181 = self.path;
                                    var $7182 = Fm$Term$equal$hole$($7181, _a$1);
                                    var $7146 = $7182;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7183 = self.natx;
                                    var $7184 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7146 = $7184;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7185 = self.chrx;
                                    var $7186 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7146 = $7186;
                                    break;
                                case 'Fm.Term.str':
                                    var $7187 = self.strx;
                                    var $7188 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7146 = $7188;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7189 = self.path;
                                    var $7190 = self.expr;
                                    var $7191 = self.name;
                                    var $7192 = self.with;
                                    var $7193 = self.cses;
                                    var $7194 = self.moti;
                                    var $7195 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7146 = $7195;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7196 = self.orig;
                                    var $7197 = self.expr;
                                    var $7198 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7146 = $7198;
                                    break;
                            };
                            var $6691 = $7146;
                            break;
                        case 'Fm.Term.ann':
                            var $7199 = self.done;
                            var $7200 = self.term;
                            var $7201 = self.type;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7203 = self.name;
                                    var $7204 = self.indx;
                                    var $7205 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7202 = $7205;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7206 = self.name;
                                    var $7207 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7202 = $7207;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7208 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7202 = $7208;
                                    break;
                                case 'Fm.Term.all':
                                    var $7209 = self.eras;
                                    var $7210 = self.self;
                                    var $7211 = self.name;
                                    var $7212 = self.xtyp;
                                    var $7213 = self.body;
                                    var $7214 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7202 = $7214;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7215 = self.name;
                                    var $7216 = self.body;
                                    var $7217 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7202 = $7217;
                                    break;
                                case 'Fm.Term.app':
                                    var $7218 = self.func;
                                    var $7219 = self.argm;
                                    var $7220 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7202 = $7220;
                                    break;
                                case 'Fm.Term.let':
                                    var $7221 = self.name;
                                    var $7222 = self.expr;
                                    var $7223 = self.body;
                                    var $7224 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7202 = $7224;
                                    break;
                                case 'Fm.Term.def':
                                    var $7225 = self.name;
                                    var $7226 = self.expr;
                                    var $7227 = self.body;
                                    var $7228 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7202 = $7228;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7229 = self.done;
                                    var $7230 = self.term;
                                    var $7231 = self.type;
                                    var $7232 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7202 = $7232;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7233 = self.name;
                                    var $7234 = self.dref;
                                    var $7235 = self.verb;
                                    var $7236 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7202 = $7236;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7237 = self.path;
                                    var $7238 = Fm$Term$equal$hole$($7237, _a$1);
                                    var $7202 = $7238;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7239 = self.natx;
                                    var $7240 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7202 = $7240;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7241 = self.chrx;
                                    var $7242 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7202 = $7242;
                                    break;
                                case 'Fm.Term.str':
                                    var $7243 = self.strx;
                                    var $7244 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7202 = $7244;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7245 = self.path;
                                    var $7246 = self.expr;
                                    var $7247 = self.name;
                                    var $7248 = self.with;
                                    var $7249 = self.cses;
                                    var $7250 = self.moti;
                                    var $7251 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7202 = $7251;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7252 = self.orig;
                                    var $7253 = self.expr;
                                    var $7254 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7202 = $7254;
                                    break;
                            };
                            var $6691 = $7202;
                            break;
                        case 'Fm.Term.gol':
                            var $7255 = self.name;
                            var $7256 = self.dref;
                            var $7257 = self.verb;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7259 = self.name;
                                    var $7260 = self.indx;
                                    var $7261 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7258 = $7261;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7262 = self.name;
                                    var $7263 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7258 = $7263;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7264 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7258 = $7264;
                                    break;
                                case 'Fm.Term.all':
                                    var $7265 = self.eras;
                                    var $7266 = self.self;
                                    var $7267 = self.name;
                                    var $7268 = self.xtyp;
                                    var $7269 = self.body;
                                    var $7270 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7258 = $7270;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7271 = self.name;
                                    var $7272 = self.body;
                                    var $7273 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7258 = $7273;
                                    break;
                                case 'Fm.Term.app':
                                    var $7274 = self.func;
                                    var $7275 = self.argm;
                                    var $7276 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7258 = $7276;
                                    break;
                                case 'Fm.Term.let':
                                    var $7277 = self.name;
                                    var $7278 = self.expr;
                                    var $7279 = self.body;
                                    var $7280 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7258 = $7280;
                                    break;
                                case 'Fm.Term.def':
                                    var $7281 = self.name;
                                    var $7282 = self.expr;
                                    var $7283 = self.body;
                                    var $7284 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7258 = $7284;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7285 = self.done;
                                    var $7286 = self.term;
                                    var $7287 = self.type;
                                    var $7288 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7258 = $7288;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7289 = self.name;
                                    var $7290 = self.dref;
                                    var $7291 = self.verb;
                                    var $7292 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7258 = $7292;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7293 = self.path;
                                    var $7294 = Fm$Term$equal$hole$($7293, _a$1);
                                    var $7258 = $7294;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7295 = self.natx;
                                    var $7296 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7258 = $7296;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7297 = self.chrx;
                                    var $7298 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7258 = $7298;
                                    break;
                                case 'Fm.Term.str':
                                    var $7299 = self.strx;
                                    var $7300 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7258 = $7300;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7301 = self.path;
                                    var $7302 = self.expr;
                                    var $7303 = self.name;
                                    var $7304 = self.with;
                                    var $7305 = self.cses;
                                    var $7306 = self.moti;
                                    var $7307 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7258 = $7307;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7308 = self.orig;
                                    var $7309 = self.expr;
                                    var $7310 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7258 = $7310;
                                    break;
                            };
                            var $6691 = $7258;
                            break;
                        case 'Fm.Term.hol':
                            var $7311 = self.path;
                            var $7312 = Fm$Term$equal$hole$($7311, _b$2);
                            var $6691 = $7312;
                            break;
                        case 'Fm.Term.nat':
                            var $7313 = self.natx;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7315 = self.name;
                                    var $7316 = self.indx;
                                    var $7317 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7314 = $7317;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7318 = self.name;
                                    var $7319 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7314 = $7319;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7320 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7314 = $7320;
                                    break;
                                case 'Fm.Term.all':
                                    var $7321 = self.eras;
                                    var $7322 = self.self;
                                    var $7323 = self.name;
                                    var $7324 = self.xtyp;
                                    var $7325 = self.body;
                                    var $7326 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7314 = $7326;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7327 = self.name;
                                    var $7328 = self.body;
                                    var $7329 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7314 = $7329;
                                    break;
                                case 'Fm.Term.app':
                                    var $7330 = self.func;
                                    var $7331 = self.argm;
                                    var $7332 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7314 = $7332;
                                    break;
                                case 'Fm.Term.let':
                                    var $7333 = self.name;
                                    var $7334 = self.expr;
                                    var $7335 = self.body;
                                    var $7336 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7314 = $7336;
                                    break;
                                case 'Fm.Term.def':
                                    var $7337 = self.name;
                                    var $7338 = self.expr;
                                    var $7339 = self.body;
                                    var $7340 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7314 = $7340;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7341 = self.done;
                                    var $7342 = self.term;
                                    var $7343 = self.type;
                                    var $7344 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7314 = $7344;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7345 = self.name;
                                    var $7346 = self.dref;
                                    var $7347 = self.verb;
                                    var $7348 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7314 = $7348;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7349 = self.path;
                                    var $7350 = Fm$Term$equal$hole$($7349, _a$1);
                                    var $7314 = $7350;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7351 = self.natx;
                                    var $7352 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7314 = $7352;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7353 = self.chrx;
                                    var $7354 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7314 = $7354;
                                    break;
                                case 'Fm.Term.str':
                                    var $7355 = self.strx;
                                    var $7356 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7314 = $7356;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7357 = self.path;
                                    var $7358 = self.expr;
                                    var $7359 = self.name;
                                    var $7360 = self.with;
                                    var $7361 = self.cses;
                                    var $7362 = self.moti;
                                    var $7363 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7314 = $7363;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7364 = self.orig;
                                    var $7365 = self.expr;
                                    var $7366 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7314 = $7366;
                                    break;
                            };
                            var $6691 = $7314;
                            break;
                        case 'Fm.Term.chr':
                            var $7367 = self.chrx;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7369 = self.name;
                                    var $7370 = self.indx;
                                    var $7371 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7368 = $7371;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7372 = self.name;
                                    var $7373 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7368 = $7373;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7374 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7368 = $7374;
                                    break;
                                case 'Fm.Term.all':
                                    var $7375 = self.eras;
                                    var $7376 = self.self;
                                    var $7377 = self.name;
                                    var $7378 = self.xtyp;
                                    var $7379 = self.body;
                                    var $7380 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7368 = $7380;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7381 = self.name;
                                    var $7382 = self.body;
                                    var $7383 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7368 = $7383;
                                    break;
                                case 'Fm.Term.app':
                                    var $7384 = self.func;
                                    var $7385 = self.argm;
                                    var $7386 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7368 = $7386;
                                    break;
                                case 'Fm.Term.let':
                                    var $7387 = self.name;
                                    var $7388 = self.expr;
                                    var $7389 = self.body;
                                    var $7390 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7368 = $7390;
                                    break;
                                case 'Fm.Term.def':
                                    var $7391 = self.name;
                                    var $7392 = self.expr;
                                    var $7393 = self.body;
                                    var $7394 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7368 = $7394;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7395 = self.done;
                                    var $7396 = self.term;
                                    var $7397 = self.type;
                                    var $7398 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7368 = $7398;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7399 = self.name;
                                    var $7400 = self.dref;
                                    var $7401 = self.verb;
                                    var $7402 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7368 = $7402;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7403 = self.path;
                                    var $7404 = Fm$Term$equal$hole$($7403, _a$1);
                                    var $7368 = $7404;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7405 = self.natx;
                                    var $7406 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7368 = $7406;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7407 = self.chrx;
                                    var $7408 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7368 = $7408;
                                    break;
                                case 'Fm.Term.str':
                                    var $7409 = self.strx;
                                    var $7410 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7368 = $7410;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7411 = self.path;
                                    var $7412 = self.expr;
                                    var $7413 = self.name;
                                    var $7414 = self.with;
                                    var $7415 = self.cses;
                                    var $7416 = self.moti;
                                    var $7417 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7368 = $7417;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7418 = self.orig;
                                    var $7419 = self.expr;
                                    var $7420 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7368 = $7420;
                                    break;
                            };
                            var $6691 = $7368;
                            break;
                        case 'Fm.Term.str':
                            var $7421 = self.strx;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7423 = self.name;
                                    var $7424 = self.indx;
                                    var $7425 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7422 = $7425;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7426 = self.name;
                                    var $7427 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7422 = $7427;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7428 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7422 = $7428;
                                    break;
                                case 'Fm.Term.all':
                                    var $7429 = self.eras;
                                    var $7430 = self.self;
                                    var $7431 = self.name;
                                    var $7432 = self.xtyp;
                                    var $7433 = self.body;
                                    var $7434 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7422 = $7434;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7435 = self.name;
                                    var $7436 = self.body;
                                    var $7437 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7422 = $7437;
                                    break;
                                case 'Fm.Term.app':
                                    var $7438 = self.func;
                                    var $7439 = self.argm;
                                    var $7440 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7422 = $7440;
                                    break;
                                case 'Fm.Term.let':
                                    var $7441 = self.name;
                                    var $7442 = self.expr;
                                    var $7443 = self.body;
                                    var $7444 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7422 = $7444;
                                    break;
                                case 'Fm.Term.def':
                                    var $7445 = self.name;
                                    var $7446 = self.expr;
                                    var $7447 = self.body;
                                    var $7448 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7422 = $7448;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7449 = self.done;
                                    var $7450 = self.term;
                                    var $7451 = self.type;
                                    var $7452 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7422 = $7452;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7453 = self.name;
                                    var $7454 = self.dref;
                                    var $7455 = self.verb;
                                    var $7456 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7422 = $7456;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7457 = self.path;
                                    var $7458 = Fm$Term$equal$hole$($7457, _a$1);
                                    var $7422 = $7458;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7459 = self.natx;
                                    var $7460 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7422 = $7460;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7461 = self.chrx;
                                    var $7462 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7422 = $7462;
                                    break;
                                case 'Fm.Term.str':
                                    var $7463 = self.strx;
                                    var $7464 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7422 = $7464;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7465 = self.path;
                                    var $7466 = self.expr;
                                    var $7467 = self.name;
                                    var $7468 = self.with;
                                    var $7469 = self.cses;
                                    var $7470 = self.moti;
                                    var $7471 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7422 = $7471;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7472 = self.orig;
                                    var $7473 = self.expr;
                                    var $7474 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7422 = $7474;
                                    break;
                            };
                            var $6691 = $7422;
                            break;
                        case 'Fm.Term.cse':
                            var $7475 = self.path;
                            var $7476 = self.expr;
                            var $7477 = self.name;
                            var $7478 = self.with;
                            var $7479 = self.cses;
                            var $7480 = self.moti;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7482 = self.name;
                                    var $7483 = self.indx;
                                    var $7484 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7481 = $7484;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7485 = self.name;
                                    var $7486 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7481 = $7486;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7487 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7481 = $7487;
                                    break;
                                case 'Fm.Term.all':
                                    var $7488 = self.eras;
                                    var $7489 = self.self;
                                    var $7490 = self.name;
                                    var $7491 = self.xtyp;
                                    var $7492 = self.body;
                                    var $7493 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7481 = $7493;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7494 = self.name;
                                    var $7495 = self.body;
                                    var $7496 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7481 = $7496;
                                    break;
                                case 'Fm.Term.app':
                                    var $7497 = self.func;
                                    var $7498 = self.argm;
                                    var $7499 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7481 = $7499;
                                    break;
                                case 'Fm.Term.let':
                                    var $7500 = self.name;
                                    var $7501 = self.expr;
                                    var $7502 = self.body;
                                    var $7503 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7481 = $7503;
                                    break;
                                case 'Fm.Term.def':
                                    var $7504 = self.name;
                                    var $7505 = self.expr;
                                    var $7506 = self.body;
                                    var $7507 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7481 = $7507;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7508 = self.done;
                                    var $7509 = self.term;
                                    var $7510 = self.type;
                                    var $7511 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7481 = $7511;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7512 = self.name;
                                    var $7513 = self.dref;
                                    var $7514 = self.verb;
                                    var $7515 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7481 = $7515;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7516 = self.path;
                                    var $7517 = Fm$Term$equal$hole$($7516, _a$1);
                                    var $7481 = $7517;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7518 = self.natx;
                                    var $7519 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7481 = $7519;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7520 = self.chrx;
                                    var $7521 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7481 = $7521;
                                    break;
                                case 'Fm.Term.str':
                                    var $7522 = self.strx;
                                    var $7523 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7481 = $7523;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7524 = self.path;
                                    var $7525 = self.expr;
                                    var $7526 = self.name;
                                    var $7527 = self.with;
                                    var $7528 = self.cses;
                                    var $7529 = self.moti;
                                    var $7530 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7481 = $7530;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7531 = self.orig;
                                    var $7532 = self.expr;
                                    var $7533 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7481 = $7533;
                                    break;
                            };
                            var $6691 = $7481;
                            break;
                        case 'Fm.Term.ori':
                            var $7534 = self.orig;
                            var $7535 = self.expr;
                            var self = _b1$9;
                            switch (self._) {
                                case 'Fm.Term.var':
                                    var $7537 = self.name;
                                    var $7538 = self.indx;
                                    var $7539 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7536 = $7539;
                                    break;
                                case 'Fm.Term.ref':
                                    var $7540 = self.name;
                                    var $7541 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7536 = $7541;
                                    break;
                                case 'Fm.Term.typ':
                                    var $7542 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7536 = $7542;
                                    break;
                                case 'Fm.Term.all':
                                    var $7543 = self.eras;
                                    var $7544 = self.self;
                                    var $7545 = self.name;
                                    var $7546 = self.xtyp;
                                    var $7547 = self.body;
                                    var $7548 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7536 = $7548;
                                    break;
                                case 'Fm.Term.lam':
                                    var $7549 = self.name;
                                    var $7550 = self.body;
                                    var $7551 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7536 = $7551;
                                    break;
                                case 'Fm.Term.app':
                                    var $7552 = self.func;
                                    var $7553 = self.argm;
                                    var $7554 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7536 = $7554;
                                    break;
                                case 'Fm.Term.let':
                                    var $7555 = self.name;
                                    var $7556 = self.expr;
                                    var $7557 = self.body;
                                    var $7558 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7536 = $7558;
                                    break;
                                case 'Fm.Term.def':
                                    var $7559 = self.name;
                                    var $7560 = self.expr;
                                    var $7561 = self.body;
                                    var $7562 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7536 = $7562;
                                    break;
                                case 'Fm.Term.ann':
                                    var $7563 = self.done;
                                    var $7564 = self.term;
                                    var $7565 = self.type;
                                    var $7566 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7536 = $7566;
                                    break;
                                case 'Fm.Term.gol':
                                    var $7567 = self.name;
                                    var $7568 = self.dref;
                                    var $7569 = self.verb;
                                    var $7570 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7536 = $7570;
                                    break;
                                case 'Fm.Term.hol':
                                    var $7571 = self.path;
                                    var $7572 = Fm$Term$equal$hole$($7571, _a$1);
                                    var $7536 = $7572;
                                    break;
                                case 'Fm.Term.nat':
                                    var $7573 = self.natx;
                                    var $7574 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7536 = $7574;
                                    break;
                                case 'Fm.Term.chr':
                                    var $7575 = self.chrx;
                                    var $7576 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7536 = $7576;
                                    break;
                                case 'Fm.Term.str':
                                    var $7577 = self.strx;
                                    var $7578 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7536 = $7578;
                                    break;
                                case 'Fm.Term.cse':
                                    var $7579 = self.path;
                                    var $7580 = self.expr;
                                    var $7581 = self.name;
                                    var $7582 = self.with;
                                    var $7583 = self.cses;
                                    var $7584 = self.moti;
                                    var $7585 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7536 = $7585;
                                    break;
                                case 'Fm.Term.ori':
                                    var $7586 = self.orig;
                                    var $7587 = self.expr;
                                    var $7588 = Fm$Check$result$(Maybe$some$(Bool$false), List$nil);
                                    var $7536 = $7588;
                                    break;
                            };
                            var $6691 = $7536;
                            break;
                    };
                    var $6680 = $6691;
                };
                var $6678 = $6680;
            };
            var $6676 = $6678;
        };
        return $6676;
    };
    const Fm$Term$equal = x0 => x1 => x2 => x3 => x4 => Fm$Term$equal$(x0, x1, x2, x3, x4);
    const Set$new = Map$new;

    function Fm$Term$check$(_term$1, _type$2, _defs$3, _ctx$4, _path$5, _orig$6) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $7590 = self.name;
                var $7591 = self.indx;
                var self = List$at_last$($7591, _ctx$4);
                switch (self._) {
                    case 'Maybe.none':
                        var $7593 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$undefined_reference$(_orig$6, $7590), List$nil));
                        var $7592 = $7593;
                        break;
                    case 'Maybe.some':
                        var $7594 = self.value;
                        var $7595 = Fm$Check$result$(Maybe$some$((() => {
                            var self = $7594;
                            switch (self._) {
                                case 'Pair.new':
                                    var $7596 = self.fst;
                                    var $7597 = self.snd;
                                    var $7598 = $7597;
                                    return $7598;
                            };
                        })()), List$nil);
                        var $7592 = $7595;
                        break;
                };
                var self = $7592;
                break;
            case 'Fm.Term.ref':
                var $7599 = self.name;
                var self = Fm$get$($7599, _defs$3);
                switch (self._) {
                    case 'Maybe.none':
                        var $7601 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$undefined_reference$(_orig$6, $7599), List$nil));
                        var $7600 = $7601;
                        break;
                    case 'Maybe.some':
                        var $7602 = self.value;
                        var self = $7602;
                        switch (self._) {
                            case 'Fm.Def.new':
                                var $7604 = self.file;
                                var $7605 = self.code;
                                var $7606 = self.name;
                                var $7607 = self.term;
                                var $7608 = self.type;
                                var $7609 = self.stat;
                                var _ref_name$15 = $7606;
                                var _ref_type$16 = $7608;
                                var _ref_term$17 = $7607;
                                var _ref_stat$18 = $7609;
                                var self = _ref_stat$18;
                                switch (self._) {
                                    case 'Fm.Status.init':
                                        var $7611 = Fm$Check$result$(Maybe$some$(_ref_type$16), List$cons$(Fm$Error$waiting$(_ref_name$15), List$nil));
                                        var $7610 = $7611;
                                        break;
                                    case 'Fm.Status.wait':
                                        var $7612 = Fm$Check$result$(Maybe$some$(_ref_type$16), List$nil);
                                        var $7610 = $7612;
                                        break;
                                    case 'Fm.Status.done':
                                        var $7613 = Fm$Check$result$(Maybe$some$(_ref_type$16), List$nil);
                                        var $7610 = $7613;
                                        break;
                                    case 'Fm.Status.fail':
                                        var $7614 = self.errors;
                                        var $7615 = Fm$Check$result$(Maybe$some$(_ref_type$16), List$cons$(Fm$Error$indirect$(_ref_name$15), List$nil));
                                        var $7610 = $7615;
                                        break;
                                };
                                var $7603 = $7610;
                                break;
                        };
                        var $7600 = $7603;
                        break;
                };
                var self = $7600;
                break;
            case 'Fm.Term.typ':
                var $7616 = Fm$Check$result$(Maybe$some$(Fm$Term$typ), List$nil);
                var self = $7616;
                break;
            case 'Fm.Term.all':
                var $7617 = self.eras;
                var $7618 = self.self;
                var $7619 = self.name;
                var $7620 = self.xtyp;
                var $7621 = self.body;
                var _ctx_size$12 = (list_length(_ctx$4));
                var _self_var$13 = Fm$Term$var$($7618, _ctx_size$12);
                var _body_var$14 = Fm$Term$var$($7619, Nat$succ$(_ctx_size$12));
                var _body_ctx$15 = List$cons$(Pair$new$($7619, $7620), List$cons$(Pair$new$($7618, _term$1), _ctx$4));
                var self = Fm$Term$check$($7620, Maybe$some$(Fm$Term$typ), _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7623 = self.value;
                        var $7624 = self.errors;
                        var self = $7623;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7626 = Fm$Check$result$(Maybe$none, $7624);
                                var $7625 = $7626;
                                break;
                            case 'Maybe.some':
                                var $7627 = self.value;
                                var self = Fm$Term$check$($7621(_self_var$13)(_body_var$14), Maybe$some$(Fm$Term$typ), _defs$3, _body_ctx$15, Fm$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7629 = self.value;
                                        var $7630 = self.errors;
                                        var self = $7629;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7632 = Fm$Check$result$(Maybe$none, $7630);
                                                var $7631 = $7632;
                                                break;
                                            case 'Maybe.some':
                                                var $7633 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$(Fm$Term$typ), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7635 = self.value;
                                                        var $7636 = self.errors;
                                                        var $7637 = Fm$Check$result$($7635, List$concat$($7630, $7636));
                                                        var $7634 = $7637;
                                                        break;
                                                };
                                                var $7631 = $7634;
                                                break;
                                        };
                                        var self = $7631;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7638 = self.value;
                                        var $7639 = self.errors;
                                        var $7640 = Fm$Check$result$($7638, List$concat$($7624, $7639));
                                        var $7628 = $7640;
                                        break;
                                };
                                var $7625 = $7628;
                                break;
                        };
                        var $7622 = $7625;
                        break;
                };
                var self = $7622;
                break;
            case 'Fm.Term.lam':
                var $7641 = self.name;
                var $7642 = self.body;
                var self = _type$2;
                switch (self._) {
                    case 'Maybe.none':
                        var _lam_type$9 = Fm$Term$hol$(Bits$e);
                        var _lam_term$10 = Fm$Term$ann$(Bool$false, _term$1, _lam_type$9);
                        var $7644 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$patch$(Fm$MPath$to_bits$(_path$5), _lam_term$10), List$nil));
                        var $7643 = $7644;
                        break;
                    case 'Maybe.some':
                        var $7645 = self.value;
                        var _typv$10 = Fm$Term$reduce$($7645, _defs$3);
                        var self = _typv$10;
                        switch (self._) {
                            case 'Fm.Term.var':
                                var $7647 = self.name;
                                var $7648 = self.indx;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7645);
                                var $7649 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7646 = $7649;
                                break;
                            case 'Fm.Term.ref':
                                var $7650 = self.name;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7645);
                                var $7651 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7646 = $7651;
                                break;
                            case 'Fm.Term.typ':
                                var _expected$11 = Either$left$("(function type)");
                                var _detected$12 = Either$right$($7645);
                                var $7652 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$11, _detected$12, _ctx$4), List$nil));
                                var $7646 = $7652;
                                break;
                            case 'Fm.Term.all':
                                var $7653 = self.eras;
                                var $7654 = self.self;
                                var $7655 = self.name;
                                var $7656 = self.xtyp;
                                var $7657 = self.body;
                                var _ctx_size$16 = (list_length(_ctx$4));
                                var _self_var$17 = _term$1;
                                var _body_var$18 = Fm$Term$var$($7641, _ctx_size$16);
                                var _body_typ$19 = $7657(_self_var$17)(_body_var$18);
                                var _body_ctx$20 = List$cons$(Pair$new$($7641, $7656), _ctx$4);
                                var self = Fm$Term$check$($7642(_body_var$18), Maybe$some$(_body_typ$19), _defs$3, _body_ctx$20, Fm$MPath$o$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7659 = self.value;
                                        var $7660 = self.errors;
                                        var self = $7659;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7662 = Fm$Check$result$(Maybe$none, $7660);
                                                var $7661 = $7662;
                                                break;
                                            case 'Maybe.some':
                                                var $7663 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$($7645), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7665 = self.value;
                                                        var $7666 = self.errors;
                                                        var $7667 = Fm$Check$result$($7665, List$concat$($7660, $7666));
                                                        var $7664 = $7667;
                                                        break;
                                                };
                                                var $7661 = $7664;
                                                break;
                                        };
                                        var $7658 = $7661;
                                        break;
                                };
                                var $7646 = $7658;
                                break;
                            case 'Fm.Term.lam':
                                var $7668 = self.name;
                                var $7669 = self.body;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7645);
                                var $7670 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7646 = $7670;
                                break;
                            case 'Fm.Term.app':
                                var $7671 = self.func;
                                var $7672 = self.argm;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7645);
                                var $7673 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7646 = $7673;
                                break;
                            case 'Fm.Term.let':
                                var $7674 = self.name;
                                var $7675 = self.expr;
                                var $7676 = self.body;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7645);
                                var $7677 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7646 = $7677;
                                break;
                            case 'Fm.Term.def':
                                var $7678 = self.name;
                                var $7679 = self.expr;
                                var $7680 = self.body;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7645);
                                var $7681 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7646 = $7681;
                                break;
                            case 'Fm.Term.ann':
                                var $7682 = self.done;
                                var $7683 = self.term;
                                var $7684 = self.type;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7645);
                                var $7685 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7646 = $7685;
                                break;
                            case 'Fm.Term.gol':
                                var $7686 = self.name;
                                var $7687 = self.dref;
                                var $7688 = self.verb;
                                var _expected$14 = Either$left$("(function type)");
                                var _detected$15 = Either$right$($7645);
                                var $7689 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                var $7646 = $7689;
                                break;
                            case 'Fm.Term.hol':
                                var $7690 = self.path;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7645);
                                var $7691 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7646 = $7691;
                                break;
                            case 'Fm.Term.nat':
                                var $7692 = self.natx;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7645);
                                var $7693 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7646 = $7693;
                                break;
                            case 'Fm.Term.chr':
                                var $7694 = self.chrx;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7645);
                                var $7695 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7646 = $7695;
                                break;
                            case 'Fm.Term.str':
                                var $7696 = self.strx;
                                var _expected$12 = Either$left$("(function type)");
                                var _detected$13 = Either$right$($7645);
                                var $7697 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$12, _detected$13, _ctx$4), List$nil));
                                var $7646 = $7697;
                                break;
                            case 'Fm.Term.cse':
                                var $7698 = self.path;
                                var $7699 = self.expr;
                                var $7700 = self.name;
                                var $7701 = self.with;
                                var $7702 = self.cses;
                                var $7703 = self.moti;
                                var _expected$17 = Either$left$("(function type)");
                                var _detected$18 = Either$right$($7645);
                                var $7704 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$17, _detected$18, _ctx$4), List$nil));
                                var $7646 = $7704;
                                break;
                            case 'Fm.Term.ori':
                                var $7705 = self.orig;
                                var $7706 = self.expr;
                                var _expected$13 = Either$left$("(function type)");
                                var _detected$14 = Either$right$($7645);
                                var $7707 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                var $7646 = $7707;
                                break;
                        };
                        var $7643 = $7646;
                        break;
                };
                var self = $7643;
                break;
            case 'Fm.Term.app':
                var $7708 = self.func;
                var $7709 = self.argm;
                var self = Fm$Term$check$($7708, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7711 = self.value;
                        var $7712 = self.errors;
                        var self = $7711;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7714 = Fm$Check$result$(Maybe$none, $7712);
                                var $7713 = $7714;
                                break;
                            case 'Maybe.some':
                                var $7715 = self.value;
                                var _func_typ$12 = Fm$Term$reduce$($7715, _defs$3);
                                var self = _func_typ$12;
                                switch (self._) {
                                    case 'Fm.Term.var':
                                        var $7717 = self.name;
                                        var $7718 = self.indx;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7719 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7719;
                                        break;
                                    case 'Fm.Term.ref':
                                        var $7720 = self.name;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7721 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7721;
                                        break;
                                    case 'Fm.Term.typ':
                                        var _expected$13 = Either$left$("(function type)");
                                        var _detected$14 = Either$right$(_func_typ$12);
                                        var $7722 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$13, _detected$14, _ctx$4), List$nil));
                                        var self = $7722;
                                        break;
                                    case 'Fm.Term.all':
                                        var $7723 = self.eras;
                                        var $7724 = self.self;
                                        var $7725 = self.name;
                                        var $7726 = self.xtyp;
                                        var $7727 = self.body;
                                        var self = Fm$Term$check$($7709, Maybe$some$($7726), _defs$3, _ctx$4, Fm$MPath$i$(_path$5), _orig$6);
                                        switch (self._) {
                                            case 'Fm.Check.result':
                                                var $7729 = self.value;
                                                var $7730 = self.errors;
                                                var self = $7729;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var $7732 = Fm$Check$result$(Maybe$none, $7730);
                                                        var $7731 = $7732;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $7733 = self.value;
                                                        var self = Fm$Check$result$(Maybe$some$($7727($7708)($7709)), List$nil);
                                                        switch (self._) {
                                                            case 'Fm.Check.result':
                                                                var $7735 = self.value;
                                                                var $7736 = self.errors;
                                                                var $7737 = Fm$Check$result$($7735, List$concat$($7730, $7736));
                                                                var $7734 = $7737;
                                                                break;
                                                        };
                                                        var $7731 = $7734;
                                                        break;
                                                };
                                                var $7728 = $7731;
                                                break;
                                        };
                                        var self = $7728;
                                        break;
                                    case 'Fm.Term.lam':
                                        var $7738 = self.name;
                                        var $7739 = self.body;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7740 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7740;
                                        break;
                                    case 'Fm.Term.app':
                                        var $7741 = self.func;
                                        var $7742 = self.argm;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7743 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7743;
                                        break;
                                    case 'Fm.Term.let':
                                        var $7744 = self.name;
                                        var $7745 = self.expr;
                                        var $7746 = self.body;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7747 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7747;
                                        break;
                                    case 'Fm.Term.def':
                                        var $7748 = self.name;
                                        var $7749 = self.expr;
                                        var $7750 = self.body;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7751 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7751;
                                        break;
                                    case 'Fm.Term.ann':
                                        var $7752 = self.done;
                                        var $7753 = self.term;
                                        var $7754 = self.type;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7755 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7755;
                                        break;
                                    case 'Fm.Term.gol':
                                        var $7756 = self.name;
                                        var $7757 = self.dref;
                                        var $7758 = self.verb;
                                        var _expected$16 = Either$left$("(function type)");
                                        var _detected$17 = Either$right$(_func_typ$12);
                                        var $7759 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$16, _detected$17, _ctx$4), List$nil));
                                        var self = $7759;
                                        break;
                                    case 'Fm.Term.hol':
                                        var $7760 = self.path;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7761 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7761;
                                        break;
                                    case 'Fm.Term.nat':
                                        var $7762 = self.natx;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7763 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7763;
                                        break;
                                    case 'Fm.Term.chr':
                                        var $7764 = self.chrx;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7765 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7765;
                                        break;
                                    case 'Fm.Term.str':
                                        var $7766 = self.strx;
                                        var _expected$14 = Either$left$("(function type)");
                                        var _detected$15 = Either$right$(_func_typ$12);
                                        var $7767 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$14, _detected$15, _ctx$4), List$nil));
                                        var self = $7767;
                                        break;
                                    case 'Fm.Term.cse':
                                        var $7768 = self.path;
                                        var $7769 = self.expr;
                                        var $7770 = self.name;
                                        var $7771 = self.with;
                                        var $7772 = self.cses;
                                        var $7773 = self.moti;
                                        var _expected$19 = Either$left$("(function type)");
                                        var _detected$20 = Either$right$(_func_typ$12);
                                        var $7774 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$19, _detected$20, _ctx$4), List$nil));
                                        var self = $7774;
                                        break;
                                    case 'Fm.Term.ori':
                                        var $7775 = self.orig;
                                        var $7776 = self.expr;
                                        var _expected$15 = Either$left$("(function type)");
                                        var _detected$16 = Either$right$(_func_typ$12);
                                        var $7777 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, _expected$15, _detected$16, _ctx$4), List$nil));
                                        var self = $7777;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7778 = self.value;
                                        var $7779 = self.errors;
                                        var $7780 = Fm$Check$result$($7778, List$concat$($7712, $7779));
                                        var $7716 = $7780;
                                        break;
                                };
                                var $7713 = $7716;
                                break;
                        };
                        var $7710 = $7713;
                        break;
                };
                var self = $7710;
                break;
            case 'Fm.Term.let':
                var $7781 = self.name;
                var $7782 = self.expr;
                var $7783 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Fm$Term$check$($7782, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7785 = self.value;
                        var $7786 = self.errors;
                        var self = $7785;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7788 = Fm$Check$result$(Maybe$none, $7786);
                                var $7787 = $7788;
                                break;
                            case 'Maybe.some':
                                var $7789 = self.value;
                                var _body_val$14 = $7783(Fm$Term$var$($7781, _ctx_size$10));
                                var _body_ctx$15 = List$cons$(Pair$new$($7781, $7789), _ctx$4);
                                var self = Fm$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Fm$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7791 = self.value;
                                        var $7792 = self.errors;
                                        var self = $7791;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7794 = Fm$Check$result$(Maybe$none, $7792);
                                                var $7793 = $7794;
                                                break;
                                            case 'Maybe.some':
                                                var $7795 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$($7795), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7797 = self.value;
                                                        var $7798 = self.errors;
                                                        var $7799 = Fm$Check$result$($7797, List$concat$($7792, $7798));
                                                        var $7796 = $7799;
                                                        break;
                                                };
                                                var $7793 = $7796;
                                                break;
                                        };
                                        var self = $7793;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7800 = self.value;
                                        var $7801 = self.errors;
                                        var $7802 = Fm$Check$result$($7800, List$concat$($7786, $7801));
                                        var $7790 = $7802;
                                        break;
                                };
                                var $7787 = $7790;
                                break;
                        };
                        var $7784 = $7787;
                        break;
                };
                var self = $7784;
                break;
            case 'Fm.Term.def':
                var $7803 = self.name;
                var $7804 = self.expr;
                var $7805 = self.body;
                var _ctx_size$10 = (list_length(_ctx$4));
                var self = Fm$Term$check$($7804, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7807 = self.value;
                        var $7808 = self.errors;
                        var self = $7807;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7810 = Fm$Check$result$(Maybe$none, $7808);
                                var $7809 = $7810;
                                break;
                            case 'Maybe.some':
                                var $7811 = self.value;
                                var _body_val$14 = $7805(Fm$Term$ann$(Bool$true, $7804, $7811));
                                var _body_ctx$15 = List$cons$(Pair$new$($7803, $7811), _ctx$4);
                                var self = Fm$Term$check$(_body_val$14, _type$2, _defs$3, _body_ctx$15, Fm$MPath$i$(_path$5), _orig$6);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7813 = self.value;
                                        var $7814 = self.errors;
                                        var self = $7813;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7816 = Fm$Check$result$(Maybe$none, $7814);
                                                var $7815 = $7816;
                                                break;
                                            case 'Maybe.some':
                                                var $7817 = self.value;
                                                var self = Fm$Check$result$(Maybe$some$($7817), List$nil);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7819 = self.value;
                                                        var $7820 = self.errors;
                                                        var $7821 = Fm$Check$result$($7819, List$concat$($7814, $7820));
                                                        var $7818 = $7821;
                                                        break;
                                                };
                                                var $7815 = $7818;
                                                break;
                                        };
                                        var self = $7815;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7822 = self.value;
                                        var $7823 = self.errors;
                                        var $7824 = Fm$Check$result$($7822, List$concat$($7808, $7823));
                                        var $7812 = $7824;
                                        break;
                                };
                                var $7809 = $7812;
                                break;
                        };
                        var $7806 = $7809;
                        break;
                };
                var self = $7806;
                break;
            case 'Fm.Term.ann':
                var $7825 = self.done;
                var $7826 = self.term;
                var $7827 = self.type;
                var self = $7825;
                if (self) {
                    var $7829 = Fm$Check$result$(Maybe$some$($7827), List$nil);
                    var $7828 = $7829;
                } else {
                    var self = Fm$Term$check$($7826, Maybe$some$($7827), _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                    switch (self._) {
                        case 'Fm.Check.result':
                            var $7831 = self.value;
                            var $7832 = self.errors;
                            var self = $7831;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $7834 = Fm$Check$result$(Maybe$none, $7832);
                                    var $7833 = $7834;
                                    break;
                                case 'Maybe.some':
                                    var $7835 = self.value;
                                    var self = Fm$Term$check$($7827, Maybe$some$(Fm$Term$typ), _defs$3, _ctx$4, Fm$MPath$i$(_path$5), _orig$6);
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $7837 = self.value;
                                            var $7838 = self.errors;
                                            var self = $7837;
                                            switch (self._) {
                                                case 'Maybe.none':
                                                    var $7840 = Fm$Check$result$(Maybe$none, $7838);
                                                    var $7839 = $7840;
                                                    break;
                                                case 'Maybe.some':
                                                    var $7841 = self.value;
                                                    var self = Fm$Check$result$(Maybe$some$($7827), List$nil);
                                                    switch (self._) {
                                                        case 'Fm.Check.result':
                                                            var $7843 = self.value;
                                                            var $7844 = self.errors;
                                                            var $7845 = Fm$Check$result$($7843, List$concat$($7838, $7844));
                                                            var $7842 = $7845;
                                                            break;
                                                    };
                                                    var $7839 = $7842;
                                                    break;
                                            };
                                            var self = $7839;
                                            break;
                                    };
                                    switch (self._) {
                                        case 'Fm.Check.result':
                                            var $7846 = self.value;
                                            var $7847 = self.errors;
                                            var $7848 = Fm$Check$result$($7846, List$concat$($7832, $7847));
                                            var $7836 = $7848;
                                            break;
                                    };
                                    var $7833 = $7836;
                                    break;
                            };
                            var $7830 = $7833;
                            break;
                    };
                    var $7828 = $7830;
                };
                var self = $7828;
                break;
            case 'Fm.Term.gol':
                var $7849 = self.name;
                var $7850 = self.dref;
                var $7851 = self.verb;
                var $7852 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$show_goal$($7849, $7850, $7851, _type$2, _ctx$4), List$nil));
                var self = $7852;
                break;
            case 'Fm.Term.hol':
                var $7853 = self.path;
                var $7854 = Fm$Check$result$(_type$2, List$nil);
                var self = $7854;
                break;
            case 'Fm.Term.nat':
                var $7855 = self.natx;
                var $7856 = Fm$Check$result$(Maybe$some$(Fm$Term$ref$("Nat")), List$nil);
                var self = $7856;
                break;
            case 'Fm.Term.chr':
                var $7857 = self.chrx;
                var $7858 = Fm$Check$result$(Maybe$some$(Fm$Term$ref$("Char")), List$nil);
                var self = $7858;
                break;
            case 'Fm.Term.str':
                var $7859 = self.strx;
                var $7860 = Fm$Check$result$(Maybe$some$(Fm$Term$ref$("String")), List$nil);
                var self = $7860;
                break;
            case 'Fm.Term.cse':
                var $7861 = self.path;
                var $7862 = self.expr;
                var $7863 = self.name;
                var $7864 = self.with;
                var $7865 = self.cses;
                var $7866 = self.moti;
                var _expr$13 = $7862;
                var self = Fm$Term$check$(_expr$13, Maybe$none, _defs$3, _ctx$4, Fm$MPath$o$(_path$5), _orig$6);
                switch (self._) {
                    case 'Fm.Check.result':
                        var $7868 = self.value;
                        var $7869 = self.errors;
                        var self = $7868;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7871 = Fm$Check$result$(Maybe$none, $7869);
                                var $7870 = $7871;
                                break;
                            case 'Maybe.some':
                                var $7872 = self.value;
                                var self = $7866;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var self = _type$2;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7875 = Fm$Term$hol$(Bits$e);
                                                var _moti$17 = $7875;
                                                break;
                                            case 'Maybe.some':
                                                var $7876 = self.value;
                                                var _size$18 = (list_length(_ctx$4));
                                                var _typv$19 = Fm$Term$normalize$($7876, Map$new);
                                                var _moti$20 = Fm$SmartMotive$make$($7863, $7862, $7872, _typv$19, _size$18, _defs$3);
                                                var $7877 = _moti$20;
                                                var _moti$17 = $7877;
                                                break;
                                        };
                                        var $7874 = Maybe$some$(Fm$Term$cse$($7861, $7862, $7863, $7864, $7865, Maybe$some$(_moti$17)));
                                        var _dsug$17 = $7874;
                                        break;
                                    case 'Maybe.some':
                                        var $7878 = self.value;
                                        var $7879 = Fm$Term$desugar_cse$($7862, $7863, $7864, $7865, $7878, $7872, _defs$3, _ctx$4);
                                        var _dsug$17 = $7879;
                                        break;
                                };
                                var self = _dsug$17;
                                switch (self._) {
                                    case 'Maybe.none':
                                        var $7880 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$cant_infer$(_orig$6, _term$1, _ctx$4), List$nil));
                                        var self = $7880;
                                        break;
                                    case 'Maybe.some':
                                        var $7881 = self.value;
                                        var $7882 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$patch$(Fm$MPath$to_bits$(_path$5), $7881), List$nil));
                                        var self = $7882;
                                        break;
                                };
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7883 = self.value;
                                        var $7884 = self.errors;
                                        var $7885 = Fm$Check$result$($7883, List$concat$($7869, $7884));
                                        var $7873 = $7885;
                                        break;
                                };
                                var $7870 = $7873;
                                break;
                        };
                        var $7867 = $7870;
                        break;
                };
                var self = $7867;
                break;
            case 'Fm.Term.ori':
                var $7886 = self.orig;
                var $7887 = self.expr;
                var $7888 = Fm$Term$check$($7887, _type$2, _defs$3, _ctx$4, _path$5, Maybe$some$($7886));
                var self = $7888;
                break;
        };
        switch (self._) {
            case 'Fm.Check.result':
                var $7889 = self.value;
                var $7890 = self.errors;
                var self = $7889;
                switch (self._) {
                    case 'Maybe.none':
                        var $7892 = Fm$Check$result$(Maybe$none, $7890);
                        var $7891 = $7892;
                        break;
                    case 'Maybe.some':
                        var $7893 = self.value;
                        var self = _type$2;
                        switch (self._) {
                            case 'Maybe.none':
                                var $7895 = Fm$Check$result$(Maybe$some$($7893), List$nil);
                                var self = $7895;
                                break;
                            case 'Maybe.some':
                                var $7896 = self.value;
                                var self = Fm$Term$equal$($7896, $7893, _defs$3, (list_length(_ctx$4)), Set$new);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $7898 = self.value;
                                        var $7899 = self.errors;
                                        var self = $7898;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $7901 = Fm$Check$result$(Maybe$none, $7899);
                                                var $7900 = $7901;
                                                break;
                                            case 'Maybe.some':
                                                var $7902 = self.value;
                                                var self = $7902;
                                                if (self) {
                                                    var $7904 = Fm$Check$result$(Maybe$some$($7896), List$nil);
                                                    var self = $7904;
                                                } else {
                                                    var $7905 = Fm$Check$result$(_type$2, List$cons$(Fm$Error$type_mismatch$(_orig$6, Either$right$($7896), Either$right$($7893), _ctx$4), List$nil));
                                                    var self = $7905;
                                                };
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $7906 = self.value;
                                                        var $7907 = self.errors;
                                                        var $7908 = Fm$Check$result$($7906, List$concat$($7899, $7907));
                                                        var $7903 = $7908;
                                                        break;
                                                };
                                                var $7900 = $7903;
                                                break;
                                        };
                                        var $7897 = $7900;
                                        break;
                                };
                                var self = $7897;
                                break;
                        };
                        switch (self._) {
                            case 'Fm.Check.result':
                                var $7909 = self.value;
                                var $7910 = self.errors;
                                var $7911 = Fm$Check$result$($7909, List$concat$($7890, $7910));
                                var $7894 = $7911;
                                break;
                        };
                        var $7891 = $7894;
                        break;
                };
                var $7589 = $7891;
                break;
        };
        return $7589;
    };
    const Fm$Term$check = x0 => x1 => x2 => x3 => x4 => x5 => Fm$Term$check$(x0, x1, x2, x3, x4, x5);

    function Fm$Path$nil$(_x$1) {
        var $7912 = _x$1;
        return $7912;
    };
    const Fm$Path$nil = x0 => Fm$Path$nil$(x0);
    const Fm$MPath$nil = Maybe$some$(Fm$Path$nil);

    function List$is_empty$(_list$2) {
        var self = _list$2;
        switch (self._) {
            case 'List.nil':
                var $7914 = Bool$true;
                var $7913 = $7914;
                break;
            case 'List.cons':
                var $7915 = self.head;
                var $7916 = self.tail;
                var $7917 = Bool$false;
                var $7913 = $7917;
                break;
        };
        return $7913;
    };
    const List$is_empty = x0 => List$is_empty$(x0);

    function Fm$Term$patch_at$(_path$1, _term$2, _fn$3) {
        var self = _term$2;
        switch (self._) {
            case 'Fm.Term.var':
                var $7919 = self.name;
                var $7920 = self.indx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7922 = _fn$3(_term$2);
                        var $7921 = $7922;
                        break;
                    case 'o':
                        var $7923 = self.slice(0, -1);
                        var $7924 = _term$2;
                        var $7921 = $7924;
                        break;
                    case 'i':
                        var $7925 = self.slice(0, -1);
                        var $7926 = _term$2;
                        var $7921 = $7926;
                        break;
                };
                var $7918 = $7921;
                break;
            case 'Fm.Term.ref':
                var $7927 = self.name;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7929 = _fn$3(_term$2);
                        var $7928 = $7929;
                        break;
                    case 'o':
                        var $7930 = self.slice(0, -1);
                        var $7931 = _term$2;
                        var $7928 = $7931;
                        break;
                    case 'i':
                        var $7932 = self.slice(0, -1);
                        var $7933 = _term$2;
                        var $7928 = $7933;
                        break;
                };
                var $7918 = $7928;
                break;
            case 'Fm.Term.typ':
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7935 = _fn$3(_term$2);
                        var $7934 = $7935;
                        break;
                    case 'o':
                        var $7936 = self.slice(0, -1);
                        var $7937 = _term$2;
                        var $7934 = $7937;
                        break;
                    case 'i':
                        var $7938 = self.slice(0, -1);
                        var $7939 = _term$2;
                        var $7934 = $7939;
                        break;
                };
                var $7918 = $7934;
                break;
            case 'Fm.Term.all':
                var $7940 = self.eras;
                var $7941 = self.self;
                var $7942 = self.name;
                var $7943 = self.xtyp;
                var $7944 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7946 = _fn$3(_term$2);
                        var $7945 = $7946;
                        break;
                    case 'o':
                        var $7947 = self.slice(0, -1);
                        var $7948 = Fm$Term$all$($7940, $7941, $7942, Fm$Term$patch_at$($7947, $7943, _fn$3), $7944);
                        var $7945 = $7948;
                        break;
                    case 'i':
                        var $7949 = self.slice(0, -1);
                        var $7950 = Fm$Term$all$($7940, $7941, $7942, $7943, (_s$10 => _x$11 => {
                            var $7951 = Fm$Term$patch_at$($7949, $7944(_s$10)(_x$11), _fn$3);
                            return $7951;
                        }));
                        var $7945 = $7950;
                        break;
                };
                var $7918 = $7945;
                break;
            case 'Fm.Term.lam':
                var $7952 = self.name;
                var $7953 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7955 = _fn$3(_term$2);
                        var $7954 = $7955;
                        break;
                    case 'o':
                        var $7956 = self.slice(0, -1);
                        var $7957 = Fm$Term$lam$($7952, (_x$7 => {
                            var $7958 = Fm$Term$patch_at$(Bits$tail$(_path$1), $7953(_x$7), _fn$3);
                            return $7958;
                        }));
                        var $7954 = $7957;
                        break;
                    case 'i':
                        var $7959 = self.slice(0, -1);
                        var $7960 = Fm$Term$lam$($7952, (_x$7 => {
                            var $7961 = Fm$Term$patch_at$(Bits$tail$(_path$1), $7953(_x$7), _fn$3);
                            return $7961;
                        }));
                        var $7954 = $7960;
                        break;
                };
                var $7918 = $7954;
                break;
            case 'Fm.Term.app':
                var $7962 = self.func;
                var $7963 = self.argm;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7965 = _fn$3(_term$2);
                        var $7964 = $7965;
                        break;
                    case 'o':
                        var $7966 = self.slice(0, -1);
                        var $7967 = Fm$Term$app$(Fm$Term$patch_at$($7966, $7962, _fn$3), $7963);
                        var $7964 = $7967;
                        break;
                    case 'i':
                        var $7968 = self.slice(0, -1);
                        var $7969 = Fm$Term$app$($7962, Fm$Term$patch_at$($7968, $7963, _fn$3));
                        var $7964 = $7969;
                        break;
                };
                var $7918 = $7964;
                break;
            case 'Fm.Term.let':
                var $7970 = self.name;
                var $7971 = self.expr;
                var $7972 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7974 = _fn$3(_term$2);
                        var $7973 = $7974;
                        break;
                    case 'o':
                        var $7975 = self.slice(0, -1);
                        var $7976 = Fm$Term$let$($7970, Fm$Term$patch_at$($7975, $7971, _fn$3), $7972);
                        var $7973 = $7976;
                        break;
                    case 'i':
                        var $7977 = self.slice(0, -1);
                        var $7978 = Fm$Term$let$($7970, $7971, (_x$8 => {
                            var $7979 = Fm$Term$patch_at$($7977, $7972(_x$8), _fn$3);
                            return $7979;
                        }));
                        var $7973 = $7978;
                        break;
                };
                var $7918 = $7973;
                break;
            case 'Fm.Term.def':
                var $7980 = self.name;
                var $7981 = self.expr;
                var $7982 = self.body;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7984 = _fn$3(_term$2);
                        var $7983 = $7984;
                        break;
                    case 'o':
                        var $7985 = self.slice(0, -1);
                        var $7986 = Fm$Term$def$($7980, Fm$Term$patch_at$($7985, $7981, _fn$3), $7982);
                        var $7983 = $7986;
                        break;
                    case 'i':
                        var $7987 = self.slice(0, -1);
                        var $7988 = Fm$Term$def$($7980, $7981, (_x$8 => {
                            var $7989 = Fm$Term$patch_at$($7987, $7982(_x$8), _fn$3);
                            return $7989;
                        }));
                        var $7983 = $7988;
                        break;
                };
                var $7918 = $7983;
                break;
            case 'Fm.Term.ann':
                var $7990 = self.done;
                var $7991 = self.term;
                var $7992 = self.type;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $7994 = _fn$3(_term$2);
                        var $7993 = $7994;
                        break;
                    case 'o':
                        var $7995 = self.slice(0, -1);
                        var $7996 = Fm$Term$ann$($7990, Fm$Term$patch_at$($7995, $7991, _fn$3), $7992);
                        var $7993 = $7996;
                        break;
                    case 'i':
                        var $7997 = self.slice(0, -1);
                        var $7998 = Fm$Term$ann$($7990, $7991, Fm$Term$patch_at$($7997, $7992, _fn$3));
                        var $7993 = $7998;
                        break;
                };
                var $7918 = $7993;
                break;
            case 'Fm.Term.gol':
                var $7999 = self.name;
                var $8000 = self.dref;
                var $8001 = self.verb;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8003 = _fn$3(_term$2);
                        var $8002 = $8003;
                        break;
                    case 'o':
                        var $8004 = self.slice(0, -1);
                        var $8005 = _term$2;
                        var $8002 = $8005;
                        break;
                    case 'i':
                        var $8006 = self.slice(0, -1);
                        var $8007 = _term$2;
                        var $8002 = $8007;
                        break;
                };
                var $7918 = $8002;
                break;
            case 'Fm.Term.hol':
                var $8008 = self.path;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8010 = _fn$3(_term$2);
                        var $8009 = $8010;
                        break;
                    case 'o':
                        var $8011 = self.slice(0, -1);
                        var $8012 = _term$2;
                        var $8009 = $8012;
                        break;
                    case 'i':
                        var $8013 = self.slice(0, -1);
                        var $8014 = _term$2;
                        var $8009 = $8014;
                        break;
                };
                var $7918 = $8009;
                break;
            case 'Fm.Term.nat':
                var $8015 = self.natx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8017 = _fn$3(_term$2);
                        var $8016 = $8017;
                        break;
                    case 'o':
                        var $8018 = self.slice(0, -1);
                        var $8019 = _term$2;
                        var $8016 = $8019;
                        break;
                    case 'i':
                        var $8020 = self.slice(0, -1);
                        var $8021 = _term$2;
                        var $8016 = $8021;
                        break;
                };
                var $7918 = $8016;
                break;
            case 'Fm.Term.chr':
                var $8022 = self.chrx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8024 = _fn$3(_term$2);
                        var $8023 = $8024;
                        break;
                    case 'o':
                        var $8025 = self.slice(0, -1);
                        var $8026 = _term$2;
                        var $8023 = $8026;
                        break;
                    case 'i':
                        var $8027 = self.slice(0, -1);
                        var $8028 = _term$2;
                        var $8023 = $8028;
                        break;
                };
                var $7918 = $8023;
                break;
            case 'Fm.Term.str':
                var $8029 = self.strx;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8031 = _fn$3(_term$2);
                        var $8030 = $8031;
                        break;
                    case 'o':
                        var $8032 = self.slice(0, -1);
                        var $8033 = _term$2;
                        var $8030 = $8033;
                        break;
                    case 'i':
                        var $8034 = self.slice(0, -1);
                        var $8035 = _term$2;
                        var $8030 = $8035;
                        break;
                };
                var $7918 = $8030;
                break;
            case 'Fm.Term.cse':
                var $8036 = self.path;
                var $8037 = self.expr;
                var $8038 = self.name;
                var $8039 = self.with;
                var $8040 = self.cses;
                var $8041 = self.moti;
                var self = _path$1;
                switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                    case 'e':
                        var $8043 = _fn$3(_term$2);
                        var $8042 = $8043;
                        break;
                    case 'o':
                        var $8044 = self.slice(0, -1);
                        var $8045 = _term$2;
                        var $8042 = $8045;
                        break;
                    case 'i':
                        var $8046 = self.slice(0, -1);
                        var $8047 = _term$2;
                        var $8042 = $8047;
                        break;
                };
                var $7918 = $8042;
                break;
            case 'Fm.Term.ori':
                var $8048 = self.orig;
                var $8049 = self.expr;
                var $8050 = Fm$Term$ori$($8048, Fm$Term$patch_at$(_path$1, $8049, _fn$3));
                var $7918 = $8050;
                break;
        };
        return $7918;
    };
    const Fm$Term$patch_at = x0 => x1 => x2 => Fm$Term$patch_at$(x0, x1, x2);

    function Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$6, _errs$7, _fixd$8) {
        var self = _errs$7;
        switch (self._) {
            case 'List.nil':
                var self = _fixd$8;
                if (self) {
                    var _type$9 = Fm$Term$bind$(List$nil, (_x$9 => {
                        var $8054 = (_x$9 + '1');
                        return $8054;
                    }), _type$5);
                    var _term$10 = Fm$Term$bind$(List$nil, (_x$10 => {
                        var $8055 = (_x$10 + '0');
                        return $8055;
                    }), _term$4);
                    var _defs$11 = Fm$set$(_name$3, Fm$Def$new$(_file$1, _code$2, _name$3, _term$10, _type$9, Fm$Status$init), _defs$6);
                    var $8053 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                        var $8056 = _m$pure$13;
                        return $8056;
                    }))(Maybe$some$(_defs$11));
                    var $8052 = $8053;
                } else {
                    var $8057 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                        var $8058 = _m$pure$10;
                        return $8058;
                    }))(Maybe$none);
                    var $8052 = $8057;
                };
                var $8051 = $8052;
                break;
            case 'List.cons':
                var $8059 = self.head;
                var $8060 = self.tail;
                var self = $8059;
                switch (self._) {
                    case 'Fm.Error.type_mismatch':
                        var $8062 = self.origin;
                        var $8063 = self.expected;
                        var $8064 = self.detected;
                        var $8065 = self.context;
                        var $8066 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$6, $8060, _fixd$8);
                        var $8061 = $8066;
                        break;
                    case 'Fm.Error.show_goal':
                        var $8067 = self.name;
                        var $8068 = self.dref;
                        var $8069 = self.verb;
                        var $8070 = self.goal;
                        var $8071 = self.context;
                        var $8072 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$6, $8060, _fixd$8);
                        var $8061 = $8072;
                        break;
                    case 'Fm.Error.waiting':
                        var $8073 = self.name;
                        var $8074 = IO$monad$((_m$bind$12 => _m$pure$13 => {
                            var $8075 = _m$bind$12;
                            return $8075;
                        }))(Fm$Synth$one$($8073, _defs$6))((_new_defs$12 => {
                            var self = _new_defs$12;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $8077 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$6, $8060, _fixd$8);
                                    var $8076 = $8077;
                                    break;
                                case 'Maybe.some':
                                    var $8078 = self.value;
                                    var $8079 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, $8078, $8060, Bool$true);
                                    var $8076 = $8079;
                                    break;
                            };
                            return $8076;
                        }));
                        var $8061 = $8074;
                        break;
                    case 'Fm.Error.indirect':
                        var $8080 = self.name;
                        var $8081 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$6, $8060, _fixd$8);
                        var $8061 = $8081;
                        break;
                    case 'Fm.Error.patch':
                        var $8082 = self.path;
                        var $8083 = self.term;
                        var self = $8082;
                        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                            case 'e':
                                var $8085 = IO$monad$((_m$bind$13 => _m$pure$14 => {
                                    var $8086 = _m$pure$14;
                                    return $8086;
                                }))(Maybe$none);
                                var $8084 = $8085;
                                break;
                            case 'o':
                                var $8087 = self.slice(0, -1);
                                var _term$14 = Fm$Term$patch_at$($8087, _term$4, (_x$14 => {
                                    var $8089 = $8083;
                                    return $8089;
                                }));
                                var $8088 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$14, _type$5, _defs$6, $8060, Bool$true);
                                var $8084 = $8088;
                                break;
                            case 'i':
                                var $8090 = self.slice(0, -1);
                                var _type$14 = Fm$Term$patch_at$($8090, _type$5, (_x$14 => {
                                    var $8092 = $8083;
                                    return $8092;
                                }));
                                var $8091 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$14, _defs$6, $8060, Bool$true);
                                var $8084 = $8091;
                                break;
                        };
                        var $8061 = $8084;
                        break;
                    case 'Fm.Error.undefined_reference':
                        var $8093 = self.origin;
                        var $8094 = self.name;
                        var $8095 = IO$monad$((_m$bind$13 => _m$pure$14 => {
                            var $8096 = _m$bind$13;
                            return $8096;
                        }))(Fm$Synth$one$($8094, _defs$6))((_new_defs$13 => {
                            var self = _new_defs$13;
                            switch (self._) {
                                case 'Maybe.none':
                                    var $8098 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$6, $8060, _fixd$8);
                                    var $8097 = $8098;
                                    break;
                                case 'Maybe.some':
                                    var $8099 = self.value;
                                    var $8100 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, $8099, $8060, Bool$true);
                                    var $8097 = $8100;
                                    break;
                            };
                            return $8097;
                        }));
                        var $8061 = $8095;
                        break;
                    case 'Fm.Error.cant_infer':
                        var $8101 = self.origin;
                        var $8102 = self.term;
                        var $8103 = self.context;
                        var $8104 = Fm$Synth$fix$(_file$1, _code$2, _name$3, _term$4, _type$5, _defs$6, $8060, _fixd$8);
                        var $8061 = $8104;
                        break;
                };
                var $8051 = $8061;
                break;
        };
        return $8051;
    };
    const Fm$Synth$fix = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => Fm$Synth$fix$(x0, x1, x2, x3, x4, x5, x6, x7);

    function Fm$Status$fail$(_errors$1) {
        var $8105 = ({
            _: 'Fm.Status.fail',
            'errors': _errors$1
        });
        return $8105;
    };
    const Fm$Status$fail = x0 => Fm$Status$fail$(x0);

    function Fm$Synth$one$(_name$1, _defs$2) {
        var self = Fm$get$(_name$1, _defs$2);
        switch (self._) {
            case 'Maybe.none':
                var $8107 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $8108 = _m$bind$3;
                    return $8108;
                }))(Fm$Synth$load$(_name$1, _defs$2))((_loaded$3 => {
                    var self = _loaded$3;
                    switch (self._) {
                        case 'Maybe.none':
                            var $8110 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                                var $8111 = _m$pure$5;
                                return $8111;
                            }))(Maybe$none);
                            var $8109 = $8110;
                            break;
                        case 'Maybe.some':
                            var $8112 = self.value;
                            var $8113 = Fm$Synth$one$(_name$1, $8112);
                            var $8109 = $8113;
                            break;
                    };
                    return $8109;
                }));
                var $8106 = $8107;
                break;
            case 'Maybe.some':
                var $8114 = self.value;
                var self = $8114;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $8116 = self.file;
                        var $8117 = self.code;
                        var $8118 = self.name;
                        var $8119 = self.term;
                        var $8120 = self.type;
                        var $8121 = self.stat;
                        var _file$10 = $8116;
                        var _code$11 = $8117;
                        var _name$12 = $8118;
                        var _term$13 = $8119;
                        var _type$14 = $8120;
                        var _stat$15 = $8121;
                        var self = _stat$15;
                        switch (self._) {
                            case 'Fm.Status.init':
                                var _defs$16 = Fm$set$(_name$12, Fm$Def$new$(_file$10, _code$11, _name$12, _term$13, _type$14, Fm$Status$wait), _defs$2);
                                var self = Fm$Term$check$(_type$14, Maybe$some$(Fm$Term$typ), _defs$16, List$nil, Fm$MPath$i$(Fm$MPath$nil), Maybe$none);
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $8124 = self.value;
                                        var $8125 = self.errors;
                                        var self = $8124;
                                        switch (self._) {
                                            case 'Maybe.none':
                                                var $8127 = Fm$Check$result$(Maybe$none, $8125);
                                                var $8126 = $8127;
                                                break;
                                            case 'Maybe.some':
                                                var $8128 = self.value;
                                                var self = Fm$Term$check$(_term$13, Maybe$some$(_type$14), _defs$16, List$nil, Fm$MPath$o$(Fm$MPath$nil), Maybe$none);
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $8130 = self.value;
                                                        var $8131 = self.errors;
                                                        var self = $8130;
                                                        switch (self._) {
                                                            case 'Maybe.none':
                                                                var $8133 = Fm$Check$result$(Maybe$none, $8131);
                                                                var $8132 = $8133;
                                                                break;
                                                            case 'Maybe.some':
                                                                var $8134 = self.value;
                                                                var self = Fm$Check$result$(Maybe$some$(Unit$new), List$nil);
                                                                switch (self._) {
                                                                    case 'Fm.Check.result':
                                                                        var $8136 = self.value;
                                                                        var $8137 = self.errors;
                                                                        var $8138 = Fm$Check$result$($8136, List$concat$($8131, $8137));
                                                                        var $8135 = $8138;
                                                                        break;
                                                                };
                                                                var $8132 = $8135;
                                                                break;
                                                        };
                                                        var self = $8132;
                                                        break;
                                                };
                                                switch (self._) {
                                                    case 'Fm.Check.result':
                                                        var $8139 = self.value;
                                                        var $8140 = self.errors;
                                                        var $8141 = Fm$Check$result$($8139, List$concat$($8125, $8140));
                                                        var $8129 = $8141;
                                                        break;
                                                };
                                                var $8126 = $8129;
                                                break;
                                        };
                                        var _checked$17 = $8126;
                                        break;
                                };
                                var self = _checked$17;
                                switch (self._) {
                                    case 'Fm.Check.result':
                                        var $8142 = self.value;
                                        var $8143 = self.errors;
                                        var self = List$is_empty$($8143);
                                        if (self) {
                                            var _defs$20 = Fm$define$(_file$10, _code$11, _name$12, _term$13, _type$14, Bool$true, _defs$16);
                                            var $8145 = IO$monad$((_m$bind$21 => _m$pure$22 => {
                                                var $8146 = _m$pure$22;
                                                return $8146;
                                            }))(Maybe$some$(_defs$20));
                                            var $8144 = $8145;
                                        } else {
                                            var $8147 = IO$monad$((_m$bind$20 => _m$pure$21 => {
                                                var $8148 = _m$bind$20;
                                                return $8148;
                                            }))(Fm$Synth$fix$(_file$10, _code$11, _name$12, _term$13, _type$14, _defs$16, $8143, Bool$false))((_fixed$20 => {
                                                var self = _fixed$20;
                                                switch (self._) {
                                                    case 'Maybe.none':
                                                        var _stat$21 = Fm$Status$fail$($8143);
                                                        var _defs$22 = Fm$set$(_name$12, Fm$Def$new$(_file$10, _code$11, _name$12, _term$13, _type$14, _stat$21), _defs$16);
                                                        var $8150 = IO$monad$((_m$bind$23 => _m$pure$24 => {
                                                            var $8151 = _m$pure$24;
                                                            return $8151;
                                                        }))(Maybe$some$(_defs$22));
                                                        var $8149 = $8150;
                                                        break;
                                                    case 'Maybe.some':
                                                        var $8152 = self.value;
                                                        var $8153 = Fm$Synth$one$(_name$12, $8152);
                                                        var $8149 = $8153;
                                                        break;
                                                };
                                                return $8149;
                                            }));
                                            var $8144 = $8147;
                                        };
                                        var $8123 = $8144;
                                        break;
                                };
                                var $8122 = $8123;
                                break;
                            case 'Fm.Status.wait':
                                var $8154 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                    var $8155 = _m$pure$17;
                                    return $8155;
                                }))(Maybe$some$(_defs$2));
                                var $8122 = $8154;
                                break;
                            case 'Fm.Status.done':
                                var $8156 = IO$monad$((_m$bind$16 => _m$pure$17 => {
                                    var $8157 = _m$pure$17;
                                    return $8157;
                                }))(Maybe$some$(_defs$2));
                                var $8122 = $8156;
                                break;
                            case 'Fm.Status.fail':
                                var $8158 = self.errors;
                                var $8159 = IO$monad$((_m$bind$17 => _m$pure$18 => {
                                    var $8160 = _m$pure$18;
                                    return $8160;
                                }))(Maybe$some$(_defs$2));
                                var $8122 = $8159;
                                break;
                        };
                        var $8115 = $8122;
                        break;
                };
                var $8106 = $8115;
                break;
        };
        return $8106;
    };
    const Fm$Synth$one = x0 => x1 => Fm$Synth$one$(x0, x1);

    function Map$map$(_fn$3, _map$4) {
        var self = _map$4;
        switch (self._) {
            case 'Map.new':
                var $8162 = Map$new;
                var $8161 = $8162;
                break;
            case 'Map.tie':
                var $8163 = self.val;
                var $8164 = self.lft;
                var $8165 = self.rgt;
                var self = $8163;
                switch (self._) {
                    case 'Maybe.none':
                        var $8167 = Maybe$none;
                        var _val$8 = $8167;
                        break;
                    case 'Maybe.some':
                        var $8168 = self.value;
                        var $8169 = Maybe$some$(_fn$3($8168));
                        var _val$8 = $8169;
                        break;
                };
                var _lft$9 = Map$map$(_fn$3, $8164);
                var _rgt$10 = Map$map$(_fn$3, $8165);
                var $8166 = Map$tie$(_val$8, _lft$9, _rgt$10);
                var $8161 = $8166;
                break;
        };
        return $8161;
    };
    const Map$map = x0 => x1 => Map$map$(x0, x1);
    const Fm$Term$inline$names = (() => {
        var _inl$1 = List$cons$("Monad.pure", List$cons$("Monad.bind", List$cons$("Monad.new", List$cons$("Parser.monad", List$cons$("Parser.bind", List$cons$("Parser.pure", List$cons$("Fm.Check.pure", List$cons$("Fm.Check.bind", List$cons$("Fm.Check.monad", List$cons$("Fm.Check.value", List$cons$("Fm.Check.none", List$nil)))))))))));
        var _kvs$2 = List$mapped$(_inl$1, (_x$2 => {
            var $8171 = Pair$new$((fm_name_to_bits(_x$2)), Unit$new);
            return $8171;
        }));
        var $8170 = Map$from_list$(_kvs$2);
        return $8170;
    })();

    function Fm$Term$inline$reduce$(_term$1, _defs$2) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8173 = self.name;
                var $8174 = self.indx;
                var $8175 = _term$1;
                var $8172 = $8175;
                break;
            case 'Fm.Term.ref':
                var $8176 = self.name;
                var _inli$4 = Set$has$((fm_name_to_bits($8176)), Fm$Term$inline$names);
                var self = _inli$4;
                if (self) {
                    var self = Fm$get$($8176, _defs$2);
                    switch (self._) {
                        case 'Maybe.none':
                            var $8179 = Fm$Term$ref$($8176);
                            var $8178 = $8179;
                            break;
                        case 'Maybe.some':
                            var $8180 = self.value;
                            var self = $8180;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $8182 = self.file;
                                    var $8183 = self.code;
                                    var $8184 = self.name;
                                    var $8185 = self.term;
                                    var $8186 = self.type;
                                    var $8187 = self.stat;
                                    var $8188 = Fm$Term$inline$reduce$($8185, _defs$2);
                                    var $8181 = $8188;
                                    break;
                            };
                            var $8178 = $8181;
                            break;
                    };
                    var $8177 = $8178;
                } else {
                    var $8189 = _term$1;
                    var $8177 = $8189;
                };
                var $8172 = $8177;
                break;
            case 'Fm.Term.typ':
                var $8190 = _term$1;
                var $8172 = $8190;
                break;
            case 'Fm.Term.all':
                var $8191 = self.eras;
                var $8192 = self.self;
                var $8193 = self.name;
                var $8194 = self.xtyp;
                var $8195 = self.body;
                var $8196 = _term$1;
                var $8172 = $8196;
                break;
            case 'Fm.Term.lam':
                var $8197 = self.name;
                var $8198 = self.body;
                var $8199 = _term$1;
                var $8172 = $8199;
                break;
            case 'Fm.Term.app':
                var $8200 = self.func;
                var $8201 = self.argm;
                var _func$5 = Fm$Term$inline$reduce$($8200, _defs$2);
                var self = _func$5;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $8203 = self.name;
                        var $8204 = self.indx;
                        var $8205 = _term$1;
                        var $8202 = $8205;
                        break;
                    case 'Fm.Term.ref':
                        var $8206 = self.name;
                        var $8207 = _term$1;
                        var $8202 = $8207;
                        break;
                    case 'Fm.Term.typ':
                        var $8208 = _term$1;
                        var $8202 = $8208;
                        break;
                    case 'Fm.Term.all':
                        var $8209 = self.eras;
                        var $8210 = self.self;
                        var $8211 = self.name;
                        var $8212 = self.xtyp;
                        var $8213 = self.body;
                        var $8214 = _term$1;
                        var $8202 = $8214;
                        break;
                    case 'Fm.Term.lam':
                        var $8215 = self.name;
                        var $8216 = self.body;
                        var $8217 = Fm$Term$inline$reduce$($8216($8201), _defs$2);
                        var $8202 = $8217;
                        break;
                    case 'Fm.Term.app':
                        var $8218 = self.func;
                        var $8219 = self.argm;
                        var $8220 = _term$1;
                        var $8202 = $8220;
                        break;
                    case 'Fm.Term.let':
                        var $8221 = self.name;
                        var $8222 = self.expr;
                        var $8223 = self.body;
                        var $8224 = Fm$Term$let$($8221, $8222, (_x$9 => {
                            var $8225 = Fm$Term$inline$reduce$(Fm$Term$app$($8223(_x$9), $8201), _defs$2);
                            return $8225;
                        }));
                        var $8202 = $8224;
                        break;
                    case 'Fm.Term.def':
                        var $8226 = self.name;
                        var $8227 = self.expr;
                        var $8228 = self.body;
                        var $8229 = _term$1;
                        var $8202 = $8229;
                        break;
                    case 'Fm.Term.ann':
                        var $8230 = self.done;
                        var $8231 = self.term;
                        var $8232 = self.type;
                        var $8233 = _term$1;
                        var $8202 = $8233;
                        break;
                    case 'Fm.Term.gol':
                        var $8234 = self.name;
                        var $8235 = self.dref;
                        var $8236 = self.verb;
                        var $8237 = _term$1;
                        var $8202 = $8237;
                        break;
                    case 'Fm.Term.hol':
                        var $8238 = self.path;
                        var $8239 = _term$1;
                        var $8202 = $8239;
                        break;
                    case 'Fm.Term.nat':
                        var $8240 = self.natx;
                        var $8241 = _term$1;
                        var $8202 = $8241;
                        break;
                    case 'Fm.Term.chr':
                        var $8242 = self.chrx;
                        var $8243 = _term$1;
                        var $8202 = $8243;
                        break;
                    case 'Fm.Term.str':
                        var $8244 = self.strx;
                        var $8245 = _term$1;
                        var $8202 = $8245;
                        break;
                    case 'Fm.Term.cse':
                        var $8246 = self.path;
                        var $8247 = self.expr;
                        var $8248 = self.name;
                        var $8249 = self.with;
                        var $8250 = self.cses;
                        var $8251 = self.moti;
                        var $8252 = _term$1;
                        var $8202 = $8252;
                        break;
                    case 'Fm.Term.ori':
                        var $8253 = self.orig;
                        var $8254 = self.expr;
                        var $8255 = _term$1;
                        var $8202 = $8255;
                        break;
                };
                var $8172 = $8202;
                break;
            case 'Fm.Term.let':
                var $8256 = self.name;
                var $8257 = self.expr;
                var $8258 = self.body;
                var $8259 = _term$1;
                var $8172 = $8259;
                break;
            case 'Fm.Term.def':
                var $8260 = self.name;
                var $8261 = self.expr;
                var $8262 = self.body;
                var $8263 = _term$1;
                var $8172 = $8263;
                break;
            case 'Fm.Term.ann':
                var $8264 = self.done;
                var $8265 = self.term;
                var $8266 = self.type;
                var $8267 = _term$1;
                var $8172 = $8267;
                break;
            case 'Fm.Term.gol':
                var $8268 = self.name;
                var $8269 = self.dref;
                var $8270 = self.verb;
                var $8271 = _term$1;
                var $8172 = $8271;
                break;
            case 'Fm.Term.hol':
                var $8272 = self.path;
                var $8273 = _term$1;
                var $8172 = $8273;
                break;
            case 'Fm.Term.nat':
                var $8274 = self.natx;
                var $8275 = _term$1;
                var $8172 = $8275;
                break;
            case 'Fm.Term.chr':
                var $8276 = self.chrx;
                var $8277 = _term$1;
                var $8172 = $8277;
                break;
            case 'Fm.Term.str':
                var $8278 = self.strx;
                var $8279 = _term$1;
                var $8172 = $8279;
                break;
            case 'Fm.Term.cse':
                var $8280 = self.path;
                var $8281 = self.expr;
                var $8282 = self.name;
                var $8283 = self.with;
                var $8284 = self.cses;
                var $8285 = self.moti;
                var $8286 = _term$1;
                var $8172 = $8286;
                break;
            case 'Fm.Term.ori':
                var $8287 = self.orig;
                var $8288 = self.expr;
                var $8289 = Fm$Term$inline$reduce$($8288, _defs$2);
                var $8172 = $8289;
                break;
        };
        return $8172;
    };
    const Fm$Term$inline$reduce = x0 => x1 => Fm$Term$inline$reduce$(x0, x1);

    function Fm$Term$inline$(_term$1, _defs$2) {
        var self = Fm$Term$inline$reduce$(_term$1, _defs$2);
        switch (self._) {
            case 'Fm.Term.var':
                var $8291 = self.name;
                var $8292 = self.indx;
                var $8293 = Fm$Term$var$($8291, $8292);
                var $8290 = $8293;
                break;
            case 'Fm.Term.ref':
                var $8294 = self.name;
                var $8295 = Fm$Term$ref$($8294);
                var $8290 = $8295;
                break;
            case 'Fm.Term.typ':
                var $8296 = Fm$Term$typ;
                var $8290 = $8296;
                break;
            case 'Fm.Term.all':
                var $8297 = self.eras;
                var $8298 = self.self;
                var $8299 = self.name;
                var $8300 = self.xtyp;
                var $8301 = self.body;
                var $8302 = Fm$Term$all$($8297, $8298, $8299, Fm$Term$inline$($8300, _defs$2), (_s$8 => _x$9 => {
                    var $8303 = Fm$Term$inline$($8301(_s$8)(_x$9), _defs$2);
                    return $8303;
                }));
                var $8290 = $8302;
                break;
            case 'Fm.Term.lam':
                var $8304 = self.name;
                var $8305 = self.body;
                var $8306 = Fm$Term$lam$($8304, (_x$5 => {
                    var $8307 = Fm$Term$inline$($8305(_x$5), _defs$2);
                    return $8307;
                }));
                var $8290 = $8306;
                break;
            case 'Fm.Term.app':
                var $8308 = self.func;
                var $8309 = self.argm;
                var $8310 = Fm$Term$app$(Fm$Term$inline$($8308, _defs$2), Fm$Term$inline$($8309, _defs$2));
                var $8290 = $8310;
                break;
            case 'Fm.Term.let':
                var $8311 = self.name;
                var $8312 = self.expr;
                var $8313 = self.body;
                var $8314 = Fm$Term$let$($8311, Fm$Term$inline$($8312, _defs$2), (_x$6 => {
                    var $8315 = Fm$Term$inline$($8313(_x$6), _defs$2);
                    return $8315;
                }));
                var $8290 = $8314;
                break;
            case 'Fm.Term.def':
                var $8316 = self.name;
                var $8317 = self.expr;
                var $8318 = self.body;
                var $8319 = Fm$Term$def$($8316, Fm$Term$inline$($8317, _defs$2), (_x$6 => {
                    var $8320 = Fm$Term$inline$($8318(_x$6), _defs$2);
                    return $8320;
                }));
                var $8290 = $8319;
                break;
            case 'Fm.Term.ann':
                var $8321 = self.done;
                var $8322 = self.term;
                var $8323 = self.type;
                var $8324 = Fm$Term$ann$($8321, Fm$Term$inline$($8322, _defs$2), Fm$Term$inline$($8323, _defs$2));
                var $8290 = $8324;
                break;
            case 'Fm.Term.gol':
                var $8325 = self.name;
                var $8326 = self.dref;
                var $8327 = self.verb;
                var $8328 = Fm$Term$gol$($8325, $8326, $8327);
                var $8290 = $8328;
                break;
            case 'Fm.Term.hol':
                var $8329 = self.path;
                var $8330 = Fm$Term$hol$($8329);
                var $8290 = $8330;
                break;
            case 'Fm.Term.nat':
                var $8331 = self.natx;
                var $8332 = Fm$Term$nat$($8331);
                var $8290 = $8332;
                break;
            case 'Fm.Term.chr':
                var $8333 = self.chrx;
                var $8334 = Fm$Term$chr$($8333);
                var $8290 = $8334;
                break;
            case 'Fm.Term.str':
                var $8335 = self.strx;
                var $8336 = Fm$Term$str$($8335);
                var $8290 = $8336;
                break;
            case 'Fm.Term.cse':
                var $8337 = self.path;
                var $8338 = self.expr;
                var $8339 = self.name;
                var $8340 = self.with;
                var $8341 = self.cses;
                var $8342 = self.moti;
                var $8343 = _term$1;
                var $8290 = $8343;
                break;
            case 'Fm.Term.ori':
                var $8344 = self.orig;
                var $8345 = self.expr;
                var $8346 = Fm$Term$inline$($8345, _defs$2);
                var $8290 = $8346;
                break;
        };
        return $8290;
    };
    const Fm$Term$inline = x0 => x1 => Fm$Term$inline$(x0, x1);

    function Map$values$go$(_xs$2, _list$3) {
        var self = _xs$2;
        switch (self._) {
            case 'Map.new':
                var $8348 = _list$3;
                var $8347 = $8348;
                break;
            case 'Map.tie':
                var $8349 = self.val;
                var $8350 = self.lft;
                var $8351 = self.rgt;
                var self = $8349;
                switch (self._) {
                    case 'Maybe.none':
                        var $8353 = _list$3;
                        var _list0$7 = $8353;
                        break;
                    case 'Maybe.some':
                        var $8354 = self.value;
                        var $8355 = List$cons$($8354, _list$3);
                        var _list0$7 = $8355;
                        break;
                };
                var _list1$8 = Map$values$go$($8350, _list0$7);
                var _list2$9 = Map$values$go$($8351, _list1$8);
                var $8352 = _list2$9;
                var $8347 = $8352;
                break;
        };
        return $8347;
    };
    const Map$values$go = x0 => x1 => Map$values$go$(x0, x1);

    function Map$values$(_xs$2) {
        var $8356 = Map$values$go$(_xs$2, List$nil);
        return $8356;
    };
    const Map$values = x0 => Map$values$(x0);

    function Fm$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4) {
        var Fm$Core$var_name$ = (_indx$1, _name$2, _brui$3, _vars$4) => ({
            ctr: 'TCO',
            arg: [_indx$1, _name$2, _brui$3, _vars$4]
        });
        var Fm$Core$var_name = _indx$1 => _name$2 => _brui$3 => _vars$4 => Fm$Core$var_name$(_indx$1, _name$2, _brui$3, _vars$4);
        var arg = [_indx$1, _name$2, _brui$3, _vars$4];
        while (true) {
            let [_indx$1, _name$2, _brui$3, _vars$4] = arg;
            var R = (() => {
                var self = _indx$1;
                if (self === 0n) {
                    var self = _brui$3;
                    if (self === 0n) {
                        var $8358 = _name$2;
                        var $8357 = $8358;
                    } else {
                        var $8359 = (self - 1n);
                        var $8360 = (_name$2 + ("^" + Nat$show$(_brui$3)));
                        var $8357 = $8360;
                    };
                    return $8357;
                } else {
                    var $8361 = (self - 1n);
                    var self = _vars$4;
                    switch (self._) {
                        case 'List.nil':
                            var $8363 = "unbound";
                            var $8362 = $8363;
                            break;
                        case 'List.cons':
                            var $8364 = self.head;
                            var $8365 = self.tail;
                            var self = (_name$2 === $8364);
                            if (self) {
                                var $8367 = Nat$succ$(_brui$3);
                                var _brui$8 = $8367;
                            } else {
                                var $8368 = _brui$3;
                                var _brui$8 = $8368;
                            };
                            var $8366 = Fm$Core$var_name$($8361, _name$2, _brui$8, $8365);
                            var $8362 = $8366;
                            break;
                    };
                    return $8362;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Core$var_name = x0 => x1 => x2 => x3 => Fm$Core$var_name$(x0, x1, x2, x3);

    function Fm$Name$show$(_name$1) {
        var $8369 = _name$1;
        return $8369;
    };
    const Fm$Name$show = x0 => Fm$Name$show$(x0);

    function Bits$to_nat$(_b$1) {
        var self = _b$1;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $8371 = 0n;
                var $8370 = $8371;
                break;
            case 'o':
                var $8372 = self.slice(0, -1);
                var $8373 = (2n * Bits$to_nat$($8372));
                var $8370 = $8373;
                break;
            case 'i':
                var $8374 = self.slice(0, -1);
                var $8375 = Nat$succ$((2n * Bits$to_nat$($8374)));
                var $8370 = $8375;
                break;
        };
        return $8370;
    };
    const Bits$to_nat = x0 => Bits$to_nat$(x0);

    function U16$show_hex$(_a$1) {
        var self = _a$1;
        switch ('u16') {
            case 'u16':
                var $8377 = u16_to_word(self);
                var $8378 = Nat$to_string_base$(16n, Bits$to_nat$(Word$to_bits$($8377)));
                var $8376 = $8378;
                break;
        };
        return $8376;
    };
    const U16$show_hex = x0 => U16$show_hex$(x0);

    function Fm$escape$char$(_chr$1) {
        var self = (_chr$1 === Fm$backslash);
        if (self) {
            var $8380 = String$cons$(Fm$backslash, String$cons$(_chr$1, String$nil));
            var $8379 = $8380;
        } else {
            var self = (_chr$1 === 34);
            if (self) {
                var $8382 = String$cons$(Fm$backslash, String$cons$(_chr$1, String$nil));
                var $8381 = $8382;
            } else {
                var self = (_chr$1 === 39);
                if (self) {
                    var $8384 = String$cons$(Fm$backslash, String$cons$(_chr$1, String$nil));
                    var $8383 = $8384;
                } else {
                    var self = U16$btw$(32, _chr$1, 126);
                    if (self) {
                        var $8386 = String$cons$(_chr$1, String$nil);
                        var $8385 = $8386;
                    } else {
                        var $8387 = String$flatten$(List$cons$(String$cons$(Fm$backslash, String$nil), List$cons$("u{", List$cons$(U16$show_hex$(_chr$1), List$cons$("}", List$cons$(String$nil, List$nil))))));
                        var $8385 = $8387;
                    };
                    var $8383 = $8385;
                };
                var $8381 = $8383;
            };
            var $8379 = $8381;
        };
        return $8379;
    };
    const Fm$escape$char = x0 => Fm$escape$char$(x0);

    function Fm$escape$(_str$1) {
        var self = _str$1;
        if (self.length === 0) {
            var $8389 = String$nil;
            var $8388 = $8389;
        } else {
            var $8390 = self.charCodeAt(0);
            var $8391 = self.slice(1);
            var _head$4 = Fm$escape$char$($8390);
            var _tail$5 = Fm$escape$($8391);
            var $8392 = (_head$4 + _tail$5);
            var $8388 = $8392;
        };
        return $8388;
    };
    const Fm$escape = x0 => Fm$escape$(x0);

    function Fm$Core$show$(_term$1, _indx$2, _vars$3) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8394 = self.name;
                var $8395 = self.indx;
                var $8396 = Fm$Core$var_name$(Nat$pred$((_indx$2 - $8395 <= 0n ? 0n : _indx$2 - $8395)), $8394, 0n, _vars$3);
                var $8393 = $8396;
                break;
            case 'Fm.Term.ref':
                var $8397 = self.name;
                var $8398 = Fm$Name$show$($8397);
                var $8393 = $8398;
                break;
            case 'Fm.Term.typ':
                var $8399 = "*";
                var $8393 = $8399;
                break;
            case 'Fm.Term.all':
                var $8400 = self.eras;
                var $8401 = self.self;
                var $8402 = self.name;
                var $8403 = self.xtyp;
                var $8404 = self.body;
                var _eras$9 = $8400;
                var self = _eras$9;
                if (self) {
                    var $8406 = "%";
                    var _init$10 = $8406;
                } else {
                    var $8407 = "@";
                    var _init$10 = $8407;
                };
                var _self$11 = Fm$Name$show$($8401);
                var _name$12 = Fm$Name$show$($8402);
                var _xtyp$13 = Fm$Core$show$($8403, _indx$2, _vars$3);
                var _body$14 = Fm$Core$show$($8404(Fm$Term$var$($8401, _indx$2))(Fm$Term$var$($8402, Nat$succ$(_indx$2))), Nat$succ$(Nat$succ$(_indx$2)), List$cons$($8402, List$cons$($8401, _vars$3)));
                var $8405 = String$flatten$(List$cons$(_init$10, List$cons$(_self$11, List$cons$("(", List$cons$(_name$12, List$cons$(":", List$cons$(_xtyp$13, List$cons$(") ", List$cons$(_body$14, List$nil)))))))));
                var $8393 = $8405;
                break;
            case 'Fm.Term.lam':
                var $8408 = self.name;
                var $8409 = self.body;
                var _name$6 = Fm$Name$show$($8408);
                var _body$7 = Fm$Core$show$($8409(Fm$Term$var$($8408, _indx$2)), Nat$succ$(_indx$2), List$cons$($8408, _vars$3));
                var $8410 = String$flatten$(List$cons$("#", List$cons$(_name$6, List$cons$(" ", List$cons$(_body$7, List$nil)))));
                var $8393 = $8410;
                break;
            case 'Fm.Term.app':
                var $8411 = self.func;
                var $8412 = self.argm;
                var _func$6 = Fm$Core$show$($8411, _indx$2, _vars$3);
                var _argm$7 = Fm$Core$show$($8412, _indx$2, _vars$3);
                var $8413 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(" ", List$cons$(_argm$7, List$cons$(")", List$nil))))));
                var $8393 = $8413;
                break;
            case 'Fm.Term.let':
                var $8414 = self.name;
                var $8415 = self.expr;
                var $8416 = self.body;
                var _name$7 = Fm$Name$show$($8414);
                var _expr$8 = Fm$Core$show$($8415, _indx$2, _vars$3);
                var _body$9 = Fm$Core$show$($8416(Fm$Term$var$($8414, _indx$2)), Nat$succ$(_indx$2), List$cons$($8414, _vars$3));
                var $8417 = String$flatten$(List$cons$("!", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $8393 = $8417;
                break;
            case 'Fm.Term.def':
                var $8418 = self.name;
                var $8419 = self.expr;
                var $8420 = self.body;
                var _name$7 = Fm$Name$show$($8418);
                var _expr$8 = Fm$Core$show$($8419, _indx$2, _vars$3);
                var _body$9 = Fm$Core$show$($8420(Fm$Term$var$($8418, _indx$2)), Nat$succ$(_indx$2), List$cons$($8418, _vars$3));
                var $8421 = String$flatten$(List$cons$("$", List$cons$(_name$7, List$cons$(" = ", List$cons$(_expr$8, List$cons$("; ", List$cons$(_body$9, List$nil)))))));
                var $8393 = $8421;
                break;
            case 'Fm.Term.ann':
                var $8422 = self.done;
                var $8423 = self.term;
                var $8424 = self.type;
                var _term$7 = Fm$Core$show$($8423, _indx$2, _vars$3);
                var _type$8 = Fm$Core$show$($8424, _indx$2, _vars$3);
                var $8425 = String$flatten$(List$cons$("{", List$cons$(_term$7, List$cons$(":", List$cons$(_type$8, List$cons$("}", List$nil))))));
                var $8393 = $8425;
                break;
            case 'Fm.Term.gol':
                var $8426 = self.name;
                var $8427 = self.dref;
                var $8428 = self.verb;
                var $8429 = "<GOL>";
                var $8393 = $8429;
                break;
            case 'Fm.Term.hol':
                var $8430 = self.path;
                var $8431 = "<HOL>";
                var $8393 = $8431;
                break;
            case 'Fm.Term.nat':
                var $8432 = self.natx;
                var $8433 = String$flatten$(List$cons$("+", List$cons$(Nat$show$($8432), List$nil)));
                var $8393 = $8433;
                break;
            case 'Fm.Term.chr':
                var $8434 = self.chrx;
                var $8435 = String$flatten$(List$cons$("\'", List$cons$(Fm$escape$char$($8434), List$cons$("\'", List$nil))));
                var $8393 = $8435;
                break;
            case 'Fm.Term.str':
                var $8436 = self.strx;
                var $8437 = String$flatten$(List$cons$("\"", List$cons$(Fm$escape$($8436), List$cons$("\"", List$nil))));
                var $8393 = $8437;
                break;
            case 'Fm.Term.cse':
                var $8438 = self.path;
                var $8439 = self.expr;
                var $8440 = self.name;
                var $8441 = self.with;
                var $8442 = self.cses;
                var $8443 = self.moti;
                var $8444 = "<CSE>";
                var $8393 = $8444;
                break;
            case 'Fm.Term.ori':
                var $8445 = self.orig;
                var $8446 = self.expr;
                var $8447 = Fm$Core$show$($8446, _indx$2, _vars$3);
                var $8393 = $8447;
                break;
        };
        return $8393;
    };
    const Fm$Core$show = x0 => x1 => x2 => Fm$Core$show$(x0, x1, x2);

    function Fm$Defs$core$(_defs$1) {
        var _result$2 = "";
        var _result$3 = (() => {
            var $8450 = _result$2;
            var $8451 = Map$values$(_defs$1);
            let _result$4 = $8450;
            let _defn$3;
            while ($8451._ === 'List.cons') {
                _defn$3 = $8451.head;
                var self = _defn$3;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $8452 = self.file;
                        var $8453 = self.code;
                        var $8454 = self.name;
                        var $8455 = self.term;
                        var $8456 = self.type;
                        var $8457 = self.stat;
                        var self = $8457;
                        switch (self._) {
                            case 'Fm.Status.init':
                                var $8459 = _result$4;
                                var $8458 = $8459;
                                break;
                            case 'Fm.Status.wait':
                                var $8460 = _result$4;
                                var $8458 = $8460;
                                break;
                            case 'Fm.Status.done':
                                var _name$11 = $8454;
                                var _term$12 = Fm$Core$show$($8455, 0n, List$nil);
                                var _type$13 = Fm$Core$show$($8456, 0n, List$nil);
                                var $8461 = String$flatten$(List$cons$(_result$4, List$cons$(_name$11, List$cons$(" : ", List$cons$(_type$13, List$cons$(" = ", List$cons$(_term$12, List$cons$(";\u{a}", List$nil))))))));
                                var $8458 = $8461;
                                break;
                            case 'Fm.Status.fail':
                                var $8462 = self.errors;
                                var $8463 = _result$4;
                                var $8458 = $8463;
                                break;
                        };
                        var $8450 = $8458;
                        break;
                };
                _result$4 = $8450;
                $8451 = $8451.tail;
            }
            return _result$4;
        })();
        var $8448 = _result$3;
        return $8448;
    };
    const Fm$Defs$core = x0 => Fm$Defs$core$(x0);

    function Fm$to_core$io$one$(_name$1) {
        var $8464 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $8465 = _m$bind$2;
            return $8465;
        }))(Fm$Synth$one$(_name$1, Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.none':
                    var $8467 = Map$new;
                    var _defs$3 = $8467;
                    break;
                case 'Maybe.some':
                    var $8468 = self.value;
                    var $8469 = $8468;
                    var _defs$3 = $8469;
                    break;
            };
            var _defs$4 = Map$map$((_defn$4 => {
                var self = _defn$4;
                switch (self._) {
                    case 'Fm.Def.new':
                        var $8471 = self.file;
                        var $8472 = self.code;
                        var $8473 = self.name;
                        var $8474 = self.term;
                        var $8475 = self.type;
                        var $8476 = self.stat;
                        var _term$11 = Fm$Term$inline$($8474, _defs$3);
                        var _type$12 = Fm$Term$inline$($8475, _defs$3);
                        var $8477 = Fm$Def$new$($8471, $8472, $8473, _term$11, _type$12, $8476);
                        var $8470 = $8477;
                        break;
                };
                return $8470;
            }), _defs$3);
            var $8466 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                var $8478 = _m$pure$6;
                return $8478;
            }))(Fm$Defs$core$(_defs$4));
            return $8466;
        }));
        return $8464;
    };
    const Fm$to_core$io$one = x0 => Fm$to_core$io$one$(x0);

    function IO$print$(_text$1) {
        var $8479 = IO$ask$("print", _text$1, (_skip$2 => {
            var $8480 = IO$end$(Unit$new);
            return $8480;
        }));
        return $8479;
    };
    const IO$print = x0 => IO$print$(x0);

    function Maybe$bind$(_m$3, _f$4) {
        var self = _m$3;
        switch (self._) {
            case 'Maybe.none':
                var $8482 = Maybe$none;
                var $8481 = $8482;
                break;
            case 'Maybe.some':
                var $8483 = self.value;
                var $8484 = _f$4($8483);
                var $8481 = $8484;
                break;
        };
        return $8481;
    };
    const Maybe$bind = x0 => x1 => Maybe$bind$(x0, x1);

    function Maybe$monad$(_new$2) {
        var $8485 = _new$2(Maybe$bind)(Maybe$some);
        return $8485;
    };
    const Maybe$monad = x0 => Maybe$monad$(x0);

    function Fm$Term$show$as_nat$go$(_term$1) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8487 = self.name;
                var $8488 = self.indx;
                var $8489 = Maybe$none;
                var $8486 = $8489;
                break;
            case 'Fm.Term.ref':
                var $8490 = self.name;
                var self = ($8490 === "Nat.zero");
                if (self) {
                    var $8492 = Maybe$some$(0n);
                    var $8491 = $8492;
                } else {
                    var $8493 = Maybe$none;
                    var $8491 = $8493;
                };
                var $8486 = $8491;
                break;
            case 'Fm.Term.typ':
                var $8494 = Maybe$none;
                var $8486 = $8494;
                break;
            case 'Fm.Term.all':
                var $8495 = self.eras;
                var $8496 = self.self;
                var $8497 = self.name;
                var $8498 = self.xtyp;
                var $8499 = self.body;
                var $8500 = Maybe$none;
                var $8486 = $8500;
                break;
            case 'Fm.Term.lam':
                var $8501 = self.name;
                var $8502 = self.body;
                var $8503 = Maybe$none;
                var $8486 = $8503;
                break;
            case 'Fm.Term.app':
                var $8504 = self.func;
                var $8505 = self.argm;
                var self = $8504;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $8507 = self.name;
                        var $8508 = self.indx;
                        var $8509 = Maybe$none;
                        var $8506 = $8509;
                        break;
                    case 'Fm.Term.ref':
                        var $8510 = self.name;
                        var self = ($8510 === "Nat.succ");
                        if (self) {
                            var $8512 = Maybe$monad$((_m$bind$5 => _m$pure$6 => {
                                var $8513 = _m$bind$5;
                                return $8513;
                            }))(Fm$Term$show$as_nat$go$($8505))((_pred$5 => {
                                var $8514 = Maybe$monad$((_m$bind$6 => _m$pure$7 => {
                                    var $8515 = _m$pure$7;
                                    return $8515;
                                }))(Nat$succ$(_pred$5));
                                return $8514;
                            }));
                            var $8511 = $8512;
                        } else {
                            var $8516 = Maybe$none;
                            var $8511 = $8516;
                        };
                        var $8506 = $8511;
                        break;
                    case 'Fm.Term.typ':
                        var $8517 = Maybe$none;
                        var $8506 = $8517;
                        break;
                    case 'Fm.Term.all':
                        var $8518 = self.eras;
                        var $8519 = self.self;
                        var $8520 = self.name;
                        var $8521 = self.xtyp;
                        var $8522 = self.body;
                        var $8523 = Maybe$none;
                        var $8506 = $8523;
                        break;
                    case 'Fm.Term.lam':
                        var $8524 = self.name;
                        var $8525 = self.body;
                        var $8526 = Maybe$none;
                        var $8506 = $8526;
                        break;
                    case 'Fm.Term.app':
                        var $8527 = self.func;
                        var $8528 = self.argm;
                        var $8529 = Maybe$none;
                        var $8506 = $8529;
                        break;
                    case 'Fm.Term.let':
                        var $8530 = self.name;
                        var $8531 = self.expr;
                        var $8532 = self.body;
                        var $8533 = Maybe$none;
                        var $8506 = $8533;
                        break;
                    case 'Fm.Term.def':
                        var $8534 = self.name;
                        var $8535 = self.expr;
                        var $8536 = self.body;
                        var $8537 = Maybe$none;
                        var $8506 = $8537;
                        break;
                    case 'Fm.Term.ann':
                        var $8538 = self.done;
                        var $8539 = self.term;
                        var $8540 = self.type;
                        var $8541 = Maybe$none;
                        var $8506 = $8541;
                        break;
                    case 'Fm.Term.gol':
                        var $8542 = self.name;
                        var $8543 = self.dref;
                        var $8544 = self.verb;
                        var $8545 = Maybe$none;
                        var $8506 = $8545;
                        break;
                    case 'Fm.Term.hol':
                        var $8546 = self.path;
                        var $8547 = Maybe$none;
                        var $8506 = $8547;
                        break;
                    case 'Fm.Term.nat':
                        var $8548 = self.natx;
                        var $8549 = Maybe$none;
                        var $8506 = $8549;
                        break;
                    case 'Fm.Term.chr':
                        var $8550 = self.chrx;
                        var $8551 = Maybe$none;
                        var $8506 = $8551;
                        break;
                    case 'Fm.Term.str':
                        var $8552 = self.strx;
                        var $8553 = Maybe$none;
                        var $8506 = $8553;
                        break;
                    case 'Fm.Term.cse':
                        var $8554 = self.path;
                        var $8555 = self.expr;
                        var $8556 = self.name;
                        var $8557 = self.with;
                        var $8558 = self.cses;
                        var $8559 = self.moti;
                        var $8560 = Maybe$none;
                        var $8506 = $8560;
                        break;
                    case 'Fm.Term.ori':
                        var $8561 = self.orig;
                        var $8562 = self.expr;
                        var $8563 = Maybe$none;
                        var $8506 = $8563;
                        break;
                };
                var $8486 = $8506;
                break;
            case 'Fm.Term.let':
                var $8564 = self.name;
                var $8565 = self.expr;
                var $8566 = self.body;
                var $8567 = Maybe$none;
                var $8486 = $8567;
                break;
            case 'Fm.Term.def':
                var $8568 = self.name;
                var $8569 = self.expr;
                var $8570 = self.body;
                var $8571 = Maybe$none;
                var $8486 = $8571;
                break;
            case 'Fm.Term.ann':
                var $8572 = self.done;
                var $8573 = self.term;
                var $8574 = self.type;
                var $8575 = Maybe$none;
                var $8486 = $8575;
                break;
            case 'Fm.Term.gol':
                var $8576 = self.name;
                var $8577 = self.dref;
                var $8578 = self.verb;
                var $8579 = Maybe$none;
                var $8486 = $8579;
                break;
            case 'Fm.Term.hol':
                var $8580 = self.path;
                var $8581 = Maybe$none;
                var $8486 = $8581;
                break;
            case 'Fm.Term.nat':
                var $8582 = self.natx;
                var $8583 = Maybe$none;
                var $8486 = $8583;
                break;
            case 'Fm.Term.chr':
                var $8584 = self.chrx;
                var $8585 = Maybe$none;
                var $8486 = $8585;
                break;
            case 'Fm.Term.str':
                var $8586 = self.strx;
                var $8587 = Maybe$none;
                var $8486 = $8587;
                break;
            case 'Fm.Term.cse':
                var $8588 = self.path;
                var $8589 = self.expr;
                var $8590 = self.name;
                var $8591 = self.with;
                var $8592 = self.cses;
                var $8593 = self.moti;
                var $8594 = Maybe$none;
                var $8486 = $8594;
                break;
            case 'Fm.Term.ori':
                var $8595 = self.orig;
                var $8596 = self.expr;
                var $8597 = Maybe$none;
                var $8486 = $8597;
                break;
        };
        return $8486;
    };
    const Fm$Term$show$as_nat$go = x0 => Fm$Term$show$as_nat$go$(x0);

    function Fm$Term$show$as_nat$(_term$1) {
        var $8598 = Maybe$mapped$(Fm$Term$show$as_nat$go$(_term$1), Nat$show);
        return $8598;
    };
    const Fm$Term$show$as_nat = x0 => Fm$Term$show$as_nat$(x0);

    function Fm$Term$show$is_ref$(_term$1, _name$2) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $8600 = self.name;
                var $8601 = self.indx;
                var $8602 = Bool$false;
                var $8599 = $8602;
                break;
            case 'Fm.Term.ref':
                var $8603 = self.name;
                var $8604 = (_name$2 === $8603);
                var $8599 = $8604;
                break;
            case 'Fm.Term.typ':
                var $8605 = Bool$false;
                var $8599 = $8605;
                break;
            case 'Fm.Term.all':
                var $8606 = self.eras;
                var $8607 = self.self;
                var $8608 = self.name;
                var $8609 = self.xtyp;
                var $8610 = self.body;
                var $8611 = Bool$false;
                var $8599 = $8611;
                break;
            case 'Fm.Term.lam':
                var $8612 = self.name;
                var $8613 = self.body;
                var $8614 = Bool$false;
                var $8599 = $8614;
                break;
            case 'Fm.Term.app':
                var $8615 = self.func;
                var $8616 = self.argm;
                var $8617 = Bool$false;
                var $8599 = $8617;
                break;
            case 'Fm.Term.let':
                var $8618 = self.name;
                var $8619 = self.expr;
                var $8620 = self.body;
                var $8621 = Bool$false;
                var $8599 = $8621;
                break;
            case 'Fm.Term.def':
                var $8622 = self.name;
                var $8623 = self.expr;
                var $8624 = self.body;
                var $8625 = Bool$false;
                var $8599 = $8625;
                break;
            case 'Fm.Term.ann':
                var $8626 = self.done;
                var $8627 = self.term;
                var $8628 = self.type;
                var $8629 = Bool$false;
                var $8599 = $8629;
                break;
            case 'Fm.Term.gol':
                var $8630 = self.name;
                var $8631 = self.dref;
                var $8632 = self.verb;
                var $8633 = Bool$false;
                var $8599 = $8633;
                break;
            case 'Fm.Term.hol':
                var $8634 = self.path;
                var $8635 = Bool$false;
                var $8599 = $8635;
                break;
            case 'Fm.Term.nat':
                var $8636 = self.natx;
                var $8637 = Bool$false;
                var $8599 = $8637;
                break;
            case 'Fm.Term.chr':
                var $8638 = self.chrx;
                var $8639 = Bool$false;
                var $8599 = $8639;
                break;
            case 'Fm.Term.str':
                var $8640 = self.strx;
                var $8641 = Bool$false;
                var $8599 = $8641;
                break;
            case 'Fm.Term.cse':
                var $8642 = self.path;
                var $8643 = self.expr;
                var $8644 = self.name;
                var $8645 = self.with;
                var $8646 = self.cses;
                var $8647 = self.moti;
                var $8648 = Bool$false;
                var $8599 = $8648;
                break;
            case 'Fm.Term.ori':
                var $8649 = self.orig;
                var $8650 = self.expr;
                var $8651 = Bool$false;
                var $8599 = $8651;
                break;
        };
        return $8599;
    };
    const Fm$Term$show$is_ref = x0 => x1 => Fm$Term$show$is_ref$(x0, x1);

    function Fm$Term$show$app$(_term$1, _path$2, _args$3) {
        var Fm$Term$show$app$ = (_term$1, _path$2, _args$3) => ({
            ctr: 'TCO',
            arg: [_term$1, _path$2, _args$3]
        });
        var Fm$Term$show$app = _term$1 => _path$2 => _args$3 => Fm$Term$show$app$(_term$1, _path$2, _args$3);
        var arg = [_term$1, _path$2, _args$3];
        while (true) {
            let [_term$1, _path$2, _args$3] = arg;
            var R = (() => {
                var self = _term$1;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $8652 = self.name;
                        var $8653 = self.indx;
                        var _arity$6 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$6 === 3n));
                        if (self) {
                            var _func$7 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$8 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$9 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8655 = String$flatten$(List$cons$(_eq_lft$8, List$cons$(" == ", List$cons$(_eq_rgt$9, List$nil))));
                            var $8654 = $8655;
                        } else {
                            var _func$7 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$7;
                            if (self.length === 0) {
                                var $8657 = Bool$false;
                                var _wrap$8 = $8657;
                            } else {
                                var $8658 = self.charCodeAt(0);
                                var $8659 = self.slice(1);
                                var $8660 = ($8658 === 40);
                                var _wrap$8 = $8660;
                            };
                            var _args$9 = String$join$(",", _args$3);
                            var self = _wrap$8;
                            if (self) {
                                var $8661 = String$flatten$(List$cons$("(", List$cons$(_func$7, List$cons$(")", List$nil))));
                                var _func$10 = $8661;
                            } else {
                                var $8662 = _func$7;
                                var _func$10 = $8662;
                            };
                            var $8656 = String$flatten$(List$cons$(_func$10, List$cons$("(", List$cons$(_args$9, List$cons$(")", List$nil)))));
                            var $8654 = $8656;
                        };
                        return $8654;
                    case 'Fm.Term.ref':
                        var $8663 = self.name;
                        var _arity$5 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$5 === 3n));
                        if (self) {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$7 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$8 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8665 = String$flatten$(List$cons$(_eq_lft$7, List$cons$(" == ", List$cons$(_eq_rgt$8, List$nil))));
                            var $8664 = $8665;
                        } else {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$6;
                            if (self.length === 0) {
                                var $8667 = Bool$false;
                                var _wrap$7 = $8667;
                            } else {
                                var $8668 = self.charCodeAt(0);
                                var $8669 = self.slice(1);
                                var $8670 = ($8668 === 40);
                                var _wrap$7 = $8670;
                            };
                            var _args$8 = String$join$(",", _args$3);
                            var self = _wrap$7;
                            if (self) {
                                var $8671 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(")", List$nil))));
                                var _func$9 = $8671;
                            } else {
                                var $8672 = _func$6;
                                var _func$9 = $8672;
                            };
                            var $8666 = String$flatten$(List$cons$(_func$9, List$cons$("(", List$cons$(_args$8, List$cons$(")", List$nil)))));
                            var $8664 = $8666;
                        };
                        return $8664;
                    case 'Fm.Term.typ':
                        var _arity$4 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$4 === 3n));
                        if (self) {
                            var _func$5 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$6 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$7 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8674 = String$flatten$(List$cons$(_eq_lft$6, List$cons$(" == ", List$cons$(_eq_rgt$7, List$nil))));
                            var $8673 = $8674;
                        } else {
                            var _func$5 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$5;
                            if (self.length === 0) {
                                var $8676 = Bool$false;
                                var _wrap$6 = $8676;
                            } else {
                                var $8677 = self.charCodeAt(0);
                                var $8678 = self.slice(1);
                                var $8679 = ($8677 === 40);
                                var _wrap$6 = $8679;
                            };
                            var _args$7 = String$join$(",", _args$3);
                            var self = _wrap$6;
                            if (self) {
                                var $8680 = String$flatten$(List$cons$("(", List$cons$(_func$5, List$cons$(")", List$nil))));
                                var _func$8 = $8680;
                            } else {
                                var $8681 = _func$5;
                                var _func$8 = $8681;
                            };
                            var $8675 = String$flatten$(List$cons$(_func$8, List$cons$("(", List$cons$(_args$7, List$cons$(")", List$nil)))));
                            var $8673 = $8675;
                        };
                        return $8673;
                    case 'Fm.Term.all':
                        var $8682 = self.eras;
                        var $8683 = self.self;
                        var $8684 = self.name;
                        var $8685 = self.xtyp;
                        var $8686 = self.body;
                        var _arity$9 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$9 === 3n));
                        if (self) {
                            var _func$10 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$11 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$12 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8688 = String$flatten$(List$cons$(_eq_lft$11, List$cons$(" == ", List$cons$(_eq_rgt$12, List$nil))));
                            var $8687 = $8688;
                        } else {
                            var _func$10 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$10;
                            if (self.length === 0) {
                                var $8690 = Bool$false;
                                var _wrap$11 = $8690;
                            } else {
                                var $8691 = self.charCodeAt(0);
                                var $8692 = self.slice(1);
                                var $8693 = ($8691 === 40);
                                var _wrap$11 = $8693;
                            };
                            var _args$12 = String$join$(",", _args$3);
                            var self = _wrap$11;
                            if (self) {
                                var $8694 = String$flatten$(List$cons$("(", List$cons$(_func$10, List$cons$(")", List$nil))));
                                var _func$13 = $8694;
                            } else {
                                var $8695 = _func$10;
                                var _func$13 = $8695;
                            };
                            var $8689 = String$flatten$(List$cons$(_func$13, List$cons$("(", List$cons$(_args$12, List$cons$(")", List$nil)))));
                            var $8687 = $8689;
                        };
                        return $8687;
                    case 'Fm.Term.lam':
                        var $8696 = self.name;
                        var $8697 = self.body;
                        var _arity$6 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$6 === 3n));
                        if (self) {
                            var _func$7 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$8 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$9 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8699 = String$flatten$(List$cons$(_eq_lft$8, List$cons$(" == ", List$cons$(_eq_rgt$9, List$nil))));
                            var $8698 = $8699;
                        } else {
                            var _func$7 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$7;
                            if (self.length === 0) {
                                var $8701 = Bool$false;
                                var _wrap$8 = $8701;
                            } else {
                                var $8702 = self.charCodeAt(0);
                                var $8703 = self.slice(1);
                                var $8704 = ($8702 === 40);
                                var _wrap$8 = $8704;
                            };
                            var _args$9 = String$join$(",", _args$3);
                            var self = _wrap$8;
                            if (self) {
                                var $8705 = String$flatten$(List$cons$("(", List$cons$(_func$7, List$cons$(")", List$nil))));
                                var _func$10 = $8705;
                            } else {
                                var $8706 = _func$7;
                                var _func$10 = $8706;
                            };
                            var $8700 = String$flatten$(List$cons$(_func$10, List$cons$("(", List$cons$(_args$9, List$cons$(")", List$nil)))));
                            var $8698 = $8700;
                        };
                        return $8698;
                    case 'Fm.Term.app':
                        var $8707 = self.func;
                        var $8708 = self.argm;
                        var _argm$6 = Fm$Term$show$go$($8708, Fm$MPath$i$(_path$2));
                        var $8709 = Fm$Term$show$app$($8707, Fm$MPath$o$(_path$2), List$cons$(_argm$6, _args$3));
                        return $8709;
                    case 'Fm.Term.let':
                        var $8710 = self.name;
                        var $8711 = self.expr;
                        var $8712 = self.body;
                        var _arity$7 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$7 === 3n));
                        if (self) {
                            var _func$8 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$9 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$10 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8714 = String$flatten$(List$cons$(_eq_lft$9, List$cons$(" == ", List$cons$(_eq_rgt$10, List$nil))));
                            var $8713 = $8714;
                        } else {
                            var _func$8 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$8;
                            if (self.length === 0) {
                                var $8716 = Bool$false;
                                var _wrap$9 = $8716;
                            } else {
                                var $8717 = self.charCodeAt(0);
                                var $8718 = self.slice(1);
                                var $8719 = ($8717 === 40);
                                var _wrap$9 = $8719;
                            };
                            var _args$10 = String$join$(",", _args$3);
                            var self = _wrap$9;
                            if (self) {
                                var $8720 = String$flatten$(List$cons$("(", List$cons$(_func$8, List$cons$(")", List$nil))));
                                var _func$11 = $8720;
                            } else {
                                var $8721 = _func$8;
                                var _func$11 = $8721;
                            };
                            var $8715 = String$flatten$(List$cons$(_func$11, List$cons$("(", List$cons$(_args$10, List$cons$(")", List$nil)))));
                            var $8713 = $8715;
                        };
                        return $8713;
                    case 'Fm.Term.def':
                        var $8722 = self.name;
                        var $8723 = self.expr;
                        var $8724 = self.body;
                        var _arity$7 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$7 === 3n));
                        if (self) {
                            var _func$8 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$9 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$10 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8726 = String$flatten$(List$cons$(_eq_lft$9, List$cons$(" == ", List$cons$(_eq_rgt$10, List$nil))));
                            var $8725 = $8726;
                        } else {
                            var _func$8 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$8;
                            if (self.length === 0) {
                                var $8728 = Bool$false;
                                var _wrap$9 = $8728;
                            } else {
                                var $8729 = self.charCodeAt(0);
                                var $8730 = self.slice(1);
                                var $8731 = ($8729 === 40);
                                var _wrap$9 = $8731;
                            };
                            var _args$10 = String$join$(",", _args$3);
                            var self = _wrap$9;
                            if (self) {
                                var $8732 = String$flatten$(List$cons$("(", List$cons$(_func$8, List$cons$(")", List$nil))));
                                var _func$11 = $8732;
                            } else {
                                var $8733 = _func$8;
                                var _func$11 = $8733;
                            };
                            var $8727 = String$flatten$(List$cons$(_func$11, List$cons$("(", List$cons$(_args$10, List$cons$(")", List$nil)))));
                            var $8725 = $8727;
                        };
                        return $8725;
                    case 'Fm.Term.ann':
                        var $8734 = self.done;
                        var $8735 = self.term;
                        var $8736 = self.type;
                        var _arity$7 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$7 === 3n));
                        if (self) {
                            var _func$8 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$9 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$10 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8738 = String$flatten$(List$cons$(_eq_lft$9, List$cons$(" == ", List$cons$(_eq_rgt$10, List$nil))));
                            var $8737 = $8738;
                        } else {
                            var _func$8 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$8;
                            if (self.length === 0) {
                                var $8740 = Bool$false;
                                var _wrap$9 = $8740;
                            } else {
                                var $8741 = self.charCodeAt(0);
                                var $8742 = self.slice(1);
                                var $8743 = ($8741 === 40);
                                var _wrap$9 = $8743;
                            };
                            var _args$10 = String$join$(",", _args$3);
                            var self = _wrap$9;
                            if (self) {
                                var $8744 = String$flatten$(List$cons$("(", List$cons$(_func$8, List$cons$(")", List$nil))));
                                var _func$11 = $8744;
                            } else {
                                var $8745 = _func$8;
                                var _func$11 = $8745;
                            };
                            var $8739 = String$flatten$(List$cons$(_func$11, List$cons$("(", List$cons$(_args$10, List$cons$(")", List$nil)))));
                            var $8737 = $8739;
                        };
                        return $8737;
                    case 'Fm.Term.gol':
                        var $8746 = self.name;
                        var $8747 = self.dref;
                        var $8748 = self.verb;
                        var _arity$7 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$7 === 3n));
                        if (self) {
                            var _func$8 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$9 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$10 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8750 = String$flatten$(List$cons$(_eq_lft$9, List$cons$(" == ", List$cons$(_eq_rgt$10, List$nil))));
                            var $8749 = $8750;
                        } else {
                            var _func$8 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$8;
                            if (self.length === 0) {
                                var $8752 = Bool$false;
                                var _wrap$9 = $8752;
                            } else {
                                var $8753 = self.charCodeAt(0);
                                var $8754 = self.slice(1);
                                var $8755 = ($8753 === 40);
                                var _wrap$9 = $8755;
                            };
                            var _args$10 = String$join$(",", _args$3);
                            var self = _wrap$9;
                            if (self) {
                                var $8756 = String$flatten$(List$cons$("(", List$cons$(_func$8, List$cons$(")", List$nil))));
                                var _func$11 = $8756;
                            } else {
                                var $8757 = _func$8;
                                var _func$11 = $8757;
                            };
                            var $8751 = String$flatten$(List$cons$(_func$11, List$cons$("(", List$cons$(_args$10, List$cons$(")", List$nil)))));
                            var $8749 = $8751;
                        };
                        return $8749;
                    case 'Fm.Term.hol':
                        var $8758 = self.path;
                        var _arity$5 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$5 === 3n));
                        if (self) {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$7 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$8 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8760 = String$flatten$(List$cons$(_eq_lft$7, List$cons$(" == ", List$cons$(_eq_rgt$8, List$nil))));
                            var $8759 = $8760;
                        } else {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$6;
                            if (self.length === 0) {
                                var $8762 = Bool$false;
                                var _wrap$7 = $8762;
                            } else {
                                var $8763 = self.charCodeAt(0);
                                var $8764 = self.slice(1);
                                var $8765 = ($8763 === 40);
                                var _wrap$7 = $8765;
                            };
                            var _args$8 = String$join$(",", _args$3);
                            var self = _wrap$7;
                            if (self) {
                                var $8766 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(")", List$nil))));
                                var _func$9 = $8766;
                            } else {
                                var $8767 = _func$6;
                                var _func$9 = $8767;
                            };
                            var $8761 = String$flatten$(List$cons$(_func$9, List$cons$("(", List$cons$(_args$8, List$cons$(")", List$nil)))));
                            var $8759 = $8761;
                        };
                        return $8759;
                    case 'Fm.Term.nat':
                        var $8768 = self.natx;
                        var _arity$5 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$5 === 3n));
                        if (self) {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$7 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$8 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8770 = String$flatten$(List$cons$(_eq_lft$7, List$cons$(" == ", List$cons$(_eq_rgt$8, List$nil))));
                            var $8769 = $8770;
                        } else {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$6;
                            if (self.length === 0) {
                                var $8772 = Bool$false;
                                var _wrap$7 = $8772;
                            } else {
                                var $8773 = self.charCodeAt(0);
                                var $8774 = self.slice(1);
                                var $8775 = ($8773 === 40);
                                var _wrap$7 = $8775;
                            };
                            var _args$8 = String$join$(",", _args$3);
                            var self = _wrap$7;
                            if (self) {
                                var $8776 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(")", List$nil))));
                                var _func$9 = $8776;
                            } else {
                                var $8777 = _func$6;
                                var _func$9 = $8777;
                            };
                            var $8771 = String$flatten$(List$cons$(_func$9, List$cons$("(", List$cons$(_args$8, List$cons$(")", List$nil)))));
                            var $8769 = $8771;
                        };
                        return $8769;
                    case 'Fm.Term.chr':
                        var $8778 = self.chrx;
                        var _arity$5 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$5 === 3n));
                        if (self) {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$7 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$8 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8780 = String$flatten$(List$cons$(_eq_lft$7, List$cons$(" == ", List$cons$(_eq_rgt$8, List$nil))));
                            var $8779 = $8780;
                        } else {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$6;
                            if (self.length === 0) {
                                var $8782 = Bool$false;
                                var _wrap$7 = $8782;
                            } else {
                                var $8783 = self.charCodeAt(0);
                                var $8784 = self.slice(1);
                                var $8785 = ($8783 === 40);
                                var _wrap$7 = $8785;
                            };
                            var _args$8 = String$join$(",", _args$3);
                            var self = _wrap$7;
                            if (self) {
                                var $8786 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(")", List$nil))));
                                var _func$9 = $8786;
                            } else {
                                var $8787 = _func$6;
                                var _func$9 = $8787;
                            };
                            var $8781 = String$flatten$(List$cons$(_func$9, List$cons$("(", List$cons$(_args$8, List$cons$(")", List$nil)))));
                            var $8779 = $8781;
                        };
                        return $8779;
                    case 'Fm.Term.str':
                        var $8788 = self.strx;
                        var _arity$5 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$5 === 3n));
                        if (self) {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$7 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$8 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8790 = String$flatten$(List$cons$(_eq_lft$7, List$cons$(" == ", List$cons$(_eq_rgt$8, List$nil))));
                            var $8789 = $8790;
                        } else {
                            var _func$6 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$6;
                            if (self.length === 0) {
                                var $8792 = Bool$false;
                                var _wrap$7 = $8792;
                            } else {
                                var $8793 = self.charCodeAt(0);
                                var $8794 = self.slice(1);
                                var $8795 = ($8793 === 40);
                                var _wrap$7 = $8795;
                            };
                            var _args$8 = String$join$(",", _args$3);
                            var self = _wrap$7;
                            if (self) {
                                var $8796 = String$flatten$(List$cons$("(", List$cons$(_func$6, List$cons$(")", List$nil))));
                                var _func$9 = $8796;
                            } else {
                                var $8797 = _func$6;
                                var _func$9 = $8797;
                            };
                            var $8791 = String$flatten$(List$cons$(_func$9, List$cons$("(", List$cons$(_args$8, List$cons$(")", List$nil)))));
                            var $8789 = $8791;
                        };
                        return $8789;
                    case 'Fm.Term.cse':
                        var $8798 = self.path;
                        var $8799 = self.expr;
                        var $8800 = self.name;
                        var $8801 = self.with;
                        var $8802 = self.cses;
                        var $8803 = self.moti;
                        var _arity$10 = (list_length(_args$3));
                        var self = (Fm$Term$show$is_ref$(_term$1, "Equal") && (_arity$10 === 3n));
                        if (self) {
                            var _func$11 = Fm$Term$show$go$(_term$1, _path$2);
                            var _eq_lft$12 = Maybe$default$("?", List$at$(1n, _args$3));
                            var _eq_rgt$13 = Maybe$default$("?", List$at$(2n, _args$3));
                            var $8805 = String$flatten$(List$cons$(_eq_lft$12, List$cons$(" == ", List$cons$(_eq_rgt$13, List$nil))));
                            var $8804 = $8805;
                        } else {
                            var _func$11 = Fm$Term$show$go$(_term$1, _path$2);
                            var self = _func$11;
                            if (self.length === 0) {
                                var $8807 = Bool$false;
                                var _wrap$12 = $8807;
                            } else {
                                var $8808 = self.charCodeAt(0);
                                var $8809 = self.slice(1);
                                var $8810 = ($8808 === 40);
                                var _wrap$12 = $8810;
                            };
                            var _args$13 = String$join$(",", _args$3);
                            var self = _wrap$12;
                            if (self) {
                                var $8811 = String$flatten$(List$cons$("(", List$cons$(_func$11, List$cons$(")", List$nil))));
                                var _func$14 = $8811;
                            } else {
                                var $8812 = _func$11;
                                var _func$14 = $8812;
                            };
                            var $8806 = String$flatten$(List$cons$(_func$14, List$cons$("(", List$cons$(_args$13, List$cons$(")", List$nil)))));
                            var $8804 = $8806;
                        };
                        return $8804;
                    case 'Fm.Term.ori':
                        var $8813 = self.orig;
                        var $8814 = self.expr;
                        var $8815 = Fm$Term$show$app$($8814, _path$2, _args$3);
                        return $8815;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Term$show$app = x0 => x1 => x2 => Fm$Term$show$app$(x0, x1, x2);

    function Map$to_list$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'Map.new':
                var $8817 = _list$4;
                var $8816 = $8817;
                break;
            case 'Map.tie':
                var $8818 = self.val;
                var $8819 = self.lft;
                var $8820 = self.rgt;
                var self = $8818;
                switch (self._) {
                    case 'Maybe.none':
                        var $8822 = _list$4;
                        var _list0$8 = $8822;
                        break;
                    case 'Maybe.some':
                        var $8823 = self.value;
                        var $8824 = List$cons$(Pair$new$(Bits$reverse$(_key$3), $8823), _list$4);
                        var _list0$8 = $8824;
                        break;
                };
                var _list1$9 = Map$to_list$go$($8819, (_key$3 + '0'), _list0$8);
                var _list2$10 = Map$to_list$go$($8820, (_key$3 + '1'), _list1$9);
                var $8821 = _list2$10;
                var $8816 = $8821;
                break;
        };
        return $8816;
    };
    const Map$to_list$go = x0 => x1 => x2 => Map$to_list$go$(x0, x1, x2);

    function Map$to_list$(_xs$2) {
        var $8825 = List$reverse$(Map$to_list$go$(_xs$2, Bits$e, List$nil));
        return $8825;
    };
    const Map$to_list = x0 => Map$to_list$(x0);

    function Bits$chunks_of$go$(_len$1, _bits$2, _need$3, _chunk$4) {
        var self = _bits$2;
        switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
            case 'e':
                var $8827 = List$cons$(Bits$reverse$(_chunk$4), List$nil);
                var $8826 = $8827;
                break;
            case 'o':
                var $8828 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $8830 = List$cons$(_head$6, _tail$7);
                    var $8829 = $8830;
                } else {
                    var $8831 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '0');
                    var $8832 = Bits$chunks_of$go$(_len$1, $8828, $8831, _chunk$7);
                    var $8829 = $8832;
                };
                var $8826 = $8829;
                break;
            case 'i':
                var $8833 = self.slice(0, -1);
                var self = _need$3;
                if (self === 0n) {
                    var _head$6 = Bits$reverse$(_chunk$4);
                    var _tail$7 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
                    var $8835 = List$cons$(_head$6, _tail$7);
                    var $8834 = $8835;
                } else {
                    var $8836 = (self - 1n);
                    var _chunk$7 = (_chunk$4 + '1');
                    var $8837 = Bits$chunks_of$go$(_len$1, $8833, $8836, _chunk$7);
                    var $8834 = $8837;
                };
                var $8826 = $8834;
                break;
        };
        return $8826;
    };
    const Bits$chunks_of$go = x0 => x1 => x2 => x3 => Bits$chunks_of$go$(x0, x1, x2, x3);

    function Bits$chunks_of$(_len$1, _bits$2) {
        var $8838 = Bits$chunks_of$go$(_len$1, _bits$2, _len$1, Bits$e);
        return $8838;
    };
    const Bits$chunks_of = x0 => x1 => Bits$chunks_of$(x0, x1);

    function Word$from_bits$(_size$1, _bits$2) {
        var self = _size$1;
        if (self === 0n) {
            var $8840 = Word$e;
            var $8839 = $8840;
        } else {
            var $8841 = (self - 1n);
            var self = _bits$2;
            switch (self.length === 0 ? 'e' : self[self.length - 1] === '0' ? 'o' : 'i') {
                case 'e':
                    var $8843 = Word$o$(Word$from_bits$($8841, Bits$e));
                    var $8842 = $8843;
                    break;
                case 'o':
                    var $8844 = self.slice(0, -1);
                    var $8845 = Word$o$(Word$from_bits$($8841, $8844));
                    var $8842 = $8845;
                    break;
                case 'i':
                    var $8846 = self.slice(0, -1);
                    var $8847 = Word$i$(Word$from_bits$($8841, $8846));
                    var $8842 = $8847;
                    break;
            };
            var $8839 = $8842;
        };
        return $8839;
    };
    const Word$from_bits = x0 => x1 => Word$from_bits$(x0, x1);

    function Fm$Name$from_bits$(_bits$1) {
        var _list$2 = Bits$chunks_of$(6n, _bits$1);
        var _name$3 = List$fold$(_list$2, String$nil, (_bts$3 => _name$4 => {
            var _u16$5 = U16$new$(Word$from_bits$(16n, Bits$reverse$(_bts$3)));
            var self = U16$btw$(0, _u16$5, 25);
            if (self) {
                var $8850 = ((_u16$5 + 65) & 0xFFFF);
                var _chr$6 = $8850;
            } else {
                var self = U16$btw$(26, _u16$5, 51);
                if (self) {
                    var $8852 = ((_u16$5 + 71) & 0xFFFF);
                    var $8851 = $8852;
                } else {
                    var self = U16$btw$(52, _u16$5, 61);
                    if (self) {
                        var $8854 = (Math.max(_u16$5 - 4, 0));
                        var $8853 = $8854;
                    } else {
                        var self = (62 === _u16$5);
                        if (self) {
                            var $8856 = 46;
                            var $8855 = $8856;
                        } else {
                            var $8857 = 95;
                            var $8855 = $8857;
                        };
                        var $8853 = $8855;
                    };
                    var $8851 = $8853;
                };
                var _chr$6 = $8851;
            };
            var $8849 = String$cons$(_chr$6, _name$4);
            return $8849;
        }));
        var $8848 = _name$3;
        return $8848;
    };
    const Fm$Name$from_bits = x0 => Fm$Name$from_bits$(x0);

    function Fm$Term$show$go$(_term$1, _path$2) {
        var self = Fm$Term$show$as_nat$(_term$1);
        switch (self._) {
            case 'Maybe.none':
                var self = _term$1;
                switch (self._) {
                    case 'Fm.Term.var':
                        var $8860 = self.name;
                        var $8861 = self.indx;
                        var $8862 = Fm$Name$show$($8860);
                        var $8859 = $8862;
                        break;
                    case 'Fm.Term.ref':
                        var $8863 = self.name;
                        var _name$4 = Fm$Name$show$($8863);
                        var self = _path$2;
                        switch (self._) {
                            case 'Maybe.none':
                                var $8865 = _name$4;
                                var $8864 = $8865;
                                break;
                            case 'Maybe.some':
                                var $8866 = self.value;
                                var _path_val$6 = ((Bits$e + '1') + Fm$Path$to_bits$($8866));
                                var _path_str$7 = Nat$show$(Bits$to_nat$(_path_val$6));
                                var $8867 = String$flatten$(List$cons$(_name$4, List$cons$(Fm$color$("2", ("-" + _path_str$7)), List$nil)));
                                var $8864 = $8867;
                                break;
                        };
                        var $8859 = $8864;
                        break;
                    case 'Fm.Term.typ':
                        var $8868 = "Type";
                        var $8859 = $8868;
                        break;
                    case 'Fm.Term.all':
                        var $8869 = self.eras;
                        var $8870 = self.self;
                        var $8871 = self.name;
                        var $8872 = self.xtyp;
                        var $8873 = self.body;
                        var _eras$8 = $8869;
                        var _self$9 = Fm$Name$show$($8870);
                        var _name$10 = Fm$Name$show$($8871);
                        var _type$11 = Fm$Term$show$go$($8872, Fm$MPath$o$(_path$2));
                        var self = _eras$8;
                        if (self) {
                            var $8875 = "<";
                            var _open$12 = $8875;
                        } else {
                            var $8876 = "(";
                            var _open$12 = $8876;
                        };
                        var self = _eras$8;
                        if (self) {
                            var $8877 = ">";
                            var _clos$13 = $8877;
                        } else {
                            var $8878 = ")";
                            var _clos$13 = $8878;
                        };
                        var _body$14 = Fm$Term$show$go$($8873(Fm$Term$var$($8870, 0n))(Fm$Term$var$($8871, 0n)), Fm$MPath$i$(_path$2));
                        var $8874 = String$flatten$(List$cons$(_self$9, List$cons$(_open$12, List$cons$(_name$10, List$cons$(":", List$cons$(_type$11, List$cons$(_clos$13, List$cons$(" ", List$cons$(_body$14, List$nil)))))))));
                        var $8859 = $8874;
                        break;
                    case 'Fm.Term.lam':
                        var $8879 = self.name;
                        var $8880 = self.body;
                        var _name$5 = Fm$Name$show$($8879);
                        var _body$6 = Fm$Term$show$go$($8880(Fm$Term$var$($8879, 0n)), Fm$MPath$o$(_path$2));
                        var $8881 = String$flatten$(List$cons$("(", List$cons$(_name$5, List$cons$(") ", List$cons$(_body$6, List$nil)))));
                        var $8859 = $8881;
                        break;
                    case 'Fm.Term.app':
                        var $8882 = self.func;
                        var $8883 = self.argm;
                        var $8884 = Fm$Term$show$app$(_term$1, _path$2, List$nil);
                        var $8859 = $8884;
                        break;
                    case 'Fm.Term.let':
                        var $8885 = self.name;
                        var $8886 = self.expr;
                        var $8887 = self.body;
                        var _name$6 = Fm$Name$show$($8885);
                        var _expr$7 = Fm$Term$show$go$($8886, Fm$MPath$o$(_path$2));
                        var _body$8 = Fm$Term$show$go$($8887(Fm$Term$var$($8885, 0n)), Fm$MPath$i$(_path$2));
                        var $8888 = String$flatten$(List$cons$("let ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $8859 = $8888;
                        break;
                    case 'Fm.Term.def':
                        var $8889 = self.name;
                        var $8890 = self.expr;
                        var $8891 = self.body;
                        var _name$6 = Fm$Name$show$($8889);
                        var _expr$7 = Fm$Term$show$go$($8890, Fm$MPath$o$(_path$2));
                        var _body$8 = Fm$Term$show$go$($8891(Fm$Term$var$($8889, 0n)), Fm$MPath$i$(_path$2));
                        var $8892 = String$flatten$(List$cons$("def ", List$cons$(_name$6, List$cons$(" = ", List$cons$(_expr$7, List$cons$("; ", List$cons$(_body$8, List$nil)))))));
                        var $8859 = $8892;
                        break;
                    case 'Fm.Term.ann':
                        var $8893 = self.done;
                        var $8894 = self.term;
                        var $8895 = self.type;
                        var _term$6 = Fm$Term$show$go$($8894, Fm$MPath$o$(_path$2));
                        var _type$7 = Fm$Term$show$go$($8895, Fm$MPath$i$(_path$2));
                        var $8896 = String$flatten$(List$cons$(_term$6, List$cons$("::", List$cons$(_type$7, List$nil))));
                        var $8859 = $8896;
                        break;
                    case 'Fm.Term.gol':
                        var $8897 = self.name;
                        var $8898 = self.dref;
                        var $8899 = self.verb;
                        var _name$6 = Fm$Name$show$($8897);
                        var $8900 = String$flatten$(List$cons$("?", List$cons$(_name$6, List$nil)));
                        var $8859 = $8900;
                        break;
                    case 'Fm.Term.hol':
                        var $8901 = self.path;
                        var $8902 = "_";
                        var $8859 = $8902;
                        break;
                    case 'Fm.Term.nat':
                        var $8903 = self.natx;
                        var $8904 = String$flatten$(List$cons$(Nat$show$($8903), List$nil));
                        var $8859 = $8904;
                        break;
                    case 'Fm.Term.chr':
                        var $8905 = self.chrx;
                        var $8906 = String$flatten$(List$cons$("\'", List$cons$(Fm$escape$char$($8905), List$cons$("\'", List$nil))));
                        var $8859 = $8906;
                        break;
                    case 'Fm.Term.str':
                        var $8907 = self.strx;
                        var $8908 = String$flatten$(List$cons$("\"", List$cons$(Fm$escape$($8907), List$cons$("\"", List$nil))));
                        var $8859 = $8908;
                        break;
                    case 'Fm.Term.cse':
                        var $8909 = self.path;
                        var $8910 = self.expr;
                        var $8911 = self.name;
                        var $8912 = self.with;
                        var $8913 = self.cses;
                        var $8914 = self.moti;
                        var _expr$9 = Fm$Term$show$go$($8910, Fm$MPath$o$(_path$2));
                        var _name$10 = Fm$Name$show$($8911);
                        var _wyth$11 = String$join$("", List$mapped$($8912, (_defn$11 => {
                            var self = _defn$11;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $8917 = self.file;
                                    var $8918 = self.code;
                                    var $8919 = self.name;
                                    var $8920 = self.term;
                                    var $8921 = self.type;
                                    var $8922 = self.stat;
                                    var _name$18 = Fm$Name$show$($8919);
                                    var _type$19 = Fm$Term$show$go$($8921, Maybe$none);
                                    var _term$20 = Fm$Term$show$go$($8920, Maybe$none);
                                    var $8923 = String$flatten$(List$cons$(_name$18, List$cons$(": ", List$cons$(_type$19, List$cons$(" = ", List$cons$(_term$20, List$cons$(";", List$nil)))))));
                                    var $8916 = $8923;
                                    break;
                            };
                            return $8916;
                        })));
                        var _cses$12 = Map$to_list$($8913);
                        var _cses$13 = String$join$("", List$mapped$(_cses$12, (_x$13 => {
                            var _name$14 = Fm$Name$from_bits$(Pair$fst$(_x$13));
                            var _term$15 = Fm$Term$show$go$(Pair$snd$(_x$13), Maybe$none);
                            var $8924 = String$flatten$(List$cons$(_name$14, List$cons$(": ", List$cons$(_term$15, List$cons$("; ", List$nil)))));
                            return $8924;
                        })));
                        var self = $8914;
                        switch (self._) {
                            case 'Maybe.none':
                                var $8925 = "";
                                var _moti$14 = $8925;
                                break;
                            case 'Maybe.some':
                                var $8926 = self.value;
                                var $8927 = String$flatten$(List$cons$(": ", List$cons$(Fm$Term$show$go$($8926, Maybe$none), List$nil)));
                                var _moti$14 = $8927;
                                break;
                        };
                        var $8915 = String$flatten$(List$cons$("case ", List$cons$(_expr$9, List$cons$(" as ", List$cons$(_name$10, List$cons$(_wyth$11, List$cons$(" { ", List$cons$(_cses$13, List$cons$("}", List$cons$(_moti$14, List$nil))))))))));
                        var $8859 = $8915;
                        break;
                    case 'Fm.Term.ori':
                        var $8928 = self.orig;
                        var $8929 = self.expr;
                        var $8930 = Fm$Term$show$go$($8929, _path$2);
                        var $8859 = $8930;
                        break;
                };
                var $8858 = $8859;
                break;
            case 'Maybe.some':
                var $8931 = self.value;
                var $8932 = $8931;
                var $8858 = $8932;
                break;
        };
        return $8858;
    };
    const Fm$Term$show$go = x0 => x1 => Fm$Term$show$go$(x0, x1);

    function Fm$Term$show$(_term$1) {
        var $8933 = Fm$Term$show$go$(_term$1, Maybe$none);
        return $8933;
    };
    const Fm$Term$show = x0 => Fm$Term$show$(x0);

    function Fm$Error$relevant$(_errors$1, _got$2) {
        var self = _errors$1;
        switch (self._) {
            case 'List.nil':
                var $8935 = List$nil;
                var $8934 = $8935;
                break;
            case 'List.cons':
                var $8936 = self.head;
                var $8937 = self.tail;
                var self = $8936;
                switch (self._) {
                    case 'Fm.Error.type_mismatch':
                        var $8939 = self.origin;
                        var $8940 = self.expected;
                        var $8941 = self.detected;
                        var $8942 = self.context;
                        var $8943 = (!_got$2);
                        var _keep$5 = $8943;
                        break;
                    case 'Fm.Error.show_goal':
                        var $8944 = self.name;
                        var $8945 = self.dref;
                        var $8946 = self.verb;
                        var $8947 = self.goal;
                        var $8948 = self.context;
                        var $8949 = Bool$true;
                        var _keep$5 = $8949;
                        break;
                    case 'Fm.Error.waiting':
                        var $8950 = self.name;
                        var $8951 = Bool$false;
                        var _keep$5 = $8951;
                        break;
                    case 'Fm.Error.indirect':
                        var $8952 = self.name;
                        var $8953 = Bool$false;
                        var _keep$5 = $8953;
                        break;
                    case 'Fm.Error.patch':
                        var $8954 = self.path;
                        var $8955 = self.term;
                        var $8956 = Bool$false;
                        var _keep$5 = $8956;
                        break;
                    case 'Fm.Error.undefined_reference':
                        var $8957 = self.origin;
                        var $8958 = self.name;
                        var $8959 = (!_got$2);
                        var _keep$5 = $8959;
                        break;
                    case 'Fm.Error.cant_infer':
                        var $8960 = self.origin;
                        var $8961 = self.term;
                        var $8962 = self.context;
                        var $8963 = (!_got$2);
                        var _keep$5 = $8963;
                        break;
                };
                var self = $8936;
                switch (self._) {
                    case 'Fm.Error.type_mismatch':
                        var $8964 = self.origin;
                        var $8965 = self.expected;
                        var $8966 = self.detected;
                        var $8967 = self.context;
                        var $8968 = Bool$true;
                        var _got$6 = $8968;
                        break;
                    case 'Fm.Error.show_goal':
                        var $8969 = self.name;
                        var $8970 = self.dref;
                        var $8971 = self.verb;
                        var $8972 = self.goal;
                        var $8973 = self.context;
                        var $8974 = _got$2;
                        var _got$6 = $8974;
                        break;
                    case 'Fm.Error.waiting':
                        var $8975 = self.name;
                        var $8976 = _got$2;
                        var _got$6 = $8976;
                        break;
                    case 'Fm.Error.indirect':
                        var $8977 = self.name;
                        var $8978 = _got$2;
                        var _got$6 = $8978;
                        break;
                    case 'Fm.Error.patch':
                        var $8979 = self.path;
                        var $8980 = self.term;
                        var $8981 = _got$2;
                        var _got$6 = $8981;
                        break;
                    case 'Fm.Error.undefined_reference':
                        var $8982 = self.origin;
                        var $8983 = self.name;
                        var $8984 = Bool$true;
                        var _got$6 = $8984;
                        break;
                    case 'Fm.Error.cant_infer':
                        var $8985 = self.origin;
                        var $8986 = self.term;
                        var $8987 = self.context;
                        var $8988 = _got$2;
                        var _got$6 = $8988;
                        break;
                };
                var _tail$7 = Fm$Error$relevant$($8937, _got$6);
                var self = _keep$5;
                if (self) {
                    var $8989 = List$cons$($8936, _tail$7);
                    var $8938 = $8989;
                } else {
                    var $8990 = _tail$7;
                    var $8938 = $8990;
                };
                var $8934 = $8938;
                break;
        };
        return $8934;
    };
    const Fm$Error$relevant = x0 => x1 => Fm$Error$relevant$(x0, x1);

    function Fm$Context$show$(_context$1) {
        var self = _context$1;
        switch (self._) {
            case 'List.nil':
                var $8992 = "";
                var $8991 = $8992;
                break;
            case 'List.cons':
                var $8993 = self.head;
                var $8994 = self.tail;
                var self = $8993;
                switch (self._) {
                    case 'Pair.new':
                        var $8996 = self.fst;
                        var $8997 = self.snd;
                        var _name$6 = Fm$Name$show$($8996);
                        var _type$7 = Fm$Term$show$(Fm$Term$normalize$($8997, Map$new));
                        var _rest$8 = Fm$Context$show$($8994);
                        var $8998 = String$flatten$(List$cons$(_rest$8, List$cons$("- ", List$cons$(_name$6, List$cons$(": ", List$cons$(_type$7, List$cons$("\u{a}", List$nil)))))));
                        var $8995 = $8998;
                        break;
                };
                var $8991 = $8995;
                break;
        };
        return $8991;
    };
    const Fm$Context$show = x0 => Fm$Context$show$(x0);

    function Fm$Term$expand_at$(_path$1, _term$2, _defs$3) {
        var $8999 = Fm$Term$patch_at$(_path$1, _term$2, (_term$4 => {
            var self = _term$4;
            switch (self._) {
                case 'Fm.Term.var':
                    var $9001 = self.name;
                    var $9002 = self.indx;
                    var $9003 = _term$4;
                    var $9000 = $9003;
                    break;
                case 'Fm.Term.ref':
                    var $9004 = self.name;
                    var self = Fm$get$($9004, _defs$3);
                    switch (self._) {
                        case 'Maybe.none':
                            var $9006 = Fm$Term$ref$($9004);
                            var $9005 = $9006;
                            break;
                        case 'Maybe.some':
                            var $9007 = self.value;
                            var self = $9007;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $9009 = self.file;
                                    var $9010 = self.code;
                                    var $9011 = self.name;
                                    var $9012 = self.term;
                                    var $9013 = self.type;
                                    var $9014 = self.stat;
                                    var $9015 = $9012;
                                    var $9008 = $9015;
                                    break;
                            };
                            var $9005 = $9008;
                            break;
                    };
                    var $9000 = $9005;
                    break;
                case 'Fm.Term.typ':
                    var $9016 = _term$4;
                    var $9000 = $9016;
                    break;
                case 'Fm.Term.all':
                    var $9017 = self.eras;
                    var $9018 = self.self;
                    var $9019 = self.name;
                    var $9020 = self.xtyp;
                    var $9021 = self.body;
                    var $9022 = _term$4;
                    var $9000 = $9022;
                    break;
                case 'Fm.Term.lam':
                    var $9023 = self.name;
                    var $9024 = self.body;
                    var $9025 = _term$4;
                    var $9000 = $9025;
                    break;
                case 'Fm.Term.app':
                    var $9026 = self.func;
                    var $9027 = self.argm;
                    var $9028 = _term$4;
                    var $9000 = $9028;
                    break;
                case 'Fm.Term.let':
                    var $9029 = self.name;
                    var $9030 = self.expr;
                    var $9031 = self.body;
                    var $9032 = _term$4;
                    var $9000 = $9032;
                    break;
                case 'Fm.Term.def':
                    var $9033 = self.name;
                    var $9034 = self.expr;
                    var $9035 = self.body;
                    var $9036 = _term$4;
                    var $9000 = $9036;
                    break;
                case 'Fm.Term.ann':
                    var $9037 = self.done;
                    var $9038 = self.term;
                    var $9039 = self.type;
                    var $9040 = _term$4;
                    var $9000 = $9040;
                    break;
                case 'Fm.Term.gol':
                    var $9041 = self.name;
                    var $9042 = self.dref;
                    var $9043 = self.verb;
                    var $9044 = _term$4;
                    var $9000 = $9044;
                    break;
                case 'Fm.Term.hol':
                    var $9045 = self.path;
                    var $9046 = _term$4;
                    var $9000 = $9046;
                    break;
                case 'Fm.Term.nat':
                    var $9047 = self.natx;
                    var $9048 = _term$4;
                    var $9000 = $9048;
                    break;
                case 'Fm.Term.chr':
                    var $9049 = self.chrx;
                    var $9050 = _term$4;
                    var $9000 = $9050;
                    break;
                case 'Fm.Term.str':
                    var $9051 = self.strx;
                    var $9052 = _term$4;
                    var $9000 = $9052;
                    break;
                case 'Fm.Term.cse':
                    var $9053 = self.path;
                    var $9054 = self.expr;
                    var $9055 = self.name;
                    var $9056 = self.with;
                    var $9057 = self.cses;
                    var $9058 = self.moti;
                    var $9059 = _term$4;
                    var $9000 = $9059;
                    break;
                case 'Fm.Term.ori':
                    var $9060 = self.orig;
                    var $9061 = self.expr;
                    var $9062 = _term$4;
                    var $9000 = $9062;
                    break;
            };
            return $9000;
        }));
        return $8999;
    };
    const Fm$Term$expand_at = x0 => x1 => x2 => Fm$Term$expand_at$(x0, x1, x2);

    function Fm$Term$expand_ct$(_term$1, _defs$2, _arity$3) {
        var self = _term$1;
        switch (self._) {
            case 'Fm.Term.var':
                var $9064 = self.name;
                var $9065 = self.indx;
                var $9066 = Fm$Term$var$($9064, $9065);
                var $9063 = $9066;
                break;
            case 'Fm.Term.ref':
                var $9067 = self.name;
                var _expand$5 = Bool$false;
                var _expand$6 = ((($9067 === "Nat.succ") && (_arity$3 > 1n)) || _expand$5);
                var _expand$7 = ((($9067 === "Nat.zero") && (_arity$3 > 0n)) || _expand$6);
                var _expand$8 = ((($9067 === "Bool.true") && (_arity$3 > 0n)) || _expand$7);
                var _expand$9 = ((($9067 === "Bool.false") && (_arity$3 > 0n)) || _expand$8);
                var self = _expand$9;
                if (self) {
                    var self = Fm$get$($9067, _defs$2);
                    switch (self._) {
                        case 'Maybe.none':
                            var $9070 = Fm$Term$ref$($9067);
                            var $9069 = $9070;
                            break;
                        case 'Maybe.some':
                            var $9071 = self.value;
                            var self = $9071;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $9073 = self.file;
                                    var $9074 = self.code;
                                    var $9075 = self.name;
                                    var $9076 = self.term;
                                    var $9077 = self.type;
                                    var $9078 = self.stat;
                                    var $9079 = $9076;
                                    var $9072 = $9079;
                                    break;
                            };
                            var $9069 = $9072;
                            break;
                    };
                    var $9068 = $9069;
                } else {
                    var $9080 = Fm$Term$ref$($9067);
                    var $9068 = $9080;
                };
                var $9063 = $9068;
                break;
            case 'Fm.Term.typ':
                var $9081 = Fm$Term$typ;
                var $9063 = $9081;
                break;
            case 'Fm.Term.all':
                var $9082 = self.eras;
                var $9083 = self.self;
                var $9084 = self.name;
                var $9085 = self.xtyp;
                var $9086 = self.body;
                var $9087 = Fm$Term$all$($9082, $9083, $9084, Fm$Term$expand_ct$($9085, _defs$2, 0n), (_s$9 => _x$10 => {
                    var $9088 = Fm$Term$expand_ct$($9086(_s$9)(_x$10), _defs$2, 0n);
                    return $9088;
                }));
                var $9063 = $9087;
                break;
            case 'Fm.Term.lam':
                var $9089 = self.name;
                var $9090 = self.body;
                var $9091 = Fm$Term$lam$($9089, (_x$6 => {
                    var $9092 = Fm$Term$expand_ct$($9090(_x$6), _defs$2, 0n);
                    return $9092;
                }));
                var $9063 = $9091;
                break;
            case 'Fm.Term.app':
                var $9093 = self.func;
                var $9094 = self.argm;
                var $9095 = Fm$Term$app$(Fm$Term$expand_ct$($9093, _defs$2, Nat$succ$(_arity$3)), Fm$Term$expand_ct$($9094, _defs$2, 0n));
                var $9063 = $9095;
                break;
            case 'Fm.Term.let':
                var $9096 = self.name;
                var $9097 = self.expr;
                var $9098 = self.body;
                var $9099 = Fm$Term$let$($9096, Fm$Term$expand_ct$($9097, _defs$2, 0n), (_x$7 => {
                    var $9100 = Fm$Term$expand_ct$($9098(_x$7), _defs$2, 0n);
                    return $9100;
                }));
                var $9063 = $9099;
                break;
            case 'Fm.Term.def':
                var $9101 = self.name;
                var $9102 = self.expr;
                var $9103 = self.body;
                var $9104 = Fm$Term$def$($9101, Fm$Term$expand_ct$($9102, _defs$2, 0n), (_x$7 => {
                    var $9105 = Fm$Term$expand_ct$($9103(_x$7), _defs$2, 0n);
                    return $9105;
                }));
                var $9063 = $9104;
                break;
            case 'Fm.Term.ann':
                var $9106 = self.done;
                var $9107 = self.term;
                var $9108 = self.type;
                var $9109 = Fm$Term$ann$($9106, Fm$Term$expand_ct$($9107, _defs$2, 0n), Fm$Term$expand_ct$($9108, _defs$2, 0n));
                var $9063 = $9109;
                break;
            case 'Fm.Term.gol':
                var $9110 = self.name;
                var $9111 = self.dref;
                var $9112 = self.verb;
                var $9113 = Fm$Term$gol$($9110, $9111, $9112);
                var $9063 = $9113;
                break;
            case 'Fm.Term.hol':
                var $9114 = self.path;
                var $9115 = Fm$Term$hol$($9114);
                var $9063 = $9115;
                break;
            case 'Fm.Term.nat':
                var $9116 = self.natx;
                var $9117 = Fm$Term$nat$($9116);
                var $9063 = $9117;
                break;
            case 'Fm.Term.chr':
                var $9118 = self.chrx;
                var $9119 = Fm$Term$chr$($9118);
                var $9063 = $9119;
                break;
            case 'Fm.Term.str':
                var $9120 = self.strx;
                var $9121 = Fm$Term$str$($9120);
                var $9063 = $9121;
                break;
            case 'Fm.Term.cse':
                var $9122 = self.path;
                var $9123 = self.expr;
                var $9124 = self.name;
                var $9125 = self.with;
                var $9126 = self.cses;
                var $9127 = self.moti;
                var $9128 = _term$1;
                var $9063 = $9128;
                break;
            case 'Fm.Term.ori':
                var $9129 = self.orig;
                var $9130 = self.expr;
                var $9131 = Fm$Term$ori$($9129, $9130);
                var $9063 = $9131;
                break;
        };
        return $9063;
    };
    const Fm$Term$expand_ct = x0 => x1 => x2 => Fm$Term$expand_ct$(x0, x1, x2);

    function Fm$Term$expand$(_dref$1, _term$2, _defs$3) {
        var _term$4 = Fm$Term$normalize$(_term$2, Map$new);
        var _term$5 = (() => {
            var $9134 = _term$4;
            var $9135 = _dref$1;
            let _term$6 = $9134;
            let _path$5;
            while ($9135._ === 'List.cons') {
                _path$5 = $9135.head;
                var _term$7 = Fm$Term$expand_at$(_path$5, _term$6, _defs$3);
                var _term$8 = Fm$Term$normalize$(_term$7, Map$new);
                var _term$9 = Fm$Term$expand_ct$(_term$8, _defs$3, 0n);
                var _term$10 = Fm$Term$normalize$(_term$9, Map$new);
                var $9134 = _term$10;
                _term$6 = $9134;
                $9135 = $9135.tail;
            }
            return _term$6;
        })();
        var $9132 = _term$5;
        return $9132;
    };
    const Fm$Term$expand = x0 => x1 => x2 => Fm$Term$expand$(x0, x1, x2);

    function Fm$Error$show$(_error$1, _defs$2) {
        var self = _error$1;
        switch (self._) {
            case 'Fm.Error.type_mismatch':
                var $9137 = self.origin;
                var $9138 = self.expected;
                var $9139 = self.detected;
                var $9140 = self.context;
                var self = $9138;
                switch (self._) {
                    case 'Either.left':
                        var $9142 = self.value;
                        var $9143 = $9142;
                        var _expected$7 = $9143;
                        break;
                    case 'Either.right':
                        var $9144 = self.value;
                        var $9145 = Fm$Term$show$(Fm$Term$normalize$($9144, Map$new));
                        var _expected$7 = $9145;
                        break;
                };
                var self = $9139;
                switch (self._) {
                    case 'Either.left':
                        var $9146 = self.value;
                        var $9147 = $9146;
                        var _detected$8 = $9147;
                        break;
                    case 'Either.right':
                        var $9148 = self.value;
                        var $9149 = Fm$Term$show$(Fm$Term$normalize$($9148, Map$new));
                        var _detected$8 = $9149;
                        break;
                };
                var $9141 = String$flatten$(List$cons$("Type mismatch.\u{a}", List$cons$("- Expected: ", List$cons$(_expected$7, List$cons$("\u{a}", List$cons$("- Detected: ", List$cons$(_detected$8, List$cons$("\u{a}", List$cons$((() => {
                    var self = $9140;
                    switch (self._) {
                        case 'List.nil':
                            var $9150 = "";
                            return $9150;
                        case 'List.cons':
                            var $9151 = self.head;
                            var $9152 = self.tail;
                            var $9153 = String$flatten$(List$cons$("With context:\u{a}", List$cons$(Fm$Context$show$($9140), List$nil)));
                            return $9153;
                    };
                })(), List$nil)))))))));
                var $9136 = $9141;
                break;
            case 'Fm.Error.show_goal':
                var $9154 = self.name;
                var $9155 = self.dref;
                var $9156 = self.verb;
                var $9157 = self.goal;
                var $9158 = self.context;
                var _goal_name$8 = String$flatten$(List$cons$("Goal ?", List$cons$(Fm$Name$show$($9154), List$cons$(":\u{a}", List$nil))));
                var self = $9157;
                switch (self._) {
                    case 'Maybe.none':
                        var $9160 = "";
                        var _with_type$9 = $9160;
                        break;
                    case 'Maybe.some':
                        var $9161 = self.value;
                        var _goal$10 = Fm$Term$expand$($9155, $9161, _defs$2);
                        var $9162 = String$flatten$(List$cons$("With type: ", List$cons$((() => {
                            var self = $9156;
                            if (self) {
                                var $9163 = Fm$Term$show$go$(_goal$10, Maybe$some$((_x$11 => {
                                    var $9164 = _x$11;
                                    return $9164;
                                })));
                                return $9163;
                            } else {
                                var $9165 = Fm$Term$show$(_goal$10);
                                return $9165;
                            };
                        })(), List$cons$("\u{a}", List$nil))));
                        var _with_type$9 = $9162;
                        break;
                };
                var self = $9158;
                switch (self._) {
                    case 'List.nil':
                        var $9166 = "";
                        var _with_ctxt$10 = $9166;
                        break;
                    case 'List.cons':
                        var $9167 = self.head;
                        var $9168 = self.tail;
                        var $9169 = String$flatten$(List$cons$("With ctxt:\u{a}", List$cons$(Fm$Context$show$($9158), List$nil)));
                        var _with_ctxt$10 = $9169;
                        break;
                };
                var $9159 = String$flatten$(List$cons$(_goal_name$8, List$cons$(_with_type$9, List$cons$(_with_ctxt$10, List$nil))));
                var $9136 = $9159;
                break;
            case 'Fm.Error.waiting':
                var $9170 = self.name;
                var $9171 = String$flatten$(List$cons$("Waiting for \'", List$cons$($9170, List$cons$("\'.", List$nil))));
                var $9136 = $9171;
                break;
            case 'Fm.Error.indirect':
                var $9172 = self.name;
                var $9173 = String$flatten$(List$cons$("Error on dependency \'", List$cons$($9172, List$cons$("\'.", List$nil))));
                var $9136 = $9173;
                break;
            case 'Fm.Error.patch':
                var $9174 = self.path;
                var $9175 = self.term;
                var $9176 = String$flatten$(List$cons$("Patching: ", List$cons$(Fm$Term$show$($9175), List$nil)));
                var $9136 = $9176;
                break;
            case 'Fm.Error.undefined_reference':
                var $9177 = self.origin;
                var $9178 = self.name;
                var $9179 = String$flatten$(List$cons$("Undefined reference: ", List$cons$(Fm$Name$show$($9178), List$cons$("\u{a}", List$nil))));
                var $9136 = $9179;
                break;
            case 'Fm.Error.cant_infer':
                var $9180 = self.origin;
                var $9181 = self.term;
                var $9182 = self.context;
                var _term$6 = Fm$Term$show$($9181);
                var _context$7 = Fm$Context$show$($9182);
                var $9183 = String$flatten$(List$cons$("Can\'t infer type of: ", List$cons$(_term$6, List$cons$("\u{a}", List$cons$("With ctxt:\u{a}", List$cons$(_context$7, List$nil))))));
                var $9136 = $9183;
                break;
        };
        return $9136;
    };
    const Fm$Error$show = x0 => x1 => Fm$Error$show$(x0, x1);

    function Fm$Error$origin$(_error$1) {
        var self = _error$1;
        switch (self._) {
            case 'Fm.Error.type_mismatch':
                var $9185 = self.origin;
                var $9186 = self.expected;
                var $9187 = self.detected;
                var $9188 = self.context;
                var $9189 = $9185;
                var $9184 = $9189;
                break;
            case 'Fm.Error.show_goal':
                var $9190 = self.name;
                var $9191 = self.dref;
                var $9192 = self.verb;
                var $9193 = self.goal;
                var $9194 = self.context;
                var $9195 = Maybe$none;
                var $9184 = $9195;
                break;
            case 'Fm.Error.waiting':
                var $9196 = self.name;
                var $9197 = Maybe$none;
                var $9184 = $9197;
                break;
            case 'Fm.Error.indirect':
                var $9198 = self.name;
                var $9199 = Maybe$none;
                var $9184 = $9199;
                break;
            case 'Fm.Error.patch':
                var $9200 = self.path;
                var $9201 = self.term;
                var $9202 = Maybe$none;
                var $9184 = $9202;
                break;
            case 'Fm.Error.undefined_reference':
                var $9203 = self.origin;
                var $9204 = self.name;
                var $9205 = $9203;
                var $9184 = $9205;
                break;
            case 'Fm.Error.cant_infer':
                var $9206 = self.origin;
                var $9207 = self.term;
                var $9208 = self.context;
                var $9209 = $9206;
                var $9184 = $9209;
                break;
        };
        return $9184;
    };
    const Fm$Error$origin = x0 => Fm$Error$origin$(x0);

    function Fm$Defs$report$go$(_defs$1, _list$2, _errs$3, _typs$4) {
        var Fm$Defs$report$go$ = (_defs$1, _list$2, _errs$3, _typs$4) => ({
            ctr: 'TCO',
            arg: [_defs$1, _list$2, _errs$3, _typs$4]
        });
        var Fm$Defs$report$go = _defs$1 => _list$2 => _errs$3 => _typs$4 => Fm$Defs$report$go$(_defs$1, _list$2, _errs$3, _typs$4);
        var arg = [_defs$1, _list$2, _errs$3, _typs$4];
        while (true) {
            let [_defs$1, _list$2, _errs$3, _typs$4] = arg;
            var R = (() => {
                var self = _list$2;
                switch (self._) {
                    case 'List.nil':
                        var $9210 = String$flatten$(List$cons$(_typs$4, List$cons$("\u{a}", List$cons$((() => {
                            var self = _errs$3;
                            if (self.length === 0) {
                                var $9211 = "All terms check.";
                                return $9211;
                            } else {
                                var $9212 = self.charCodeAt(0);
                                var $9213 = self.slice(1);
                                var $9214 = _errs$3;
                                return $9214;
                            };
                        })(), List$nil))));
                        return $9210;
                    case 'List.cons':
                        var $9215 = self.head;
                        var $9216 = self.tail;
                        var _name$7 = $9215;
                        var self = Fm$get$(_name$7, _defs$1);
                        switch (self._) {
                            case 'Maybe.none':
                                var $9218 = Fm$Defs$report$go$(_defs$1, $9216, _errs$3, _typs$4);
                                var $9217 = $9218;
                                break;
                            case 'Maybe.some':
                                var $9219 = self.value;
                                var self = $9219;
                                switch (self._) {
                                    case 'Fm.Def.new':
                                        var $9221 = self.file;
                                        var $9222 = self.code;
                                        var $9223 = self.name;
                                        var $9224 = self.term;
                                        var $9225 = self.type;
                                        var $9226 = self.stat;
                                        var _typs$15 = String$flatten$(List$cons$(_typs$4, List$cons$(_name$7, List$cons$(": ", List$cons$(Fm$Term$show$($9225), List$cons$("\u{a}", List$nil))))));
                                        var self = $9226;
                                        switch (self._) {
                                            case 'Fm.Status.init':
                                                var $9228 = Fm$Defs$report$go$(_defs$1, $9216, _errs$3, _typs$15);
                                                var $9227 = $9228;
                                                break;
                                            case 'Fm.Status.wait':
                                                var $9229 = Fm$Defs$report$go$(_defs$1, $9216, _errs$3, _typs$15);
                                                var $9227 = $9229;
                                                break;
                                            case 'Fm.Status.done':
                                                var $9230 = Fm$Defs$report$go$(_defs$1, $9216, _errs$3, _typs$15);
                                                var $9227 = $9230;
                                                break;
                                            case 'Fm.Status.fail':
                                                var $9231 = self.errors;
                                                var self = $9231;
                                                switch (self._) {
                                                    case 'List.nil':
                                                        var $9233 = Fm$Defs$report$go$(_defs$1, $9216, _errs$3, _typs$15);
                                                        var $9232 = $9233;
                                                        break;
                                                    case 'List.cons':
                                                        var $9234 = self.head;
                                                        var $9235 = self.tail;
                                                        var _name_str$19 = Fm$Name$show$($9223);
                                                        var _rel_errs$20 = Fm$Error$relevant$($9231, Bool$false);
                                                        var self = _rel_errs$20;
                                                        switch (self._) {
                                                            case 'List.nil':
                                                                var $9237 = Fm$Defs$report$go$(_defs$1, $9216, _errs$3, _typs$15);
                                                                var $9236 = $9237;
                                                                break;
                                                            case 'List.cons':
                                                                var $9238 = self.head;
                                                                var $9239 = self.tail;
                                                                var _rel_msgs$23 = List$mapped$(_rel_errs$20, (_err$23 => {
                                                                    var $9241 = String$flatten$(List$cons$(Fm$Error$show$(_err$23, _defs$1), List$cons$((() => {
                                                                        var self = Fm$Error$origin$(_err$23);
                                                                        switch (self._) {
                                                                            case 'Maybe.none':
                                                                                var $9242 = "";
                                                                                return $9242;
                                                                            case 'Maybe.some':
                                                                                var $9243 = self.value;
                                                                                var self = $9243;
                                                                                switch (self._) {
                                                                                    case 'Fm.Origin.new':
                                                                                        var $9245 = self.file;
                                                                                        var $9246 = self.from;
                                                                                        var $9247 = self.upto;
                                                                                        var $9248 = String$flatten$(List$cons$("Inside \'", List$cons$($9221, List$cons$("\':\u{a}", List$cons$(Fm$highlight$($9222, $9246, $9247), List$cons$("\u{a}", List$nil))))));
                                                                                        var $9244 = $9248;
                                                                                        break;
                                                                                };
                                                                                return $9244;
                                                                        };
                                                                    })(), List$nil)));
                                                                    return $9241;
                                                                }));
                                                                var _errs$24 = String$flatten$(List$cons$(_errs$3, List$cons$(String$join$("\u{a}", _rel_msgs$23), List$cons$("\u{a}", List$nil))));
                                                                var $9240 = Fm$Defs$report$go$(_defs$1, $9216, _errs$24, _typs$15);
                                                                var $9236 = $9240;
                                                                break;
                                                        };
                                                        var $9232 = $9236;
                                                        break;
                                                };
                                                var $9227 = $9232;
                                                break;
                                        };
                                        var $9220 = $9227;
                                        break;
                                };
                                var $9217 = $9220;
                                break;
                        };
                        return $9217;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const Fm$Defs$report$go = x0 => x1 => x2 => x3 => Fm$Defs$report$go$(x0, x1, x2, x3);

    function Fm$Defs$report$(_defs$1, _list$2) {
        var $9249 = Fm$Defs$report$go$(_defs$1, _list$2, "", "");
        return $9249;
    };
    const Fm$Defs$report = x0 => x1 => Fm$Defs$report$(x0, x1);

    function Fm$checker$io$one$(_name$1) {
        var $9250 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $9251 = _m$bind$2;
            return $9251;
        }))(Fm$Synth$one$(_name$1, Map$new))((_new_defs$2 => {
            var self = _new_defs$2;
            switch (self._) {
                case 'Maybe.none':
                    var $9253 = IO$print$(Fm$Defs$report$(Map$new, List$cons$(_name$1, List$nil)));
                    var $9252 = $9253;
                    break;
                case 'Maybe.some':
                    var $9254 = self.value;
                    var $9255 = IO$print$(Fm$Defs$report$($9254, List$cons$(_name$1, List$nil)));
                    var $9252 = $9255;
                    break;
            };
            return $9252;
        }));
        return $9250;
    };
    const Fm$checker$io$one = x0 => Fm$checker$io$one$(x0);

    function Map$keys$go$(_xs$2, _key$3, _list$4) {
        var self = _xs$2;
        switch (self._) {
            case 'Map.new':
                var $9257 = _list$4;
                var $9256 = $9257;
                break;
            case 'Map.tie':
                var $9258 = self.val;
                var $9259 = self.lft;
                var $9260 = self.rgt;
                var self = $9258;
                switch (self._) {
                    case 'Maybe.none':
                        var $9262 = _list$4;
                        var _list0$8 = $9262;
                        break;
                    case 'Maybe.some':
                        var $9263 = self.value;
                        var $9264 = List$cons$(Bits$reverse$(_key$3), _list$4);
                        var _list0$8 = $9264;
                        break;
                };
                var _list1$9 = Map$keys$go$($9259, (_key$3 + '0'), _list0$8);
                var _list2$10 = Map$keys$go$($9260, (_key$3 + '1'), _list1$9);
                var $9261 = _list2$10;
                var $9256 = $9261;
                break;
        };
        return $9256;
    };
    const Map$keys$go = x0 => x1 => x2 => Map$keys$go$(x0, x1, x2);

    function Map$keys$(_xs$2) {
        var $9265 = List$reverse$(Map$keys$go$(_xs$2, Bits$e, List$nil));
        return $9265;
    };
    const Map$keys = x0 => Map$keys$(x0);

    function Fm$Synth$many$(_names$1, _defs$2) {
        var self = _names$1;
        switch (self._) {
            case 'List.nil':
                var $9267 = IO$monad$((_m$bind$3 => _m$pure$4 => {
                    var $9268 = _m$pure$4;
                    return $9268;
                }))(_defs$2);
                var $9266 = $9267;
                break;
            case 'List.cons':
                var $9269 = self.head;
                var $9270 = self.tail;
                var $9271 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                    var $9272 = _m$bind$5;
                    return $9272;
                }))(Fm$Synth$one$($9269, _defs$2))((_new_defs$5 => {
                    var self = _new_defs$5;
                    switch (self._) {
                        case 'Maybe.none':
                            var $9274 = Fm$Synth$many$($9270, _defs$2);
                            var $9273 = $9274;
                            break;
                        case 'Maybe.some':
                            var $9275 = self.value;
                            var $9276 = Fm$Synth$many$($9270, $9275);
                            var $9273 = $9276;
                            break;
                    };
                    return $9273;
                }));
                var $9266 = $9271;
                break;
        };
        return $9266;
    };
    const Fm$Synth$many = x0 => x1 => Fm$Synth$many$(x0, x1);

    function Fm$Synth$file$(_file$1, _defs$2) {
        var $9277 = IO$monad$((_m$bind$3 => _m$pure$4 => {
            var $9278 = _m$bind$3;
            return $9278;
        }))(IO$get_file$(_file$1))((_code$3 => {
            var _read$4 = Fm$Defs$read$(_file$1, _code$3, _defs$2);
            var self = _read$4;
            switch (self._) {
                case 'Either.left':
                    var $9280 = self.value;
                    var $9281 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                        var $9282 = _m$pure$7;
                        return $9282;
                    }))(Either$left$($9280));
                    var $9279 = $9281;
                    break;
                case 'Either.right':
                    var $9283 = self.value;
                    var _file_defs$6 = $9283;
                    var _file_keys$7 = Map$keys$(_file_defs$6);
                    var _file_nams$8 = List$mapped$(_file_keys$7, Fm$Name$from_bits);
                    var $9284 = IO$monad$((_m$bind$9 => _m$pure$10 => {
                        var $9285 = _m$bind$9;
                        return $9285;
                    }))(Fm$Synth$many$(_file_nams$8, _file_defs$6))((_defs$9 => {
                        var $9286 = IO$monad$((_m$bind$10 => _m$pure$11 => {
                            var $9287 = _m$pure$11;
                            return $9287;
                        }))(Either$right$(Pair$new$(_file_nams$8, _defs$9)));
                        return $9286;
                    }));
                    var $9279 = $9284;
                    break;
            };
            return $9279;
        }));
        return $9277;
    };
    const Fm$Synth$file = x0 => x1 => Fm$Synth$file$(x0, x1);

    function Fm$checker$io$file$(_file$1) {
        var $9288 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $9289 = _m$bind$2;
            return $9289;
        }))(Fm$Synth$file$(_file$1, Map$new))((_loaded$2 => {
            var self = _loaded$2;
            switch (self._) {
                case 'Either.left':
                    var $9291 = self.value;
                    var $9292 = IO$monad$((_m$bind$4 => _m$pure$5 => {
                        var $9293 = _m$bind$4;
                        return $9293;
                    }))(IO$print$(String$flatten$(List$cons$("On \'", List$cons$(_file$1, List$cons$("\':", List$nil))))))((_$4 => {
                        var $9294 = IO$print$($9291);
                        return $9294;
                    }));
                    var $9290 = $9292;
                    break;
                case 'Either.right':
                    var $9295 = self.value;
                    var self = $9295;
                    switch (self._) {
                        case 'Pair.new':
                            var $9297 = self.fst;
                            var $9298 = self.snd;
                            var _nams$6 = $9297;
                            var _defs$7 = $9298;
                            var $9299 = IO$print$(Fm$Defs$report$(_defs$7, _nams$6));
                            var $9296 = $9299;
                            break;
                    };
                    var $9290 = $9296;
                    break;
            };
            return $9290;
        }));
        return $9288;
    };
    const Fm$checker$io$file = x0 => Fm$checker$io$file$(x0);

    function IO$purify$(_io$2) {
        var IO$purify$ = (_io$2) => ({
            ctr: 'TCO',
            arg: [_io$2]
        });
        var IO$purify = _io$2 => IO$purify$(_io$2);
        var arg = [_io$2];
        while (true) {
            let [_io$2] = arg;
            var R = (() => {
                var self = _io$2;
                switch (self._) {
                    case 'IO.end':
                        var $9300 = self.value;
                        var $9301 = $9300;
                        return $9301;
                    case 'IO.ask':
                        var $9302 = self.query;
                        var $9303 = self.param;
                        var $9304 = self.then;
                        var $9305 = IO$purify$($9304(""));
                        return $9305;
                };
            })();
            if (R.ctr === 'TCO') arg = R.arg;
            else return R;
        }
    };
    const IO$purify = x0 => IO$purify$(x0);

    function Fm$checker$code$(_code$1) {
        var self = Fm$Defs$read$("Main.fm", _code$1, Map$new);
        switch (self._) {
            case 'Either.left':
                var $9307 = self.value;
                var $9308 = $9307;
                var $9306 = $9308;
                break;
            case 'Either.right':
                var $9309 = self.value;
                var $9310 = IO$purify$((() => {
                    var _defs$3 = $9309;
                    var _nams$4 = List$mapped$(Map$keys$(_defs$3), Fm$Name$from_bits);
                    var $9311 = IO$monad$((_m$bind$5 => _m$pure$6 => {
                        var $9312 = _m$bind$5;
                        return $9312;
                    }))(Fm$Synth$many$(_nams$4, _defs$3))((_defs$5 => {
                        var $9313 = IO$monad$((_m$bind$6 => _m$pure$7 => {
                            var $9314 = _m$pure$7;
                            return $9314;
                        }))(Fm$Defs$report$(_defs$5, _nams$4));
                        return $9313;
                    }));
                    return $9311;
                })());
                var $9306 = $9310;
                break;
        };
        return $9306;
    };
    const Fm$checker$code = x0 => Fm$checker$code$(x0);

    function Fm$Term$read$(_code$1) {
        var self = Fm$Parser$term$(0n, _code$1);
        switch (self._) {
            case 'Parser.Reply.error':
                var $9316 = self.idx;
                var $9317 = self.code;
                var $9318 = self.err;
                var $9319 = Maybe$none;
                var $9315 = $9319;
                break;
            case 'Parser.Reply.value':
                var $9320 = self.idx;
                var $9321 = self.code;
                var $9322 = self.val;
                var $9323 = Maybe$some$($9322);
                var $9315 = $9323;
                break;
        };
        return $9315;
    };
    const Fm$Term$read = x0 => Fm$Term$read$(x0);

    function Fm$compute$io$one$(_name$1) {
        var $9324 = IO$monad$((_m$bind$2 => _m$pure$3 => {
            var $9325 = _m$bind$2;
            return $9325;
        }))(IO$get_file$(Fm$Synth$file_of$(_name$1)))((_code$2 => {
            var self = Fm$Defs$read$((_name$1 + ".fm"), _code$2, Map$new);
            switch (self._) {
                case 'Either.left':
                    var $9327 = self.value;
                    var $9328 = IO$print$($9327);
                    var $9326 = $9328;
                    break;
                case 'Either.right':
                    var $9329 = self.value;
                    var _defs$4 = $9329;
                    var _defn$5 = Fm$get$(_name$1, _defs$4);
                    var self = _defn$5;
                    switch (self._) {
                        case 'Maybe.none':
                            var $9331 = IO$print$(("Term \'" + (_name$1 + "\' not found.")));
                            var $9330 = $9331;
                            break;
                        case 'Maybe.some':
                            var $9332 = self.value;
                            var self = $9332;
                            switch (self._) {
                                case 'Fm.Def.new':
                                    var $9334 = self.file;
                                    var $9335 = self.code;
                                    var $9336 = self.name;
                                    var $9337 = self.term;
                                    var $9338 = self.type;
                                    var $9339 = self.stat;
                                    var $9340 = IO$print$(Fm$Term$show$(Fm$Term$normalize$($9337, _defs$4)));
                                    var $9333 = $9340;
                                    break;
                            };
                            var $9330 = $9333;
                            break;
                    };
                    var $9326 = $9330;
                    break;
            };
            return $9326;
        }));
        return $9324;
    };
    const Fm$compute$io$one = x0 => Fm$compute$io$one$(x0);
    const Fm = (() => {
        var __$1 = Fm$to_core$io$one;
        var __$2 = Fm$checker$io$one;
        var __$3 = Fm$checker$io$file;
        var __$4 = Fm$checker$code;
        var __$5 = Fm$Term$read;
        var __$6 = Fm$compute$io$one;
        var $9341 = IO$monad$((_m$bind$7 => _m$pure$8 => {
            var $9342 = _m$pure$8;
            return $9342;
        }))(Unit$new);
        return $9341;
    })();
    return {
        '$main$': () => run(Fm),
        'run': run,
        'IO': IO,
        'IO.ask': IO$ask,
        'IO.bind': IO$bind,
        'IO.end': IO$end,
        'IO.monad': IO$monad,
        'Maybe': Maybe,
        'Map': Map,
        'Maybe.none': Maybe$none,
        'Map.get': Map$get,
        'Bits.e': Bits$e,
        'Bool.false': Bool$false,
        'Bool.and': Bool$and,
        'Bool.true': Bool$true,
        'Cmp.as_lte': Cmp$as_lte,
        'Cmp.ltn': Cmp$ltn,
        'Cmp.gtn': Cmp$gtn,
        'Word.cmp.go': Word$cmp$go,
        'Cmp.eql': Cmp$eql,
        'Word.cmp': Word$cmp,
        'Word.lte': Word$lte,
        'Nat.succ': Nat$succ,
        'Nat.zero': Nat$zero,
        'U16.lte': U16$lte,
        'U16.btw': U16$btw,
        'U16.new': U16$new,
        'Word.e': Word$e,
        'Word': Word,
        'Word.i': Word$i,
        'Word.o': Word$o,
        'Word.subber': Word$subber,
        'Word.sub': Word$sub,
        'U16.sub': U16$sub,
        'Nat.apply': Nat$apply,
        'Word.inc': Word$inc,
        'U16.inc': U16$inc,
        'Word.zero': Word$zero,
        'U16.zero': U16$zero,
        'Nat.to_u16': Nat$to_u16,
        'Word.adder': Word$adder,
        'Word.add': Word$add,
        'U16.add': U16$add,
        'Cmp.as_eql': Cmp$as_eql,
        'Word.eql': Word$eql,
        'U16.eql': U16$eql,
        'Bits.o': Bits$o,
        'Bits.i': Bits$i,
        'Word.to_bits': Word$to_bits,
        'Word.trim': Word$trim,
        'Bits.concat': Bits$concat,
        'Bits.reverse.tco': Bits$reverse$tco,
        'Bits.reverse': Bits$reverse,
        'Fm.Name.to_bits': Fm$Name$to_bits,
        'Fm.get': Fm$get,
        'String.cons': String$cons,
        'Fm.Synth.file_of': Fm$Synth$file_of,
        'IO.get_file': IO$get_file,
        'Parser.Reply': Parser$Reply,
        'Parser.Reply.value': Parser$Reply$value,
        'Parser.is_eof': Parser$is_eof,
        'Parser.Reply.error': Parser$Reply$error,
        'Parser': Parser,
        'Maybe.some': Maybe$some,
        'Parser.ErrorAt.new': Parser$ErrorAt$new,
        'Nat.gtn': Nat$gtn,
        'Parser.ErrorAt.combine': Parser$ErrorAt$combine,
        'Parser.first_of.go': Parser$first_of$go,
        'Parser.first_of': Parser$first_of,
        'List.cons': List$cons,
        'List': List,
        'List.nil': List$nil,
        'Parser.many.go': Parser$many$go,
        'Parser.many': Parser$many,
        'Unit.new': Unit$new,
        'String.concat': String$concat,
        'String.flatten.go': String$flatten$go,
        'String.flatten': String$flatten,
        'String.nil': String$nil,
        'Parser.text.go': Parser$text$go,
        'Parser.text': Parser$text,
        'Parser.until.go': Parser$until$go,
        'Parser.until': Parser$until,
        'Parser.one': Parser$one,
        'Fm.Parser.spaces': Fm$Parser$spaces,
        'Fm.Parser.text': Fm$Parser$text,
        'Parser.many1': Parser$many1,
        'Fm.Name.is_letter': Fm$Name$is_letter,
        'Fm.Parser.letter': Fm$Parser$letter,
        'List.fold': List$fold,
        'Fm.Parser.name1': Fm$Parser$name1,
        'Parser.until1': Parser$until1,
        'Pair': Pair,
        'Parser.maybe': Parser$maybe,
        'Fm.Parser.item': Fm$Parser$item,
        'Fm.Parser.name': Fm$Parser$name,
        'Parser.get_code': Parser$get_code,
        'Parser.get_index': Parser$get_index,
        'Fm.Parser.init': Fm$Parser$init,
        'Fm.Origin.new': Fm$Origin$new,
        'Fm.Parser.stop': Fm$Parser$stop,
        'Fm.Term.ori': Fm$Term$ori,
        'Fm.Term.typ': Fm$Term$typ,
        'Fm.Parser.type': Fm$Parser$type,
        'Fm.Term.all': Fm$Term$all,
        'Fm.Parser.forall': Fm$Parser$forall,
        'Fm.Term.lam': Fm$Term$lam,
        'Fm.Parser.make_lambda': Fm$Parser$make_lambda,
        'Fm.Parser.lambda': Fm$Parser$lambda,
        'Fm.Parser.lambda.erased': Fm$Parser$lambda$erased,
        'Fm.Parser.lambda.nameless': Fm$Parser$lambda$nameless,
        'Fm.Parser.parenthesis': Fm$Parser$parenthesis,
        'Fm.Term.ref': Fm$Term$ref,
        'Fm.Term.app': Fm$Term$app,
        'Fm.Term.hol': Fm$Term$hol,
        'Fm.Term.let': Fm$Term$let,
        'Fm.Parser.letforrange.u32': Fm$Parser$letforrange$u32,
        'Fm.Parser.letforin': Fm$Parser$letforin,
        'Fm.Parser.let': Fm$Parser$let,
        'Fm.Parser.get': Fm$Parser$get,
        'Fm.Term.def': Fm$Term$def,
        'Fm.Parser.def': Fm$Parser$def,
        'Fm.Parser.if': Fm$Parser$if,
        'List.mapped': List$mapped,
        'Pair.new': Pair$new,
        'Fm.backslash': Fm$backslash,
        'Fm.escapes': Fm$escapes,
        'Fm.Parser.char.single': Fm$Parser$char$single,
        'Fm.Term.chr': Fm$Term$chr,
        'Fm.Parser.char': Fm$Parser$char,
        'Fm.Term.str': Fm$Term$str,
        'Fm.Parser.string': Fm$Parser$string,
        'Fm.Parser.pair': Fm$Parser$pair,
        'Fm.Parser.sigma.type': Fm$Parser$sigma$type,
        'Fm.Parser.some': Fm$Parser$some,
        'Fm.Parser.apply': Fm$Parser$apply,
        'Fm.Name.read': Fm$Name$read,
        'Fm.Parser.list': Fm$Parser$list,
        'Fm.Parser.log': Fm$Parser$log,
        'Fm.Parser.forrange.u32': Fm$Parser$forrange$u32,
        'Fm.Parser.forrange.u32.2': Fm$Parser$forrange$u32$2,
        'Fm.Parser.forin': Fm$Parser$forin,
        'Fm.Parser.forin.2': Fm$Parser$forin$2,
        'Fm.Parser.do.statements': Fm$Parser$do$statements,
        'Fm.Parser.do': Fm$Parser$do,
        'Fm.Term.nat': Fm$Term$nat,
        'Fm.Term.unroll_nat': Fm$Term$unroll_nat,
        'U16.to_bits': U16$to_bits,
        'Fm.Term.unroll_chr.bits': Fm$Term$unroll_chr$bits,
        'Fm.Term.unroll_chr': Fm$Term$unroll_chr,
        'Fm.Term.unroll_str': Fm$Term$unroll_str,
        'Fm.Term.reduce': Fm$Term$reduce,
        'Map.new': Map$new,
        'Fm.Def.new': Fm$Def$new,
        'Fm.Status.init': Fm$Status$init,
        'Fm.Parser.case.with': Fm$Parser$case$with,
        'Fm.Parser.case.case': Fm$Parser$case$case,
        'Map.tie': Map$tie,
        'Map.set': Map$set,
        'Map.from_list': Map$from_list,
        'Pair.fst': Pair$fst,
        'Pair.snd': Pair$snd,
        'Fm.Term.cse': Fm$Term$cse,
        'Fm.Parser.case': Fm$Parser$case,
        'Fm.set': Fm$set,
        'Fm.Parser.open': Fm$Parser$open,
        'Parser.digit': Parser$digit,
        'Nat.add': Nat$add,
        'Nat.mul': Nat$mul,
        'Nat.from_base.go': Nat$from_base$go,
        'List.reverse.go': List$reverse$go,
        'List.reverse': List$reverse,
        'Nat.from_base': Nat$from_base,
        'Parser.nat': Parser$nat,
        'Bits.tail': Bits$tail,
        'Bits.inc': Bits$inc,
        'Nat.to_bits': Nat$to_bits,
        'Maybe.to_bool': Maybe$to_bool,
        'Fm.Term.gol': Fm$Term$gol,
        'Fm.Parser.goal': Fm$Parser$goal,
        'Fm.Parser.hole': Fm$Parser$hole,
        'Fm.Parser.u8': Fm$Parser$u8,
        'Fm.Parser.u16': Fm$Parser$u16,
        'Fm.Parser.u32': Fm$Parser$u32,
        'Fm.Parser.u64': Fm$Parser$u64,
        'Fm.Parser.nat': Fm$Parser$nat,
        'String.eql': String$eql,
        'Parser.fail': Parser$fail,
        'Fm.Parser.reference': Fm$Parser$reference,
        'List.for': List$for,
        'Fm.Parser.application': Fm$Parser$application,
        'Parser.spaces': Parser$spaces,
        'Parser.spaces_text': Parser$spaces_text,
        'Fm.Parser.application.erased': Fm$Parser$application$erased,
        'Fm.Parser.arrow': Fm$Parser$arrow,
        'Fm.Parser.op': Fm$Parser$op,
        'Fm.Parser.add': Fm$Parser$add,
        'Fm.Parser.sub': Fm$Parser$sub,
        'Fm.Parser.mul': Fm$Parser$mul,
        'Fm.Parser.div': Fm$Parser$div,
        'Fm.Parser.mod': Fm$Parser$mod,
        'Fm.Parser.cons': Fm$Parser$cons,
        'Fm.Parser.concat': Fm$Parser$concat,
        'Fm.Parser.string_concat': Fm$Parser$string_concat,
        'Fm.Parser.sigma': Fm$Parser$sigma,
        'Fm.Parser.equality': Fm$Parser$equality,
        'Fm.Parser.inequality': Fm$Parser$inequality,
        'Fm.Parser.rewrite': Fm$Parser$rewrite,
        'Fm.Term.ann': Fm$Term$ann,
        'Fm.Parser.annotation': Fm$Parser$annotation,
        'Fm.Parser.application.hole': Fm$Parser$application$hole,
        'Fm.Parser.suffix': Fm$Parser$suffix,
        'Fm.Parser.term': Fm$Parser$term,
        'Fm.Parser.name_term': Fm$Parser$name_term,
        'Fm.Binder.new': Fm$Binder$new,
        'Fm.Parser.binder.homo': Fm$Parser$binder$homo,
        'List.concat': List$concat,
        'List.flatten': List$flatten,
        'Fm.Parser.binder': Fm$Parser$binder,
        'Fm.Parser.make_forall': Fm$Parser$make_forall,
        'List.at': List$at,
        'List.at_last': List$at_last,
        'Fm.Term.var': Fm$Term$var,
        'Fm.Context.get_name_skips': Fm$Context$get_name_skips,
        'Fm.Name.eql': Fm$Name$eql,
        'Fm.Context.find.go': Fm$Context$find$go,
        'Fm.Context.find': Fm$Context$find,
        'List.length': List$length,
        'Fm.Path.o': Fm$Path$o,
        'Fm.Path.i': Fm$Path$i,
        'Fm.Path.to_bits': Fm$Path$to_bits,
        'Fm.Term.bind': Fm$Term$bind,
        'Fm.Status.done': Fm$Status$done,
        'Fm.define': Fm$define,
        'Fm.Parser.file.def': Fm$Parser$file$def,
        'Maybe.default': Maybe$default,
        'Fm.Constructor.new': Fm$Constructor$new,
        'Fm.Parser.constructor': Fm$Parser$constructor,
        'Fm.Datatype.new': Fm$Datatype$new,
        'Fm.Parser.datatype': Fm$Parser$datatype,
        'Fm.Datatype.build_term.motive.go': Fm$Datatype$build_term$motive$go,
        'Fm.Datatype.build_term.motive': Fm$Datatype$build_term$motive,
        'Fm.Datatype.build_term.constructor.go': Fm$Datatype$build_term$constructor$go,
        'Fm.Datatype.build_term.constructor': Fm$Datatype$build_term$constructor,
        'Fm.Datatype.build_term.constructors.go': Fm$Datatype$build_term$constructors$go,
        'Fm.Datatype.build_term.constructors': Fm$Datatype$build_term$constructors,
        'Fm.Datatype.build_term.go': Fm$Datatype$build_term$go,
        'Fm.Datatype.build_term': Fm$Datatype$build_term,
        'Fm.Datatype.build_type.go': Fm$Datatype$build_type$go,
        'Fm.Datatype.build_type': Fm$Datatype$build_type,
        'Fm.Constructor.build_term.opt.go': Fm$Constructor$build_term$opt$go,
        'Fm.Constructor.build_term.opt': Fm$Constructor$build_term$opt,
        'Fm.Constructor.build_term.go': Fm$Constructor$build_term$go,
        'Fm.Constructor.build_term': Fm$Constructor$build_term,
        'Fm.Constructor.build_type.go': Fm$Constructor$build_type$go,
        'Fm.Constructor.build_type': Fm$Constructor$build_type,
        'Fm.Parser.file.adt': Fm$Parser$file$adt,
        'Parser.eof': Parser$eof,
        'Fm.Parser.file.end': Fm$Parser$file$end,
        'Fm.Parser.file': Fm$Parser$file,
        'Either': Either,
        'String.join.go': String$join$go,
        'String.join': String$join,
        'Fm.highlight.end': Fm$highlight$end,
        'Maybe.extract': Maybe$extract,
        'Nat.is_zero': Nat$is_zero,
        'Nat.double': Nat$double,
        'Nat.pred': Nat$pred,
        'String.reverse.go': String$reverse$go,
        'String.reverse': String$reverse,
        'String.pad_right': String$pad_right,
        'String.pad_left': String$pad_left,
        'Either.left': Either$left,
        'Either.right': Either$right,
        'Nat.sub_rem': Nat$sub_rem,
        'Nat.div_mod.go': Nat$div_mod$go,
        'Nat.div_mod': Nat$div_mod,
        'Nat.to_base.go': Nat$to_base$go,
        'Nat.to_base': Nat$to_base,
        'Nat.mod.go': Nat$mod$go,
        'Nat.mod': Nat$mod,
        'Nat.lte': Nat$lte,
        'Nat.show_digit': Nat$show_digit,
        'Nat.to_string_base': Nat$to_string_base,
        'Nat.show': Nat$show,
        'Bool.not': Bool$not,
        'Fm.color': Fm$color,
        'Nat.eql': Nat$eql,
        'List.take': List$take,
        'Fm.highlight.tc': Fm$highlight$tc,
        'Fm.highlight': Fm$highlight,
        'Fm.Defs.read': Fm$Defs$read,
        'Fm.Synth.load': Fm$Synth$load,
        'Fm.Status.wait': Fm$Status$wait,
        'Fm.Check': Fm$Check,
        'Fm.Check.result': Fm$Check$result,
        'Fm.Error.undefined_reference': Fm$Error$undefined_reference,
        'Fm.Error.waiting': Fm$Error$waiting,
        'Fm.Error.indirect': Fm$Error$indirect,
        'Maybe.mapped': Maybe$mapped,
        'Fm.MPath.o': Fm$MPath$o,
        'Fm.MPath.i': Fm$MPath$i,
        'Fm.Error.patch': Fm$Error$patch,
        'Fm.MPath.to_bits': Fm$MPath$to_bits,
        'Fm.Error.type_mismatch': Fm$Error$type_mismatch,
        'Fm.Error.show_goal': Fm$Error$show_goal,
        'Fm.Term.normalize': Fm$Term$normalize,
        'List.tail': List$tail,
        'Fm.SmartMotive.vals.cont': Fm$SmartMotive$vals$cont,
        'Fm.SmartMotive.vals': Fm$SmartMotive$vals,
        'Fm.SmartMotive.nams.cont': Fm$SmartMotive$nams$cont,
        'Fm.SmartMotive.nams': Fm$SmartMotive$nams,
        'List.zip': List$zip,
        'Nat.gte': Nat$gte,
        'Nat.sub': Nat$sub,
        'Fm.Term.serialize.name': Fm$Term$serialize$name,
        'Fm.Term.serialize': Fm$Term$serialize,
        'Bits.eql': Bits$eql,
        'Fm.Term.identical': Fm$Term$identical,
        'Fm.SmartMotive.replace': Fm$SmartMotive$replace,
        'Fm.SmartMotive.make': Fm$SmartMotive$make,
        'Fm.Term.desugar_cse.motive': Fm$Term$desugar_cse$motive,
        'String.is_empty': String$is_empty,
        'Fm.Term.desugar_cse.argument': Fm$Term$desugar_cse$argument,
        'Maybe.or': Maybe$or,
        'Fm.Term.desugar_cse.cases': Fm$Term$desugar_cse$cases,
        'Fm.Term.desugar_cse': Fm$Term$desugar_cse,
        'Fm.Error.cant_infer': Fm$Error$cant_infer,
        'Set.has': Set$has,
        'Bool.or': Bool$or,
        'Fm.Term.has_holes': Fm$Term$has_holes,
        'Fm.Term.equal.hole': Fm$Term$equal$hole,
        'Fm.Term.equal.extra_holes': Fm$Term$equal$extra_holes,
        'Set.set': Set$set,
        'Bool.eql': Bool$eql,
        'Fm.Term.equal': Fm$Term$equal,
        'Set.new': Set$new,
        'Fm.Term.check': Fm$Term$check,
        'Fm.Path.nil': Fm$Path$nil,
        'Fm.MPath.nil': Fm$MPath$nil,
        'List.is_empty': List$is_empty,
        'Fm.Term.patch_at': Fm$Term$patch_at,
        'Fm.Synth.fix': Fm$Synth$fix,
        'Fm.Status.fail': Fm$Status$fail,
        'Fm.Synth.one': Fm$Synth$one,
        'Map.map': Map$map,
        'Fm.Term.inline.names': Fm$Term$inline$names,
        'Fm.Term.inline.reduce': Fm$Term$inline$reduce,
        'Fm.Term.inline': Fm$Term$inline,
        'Map.values.go': Map$values$go,
        'Map.values': Map$values,
        'Fm.Core.var_name': Fm$Core$var_name,
        'Fm.Name.show': Fm$Name$show,
        'Bits.to_nat': Bits$to_nat,
        'U16.show_hex': U16$show_hex,
        'Fm.escape.char': Fm$escape$char,
        'Fm.escape': Fm$escape,
        'Fm.Core.show': Fm$Core$show,
        'Fm.Defs.core': Fm$Defs$core,
        'Fm.to_core.io.one': Fm$to_core$io$one,
        'IO.print': IO$print,
        'Maybe.bind': Maybe$bind,
        'Maybe.monad': Maybe$monad,
        'Fm.Term.show.as_nat.go': Fm$Term$show$as_nat$go,
        'Fm.Term.show.as_nat': Fm$Term$show$as_nat,
        'Fm.Term.show.is_ref': Fm$Term$show$is_ref,
        'Fm.Term.show.app': Fm$Term$show$app,
        'Map.to_list.go': Map$to_list$go,
        'Map.to_list': Map$to_list,
        'Bits.chunks_of.go': Bits$chunks_of$go,
        'Bits.chunks_of': Bits$chunks_of,
        'Word.from_bits': Word$from_bits,
        'Fm.Name.from_bits': Fm$Name$from_bits,
        'Fm.Term.show.go': Fm$Term$show$go,
        'Fm.Term.show': Fm$Term$show,
        'Fm.Error.relevant': Fm$Error$relevant,
        'Fm.Context.show': Fm$Context$show,
        'Fm.Term.expand_at': Fm$Term$expand_at,
        'Fm.Term.expand_ct': Fm$Term$expand_ct,
        'Fm.Term.expand': Fm$Term$expand,
        'Fm.Error.show': Fm$Error$show,
        'Fm.Error.origin': Fm$Error$origin,
        'Fm.Defs.report.go': Fm$Defs$report$go,
        'Fm.Defs.report': Fm$Defs$report,
        'Fm.checker.io.one': Fm$checker$io$one,
        'Map.keys.go': Map$keys$go,
        'Map.keys': Map$keys,
        'Fm.Synth.many': Fm$Synth$many,
        'Fm.Synth.file': Fm$Synth$file,
        'Fm.checker.io.file': Fm$checker$io$file,
        'IO.purify': IO$purify,
        'Fm.checker.code': Fm$checker$code,
        'Fm.Term.read': Fm$Term$read,
        'Fm.compute.io.one': Fm$compute$io$one,
        'Fm': Fm,
    };
})();