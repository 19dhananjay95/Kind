((((((Monad.bind Parser) Parser.monad) Nat) Kind.Term) Kind.Parser.init) #init ((((((Monad.bind Parser) Parser.monad) Unit) Kind.Term) (Kind.Parser.text "[")) # ((((((Monad.bind Parser) Parser.monad) (List Kind.Term)) Kind.Term) (((Parser.until Kind.Term) (Kind.Parser.text "]")) ((Kind.Parser.item Kind.Term) Kind.Parser.term))) #vals ((((((Monad.bind Parser) Parser.monad) ((Pair Nat) Nat)) Kind.Term) (Kind.Parser.stop init)) #orig ((((Monad.pure Parser) Parser.monad) Kind.Term) (((((List.fold Kind.Term) vals) Kind.Term) ((Kind.Term.ori orig) ((Kind.Term.app (Kind.Term.ref (Kind.Name.read "List.nil"))) (Kind.Term.hol Bits.e)))) #x #xs !term = (Kind.Term.ref (Kind.Name.read "List.cons")); !term = ((Kind.Term.app term) (Kind.Term.hol Bits.e)); !term = ((Kind.Term.app term) x); !term = ((Kind.Term.app term) xs); ((Kind.Term.ori orig) term)))))))