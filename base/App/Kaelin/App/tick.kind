// TODO turns here?
App.Kaelin.App.tick: App.Tick<App.Kaelin.State>
  (tick, glob)
    glob = glob@tick <- U64.add(glob@tick, 1)
    stage = glob@stage
    case stage {
      init: glob@stage <- App.Kaelin.Stage.draft
      draft: glob@stage <- App.Kaelin.Stage.planning(0, 0)
      planning: 
        stage_seconds = (20#64 - (stage.local_tick / 16)) - 1
        ticks_per_round = 20#64 * 16
        if U64.gte(stage.local_tick, ticks_per_round) then 
          new_glob = glob@skills_list <- List.reverse!(glob@skills_list)
          new_glob = new_glob@stage <- App.Kaelin.Stage.action
          new_glob
        else 
          glob@stage <- App.Kaelin.Stage.planning(stage.local_tick + 1, stage_seconds)
      action:
        let glob = execute_skills!(glob@skills_list, glob)
        App.Kaelin.Stage.action.end(glob)
    } default glob


execute_skills<S: App.State>(skills : List<App.Kaelin.State.cast_info>, glob: App.Kaelin.State.global): App.Kaelin.State.global
  case skills {
    nil:  
      glob
    cons:
      let new_glob = App.Kaelin.Skill.skill_use(skills.head@player, skills.head@target_pos, skills.head@key, glob)
      execute_skills!(skills.tail, new_glob)
  }