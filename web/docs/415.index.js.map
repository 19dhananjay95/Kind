{"version":3,"sources":["webpack://kind-web/./src/apps/App.Seta.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,SAAS;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbaAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS,iCAAiC;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjfile":"415.index.js","sourcesContent":["module.exports = (function() {\n    function int_pos(i) {\n        return i >= 0n ? i : 0n;\n    };\n\n    function int_neg(i) {\n        return i < 0n ? -i : 0n;\n    };\n\n    function word_to_u16(w) {\n        var u = 0;\n        for (var i = 0; i < 16; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u16_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 16; ++i) {\n            w = {\n                _: (u >>> (16 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u16_to_bits(x) {\n        var s = '';\n        for (var i = 0; i < 16; ++i) {\n            s = (x & 1 ? '1' : '0') + s;\n            x = x >>> 1;\n        }\n        return s;\n    };\n\n    function word_to_u32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >>> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function u32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_i32(w) {\n        var u = 0;\n        for (var i = 0; i < 32; ++i) {\n            u = u | (w._ === 'Word.i' ? 1 << i : 0);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function i32_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 32; ++i) {\n            w = {\n                _: (u >> (32 - i - 1)) & 1 ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function i32_for(state, from, til, func) {\n        for (var i = from; i < til; ++i) {\n            state = func(i)(state);\n        }\n        return state;\n    };\n\n    function word_to_u64(w) {\n        var u = 0n;\n        for (var i = 0n; i < 64n; i += 1n) {\n            u = u | (w._ === 'Word.i' ? 1n << i : 0n);\n            w = w.pred;\n        };\n        return u;\n    };\n\n    function u64_to_word(u) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0n; i < 64n; i += 1n) {\n            w = {\n                _: (u >> (64n - i - 1n)) & 1n ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n    var f64 = new Float64Array(1);\n    var u32 = new Uint32Array(f64.buffer);\n\n    function f64_get_bit(x, i) {\n        f64[0] = x;\n        if (i < 32) {\n            return (u32[0] >>> i) & 1;\n        } else {\n            return (u32[1] >>> (i - 32)) & 1;\n        }\n    };\n\n    function f64_set_bit(x, i) {\n        f64[0] = x;\n        if (i < 32) {\n            u32[0] = u32[0] | (1 << i);\n        } else {\n            u32[1] = u32[1] | (1 << (i - 32));\n        }\n        return f64[0];\n    };\n\n    function word_to_f64(w) {\n        var x = 0;\n        for (var i = 0; i < 64; ++i) {\n            x = w._ === 'Word.i' ? f64_set_bit(x, i) : x;\n            w = w.pred;\n        };\n        return x;\n    };\n\n    function f64_to_word(x) {\n        var w = {\n            _: 'Word.e'\n        };\n        for (var i = 0; i < 64; ++i) {\n            w = {\n                _: f64_get_bit(x, 64 - i - 1) ? 'Word.i' : 'Word.o',\n                pred: w\n            };\n        };\n        return w;\n    };\n\n    function f64_make(s, a, b) {\n        return (s ? 1 : -1) * Number(a) / 10 ** Number(b);\n    };\n\n    function u32array_to_buffer32(a) {\n        function go(a, buffer) {\n            switch (a._) {\n                case 'Array.tip':\n                    buffer.push(a.value);\n                    break;\n                case 'Array.tie':\n                    go(a.lft, buffer);\n                    go(a.rgt, buffer);\n                    break;\n            }\n            return buffer;\n        };\n        return new Uint32Array(go(a, []));\n    };\n\n    function buffer32_to_u32array(b) {\n        function go(b) {\n            if (b.length === 1) {\n                return {\n                    _: 'Array.tip',\n                    value: b[0]\n                };\n            } else {\n                var lft = go(b.slice(0, b.length / 2));\n                var rgt = go(b.slice(b.length / 2));\n                return {\n                    _: 'Array.tie',\n                    lft,\n                    rgt\n                };\n            };\n        };\n        return go(b);\n    };\n\n    function buffer32_to_depth(b) {\n        return BigInt(Math.log(b.length) / Math.log(2));\n    };\n    var list_for = list => nil => cons => {\n        while (list._ !== 'List.nil') {\n            nil = cons(list.head)(nil);\n            list = list.tail;\n        }\n        return nil;\n    };\n    const inst_unit = x => x(null);\n    const elim_unit = (x => {\n        var $1 = (() => c0 => {\n            var self = x;\n            switch (\"unit\") {\n                case 'unit':\n                    var $0 = c0;\n                    return $0;\n            };\n        })();\n        return $1;\n    });\n    const inst_bool = x => x(true)(false);\n    const elim_bool = (x => {\n        var $4 = (() => c0 => c1 => {\n            var self = x;\n            if (self) {\n                var $2 = c0;\n                return $2;\n            } else {\n                var $3 = c1;\n                return $3;\n            };\n        })();\n        return $4;\n    });\n    const inst_nat = x => x(0n)(x0 => 1n + x0);\n    const elim_nat = (x => {\n        var $8 = (() => c0 => c1 => {\n            var self = x;\n            if (self === 0n) {\n                var $5 = c0;\n                return $5;\n            } else {\n                var $6 = (self - 1n);\n                var $7 = c1($6);\n                return $7;\n            };\n        })();\n        return $8;\n    });\n    const inst_int = x => x(x0 => x1 => x0 - x1);\n    const elim_int = (x => {\n        var $12 = (() => c0 => {\n            var self = x;\n            switch (\"new\") {\n                case 'new':\n                    var $9 = int_pos(self);\n                    var $10 = int_neg(self);\n                    var $11 = c0($9)($10);\n                    return $11;\n            };\n        })();\n        return $12;\n    });\n    const inst_u16 = x => x(x0 => word_to_u16(x0));\n    const elim_u16 = (x => {\n        var $15 = (() => c0 => {\n            var self = x;\n            switch ('u16') {\n                case 'u16':\n                    var $13 = u16_to_word(self);\n                    var $14 = c0($13);\n                    return $14;\n            };\n        })();\n        return $15;\n    });\n    const inst_u32 = x => x(x0 => word_to_u32(x0));\n    const elim_u32 = (x => {\n        var $18 = (() => c0 => {\n            var self = x;\n            switch ('u32') {\n                case 'u32':\n                    var $16 = u32_to_word(self);\n                    var $17 = c0($16);\n                    return $17;\n            };\n        })();\n        return $18;\n    });\n    const inst_i32 = x => x(x0 => word_to_i32(x0));\n    const elim_i32 = (x => {\n        var $21 = (() => c0 => {\n            var self = x;\n            switch ('i32') {\n                case 'i32':\n                    var $19 = i32_to_word(self);\n                    var $20 = c0($19);\n                    return $20;\n            };\n        })();\n        return $21;\n    });\n    const inst_u64 = x => x(x0 => word_to_u64(x0));\n    const elim_u64 = (x => {\n        var $24 = (() => c0 => {\n            var self = x;\n            switch ('u64') {\n                case 'u64':\n                    var $22 = u64_to_word(self);\n                    var $23 = c0($22);\n                    return $23;\n            };\n        })();\n        return $24;\n    });\n    const inst_f64 = x => x(x0 => word_to_f64(x0));\n    const elim_f64 = (x => {\n        var $27 = (() => c0 => {\n            var self = x;\n            switch ('f64') {\n                case 'f64':\n                    var $25 = f64_to_word(self);\n                    var $26 = c0($25);\n                    return $26;\n            };\n        })();\n        return $27;\n    });\n    const inst_string = x => x('')(x0 => x1 => (String.fromCharCode(x0) + x1));\n    const elim_string = (x => {\n        var $32 = (() => c0 => c1 => {\n            var self = x;\n            if (self.length === 0) {\n                var $28 = c0;\n                return $28;\n            } else {\n                var $29 = self.charCodeAt(0);\n                var $30 = self.slice(1);\n                var $31 = c1($29)($30);\n                return $31;\n            };\n        })();\n        return $32;\n    });\n    const inst_buffer32 = x => x(x0 => x1 => u32array_to_buffer32(x1));\n    const elim_buffer32 = (x => {\n        var $36 = (() => c0 => {\n            var self = x;\n            switch ('b32') {\n                case 'b32':\n                    var $33 = buffer32_to_depth(self);\n                    var $34 = buffer32_to_u32array(self);\n                    var $35 = c0($33)($34);\n                    return $35;\n            };\n        })();\n        return $36;\n    });\n\n    function Buffer32$new$(_depth$1, _array$2) {\n        var $37 = u32array_to_buffer32(_array$2);\n        return $37;\n    };\n    const Buffer32$new = x0 => x1 => Buffer32$new$(x0, x1);\n\n    function Array$(_A$1, _depth$2) {\n        var $38 = null;\n        return $38;\n    };\n    const Array = x0 => x1 => Array$(x0, x1);\n\n    function Array$tip$(_value$2) {\n        var $39 = ({\n            _: 'Array.tip',\n            'value': _value$2\n        });\n        return $39;\n    };\n    const Array$tip = x0 => Array$tip$(x0);\n\n    function Array$tie$(_lft$3, _rgt$4) {\n        var $40 = ({\n            _: 'Array.tie',\n            'lft': _lft$3,\n            'rgt': _rgt$4\n        });\n        return $40;\n    };\n    const Array$tie = x0 => x1 => Array$tie$(x0, x1);\n\n    function Array$alloc$(_depth$2, _x$3) {\n        var self = _depth$2;\n        if (self === 0n) {\n            var $42 = Array$tip$(_x$3);\n            var $41 = $42;\n        } else {\n            var $43 = (self - 1n);\n            var _half$5 = Array$alloc$($43, _x$3);\n            var $44 = Array$tie$(_half$5, _half$5);\n            var $41 = $44;\n        };\n        return $41;\n    };\n    const Array$alloc = x0 => x1 => Array$alloc$(x0, x1);\n\n    function U32$new$(_value$1) {\n        var $45 = word_to_u32(_value$1);\n        return $45;\n    };\n    const U32$new = x0 => U32$new$(x0);\n\n    function Word$(_size$1) {\n        var $46 = null;\n        return $46;\n    };\n    const Word = x0 => Word$(x0);\n    const Word$e = ({\n        _: 'Word.e'\n    });\n\n    function Word$o$(_pred$2) {\n        var $47 = ({\n            _: 'Word.o',\n            'pred': _pred$2\n        });\n        return $47;\n    };\n    const Word$o = x0 => Word$o$(x0);\n\n    function Word$zero$(_size$1) {\n        var self = _size$1;\n        if (self === 0n) {\n            var $49 = Word$e;\n            var $48 = $49;\n        } else {\n            var $50 = (self - 1n);\n            var $51 = Word$o$(Word$zero$($50));\n            var $48 = $51;\n        };\n        return $48;\n    };\n    const Word$zero = x0 => Word$zero$(x0);\n\n    function Nat$succ$(_pred$1) {\n        var $52 = 1n + _pred$1;\n        return $52;\n    };\n    const Nat$succ = x0 => Nat$succ$(x0);\n    const Nat$zero = 0n;\n    const U32$zero = U32$new$(Word$zero$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$succ$(Nat$zero))))))))))))))))))))))))))))))))));\n    const Buffer32$alloc = a0 => (new Uint32Array(2 ** Number(a0)));\n\n    function Word$bit_length$go$(_word$2, _c$3, _n$4) {\n        var Word$bit_length$go$ = (_word$2, _c$3, _n$4) => ({\n            ctr: 'TCO',\n            arg: [_word$2, _c$3, _n$4]\n        });\n        var Word$bit_length$go = _word$2 => _c$3 => _n$4 => Word$bit_length$go$(_word$2, _c$3, _n$4);\n        var arg = [_word$2, _c$3, _n$4];\n        while (true) {\n            let [_word$2, _c$3, _n$4] = arg;\n            var R = (() => {\n                var self = _word$2;\n                switch (self._) {\n                    case 'Word.o':\n                        var $53 = self.pred;\n                        var $54 = Word$bit_length$go$($53, Nat$succ$(_c$3), _n$4);\n                        return $54;\n                    case 'Word.i':\n                        var $55 = self.pred;\n                        var $56 = Word$bit_length$go$($55, Nat$succ$(_c$3), Nat$succ$(_c$3));\n                        return $56;\n                    case 'Word.e':\n                        var $57 = _n$4;\n                        return $57;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$bit_length$go = x0 => x1 => x2 => Word$bit_length$go$(x0, x1, x2);\n\n    function Word$bit_length$(_word$2) {\n        var $58 = Word$bit_length$go$(_word$2, 0n, 0n);\n        return $58;\n    };\n    const Word$bit_length = x0 => Word$bit_length$(x0);\n\n    function U32$bit_length$(_size$1) {\n        var self = _size$1;\n        switch ('u32') {\n            case 'u32':\n                var $60 = u32_to_word(self);\n                var $61 = Word$bit_length$($60);\n                var $59 = $61;\n                break;\n        };\n        return $59;\n    };\n    const U32$bit_length = x0 => U32$bit_length$(x0);\n\n    function Word$i$(_pred$2) {\n        var $62 = ({\n            _: 'Word.i',\n            'pred': _pred$2\n        });\n        return $62;\n    };\n    const Word$i = x0 => Word$i$(x0);\n    const Bool$false = false;\n    const Bool$true = true;\n\n    function Word$shift_left$one$go$(_word$2, _prev$3) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $64 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $66 = Word$i$(Word$shift_left$one$go$($64, Bool$false));\n                    var $65 = $66;\n                } else {\n                    var $67 = Word$o$(Word$shift_left$one$go$($64, Bool$false));\n                    var $65 = $67;\n                };\n                var $63 = $65;\n                break;\n            case 'Word.i':\n                var $68 = self.pred;\n                var self = _prev$3;\n                if (self) {\n                    var $70 = Word$i$(Word$shift_left$one$go$($68, Bool$true));\n                    var $69 = $70;\n                } else {\n                    var $71 = Word$o$(Word$shift_left$one$go$($68, Bool$true));\n                    var $69 = $71;\n                };\n                var $63 = $69;\n                break;\n            case 'Word.e':\n                var $72 = Word$e;\n                var $63 = $72;\n                break;\n        };\n        return $63;\n    };\n    const Word$shift_left$one$go = x0 => x1 => Word$shift_left$one$go$(x0, x1);\n\n    function Word$shift_left$one$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $74 = self.pred;\n                var $75 = Word$o$(Word$shift_left$one$go$($74, Bool$false));\n                var $73 = $75;\n                break;\n            case 'Word.i':\n                var $76 = self.pred;\n                var $77 = Word$o$(Word$shift_left$one$go$($76, Bool$true));\n                var $73 = $77;\n                break;\n            case 'Word.e':\n                var $78 = Word$e;\n                var $73 = $78;\n                break;\n        };\n        return $73;\n    };\n    const Word$shift_left$one = x0 => Word$shift_left$one$(x0);\n\n    function Word$shift_left$(_n$2, _value$3) {\n        var Word$shift_left$ = (_n$2, _value$3) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _value$3]\n        });\n        var Word$shift_left = _n$2 => _value$3 => Word$shift_left$(_n$2, _value$3);\n        var arg = [_n$2, _value$3];\n        while (true) {\n            let [_n$2, _value$3] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $79 = _value$3;\n                    return $79;\n                } else {\n                    var $80 = (self - 1n);\n                    var $81 = Word$shift_left$($80, Word$shift_left$one$(_value$3));\n                    return $81;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$shift_left = x0 => x1 => Word$shift_left$(x0, x1);\n\n    function Word$adder$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $83 = self.pred;\n                var $84 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $86 = self.pred;\n                            var $87 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $89 = Word$i$(Word$adder$(_a$pred$10, $86, Bool$false));\n                                    var $88 = $89;\n                                } else {\n                                    var $90 = Word$o$(Word$adder$(_a$pred$10, $86, Bool$false));\n                                    var $88 = $90;\n                                };\n                                return $88;\n                            });\n                            var $85 = $87;\n                            break;\n                        case 'Word.i':\n                            var $91 = self.pred;\n                            var $92 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $94 = Word$o$(Word$adder$(_a$pred$10, $91, Bool$true));\n                                    var $93 = $94;\n                                } else {\n                                    var $95 = Word$i$(Word$adder$(_a$pred$10, $91, Bool$false));\n                                    var $93 = $95;\n                                };\n                                return $93;\n                            });\n                            var $85 = $92;\n                            break;\n                        case 'Word.e':\n                            var $96 = (_a$pred$8 => {\n                                var $97 = Word$e;\n                                return $97;\n                            });\n                            var $85 = $96;\n                            break;\n                    };\n                    var $85 = $85($83);\n                    return $85;\n                });\n                var $82 = $84;\n                break;\n            case 'Word.i':\n                var $98 = self.pred;\n                var $99 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $101 = self.pred;\n                            var $102 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $104 = Word$o$(Word$adder$(_a$pred$10, $101, Bool$true));\n                                    var $103 = $104;\n                                } else {\n                                    var $105 = Word$i$(Word$adder$(_a$pred$10, $101, Bool$false));\n                                    var $103 = $105;\n                                };\n                                return $103;\n                            });\n                            var $100 = $102;\n                            break;\n                        case 'Word.i':\n                            var $106 = self.pred;\n                            var $107 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $109 = Word$i$(Word$adder$(_a$pred$10, $106, Bool$true));\n                                    var $108 = $109;\n                                } else {\n                                    var $110 = Word$o$(Word$adder$(_a$pred$10, $106, Bool$true));\n                                    var $108 = $110;\n                                };\n                                return $108;\n                            });\n                            var $100 = $107;\n                            break;\n                        case 'Word.e':\n                            var $111 = (_a$pred$8 => {\n                                var $112 = Word$e;\n                                return $112;\n                            });\n                            var $100 = $111;\n                            break;\n                    };\n                    var $100 = $100($98);\n                    return $100;\n                });\n                var $82 = $99;\n                break;\n            case 'Word.e':\n                var $113 = (_b$5 => {\n                    var $114 = Word$e;\n                    return $114;\n                });\n                var $82 = $113;\n                break;\n        };\n        var $82 = $82(_b$3);\n        return $82;\n    };\n    const Word$adder = x0 => x1 => x2 => Word$adder$(x0, x1, x2);\n\n    function Word$add$(_a$2, _b$3) {\n        var $115 = Word$adder$(_a$2, _b$3, Bool$false);\n        return $115;\n    };\n    const Word$add = x0 => x1 => Word$add$(x0, x1);\n\n    function Word$mul$go$(_a$3, _b$4, _acc$5) {\n        var Word$mul$go$ = (_a$3, _b$4, _acc$5) => ({\n            ctr: 'TCO',\n            arg: [_a$3, _b$4, _acc$5]\n        });\n        var Word$mul$go = _a$3 => _b$4 => _acc$5 => Word$mul$go$(_a$3, _b$4, _acc$5);\n        var arg = [_a$3, _b$4, _acc$5];\n        while (true) {\n            let [_a$3, _b$4, _acc$5] = arg;\n            var R = (() => {\n                var self = _a$3;\n                switch (self._) {\n                    case 'Word.o':\n                        var $116 = self.pred;\n                        var $117 = Word$mul$go$($116, Word$shift_left$(1n, _b$4), _acc$5);\n                        return $117;\n                    case 'Word.i':\n                        var $118 = self.pred;\n                        var $119 = Word$mul$go$($118, Word$shift_left$(1n, _b$4), Word$add$(_b$4, _acc$5));\n                        return $119;\n                    case 'Word.e':\n                        var $120 = _acc$5;\n                        return $120;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$mul$go = x0 => x1 => x2 => Word$mul$go$(x0, x1, x2);\n\n    function Word$to_zero$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $122 = self.pred;\n                var $123 = Word$o$(Word$to_zero$($122));\n                var $121 = $123;\n                break;\n            case 'Word.i':\n                var $124 = self.pred;\n                var $125 = Word$o$(Word$to_zero$($124));\n                var $121 = $125;\n                break;\n            case 'Word.e':\n                var $126 = Word$e;\n                var $121 = $126;\n                break;\n        };\n        return $121;\n    };\n    const Word$to_zero = x0 => Word$to_zero$(x0);\n\n    function Word$mul$(_a$2, _b$3) {\n        var $127 = Word$mul$go$(_a$2, _b$3, Word$to_zero$(_a$2));\n        return $127;\n    };\n    const Word$mul = x0 => x1 => Word$mul$(x0, x1);\n    const U32$mul = a0 => a1 => ((a0 * a1) >>> 0);\n\n    function Nat$apply$(_n$2, _f$3, _x$4) {\n        var Nat$apply$ = (_n$2, _f$3, _x$4) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _f$3, _x$4]\n        });\n        var Nat$apply = _n$2 => _f$3 => _x$4 => Nat$apply$(_n$2, _f$3, _x$4);\n        var arg = [_n$2, _f$3, _x$4];\n        while (true) {\n            let [_n$2, _f$3, _x$4] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $128 = _x$4;\n                    return $128;\n                } else {\n                    var $129 = (self - 1n);\n                    var $130 = Nat$apply$($129, _f$3, _f$3(_x$4));\n                    return $130;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Nat$apply = x0 => x1 => x2 => Nat$apply$(x0, x1, x2);\n\n    function Word$inc$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $132 = self.pred;\n                var $133 = Word$i$($132);\n                var $131 = $133;\n                break;\n            case 'Word.i':\n                var $134 = self.pred;\n                var $135 = Word$o$(Word$inc$($134));\n                var $131 = $135;\n                break;\n            case 'Word.e':\n                var $136 = Word$e;\n                var $131 = $136;\n                break;\n        };\n        return $131;\n    };\n    const Word$inc = x0 => Word$inc$(x0);\n\n    function Nat$to_word$(_size$1, _n$2) {\n        var $137 = Nat$apply$(_n$2, Word$inc, Word$zero$(_size$1));\n        return $137;\n    };\n    const Nat$to_word = x0 => x1 => Nat$to_word$(x0, x1);\n    const Nat$to_u32 = a0 => (Number(a0) >>> 0);\n\n    function VoxBox$new$(_length$1, _capacity$2, _buffer$3) {\n        var $138 = ({\n            _: 'VoxBox.new',\n            'length': _length$1,\n            'capacity': _capacity$2,\n            'buffer': _buffer$3\n        });\n        return $138;\n    };\n    const VoxBox$new = x0 => x1 => x2 => VoxBox$new$(x0, x1, x2);\n\n    function VoxBox$alloc_capacity$(_capacity$1) {\n        var _buffer$2 = (new Uint32Array(2 ** Number(U32$bit_length$(((2 * _capacity$1) >>> 0)))));\n        var $139 = VoxBox$new$(0, _capacity$1, _buffer$2);\n        return $139;\n    };\n    const VoxBox$alloc_capacity = x0 => VoxBox$alloc_capacity$(x0);\n\n    function App$new$(_init$2, _draw$3, _when$4, _tick$5, _post$6) {\n        var $140 = ({\n            _: 'App.new',\n            'init': _init$2,\n            'draw': _draw$3,\n            'when': _when$4,\n            'tick': _tick$5,\n            'post': _post$6\n        });\n        return $140;\n    };\n    const App$new = x0 => x1 => x2 => x3 => x4 => App$new$(x0, x1, x2, x3, x4);\n\n    function Pair$new$(_fst$3, _snd$4) {\n        var $141 = ({\n            _: 'Pair.new',\n            'fst': _fst$3,\n            'snd': _snd$4\n        });\n        return $141;\n    };\n    const Pair$new = x0 => x1 => Pair$new$(x0, x1);\n    const App$State$new = Pair$new$(null, null);\n    const App$Seta$State = App$State$new;\n\n    function App$Store$new$(_local$2, _global$3) {\n        var $142 = ({\n            _: 'App.Store.new',\n            'local': _local$2,\n            'global': _global$3\n        });\n        return $142;\n    };\n    const App$Store$new = x0 => x1 => App$Store$new$(x0, x1);\n    const App$Seta$init = App$Store$new$(0n, 0n);\n\n    function Word$s_to_f64$(_a$2) {\n        var Word$s_to_f64$ = (_a$2) => ({\n            ctr: 'TCO',\n            arg: [_a$2]\n        });\n        var Word$s_to_f64 = _a$2 => Word$s_to_f64$(_a$2);\n        var arg = [_a$2];\n        while (true) {\n            let [_a$2] = arg;\n            var R = Word$s_to_f64$(_a$2);\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$s_to_f64 = x0 => Word$s_to_f64$(x0);\n    const I32$to_f64 = a0 => (a0);\n\n    function Cmp$as_eql$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.gtn':\n                var $144 = Bool$false;\n                var $143 = $144;\n                break;\n            case 'Cmp.eql':\n                var $145 = Bool$true;\n                var $143 = $145;\n                break;\n        };\n        return $143;\n    };\n    const Cmp$as_eql = x0 => Cmp$as_eql$(x0);\n    const Cmp$ltn = ({\n        _: 'Cmp.ltn'\n    });\n    const Cmp$gtn = ({\n        _: 'Cmp.gtn'\n    });\n\n    function Word$cmp$go$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $147 = self.pred;\n                var $148 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $150 = self.pred;\n                            var $151 = (_a$pred$10 => {\n                                var $152 = Word$cmp$go$(_a$pred$10, $150, _c$4);\n                                return $152;\n                            });\n                            var $149 = $151;\n                            break;\n                        case 'Word.i':\n                            var $153 = self.pred;\n                            var $154 = (_a$pred$10 => {\n                                var $155 = Word$cmp$go$(_a$pred$10, $153, Cmp$ltn);\n                                return $155;\n                            });\n                            var $149 = $154;\n                            break;\n                        case 'Word.e':\n                            var $156 = (_a$pred$8 => {\n                                var $157 = _c$4;\n                                return $157;\n                            });\n                            var $149 = $156;\n                            break;\n                    };\n                    var $149 = $149($147);\n                    return $149;\n                });\n                var $146 = $148;\n                break;\n            case 'Word.i':\n                var $158 = self.pred;\n                var $159 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $161 = self.pred;\n                            var $162 = (_a$pred$10 => {\n                                var $163 = Word$cmp$go$(_a$pred$10, $161, Cmp$gtn);\n                                return $163;\n                            });\n                            var $160 = $162;\n                            break;\n                        case 'Word.i':\n                            var $164 = self.pred;\n                            var $165 = (_a$pred$10 => {\n                                var $166 = Word$cmp$go$(_a$pred$10, $164, _c$4);\n                                return $166;\n                            });\n                            var $160 = $165;\n                            break;\n                        case 'Word.e':\n                            var $167 = (_a$pred$8 => {\n                                var $168 = _c$4;\n                                return $168;\n                            });\n                            var $160 = $167;\n                            break;\n                    };\n                    var $160 = $160($158);\n                    return $160;\n                });\n                var $146 = $159;\n                break;\n            case 'Word.e':\n                var $169 = (_b$5 => {\n                    var $170 = _c$4;\n                    return $170;\n                });\n                var $146 = $169;\n                break;\n        };\n        var $146 = $146(_b$3);\n        return $146;\n    };\n    const Word$cmp$go = x0 => x1 => x2 => Word$cmp$go$(x0, x1, x2);\n    const Cmp$eql = ({\n        _: 'Cmp.eql'\n    });\n\n    function Word$cmp$(_a$2, _b$3) {\n        var $171 = Word$cmp$go$(_a$2, _b$3, Cmp$eql);\n        return $171;\n    };\n    const Word$cmp = x0 => x1 => Word$cmp$(x0, x1);\n\n    function Word$eql$(_a$2, _b$3) {\n        var $172 = Cmp$as_eql$(Word$cmp$(_a$2, _b$3));\n        return $172;\n    };\n    const Word$eql = x0 => x1 => Word$eql$(x0, x1);\n\n    function F64$eql$(_x$1, _y$2) {\n        var self = _x$1;\n        switch ('f64') {\n            case 'f64':\n                var $174 = f64_to_word(self);\n                var self = _y$2;\n                switch ('f64') {\n                    case 'f64':\n                        var $176 = f64_to_word(self);\n                        var $177 = Word$eql$($174, $176);\n                        var $175 = $177;\n                        break;\n                };\n                var $173 = $175;\n                break;\n        };\n        return $173;\n    };\n    const F64$eql = x0 => x1 => F64$eql$(x0, x1);\n    const F64$sub = a0 => a1 => (a0 - a1);\n    const F64$make = a0 => a1 => a2 => (f64_make(a0, a1, a2));\n    const F64$from_nat = a0 => (Number(a0));\n    const F64$read = a0 => (parseFloat(a0));\n    const F64$div = a0 => a1 => (a0 / a1);\n    const F64$atan = a0 => (Math.atan(a0));\n\n    function Word$is_neg$go$(_word$2, _n$3) {\n        var Word$is_neg$go$ = (_word$2, _n$3) => ({\n            ctr: 'TCO',\n            arg: [_word$2, _n$3]\n        });\n        var Word$is_neg$go = _word$2 => _n$3 => Word$is_neg$go$(_word$2, _n$3);\n        var arg = [_word$2, _n$3];\n        while (true) {\n            let [_word$2, _n$3] = arg;\n            var R = (() => {\n                var self = _word$2;\n                switch (self._) {\n                    case 'Word.o':\n                        var $178 = self.pred;\n                        var $179 = Word$is_neg$go$($178, Bool$false);\n                        return $179;\n                    case 'Word.i':\n                        var $180 = self.pred;\n                        var $181 = Word$is_neg$go$($180, Bool$true);\n                        return $181;\n                    case 'Word.e':\n                        var $182 = _n$3;\n                        return $182;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$is_neg$go = x0 => x1 => Word$is_neg$go$(x0, x1);\n\n    function Word$is_neg$(_word$2) {\n        var $183 = Word$is_neg$go$(_word$2, Bool$false);\n        return $183;\n    };\n    const Word$is_neg = x0 => Word$is_neg$(x0);\n\n    function Cmp$as_gtn$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n            case 'Cmp.eql':\n                var $185 = Bool$false;\n                var $184 = $185;\n                break;\n            case 'Cmp.gtn':\n                var $186 = Bool$true;\n                var $184 = $186;\n                break;\n        };\n        return $184;\n    };\n    const Cmp$as_gtn = x0 => Cmp$as_gtn$(x0);\n\n    function Cmp$inv$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $188 = Cmp$gtn;\n                var $187 = $188;\n                break;\n            case 'Cmp.eql':\n                var $189 = Cmp$eql;\n                var $187 = $189;\n                break;\n            case 'Cmp.gtn':\n                var $190 = Cmp$ltn;\n                var $187 = $190;\n                break;\n        };\n        return $187;\n    };\n    const Cmp$inv = x0 => Cmp$inv$(x0);\n\n    function Word$s_gtn$(_a$2, _b$3) {\n        var _neg_a$4 = Word$is_neg$(_a$2);\n        var _neg_b$5 = Word$is_neg$(_b$3);\n        var self = _neg_a$4;\n        if (self) {\n            var self = _neg_b$5;\n            if (self) {\n                var $193 = Cmp$as_gtn$(Cmp$inv$(Word$cmp$(_a$2, _b$3)));\n                var $192 = $193;\n            } else {\n                var $194 = Bool$false;\n                var $192 = $194;\n            };\n            var $191 = $192;\n        } else {\n            var self = _neg_b$5;\n            if (self) {\n                var $196 = Bool$true;\n                var $195 = $196;\n            } else {\n                var $197 = Cmp$as_gtn$(Word$cmp$(_a$2, _b$3));\n                var $195 = $197;\n            };\n            var $191 = $195;\n        };\n        return $191;\n    };\n    const Word$s_gtn = x0 => x1 => Word$s_gtn$(x0, x1);\n\n    function F64$gtn$(_a$1, _b$2) {\n        var self = _a$1;\n        switch ('f64') {\n            case 'f64':\n                var $199 = f64_to_word(self);\n                var self = _b$2;\n                switch ('f64') {\n                    case 'f64':\n                        var $201 = f64_to_word(self);\n                        var $202 = Word$s_gtn$($199, $201);\n                        var $200 = $202;\n                        break;\n                };\n                var $198 = $200;\n                break;\n        };\n        return $198;\n    };\n    const F64$gtn = x0 => x1 => F64$gtn$(x0, x1);\n    const Unit$new = null;\n    const Debug$log = a0 => a1 => ((console.log(a0), a1()));\n    const F64$add = a0 => a1 => (a0 + a1);\n    const F64$mul = a0 => a1 => (a0 * a1);\n    const F64$cos = a0 => (Math.cos(a0));\n    const F64$sin = a0 => (Math.sin(a0));\n    const F64$pow = a0 => a1 => (a0 ** a1);\n\n    function F64$sqrt$(_n$1) {\n        var $203 = (_n$1 ** ((Number(1n)) / (Number(2n))));\n        return $203;\n    };\n    const F64$sqrt = x0 => F64$sqrt$(x0);\n\n    function VoxBox$Draw$arrow$distance$(_x1$1, _y1$2, _x2$3, _y2$4) {\n        var $204 = F64$sqrt$((((_x2$3 - _x1$1) * (_x2$3 - _x1$1)) + ((_y2$4 - _y1$2) * (_y2$4 - _y1$2))));\n        return $204;\n    };\n    const VoxBox$Draw$arrow$distance = x0 => x1 => x2 => x3 => VoxBox$Draw$arrow$distance$(x0, x1, x2, x3);\n\n    function I32$new$(_value$1) {\n        var $205 = word_to_i32(_value$1);\n        return $205;\n    };\n    const I32$new = x0 => I32$new$(x0);\n\n    function Word$neg$aux$(_word$2, _inc$3) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $207 = self.pred;\n                var self = _inc$3;\n                if (self) {\n                    var $209 = Word$o$(Word$neg$aux$($207, Bool$true));\n                    var $208 = $209;\n                } else {\n                    var $210 = Word$i$(Word$neg$aux$($207, Bool$false));\n                    var $208 = $210;\n                };\n                var $206 = $208;\n                break;\n            case 'Word.i':\n                var $211 = self.pred;\n                var self = _inc$3;\n                if (self) {\n                    var $213 = Word$i$(Word$neg$aux$($211, Bool$false));\n                    var $212 = $213;\n                } else {\n                    var $214 = Word$o$(Word$neg$aux$($211, Bool$false));\n                    var $212 = $214;\n                };\n                var $206 = $212;\n                break;\n            case 'Word.e':\n                var $215 = Word$e;\n                var $206 = $215;\n                break;\n        };\n        return $206;\n    };\n    const Word$neg$aux = x0 => x1 => Word$neg$aux$(x0, x1);\n\n    function Word$neg$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $217 = self.pred;\n                var $218 = Word$o$(Word$neg$aux$($217, Bool$true));\n                var $216 = $218;\n                break;\n            case 'Word.i':\n                var $219 = self.pred;\n                var $220 = Word$i$(Word$neg$aux$($219, Bool$false));\n                var $216 = $220;\n                break;\n            case 'Word.e':\n                var $221 = Word$e;\n                var $216 = $221;\n                break;\n        };\n        return $216;\n    };\n    const Word$neg = x0 => Word$neg$(x0);\n\n    function Word$fold$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var self = _word$6;\n        switch (self._) {\n            case 'Word.o':\n                var $223 = self.pred;\n                var $224 = _w0$4(Word$fold$(_nil$3, _w0$4, _w1$5, $223));\n                var $222 = $224;\n                break;\n            case 'Word.i':\n                var $225 = self.pred;\n                var $226 = _w1$5(Word$fold$(_nil$3, _w0$4, _w1$5, $225));\n                var $222 = $226;\n                break;\n            case 'Word.e':\n                var $227 = _nil$3;\n                var $222 = $227;\n                break;\n        };\n        return $222;\n    };\n    const Word$fold = x0 => x1 => x2 => x3 => Word$fold$(x0, x1, x2, x3);\n    const Nat$add = a0 => a1 => (a0 + a1);\n    const Nat$mul = a0 => a1 => (a0 * a1);\n\n    function Word$to_nat$(_word$2) {\n        var $228 = Word$fold$(0n, a1 => (2n * a1), (_x$4 => {\n            var $229 = Nat$succ$((2n * _x$4));\n            return $229;\n        }), _word$2);\n        return $228;\n    };\n    const Word$to_nat = x0 => Word$to_nat$(x0);\n\n    function Word$shl$(_n$2, _value$3) {\n        var _n_nat$4 = Word$to_nat$(_n$2);\n        var $230 = Word$shift_left$(_n_nat$4, _value$3);\n        return $230;\n    };\n    const Word$shl = x0 => x1 => Word$shl$(x0, x1);\n\n    function Word$shift_right$one$go$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $232 = self.pred;\n                var $233 = Word$o$(Word$shift_right$one$go$($232));\n                var $231 = $233;\n                break;\n            case 'Word.i':\n                var $234 = self.pred;\n                var $235 = Word$i$(Word$shift_right$one$go$($234));\n                var $231 = $235;\n                break;\n            case 'Word.e':\n                var $236 = Word$o$(Word$e);\n                var $231 = $236;\n                break;\n        };\n        return $231;\n    };\n    const Word$shift_right$one$go = x0 => Word$shift_right$one$go$(x0);\n\n    function Word$shift_right$one$(_word$2) {\n        var self = _word$2;\n        switch (self._) {\n            case 'Word.o':\n                var $238 = self.pred;\n                var $239 = Word$shift_right$one$go$($238);\n                var $237 = $239;\n                break;\n            case 'Word.i':\n                var $240 = self.pred;\n                var $241 = Word$shift_right$one$go$($240);\n                var $237 = $241;\n                break;\n            case 'Word.e':\n                var $242 = Word$e;\n                var $237 = $242;\n                break;\n        };\n        return $237;\n    };\n    const Word$shift_right$one = x0 => Word$shift_right$one$(x0);\n\n    function Word$shift_right$(_n$2, _value$3) {\n        var Word$shift_right$ = (_n$2, _value$3) => ({\n            ctr: 'TCO',\n            arg: [_n$2, _value$3]\n        });\n        var Word$shift_right = _n$2 => _value$3 => Word$shift_right$(_n$2, _value$3);\n        var arg = [_n$2, _value$3];\n        while (true) {\n            let [_n$2, _value$3] = arg;\n            var R = (() => {\n                var self = _n$2;\n                if (self === 0n) {\n                    var $243 = _value$3;\n                    return $243;\n                } else {\n                    var $244 = (self - 1n);\n                    var $245 = Word$shift_right$($244, Word$shift_right$one$(_value$3));\n                    return $245;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$shift_right = x0 => x1 => Word$shift_right$(x0, x1);\n\n    function Word$shr$(_n$2, _value$3) {\n        var _n_nat$4 = Word$to_nat$(_n$2);\n        var $246 = Word$shift_right$(_n_nat$4, _value$3);\n        return $246;\n    };\n    const Word$shr = x0 => x1 => Word$shr$(x0, x1);\n\n    function Word$s_shr$(_n$2, _value$3) {\n        var _neg$4 = Word$is_neg$(_n$2);\n        var self = _neg$4;\n        if (self) {\n            var _n$5 = Word$neg$(_n$2);\n            var $248 = Word$shl$(_n$5, _value$3);\n            var $247 = $248;\n        } else {\n            var $249 = Word$shr$(_n$2, _value$3);\n            var $247 = $249;\n        };\n        return $247;\n    };\n    const Word$s_shr = x0 => x1 => Word$s_shr$(x0, x1);\n    const I32$shr = a0 => a1 => (a0 >> a1);\n    const I32$neg = a0 => ((-a0));\n    const Int$to_i32 = a0 => (Number(a0));\n    const Int$new = a0 => a1 => (a0 - a1);\n    const Int$from_nat = a0 => (a0);\n    const I32$from_nat = a0 => (Number(a0));\n\n    function Word$xor$(_a$2, _b$3) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $251 = self.pred;\n                var $252 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $254 = self.pred;\n                            var $255 = (_a$pred$9 => {\n                                var $256 = Word$o$(Word$xor$(_a$pred$9, $254));\n                                return $256;\n                            });\n                            var $253 = $255;\n                            break;\n                        case 'Word.i':\n                            var $257 = self.pred;\n                            var $258 = (_a$pred$9 => {\n                                var $259 = Word$i$(Word$xor$(_a$pred$9, $257));\n                                return $259;\n                            });\n                            var $253 = $258;\n                            break;\n                        case 'Word.e':\n                            var $260 = (_a$pred$7 => {\n                                var $261 = Word$e;\n                                return $261;\n                            });\n                            var $253 = $260;\n                            break;\n                    };\n                    var $253 = $253($251);\n                    return $253;\n                });\n                var $250 = $252;\n                break;\n            case 'Word.i':\n                var $262 = self.pred;\n                var $263 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $265 = self.pred;\n                            var $266 = (_a$pred$9 => {\n                                var $267 = Word$i$(Word$xor$(_a$pred$9, $265));\n                                return $267;\n                            });\n                            var $264 = $266;\n                            break;\n                        case 'Word.i':\n                            var $268 = self.pred;\n                            var $269 = (_a$pred$9 => {\n                                var $270 = Word$o$(Word$xor$(_a$pred$9, $268));\n                                return $270;\n                            });\n                            var $264 = $269;\n                            break;\n                        case 'Word.e':\n                            var $271 = (_a$pred$7 => {\n                                var $272 = Word$e;\n                                return $272;\n                            });\n                            var $264 = $271;\n                            break;\n                    };\n                    var $264 = $264($262);\n                    return $264;\n                });\n                var $250 = $263;\n                break;\n            case 'Word.e':\n                var $273 = (_b$4 => {\n                    var $274 = Word$e;\n                    return $274;\n                });\n                var $250 = $273;\n                break;\n        };\n        var $250 = $250(_b$3);\n        return $250;\n    };\n    const Word$xor = x0 => x1 => Word$xor$(x0, x1);\n    const I32$xor = a0 => a1 => (a0 ^ a1);\n    const I32$add = a0 => a1 => ((a0 + a1) >> 0);\n\n    function I32$abs$(_a$1) {\n        var _mask$2 = (_a$1 >> 31);\n        var $275 = (((_mask$2 + _a$1) >> 0) ^ _mask$2);\n        return $275;\n    };\n    const I32$abs = x0 => I32$abs$(x0);\n\n    function Word$subber$(_a$2, _b$3, _c$4) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $277 = self.pred;\n                var $278 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $280 = self.pred;\n                            var $281 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $283 = Word$i$(Word$subber$(_a$pred$10, $280, Bool$true));\n                                    var $282 = $283;\n                                } else {\n                                    var $284 = Word$o$(Word$subber$(_a$pred$10, $280, Bool$false));\n                                    var $282 = $284;\n                                };\n                                return $282;\n                            });\n                            var $279 = $281;\n                            break;\n                        case 'Word.i':\n                            var $285 = self.pred;\n                            var $286 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $288 = Word$o$(Word$subber$(_a$pred$10, $285, Bool$true));\n                                    var $287 = $288;\n                                } else {\n                                    var $289 = Word$i$(Word$subber$(_a$pred$10, $285, Bool$true));\n                                    var $287 = $289;\n                                };\n                                return $287;\n                            });\n                            var $279 = $286;\n                            break;\n                        case 'Word.e':\n                            var $290 = (_a$pred$8 => {\n                                var $291 = Word$e;\n                                return $291;\n                            });\n                            var $279 = $290;\n                            break;\n                    };\n                    var $279 = $279($277);\n                    return $279;\n                });\n                var $276 = $278;\n                break;\n            case 'Word.i':\n                var $292 = self.pred;\n                var $293 = (_b$7 => {\n                    var self = _b$7;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $295 = self.pred;\n                            var $296 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $298 = Word$o$(Word$subber$(_a$pred$10, $295, Bool$false));\n                                    var $297 = $298;\n                                } else {\n                                    var $299 = Word$i$(Word$subber$(_a$pred$10, $295, Bool$false));\n                                    var $297 = $299;\n                                };\n                                return $297;\n                            });\n                            var $294 = $296;\n                            break;\n                        case 'Word.i':\n                            var $300 = self.pred;\n                            var $301 = (_a$pred$10 => {\n                                var self = _c$4;\n                                if (self) {\n                                    var $303 = Word$i$(Word$subber$(_a$pred$10, $300, Bool$true));\n                                    var $302 = $303;\n                                } else {\n                                    var $304 = Word$o$(Word$subber$(_a$pred$10, $300, Bool$false));\n                                    var $302 = $304;\n                                };\n                                return $302;\n                            });\n                            var $294 = $301;\n                            break;\n                        case 'Word.e':\n                            var $305 = (_a$pred$8 => {\n                                var $306 = Word$e;\n                                return $306;\n                            });\n                            var $294 = $305;\n                            break;\n                    };\n                    var $294 = $294($292);\n                    return $294;\n                });\n                var $276 = $293;\n                break;\n            case 'Word.e':\n                var $307 = (_b$5 => {\n                    var $308 = Word$e;\n                    return $308;\n                });\n                var $276 = $307;\n                break;\n        };\n        var $276 = $276(_b$3);\n        return $276;\n    };\n    const Word$subber = x0 => x1 => x2 => Word$subber$(x0, x1, x2);\n\n    function Word$sub$(_a$2, _b$3) {\n        var $309 = Word$subber$(_a$2, _b$3, Bool$false);\n        return $309;\n    };\n    const Word$sub = x0 => x1 => Word$sub$(x0, x1);\n    const I32$sub = a0 => a1 => ((a0 - a1) >> 0);\n\n    function Cmp$as_ltn$(_cmp$1) {\n        var self = _cmp$1;\n        switch (self._) {\n            case 'Cmp.ltn':\n                var $311 = Bool$true;\n                var $310 = $311;\n                break;\n            case 'Cmp.eql':\n            case 'Cmp.gtn':\n                var $312 = Bool$false;\n                var $310 = $312;\n                break;\n        };\n        return $310;\n    };\n    const Cmp$as_ltn = x0 => Cmp$as_ltn$(x0);\n\n    function Word$s_ltn$(_a$2, _b$3) {\n        var _neg_a$4 = Word$is_neg$(_a$2);\n        var _neg_b$5 = Word$is_neg$(_b$3);\n        var self = _neg_a$4;\n        if (self) {\n            var self = _neg_b$5;\n            if (self) {\n                var $315 = Cmp$as_ltn$(Cmp$inv$(Word$cmp$(_a$2, _b$3)));\n                var $314 = $315;\n            } else {\n                var $316 = Bool$true;\n                var $314 = $316;\n            };\n            var $313 = $314;\n        } else {\n            var self = _neg_b$5;\n            if (self) {\n                var $318 = Bool$false;\n                var $317 = $318;\n            } else {\n                var $319 = Cmp$as_ltn$(Word$cmp$(_a$2, _b$3));\n                var $317 = $319;\n            };\n            var $313 = $317;\n        };\n        return $313;\n    };\n    const Word$s_ltn = x0 => x1 => Word$s_ltn$(x0, x1);\n    const I32$ltn = a0 => a1 => (a0 < a1);\n\n    function List$(_A$1) {\n        var $320 = null;\n        return $320;\n    };\n    const List = x0 => List$(x0);\n\n    function Pair$(_A$1, _B$2) {\n        var $321 = null;\n        return $321;\n    };\n    const Pair = x0 => x1 => Pair$(x0, x1);\n    const I32$gtn = a0 => a1 => (a0 > a1);\n    const I32$mul = a0 => a1 => ((a0 * a1) >> 0);\n    const I32$eql = a0 => a1 => (a0 === a1);\n\n    function List$cons$(_head$2, _tail$3) {\n        var $322 = ({\n            _: 'List.cons',\n            'head': _head$2,\n            'tail': _tail$3\n        });\n        return $322;\n    };\n    const List$cons = x0 => x1 => List$cons$(x0, x1);\n\n    function VoxBox$Draw$line$coords$low$go$(_x0$1, _y0$2, _x1$3, _y1$4, _yi$5, _dx$6, _dy$7, _d$8, _coords$9) {\n        var VoxBox$Draw$line$coords$low$go$ = (_x0$1, _y0$2, _x1$3, _y1$4, _yi$5, _dx$6, _dy$7, _d$8, _coords$9) => ({\n            ctr: 'TCO',\n            arg: [_x0$1, _y0$2, _x1$3, _y1$4, _yi$5, _dx$6, _dy$7, _d$8, _coords$9]\n        });\n        var VoxBox$Draw$line$coords$low$go = _x0$1 => _y0$2 => _x1$3 => _y1$4 => _yi$5 => _dx$6 => _dy$7 => _d$8 => _coords$9 => VoxBox$Draw$line$coords$low$go$(_x0$1, _y0$2, _x1$3, _y1$4, _yi$5, _dx$6, _dy$7, _d$8, _coords$9);\n        var arg = [_x0$1, _y0$2, _x1$3, _y1$4, _yi$5, _dx$6, _dy$7, _d$8, _coords$9];\n        while (true) {\n            let [_x0$1, _y0$2, _x1$3, _y1$4, _yi$5, _dx$6, _dy$7, _d$8, _coords$9] = arg;\n            var R = (() => {\n                var self = (_x0$1 === _x1$3);\n                if (self) {\n                    var $323 = List$cons$(Pair$new$(_x0$1, _y0$2), _coords$9);\n                    return $323;\n                } else {\n                    var _new_x$10 = ((1 + _x0$1) >> 0);\n                    var self = (_d$8 > 0);\n                    if (self) {\n                        var _new_y$11 = ((_yi$5 + _y0$2) >> 0);\n                        var _new_d$12 = ((_d$8 + ((2 * ((_dy$7 - _dx$6) >> 0)) >> 0)) >> 0);\n                        var $325 = VoxBox$Draw$line$coords$low$go$(_new_x$10, _new_y$11, _x1$3, _y1$4, _yi$5, _dx$6, _dy$7, _new_d$12, List$cons$(Pair$new$(_x0$1, _y0$2), _coords$9));\n                        var $324 = $325;\n                    } else {\n                        var _new_d$11 = ((_d$8 + ((2 * _dy$7) >> 0)) >> 0);\n                        var $326 = VoxBox$Draw$line$coords$low$go$(_new_x$10, _y0$2, _x1$3, _y1$4, _yi$5, _dx$6, _dy$7, _new_d$11, List$cons$(Pair$new$(_x0$1, _y0$2), _coords$9));\n                        var $324 = $326;\n                    };\n                    return $324;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const VoxBox$Draw$line$coords$low$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => VoxBox$Draw$line$coords$low$go$(x0, x1, x2, x3, x4, x5, x6, x7, x8);\n    const List$nil = ({\n        _: 'List.nil'\n    });\n\n    function VoxBox$Draw$line$coords$low$(_x0$1, _y0$2, _x1$3, _y1$4) {\n        var _dx$5 = ((_x1$3 - _x0$1) >> 0);\n        var _dy$6 = I32$abs$(((_y1$4 - _y0$2) >> 0));\n        var self = (_y1$4 > _y0$2);\n        if (self) {\n            var $328 = 1;\n            var _yi$7 = $328;\n        } else {\n            var $329 = ((-1));\n            var _yi$7 = $329;\n        };\n        var _d$8 = ((((2 * _dy$6) >> 0) - _dx$5) >> 0);\n        var $327 = VoxBox$Draw$line$coords$low$go$(_x0$1, _y0$2, _x1$3, _y1$4, _yi$7, _dx$5, _dy$6, _d$8, List$nil);\n        return $327;\n    };\n    const VoxBox$Draw$line$coords$low = x0 => x1 => x2 => x3 => VoxBox$Draw$line$coords$low$(x0, x1, x2, x3);\n\n    function VoxBox$Draw$line$coords$high$go$(_x0$1, _y0$2, _x1$3, _y1$4, _xi$5, _dx$6, _dy$7, _d$8, _coords$9) {\n        var VoxBox$Draw$line$coords$high$go$ = (_x0$1, _y0$2, _x1$3, _y1$4, _xi$5, _dx$6, _dy$7, _d$8, _coords$9) => ({\n            ctr: 'TCO',\n            arg: [_x0$1, _y0$2, _x1$3, _y1$4, _xi$5, _dx$6, _dy$7, _d$8, _coords$9]\n        });\n        var VoxBox$Draw$line$coords$high$go = _x0$1 => _y0$2 => _x1$3 => _y1$4 => _xi$5 => _dx$6 => _dy$7 => _d$8 => _coords$9 => VoxBox$Draw$line$coords$high$go$(_x0$1, _y0$2, _x1$3, _y1$4, _xi$5, _dx$6, _dy$7, _d$8, _coords$9);\n        var arg = [_x0$1, _y0$2, _x1$3, _y1$4, _xi$5, _dx$6, _dy$7, _d$8, _coords$9];\n        while (true) {\n            let [_x0$1, _y0$2, _x1$3, _y1$4, _xi$5, _dx$6, _dy$7, _d$8, _coords$9] = arg;\n            var R = (() => {\n                var self = (_y0$2 === _y1$4);\n                if (self) {\n                    var $330 = List$cons$(Pair$new$(_x0$1, _y0$2), _coords$9);\n                    return $330;\n                } else {\n                    var _new_y$10 = ((1 + _y0$2) >> 0);\n                    var self = (_d$8 > 0);\n                    if (self) {\n                        var _new_x$11 = ((_x0$1 + _xi$5) >> 0);\n                        var _new_d$12 = ((_d$8 + ((2 * ((_dx$6 - _dy$7) >> 0)) >> 0)) >> 0);\n                        var $332 = VoxBox$Draw$line$coords$high$go$(_new_x$11, _new_y$10, _x1$3, _y1$4, _xi$5, _dx$6, _dy$7, _new_d$12, List$cons$(Pair$new$(_x0$1, _y0$2), _coords$9));\n                        var $331 = $332;\n                    } else {\n                        var _new_d$11 = ((_d$8 + ((2 * _dx$6) >> 0)) >> 0);\n                        var $333 = VoxBox$Draw$line$coords$high$go$(_x0$1, _new_y$10, _x1$3, _y1$4, _xi$5, _dx$6, _dy$7, _new_d$11, List$cons$(Pair$new$(_x0$1, _y0$2), _coords$9));\n                        var $331 = $333;\n                    };\n                    return $331;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const VoxBox$Draw$line$coords$high$go = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => x8 => VoxBox$Draw$line$coords$high$go$(x0, x1, x2, x3, x4, x5, x6, x7, x8);\n\n    function VoxBox$Draw$line$coords$high$(_x0$1, _y0$2, _x1$3, _y1$4) {\n        var _dx$5 = I32$abs$(((_x1$3 - _x0$1) >> 0));\n        var _dy$6 = ((_y1$4 - _y0$2) >> 0);\n        var self = (_x0$1 > _x1$3);\n        if (self) {\n            var $335 = ((-1));\n            var _xi$7 = $335;\n        } else {\n            var $336 = 1;\n            var _xi$7 = $336;\n        };\n        var _d$8 = ((((2 * _dx$5) >> 0) - _dy$6) >> 0);\n        var $334 = VoxBox$Draw$line$coords$high$go$(_x0$1, _y0$2, _x1$3, _y1$4, _xi$7, _dx$5, _dy$6, _d$8, List$nil);\n        return $334;\n    };\n    const VoxBox$Draw$line$coords$high = x0 => x1 => x2 => x3 => VoxBox$Draw$line$coords$high$(x0, x1, x2, x3);\n\n    function VoxBox$Draw$line$coords$(_x0$1, _y0$2, _x1$3, _y1$4) {\n        var _dist_y$5 = I32$abs$(((_y1$4 - _y0$2) >> 0));\n        var _dist_x$6 = I32$abs$(((_x1$3 - _x0$1) >> 0));\n        var _low$7 = (_dist_y$5 < _dist_x$6);\n        var self = _low$7;\n        if (self) {\n            var self = (_x0$1 > _x1$3);\n            if (self) {\n                var $339 = VoxBox$Draw$line$coords$low$(_x1$3, _y1$4, _x0$1, _y0$2);\n                var $338 = $339;\n            } else {\n                var $340 = VoxBox$Draw$line$coords$low$(_x0$1, _y0$2, _x1$3, _y1$4);\n                var $338 = $340;\n            };\n            var $337 = $338;\n        } else {\n            var self = (_y0$2 > _y1$4);\n            if (self) {\n                var $342 = VoxBox$Draw$line$coords$high$(_x1$3, _y1$4, _x0$1, _y0$2);\n                var $341 = $342;\n            } else {\n                var $343 = VoxBox$Draw$line$coords$high$(_x0$1, _y0$2, _x1$3, _y1$4);\n                var $341 = $343;\n            };\n            var $337 = $341;\n        };\n        return $337;\n    };\n    const VoxBox$Draw$line$coords = x0 => x1 => x2 => x3 => VoxBox$Draw$line$coords$(x0, x1, x2, x3);\n    const List$for = a0 => a1 => a2 => (list_for(a0)(a1)(a2));\n\n    function Word$trim$(_new_size$2, _word$3) {\n        var self = _new_size$2;\n        if (self === 0n) {\n            var $345 = Word$e;\n            var $344 = $345;\n        } else {\n            var $346 = (self - 1n);\n            var self = _word$3;\n            switch (self._) {\n                case 'Word.o':\n                    var $348 = self.pred;\n                    var $349 = Word$o$(Word$trim$($346, $348));\n                    var $347 = $349;\n                    break;\n                case 'Word.i':\n                    var $350 = self.pred;\n                    var $351 = Word$i$(Word$trim$($346, $350));\n                    var $347 = $351;\n                    break;\n                case 'Word.e':\n                    var $352 = Word$o$(Word$trim$($346, Word$e));\n                    var $347 = $352;\n                    break;\n            };\n            var $344 = $347;\n        };\n        return $344;\n    };\n    const Word$trim = x0 => x1 => Word$trim$(x0, x1);\n\n    function Array$extract_tip$(_arr$2) {\n        var self = _arr$2;\n        switch (self._) {\n            case 'Array.tip':\n                var $354 = self.value;\n                var $355 = $354;\n                var $353 = $355;\n                break;\n            case 'Array.tie':\n                var $356 = Unit$new;\n                var $353 = $356;\n                break;\n        };\n        return $353;\n    };\n    const Array$extract_tip = x0 => Array$extract_tip$(x0);\n\n    function Array$extract_tie$(_arr$3) {\n        var self = _arr$3;\n        switch (self._) {\n            case 'Array.tie':\n                var $358 = self.lft;\n                var $359 = self.rgt;\n                var $360 = Pair$new$($358, $359);\n                var $357 = $360;\n                break;\n            case 'Array.tip':\n                var $361 = Unit$new;\n                var $357 = $361;\n                break;\n        };\n        return $357;\n    };\n    const Array$extract_tie = x0 => Array$extract_tie$(x0);\n\n    function Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6) {\n        var Word$foldl$ = (_nil$3, _w0$4, _w1$5, _word$6) => ({\n            ctr: 'TCO',\n            arg: [_nil$3, _w0$4, _w1$5, _word$6]\n        });\n        var Word$foldl = _nil$3 => _w0$4 => _w1$5 => _word$6 => Word$foldl$(_nil$3, _w0$4, _w1$5, _word$6);\n        var arg = [_nil$3, _w0$4, _w1$5, _word$6];\n        while (true) {\n            let [_nil$3, _w0$4, _w1$5, _word$6] = arg;\n            var R = (() => {\n                var self = _word$6;\n                switch (self._) {\n                    case 'Word.o':\n                        var $362 = self.pred;\n                        var $363 = Word$foldl$(_w0$4(_nil$3), _w0$4, _w1$5, $362);\n                        return $363;\n                    case 'Word.i':\n                        var $364 = self.pred;\n                        var $365 = Word$foldl$(_w1$5(_nil$3), _w0$4, _w1$5, $364);\n                        return $365;\n                    case 'Word.e':\n                        var $366 = _nil$3;\n                        return $366;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const Word$foldl = x0 => x1 => x2 => x3 => Word$foldl$(x0, x1, x2, x3);\n\n    function Array$mut$(_idx$3, _f$4, _arr$5) {\n        var $367 = Word$foldl$((_arr$6 => {\n            var $368 = Array$tip$(_f$4(Array$extract_tip$(_arr$6)));\n            return $368;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $370 = self.fst;\n                    var $371 = self.snd;\n                    var $372 = Array$tie$(_rec$7($370), $371);\n                    var $369 = $372;\n                    break;\n            };\n            return $369;\n        }), (_rec$7 => _arr$8 => {\n            var self = Array$extract_tie$(_arr$8);\n            switch (self._) {\n                case 'Pair.new':\n                    var $374 = self.fst;\n                    var $375 = self.snd;\n                    var $376 = Array$tie$($374, _rec$7($375));\n                    var $373 = $376;\n                    break;\n            };\n            return $373;\n        }), _idx$3)(_arr$5);\n        return $367;\n    };\n    const Array$mut = x0 => x1 => x2 => Array$mut$(x0, x1, x2);\n\n    function Array$set$(_idx$3, _val$4, _arr$5) {\n        var $377 = Array$mut$(_idx$3, (_x$6 => {\n            var $378 = _val$4;\n            return $378;\n        }), _arr$5);\n        return $377;\n    };\n    const Array$set = x0 => x1 => x2 => Array$set$(x0, x1, x2);\n    const Buffer32$set = a0 => a1 => a2 => ((a2[a0] = a1, a2));\n    const VoxBox$set_pos = a0 => a1 => a2 => ((a2.buffer[a0 * 2] = a1, a2));\n    const U32$add = a0 => a1 => ((a0 + a1) >>> 0);\n    const VoxBox$set_col = a0 => a1 => a2 => ((a2.buffer[a0 * 2 + 1] = a1, a2));\n\n    function VoxBox$set_length$(_length$1, _img$2) {\n        var self = _img$2;\n        switch (self._) {\n            case 'VoxBox.new':\n                var $380 = self.capacity;\n                var $381 = self.buffer;\n                var $382 = VoxBox$new$(_length$1, $380, $381);\n                var $379 = $382;\n                break;\n        };\n        return $379;\n    };\n    const VoxBox$set_length = x0 => x1 => VoxBox$set_length$(x0, x1);\n    const VoxBox$push = a0 => a1 => a2 => ((a2.buffer[a2.length * 2] = a0, a2.buffer[a2.length * 2 + 1] = a1, a2.length++, a2));\n\n    function Word$or$(_a$2, _b$3) {\n        var self = _a$2;\n        switch (self._) {\n            case 'Word.o':\n                var $384 = self.pred;\n                var $385 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $387 = self.pred;\n                            var $388 = (_a$pred$9 => {\n                                var $389 = Word$o$(Word$or$(_a$pred$9, $387));\n                                return $389;\n                            });\n                            var $386 = $388;\n                            break;\n                        case 'Word.i':\n                            var $390 = self.pred;\n                            var $391 = (_a$pred$9 => {\n                                var $392 = Word$i$(Word$or$(_a$pred$9, $390));\n                                return $392;\n                            });\n                            var $386 = $391;\n                            break;\n                        case 'Word.e':\n                            var $393 = (_a$pred$7 => {\n                                var $394 = Word$e;\n                                return $394;\n                            });\n                            var $386 = $393;\n                            break;\n                    };\n                    var $386 = $386($384);\n                    return $386;\n                });\n                var $383 = $385;\n                break;\n            case 'Word.i':\n                var $395 = self.pred;\n                var $396 = (_b$6 => {\n                    var self = _b$6;\n                    switch (self._) {\n                        case 'Word.o':\n                            var $398 = self.pred;\n                            var $399 = (_a$pred$9 => {\n                                var $400 = Word$i$(Word$or$(_a$pred$9, $398));\n                                return $400;\n                            });\n                            var $397 = $399;\n                            break;\n                        case 'Word.i':\n                            var $401 = self.pred;\n                            var $402 = (_a$pred$9 => {\n                                var $403 = Word$i$(Word$or$(_a$pred$9, $401));\n                                return $403;\n                            });\n                            var $397 = $402;\n                            break;\n                        case 'Word.e':\n                            var $404 = (_a$pred$7 => {\n                                var $405 = Word$e;\n                                return $405;\n                            });\n                            var $397 = $404;\n                            break;\n                    };\n                    var $397 = $397($395);\n                    return $397;\n                });\n                var $383 = $396;\n                break;\n            case 'Word.e':\n                var $406 = (_b$4 => {\n                    var $407 = Word$e;\n                    return $407;\n                });\n                var $383 = $406;\n                break;\n        };\n        var $383 = $383(_b$3);\n        return $383;\n    };\n    const Word$or = x0 => x1 => Word$or$(x0, x1);\n    const U32$or = a0 => a1 => (a0 | a1);\n    const U32$shl = a0 => a1 => ((a0 << a1) >>> 0);\n    const Pos32$new = a0 => a1 => a2 => ((0 | a0 | (a1 << 12) | (a2 << 24)));\n    const F64$to_u32 = a0 => ((a0 >>> 0));\n\n    function I32$to_u32$(_n$1) {\n        var $408 = (((_n$1) >>> 0));\n        return $408;\n    };\n    const I32$to_u32 = x0 => I32$to_u32$(x0);\n\n    function VoxBox$Draw$line$(_x0$1, _y0$2, _x1$3, _y1$4, _z$5, _col$6, _img$7) {\n        var _coords$8 = VoxBox$Draw$line$coords$(_x0$1, _y0$2, _x1$3, _y1$4);\n        var _img$9 = (() => {\n            var $411 = _img$7;\n            var $412 = _coords$8;\n            let _img$10 = $411;\n            let _coord$9;\n            while ($412._ === 'List.cons') {\n                _coord$9 = $412.head;\n                var self = _coord$9;\n                switch (self._) {\n                    case 'Pair.new':\n                        var $413 = self.fst;\n                        var $414 = self.snd;\n                        var $415 = ((_img$10.buffer[_img$10.length * 2] = ((0 | I32$to_u32$($413) | (I32$to_u32$($414) << 12) | (I32$to_u32$(_z$5) << 24))), _img$10.buffer[_img$10.length * 2 + 1] = _col$6, _img$10.length++, _img$10));\n                        var $411 = $415;\n                        break;\n                };\n                _img$10 = $411;\n                $412 = $412.tail;\n            }\n            return _img$10;\n        })();\n        var $409 = _img$9;\n        return $409;\n    };\n    const VoxBox$Draw$line = x0 => x1 => x2 => x3 => x4 => x5 => x6 => VoxBox$Draw$line$(x0, x1, x2, x3, x4, x5, x6);\n    const F64$to_i32 = a0 => ((a0 >> 0));\n\n    function VoxBox$draw$arrow$(_x1$1, _y1$2, _x2$3, _y2$4, _z$5, _size$6, _col$7, _img$8) {\n        var _f_x1$9 = (_x1$1);\n        var _f_y1$10 = (_y1$2);\n        var _f_x2$11 = (_x2$3);\n        var _f_y2$12 = (_y2$4);\n        var _f_size$13 = (_size$6);\n        var self = F64$eql$((_f_x2$11 - _f_x1$9), (Number(0n)));\n        if (self) {\n            var $417 = (89.99);\n            var _m$14 = $417;\n        } else {\n            var $418 = ((_f_y2$12 - _f_y1$10) / (_f_x2$11 - _f_x1$9));\n            var _m$14 = $418;\n        };\n        var _deg$15 = (Math.atan(_m$14));\n        var _pi$16 = (3.14159265359);\n        var self = F64$gtn$(_f_x2$11, _f_x1$9);\n        if (self) {\n            var $419 = (Number(0n));\n            var _to_left$17 = $419;\n        } else {\n            var $420 = _pi$16;\n            var _to_left$17 = $420;\n        };\n        var self = F64$eql$(_f_x2$11, _f_x1$9);\n        if (self) {\n            var self = F64$gtn$(_f_y1$10, _f_y2$12);\n            if (self) {\n                var $422 = _pi$16;\n                var $421 = $422;\n            } else {\n                var $423 = (Number(0n));\n                var $421 = $423;\n            };\n            var _to_left$18 = $421;\n        } else {\n            var $424 = _to_left$17;\n            var _to_left$18 = $424;\n        };\n        var $416 = ((console.log(\"------------\"), (_$19 => {\n            var _degree1$20 = (_to_left$18 + (_deg$15 + ((Number(5n)) * (_pi$16 / (Number(6n))))));\n            var _degree2$21 = (_to_left$18 + (_deg$15 + ((Number(7n)) * (_pi$16 / (Number(6n))))));\n            var _px1$22 = (_f_x2$11 + ((Math.cos(_degree1$20)) * _f_size$13));\n            var _py1$23 = (_f_y2$12 + ((Math.sin(_degree1$20)) * _f_size$13));\n            var _px2$24 = (_f_x2$11 + ((Math.cos(_degree2$21)) * _f_size$13));\n            var _py2$25 = (_f_y2$12 + ((Math.sin(_degree2$21)) * _f_size$13));\n            var _all_dist$26 = VoxBox$Draw$arrow$distance$(_f_x1$9, _f_y1$10, _f_x2$11, _f_y2$12);\n            var _L$27 = VoxBox$Draw$arrow$distance$(_f_x2$11, _f_y2$12, _px2$24, _py2$25);\n            var _b$28 = VoxBox$Draw$arrow$distance$(_px1$22, _py1$23, _px2$24, _py2$25);\n            var _h$29 = F64$sqrt$(((_L$27 * _L$27) - ((_b$28 * _b$28) / (Number(4n)))));\n            var _px3$30 = (_f_x2$11 - ((_h$29 * (_f_x2$11 - _f_x1$9)) / _all_dist$26));\n            var _py3$31 = (_f_y2$12 - ((_h$29 * (_f_y2$12 - _f_y1$10)) / _all_dist$26));\n            var _img$32 = VoxBox$Draw$line$(_x1$1, _y1$2, ((_px3$30 >> 0)), ((_py3$31 >> 0)), _z$5, _col$7, _img$8);\n            var _img$33 = VoxBox$Draw$line$(_x2$3, _y2$4, ((_px1$22 >> 0)), ((_py1$23 >> 0)), _z$5, _col$7, _img$32);\n            var _img$34 = VoxBox$Draw$line$(_x2$3, _y2$4, ((_px2$24 >> 0)), ((_py2$25 >> 0)), _z$5, _col$7, _img$33);\n            var _img$35 = VoxBox$Draw$line$(((_px1$22 >> 0)), ((_py1$23 >> 0)), ((_px2$24 >> 0)), ((_py2$25 >> 0)), _z$5, _col$7, _img$34);\n            var $425 = _img$35;\n            return $425;\n        })()));\n        return $416;\n    };\n    const VoxBox$draw$arrow = x0 => x1 => x2 => x3 => x4 => x5 => x6 => x7 => VoxBox$draw$arrow$(x0, x1, x2, x3, x4, x5, x6, x7);\n    const Col32$new = a0 => a1 => a2 => a3 => ((0 | a0 | (a1 << 8) | (a2 << 16) | (a3 << 24)));\n    const U32$from_nat = a0 => (Number(a0) >>> 0);\n\n    function DOM$vbox$(_props$1, _style$2, _value$3) {\n        var $426 = ({\n            _: 'DOM.vbox',\n            'props': _props$1,\n            'style': _style$2,\n            'value': _value$3\n        });\n        return $426;\n    };\n    const DOM$vbox = x0 => x1 => x2 => DOM$vbox$(x0, x1, x2);\n\n    function BBL$(_K$1, _V$2) {\n        var $427 = null;\n        return $427;\n    };\n    const BBL = x0 => x1 => BBL$(x0, x1);\n\n    function Pair$fst$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $429 = self.fst;\n                var $430 = $429;\n                var $428 = $430;\n                break;\n        };\n        return $428;\n    };\n    const Pair$fst = x0 => Pair$fst$(x0);\n\n    function Pair$snd$(_pair$3) {\n        var self = _pair$3;\n        switch (self._) {\n            case 'Pair.new':\n                var $432 = self.snd;\n                var $433 = $432;\n                var $431 = $433;\n                break;\n        };\n        return $431;\n    };\n    const Pair$snd = x0 => Pair$snd$(x0);\n\n    function BBL$bin$(_size$3, _key$4, _val$5, _left$6, _right$7) {\n        var $434 = ({\n            _: 'BBL.bin',\n            'size': _size$3,\n            'key': _key$4,\n            'val': _val$5,\n            'left': _left$6,\n            'right': _right$7\n        });\n        return $434;\n    };\n    const BBL$bin = x0 => x1 => x2 => x3 => x4 => BBL$bin$(x0, x1, x2, x3, x4);\n    const BBL$tip = ({\n        _: 'BBL.tip'\n    });\n\n    function BBL$singleton$(_key$3, _val$4) {\n        var $435 = BBL$bin$(1, _key$3, _val$4, BBL$tip, BBL$tip);\n        return $435;\n    };\n    const BBL$singleton = x0 => x1 => BBL$singleton$(x0, x1);\n\n    function BBL$size$(_map$3) {\n        var self = _map$3;\n        switch (self._) {\n            case 'BBL.bin':\n                var $437 = self.size;\n                var $438 = $437;\n                var $436 = $438;\n                break;\n            case 'BBL.tip':\n                var $439 = 0;\n                var $436 = $439;\n                break;\n        };\n        return $436;\n    };\n    const BBL$size = x0 => BBL$size$(x0);\n    const BBL$w = 3;\n\n    function Word$ltn$(_a$2, _b$3) {\n        var $440 = Cmp$as_ltn$(Word$cmp$(_a$2, _b$3));\n        return $440;\n    };\n    const Word$ltn = x0 => x1 => Word$ltn$(x0, x1);\n    const U32$ltn = a0 => a1 => (a0 < a1);\n\n    function BBL$node$(_key$3, _val$4, _left$5, _right$6) {\n        var _size_left$7 = BBL$size$(_left$5);\n        var _size_right$8 = BBL$size$(_right$6);\n        var _new_size$9 = ((1 + ((_size_left$7 + _size_right$8) >>> 0)) >>> 0);\n        var $441 = BBL$bin$(_new_size$9, _key$3, _val$4, _left$5, _right$6);\n        return $441;\n    };\n    const BBL$node = x0 => x1 => x2 => x3 => BBL$node$(x0, x1, x2, x3);\n\n    function Word$gtn$(_a$2, _b$3) {\n        var $442 = Cmp$as_gtn$(Word$cmp$(_a$2, _b$3));\n        return $442;\n    };\n    const Word$gtn = x0 => x1 => Word$gtn$(x0, x1);\n    const U32$gtn = a0 => a1 => (a0 > a1);\n\n    function BBL$balance$(_k$3, _v$4, _l$5, _r$6) {\n        var _size_l$7 = BBL$size$(_l$5);\n        var _size_r$8 = BBL$size$(_r$6);\n        var _size_l_plus_size_r$9 = ((_size_l$7 + _size_r$8) >>> 0);\n        var _w_x_size_l$10 = ((BBL$w * _size_l$7) >>> 0);\n        var _w_x_size_r$11 = ((BBL$w * _size_r$8) >>> 0);\n        var self = (_size_l_plus_size_r$9 < 2);\n        if (self) {\n            var $444 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n            var $443 = $444;\n        } else {\n            var self = (_size_r$8 > _w_x_size_l$10);\n            if (self) {\n                var self = _r$6;\n                switch (self._) {\n                    case 'BBL.bin':\n                        var $447 = self.key;\n                        var $448 = self.val;\n                        var $449 = self.left;\n                        var $450 = self.right;\n                        var _size_rl$17 = BBL$size$($449);\n                        var _size_rr$18 = BBL$size$($450);\n                        var self = (_size_rl$17 < _size_rr$18);\n                        if (self) {\n                            var _new_key$19 = $447;\n                            var _new_val$20 = $448;\n                            var _new_left$21 = BBL$node$(_k$3, _v$4, _l$5, $449);\n                            var _new_right$22 = $450;\n                            var $452 = BBL$node$(_new_key$19, _new_val$20, _new_left$21, _new_right$22);\n                            var $451 = $452;\n                        } else {\n                            var self = $449;\n                            switch (self._) {\n                                case 'BBL.bin':\n                                    var $454 = self.key;\n                                    var $455 = self.val;\n                                    var $456 = self.left;\n                                    var $457 = self.right;\n                                    var _new_key$24 = $454;\n                                    var _new_val$25 = $455;\n                                    var _new_left$26 = BBL$node$(_k$3, _v$4, _l$5, $456);\n                                    var _new_right$27 = BBL$node$($447, $448, $457, $450);\n                                    var $458 = BBL$node$(_new_key$24, _new_val$25, _new_left$26, _new_right$27);\n                                    var $453 = $458;\n                                    break;\n                                case 'BBL.tip':\n                                    var $459 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                                    var $453 = $459;\n                                    break;\n                            };\n                            var $451 = $453;\n                        };\n                        var $446 = $451;\n                        break;\n                    case 'BBL.tip':\n                        var $460 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                        var $446 = $460;\n                        break;\n                };\n                var $445 = $446;\n            } else {\n                var self = (_size_l$7 > _w_x_size_r$11);\n                if (self) {\n                    var self = _l$5;\n                    switch (self._) {\n                        case 'BBL.bin':\n                            var $463 = self.key;\n                            var $464 = self.val;\n                            var $465 = self.left;\n                            var $466 = self.right;\n                            var _size_ll$17 = BBL$size$($465);\n                            var _size_lr$18 = BBL$size$($466);\n                            var self = (_size_lr$18 < _size_ll$17);\n                            if (self) {\n                                var _new_key$19 = $463;\n                                var _new_val$20 = $464;\n                                var _new_left$21 = $465;\n                                var _new_right$22 = BBL$node$(_k$3, _v$4, $466, _r$6);\n                                var $468 = BBL$node$(_new_key$19, _new_val$20, _new_left$21, _new_right$22);\n                                var $467 = $468;\n                            } else {\n                                var self = $466;\n                                switch (self._) {\n                                    case 'BBL.bin':\n                                        var $470 = self.key;\n                                        var $471 = self.val;\n                                        var $472 = self.left;\n                                        var $473 = self.right;\n                                        var _new_key$24 = $470;\n                                        var _new_val$25 = $471;\n                                        var _new_left$26 = BBL$node$($463, $464, $465, $472);\n                                        var _new_right$27 = BBL$node$(_k$3, _v$4, $473, _r$6);\n                                        var $474 = BBL$node$(_new_key$24, _new_val$25, _new_left$26, _new_right$27);\n                                        var $469 = $474;\n                                        break;\n                                    case 'BBL.tip':\n                                        var $475 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                                        var $469 = $475;\n                                        break;\n                                };\n                                var $467 = $469;\n                            };\n                            var $462 = $467;\n                            break;\n                        case 'BBL.tip':\n                            var $476 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                            var $462 = $476;\n                            break;\n                    };\n                    var $461 = $462;\n                } else {\n                    var $477 = BBL$node$(_k$3, _v$4, _l$5, _r$6);\n                    var $461 = $477;\n                };\n                var $445 = $461;\n            };\n            var $443 = $445;\n        };\n        return $443;\n    };\n    const BBL$balance = x0 => x1 => x2 => x3 => BBL$balance$(x0, x1, x2, x3);\n\n    function BBL$insert$(_cmp$3, _key$4, _val$5, _map$6) {\n        var self = _map$6;\n        switch (self._) {\n            case 'BBL.bin':\n                var $479 = self.key;\n                var $480 = self.val;\n                var $481 = self.left;\n                var $482 = self.right;\n                var self = _cmp$3(_key$4)($479);\n                switch (self._) {\n                    case 'Cmp.ltn':\n                        var _new_key$12 = $479;\n                        var _new_val$13 = $480;\n                        var _new_left$14 = BBL$insert$(_cmp$3, _key$4, _val$5, $481);\n                        var _new_right$15 = $482;\n                        var $484 = BBL$balance$(_new_key$12, _new_val$13, _new_left$14, _new_right$15);\n                        var $483 = $484;\n                        break;\n                    case 'Cmp.eql':\n                        var $485 = BBL$node$(_key$4, _val$5, $481, $482);\n                        var $483 = $485;\n                        break;\n                    case 'Cmp.gtn':\n                        var _new_key$12 = $479;\n                        var _new_val$13 = $480;\n                        var _new_left$14 = $481;\n                        var _new_right$15 = BBL$insert$(_cmp$3, _key$4, _val$5, $482);\n                        var $486 = BBL$balance$(_new_key$12, _new_val$13, _new_left$14, _new_right$15);\n                        var $483 = $486;\n                        break;\n                };\n                var $478 = $483;\n                break;\n            case 'BBL.tip':\n                var $487 = BBL$singleton$(_key$4, _val$5);\n                var $478 = $487;\n                break;\n        };\n        return $478;\n    };\n    const BBL$insert = x0 => x1 => x2 => x3 => BBL$insert$(x0, x1, x2, x3);\n\n    function BBL$from_list$go$(_cmp$3, _acc$4, _xs$5) {\n        var BBL$from_list$go$ = (_cmp$3, _acc$4, _xs$5) => ({\n            ctr: 'TCO',\n            arg: [_cmp$3, _acc$4, _xs$5]\n        });\n        var BBL$from_list$go = _cmp$3 => _acc$4 => _xs$5 => BBL$from_list$go$(_cmp$3, _acc$4, _xs$5);\n        var arg = [_cmp$3, _acc$4, _xs$5];\n        while (true) {\n            let [_cmp$3, _acc$4, _xs$5] = arg;\n            var R = (() => {\n                var self = _xs$5;\n                switch (self._) {\n                    case 'List.cons':\n                        var $488 = self.head;\n                        var $489 = self.tail;\n                        var _key$8 = Pair$fst$($488);\n                        var _val$9 = Pair$snd$($488);\n                        var _new_acc$10 = BBL$insert$(_cmp$3, _key$8, _val$9, _acc$4);\n                        var $490 = BBL$from_list$go$(_cmp$3, _new_acc$10, $489);\n                        return $490;\n                    case 'List.nil':\n                        var $491 = _acc$4;\n                        return $491;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const BBL$from_list$go = x0 => x1 => x2 => BBL$from_list$go$(x0, x1, x2);\n\n    function BBL$from_list$(_cmp$3, _xs$4) {\n        var $492 = BBL$from_list$go$(_cmp$3, BBL$tip, _xs$4);\n        return $492;\n    };\n    const BBL$from_list = x0 => x1 => BBL$from_list$(x0, x1);\n    const U16$ltn = a0 => a1 => (a0 < a1);\n    const U16$eql = a0 => a1 => (a0 === a1);\n\n    function U16$cmp$(_a$1, _b$2) {\n        var self = (_a$1 < _b$2);\n        if (self) {\n            var $494 = Cmp$ltn;\n            var $493 = $494;\n        } else {\n            var self = (_a$1 === _b$2);\n            if (self) {\n                var $496 = Cmp$eql;\n                var $495 = $496;\n            } else {\n                var $497 = Cmp$gtn;\n                var $495 = $497;\n            };\n            var $493 = $495;\n        };\n        return $493;\n    };\n    const U16$cmp = x0 => x1 => U16$cmp$(x0, x1);\n\n    function String$cmp$(_a$1, _b$2) {\n        var String$cmp$ = (_a$1, _b$2) => ({\n            ctr: 'TCO',\n            arg: [_a$1, _b$2]\n        });\n        var String$cmp = _a$1 => _b$2 => String$cmp$(_a$1, _b$2);\n        var arg = [_a$1, _b$2];\n        while (true) {\n            let [_a$1, _b$2] = arg;\n            var R = (() => {\n                var self = _a$1;\n                if (self.length === 0) {\n                    var self = _b$2;\n                    if (self.length === 0) {\n                        var $499 = Cmp$eql;\n                        var $498 = $499;\n                    } else {\n                        var $500 = self.charCodeAt(0);\n                        var $501 = self.slice(1);\n                        var $502 = Cmp$ltn;\n                        var $498 = $502;\n                    };\n                    return $498;\n                } else {\n                    var $503 = self.charCodeAt(0);\n                    var $504 = self.slice(1);\n                    var self = _b$2;\n                    if (self.length === 0) {\n                        var $506 = Cmp$gtn;\n                        var $505 = $506;\n                    } else {\n                        var $507 = self.charCodeAt(0);\n                        var $508 = self.slice(1);\n                        var self = U16$cmp$($503, $507);\n                        switch (self._) {\n                            case 'Cmp.ltn':\n                                var $510 = Cmp$ltn;\n                                var $509 = $510;\n                                break;\n                            case 'Cmp.eql':\n                                var $511 = String$cmp$($504, $508);\n                                var $509 = $511;\n                                break;\n                            case 'Cmp.gtn':\n                                var $512 = Cmp$gtn;\n                                var $509 = $512;\n                                break;\n                        };\n                        var $505 = $509;\n                    };\n                    return $505;\n                };\n            })();\n            if (R.ctr === 'TCO') arg = R.arg;\n            else return R;\n        }\n    };\n    const String$cmp = x0 => x1 => String$cmp$(x0, x1);\n\n    function Map$from_list$(_xs$2) {\n        var $513 = BBL$from_list$(String$cmp, _xs$2);\n        return $513;\n    };\n    const Map$from_list = x0 => Map$from_list$(x0);\n\n    function App$Seta$draw$(_img$1, _state$2) {\n        var _img$3 = VoxBox$draw$arrow$(100, 20, 40, 100, 0, 20, ((0 | 0 | (0 << 8) | (0 << 16) | (255 << 24))), _img$1);\n        var $514 = DOM$vbox$(Map$from_list$(List$cons$(Pair$new$(\"id\", \"game_screen\"), List$cons$(Pair$new$(\"width\", \"500px\"), List$cons$(Pair$new$(\"height\", \"500px\"), List$cons$(Pair$new$(\"scale\", \"2\"), List$nil))))), Map$from_list$(List$nil), _img$3);\n        return $514;\n    };\n    const App$Seta$draw = x0 => x1 => App$Seta$draw$(x0, x1);\n\n    function IO$(_A$1) {\n        var $515 = null;\n        return $515;\n    };\n    const IO = x0 => IO$(x0);\n\n    function Maybe$(_A$1) {\n        var $516 = null;\n        return $516;\n    };\n    const Maybe = x0 => Maybe$(x0);\n    const App$State$local = Pair$fst;\n\n    function IO$ask$(_query$2, _param$3, _then$4) {\n        var $517 = ({\n            _: 'IO.ask',\n            'query': _query$2,\n            'param': _param$3,\n            'then': _then$4\n        });\n        return $517;\n    };\n    const IO$ask = x0 => x1 => x2 => IO$ask$(x0, x1, x2);\n\n    function IO$bind$(_a$3, _f$4) {\n        var self = _a$3;\n        switch (self._) {\n            case 'IO.end':\n                var $519 = self.value;\n                var $520 = _f$4($519);\n                var $518 = $520;\n                break;\n            case 'IO.ask':\n                var $521 = self.query;\n                var $522 = self.param;\n                var $523 = self.then;\n                var $524 = IO$ask$($521, $522, (_x$8 => {\n                    var $525 = IO$bind$($523(_x$8), _f$4);\n                    return $525;\n                }));\n                var $518 = $524;\n                break;\n        };\n        return $518;\n    };\n    const IO$bind = x0 => x1 => IO$bind$(x0, x1);\n\n    function IO$end$(_value$2) {\n        var $526 = ({\n            _: 'IO.end',\n            'value': _value$2\n        });\n        return $526;\n    };\n    const IO$end = x0 => IO$end$(x0);\n\n    function IO$monad$(_new$2) {\n        var $527 = _new$2(IO$bind)(IO$end);\n        return $527;\n    };\n    const IO$monad = x0 => IO$monad$(x0);\n\n    function IO$do$(_call$1, _param$2) {\n        var $528 = IO$ask$(_call$1, _param$2, (_answer$3 => {\n            var $529 = IO$end$(Unit$new);\n            return $529;\n        }));\n        return $528;\n    };\n    const IO$do = x0 => x1 => IO$do$(x0, x1);\n    const Maybe$none = ({\n        _: 'Maybe.none'\n    });\n    const App$pass = IO$monad$((_m$bind$2 => _m$pure$3 => {\n        var $530 = _m$pure$3;\n        return $530;\n    }))(Maybe$none);\n\n    function App$do$(_call$2, _param$3) {\n        var $531 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n            var $532 = _m$bind$4;\n            return $532;\n        }))(IO$do$(_call$2, _param$3))((_$4 => {\n            var $533 = App$pass;\n            return $533;\n        }));\n        return $531;\n    };\n    const App$do = x0 => x1 => App$do$(x0, x1);\n\n    function App$watch$(_room$2) {\n        var $534 = App$do$(\"watch\", _room$2);\n        return $534;\n    };\n    const App$watch = x0 => App$watch$(x0);\n    const App$room_zero = \"0x00000000000000\";\n\n    function String$cons$(_head$1, _tail$2) {\n        var $535 = (String.fromCharCode(_head$1) + _tail$2);\n        return $535;\n    };\n    const String$cons = x0 => x1 => String$cons$(x0, x1);\n    const String$concat = a0 => a1 => (a0 + a1);\n\n    function App$new_post$(_room$2, _data$3) {\n        var $536 = IO$monad$((_m$bind$4 => _m$pure$5 => {\n            var $537 = _m$bind$4;\n            return $537;\n        }))(App$do$(\"post\", (_room$2 + (\";\" + _data$3))))((_$4 => {\n            var $538 = App$pass;\n            return $538;\n        }));\n        return $536;\n    };\n    const App$new_post = x0 => x1 => App$new_post$(x0, x1);\n    const App$empty_post = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\n    function Maybe$some$(_value$2) {\n        var $539 = ({\n            _: 'Maybe.some',\n            'value': _value$2\n        });\n        return $539;\n    };\n    const Maybe$some = x0 => Maybe$some$(x0);\n\n    function App$set_local$(_value$2) {\n        var $540 = IO$monad$((_m$bind$3 => _m$pure$4 => {\n            var $541 = _m$pure$4;\n            return $541;\n        }))(Maybe$some$(_value$2));\n        return $540;\n    };\n    const App$set_local = x0 => App$set_local$(x0);\n\n    function App$Seta$when$(_event$1, _state$2) {\n        var self = _event$1;\n        switch (self._) {\n            case 'App.Event.init':\n                var $543 = IO$monad$((_m$bind$6 => _m$pure$7 => {\n                    var $544 = _m$bind$6;\n                    return $544;\n                }))(App$watch$(App$room_zero))((_$6 => {\n                    var $545 = App$new_post$(App$room_zero, App$empty_post);\n                    return $545;\n                }));\n                var $542 = $543;\n                break;\n            case 'App.Event.frame':\n            case 'App.Event.mouse_up':\n            case 'App.Event.key_down':\n            case 'App.Event.key_up':\n            case 'App.Event.mouse_move':\n            case 'App.Event.mouse_over':\n            case 'App.Event.mouse_click':\n            case 'App.Event.input':\n                var $546 = App$pass;\n                var $542 = $546;\n                break;\n            case 'App.Event.mouse_down':\n                var $547 = App$set_local$(((() => {\n                    var self = _state$2;\n                    switch (self._) {\n                        case 'App.Store.new':\n                            var $548 = self.local;\n                            var $549 = $548;\n                            return $549;\n                    };\n                })() + 1n));\n                var $542 = $547;\n                break;\n        };\n        return $542;\n    };\n    const App$Seta$when = x0 => x1 => App$Seta$when$(x0, x1);\n\n    function App$no_tick$(_tick$2, _glob$3) {\n        var $550 = _glob$3;\n        return $550;\n    };\n    const App$no_tick = x0 => x1 => App$no_tick$(x0, x1);\n    const App$Seta$tick = App$no_tick;\n\n    function App$Seta$post$(_time$1, _room$2, _addr$3, _data$4, _global_state$5) {\n        var $551 = (_global_state$5 + 1n);\n        return $551;\n    };\n    const App$Seta$post = x0 => x1 => x2 => x3 => x4 => App$Seta$post$(x0, x1, x2, x3, x4);\n    const App$Seta = (() => {\n        var _img$1 = VoxBox$alloc_capacity$(((65536 * 8) >>> 0));\n        var $552 = App$new$(App$Seta$init, App$Seta$draw(_img$1), App$Seta$when, App$Seta$tick, App$Seta$post);\n        return $552;\n    })();\n    return {\n        'Buffer32.new': Buffer32$new,\n        'Array': Array,\n        'Array.tip': Array$tip,\n        'Array.tie': Array$tie,\n        'Array.alloc': Array$alloc,\n        'U32.new': U32$new,\n        'Word': Word,\n        'Word.e': Word$e,\n        'Word.o': Word$o,\n        'Word.zero': Word$zero,\n        'Nat.succ': Nat$succ,\n        'Nat.zero': Nat$zero,\n        'U32.zero': U32$zero,\n        'Buffer32.alloc': Buffer32$alloc,\n        'Word.bit_length.go': Word$bit_length$go,\n        'Word.bit_length': Word$bit_length,\n        'U32.bit_length': U32$bit_length,\n        'Word.i': Word$i,\n        'Bool.false': Bool$false,\n        'Bool.true': Bool$true,\n        'Word.shift_left.one.go': Word$shift_left$one$go,\n        'Word.shift_left.one': Word$shift_left$one,\n        'Word.shift_left': Word$shift_left,\n        'Word.adder': Word$adder,\n        'Word.add': Word$add,\n        'Word.mul.go': Word$mul$go,\n        'Word.to_zero': Word$to_zero,\n        'Word.mul': Word$mul,\n        'U32.mul': U32$mul,\n        'Nat.apply': Nat$apply,\n        'Word.inc': Word$inc,\n        'Nat.to_word': Nat$to_word,\n        'Nat.to_u32': Nat$to_u32,\n        'VoxBox.new': VoxBox$new,\n        'VoxBox.alloc_capacity': VoxBox$alloc_capacity,\n        'App.new': App$new,\n        'Pair.new': Pair$new,\n        'App.State.new': App$State$new,\n        'App.Seta.State': App$Seta$State,\n        'App.Store.new': App$Store$new,\n        'App.Seta.init': App$Seta$init,\n        'Word.s_to_f64': Word$s_to_f64,\n        'I32.to_f64': I32$to_f64,\n        'Cmp.as_eql': Cmp$as_eql,\n        'Cmp.ltn': Cmp$ltn,\n        'Cmp.gtn': Cmp$gtn,\n        'Word.cmp.go': Word$cmp$go,\n        'Cmp.eql': Cmp$eql,\n        'Word.cmp': Word$cmp,\n        'Word.eql': Word$eql,\n        'F64.eql': F64$eql,\n        'F64.sub': F64$sub,\n        'F64.make': F64$make,\n        'F64.from_nat': F64$from_nat,\n        'F64.read': F64$read,\n        'F64.div': F64$div,\n        'F64.atan': F64$atan,\n        'Word.is_neg.go': Word$is_neg$go,\n        'Word.is_neg': Word$is_neg,\n        'Cmp.as_gtn': Cmp$as_gtn,\n        'Cmp.inv': Cmp$inv,\n        'Word.s_gtn': Word$s_gtn,\n        'F64.gtn': F64$gtn,\n        'Unit.new': Unit$new,\n        'Debug.log': Debug$log,\n        'F64.add': F64$add,\n        'F64.mul': F64$mul,\n        'F64.cos': F64$cos,\n        'F64.sin': F64$sin,\n        'F64.pow': F64$pow,\n        'F64.sqrt': F64$sqrt,\n        'VoxBox.Draw.arrow.distance': VoxBox$Draw$arrow$distance,\n        'I32.new': I32$new,\n        'Word.neg.aux': Word$neg$aux,\n        'Word.neg': Word$neg,\n        'Word.fold': Word$fold,\n        'Nat.add': Nat$add,\n        'Nat.mul': Nat$mul,\n        'Word.to_nat': Word$to_nat,\n        'Word.shl': Word$shl,\n        'Word.shift_right.one.go': Word$shift_right$one$go,\n        'Word.shift_right.one': Word$shift_right$one,\n        'Word.shift_right': Word$shift_right,\n        'Word.shr': Word$shr,\n        'Word.s_shr': Word$s_shr,\n        'I32.shr': I32$shr,\n        'I32.neg': I32$neg,\n        'Int.to_i32': Int$to_i32,\n        'Int.new': Int$new,\n        'Int.from_nat': Int$from_nat,\n        'I32.from_nat': I32$from_nat,\n        'Word.xor': Word$xor,\n        'I32.xor': I32$xor,\n        'I32.add': I32$add,\n        'I32.abs': I32$abs,\n        'Word.subber': Word$subber,\n        'Word.sub': Word$sub,\n        'I32.sub': I32$sub,\n        'Cmp.as_ltn': Cmp$as_ltn,\n        'Word.s_ltn': Word$s_ltn,\n        'I32.ltn': I32$ltn,\n        'List': List,\n        'Pair': Pair,\n        'I32.gtn': I32$gtn,\n        'I32.mul': I32$mul,\n        'I32.eql': I32$eql,\n        'List.cons': List$cons,\n        'VoxBox.Draw.line.coords.low.go': VoxBox$Draw$line$coords$low$go,\n        'List.nil': List$nil,\n        'VoxBox.Draw.line.coords.low': VoxBox$Draw$line$coords$low,\n        'VoxBox.Draw.line.coords.high.go': VoxBox$Draw$line$coords$high$go,\n        'VoxBox.Draw.line.coords.high': VoxBox$Draw$line$coords$high,\n        'VoxBox.Draw.line.coords': VoxBox$Draw$line$coords,\n        'List.for': List$for,\n        'Word.trim': Word$trim,\n        'Array.extract_tip': Array$extract_tip,\n        'Array.extract_tie': Array$extract_tie,\n        'Word.foldl': Word$foldl,\n        'Array.mut': Array$mut,\n        'Array.set': Array$set,\n        'Buffer32.set': Buffer32$set,\n        'VoxBox.set_pos': VoxBox$set_pos,\n        'U32.add': U32$add,\n        'VoxBox.set_col': VoxBox$set_col,\n        'VoxBox.set_length': VoxBox$set_length,\n        'VoxBox.push': VoxBox$push,\n        'Word.or': Word$or,\n        'U32.or': U32$or,\n        'U32.shl': U32$shl,\n        'Pos32.new': Pos32$new,\n        'F64.to_u32': F64$to_u32,\n        'I32.to_u32': I32$to_u32,\n        'VoxBox.Draw.line': VoxBox$Draw$line,\n        'F64.to_i32': F64$to_i32,\n        'VoxBox.draw.arrow': VoxBox$draw$arrow,\n        'Col32.new': Col32$new,\n        'U32.from_nat': U32$from_nat,\n        'DOM.vbox': DOM$vbox,\n        'BBL': BBL,\n        'Pair.fst': Pair$fst,\n        'Pair.snd': Pair$snd,\n        'BBL.bin': BBL$bin,\n        'BBL.tip': BBL$tip,\n        'BBL.singleton': BBL$singleton,\n        'BBL.size': BBL$size,\n        'BBL.w': BBL$w,\n        'Word.ltn': Word$ltn,\n        'U32.ltn': U32$ltn,\n        'BBL.node': BBL$node,\n        'Word.gtn': Word$gtn,\n        'U32.gtn': U32$gtn,\n        'BBL.balance': BBL$balance,\n        'BBL.insert': BBL$insert,\n        'BBL.from_list.go': BBL$from_list$go,\n        'BBL.from_list': BBL$from_list,\n        'U16.ltn': U16$ltn,\n        'U16.eql': U16$eql,\n        'U16.cmp': U16$cmp,\n        'String.cmp': String$cmp,\n        'Map.from_list': Map$from_list,\n        'App.Seta.draw': App$Seta$draw,\n        'IO': IO,\n        'Maybe': Maybe,\n        'App.State.local': App$State$local,\n        'IO.ask': IO$ask,\n        'IO.bind': IO$bind,\n        'IO.end': IO$end,\n        'IO.monad': IO$monad,\n        'IO.do': IO$do,\n        'Maybe.none': Maybe$none,\n        'App.pass': App$pass,\n        'App.do': App$do,\n        'App.watch': App$watch,\n        'App.room_zero': App$room_zero,\n        'String.cons': String$cons,\n        'String.concat': String$concat,\n        'App.new_post': App$new_post,\n        'App.empty_post': App$empty_post,\n        'Maybe.some': Maybe$some,\n        'App.set_local': App$set_local,\n        'App.Seta.when': App$Seta$when,\n        'App.no_tick': App$no_tick,\n        'App.Seta.tick': App$Seta$tick,\n        'App.Seta.post': App$Seta$post,\n        'App.Seta': App$Seta,\n    };\n})();"],"sourceRoot":""}