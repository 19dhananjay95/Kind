Kind.Parser.goal_rewrite: Parser(Kind.Term)
  Parser {
    get init = Kind.Parser.init;
    Kind.Parser.text_error("rewrite ", "Expected \"rewrite\"");
    get name = Parser.override_error!(Kind.Parser.name1, "Expected an identifier after rewrite");
    get u = Kind.Parser.text_error("in", "expected \"in\" after \"rewrite …\"");
    get type = Kind.Parser.term;
    get u = Kind.Parser.text_error("with", "expected \"with\" after \"rewrite … in …\"");
    get iseq = Kind.Parser.term;
    get body = Kind.Parser.term;
    get orig = Kind.Parser.stop(init);
    let moti = Kind.Term.lam(name, (s) Kind.Term.lam("", (x) type));
    let term = Kind.Term.ref("Equal.mirror");
    let term = Kind.Term.app(term, Kind.Term.hol(Bits.e)); 
    let term = Kind.Term.app(term, Kind.Term.hol(Bits.e));
    let term = Kind.Term.app(term, Kind.Term.hol(Bits.e));
    let term = Kind.Term.app(term, iseq);
    let term = Kind.Term.app(term, moti);
    let term = Kind.Term.app(term, body);
    return Kind.Term.ori(orig, term);
  }


