User.rigille.List.Perm.cat_comm<A: Type>(
  xs: List<A>
  ys: List<A>
): User.rigille.List.Perm<A>(ys ++ xs, xs ++ ys)
  def Perm = User.rigille.List.Perm<A>
  case xs {
    nil: lem = User.rigille.List.Perm.refl<A>(ys)
         calc = User.rigille.List.cat_l_nil!(ys)
         qed = lem :: rewrite X in (Perm(X, ys)) with calc
         qed
    cons: ind = User.rigille.List.Perm.cat_comm<A>(xs.tail, ys)
          lem_right = User.rigille.List.Perm.skip<A>(xs.head, _, _, ind)
          lem_left = User.rigille.List.Perm.front_to_back<A>(xs.head, ys)
          lem_left = User.rigille.List.Perm.push_tail<A>(_, _, xs.tail, lem_left)
          qed = User.rigille.List.Perm.trans<A>(_, _, _, lem_left, lem_right)
          calc = mirror(User.rigille.List.cat_assoc<A>(ys, [xs.head], xs.tail))
          qed = qed :: rewrite X in Perm(X, _) with calc
          qed
  }!
